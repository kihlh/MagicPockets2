"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const esbuild_1 = __importDefault(require("esbuild"));
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
let AppRoot = path_1.default.join(__filename, "..", "..");
const child_process_1 = require("child_process");
const nsfw_1 = require("./modules/nsfw");
const shake_1 = __importDefault(require("./modules/shake"));
const CleanCSS = require("clean-css");
const htmlMinify = require("html-minifier");
const log4js = require("log4js");
log4js.configure({ appenders: { cheese: { type: "file", filename: path_1.default.join(AppRoot, "webpack", "cheese.log") } }, categories: { default: { appenders: ["cheese"], level: "error" } } });
const log = log4js.getLogger("cheese");
log.level = "debug";
let _console = {
    log(level, ...args) {
        log.log(level, ...args);
        console.log(level, ...args);
    },
    error(message, ...args) {
        log.error(message, ...args);
        console.error(message, ...args);
    }
};
function Sleep(ms) { return new Promise(e => setTimeout(e, ms)); }
function NotFunction(...args) { }
let BuildCodeList = [];
let DefaultBuildCodeConfigure = {
    /**封包 */
    bundle: true,
    /**压缩 */
    minify: false,
    /**添加Map到文件尾部(写入同文件) */
    sourcemap: true,
    /**环境 */
    platform: "node",
    /**排除自定义封包和不支持的模块 */
    external: ["electron", "fonts.asar", "HMC.node", "./HMC.node"],
    /**内联封包 */
    format: 'iife',
};
/**处理结果 */
function onRebuild(error, result, Path) {
    if (error)
        _console.error("esbuild=>", 'watch build failed:', error),
            Path && _console.log("Path=>", Path);
    else {
        _console.log("esbuild=>", 'watch build succeeded:', result);
        Path && _console.log("Path=>", Path);
    }
}
BuildCodeList.push({
    /**主窗口 */
    entryPoints: [path_1.default.join(AppRoot, "view\\main\\index.ts")],
    outfile: path_1.default.join(AppRoot, "view\\main\\app"),
    watch: { onRebuild(...a) { onRebuild(...a, "主窗口"); } }
});
BuildCodeList.push({
    /**主窗口背景页的js已经更新 */
    entryPoints: [path_1.default.join(AppRoot, "preload/MainWindowPreload.ts")],
    outfile: path_1.default.join(AppRoot, "builds", "PreloadMain.js"),
    watch: { onRebuild(...a) { onRebuild(...a, "主窗口背景页的js已经更新"); } },
});
BuildCodeList.push({
    /**PhotoshopCli */
    entryPoints: [path_1.default.join(AppRoot, "view\\PhotoshopCli\\index.ts")],
    outfile: path_1.default.join(AppRoot, "view\\PhotoshopCli\\app"),
    watch: { onRebuild(...a) { onRebuild(...a, "PhotoshopCli"); } }
});
BuildCodeList.push({
    /**PhotoshopCli */
    entryPoints: [path_1.default.join(AppRoot, "view\\RunPhotoshop\\index.ts")],
    outfile: path_1.default.join(AppRoot, "view\\RunPhotoshop\\app"),
    watch: { onRebuild(...a) { onRebuild(...a, "RunPhotoshop"); } }
});
BuildCodeList.push({
    /**PhotoshopCli */
    entryPoints: [path_1.default.join(AppRoot, "view\\CodeEditor\\index.ts")],
    outfile: path_1.default.join(AppRoot, "view\\CodeEditor\\app"),
    watch: { onRebuild(...a) { onRebuild(...a, "CodeEditor"); } }
});
BuildCodeList.push({
    /**MainViewPreload */
    outfile: path_1.default.join(AppRoot, "builds", "PreloadView.js"),
    entryPoints: [path_1.default.join(AppRoot, "preload/MainViewPreload.ts")],
    watch: { onRebuild(...a) { onRebuild(...a, "MainViewPreload"); } },
});
BuildCodeList.push({
    /**主进程 */
    entryPoints: [path_1.default.join(AppRoot, "MainCore", "main.ts")],
    outfile: path_1.default.join(AppRoot, "builds", "main.js"),
    watch: { onRebuild(...a) { onRebuild(...a, "主进程"); } }
});
for (const BuildCodeDeploy of BuildCodeList)
    esbuild_1.default.build(Object.assign(DefaultBuildCodeConfigure, BuildCodeDeploy)).catch(() => _console.error);
_console.log("开始运行编译器");
// 代码压缩
const options = {
    includeAutoGeneratedTags: true,
    removeAttributeQuotes: true,
    removeComments: true,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    sortClassName: true,
    useShortDoctype: true,
    collapseWhitespace: true
};
/**
 * 替换代码文件中的文本内容
 * @param Path
 * @param Look
 * @param Replace
 * @returns
 */
function MatchCodeReplace(Path, Look, Replace) {
    return new Promise(async (resolve, reject) => {
        try {
            let ReadData = await fs_extra_1.default.readFile(Path).catch(NotFunction);
            if (!ReadData)
                return;
            let Text = ReadData.toString()?.replace(Look, Replace || "");
            fs_extra_1.default.writeFile(Path, Text).then(resolve).catch(() => _console.error);
            ;
        }
        catch (error) {
            _console.error("MatchCodeReplace=>", error, "\n", "Path=>", Path);
        }
    });
}
let on_Dir = new nsfw_1.nsfw(AppRoot, 1200);
on_Dir.on("change", async function (Path, dir, FileName) {
    if (Path.includes(".map") || Path.includes("node_modules") || shake_1.default.isset(Path, 1800))
        return;
    _console.log("change=>", Path);
    if (Path.includes("app\\view\\main\\index.html")) {
        let htmlPath = path_1.default.join(AppRoot, "view\\main\\index.html");
        let NewName = path_1.default.join(AppRoot, "view\\main\\app.html");
        let Data = htmlMinify.minify(((await fs_extra_1.default.readFile(htmlPath).catch(err => _console.error("esbuild=>", err))) || "").toString("utf-8").replace(/place([ ]+)?=([ ]+)?["'].+?["']/img, ""), options);
        let Data2 = (await (fs_extra_1.default.readFile(path_1.default.join(htmlPath, "..", "beautify.css")).catch(err => _console.error("esbuild=>", err))))?.toString("utf-8") || "";
        let CssOutput = new CleanCSS({}).minify(Data2);
        let CssCode = `<style>${CssOutput.styles}</style>`;
        CssCode = CssCode.replace(/@charset( +)?"UTF-8"( +)?;/, "");
        await fs_extra_1.default.writeFile(NewName, Data.replace(/\<link +rel=stylesheet +href=\.\/beautify.css\>/, CssCode)).catch(err => _console.error("esbuild=>", err));
    }
    if (Path.includes("builds\\PreloadMain.js")) {
        Sleep(600).finally(() => {
            if (shake_1.default.isset("MatchCodeReplace" + Path, 1500))
                return;
            MatchCodeReplace(Path, /\/\/# sourceMappingURL=PreloadMain\.js\.map/i, `\/\/# sourceMappingURL=file:///${path_1.default.join(AppRoot, "builds", "PreloadMain.js.map").replace(/\\/g, "/")}`);
        });
    }
    if (Path.includes("builds\\PreloadView.js")) {
        Sleep(600).finally(() => {
            if (shake_1.default.isset("MatchCodeReplace" + Path, 1500))
                return;
            MatchCodeReplace(Path, /\/\/# sourceMappingURL=PreloadView\.js\.map/i, `\/\/# sourceMappingURL=file:///${path_1.default.join(AppRoot, "builds", "PreloadView.js.map")}`.replace(/\\/g, "/"));
        });
    }
    let PackPathList = [
        {
            "path": path_1.default.join(AppRoot, "builds\\main.js"),
            "to": path_1.default.join(AppRoot, "builds\\pack\\app\\builds\\main.js")
        },
        {
            "path": path_1.default.join(AppRoot, "builds\\PreloadMain.js"),
            "to": path_1.default.join(AppRoot, "builds\\pack\\app\\builds\\PreloadMain.js")
        },
        {
            "path": path_1.default.join(AppRoot, "builds\\PreloadView.js"),
            "to": path_1.default.join(AppRoot, "builds\\pack\\app\\builds\\PreloadView.js")
        },
        {
            "path": path_1.default.join(AppRoot, "view\\main\\app"),
            "to": path_1.default.join(AppRoot, "builds\\pack\\app\\view\\main\\app")
        }, {
            "path": path_1.default.join(AppRoot, "view\\main\\app.css"),
            "to": path_1.default.join(AppRoot, "builds\\pack\\app\\view\\main\\app.css")
        }, {
            "path": path_1.default.join(AppRoot, "view\\main\\app.html"),
            "to": path_1.default.join(AppRoot, "builds\\pack\\app\\view\\main\\app.html")
        }, {
            "path": path_1.default.join(AppRoot, "view\\PhotoshopCli\\app"),
            "to": path_1.default.join(AppRoot, "builds\\pack\\app\\view\\PhotoshopCli\\app")
        }, {
            "path": path_1.default.join(AppRoot, "view\\PhotoshopCli\\app.css"),
            "to": path_1.default.join(AppRoot, "builds\\pack\\app\\view\\PhotoshopCli\\app.css")
        }, {
            "path": path_1.default.join(AppRoot, "view\\PhotoshopCli\\app.html"),
            "to": path_1.default.join(AppRoot, "builds\\pack\\app\\view\\PhotoshopCli\\app.html")
        }, {
            "path": path_1.default.join(AppRoot, "view\\loading\\火箭.json"),
            "to": path_1.default.join(AppRoot, "builds\\pack\\app\\view\\loading\\火箭.json")
        }, {
            "path": path_1.default.join(AppRoot, "view\\loading\\index.html"),
            "to": path_1.default.join(AppRoot, "builds\\pack\\app\\view\\loading\\index.html")
        }, {
            "path": path_1.default.join(AppRoot, "lib"),
            to() {
                return Path.replace(AppRoot, path_1.default.join(AppRoot, "builds\\pack\\app"));
            }
        }
    ];
    // for (const iterator of PackPathList) {
    //     let { to } = iterator;
    //     if (Path == iterator.path || (typeof to == "function" && Path.includes(iterator.path))) {
    //         setTimeout(function () {
    //             fs.stat(Path).then(Stats => {
    //                 if (Stats.isFile()) {
    //                     fs.copy(Path, typeof to == "string" ? to : to(Path)).catch(error => _console.error("PackPathError=>", Path, iterator.to, "\n", error));
    //                 }
    //             }).catch(() => _console.error);
    //         }, 1000)
    //     }
    // }
});
let tsc = (0, child_process_1.spawn)("tsc", ["-w"], {
    shell: "cmd",
    cwd: path_1.default.join(AppRoot)
});
tsc.on("close", function () {
    _console.log("tsc=>", "close");
});
tsc.stdout.on('data', (data) => {
    if (data.toString().includes("c"))
        return;
    _console.log(`tsc=> ${data}`);
});
//# sourceMappingURL=build.js.map