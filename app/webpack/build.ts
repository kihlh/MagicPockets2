import esbuild from "esbuild";
import path from "path";
import fs from "fs-extra";
let AppRoot = path.join(__filename,"..", "..");
import { spawn, exec } from 'child_process';
import { nsfw } from "./modules/nsfw";
import shake from "./modules/shake";
import CleanCSS = require('clean-css');
import htmlMinify = require('html-minifier');
import log4js = require("log4js");
log4js.configure({ appenders: { cheese: { type: "file", filename: path.join(AppRoot, "webpack", "cheese.log") } }, categories: { default: { appenders: ["cheese"], level: "error" } } });
const log = log4js.getLogger("cheese");
log.level = "debug";
let _console = {
    log(level: string | log4js.Level, ...args: any[]) {
        log.log(level, ...args);
        console.log(level, ...args)
    },
    error(message: any, ...args: any[]) {
        log.error(message, ...args);
        console.error(message, ...args)
    }

}
function Sleep(ms: number) { return new Promise(e => setTimeout(e, ms)); }
function NotFunction(...args: any[]) { }
let BuildCodeList: esbuild.BuildOptions[] = [];
let DefaultBuildCodeConfigure: esbuild.BuildOptions = {
    /**封包 */
    bundle: true,
    /**压缩 */
    minify: false,
    /**添加Map到文件尾部(写入同文件) */
    sourcemap: true,
    /**环境 */
    platform: "node",
    /**排除自定义封包和不支持的模块 */
    external: ["electron", "fonts.asar","HMC.node","./HMC.node"],
    /**内联封包 */
    format: 'iife',
}
/**处理结果 */
function onRebuild(error: esbuild.BuildFailure | null, result: esbuild.BuildResult | null, Path?: string) {
    if (error) _console.error("esbuild=>", 'watch build failed:', error),
        Path && _console.log("Path=>", Path)
    else {
        _console.log("esbuild=>", 'watch build succeeded:', result)
        Path && _console.log("Path=>", Path)
    }
}









BuildCodeList.push({
    /**主窗口 */
    entryPoints: [path.join(AppRoot, "view\\main\\index.ts")],
    outfile: path.join(AppRoot, "view\\main\\app"),
    watch: { onRebuild(...a) { onRebuild(...a, "主窗口") } }
})
BuildCodeList.push({
    /**主窗口背景页的js已经更新 */
    entryPoints: [path.join(AppRoot, "preload/MainWindowPreload.ts")],
    outfile: path.join(AppRoot, "builds", "PreloadMain.js"),
    watch: { onRebuild(...a) { onRebuild(...a, "主窗口背景页的js已经更新") } },
})
BuildCodeList.push({
    /**PhotoshopCli */
    entryPoints: [path.join(AppRoot, "view\\PhotoshopCli\\index.ts")],
    outfile: path.join(AppRoot, "view\\PhotoshopCli\\app"),
    watch: { onRebuild(...a) { onRebuild(...a, "PhotoshopCli") } }
})
BuildCodeList.push({
    /**PhotoshopCli */
    entryPoints: [path.join(AppRoot, "view\\RunPhotoshop\\index.ts")],
    outfile: path.join(AppRoot, "view\\RunPhotoshop\\app"),
    watch: { onRebuild(...a) { onRebuild(...a, "RunPhotoshop") } }
})
BuildCodeList.push({
    /**PhotoshopCli */
    entryPoints: [path.join(AppRoot, "view\\CodeEditor\\index.ts")],
    outfile: path.join(AppRoot, "view\\CodeEditor\\app"),
    watch: { onRebuild(...a) { onRebuild(...a, "CodeEditor") } }
})

BuildCodeList.push({
    /**MainViewPreload */
    outfile: path.join(AppRoot, "builds", "PreloadView.js"),
    entryPoints: [path.join(AppRoot, "preload/MainViewPreload.ts")],
    watch: { onRebuild(...a) { onRebuild(...a, "MainViewPreload") } },
})
BuildCodeList.push({
    /**主进程 */
    entryPoints: [path.join(AppRoot,"MainCore", "main.ts")],
    outfile: path.join(AppRoot, "builds", "main.js"),
    watch: { onRebuild(...a) { onRebuild(...a, "主进程") } }
})














for (const BuildCodeDeploy of BuildCodeList) esbuild.build(Object.assign(DefaultBuildCodeConfigure, BuildCodeDeploy)).catch(() => _console.error);


_console.log("开始运行编译器");






// 代码压缩

const options = {
    includeAutoGeneratedTags: true,
    removeAttributeQuotes: true,
    removeComments: true,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    sortClassName: true,
    useShortDoctype: true,
    collapseWhitespace: true
};
/**
 * 替换代码文件中的文本内容
 * @param Path 
 * @param Look 
 * @param Replace 
 * @returns 
 */
function MatchCodeReplace(Path: string, Look: string | RegExp, Replace?: string) {
    return new Promise(async (resolve, reject) => {
        try {
            let ReadData: Buffer | void = await fs.readFile(Path).catch(NotFunction);
            if (!ReadData) return;
            let Text = ReadData.toString()?.replace(Look, Replace || "");
            fs.writeFile(Path, Text).then(resolve).catch(() => _console.error);;
        } catch (error) {
            _console.error("MatchCodeReplace=>", error, "\n", "Path=>", Path)
        }
    })
}

let on_Dir = new nsfw(AppRoot, 1200);
on_Dir.on("change", async function (Path: string, dir: string, FileName: string) {
    if (Path.includes(".map") || Path.includes("node_modules") || shake.isset(Path, 1800)) return;
    _console.log("change=>", Path);
    if (Path.includes("app\\view\\main\\index.html")) {
        let htmlPath = path.join(AppRoot, "view\\main\\index.html");
        let NewName = path.join(AppRoot, "view\\main\\app.html");
        let Data = htmlMinify.minify(((await fs.readFile(htmlPath).catch(err => _console.error("esbuild=>", err))) || "").toString("utf-8").replace(/place([ ]+)?=([ ]+)?["'].+?["']/img, ""), options);
        let Data2 = (await (fs.readFile(path.join(htmlPath, "..", "beautify.css")).catch(err => _console.error("esbuild=>", err))))?.toString("utf-8") || "";
        let CssOutput = new CleanCSS({}).minify(Data2);
        let CssCode = `<style>${CssOutput.styles}</style>`;
        CssCode = CssCode.replace(/@charset( +)?"UTF-8"( +)?;/, "");

        await fs.writeFile(NewName, Data.replace(/\<link +rel=stylesheet +href=\.\/beautify.css\>/, CssCode)).catch(err => _console.error("esbuild=>", err))
    }
    if (Path.includes("builds\\PreloadMain.js")) {
         Sleep(600).finally(() => {
            if(shake.isset("MatchCodeReplace"+Path, 1500)) return;
            MatchCodeReplace(Path, /\/\/# sourceMappingURL=PreloadMain\.js\.map/i, `\/\/# sourceMappingURL=file:///${path.join(AppRoot, "builds", "PreloadMain.js.map").replace(/\\/g, "/")}`);
        })
    }
    if (Path.includes("builds\\PreloadView.js")) {
         Sleep(600).finally(() => {
            if(shake.isset("MatchCodeReplace"+Path, 1500)) return;
            MatchCodeReplace(Path, /\/\/# sourceMappingURL=PreloadView\.js\.map/i, `\/\/# sourceMappingURL=file:///${path.join(AppRoot, "builds", "PreloadView.js.map")}`.replace(/\\/g, "/"))
        })
    }
    let PackPathList: { path: string, to: string | ((Path: string) => string) }[] = [
        {
            "path": path.join(AppRoot, "builds\\main.js"),
            "to": path.join(AppRoot, "builds\\pack\\app\\builds\\main.js")
        },
        {
            "path": path.join(AppRoot, "builds\\PreloadMain.js"),
            "to": path.join(AppRoot, "builds\\pack\\app\\builds\\PreloadMain.js")
        },
        {
            "path": path.join(AppRoot, "builds\\PreloadView.js"),
            "to": path.join(AppRoot, "builds\\pack\\app\\builds\\PreloadView.js")
        },
        {
            "path": path.join(AppRoot, "view\\main\\app"),
            "to": path.join(AppRoot, "builds\\pack\\app\\view\\main\\app")
        }, {
            "path": path.join(AppRoot, "view\\main\\app.css"),
            "to": path.join(AppRoot, "builds\\pack\\app\\view\\main\\app.css")
        }, {
            "path": path.join(AppRoot, "view\\main\\app.html"),
            "to": path.join(AppRoot, "builds\\pack\\app\\view\\main\\app.html")
        }, {
            "path": path.join(AppRoot, "view\\PhotoshopCli\\app"),
            "to": path.join(AppRoot, "builds\\pack\\app\\view\\PhotoshopCli\\app")
        }, {
            "path": path.join(AppRoot, "view\\PhotoshopCli\\app.css"),
            "to": path.join(AppRoot, "builds\\pack\\app\\view\\PhotoshopCli\\app.css")
        }, {
            "path": path.join(AppRoot, "view\\PhotoshopCli\\app.html"),
            "to": path.join(AppRoot, "builds\\pack\\app\\view\\PhotoshopCli\\app.html")
        }, {
            "path": path.join(AppRoot, "view\\loading\\火箭.json"),
            "to": path.join(AppRoot, "builds\\pack\\app\\view\\loading\\火箭.json")
        }, {
            "path": path.join(AppRoot, "view\\loading\\index.html"),
            "to": path.join(AppRoot, "builds\\pack\\app\\view\\loading\\index.html")
        }, {
            "path": path.join(AppRoot, "lib"),
            to() {
                return Path.replace(AppRoot, path.join(AppRoot, "builds\\pack\\app"))
            }
        }
    ]
    // for (const iterator of PackPathList) {
    //     let { to } = iterator;

    //     if (Path == iterator.path || (typeof to == "function" && Path.includes(iterator.path))) {
    //         setTimeout(function () {
    //             fs.stat(Path).then(Stats => {
    //                 if (Stats.isFile()) {
    //                     fs.copy(Path, typeof to == "string" ? to : to(Path)).catch(error => _console.error("PackPathError=>", Path, iterator.to, "\n", error));
    //                 }
    //             }).catch(() => _console.error);
    //         }, 1000)
    //     }

    // }
});


let tsc = spawn("tsc", ["-w"], {
    shell: "cmd",
    cwd: path.join(AppRoot,)
});


tsc.on("close", function () {
    _console.log("tsc=>", "close");
})


tsc.stdout.on('data', (data: Buffer) => {
    if (data.toString().includes("c")) return;
    _console.log(`tsc=> ${data}`);
});

type encodingTypeof = |
    "cp936" | "win1251" | "utf8" | "us-ascii" | "utf-32be" | "utf-16be" | "ucs2" | "utf16-le" |
    "ascii" | "binary" | "base64" | "hex" | "utf16" | "utf-7" | "utf-7-imap" | "utf32" | "ISO-8859" |
    "ISO-8859" | "family" | "Windows 125x family" | "IBM/DOS" | "'us-ascii" | "latin1" |
    "EUC-JP." | "Shift_JIS" | "GB18030" | "GBK" | "GB2312" | "CP950" | "CP949" | "CP936" | "CP932"
