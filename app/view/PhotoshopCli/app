"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b2) => (typeof require !== "undefined" ? require : a)[b2]
  }) : x)(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x + '" is not supported');
  });
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // ../modules/tdesign/tdesign.js
  var require_tdesign = __commonJS({
    "../modules/tdesign/tdesign.js"(exports) {
      "use strict";
      (function(global2, factory) {
        global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.TDesign = {}, global2.Vue);
      })(exports, function(exports2, vue) {
        "use strict";
        function _arrayLikeToArray$1(arr, len) {
          if (len == null || len > arr.length)
            len = arr.length;
          for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
            arr2[i2] = arr[i2];
          }
          return arr2;
        }
        function _arrayWithoutHoles(arr) {
          if (Array.isArray(arr))
            return _arrayLikeToArray$1(arr);
        }
        function _iterableToArray(iter) {
          if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
            return Array.from(iter);
        }
        function _unsupportedIterableToArray$1(o, minLen) {
          if (!o)
            return;
          if (typeof o === "string")
            return _arrayLikeToArray$1(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor)
            n = o.constructor.name;
          if (n === "Map" || n === "Set")
            return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
            return _arrayLikeToArray$1(o, minLen);
        }
        function _nonIterableSpread() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        function _toConsumableArray(arr) {
          return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread();
        }
        function _defineProperty$3(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function _arrayWithHoles(arr) {
          if (Array.isArray(arr))
            return arr;
        }
        function _iterableToArrayLimit(arr, i2) {
          var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
          if (_i == null)
            return;
          var _arr = [];
          var _n = true;
          var _d = false;
          var _s, _e;
          try {
            for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
              _arr.push(_s.value);
              if (i2 && _arr.length === i2)
                break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i["return"] != null)
                _i["return"]();
            } finally {
              if (_d)
                throw _e;
            }
          }
          return _arr;
        }
        function _nonIterableRest() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        function _slicedToArray(arr, i2) {
          return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray$1(arr, i2) || _nonIterableRest();
        }
        function setStyle$1(el, styles) {
          var keys2 = Object.keys(styles);
          keys2.forEach(function(key) {
            el.style[key] = styles[key];
          });
        }
        function _objectWithoutPropertiesLoose$1(source, excluded) {
          if (source == null)
            return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i2;
          for (i2 = 0; i2 < sourceKeys.length; i2++) {
            key = sourceKeys[i2];
            if (excluded.indexOf(key) >= 0)
              continue;
            target[key] = source[key];
          }
          return target;
        }
        function _objectWithoutProperties$1(source, excluded) {
          if (source == null)
            return {};
          var target = _objectWithoutPropertiesLoose$1(source, excluded);
          var key, i2;
          if (Object.getOwnPropertySymbols) {
            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
            for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
              key = sourceSymbolKeys[i2];
              if (excluded.indexOf(key) >= 0)
                continue;
              if (!Object.prototype.propertyIsEnumerable.call(source, key))
                continue;
              target[key] = source[key];
            }
          }
          return target;
        }
        function getIEVersion() {
          var _navigator = navigator, userAgent2 = _navigator.userAgent;
          var isIE = userAgent2.indexOf("compatible") > -1 && userAgent2.indexOf("MSIE") > -1;
          var isIE11 = userAgent2.indexOf("Trident") > -1 && userAgent2.indexOf("rv:11.0") > -1;
          if (isIE) {
            var reIE = new RegExp("MSIE (\\d+\\.\\d+);");
            var match = userAgent2.match(reIE);
            if (!match)
              return -1;
            var fIEVersion = parseFloat(match[1]);
            return fIEVersion < 7 ? 6 : fIEVersion;
          }
          if (isIE11) {
            return 11;
          }
          return Number.MAX_SAFE_INTEGER;
        }
        function ownKeys$2s(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$2r(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$2s(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2s(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function circleAdapter(circleElem) {
          var _window, _window$getComputedSt2, _window2, _window2$navigator;
          var basicStyle = {};
          if (!circleElem) {
            return;
          }
          var _window$getComputedSt = (_window = window) === null || _window === void 0 ? void 0 : (_window$getComputedSt2 = _window.getComputedStyle) === null || _window$getComputedSt2 === void 0 ? void 0 : _window$getComputedSt2.call(_window, circleElem), color = _window$getComputedSt.color, fontSize = _window$getComputedSt.fontSize;
          var ua = (_window2 = window) === null || _window2 === void 0 ? void 0 : (_window2$navigator = _window2.navigator) === null || _window2$navigator === void 0 ? void 0 : _window2$navigator.userAgent;
          var isSafari = /Safari/.test(ua) && !/Chrome/.test(ua);
          if (isSafari) {
            basicStyle = {
              transformOrigin: "-1px -1px",
              transform: "scale(".concat(parseInt(fontSize, 10) / 14, ")")
            };
          }
          if (color && getIEVersion() > 11) {
            var matched = color.match(/[\d.]+/g);
            var endColor = matched ? "rgba(".concat(matched[0], ", ").concat(matched[1], ", ").concat(matched[2], ", 0)") : "";
            setStyle$1(circleElem, _objectSpread$2r(_objectSpread$2r({}, basicStyle), {}, {
              background: "conic-gradient(from 90deg at 50% 50%,".concat(endColor, " 0deg, ").concat(color, " 360deg)")
            }));
          } else {
            setStyle$1(circleElem, _objectSpread$2r(_objectSpread$2r({}, basicStyle), {}, {
              background: ""
            }));
          }
        }
        var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
        function getDefaultExportFromCjs(x) {
          return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
        }
        function listCacheClear$1() {
          this.__data__ = [];
          this.size = 0;
        }
        var _listCacheClear = listCacheClear$1;
        function eq$6(value, other) {
          return value === other || value !== value && other !== other;
        }
        var eq_1 = eq$6;
        var eq$5 = eq_1;
        function assocIndexOf$4(array, key) {
          var length = array.length;
          while (length--) {
            if (eq$5(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        var _assocIndexOf = assocIndexOf$4;
        var assocIndexOf$3 = _assocIndexOf;
        var arrayProto = Array.prototype;
        var splice = arrayProto.splice;
        function listCacheDelete$1(key) {
          var data = this.__data__, index2 = assocIndexOf$3(data, key);
          if (index2 < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index2 == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index2, 1);
          }
          --this.size;
          return true;
        }
        var _listCacheDelete = listCacheDelete$1;
        var assocIndexOf$2 = _assocIndexOf;
        function listCacheGet$1(key) {
          var data = this.__data__, index2 = assocIndexOf$2(data, key);
          return index2 < 0 ? void 0 : data[index2][1];
        }
        var _listCacheGet = listCacheGet$1;
        var assocIndexOf$1 = _assocIndexOf;
        function listCacheHas$1(key) {
          return assocIndexOf$1(this.__data__, key) > -1;
        }
        var _listCacheHas = listCacheHas$1;
        var assocIndexOf = _assocIndexOf;
        function listCacheSet$1(key, value) {
          var data = this.__data__, index2 = assocIndexOf(data, key);
          if (index2 < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index2][1] = value;
          }
          return this;
        }
        var _listCacheSet = listCacheSet$1;
        var listCacheClear = _listCacheClear, listCacheDelete = _listCacheDelete, listCacheGet = _listCacheGet, listCacheHas = _listCacheHas, listCacheSet = _listCacheSet;
        function ListCache$4(entries) {
          var index2 = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index2 < length) {
            var entry = entries[index2];
            this.set(entry[0], entry[1]);
          }
        }
        ListCache$4.prototype.clear = listCacheClear;
        ListCache$4.prototype["delete"] = listCacheDelete;
        ListCache$4.prototype.get = listCacheGet;
        ListCache$4.prototype.has = listCacheHas;
        ListCache$4.prototype.set = listCacheSet;
        var _ListCache = ListCache$4;
        var ListCache$3 = _ListCache;
        function stackClear$1() {
          this.__data__ = new ListCache$3();
          this.size = 0;
        }
        var _stackClear = stackClear$1;
        function stackDelete$1(key) {
          var data = this.__data__, result = data["delete"](key);
          this.size = data.size;
          return result;
        }
        var _stackDelete = stackDelete$1;
        function stackGet$1(key) {
          return this.__data__.get(key);
        }
        var _stackGet = stackGet$1;
        function stackHas$1(key) {
          return this.__data__.has(key);
        }
        var _stackHas = stackHas$1;
        function _typeof$2(obj) {
          "@babel/helpers - typeof";
          return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
            return typeof obj2;
          } : function(obj2) {
            return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
          }, _typeof$2(obj);
        }
        var freeGlobal$1 = _typeof$2(commonjsGlobal) == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
        var _freeGlobal = freeGlobal$1;
        var freeGlobal = _freeGlobal;
        var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof$2(self)) == "object" && self && self.Object === Object && self;
        var root$a = freeGlobal || freeSelf || Function("return this")();
        var _root = root$a;
        var root$9 = _root;
        var _Symbol2 = root$9.Symbol;
        var _Symbol$6 = _Symbol2;
        var _Symbol$5 = _Symbol$6;
        var objectProto$i = Object.prototype;
        var hasOwnProperty$g = objectProto$i.hasOwnProperty;
        var nativeObjectToString$1 = objectProto$i.toString;
        var symToStringTag$1 = _Symbol$5 ? _Symbol$5.toStringTag : void 0;
        function getRawTag$1(value) {
          var isOwn = hasOwnProperty$g.call(value, symToStringTag$1), tag = value[symToStringTag$1];
          try {
            value[symToStringTag$1] = void 0;
            var unmasked = true;
          } catch (e) {
          }
          var result = nativeObjectToString$1.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag$1] = tag;
            } else {
              delete value[symToStringTag$1];
            }
          }
          return result;
        }
        var _getRawTag = getRawTag$1;
        var objectProto$h = Object.prototype;
        var nativeObjectToString = objectProto$h.toString;
        function objectToString$1(value) {
          return nativeObjectToString.call(value);
        }
        var _objectToString = objectToString$1;
        var _Symbol$4 = _Symbol$6, getRawTag = _getRawTag, objectToString = _objectToString;
        var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
        var symToStringTag = _Symbol$4 ? _Symbol$4.toStringTag : void 0;
        function baseGetTag$a(value) {
          if (value == null) {
            return value === void 0 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
        }
        var _baseGetTag = baseGetTag$a;
        function isObject$d(value) {
          var type = _typeof$2(value);
          return value != null && (type == "object" || type == "function");
        }
        var isObject_1 = isObject$d;
        var baseGetTag$9 = _baseGetTag, isObject$c = isObject_1;
        var asyncTag = "[object AsyncFunction]", funcTag$2 = "[object Function]", genTag$1 = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
        function isFunction$3(value) {
          if (!isObject$c(value)) {
            return false;
          }
          var tag = baseGetTag$9(value);
          return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
        }
        var isFunction_1 = isFunction$3;
        var root$8 = _root;
        var coreJsData$1 = root$8["__core-js_shared__"];
        var _coreJsData = coreJsData$1;
        var coreJsData = _coreJsData;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        function isMasked$1(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var _isMasked = isMasked$1;
        var funcProto$2 = Function.prototype;
        var funcToString$2 = funcProto$2.toString;
        function toSource$2(func) {
          if (func != null) {
            try {
              return funcToString$2.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        var _toSource = toSource$2;
        var isFunction$2 = isFunction_1, isMasked = _isMasked, isObject$b = isObject_1, toSource$1 = _toSource;
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
        var reIsHostCtor = /^\[object .+?Constructor\]$/;
        var funcProto$1 = Function.prototype, objectProto$g = Object.prototype;
        var funcToString$1 = funcProto$1.toString;
        var hasOwnProperty$f = objectProto$g.hasOwnProperty;
        var reIsNative = RegExp("^" + funcToString$1.call(hasOwnProperty$f).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        function baseIsNative$1(value) {
          if (!isObject$b(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction$2(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource$1(value));
        }
        var _baseIsNative = baseIsNative$1;
        function getValue$1(object, key) {
          return object == null ? void 0 : object[key];
        }
        var _getValue = getValue$1;
        var baseIsNative = _baseIsNative, getValue = _getValue;
        function getNative$7(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : void 0;
        }
        var _getNative = getNative$7;
        var getNative$6 = _getNative, root$7 = _root;
        var Map$4 = getNative$6(root$7, "Map");
        var _Map = Map$4;
        var getNative$5 = _getNative;
        var nativeCreate$4 = getNative$5(Object, "create");
        var _nativeCreate = nativeCreate$4;
        var nativeCreate$3 = _nativeCreate;
        function hashClear$1() {
          this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
          this.size = 0;
        }
        var _hashClear = hashClear$1;
        function hashDelete$1(key) {
          var result = this.has(key) && delete this.__data__[key];
          this.size -= result ? 1 : 0;
          return result;
        }
        var _hashDelete = hashDelete$1;
        var nativeCreate$2 = _nativeCreate;
        var HASH_UNDEFINED$2 = "__lodash_hash_undefined__";
        var objectProto$f = Object.prototype;
        var hasOwnProperty$e = objectProto$f.hasOwnProperty;
        function hashGet$1(key) {
          var data = this.__data__;
          if (nativeCreate$2) {
            var result = data[key];
            return result === HASH_UNDEFINED$2 ? void 0 : result;
          }
          return hasOwnProperty$e.call(data, key) ? data[key] : void 0;
        }
        var _hashGet = hashGet$1;
        var nativeCreate$1 = _nativeCreate;
        var objectProto$e = Object.prototype;
        var hasOwnProperty$d = objectProto$e.hasOwnProperty;
        function hashHas$1(key) {
          var data = this.__data__;
          return nativeCreate$1 ? data[key] !== void 0 : hasOwnProperty$d.call(data, key);
        }
        var _hashHas = hashHas$1;
        var nativeCreate = _nativeCreate;
        var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
        function hashSet$1(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED$1 : value;
          return this;
        }
        var _hashSet = hashSet$1;
        var hashClear = _hashClear, hashDelete = _hashDelete, hashGet = _hashGet, hashHas = _hashHas, hashSet = _hashSet;
        function Hash$1(entries) {
          var index2 = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index2 < length) {
            var entry = entries[index2];
            this.set(entry[0], entry[1]);
          }
        }
        Hash$1.prototype.clear = hashClear;
        Hash$1.prototype["delete"] = hashDelete;
        Hash$1.prototype.get = hashGet;
        Hash$1.prototype.has = hashHas;
        Hash$1.prototype.set = hashSet;
        var _Hash = Hash$1;
        var Hash = _Hash, ListCache$2 = _ListCache, Map$3 = _Map;
        function mapCacheClear$1() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map$3 || ListCache$2)(),
            "string": new Hash()
          };
        }
        var _mapCacheClear = mapCacheClear$1;
        function isKeyable$1(value) {
          var type = _typeof$2(value);
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        var _isKeyable = isKeyable$1;
        var isKeyable = _isKeyable;
        function getMapData$4(map, key) {
          var data = map.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        var _getMapData = getMapData$4;
        var getMapData$3 = _getMapData;
        function mapCacheDelete$1(key) {
          var result = getMapData$3(this, key)["delete"](key);
          this.size -= result ? 1 : 0;
          return result;
        }
        var _mapCacheDelete = mapCacheDelete$1;
        var getMapData$2 = _getMapData;
        function mapCacheGet$1(key) {
          return getMapData$2(this, key).get(key);
        }
        var _mapCacheGet = mapCacheGet$1;
        var getMapData$1 = _getMapData;
        function mapCacheHas$1(key) {
          return getMapData$1(this, key).has(key);
        }
        var _mapCacheHas = mapCacheHas$1;
        var getMapData = _getMapData;
        function mapCacheSet$1(key, value) {
          var data = getMapData(this, key), size = data.size;
          data.set(key, value);
          this.size += data.size == size ? 0 : 1;
          return this;
        }
        var _mapCacheSet = mapCacheSet$1;
        var mapCacheClear = _mapCacheClear, mapCacheDelete = _mapCacheDelete, mapCacheGet = _mapCacheGet, mapCacheHas = _mapCacheHas, mapCacheSet = _mapCacheSet;
        function MapCache$3(entries) {
          var index2 = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index2 < length) {
            var entry = entries[index2];
            this.set(entry[0], entry[1]);
          }
        }
        MapCache$3.prototype.clear = mapCacheClear;
        MapCache$3.prototype["delete"] = mapCacheDelete;
        MapCache$3.prototype.get = mapCacheGet;
        MapCache$3.prototype.has = mapCacheHas;
        MapCache$3.prototype.set = mapCacheSet;
        var _MapCache = MapCache$3;
        var ListCache$1 = _ListCache, Map$2 = _Map, MapCache$2 = _MapCache;
        var LARGE_ARRAY_SIZE$1 = 200;
        function stackSet$1(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache$1) {
            var pairs = data.__data__;
            if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE$1 - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache$2(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        var _stackSet = stackSet$1;
        var ListCache = _ListCache, stackClear = _stackClear, stackDelete = _stackDelete, stackGet = _stackGet, stackHas = _stackHas, stackSet = _stackSet;
        function Stack$4(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        Stack$4.prototype.clear = stackClear;
        Stack$4.prototype["delete"] = stackDelete;
        Stack$4.prototype.get = stackGet;
        Stack$4.prototype.has = stackHas;
        Stack$4.prototype.set = stackSet;
        var _Stack = Stack$4;
        function arrayEach$1(array, iteratee) {
          var index2 = -1, length = array == null ? 0 : array.length;
          while (++index2 < length) {
            if (iteratee(array[index2], index2, array) === false) {
              break;
            }
          }
          return array;
        }
        var _arrayEach = arrayEach$1;
        var getNative$4 = _getNative;
        var defineProperty$2 = function() {
          try {
            var func = getNative$4(Object, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        var _defineProperty$2 = defineProperty$2;
        var defineProperty$1 = _defineProperty$2;
        function baseAssignValue$3(object, key, value) {
          if (key == "__proto__" && defineProperty$1) {
            defineProperty$1(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        var _baseAssignValue = baseAssignValue$3;
        var baseAssignValue$2 = _baseAssignValue, eq$4 = eq_1;
        var objectProto$d = Object.prototype;
        var hasOwnProperty$c = objectProto$d.hasOwnProperty;
        function assignValue$3(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty$c.call(object, key) && eq$4(objValue, value)) || value === void 0 && !(key in object)) {
            baseAssignValue$2(object, key, value);
          }
        }
        var _assignValue = assignValue$3;
        var assignValue$2 = _assignValue, baseAssignValue$1 = _baseAssignValue;
        function copyObject$7(source, props2, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index2 = -1, length = props2.length;
          while (++index2 < length) {
            var key = props2[index2];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
            if (newValue === void 0) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue$1(object, key, newValue);
            } else {
              assignValue$2(object, key, newValue);
            }
          }
          return object;
        }
        var _copyObject = copyObject$7;
        function baseTimes$1(n, iteratee) {
          var index2 = -1, result = Array(n);
          while (++index2 < n) {
            result[index2] = iteratee(index2);
          }
          return result;
        }
        var _baseTimes = baseTimes$1;
        function isObjectLike$d(value) {
          return value != null && _typeof$2(value) == "object";
        }
        var isObjectLike_1 = isObjectLike$d;
        var baseGetTag$8 = _baseGetTag, isObjectLike$c = isObjectLike_1;
        var argsTag$3 = "[object Arguments]";
        function baseIsArguments$1(value) {
          return isObjectLike$c(value) && baseGetTag$8(value) == argsTag$3;
        }
        var _baseIsArguments = baseIsArguments$1;
        var baseIsArguments = _baseIsArguments, isObjectLike$b = isObjectLike_1;
        var objectProto$c = Object.prototype;
        var hasOwnProperty$b = objectProto$c.hasOwnProperty;
        var propertyIsEnumerable$1 = objectProto$c.propertyIsEnumerable;
        var isArguments$5 = baseIsArguments(function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike$b(value) && hasOwnProperty$b.call(value, "callee") && !propertyIsEnumerable$1.call(value, "callee");
        };
        var isArguments_1 = isArguments$5;
        var isArray$d = Array.isArray;
        var isArray_1 = isArray$d;
        var isBuffer$5 = { exports: {} };
        function stubFalse() {
          return false;
        }
        var stubFalse_1 = stubFalse;
        (function(module2, exports3) {
          var root2 = _root, stubFalse2 = stubFalse_1;
          var freeExports = exports3 && !exports3.nodeType && exports3;
          var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
          var moduleExports = freeModule && freeModule.exports === freeExports;
          var Buffer2 = moduleExports ? root2.Buffer : void 0;
          var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
          var isBuffer2 = nativeIsBuffer || stubFalse2;
          module2.exports = isBuffer2;
        })(isBuffer$5, isBuffer$5.exports);
        var MAX_SAFE_INTEGER$1 = 9007199254740991;
        var reIsUint = /^(?:0|[1-9]\d*)$/;
        function isIndex$4(value, length) {
          var type = _typeof$2(value);
          length = length == null ? MAX_SAFE_INTEGER$1 : length;
          return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
        }
        var _isIndex = isIndex$4;
        var MAX_SAFE_INTEGER = 9007199254740991;
        function isLength$3(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        var isLength_1 = isLength$3;
        var baseGetTag$7 = _baseGetTag, isLength$2 = isLength_1, isObjectLike$a = isObjectLike_1;
        var argsTag$2 = "[object Arguments]", arrayTag$2 = "[object Array]", boolTag$4 = "[object Boolean]", dateTag$3 = "[object Date]", errorTag$3 = "[object Error]", funcTag$1 = "[object Function]", mapTag$6 = "[object Map]", numberTag$4 = "[object Number]", objectTag$4 = "[object Object]", regexpTag$3 = "[object RegExp]", setTag$6 = "[object Set]", stringTag$4 = "[object String]", weakMapTag$2 = "[object WeakMap]";
        var arrayBufferTag$3 = "[object ArrayBuffer]", dataViewTag$4 = "[object DataView]", float32Tag$2 = "[object Float32Array]", float64Tag$2 = "[object Float64Array]", int8Tag$2 = "[object Int8Array]", int16Tag$2 = "[object Int16Array]", int32Tag$2 = "[object Int32Array]", uint8Tag$2 = "[object Uint8Array]", uint8ClampedTag$2 = "[object Uint8ClampedArray]", uint16Tag$2 = "[object Uint16Array]", uint32Tag$2 = "[object Uint32Array]";
        var typedArrayTags = {};
        typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
        typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$4] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] = typedArrayTags[errorTag$3] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$6] = typedArrayTags[numberTag$4] = typedArrayTags[objectTag$4] = typedArrayTags[regexpTag$3] = typedArrayTags[setTag$6] = typedArrayTags[stringTag$4] = typedArrayTags[weakMapTag$2] = false;
        function baseIsTypedArray$1(value) {
          return isObjectLike$a(value) && isLength$2(value.length) && !!typedArrayTags[baseGetTag$7(value)];
        }
        var _baseIsTypedArray = baseIsTypedArray$1;
        function baseUnary$5(func) {
          return function(value) {
            return func(value);
          };
        }
        var _baseUnary = baseUnary$5;
        var _nodeUtil = { exports: {} };
        (function(module2, exports3) {
          var freeGlobal2 = _freeGlobal;
          var freeExports = exports3 && !exports3.nodeType && exports3;
          var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
          var moduleExports = freeModule && freeModule.exports === freeExports;
          var freeProcess = moduleExports && freeGlobal2.process;
          var nodeUtil2 = function() {
            try {
              var types = freeModule && freeModule.require && freeModule.require("util").types;
              if (types) {
                return types;
              }
              return freeProcess && freeProcess.binding && freeProcess.binding("util");
            } catch (e) {
            }
          }();
          module2.exports = nodeUtil2;
        })(_nodeUtil, _nodeUtil.exports);
        var baseIsTypedArray = _baseIsTypedArray, baseUnary$4 = _baseUnary, nodeUtil$2 = _nodeUtil.exports;
        var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;
        var isTypedArray$4 = nodeIsTypedArray ? baseUnary$4(nodeIsTypedArray) : baseIsTypedArray;
        var isTypedArray_1 = isTypedArray$4;
        var baseTimes = _baseTimes, isArguments$4 = isArguments_1, isArray$c = isArray_1, isBuffer$4 = isBuffer$5.exports, isIndex$3 = _isIndex, isTypedArray$3 = isTypedArray_1;
        var objectProto$b = Object.prototype;
        var hasOwnProperty$a = objectProto$b.hasOwnProperty;
        function arrayLikeKeys$2(value, inherited) {
          var isArr = isArray$c(value), isArg = !isArr && isArguments$4(value), isBuff = !isArr && !isArg && isBuffer$4(value), isType = !isArr && !isArg && !isBuff && isTypedArray$3(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty$a.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex$3(key, length)))) {
              result.push(key);
            }
          }
          return result;
        }
        var _arrayLikeKeys = arrayLikeKeys$2;
        var objectProto$a = Object.prototype;
        function isPrototype$4(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto$a;
          return value === proto;
        }
        var _isPrototype = isPrototype$4;
        function overArg$2(func, transform) {
          return function(arg) {
            return func(transform(arg));
          };
        }
        var _overArg = overArg$2;
        var overArg$1 = _overArg;
        var nativeKeys$1 = overArg$1(Object.keys, Object);
        var _nativeKeys = nativeKeys$1;
        var isPrototype$3 = _isPrototype, nativeKeys = _nativeKeys;
        var objectProto$9 = Object.prototype;
        var hasOwnProperty$9 = objectProto$9.hasOwnProperty;
        function baseKeys$2(object) {
          if (!isPrototype$3(object)) {
            return nativeKeys(object);
          }
          var result = [];
          for (var key in Object(object)) {
            if (hasOwnProperty$9.call(object, key) && key != "constructor") {
              result.push(key);
            }
          }
          return result;
        }
        var _baseKeys = baseKeys$2;
        var isFunction$1 = isFunction_1, isLength$1 = isLength_1;
        function isArrayLike$5(value) {
          return value != null && isLength$1(value.length) && !isFunction$1(value);
        }
        var isArrayLike_1 = isArrayLike$5;
        var arrayLikeKeys$1 = _arrayLikeKeys, baseKeys$1 = _baseKeys, isArrayLike$4 = isArrayLike_1;
        function keys$5(object) {
          return isArrayLike$4(object) ? arrayLikeKeys$1(object) : baseKeys$1(object);
        }
        var keys_1 = keys$5;
        var copyObject$6 = _copyObject, keys$4 = keys_1;
        function baseAssign$1(object, source) {
          return object && copyObject$6(source, keys$4(source), object);
        }
        var _baseAssign = baseAssign$1;
        function nativeKeysIn$1(object) {
          var result = [];
          if (object != null) {
            for (var key in Object(object)) {
              result.push(key);
            }
          }
          return result;
        }
        var _nativeKeysIn = nativeKeysIn$1;
        var isObject$a = isObject_1, isPrototype$2 = _isPrototype, nativeKeysIn = _nativeKeysIn;
        var objectProto$8 = Object.prototype;
        var hasOwnProperty$8 = objectProto$8.hasOwnProperty;
        function baseKeysIn$1(object) {
          if (!isObject$a(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype$2(object), result = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty$8.call(object, key)))) {
              result.push(key);
            }
          }
          return result;
        }
        var _baseKeysIn = baseKeysIn$1;
        var arrayLikeKeys = _arrayLikeKeys, baseKeysIn = _baseKeysIn, isArrayLike$3 = isArrayLike_1;
        function keysIn$6(object) {
          return isArrayLike$3(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        var keysIn_1 = keysIn$6;
        var copyObject$5 = _copyObject, keysIn$5 = keysIn_1;
        function baseAssignIn$1(object, source) {
          return object && copyObject$5(source, keysIn$5(source), object);
        }
        var _baseAssignIn = baseAssignIn$1;
        var _cloneBuffer = { exports: {} };
        (function(module2, exports3) {
          var root2 = _root;
          var freeExports = exports3 && !exports3.nodeType && exports3;
          var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
          var moduleExports = freeModule && freeModule.exports === freeExports;
          var Buffer2 = moduleExports ? root2.Buffer : void 0, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
          function cloneBuffer2(buffer, isDeep) {
            if (isDeep) {
              return buffer.slice();
            }
            var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result);
            return result;
          }
          module2.exports = cloneBuffer2;
        })(_cloneBuffer, _cloneBuffer.exports);
        function copyArray$2(source, array) {
          var index2 = -1, length = source.length;
          array || (array = Array(length));
          while (++index2 < length) {
            array[index2] = source[index2];
          }
          return array;
        }
        var _copyArray = copyArray$2;
        function arrayFilter$1(array, predicate) {
          var index2 = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
          while (++index2 < length) {
            var value = array[index2];
            if (predicate(value, index2, array)) {
              result[resIndex++] = value;
            }
          }
          return result;
        }
        var _arrayFilter = arrayFilter$1;
        function stubArray$2() {
          return [];
        }
        var stubArray_1 = stubArray$2;
        var arrayFilter = _arrayFilter, stubArray$1 = stubArray_1;
        var objectProto$7 = Object.prototype;
        var propertyIsEnumerable = objectProto$7.propertyIsEnumerable;
        var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
        var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function(object) {
          if (object == null) {
            return [];
          }
          object = Object(object);
          return arrayFilter(nativeGetSymbols$1(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var _getSymbols = getSymbols$3;
        var copyObject$4 = _copyObject, getSymbols$2 = _getSymbols;
        function copySymbols$1(source, object) {
          return copyObject$4(source, getSymbols$2(source), object);
        }
        var _copySymbols = copySymbols$1;
        function arrayPush$3(array, values) {
          var index2 = -1, length = values.length, offset2 = array.length;
          while (++index2 < length) {
            array[offset2 + index2] = values[index2];
          }
          return array;
        }
        var _arrayPush = arrayPush$3;
        var overArg = _overArg;
        var getPrototype$3 = overArg(Object.getPrototypeOf, Object);
        var _getPrototype = getPrototype$3;
        var arrayPush$2 = _arrayPush, getPrototype$2 = _getPrototype, getSymbols$1 = _getSymbols, stubArray = stubArray_1;
        var nativeGetSymbols = Object.getOwnPropertySymbols;
        var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function(object) {
          var result = [];
          while (object) {
            arrayPush$2(result, getSymbols$1(object));
            object = getPrototype$2(object);
          }
          return result;
        };
        var _getSymbolsIn = getSymbolsIn$2;
        var copyObject$3 = _copyObject, getSymbolsIn$1 = _getSymbolsIn;
        function copySymbolsIn$1(source, object) {
          return copyObject$3(source, getSymbolsIn$1(source), object);
        }
        var _copySymbolsIn = copySymbolsIn$1;
        var arrayPush$1 = _arrayPush, isArray$b = isArray_1;
        function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
          var result = keysFunc(object);
          return isArray$b(object) ? result : arrayPush$1(result, symbolsFunc(object));
        }
        var _baseGetAllKeys = baseGetAllKeys$2;
        var baseGetAllKeys$1 = _baseGetAllKeys, getSymbols = _getSymbols, keys$3 = keys_1;
        function getAllKeys$2(object) {
          return baseGetAllKeys$1(object, keys$3, getSymbols);
        }
        var _getAllKeys = getAllKeys$2;
        var baseGetAllKeys = _baseGetAllKeys, getSymbolsIn = _getSymbolsIn, keysIn$4 = keysIn_1;
        function getAllKeysIn$2(object) {
          return baseGetAllKeys(object, keysIn$4, getSymbolsIn);
        }
        var _getAllKeysIn = getAllKeysIn$2;
        var getNative$3 = _getNative, root$6 = _root;
        var DataView$1 = getNative$3(root$6, "DataView");
        var _DataView = DataView$1;
        var getNative$2 = _getNative, root$5 = _root;
        var Promise$2 = getNative$2(root$5, "Promise");
        var _Promise = Promise$2;
        var getNative$1 = _getNative, root$4 = _root;
        var Set$2 = getNative$1(root$4, "Set");
        var _Set = Set$2;
        var getNative = _getNative, root$3 = _root;
        var WeakMap$2 = getNative(root$3, "WeakMap");
        var _WeakMap = WeakMap$2;
        var DataView = _DataView, Map$1 = _Map, Promise$1 = _Promise, Set$1 = _Set, WeakMap$1 = _WeakMap, baseGetTag$6 = _baseGetTag, toSource = _toSource;
        var mapTag$5 = "[object Map]", objectTag$3 = "[object Object]", promiseTag = "[object Promise]", setTag$5 = "[object Set]", weakMapTag$1 = "[object WeakMap]";
        var dataViewTag$3 = "[object DataView]";
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map$1), promiseCtorString = toSource(Promise$1), setCtorString = toSource(Set$1), weakMapCtorString = toSource(WeakMap$1);
        var getTag$5 = baseGetTag$6;
        if (DataView && getTag$5(new DataView(new ArrayBuffer(1))) != dataViewTag$3 || Map$1 && getTag$5(new Map$1()) != mapTag$5 || Promise$1 && getTag$5(Promise$1.resolve()) != promiseTag || Set$1 && getTag$5(new Set$1()) != setTag$5 || WeakMap$1 && getTag$5(new WeakMap$1()) != weakMapTag$1) {
          getTag$5 = function getTag2(value) {
            var result = baseGetTag$6(value), Ctor = result == objectTag$3 ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag$3;
                case mapCtorString:
                  return mapTag$5;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag$5;
                case weakMapCtorString:
                  return weakMapTag$1;
              }
            }
            return result;
          };
        }
        var _getTag = getTag$5;
        var objectProto$6 = Object.prototype;
        var hasOwnProperty$7 = objectProto$6.hasOwnProperty;
        function initCloneArray$1(array) {
          var length = array.length, result = new array.constructor(length);
          if (length && typeof array[0] == "string" && hasOwnProperty$7.call(array, "index")) {
            result.index = array.index;
            result.input = array.input;
          }
          return result;
        }
        var _initCloneArray = initCloneArray$1;
        var root$2 = _root;
        var Uint8Array$2 = root$2.Uint8Array;
        var _Uint8Array = Uint8Array$2;
        var Uint8Array$1 = _Uint8Array;
        function cloneArrayBuffer$3(arrayBuffer) {
          var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
          return result;
        }
        var _cloneArrayBuffer = cloneArrayBuffer$3;
        var cloneArrayBuffer$2 = _cloneArrayBuffer;
        function cloneDataView$1(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer$2(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        var _cloneDataView = cloneDataView$1;
        var reFlags = /\w*$/;
        function cloneRegExp$1(regexp) {
          var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result.lastIndex = regexp.lastIndex;
          return result;
        }
        var _cloneRegExp = cloneRegExp$1;
        var _Symbol$3 = _Symbol$6;
        var symbolProto$2 = _Symbol$3 ? _Symbol$3.prototype : void 0, symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : void 0;
        function cloneSymbol$1(symbol) {
          return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
        }
        var _cloneSymbol = cloneSymbol$1;
        var cloneArrayBuffer$1 = _cloneArrayBuffer;
        function cloneTypedArray$2(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer$1(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        var _cloneTypedArray = cloneTypedArray$2;
        var cloneArrayBuffer = _cloneArrayBuffer, cloneDataView = _cloneDataView, cloneRegExp = _cloneRegExp, cloneSymbol = _cloneSymbol, cloneTypedArray$1 = _cloneTypedArray;
        var boolTag$3 = "[object Boolean]", dateTag$2 = "[object Date]", mapTag$4 = "[object Map]", numberTag$3 = "[object Number]", regexpTag$2 = "[object RegExp]", setTag$4 = "[object Set]", stringTag$3 = "[object String]", symbolTag$3 = "[object Symbol]";
        var arrayBufferTag$2 = "[object ArrayBuffer]", dataViewTag$2 = "[object DataView]", float32Tag$1 = "[object Float32Array]", float64Tag$1 = "[object Float64Array]", int8Tag$1 = "[object Int8Array]", int16Tag$1 = "[object Int16Array]", int32Tag$1 = "[object Int32Array]", uint8Tag$1 = "[object Uint8Array]", uint8ClampedTag$1 = "[object Uint8ClampedArray]", uint16Tag$1 = "[object Uint16Array]", uint32Tag$1 = "[object Uint32Array]";
        function initCloneByTag$1(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag$2:
              return cloneArrayBuffer(object);
            case boolTag$3:
            case dateTag$2:
              return new Ctor(+object);
            case dataViewTag$2:
              return cloneDataView(object, isDeep);
            case float32Tag$1:
            case float64Tag$1:
            case int8Tag$1:
            case int16Tag$1:
            case int32Tag$1:
            case uint8Tag$1:
            case uint8ClampedTag$1:
            case uint16Tag$1:
            case uint32Tag$1:
              return cloneTypedArray$1(object, isDeep);
            case mapTag$4:
              return new Ctor();
            case numberTag$3:
            case stringTag$3:
              return new Ctor(object);
            case regexpTag$2:
              return cloneRegExp(object);
            case setTag$4:
              return new Ctor();
            case symbolTag$3:
              return cloneSymbol(object);
          }
        }
        var _initCloneByTag = initCloneByTag$1;
        var isObject$9 = isObject_1;
        var objectCreate = Object.create;
        var baseCreate$1 = function() {
          function object() {
          }
          return function(proto) {
            if (!isObject$9(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result = new object();
            object.prototype = void 0;
            return result;
          };
        }();
        var _baseCreate = baseCreate$1;
        var baseCreate = _baseCreate, getPrototype$1 = _getPrototype, isPrototype$1 = _isPrototype;
        function initCloneObject$2(object) {
          return typeof object.constructor == "function" && !isPrototype$1(object) ? baseCreate(getPrototype$1(object)) : {};
        }
        var _initCloneObject = initCloneObject$2;
        var getTag$4 = _getTag, isObjectLike$9 = isObjectLike_1;
        var mapTag$3 = "[object Map]";
        function baseIsMap$1(value) {
          return isObjectLike$9(value) && getTag$4(value) == mapTag$3;
        }
        var _baseIsMap = baseIsMap$1;
        var baseIsMap = _baseIsMap, baseUnary$3 = _baseUnary, nodeUtil$1 = _nodeUtil.exports;
        var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;
        var isMap$1 = nodeIsMap ? baseUnary$3(nodeIsMap) : baseIsMap;
        var isMap_1 = isMap$1;
        var getTag$3 = _getTag, isObjectLike$8 = isObjectLike_1;
        var setTag$3 = "[object Set]";
        function baseIsSet$1(value) {
          return isObjectLike$8(value) && getTag$3(value) == setTag$3;
        }
        var _baseIsSet = baseIsSet$1;
        var baseIsSet = _baseIsSet, baseUnary$2 = _baseUnary, nodeUtil = _nodeUtil.exports;
        var nodeIsSet = nodeUtil && nodeUtil.isSet;
        var isSet$1 = nodeIsSet ? baseUnary$2(nodeIsSet) : baseIsSet;
        var isSet_1 = isSet$1;
        var Stack$3 = _Stack, arrayEach = _arrayEach, assignValue$1 = _assignValue, baseAssign = _baseAssign, baseAssignIn = _baseAssignIn, cloneBuffer$1 = _cloneBuffer.exports, copyArray$1 = _copyArray, copySymbols = _copySymbols, copySymbolsIn = _copySymbolsIn, getAllKeys$1 = _getAllKeys, getAllKeysIn$1 = _getAllKeysIn, getTag$2 = _getTag, initCloneArray = _initCloneArray, initCloneByTag = _initCloneByTag, initCloneObject$1 = _initCloneObject, isArray$a = isArray_1, isBuffer$3 = isBuffer$5.exports, isMap = isMap_1, isObject$8 = isObject_1, isSet = isSet_1, keys$2 = keys_1, keysIn$3 = keysIn_1;
        var CLONE_DEEP_FLAG$2 = 1, CLONE_FLAT_FLAG$1 = 2, CLONE_SYMBOLS_FLAG$2 = 4;
        var argsTag$1 = "[object Arguments]", arrayTag$1 = "[object Array]", boolTag$2 = "[object Boolean]", dateTag$1 = "[object Date]", errorTag$2 = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag$2 = "[object Map]", numberTag$2 = "[object Number]", objectTag$2 = "[object Object]", regexpTag$1 = "[object RegExp]", setTag$2 = "[object Set]", stringTag$2 = "[object String]", symbolTag$2 = "[object Symbol]", weakMapTag = "[object WeakMap]";
        var arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
        var cloneableTags = {};
        cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] = cloneableTags[boolTag$2] = cloneableTags[dateTag$1] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$2] = cloneableTags[numberTag$2] = cloneableTags[objectTag$2] = cloneableTags[regexpTag$1] = cloneableTags[setTag$2] = cloneableTags[stringTag$2] = cloneableTags[symbolTag$2] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag$2] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
        function baseClone$2(value, bitmask, customizer, key, object, stack) {
          var result, isDeep = bitmask & CLONE_DEEP_FLAG$2, isFlat = bitmask & CLONE_FLAT_FLAG$1, isFull = bitmask & CLONE_SYMBOLS_FLAG$2;
          if (customizer) {
            result = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result !== void 0) {
            return result;
          }
          if (!isObject$8(value)) {
            return value;
          }
          var isArr = isArray$a(value);
          if (isArr) {
            result = initCloneArray(value);
            if (!isDeep) {
              return copyArray$1(value, result);
            }
          } else {
            var tag = getTag$2(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer$3(value)) {
              return cloneBuffer$1(value, isDeep);
            }
            if (tag == objectTag$2 || tag == argsTag$1 || isFunc && !object) {
              result = isFlat || isFunc ? {} : initCloneObject$1(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack$3());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result.add(baseClone$2(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result.set(key2, baseClone$2(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn$1 : getAllKeys$1 : isFlat ? keysIn$3 : keys$2;
          var props2 = isArr ? void 0 : keysFunc(value);
          arrayEach(props2 || value, function(subValue, key2) {
            if (props2) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue$1(result, key2, baseClone$2(subValue, bitmask, customizer, key2, value, stack));
          });
          return result;
        }
        var _baseClone = baseClone$2;
        var baseClone$1 = _baseClone;
        var CLONE_DEEP_FLAG$1 = 1, CLONE_SYMBOLS_FLAG$1 = 4;
        function cloneDeep(value) {
          return baseClone$1(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$1);
        }
        var cloneDeep_1 = cloneDeep;
        var baseAssignValue = _baseAssignValue, eq$3 = eq_1;
        function assignMergeValue$2(object, key, value) {
          if (value !== void 0 && !eq$3(object[key], value) || value === void 0 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        var _assignMergeValue = assignMergeValue$2;
        function createBaseFor$1(fromRight) {
          return function(object, iteratee, keysFunc) {
            var index2 = -1, iterable = Object(object), props2 = keysFunc(object), length = props2.length;
            while (length--) {
              var key = props2[fromRight ? length : ++index2];
              if (iteratee(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        var _createBaseFor = createBaseFor$1;
        var createBaseFor = _createBaseFor;
        var baseFor$1 = createBaseFor();
        var _baseFor = baseFor$1;
        var isArrayLike$2 = isArrayLike_1, isObjectLike$7 = isObjectLike_1;
        function isArrayLikeObject$4(value) {
          return isObjectLike$7(value) && isArrayLike$2(value);
        }
        var isArrayLikeObject_1 = isArrayLikeObject$4;
        var baseGetTag$5 = _baseGetTag, getPrototype = _getPrototype, isObjectLike$6 = isObjectLike_1;
        var objectTag$1 = "[object Object]";
        var funcProto = Function.prototype, objectProto$5 = Object.prototype;
        var funcToString = funcProto.toString;
        var hasOwnProperty$6 = objectProto$5.hasOwnProperty;
        var objectCtorString = funcToString.call(Object);
        function isPlainObject$3(value) {
          if (!isObjectLike$6(value) || baseGetTag$5(value) != objectTag$1) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty$6.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isPlainObject_1 = isPlainObject$3;
        function safeGet$2(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var _safeGet = safeGet$2;
        var copyObject$2 = _copyObject, keysIn$2 = keysIn_1;
        function toPlainObject$1(value) {
          return copyObject$2(value, keysIn$2(value));
        }
        var toPlainObject_1 = toPlainObject$1;
        var assignMergeValue$1 = _assignMergeValue, cloneBuffer = _cloneBuffer.exports, cloneTypedArray = _cloneTypedArray, copyArray = _copyArray, initCloneObject = _initCloneObject, isArguments$3 = isArguments_1, isArray$9 = isArray_1, isArrayLikeObject$3 = isArrayLikeObject_1, isBuffer$2 = isBuffer$5.exports, isFunction = isFunction_1, isObject$7 = isObject_1, isPlainObject$2 = isPlainObject_1, isTypedArray$2 = isTypedArray_1, safeGet$1 = _safeGet, toPlainObject = toPlainObject_1;
        function baseMergeDeep$1(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet$1(object, key), srcValue = safeGet$1(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue$1(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
          var isCommon = newValue === void 0;
          if (isCommon) {
            var isArr = isArray$9(srcValue), isBuff = !isArr && isBuffer$2(srcValue), isTyped = !isArr && !isBuff && isTypedArray$2(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray$9(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject$3(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject$2(srcValue) || isArguments$3(srcValue)) {
              newValue = objValue;
              if (isArguments$3(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject$7(objValue) || isFunction(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue$1(object, key, newValue);
        }
        var _baseMergeDeep = baseMergeDeep$1;
        var Stack$2 = _Stack, assignMergeValue = _assignMergeValue, baseFor = _baseFor, baseMergeDeep = _baseMergeDeep, isObject$6 = isObject_1, keysIn$1 = keysIn_1, safeGet = _safeGet;
        function baseMerge$2(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack$2());
            if (isObject$6(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge$2, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
              if (newValue === void 0) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn$1);
        }
        var _baseMerge = baseMerge$2;
        function identity$3(value) {
          return value;
        }
        var identity_1 = identity$3;
        function apply$2(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg);
            case 1:
              return func.call(thisArg, args[0]);
            case 2:
              return func.call(thisArg, args[0], args[1]);
            case 3:
              return func.call(thisArg, args[0], args[1], args[2]);
          }
          return func.apply(thisArg, args);
        }
        var _apply = apply$2;
        var apply$1 = _apply;
        var nativeMax$3 = Math.max;
        function overRest$2(func, start2, transform) {
          start2 = nativeMax$3(start2 === void 0 ? func.length - 1 : start2, 0);
          return function() {
            var args = arguments, index2 = -1, length = nativeMax$3(args.length - start2, 0), array = Array(length);
            while (++index2 < length) {
              array[index2] = args[start2 + index2];
            }
            index2 = -1;
            var otherArgs = Array(start2 + 1);
            while (++index2 < start2) {
              otherArgs[index2] = args[index2];
            }
            otherArgs[start2] = transform(array);
            return apply$1(func, this, otherArgs);
          };
        }
        var _overRest = overRest$2;
        function constant$1(value) {
          return function() {
            return value;
          };
        }
        var constant_1 = constant$1;
        var constant = constant_1, defineProperty = _defineProperty$2, identity$2 = identity_1;
        var baseSetToString$1 = !defineProperty ? identity$2 : function(func, string) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        var _baseSetToString = baseSetToString$1;
        var HOT_COUNT = 800, HOT_SPAN = 16;
        var nativeNow = Date.now;
        function shortOut$1(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(void 0, arguments);
          };
        }
        var _shortOut = shortOut$1;
        var baseSetToString = _baseSetToString, shortOut = _shortOut;
        var setToString$2 = shortOut(baseSetToString);
        var _setToString = setToString$2;
        var identity$1 = identity_1, overRest$1 = _overRest, setToString$1 = _setToString;
        function baseRest$5(func, start2) {
          return setToString$1(overRest$1(func, start2, identity$1), func + "");
        }
        var _baseRest = baseRest$5;
        var eq$2 = eq_1, isArrayLike$1 = isArrayLike_1, isIndex$2 = _isIndex, isObject$5 = isObject_1;
        function isIterateeCall$3(value, index2, object) {
          if (!isObject$5(object)) {
            return false;
          }
          var type = _typeof$2(index2);
          if (type == "number" ? isArrayLike$1(object) && isIndex$2(index2, object.length) : type == "string" && index2 in object) {
            return eq$2(object[index2], value);
          }
          return false;
        }
        var _isIterateeCall = isIterateeCall$3;
        var baseRest$4 = _baseRest, isIterateeCall$2 = _isIterateeCall;
        function createAssigner$3(assigner) {
          return baseRest$4(function(object, sources) {
            var index2 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
            if (guard && isIterateeCall$2(sources[0], sources[1], guard)) {
              customizer = length < 3 ? void 0 : customizer;
              length = 1;
            }
            object = Object(object);
            while (++index2 < length) {
              var source = sources[index2];
              if (source) {
                assigner(object, source, index2, customizer);
              }
            }
            return object;
          });
        }
        var _createAssigner = createAssigner$3;
        var baseMerge$1 = _baseMerge, createAssigner$2 = _createAssigner;
        var mergeWith = createAssigner$2(function(object, source, srcIndex, customizer) {
          baseMerge$1(object, source, srcIndex, customizer);
        });
        var mergeWith_1 = mergeWith;
        var baseMerge = _baseMerge, createAssigner$1 = _createAssigner;
        var merge$2 = createAssigner$1(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var merge_1 = merge$2;
        var defaultConfig = {
          classPrefix: "t",
          animation: {
            include: ["ripple", "expand", "fade"],
            exclude: []
          },
          calendar: {
            firstDayOfWeek: 1,
            fillWithZero: true,
            controllerConfig: void 0
          },
          dialog: {
            confirmBtnTheme: {
              "default": "primary",
              info: "primary",
              warning: "primary",
              danger: "primary",
              success: "primary"
            }
          },
          popconfirm: {
            confirmBtnTheme: {
              "default": "primary",
              warning: "primary",
              danger: "primary"
            }
          },
          table: {
            expandIcon: void 0,
            sortIcon: void 0,
            filterIcon: void 0,
            treeExpandAndFoldIcon: void 0,
            hideSortTips: false
          },
          select: {
            clearIcon: void 0
          },
          tree: {
            folderIcon: void 0
          },
          datePicker: {
            firstDayOfWeek: 1
          },
          steps: {
            errorIcon: void 0
          },
          tag: {
            closeIcon: void 0
          },
          form: {
            requiredMark: true
          }
        };
        var defaultZhLocale = {
          pagination: {
            itemsPerPage: "{size} \u6761/\u9875",
            jumpTo: "\u8DF3\u81F3",
            page: "\u9875",
            total: "\u5171 {total} \u9879\u6570\u636E"
          },
          cascader: {
            empty: "\u6682\u65E0\u6570\u636E",
            loadingText: "",
            placeholder: "\u8BF7\u9009\u62E9"
          },
          calendar: {
            yearSelection: "{year} \u5E74",
            monthSelection: "{month} \u6708",
            yearRadio: "\u5E74",
            monthRadio: "\u6708",
            hideWeekend: "\u9690\u85CF\u5468\u672B",
            showWeekend: "\u663E\u793A\u5468\u672B",
            today: "\u4ECA\u5929",
            thisMonth: "\u672C\u6708",
            week: "\u4E00,\u4E8C,\u4E09,\u56DB,\u4E94,\u516D,\u65E5",
            cellMonth: "\u4E00\u6708,\u4E8C\u6708,\u4E09\u6708,\u56DB\u6708,\u4E94\u6708,\u516D\u6708,\u4E03\u6708,\u516B\u6708,\u4E5D\u6708,\u5341\u6708,\u5341\u4E00\u6708,\u5341\u4E8C\u6708"
          },
          transfer: {
            title: "{checked} / {total} \u9879",
            empty: "\u6682\u65E0\u6570\u636E",
            placeholder: "\u8BF7\u8F93\u5165\u5173\u952E\u8BCD\u641C\u7D22"
          },
          timePicker: {
            now: "\u6B64\u523B",
            confirm: "\u786E\u5B9A",
            anteMeridiem: "\u4E0A\u5348",
            postMeridiem: "\u4E0B\u5348",
            placeholder: "\u9009\u62E9\u65F6\u95F4"
          },
          dialog: {
            confirm: "\u786E\u8BA4",
            cancel: "\u53D6\u6D88"
          },
          drawer: {
            confirm: "\u786E\u8BA4",
            cancel: "\u53D6\u6D88"
          },
          popconfirm: {
            confirm: {
              content: "\u786E\u5B9A"
            },
            cancel: {
              content: "\u53D6\u6D88"
            }
          },
          table: {
            empty: "\u6682\u65E0\u6570\u636E",
            loadingText: "\u6B63\u5728\u52A0\u8F7D\u4E2D\uFF0C\u8BF7\u7A0D\u540E",
            loadingMoreText: "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A",
            filterInputPlaceholder: "\u8BF7\u8F93\u5165\u5185\u5BB9\uFF08\u65E0\u9ED8\u8BA4\u503C\uFF09",
            sortAscendingOperationText: "\u70B9\u51FB\u5347\u5E8F",
            sortCancelOperationText: "\u70B9\u51FB\u53D6\u6D88\u6392\u5E8F",
            sortDescendingOperationText: "\u70B9\u51FB\u964D\u5E8F",
            clearFilterResultButtonText: "\u6E05\u7A7A\u7B5B\u9009",
            columnConfigButtonText: "\u5217\u914D\u7F6E",
            columnConfigTitleText: "\u8868\u683C\u5217\u914D\u7F6E",
            columnConfigDescriptionText: "\u8BF7\u9009\u62E9\u9700\u8981\u5728\u8868\u683C\u4E2D\u663E\u793A\u7684\u6570\u636E\u5217",
            confirmText: "\u786E\u8BA4",
            cancelText: "\u53D6\u6D88",
            resetText: "\u91CD\u7F6E",
            selectAllText: "\u5168\u9009",
            searchResultText: "\u641C\u7D22\u201C{result}\u201D\uFF0C\u627E\u5230 {count} \u6761\u7ED3\u679C"
          },
          select: {
            empty: "\u6682\u65E0\u6570\u636E",
            loadingText: "\u52A0\u8F7D\u4E2D",
            placeholder: "\u8BF7\u9009\u62E9"
          },
          tree: {
            empty: "\u6682\u65E0\u6570\u636E"
          },
          treeSelect: {
            empty: "\u6682\u65E0\u6570\u636E",
            loadingText: "\u52A0\u8F7D\u4E2D",
            placeholder: "\u8BF7\u9009\u62E9"
          },
          datePicker: {
            placeholder: {
              date: "\u8BF7\u9009\u62E9\u65E5\u671F",
              month: "\u8BF7\u9009\u62E9\u6708\u4EFD",
              year: "\u8BF7\u9009\u62E9\u5E74\u4EFD"
            },
            weekdays: ["\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D", "\u65E5"],
            months: ["1 \u6708", "2 \u6708", "3 \u6708", "4 \u6708", "5 \u6708", "6 \u6708", "7 \u6708", "8 \u6708", "9 \u6708", "10 \u6708", "11 \u6708", "12 \u6708"],
            rangeSeparator: " \u81F3 ",
            direction: "ltr",
            format: "YYYY-MM-DD",
            dayAriaLabel: "\u65E5",
            weekAbbreviation: "\u5468",
            yearAriaLabel: "\u5E74",
            monthAriaLabel: "\u6708",
            confirm: "\u786E\u5B9A",
            selectTime: "\u9009\u62E9\u65F6\u95F4",
            selectDate: "\u9009\u62E9\u65E5\u671F",
            nextYear: "\u4E0B\u4E00\u5E74",
            preYear: "\u4E0A\u4E00\u5E74",
            nextMonth: "\u4E0B\u4E2A\u6708",
            preMonth: "\u4E0A\u4E2A\u6708",
            preDecade: "\u4E0A\u4E2A\u5341\u5E74",
            nextDecade: "\u4E0B\u4E2A\u5341\u5E74",
            now: "\u5F53\u524D"
          },
          upload: {
            sizeLimitMessage: "\u56FE\u7247\u5927\u5C0F\u4E0D\u80FD\u8D85\u8FC7 {sizeLimit}",
            cancelUploadText: "\u53D6\u6D88\u4E0A\u4F20",
            triggerUploadText: {
              fileInput: "\u9009\u62E9\u6587\u4EF6",
              image: "\u70B9\u51FB\u4E0A\u4F20\u56FE\u7247",
              normal: "\u70B9\u51FB\u4E0A\u4F20",
              reupload: "\u91CD\u65B0\u4E0A\u4F20",
              continueUpload: "\u7EE7\u7EED\u4E0A\u4F20",
              "delete": "\u5220\u9664"
            },
            dragger: {
              dragDropText: "\u91CA\u653E\u9F20\u6807",
              draggingText: "\u62D6\u62FD\u5230\u6B64\u533A\u57DF",
              clickAndDragText: "\u70B9\u51FB\u4E0A\u65B9\u201C\u9009\u62E9\u6587\u4EF6\u201D\u6216\u5C06\u6587\u4EF6\u62D6\u62FD\u5230\u6B64\u533A\u57DF"
            },
            file: {
              fileNameText: "\u6587\u4EF6\u540D",
              fileSizeText: "\u6587\u4EF6\u5927\u5C0F",
              fileStatusText: "\u72B6\u6001",
              fileOperationText: "\u64CD\u4F5C",
              fileOperationDateText: "\u4E0A\u4F20\u65E5\u671F"
            },
            progress: {
              uploadingText: "\u4E0A\u4F20\u4E2D",
              waitingText: "\u5F85\u4E0A\u4F20",
              failText: "\u4E0A\u4F20\u5931\u8D25",
              successText: "\u4E0A\u4F20\u6210\u529F"
            }
          },
          form: {
            errorMessage: {
              date: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
              url: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
              required: "${name}\u5FC5\u586B",
              max: "${name}\u5B57\u7B26\u957F\u5EA6\u4E0D\u80FD\u8D85\u8FC7 ${validate} \u4E2A\u5B57\u7B26\uFF0C\u4E00\u4E2A\u4E2D\u6587\u7B49\u4E8E\u4E24\u4E2A\u5B57\u7B26",
              min: "${name}\u5B57\u7B26\u957F\u5EA6\u4E0D\u80FD\u5C11\u4E8E ${validate} \u4E2A\u5B57\u7B26\uFF0C\u4E00\u4E2A\u4E2D\u6587\u7B49\u4E8E\u4E24\u4E2A\u5B57\u7B26",
              len: "${name}\u5B57\u7B26\u957F\u5EA6\u5FC5\u987B\u662F ${validate}",
              "enum": "${name}\u53EA\u80FD\u662F${validate}\u7B49",
              idcard: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
              telnumber: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
              pattern: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
              validator: "${name}\u4E0D\u7B26\u5408\u8981\u6C42",
              "boolean": "${name}\u6570\u636E\u7C7B\u578B\u5FC5\u987B\u662F\u5E03\u5C14\u7C7B\u578B",
              number: "${name}\u5FC5\u987B\u662F\u6570\u5B57"
            }
          },
          input: {
            placeholder: "\u8BF7\u8F93\u5165"
          },
          list: {
            loadingText: "\u6B63\u5728\u52A0\u8F7D\u4E2D\uFF0C\u8BF7\u7A0D\u7B49",
            loadingMoreText: "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A"
          },
          alert: {
            expandText: "\u5C55\u5F00\u66F4\u591A",
            collapseText: "\u6536\u8D77"
          },
          anchor: {
            copySuccessText: "\u94FE\u63A5\u590D\u5236\u6210\u529F",
            copyText: "\u590D\u5236\u94FE\u63A5"
          },
          colorPicker: {
            swatchColorTitle: "\u7CFB\u7EDF\u9884\u8BBE\u989C\u8272",
            recentColorTitle: "\u6700\u8FD1\u4F7F\u7528\u989C\u8272",
            clearConfirmText: "\u786E\u5B9A\u6E05\u7A7A\u6700\u8FD1\u4F7F\u7528\u7684\u989C\u8272\u5417\uFF1F"
          }
        };
        var EAnimationType = /* @__PURE__ */ function(EAnimationType2) {
          EAnimationType2["ripple"] = "ripple";
          EAnimationType2["expand"] = "expand";
          EAnimationType2["fade"] = "fade";
          return EAnimationType2;
        }(EAnimationType || {});
        var defaultGlobalConfig = merge_1(defaultConfig, defaultZhLocale);
        var merge$1 = function merge2(defaultGlobalConfig2, injectConfig) {
          return mergeWith_1(defaultGlobalConfig2, injectConfig, function(objValue, srcValue) {
            if (Array.isArray(objValue)) {
              return srcValue;
            }
          });
        };
        function useConfig(componentName) {
          var globalConfig = vue.inject("globalConfig", /* @__PURE__ */ Object.create(null));
          var mergedGlobalConfig = vue.computed(function() {
            var mergedGlobalConfig2 = merge$1(cloneDeep_1(defaultGlobalConfig), vue.unref(globalConfig));
            return mergedGlobalConfig2;
          });
          var global2 = vue.computed(function() {
            return mergedGlobalConfig.value[componentName];
          });
          var classPrefix2 = vue.computed(function() {
            return mergedGlobalConfig.value.classPrefix;
          });
          var t = function t2(pattern) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            var data = args[0];
            if (typeof pattern === "string") {
              if (!data)
                return pattern;
              var regular = /\{\s*([\w-]+)\s*\}/g;
              var translated = pattern.replace(regular, function(match, key) {
                if (data) {
                  return String(data[key]);
                }
                return "";
              });
              return translated;
            }
            if (typeof pattern === "function") {
              if (!args.length)
                return pattern(vue.h);
              return pattern.apply(void 0, args);
            }
            return "";
          };
          return {
            t,
            global: global2,
            classPrefix: classPrefix2
          };
        }
        function usePrefixClass(componentName) {
          var _useConfig = useConfig("classPrefix"), classPrefix2 = _useConfig.classPrefix;
          return vue.computed(function() {
            return componentName ? "".concat(classPrefix2.value, "-").concat(componentName) : classPrefix2.value;
          });
        }
        function useCommonClassName$2() {
          var _useConfig2 = useConfig("classPrefix"), classPrefix2 = _useConfig2.classPrefix;
          return {
            SIZE: vue.computed(function() {
              return {
                small: "".concat(classPrefix2.value, "-size-s"),
                medium: "".concat(classPrefix2.value, "-size-m"),
                large: "".concat(classPrefix2.value, "-size-l"),
                "default": "",
                xs: "".concat(classPrefix2.value, "-size-xs"),
                xl: "".concat(classPrefix2.value, "-size-xl"),
                block: "".concat(classPrefix2.value, "-size-full-width")
              };
            }),
            STATUS: vue.computed(function() {
              return {
                loading: "".concat(classPrefix2.value, "-is-loading"),
                loadMore: "".concat(classPrefix2.value, "-is-load-more"),
                disabled: "".concat(classPrefix2.value, "-is-disabled"),
                focused: "".concat(classPrefix2.value, "-is-focused"),
                success: "".concat(classPrefix2.value, "-is-success"),
                error: "".concat(classPrefix2.value, "-is-error"),
                warning: "".concat(classPrefix2.value, "-is-warning"),
                selected: "".concat(classPrefix2.value, "-is-selected"),
                active: "".concat(classPrefix2.value, "-is-active"),
                checked: "".concat(classPrefix2.value, "-is-checked"),
                current: "".concat(classPrefix2.value, "-is-current"),
                hidden: "".concat(classPrefix2.value, "-is-hidden"),
                visible: "".concat(classPrefix2.value, "-is-visible"),
                expanded: "".concat(classPrefix2.value, "-is-expanded"),
                indeterminate: "".concat(classPrefix2.value, "-is-indeterminate")
              };
            })
          };
        }
        var GradientIcon = vue.defineComponent({
          name: "TLoadingGradient",
          setup: function setup() {
            var classPrefix2 = usePrefixClass();
            vue.onMounted(function() {
              var circleElem = vue.getCurrentInstance().refs.circle;
              circleAdapter(circleElem);
            });
            return {
              classPrefix: classPrefix2
            };
          },
          render: function render() {
            var classPrefix2 = this.classPrefix;
            var name = "".concat(classPrefix2, "-loading__gradient");
            var classes = [name, "".concat(classPrefix2, "-icon-loading")];
            return vue.createVNode("svg", {
              "class": classes,
              "viewBox": "0 0 14 14",
              "version": "1.1",
              "width": "1em",
              "height": "1em",
              "xmlns": "http://www.w3.org/2000/svg"
            }, [vue.createVNode("foreignObject", {
              "x": "1",
              "y": "1",
              "width": "12",
              "height": "12"
            }, [vue.createVNode("div", {
              "class": "".concat(name, "-conic"),
              "ref": "circle"
            }, null)])]);
          }
        });
        var raf$2 = { exports: {} };
        var performanceNow = { exports: {} };
        (function() {
          var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;
          if (typeof performance !== "undefined" && performance !== null && performance.now) {
            performanceNow.exports = function() {
              return performance.now();
            };
          } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
            performanceNow.exports = function() {
              return (getNanoSeconds() - nodeLoadTime) / 1e6;
            };
            hrtime = process.hrtime;
            getNanoSeconds = function getNanoSeconds2() {
              var hr;
              hr = hrtime();
              return hr[0] * 1e9 + hr[1];
            };
            moduleLoadTime = getNanoSeconds();
            upTime = process.uptime() * 1e9;
            nodeLoadTime = moduleLoadTime - upTime;
          } else if (Date.now) {
            performanceNow.exports = function() {
              return Date.now() - loadTime;
            };
            loadTime = Date.now();
          } else {
            performanceNow.exports = function() {
              return new Date().getTime() - loadTime;
            };
            loadTime = new Date().getTime();
          }
        }).call(commonjsGlobal);
        var now$2 = performanceNow.exports, root$1 = typeof window === "undefined" ? commonjsGlobal : window, vendors = ["moz", "webkit"], suffix = "AnimationFrame", raf = root$1["request" + suffix], caf = root$1["cancel" + suffix] || root$1["cancelRequest" + suffix];
        for (var i = 0; !raf && i < vendors.length; i++) {
          raf = root$1[vendors[i] + "Request" + suffix];
          caf = root$1[vendors[i] + "Cancel" + suffix] || root$1[vendors[i] + "CancelRequest" + suffix];
        }
        if (!raf || !caf) {
          var last$2 = 0, id = 0, queue = [], frameDuration = 1e3 / 60;
          raf = function raf2(callback) {
            if (queue.length === 0) {
              var _now = now$2(), next = Math.max(0, frameDuration - (_now - last$2));
              last$2 = next + _now;
              setTimeout(function() {
                var cp = queue.slice(0);
                queue.length = 0;
                for (var i2 = 0; i2 < cp.length; i2++) {
                  if (!cp[i2].cancelled) {
                    try {
                      cp[i2].callback(last$2);
                    } catch (e) {
                      setTimeout(function() {
                        throw e;
                      }, 0);
                    }
                  }
                }
              }, Math.round(next));
            }
            queue.push({
              handle: ++id,
              callback,
              cancelled: false
            });
            return id;
          };
          caf = function caf2(handle) {
            for (var i2 = 0; i2 < queue.length; i2++) {
              if (queue[i2].handle === handle) {
                queue[i2].cancelled = true;
              }
            }
          };
        }
        raf$2.exports = function(fn) {
          return raf.call(root$1, fn);
        };
        raf$2.exports.cancel = function() {
          caf.apply(root$1, arguments);
        };
        raf$2.exports.polyfill = function(object) {
          if (!object) {
            object = root$1;
          }
          object.requestAnimationFrame = raf;
          object.cancelAnimationFrame = caf;
        };
        var raf$1 = raf$2.exports;
        var baseGetTag$4 = _baseGetTag, isArray$8 = isArray_1, isObjectLike$5 = isObjectLike_1;
        var stringTag$1 = "[object String]";
        function isString(value) {
          return typeof value == "string" || !isArray$8(value) && isObjectLike$5(value) && baseGetTag$4(value) == stringTag$1;
        }
        var isString_1 = isString;
        var easeInOutCubic = function easeInOutCubic2(current, start2, end2, duration) {
          var change = (end2 - start2) / 2;
          var time2 = current / (duration / 2);
          if (time2 < 1) {
            return change * time2 * time2 * time2 + start2;
          }
          time2 -= 2;
          return change * (time2 * time2 * time2 + 2) + start2;
        };
        var isServer$1 = typeof window === "undefined";
        var trim = function trim2(str) {
          return (str || "").replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, "");
        };
        var on$1 = function() {
          if (!isServer$1 && document.addEventListener) {
            return function(element2, event, handler) {
              if (element2 && event && handler) {
                element2.addEventListener(event, handler, false);
              }
            };
          }
          return function(element2, event, handler) {
            if (element2 && event && handler) {
              element2.attachEvent("on".concat(event), handler);
            }
          };
        }();
        var off$1 = function() {
          if (!isServer$1 && document.removeEventListener) {
            return function(element2, event, handler) {
              if (element2 && event) {
                element2.removeEventListener(event, handler, false);
              }
            };
          }
          return function(element2, event, handler) {
            if (element2 && event) {
              element2.detachEvent("on".concat(event), handler);
            }
          };
        }();
        function once(element2, event, handler) {
          var handlerFn = typeof handler === "function" ? handler : handler.handleEvent;
          var callback = function callback2(evt) {
            handlerFn(evt);
            off$1(element2, event, callback2);
          };
          on$1(element2, event, callback);
        }
        function hasClass(el, cls) {
          if (!el || !cls)
            return false;
          if (cls.indexOf(" ") !== -1)
            throw new Error("className should not contain space.");
          if (el.classList) {
            return el.classList.contains(cls);
          }
          return " ".concat(el.className, " ").indexOf(" ".concat(cls, " ")) > -1;
        }
        function addClass(el, cls) {
          if (!el)
            return;
          var curClass = el.className;
          var classes = (cls || "").split(" ");
          for (var i2 = 0, j = classes.length; i2 < j; i2++) {
            var clsName = classes[i2];
            if (!clsName)
              continue;
            if (el.classList) {
              el.classList.add(clsName);
            } else if (!hasClass(el, clsName)) {
              curClass += " ".concat(clsName);
            }
          }
          if (!el.classList) {
            el.className = curClass;
          }
        }
        function removeClass(el, cls) {
          if (!el || !cls)
            return;
          var classes = cls.split(" ");
          var curClass = " ".concat(el.className, " ");
          for (var i2 = 0, j = classes.length; i2 < j; i2++) {
            var clsName = classes[i2];
            if (!clsName)
              continue;
            if (el.classList) {
              el.classList.remove(clsName);
            } else if (hasClass(el, clsName)) {
              curClass = curClass.replace(" ".concat(clsName, " "), " ");
            }
          }
          if (!el.classList) {
            el.className = trim(curClass);
          }
        }
        var getAttach = function getAttach2(node) {
          var attachNode = typeof node === "function" ? node() : node;
          if (!attachNode) {
            return document.body;
          }
          if (isString_1(attachNode)) {
            return document.querySelector(attachNode);
          }
          if (attachNode instanceof HTMLElement) {
            return attachNode;
          }
          return document.body;
        };
        var getScrollContainer = function getScrollContainer2() {
          var container = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "body";
          if (isString_1(container)) {
            return document.querySelector(container);
          }
          if (typeof container === "function") {
            return container();
          }
          return container;
        };
        function isWindow(obj) {
          return obj && obj === obj.window;
        }
        function getScroll(target, isLeft) {
          if (isServer$1 || !target) {
            return 0;
          }
          var method = isLeft ? "scrollLeft" : "scrollTop";
          var result = 0;
          if (isWindow(target)) {
            result = target[isLeft ? "pageXOffset" : "pageYOffset"];
          } else if (target instanceof Document) {
            result = target.documentElement[method];
          } else if (target) {
            result = target[method];
          }
          return result;
        }
        function scrollTo(target, opt) {
          var _opt$container = opt.container, container = _opt$container === void 0 ? window : _opt$container, _opt$duration = opt.duration, duration = _opt$duration === void 0 ? 450 : _opt$duration, _opt$easing = opt.easing, easing = _opt$easing === void 0 ? easeInOutCubic : _opt$easing;
          var scrollTop = getScroll(container);
          var startTime = Date.now();
          return new Promise(function(res) {
            var fnc = function fnc2() {
              var timestamp = Date.now();
              var time2 = timestamp - startTime;
              var nextScrollTop = easing(Math.min(time2, duration), scrollTop, target, duration);
              if (isWindow(container)) {
                container.scrollTo(window.pageXOffset, nextScrollTop);
              } else if (container instanceof Document || container.constructor.name === "HTMLDocument") {
                container.documentElement.scrollTop = nextScrollTop;
              } else {
                container.scrollTop = nextScrollTop;
              }
              if (time2 < duration) {
                raf$1(fnc2);
              } else {
                raf$1(res);
              }
            };
            raf$1(fnc);
          });
        }
        var isNodeOverflow = function isNodeOverflow2(ele) {
          var _ele$clientWidth = ele.clientWidth, clientWidth = _ele$clientWidth === void 0 ? 0 : _ele$clientWidth, _ele$scrollWidth = ele.scrollWidth, scrollWidth = _ele$scrollWidth === void 0 ? 0 : _ele$scrollWidth;
          return scrollWidth > clientWidth;
        };
        var scrollSelectedIntoView = function scrollSelectedIntoView2(parentEle, selected) {
          if (isServer$1)
            return;
          if (!selected || selected.offsetParent !== parentEle) {
            parentEle.scrollTop = 0;
            return;
          }
          var selectedTop = selected.offsetTop;
          var selectedBottom = selectedTop + selected.offsetHeight;
          var parentScrollTop = parentEle.scrollTop;
          var parentViewBottom = parentScrollTop + parentEle.clientHeight;
          if (selectedTop < parentScrollTop) {
            parentEle.scrollTop = selectedTop;
          } else if (selectedBottom > parentViewBottom) {
            parentEle.scrollTop = selectedBottom - parentEle.clientHeight;
          }
        };
        var baseKeys = _baseKeys, getTag$1 = _getTag, isArguments$2 = isArguments_1, isArray$7 = isArray_1, isArrayLike = isArrayLike_1, isBuffer$1 = isBuffer$5.exports, isPrototype = _isPrototype, isTypedArray$1 = isTypedArray_1;
        var mapTag$1 = "[object Map]", setTag$1 = "[object Set]";
        var objectProto$4 = Object.prototype;
        var hasOwnProperty$5 = objectProto$4.hasOwnProperty;
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray$7(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer$1(value) || isTypedArray$1(value) || isArguments$2(value))) {
            return !value.length;
          }
          var tag = getTag$1(value);
          if (tag == mapTag$1 || tag == setTag$1) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty$5.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        var isEmpty_1 = isEmpty;
        function arrayMap$6(array, iteratee) {
          var index2 = -1, length = array == null ? 0 : array.length, result = Array(length);
          while (++index2 < length) {
            result[index2] = iteratee(array[index2], index2, array);
          }
          return result;
        }
        var _arrayMap = arrayMap$6;
        var baseGetTag$3 = _baseGetTag, isObjectLike$4 = isObjectLike_1;
        var symbolTag$1 = "[object Symbol]";
        function isSymbol$4(value) {
          return _typeof$2(value) == "symbol" || isObjectLike$4(value) && baseGetTag$3(value) == symbolTag$1;
        }
        var isSymbol_1 = isSymbol$4;
        var _Symbol$2 = _Symbol$6, arrayMap$5 = _arrayMap, isArray$6 = isArray_1, isSymbol$3 = isSymbol_1;
        var INFINITY$2 = 1 / 0;
        var symbolProto$1 = _Symbol$2 ? _Symbol$2.prototype : void 0, symbolToString = symbolProto$1 ? symbolProto$1.toString : void 0;
        function baseToString$1(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray$6(value)) {
            return arrayMap$5(value, baseToString$1) + "";
          }
          if (isSymbol$3(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result = value + "";
          return result == "0" && 1 / value == -INFINITY$2 ? "-0" : result;
        }
        var _baseToString = baseToString$1;
        var baseToString = _baseToString;
        function toString$8(value) {
          return value == null ? "" : baseToString(value);
        }
        var toString_1 = toString$8;
        function baseSlice$3(array, start2, end2) {
          var index2 = -1, length = array.length;
          if (start2 < 0) {
            start2 = -start2 > length ? 0 : length + start2;
          }
          end2 = end2 > length ? length : end2;
          if (end2 < 0) {
            end2 += length;
          }
          length = start2 > end2 ? 0 : end2 - start2 >>> 0;
          start2 >>>= 0;
          var result = Array(length);
          while (++index2 < length) {
            result[index2] = array[index2 + start2];
          }
          return result;
        }
        var _baseSlice = baseSlice$3;
        var baseSlice$2 = _baseSlice;
        function castSlice$1(array, start2, end2) {
          var length = array.length;
          end2 = end2 === void 0 ? length : end2;
          return !start2 && end2 >= length ? array : baseSlice$2(array, start2, end2);
        }
        var _castSlice = castSlice$1;
        var rsAstralRange$2 = "\\ud800-\\udfff", rsComboMarksRange$3 = "\\u0300-\\u036f", reComboHalfMarksRange$3 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$3 = "\\u20d0-\\u20ff", rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3, rsVarRange$2 = "\\ufe0e\\ufe0f";
        var rsZWJ$2 = "\\u200d";
        var reHasUnicode = RegExp("[" + rsZWJ$2 + rsAstralRange$2 + rsComboRange$3 + rsVarRange$2 + "]");
        function hasUnicode$2(string) {
          return reHasUnicode.test(string);
        }
        var _hasUnicode = hasUnicode$2;
        function asciiToArray$1(string) {
          return string.split("");
        }
        var _asciiToArray = asciiToArray$1;
        var rsAstralRange$1 = "\\ud800-\\udfff", rsComboMarksRange$2 = "\\u0300-\\u036f", reComboHalfMarksRange$2 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$2 = "\\u20d0-\\u20ff", rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2, rsVarRange$1 = "\\ufe0e\\ufe0f";
        var rsAstral = "[" + rsAstralRange$1 + "]", rsCombo$2 = "[" + rsComboRange$2 + "]", rsFitz$1 = "\\ud83c[\\udffb-\\udfff]", rsModifier$1 = "(?:" + rsCombo$2 + "|" + rsFitz$1 + ")", rsNonAstral$1 = "[^" + rsAstralRange$1 + "]", rsRegional$1 = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair$1 = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsZWJ$1 = "\\u200d";
        var reOptMod$1 = rsModifier$1 + "?", rsOptVar$1 = "[" + rsVarRange$1 + "]?", rsOptJoin$1 = "(?:" + rsZWJ$1 + "(?:" + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join("|") + ")" + rsOptVar$1 + reOptMod$1 + ")*", rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1, rsSymbol = "(?:" + [rsNonAstral$1 + rsCombo$2 + "?", rsCombo$2, rsRegional$1, rsSurrPair$1, rsAstral].join("|") + ")";
        var reUnicode = RegExp(rsFitz$1 + "(?=" + rsFitz$1 + ")|" + rsSymbol + rsSeq$1, "g");
        function unicodeToArray$1(string) {
          return string.match(reUnicode) || [];
        }
        var _unicodeToArray = unicodeToArray$1;
        var asciiToArray = _asciiToArray, hasUnicode$1 = _hasUnicode, unicodeToArray = _unicodeToArray;
        function stringToArray$1(string) {
          return hasUnicode$1(string) ? unicodeToArray(string) : asciiToArray(string);
        }
        var _stringToArray = stringToArray$1;
        var castSlice = _castSlice, hasUnicode = _hasUnicode, stringToArray = _stringToArray, toString$7 = toString_1;
        function createCaseFirst$1(methodName) {
          return function(string) {
            string = toString$7(string);
            var strSymbols = hasUnicode(string) ? stringToArray(string) : void 0;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        var _createCaseFirst = createCaseFirst$1;
        var createCaseFirst = _createCaseFirst;
        var upperFirst$1 = createCaseFirst("toUpperCase");
        var upperFirst_1 = upperFirst$1;
        var toString$6 = toString_1, upperFirst = upperFirst_1;
        function capitalize$1(string) {
          return upperFirst(toString$6(string).toLowerCase());
        }
        var capitalize_1 = capitalize$1;
        function arrayReduce$1(array, iteratee, accumulator, initAccum) {
          var index2 = -1, length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[++index2];
          }
          while (++index2 < length) {
            accumulator = iteratee(accumulator, array[index2], index2, array);
          }
          return accumulator;
        }
        var _arrayReduce = arrayReduce$1;
        function basePropertyOf$2(object) {
          return function(key) {
            return object == null ? void 0 : object[key];
          };
        }
        var _basePropertyOf = basePropertyOf$2;
        var basePropertyOf$1 = _basePropertyOf;
        var deburredLetters = {
          "\xC0": "A",
          "\xC1": "A",
          "\xC2": "A",
          "\xC3": "A",
          "\xC4": "A",
          "\xC5": "A",
          "\xE0": "a",
          "\xE1": "a",
          "\xE2": "a",
          "\xE3": "a",
          "\xE4": "a",
          "\xE5": "a",
          "\xC7": "C",
          "\xE7": "c",
          "\xD0": "D",
          "\xF0": "d",
          "\xC8": "E",
          "\xC9": "E",
          "\xCA": "E",
          "\xCB": "E",
          "\xE8": "e",
          "\xE9": "e",
          "\xEA": "e",
          "\xEB": "e",
          "\xCC": "I",
          "\xCD": "I",
          "\xCE": "I",
          "\xCF": "I",
          "\xEC": "i",
          "\xED": "i",
          "\xEE": "i",
          "\xEF": "i",
          "\xD1": "N",
          "\xF1": "n",
          "\xD2": "O",
          "\xD3": "O",
          "\xD4": "O",
          "\xD5": "O",
          "\xD6": "O",
          "\xD8": "O",
          "\xF2": "o",
          "\xF3": "o",
          "\xF4": "o",
          "\xF5": "o",
          "\xF6": "o",
          "\xF8": "o",
          "\xD9": "U",
          "\xDA": "U",
          "\xDB": "U",
          "\xDC": "U",
          "\xF9": "u",
          "\xFA": "u",
          "\xFB": "u",
          "\xFC": "u",
          "\xDD": "Y",
          "\xFD": "y",
          "\xFF": "y",
          "\xC6": "Ae",
          "\xE6": "ae",
          "\xDE": "Th",
          "\xFE": "th",
          "\xDF": "ss",
          "\u0100": "A",
          "\u0102": "A",
          "\u0104": "A",
          "\u0101": "a",
          "\u0103": "a",
          "\u0105": "a",
          "\u0106": "C",
          "\u0108": "C",
          "\u010A": "C",
          "\u010C": "C",
          "\u0107": "c",
          "\u0109": "c",
          "\u010B": "c",
          "\u010D": "c",
          "\u010E": "D",
          "\u0110": "D",
          "\u010F": "d",
          "\u0111": "d",
          "\u0112": "E",
          "\u0114": "E",
          "\u0116": "E",
          "\u0118": "E",
          "\u011A": "E",
          "\u0113": "e",
          "\u0115": "e",
          "\u0117": "e",
          "\u0119": "e",
          "\u011B": "e",
          "\u011C": "G",
          "\u011E": "G",
          "\u0120": "G",
          "\u0122": "G",
          "\u011D": "g",
          "\u011F": "g",
          "\u0121": "g",
          "\u0123": "g",
          "\u0124": "H",
          "\u0126": "H",
          "\u0125": "h",
          "\u0127": "h",
          "\u0128": "I",
          "\u012A": "I",
          "\u012C": "I",
          "\u012E": "I",
          "\u0130": "I",
          "\u0129": "i",
          "\u012B": "i",
          "\u012D": "i",
          "\u012F": "i",
          "\u0131": "i",
          "\u0134": "J",
          "\u0135": "j",
          "\u0136": "K",
          "\u0137": "k",
          "\u0138": "k",
          "\u0139": "L",
          "\u013B": "L",
          "\u013D": "L",
          "\u013F": "L",
          "\u0141": "L",
          "\u013A": "l",
          "\u013C": "l",
          "\u013E": "l",
          "\u0140": "l",
          "\u0142": "l",
          "\u0143": "N",
          "\u0145": "N",
          "\u0147": "N",
          "\u014A": "N",
          "\u0144": "n",
          "\u0146": "n",
          "\u0148": "n",
          "\u014B": "n",
          "\u014C": "O",
          "\u014E": "O",
          "\u0150": "O",
          "\u014D": "o",
          "\u014F": "o",
          "\u0151": "o",
          "\u0154": "R",
          "\u0156": "R",
          "\u0158": "R",
          "\u0155": "r",
          "\u0157": "r",
          "\u0159": "r",
          "\u015A": "S",
          "\u015C": "S",
          "\u015E": "S",
          "\u0160": "S",
          "\u015B": "s",
          "\u015D": "s",
          "\u015F": "s",
          "\u0161": "s",
          "\u0162": "T",
          "\u0164": "T",
          "\u0166": "T",
          "\u0163": "t",
          "\u0165": "t",
          "\u0167": "t",
          "\u0168": "U",
          "\u016A": "U",
          "\u016C": "U",
          "\u016E": "U",
          "\u0170": "U",
          "\u0172": "U",
          "\u0169": "u",
          "\u016B": "u",
          "\u016D": "u",
          "\u016F": "u",
          "\u0171": "u",
          "\u0173": "u",
          "\u0174": "W",
          "\u0175": "w",
          "\u0176": "Y",
          "\u0177": "y",
          "\u0178": "Y",
          "\u0179": "Z",
          "\u017B": "Z",
          "\u017D": "Z",
          "\u017A": "z",
          "\u017C": "z",
          "\u017E": "z",
          "\u0132": "IJ",
          "\u0133": "ij",
          "\u0152": "Oe",
          "\u0153": "oe",
          "\u0149": "'n",
          "\u017F": "s"
        };
        var deburrLetter$1 = basePropertyOf$1(deburredLetters);
        var _deburrLetter = deburrLetter$1;
        var deburrLetter = _deburrLetter, toString$5 = toString_1;
        var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
        var rsComboMarksRange$1 = "\\u0300-\\u036f", reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f", rsComboSymbolsRange$1 = "\\u20d0-\\u20ff", rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;
        var rsCombo$1 = "[" + rsComboRange$1 + "]";
        var reComboMark = RegExp(rsCombo$1, "g");
        function deburr$1(string) {
          string = toString$5(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        var deburr_1 = deburr$1;
        var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
        function asciiWords$1(string) {
          return string.match(reAsciiWord) || [];
        }
        var _asciiWords = asciiWords$1;
        var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
        function hasUnicodeWord$1(string) {
          return reHasUnicodeWord.test(string);
        }
        var _hasUnicodeWord = hasUnicodeWord$1;
        var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
        var rsApos$1 = "['\u2019]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
        var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos$1 + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos$1 + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq;
        var reUnicodeWord = RegExp([rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")", rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")", rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower, rsUpper + "+" + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join("|"), "g");
        function unicodeWords$1(string) {
          return string.match(reUnicodeWord) || [];
        }
        var _unicodeWords = unicodeWords$1;
        var asciiWords = _asciiWords, hasUnicodeWord = _hasUnicodeWord, toString$4 = toString_1, unicodeWords = _unicodeWords;
        function words$1(string, pattern, guard) {
          string = toString$4(string);
          pattern = guard ? void 0 : pattern;
          if (pattern === void 0) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var words_1 = words$1;
        var arrayReduce = _arrayReduce, deburr = deburr_1, words = words_1;
        var rsApos = "['\u2019]";
        var reApos = RegExp(rsApos, "g");
        function createCompounder$3(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
          };
        }
        var _createCompounder = createCompounder$3;
        var capitalize = capitalize_1, createCompounder$2 = _createCompounder;
        var camelCase = createCompounder$2(function(result, word, index2) {
          word = word.toLowerCase();
          return result + (index2 ? capitalize(word) : word);
        });
        var camelCase_1 = camelCase;
        var createCompounder$1 = _createCompounder;
        var kebabCase = createCompounder$1(function(result, word, index2) {
          return result + (index2 ? "-" : "") + word.toLowerCase();
        });
        var kebabCase_1 = kebabCase;
        function getDefaultNode(options) {
          var defaultNode;
          if (isObject_1(options) && "defaultNode" in options) {
            defaultNode = options.defaultNode;
          } else if (vue.isVNode(options) || isString_1(options)) {
            defaultNode = options;
          }
          return defaultNode;
        }
        function getParams(options) {
          return isObject_1(options) && "params" in options ? options.params : {};
        }
        function handleSlots$1(instance, params, name) {
          var _instance$$slots$came, _instance$$slots, _instance$$slots$keba, _instance$$slots2;
          var node = (_instance$$slots$came = (_instance$$slots = instance.$slots)[camelCase_1(name)]) === null || _instance$$slots$came === void 0 ? void 0 : _instance$$slots$came.call(_instance$$slots, params);
          if (node)
            return node;
          node = (_instance$$slots$keba = (_instance$$slots2 = instance.$slots)[kebabCase_1(name)]) === null || _instance$$slots$keba === void 0 ? void 0 : _instance$$slots$keba.call(_instance$$slots2, params);
          if (node)
            return node;
          return null;
        }
        var renderTNodeJSX = function renderTNodeJSX2(instance, name, options) {
          var params = getParams(options);
          var defaultNode = getDefaultNode(options);
          var propsNode;
          if (name in instance) {
            propsNode = instance[name];
          }
          if (propsNode === false)
            return;
          if (propsNode === true && defaultNode) {
            return handleSlots$1(instance, params, name) || defaultNode;
          }
          if (isFunction_1(propsNode))
            return propsNode(vue.h, params);
          var isPropsEmpty = [void 0, params, ""].includes(propsNode);
          if (isPropsEmpty && (instance.$slots[camelCase_1(name)] || instance.$slots[kebabCase_1(name)])) {
            return handleSlots$1(instance, params, name);
          }
          return propsNode;
        };
        var renderTNodeJSXDefault = function renderTNodeJSXDefault2(vm, name, options) {
          var defaultNode = getDefaultNode(options);
          return renderTNodeJSX(vm, name, options) || defaultNode;
        };
        var renderContent = function renderContent2(vm, name1, name2, options) {
          var params = getParams(options);
          var defaultNode = getDefaultNode(options);
          var toParams = params ? {
            params
          } : void 0;
          var node1 = renderTNodeJSX(vm, name1, toParams);
          var node2 = renderTNodeJSX(vm, name2, toParams);
          var res = isEmpty_1(node1) ? node2 : node1;
          return isEmpty_1(res) ? defaultNode : res;
        };
        var TransferDom = {
          mounted: function mounted(el, binding) {
            if (!binding.value)
              return;
            var parentNode = getAttach(binding.value);
            parentNode === null || parentNode === void 0 ? void 0 : parentNode.appendChild(el);
          }
        };
        var props$19 = {
          attach: {
            type: [String, Function],
            "default": ""
          },
          content: {
            type: [String, Function]
          },
          "default": {
            type: [String, Function]
          },
          delay: {
            type: Number,
            "default": 0
          },
          fullscreen: Boolean,
          indicator: {
            type: [Boolean, Function],
            "default": true
          },
          inheritColor: Boolean,
          loading: {
            type: Boolean,
            "default": true
          },
          preventScrollThrough: {
            type: Boolean,
            "default": true
          },
          showOverlay: {
            type: Boolean,
            "default": true
          },
          size: {
            type: String,
            "default": "medium"
          },
          text: {
            type: [String, Function]
          },
          zIndex: {
            type: Number
          }
        };
        var useComponentClassName$2 = function useComponentClassName2() {
          return {
            name: usePrefixClass("loading"),
            centerClass: usePrefixClass("loading--center"),
            fullscreenClass: usePrefixClass("loading__fullscreen"),
            lockClass: usePrefixClass("loading--lock"),
            overlayClass: usePrefixClass("loading__overlay"),
            relativeClass: usePrefixClass("loading__parent"),
            fullClass: usePrefixClass("loading--full"),
            inheritColorClass: usePrefixClass("loading--inherit-color")
          };
        };
        var _Loading = vue.defineComponent({
          name: "TLoading",
          directives: {
            TransferDom
          },
          props: props$19,
          setup: function setup(props2, _ref) {
            var slots = _ref.slots;
            var delayShowLoading = vue.ref(false);
            var _useComponentClassNam = useComponentClassName$2(), name = _useComponentClassNam.name, centerClass = _useComponentClassNam.centerClass, fullscreenClass = _useComponentClassNam.fullscreenClass, lockClass = _useComponentClassNam.lockClass, overlayClass = _useComponentClassNam.overlayClass, relativeClass = _useComponentClassNam.relativeClass, fullClass = _useComponentClassNam.fullClass, inheritColorClass = _useComponentClassNam.inheritColorClass;
            var classPrefix2 = usePrefixClass();
            var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE;
            var countDelay = function countDelay2() {
              delayShowLoading.value = false;
              var timer = setTimeout(function() {
                delayShowLoading.value = true;
                clearTimeout(timer);
              }, props2.delay);
            };
            var delayCounted = vue.computed(function() {
              return Boolean(!props2.delay || props2.delay && delayShowLoading.value);
            });
            var styles = vue.computed(function() {
              var styles2 = {};
              if (props2.zIndex !== void 0) {
                styles2.zIndex = props2.zIndex;
              }
              if (!["small", "medium", "large"].includes(props2.size)) {
                styles2["font-size"] = props2.size;
              }
              return styles2;
            });
            var hasContent = vue.computed(function() {
              return Boolean(props2["default"] || slots["default"] || props2.content || slots.content);
            });
            var lockFullscreen = vue.computed(function() {
              return props2.preventScrollThrough && props2.fullscreen;
            });
            var showText = vue.computed(function() {
              return Boolean(props2.text || slots.text);
            });
            var showWrapLoading = vue.computed(function() {
              return hasContent.value && props2.loading && delayCounted.value;
            });
            var showFullScreenLoading = vue.computed(function() {
              return props2.fullscreen && props2.loading && delayCounted.value;
            });
            var showNormalLoading = vue.computed(function() {
              return props2.attach && props2.loading && delayCounted.value;
            });
            var showAttachedLoading = vue.computed(function() {
              return props2.attach && props2.loading && delayCounted.value;
            });
            var classes = vue.computed(function() {
              var baseClasses = [centerClass.value, SIZE.value[props2.size], _defineProperty$3({}, inheritColorClass.value, props2.inheritColor)];
              var fullScreenClasses = [name.value, fullscreenClass.value, centerClass.value, overlayClass.value];
              return {
                baseClasses,
                attachClasses: baseClasses.concat([name.value, fullClass.value, _defineProperty$3({}, overlayClass.value, props2.showOverlay)]),
                withContentClasses: baseClasses.concat([name.value, fullClass.value, _defineProperty$3({}, overlayClass.value, props2.showOverlay)]),
                fullScreenClasses,
                normalClasses: baseClasses.concat([name.value])
              };
            });
            var _toRefs = vue.toRefs(props2), loading = _toRefs.loading;
            vue.watch([loading], function(_ref5) {
              var _ref6 = _slicedToArray(_ref5, 1), isLoading = _ref6[0];
              if (isLoading) {
                countDelay();
                lockFullscreen.value && addClass(document.body, lockClass.value);
              } else {
                lockFullscreen.value && removeClass(document.body, lockClass.value);
              }
            });
            vue.onMounted(function() {
              props2.delay && countDelay();
            });
            return {
              classPrefix: classPrefix2,
              relativeClass,
              delayShowLoading,
              styles,
              showText,
              hasContent,
              classes,
              lockFullscreen,
              showWrapLoading,
              showNormalLoading,
              showFullScreenLoading,
              showAttachedLoading
            };
          },
          render: function render() {
            var _this$classes = this.classes, fullScreenClasses = _this$classes.fullScreenClasses, baseClasses = _this$classes.baseClasses, withContentClasses = _this$classes.withContentClasses, attachClasses = _this$classes.attachClasses, normalClasses = _this$classes.normalClasses;
            var defaultIndicator = vue.createVNode(GradientIcon, {
              "size": this.size
            }, null);
            var indicator = this.loading && renderTNodeJSX(this, "indicator", defaultIndicator);
            var text = this.showText && vue.createVNode("div", {
              "class": "".concat(this.classPrefix, "-loading__text")
            }, [renderTNodeJSX(this, "text")]);
            if (this.fullscreen) {
              if (!this.showFullScreenLoading)
                return null;
              return vue.withDirectives(vue.createVNode("div", {
                "class": fullScreenClasses,
                "style": this.styles
              }, [vue.createVNode("div", {
                "class": baseClasses
              }, [indicator, text])]), [[vue.resolveDirective("transfer-dom"), this.attach]]);
            }
            if (this.hasContent) {
              return vue.createVNode("div", {
                "class": this.relativeClass
              }, [renderContent(this, "default", "content"), this.showWrapLoading && vue.createVNode("div", {
                "class": withContentClasses,
                "style": this.styles
              }, [indicator, text])]);
            }
            if (this.attach) {
              if (!this.showAttachedLoading)
                return null;
              return vue.withDirectives(vue.createVNode("div", {
                "class": attachClasses,
                "style": this.styles
              }, [indicator, text]), [[vue.resolveDirective("transfer-dom"), this.attach]]);
            }
            return vue.createVNode("div", {
              "class": normalClasses,
              "style": this.styles
            }, [indicator, text]);
          }
        });
        function withInstall(comp, alias) {
          var componentPlugin = comp;
          componentPlugin.install = function(app2, name) {
            var defaultName = componentPlugin.name.includes("-mapprops") ? componentPlugin.name.replace("-mapprops", "") : componentPlugin.name;
            app2.component(alias || name || defaultName, comp);
          };
          return componentPlugin;
        }
        function ownKeys$2r(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$2q(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$2r(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2r(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var fullScreenLoadingInstance = null;
        function createLoading(props2) {
          var component = vue.defineComponent({
            setup: function setup() {
              var loadingOptions = vue.reactive(props2);
              return {
                loadingOptions
              };
            },
            render: function render() {
              return vue.h(_Loading, _objectSpread$2q({}, this.loadingOptions));
            }
          });
          var attach = getAttach(props2.attach);
          var loading = vue.createApp(component).mount(document.createElement("div"));
          if (attach) {
            attach.appendChild(loading.$el);
          } else {
            console.error("attach is not exist");
          }
          var loadingInstance = {
            hide: function hide2() {
              loading.loading = false;
              loading.$el.parentNode.removeChild(loading.$el);
            }
          };
          return loadingInstance;
        }
        function produceLoading(props2) {
          var lockClass = usePrefixClass("loading--lock");
          if (props2 === true) {
            fullScreenLoadingInstance = createLoading({
              fullscreen: true,
              loading: true,
              attach: "body"
            });
            return fullScreenLoadingInstance;
          }
          removeClass(document.body, lockClass.value);
          if (props2 === false) {
            removeClass(document.body, lockClass.value);
            fullScreenLoadingInstance.hide();
            fullScreenLoadingInstance = null;
            return;
          }
          return createLoading(props2);
        }
        var LoadingPlugin = produceLoading;
        LoadingPlugin.install = function(app2) {
          app2.config.globalProperties.$loading = produceLoading;
        };
        var Loading = withInstall(_Loading);
        var props$18 = {
          block: Boolean,
          content: {
            type: [String, Function]
          },
          "default": {
            type: [String, Function]
          },
          disabled: Boolean,
          ghost: Boolean,
          icon: {
            type: Function
          },
          loading: Boolean,
          shape: {
            type: String,
            "default": "rectangle",
            validator: function validator(val) {
              return ["rectangle", "square", "round", "circle"].includes(val);
            }
          },
          size: {
            type: String,
            "default": "medium",
            validator: function validator(val) {
              return ["small", "medium", "large"].includes(val);
            }
          },
          theme: {
            type: String,
            "default": void 0,
            validator: function validator(val) {
              return ["default", "primary", "danger", "warning", "success"].includes(val);
            }
          },
          type: {
            type: String,
            "default": "button",
            validator: function validator(val) {
              return ["submit", "reset", "button"].includes(val);
            }
          },
          variant: {
            type: String,
            "default": "base",
            validator: function validator(val) {
              return ["base", "outline", "dashed", "text"].includes(val);
            }
          },
          onClick: Function
        };
        var expand = EAnimationType.expand, ripple = EAnimationType.ripple, fade = EAnimationType.fade;
        function useKeepAnimation() {
          var _useConfig = useConfig("animation"), global2 = _useConfig.global;
          var keepAnimation = function keepAnimation2(type) {
            var _animationConfig$excl, _animationConfig$incl;
            var animationConfig = global2.value;
            return animationConfig && !((_animationConfig$excl = animationConfig.exclude) !== null && _animationConfig$excl !== void 0 && _animationConfig$excl.includes(type)) && ((_animationConfig$incl = animationConfig.include) === null || _animationConfig$incl === void 0 ? void 0 : _animationConfig$incl.includes(type));
          };
          return {
            keepExpand: keepAnimation(expand),
            keepRipple: keepAnimation(ripple),
            keepFade: keepAnimation(fade)
          };
        }
        function setStyle(el, styles) {
          var keys2 = Object.keys(styles);
          keys2.forEach(function(key) {
            el.style[key] = styles[key];
          });
        }
        var period = 200;
        var noneRippleBg = "rgba(0, 0, 0, 0)";
        var defaultRippleColor = "rgba(0, 0, 0, 0.35)";
        var getRippleColor = function getRippleColor2(el, fixedRippleColor) {
          var _el$dataset;
          if (fixedRippleColor) {
            return fixedRippleColor;
          }
          if (el !== null && el !== void 0 && (_el$dataset = el.dataset) !== null && _el$dataset !== void 0 && _el$dataset.ripple) {
            var rippleColor = el.dataset.ripple;
            return rippleColor;
          }
          var cssVariable = getComputedStyle(el).getPropertyValue("--ripple-color");
          if (cssVariable) {
            return cssVariable;
          }
          return defaultRippleColor;
        };
        function useRipple(el, fixedRippleColor) {
          var rippleContainer = vue.ref(null);
          var classPrefix2 = usePrefixClass();
          var _useKeepAnimation = useKeepAnimation(), keepRipple = _useKeepAnimation.keepRipple;
          var handleAddRipple = function handleAddRipple2(e) {
            var dom = el.value;
            var rippleColor = getRippleColor(dom, fixedRippleColor === null || fixedRippleColor === void 0 ? void 0 : fixedRippleColor.value);
            if (e.button !== 0 || !el || !keepRipple)
              return;
            if (dom.classList.contains("".concat(classPrefix2.value, "-is-active")) || dom.classList.contains("".concat(classPrefix2.value, "-is-disabled")) || dom.classList.contains("".concat(classPrefix2.value, "-is-checked")))
              return;
            var elStyle = getComputedStyle(dom);
            var elBorder = parseInt(elStyle.borderWidth, 10);
            var border = elBorder > 0 ? elBorder : 0;
            var width = dom.offsetWidth;
            var height = dom.offsetHeight;
            if (rippleContainer.value.parentNode === null) {
              setStyle(rippleContainer.value, {
                position: "absolute",
                left: "".concat(0 - border, "px"),
                top: "".concat(0 - border, "px"),
                width: "".concat(width, "px"),
                height: "".concat(height, "px"),
                borderRadius: elStyle.borderRadius,
                pointerEvents: "none",
                overflow: "hidden"
              });
              dom.appendChild(rippleContainer.value);
            }
            var ripple2 = document.createElement("div");
            setStyle(ripple2, {
              marginTop: "0",
              marginLeft: "0",
              right: "".concat(width, "px"),
              width: "".concat(width + 20, "px"),
              height: "100%",
              transition: "transform ".concat(period, "ms cubic-bezier(.38, 0, .24, 1), background ").concat(period * 2, "ms linear"),
              transform: "skewX(-8deg)",
              pointerEvents: "none",
              position: "absolute",
              zIndex: 0,
              backgroundColor: rippleColor,
              opacity: "0.9"
            });
            var elMap = /* @__PURE__ */ new WeakMap();
            for (var n = dom.children.length, i2 = 0; i2 < n; ++i2) {
              var child = dom.children[i2];
              if (child.style.zIndex === "" && child !== rippleContainer.value) {
                child.style.zIndex = "1";
                elMap.set(child, true);
              }
            }
            var initPosition = dom.style.position ? dom.style.position : getComputedStyle(dom).position;
            if (initPosition === "" || initPosition === "static") {
              dom.style.position = "relative";
            }
            rippleContainer.value.insertBefore(ripple2, rippleContainer.value.firstChild);
            setTimeout(function() {
              ripple2.style.transform = "translateX(".concat(width, "px)");
            }, 0);
            var handleClearRipple = function handleClearRipple2() {
              ripple2.style.backgroundColor = noneRippleBg;
              if (!el.value)
                return;
              el.value.removeEventListener("pointerup", handleClearRipple2, false);
              el.value.removeEventListener("pointerleave", handleClearRipple2, false);
              setTimeout(function() {
                ripple2.remove();
                if (rippleContainer.value.children.length === 0)
                  rippleContainer.value.remove();
              }, period * 2 + 100);
            };
            el.value.addEventListener("pointerup", handleClearRipple, false);
            el.value.addEventListener("pointerleave", handleClearRipple, false);
          };
          vue.onMounted(function() {
            var dom = el.value;
            if (!dom)
              return;
            rippleContainer.value = document.createElement("div");
            dom.addEventListener("pointerdown", handleAddRipple, false);
          });
          vue.onUnmounted(function() {
            var _el$value;
            (_el$value = el.value) === null || _el$value === void 0 ? void 0 : _el$value.removeEventListener("pointerdown", handleAddRipple, false);
          });
        }
        function useFormDisabled(extend2) {
          var _getCurrentInstance = vue.getCurrentInstance(), props2 = _getCurrentInstance.props;
          var propsDisabled = vue.computed(function() {
            return props2.disabled;
          });
          var _inject = vue.inject("formDisabled", /* @__PURE__ */ Object.create(null)), disabled = _inject.disabled;
          return vue.computed(function() {
            return propsDisabled.value || (disabled === null || disabled === void 0 ? void 0 : disabled.value) || (extend2 === null || extend2 === void 0 ? void 0 : extend2.value);
          });
        }
        function handleSlots(instance, name, params) {
          var _instance$slots$camel, _instance$slots, _instance$slots$kebab, _instance$slots2;
          var node = (_instance$slots$camel = (_instance$slots = instance.slots)[camelCase_1(name)]) === null || _instance$slots$camel === void 0 ? void 0 : _instance$slots$camel.call(_instance$slots, params);
          if (node)
            return node;
          node = (_instance$slots$kebab = (_instance$slots2 = instance.slots)[kebabCase_1(name)]) === null || _instance$slots$kebab === void 0 ? void 0 : _instance$slots$kebab.call(_instance$slots2, params);
          if (node)
            return node;
          return null;
        }
        var useTNodeJSX = function useTNodeJSX2() {
          var instance = vue.getCurrentInstance();
          return function(name, options) {
            var params = getParams(options);
            var defaultNode = getDefaultNode(options);
            var propsNode;
            if (Object.keys(instance.props).includes(name)) {
              propsNode = instance.props[name];
            }
            if (propsNode === false)
              return;
            if (propsNode === true) {
              return handleSlots(instance, name, params) || defaultNode;
            }
            if (isFunction_1(propsNode))
              return propsNode(vue.h, params);
            var isPropsEmpty = [void 0, params, ""].includes(propsNode);
            if (isPropsEmpty && (instance.slots[camelCase_1(name)] || instance.slots[kebabCase_1(name)])) {
              return handleSlots(instance, name, params);
            }
            return propsNode;
          };
        };
        var useTNodeDefault = function useTNodeDefault2() {
          var renderTNodeJSX2 = useTNodeJSX();
          return function(name, options) {
            var defaultNode = getDefaultNode(options);
            return renderTNodeJSX2(name, options) || defaultNode;
          };
        };
        var useContent = function useContent2() {
          var renderTNodeJSX2 = useTNodeJSX();
          return function(name1, name2, options) {
            var params = getParams(options);
            var defaultNode = getDefaultNode(options);
            var toParams = params ? {
              params
            } : void 0;
            var node1 = renderTNodeJSX2(name1, toParams);
            var node2 = renderTNodeJSX2(name2, toParams);
            var res = isEmpty_1(node1) ? node2 : node1;
            return isEmpty_1(res) ? defaultNode : res;
          };
        };
        var TButton = vue.defineComponent({
          name: "TButton",
          inheritAttrs: false,
          props: props$18,
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var renderTNodeJSX2 = useTNodeJSX();
            var renderContent2 = useContent();
            var COMPONENT_NAME2 = usePrefixClass("button");
            var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS, SIZE = _useCommonClassName.SIZE;
            var disabled = useFormDisabled();
            var btnRef = vue.ref();
            useRipple(btnRef);
            var isDisabled = vue.computed(function() {
              return props2.disabled || props2.loading || disabled.value;
            });
            var mergeTheme = vue.computed(function() {
              var theme = props2.theme, variant = props2.variant;
              if (theme)
                return theme;
              if (variant === "base")
                return "primary";
              return "default";
            });
            var buttonClass = vue.computed(function() {
              var _ref2;
              return ["".concat(COMPONENT_NAME2.value), SIZE.value[props2.size], "".concat(COMPONENT_NAME2.value, "--variant-").concat(props2.variant), "".concat(COMPONENT_NAME2.value, "--theme-").concat(mergeTheme.value), (_ref2 = {}, _defineProperty$3(_ref2, STATUS.value.disabled, isDisabled.value), _defineProperty$3(_ref2, STATUS.value.loading, props2.loading), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME2.value, "--shape-").concat(props2.shape), props2.shape !== "rectangle"), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME2.value, "--ghost"), props2.ghost), _defineProperty$3(_ref2, SIZE.value.block, props2.block), _ref2)];
            });
            return function() {
              var buttonContent = renderContent2("default", "content");
              var icon = props2.loading ? vue.createVNode(Loading, {
                "inheritColor": true
              }, null) : renderTNodeJSX2("icon");
              var iconOnly = icon && !buttonContent;
              buttonContent = buttonContent ? vue.createVNode("span", {
                "class": "".concat(COMPONENT_NAME2.value, "__text")
              }, [buttonContent]) : "";
              if (icon) {
                buttonContent = [icon, buttonContent];
              }
              return vue.createVNode("button", vue.mergeProps({
                "ref": btnRef,
                "class": [].concat(_toConsumableArray(buttonClass.value), [_defineProperty$3({}, "".concat(COMPONENT_NAME2.value, "--icon-only"), iconOnly)]),
                "type": props2.type,
                "disabled": isDisabled.value
              }, attrs, {
                "onClick": props2.onClick
              }), [buttonContent]);
            };
          }
        });
        var Button = withInstall(TButton);
        var props$17 = {
          align: {
            type: String,
            "default": "center",
            validator: function validator(val) {
              return ["left", "right", "center"].includes(val);
            }
          },
          content: {
            type: [String, Function]
          },
          dashed: Boolean,
          "default": {
            type: [String, Function]
          },
          layout: {
            type: String,
            "default": "horizontal",
            validator: function validator(val) {
              return ["horizontal", "vertical"].includes(val);
            }
          },
          theme: {
            type: String,
            "default": "horizontal",
            validator: function validator(val) {
              return ["horizontal", "vertical"].includes(val);
            }
          }
        };
        function ownKeys$2q(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$2p(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$2q(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2q(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _Divider = vue.defineComponent({
          name: "TDivider",
          props: _objectSpread$2p({}, props$17),
          setup: function setup(props2) {
            var COMPONENT_NAME2 = usePrefixClass("divider");
            var renderContent2 = useContent();
            return function() {
              var _ref;
              var theme = props2.theme, dashed = props2.dashed, align = props2.align;
              var children = renderContent2("default", "content");
              var dividerClassNames = ["".concat(COMPONENT_NAME2.value), ["".concat(COMPONENT_NAME2.value, "--").concat(theme)], (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--dashed"), !!dashed), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--with-text"), !!children), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--with-text-").concat(align), !!children), _ref)];
              return vue.createVNode("div", {
                "class": dividerClassNames
              }, [children && vue.createVNode("span", {
                "class": "".concat(COMPONENT_NAME2.value, "__inner-text")
              }, [children])]);
            };
          }
        });
        var Divider = withInstall(_Divider);
        function _defineProperty$1(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function ownKeys$2p(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$2o(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$2p(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2p(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function camel2Kebab(camelString) {
          var covertArr = ["fillOpacity", "fillRule", "clipRule"];
          if (covertArr.includes(camelString)) {
            return camelString.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2").toLowerCase();
          }
          return camelString;
        }
        function renderFn(node, props2) {
          var kebabAttrs = Object.keys(node.attrs).reduce(function(result, key) {
            result[camel2Kebab(key)] = node.attrs[key];
            return result;
          }, {});
          return vue.h(node.tag, _objectSpread$2o(_objectSpread$2o({}, kebabAttrs), props2), (node.children || []).map(function(child) {
            return renderFn(child, {});
          }));
        }
        var DEFAULT_CLASS_PREFIX = "t";
        var DEFAULT_LOCALE = "zh-CN";
        var ConfigContext = {
          classPrefix: DEFAULT_CLASS_PREFIX,
          locale: DEFAULT_LOCALE
        };
        function useCommonClassName$1() {
          var classPrefix2 = ConfigContext.classPrefix;
          return {
            SIZE: {
              "default": "",
              xs: "".concat(classPrefix2, "-size-xs"),
              small: "".concat(classPrefix2, "-size-s"),
              medium: "".concat(classPrefix2, "-size-m"),
              large: "".concat(classPrefix2, "-size-l"),
              xl: "".concat(classPrefix2, "-size-xl"),
              block: "".concat(classPrefix2, "-size-full-width")
            },
            STATUS: {
              loading: "".concat(classPrefix2, "-is-loading"),
              disabled: "".concat(classPrefix2, "-is-disabled"),
              focused: "".concat(classPrefix2, "-is-focused"),
              success: "".concat(classPrefix2, "-is-success"),
              error: "".concat(classPrefix2, "-is-error"),
              warning: "".concat(classPrefix2, "-is-warning"),
              selected: "".concat(classPrefix2, "-is-selected"),
              active: "".concat(classPrefix2, "-is-active"),
              checked: "".concat(classPrefix2, "-is-checked"),
              current: "".concat(classPrefix2, "-is-current"),
              hidden: "".concat(classPrefix2, "-is-hidden"),
              visible: "".concat(classPrefix2, "-is-visible"),
              expanded: "".concat(classPrefix2, "-is-expanded"),
              indeterminate: "".concat(classPrefix2, "-is-indeterminate")
            }
          };
        }
        function useSizeProps(size) {
          var COMMON_SIZE_CLASS_NAMES = useCommonClassName$1().SIZE;
          var className = vue.computed(function() {
            if (size.value in COMMON_SIZE_CLASS_NAMES) {
              return COMMON_SIZE_CLASS_NAMES[size.value];
            }
            return "";
          });
          var style = vue.computed(function() {
            if (size.value === void 0 || size.value in COMMON_SIZE_CLASS_NAMES) {
              return {};
            }
            return {
              fontSize: size.value
            };
          });
          return {
            style,
            className
          };
        }
        function ownKeys$2o(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$2n(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$2o(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2o(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$z = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M7.5 11V8.5H5v-1h2.5V5h1v2.5H11v1H8.5V11h-1z",
              "fillOpacity": 0.9
            }
          }, {
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M3 14a1 1 0 01-1-1V3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3zm0-1h10V3H3v10z",
              "fillOpacity": 0.9
            }
          }]
        };
        var addRectangle = vue.defineComponent({
          name: "AddRectangleIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-add-rectangle", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$2n(_objectSpread$2n({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$z, finalProps.value);
            };
          }
        });
        function ownKeys$2n(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$2m(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$2n(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2n(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$y = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M7.35 8.65v3.85h1.3V8.65h3.85v-1.3H8.65V3.5h-1.3v3.85H3.5v1.3h3.85z",
              "fillOpacity": 0.9
            }
          }]
        };
        var add = vue.defineComponent({
          name: "AddIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-add", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$2m(_objectSpread$2m({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$y, finalProps.value);
            };
          }
        });
        function ownKeys$2m(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$2l(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$2m(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2m(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$x = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M10.77 11.98l1.38 1.37.7-.7-9.7-9.7-.7.7 1.2 1.21a7.9 7.9 0 00-2.53 2.91L1 8l.12.23a7.72 7.72 0 009.65 3.75zM10 11.2A6.67 6.67 0 012.11 8c.56-1 1.34-1.83 2.26-2.43l1.08 1.09a2.88 2.88 0 003.9 3.9l.64.64zM6.21 7.42l2.37 2.37a1.88 1.88 0 01-2.37-2.37zM14.88 8.23L15 8l-.12-.23a7.73 7.73 0 00-9.35-3.86l.8.8A6.7 6.7 0 0113.9 8a6.87 6.87 0 01-2.02 2.26l.7.7a7.9 7.9 0 002.3-2.73z",
              "fillOpacity": 0.9
            }
          }, {
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M10.88 8c0 .37-.07.73-.2 1.06l-.82-.82.02-.24a1.88 1.88 0 00-2.12-1.86l-.82-.82A2.87 2.87 0 0110.88 8z",
              "fillOpacity": 0.9
            }
          }]
        };
        var browseOff = vue.defineComponent({
          name: "BrowseOffIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-browse-off", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$2l(_objectSpread$2l({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$x, finalProps.value);
            };
          }
        });
        function ownKeys$2l(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$2k(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$2l(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2l(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$w = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M10.88 8a2.88 2.88 0 11-5.76 0 2.88 2.88 0 015.76 0zm-1 0a1.88 1.88 0 10-3.76 0 1.88 1.88 0 003.76 0z",
              "fillOpacity": 0.9
            }
          }, {
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M1.12 8.23A7.72 7.72 0 008 12.5c2.9 0 5.54-1.63 6.88-4.27L15 8l-.12-.23A7.73 7.73 0 008 3.5a7.74 7.74 0 00-6.88 4.27L1 8l.12.23zM8 11.5A6.73 6.73 0 012.11 8 6.73 6.73 0 0113.9 8 6.74 6.74 0 018 11.5z",
              "fillOpacity": 0.9
            }
          }]
        };
        var browse = vue.defineComponent({
          name: "BrowseIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-browse", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$2k(_objectSpread$2k({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$w, finalProps.value);
            };
          }
        });
        function ownKeys$2k(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$2j(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$2k(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2k(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$v = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M10 3H6V1.5H5V3H3a1 1 0 00-1 1v9a1 1 0 001 1h10a1 1 0 001-1V4a1 1 0 00-1-1h-2V1.5h-1V3zM5 5h1V4h4v1h1V4h2v2H3V4h2v1zM3 7h10v6H3V7z",
              "fillOpacity": 0.9
            }
          }]
        };
        var calendar = vue.defineComponent({
          name: "CalendarIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-calendar", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$2j(_objectSpread$2j({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$v, finalProps.value);
            };
          }
        });
        function ownKeys$2j(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$2i(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$2j(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2j(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$u = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M6 5v6l4.5-3L6 5z",
              "fillOpacity": 0.9
            }
          }]
        };
        var caretRightSmall = vue.defineComponent({
          name: "CaretRightSmallIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-caret-right-small", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$2i(_objectSpread$2i({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$u, finalProps.value);
            };
          }
        });
        function ownKeys$2i(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$2h(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$2i(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2i(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$t = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM4.5 8.2l.7-.7L7 9.3l3.8-3.8.7.7L7 10.7 4.5 8.2z",
              "fillOpacity": 0.9
            }
          }]
        };
        var checkCircleFilled = vue.defineComponent({
          name: "CheckCircleFilledIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-check-circle-filled", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$2h(_objectSpread$2h({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$t, finalProps.value);
            };
          }
        });
        function ownKeys$2h(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$2g(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$2h(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2h(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$s = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M6.43 9.92l6.23-6.22.92.92-7.15 7.14L1.97 7.3l.92-.92 3.54 3.54z",
              "fillOpacity": 0.9
            }
          }]
        };
        var check = vue.defineComponent({
          name: "CheckIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-check", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$2g(_objectSpread$2g({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$s, finalProps.value);
            };
          }
        });
        function ownKeys$2g(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$2f(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$2g(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2g(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$r = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M3.54 6.46l.92-.92L8 9.08l3.54-3.54.92.92L8 10.92 3.54 6.46z",
              "fillOpacity": 0.9
            }
          }]
        };
        var chevronDown = vue.defineComponent({
          name: "ChevronDownIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-chevron-down", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$2f(_objectSpread$2f({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$r, finalProps.value);
            };
          }
        });
        function ownKeys$2f(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$2e(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$2f(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2f(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$q = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M13.04 4.46l-.92-.92L7.66 8l4.46 4.46.92-.92L9.5 8l3.54-3.54z",
              "fillOpacity": 0.9
            }
          }, {
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M8.04 4.46l-.92-.92L2.66 8l4.46 4.46.92-.92L4.5 8l3.54-3.54z",
              "fillOpacity": 0.9
            }
          }]
        };
        var chevronLeftDouble = vue.defineComponent({
          name: "ChevronLeftDoubleIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-chevron-left-double", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$2e(_objectSpread$2e({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$q, finalProps.value);
            };
          }
        });
        function ownKeys$2e(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$2d(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$2e(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2e(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$p = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M9.54 3.54l.92.92L6.92 8l3.54 3.54-.92.92L5.08 8l4.46-4.46z",
              "fillOpacity": 0.9
            }
          }]
        };
        var chevronLeft = vue.defineComponent({
          name: "ChevronLeftIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-chevron-left", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$2d(_objectSpread$2d({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$p, finalProps.value);
            };
          }
        });
        function ownKeys$2d(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$2c(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$2d(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2d(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$o = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M6.2 5.2L9 8l-2.8 2.8.71.7 3.5-3.5-3.5-3.5-.7.7z",
              "fillOpacity": 0.9
            }
          }, {
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M8 15A7 7 0 118 1a7 7 0 010 14zm0-1A6 6 0 108 2a6 6 0 000 12z",
              "fillOpacity": 0.9
            }
          }]
        };
        var chevronRightCircle = vue.defineComponent({
          name: "ChevronRightCircleIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-chevron-right-circle", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$2c(_objectSpread$2c({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$o, finalProps.value);
            };
          }
        });
        function ownKeys$2c(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$2b(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$2c(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2c(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$n = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M2.96 11.54l.92.92L8.34 8 3.88 3.54l-.92.92L6.5 8l-3.54 3.54zm5 0l.92.92L13.34 8 8.88 3.54l-.92.92L11.5 8l-3.54 3.54z",
              "fillOpacity": 0.9
            }
          }]
        };
        var chevronRightDouble = vue.defineComponent({
          name: "ChevronRightDoubleIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-chevron-right-double", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$2b(_objectSpread$2b({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$n, finalProps.value);
            };
          }
        });
        function ownKeys$2b(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$2a(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$2b(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2b(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$m = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M6.46 12.46l-.92-.92L9.08 8 5.54 4.46l.92-.92L10.92 8l-4.46 4.46z",
              "fillOpacity": 0.9
            }
          }]
        };
        var chevronRight = vue.defineComponent({
          name: "ChevronRightIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-chevron-right", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$2a(_objectSpread$2a({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$m, finalProps.value);
            };
          }
        });
        function ownKeys$2a(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$29(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$2a(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2a(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$l = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M12.46 9.54l-.92.92L8 6.92l-3.54 3.54-.92-.92L8 5.08l4.46 4.46z",
              "fillOpacity": 0.9
            }
          }]
        };
        var chevronUp = vue.defineComponent({
          name: "ChevronUpIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-chevron-up", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$29(_objectSpread$29({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$l, finalProps.value);
            };
          }
        });
        function ownKeys$29(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$28(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$29(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$29(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$k = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM5.67 4.95L8 7.29l2.33-2.34.7.7L8.7 8l2.34 2.35-.71.7L8 8.71l-2.33 2.34-.7-.7L7.3 8 4.96 5.65l.71-.7z",
              "fillOpacity": 0.9
            }
          }]
        };
        var closeCircleFilled = vue.defineComponent({
          name: "CloseCircleFilledIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-close-circle-filled", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$28(_objectSpread$28({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$k, finalProps.value);
            };
          }
        });
        function ownKeys$28(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$27(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$28(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$28(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$j = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M8 8.92L11.08 12l.92-.92L8.92 8 12 4.92 11.08 4 8 7.08 4.92 4 4 4.92 7.08 8 4 11.08l.92.92L8 8.92z",
              "fillOpacity": 0.9
            }
          }]
        };
        var close = vue.defineComponent({
          name: "CloseIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-close", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$27(_objectSpread$27({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$j, finalProps.value);
            };
          }
        });
        function ownKeys$27(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$26(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$27(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$27(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$i = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M6 12V6h1v6H6zM9 6v6h1V6H9z",
              "fillOpacity": 0.9
            }
          }, {
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M10.5 3H14v1h-1v10a1 1 0 01-1 1H4a1 1 0 01-1-1V4H2V3h3.5V1.8c0-.44.36-.8.8-.8h3.4c.44 0 .8.36.8.8V3zm-4 0h3V2h-3v1zM4 4v10h8V4H4z",
              "fillOpacity": 0.9
            }
          }]
        };
        var _delete = vue.defineComponent({
          name: "DeleteIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-delete", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$26(_objectSpread$26({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$i, finalProps.value);
            };
          }
        });
        function ownKeys$26(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$25(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$26(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$26(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$h = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "g",
            "attrs": {
              "fill": "currentColor",
              "opacity": 0.9,
              "fillOpacity": 0.9
            },
            "children": [{
              "tag": "path",
              "attrs": {
                "d": "M14.13 4.95L10.9 1.71l.7-.71 3.25 3.24-.7.71zM5.97 13.11l-3.61.72a.3.3 0 01-.35-.35l.72-3.61 7.3-7.3 3.24 3.24-7.3 7.3zm5.89-7.3l-1.83-1.83-6.38 6.38-.46 2.29 2.29-.46 6.38-6.38zM15 11h-4v1h4v-1zM15 13H8.5v1H15v-1z"
              }
            }]
          }]
        };
        var edit1 = vue.defineComponent({
          name: "Edit1Icon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-edit-1", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$25(_objectSpread$25({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$h, finalProps.value);
            };
          }
        });
        function ownKeys$25(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$24(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$25(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$25(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$g = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M3 9a1 1 0 110-2 1 1 0 010 2zM7 8a1 1 0 102 0 1 1 0 00-2 0zM12 8a1 1 0 102 0 1 1 0 00-2 0z",
              "fillOpacity": 0.9
            }
          }]
        };
        var ellipsis = vue.defineComponent({
          name: "EllipsisIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-ellipsis", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$24(_objectSpread$24({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$g, finalProps.value);
            };
          }
        });
        function ownKeys$24(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$23(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$24(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$24(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$f = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM8.5 4v5.5h-1V4h1zm-1.1 7h1.2v1.2H7.4V11z",
              "fillOpacity": 0.9
            }
          }]
        };
        var errorCircleFilled = vue.defineComponent({
          name: "ErrorCircleFilledIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-error-circle-filled", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$23(_objectSpread$23({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$f, finalProps.value);
            };
          }
        });
        function ownKeys$23(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$22(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$23(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$23(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$e = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M8.5 2h-1v9h1V2zm.1 10.8H7.4V14h1.2v-1.2z",
              "fillOpacity": 0.9
            }
          }]
        };
        var error = vue.defineComponent({
          name: "ErrorIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-error", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$22(_objectSpread$22({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$e, finalProps.value);
            };
          }
        });
        function ownKeys$22(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$21(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$22(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$22(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$d = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M4 1.92C4 1.34 4.52 1 5 1h4.37a1 1 0 01.71.3L13.71 5a1 1 0 01.29.7v6.38c0 .58-.52.92-1 .92H5c-.48 0-1-.34-1-.92V1.92zM5 2v10h8V6.01H9V2H5zm5 .65V5h2.32L10 2.65z",
              "fillOpacity": 0.9
            }
          }, {
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M2 5v9.01a1 1 0 001 1h8v-1H3V5H2z",
              "fillOpacity": 0.9
            }
          }]
        };
        var fileCopy = vue.defineComponent({
          name: "FileCopyIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-file-copy", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$21(_objectSpread$21({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$d, finalProps.value);
            };
          }
        });
        function ownKeys$21(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$20(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$21(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$21(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$c = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M2 3a1 1 0 011-1h10a1 1 0 011 1v1.79l-4.25 2.5V14h-3.5V7.29L2 4.79V3zm11 0H3v1.21l4.25 2.5V13h1.5V6.71L13 4.21V3z",
              "fillOpacity": 0.9
            }
          }]
        };
        var filter = vue.defineComponent({
          name: "FilterIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-filter", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$20(_objectSpread$20({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$c, finalProps.value);
            };
          }
        });
        function ownKeys$20(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1$(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$20(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$20(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$b = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM5.8 6.63a2.2 2.2 0 014.39 0c0 .97-.75 1.72-1.49 2.02a.34.34 0 00-.2.32v.8h-1v-.8c0-.56.33-1.04.82-1.24.5-.2.87-.66.87-1.1a1.2 1.2 0 00-2.39 0h-1zm1.67 4.54a.53.53 0 111.05 0 .53.53 0 01-1.05 0z",
              "fillOpacity": 0.9
            }
          }]
        };
        var helpCircleFilled = vue.defineComponent({
          name: "HelpCircleFilledIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-help-circle-filled", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$1$(_objectSpread$1$({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$b, finalProps.value);
            };
          }
        });
        function ownKeys$1$(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1_(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1$(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1$(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$a = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM7.4 4h1.2v1.2H7.4V4zm.1 2.5h1V12h-1V6.5z",
              "fillOpacity": 0.9
            }
          }]
        };
        var infoCircleFilled = vue.defineComponent({
          name: "InfoCircleFilledIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-info-circle-filled", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$1_(_objectSpread$1_({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$a, finalProps.value);
            };
          }
        });
        function ownKeys$1_(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1Z(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1_(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1_(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$9 = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M5 8.5h6v-1H5v1z",
              "fillOpacity": 0.9
            }
          }, {
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M3 14a1 1 0 01-1-1V3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3zm0-1h10V3H3v10z",
              "fillOpacity": 0.9
            }
          }]
        };
        var minusRectangle = vue.defineComponent({
          name: "MinusRectangleIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-minus-rectangle", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$1Z(_objectSpread$1Z({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$9, finalProps.value);
            };
          }
        });
        function ownKeys$1Z(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1Y(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1Z(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Z(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$8 = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M12.4 4.46l-.91-.92L7.03 8l4.46 4.46.92-.92L8.86 8l3.55-3.54zM4.8 4v8h1.3V4H4.8z",
              "fillOpacity": 0.9
            }
          }]
        };
        var pageFirst = vue.defineComponent({
          name: "PageFirstIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-page-first", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$1Y(_objectSpread$1Y({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$8, finalProps.value);
            };
          }
        });
        function ownKeys$1Y(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1X(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1Y(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Y(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$7 = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M3.6 11.54l.91.92L8.97 8 4.51 3.54l-.92.92L7.14 8l-3.55 3.54zm7.6.46V4H9.9v8h1.3z",
              "fillOpacity": 0.9
            }
          }]
        };
        var pageLast = vue.defineComponent({
          name: "PageLastIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-page-last", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$1X(_objectSpread$1X({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$7, finalProps.value);
            };
          }
        });
        function ownKeys$1X(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1W(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1X(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1X(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$6 = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M3.5 7.35h9v1.3h-9v-1.3z",
              "fillOpacity": 0.9
            }
          }]
        };
        var remove = vue.defineComponent({
          name: "RemoveIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-remove", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$1W(_objectSpread$1W({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$6, finalProps.value);
            };
          }
        });
        function ownKeys$1W(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1V(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1W(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1W(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$5 = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M8 11.5a3.5 3.5 0 110-7 3.5 3.5 0 010 7zM8 13A5 5 0 108 3a5 5 0 000 10z",
              "fillOpacity": 0.9
            }
          }]
        };
        var round$1 = vue.defineComponent({
          name: "RoundIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-round", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$1V(_objectSpread$1V({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$5, finalProps.value);
            };
          }
        });
        function ownKeys$1V(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1U(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1V(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1V(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$4 = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M9.51 10.22a4.76 4.76 0 11.7-.7l3.54 3.52-.7.71-3.54-3.53zm.77-3.7a3.76 3.76 0 10-7.53 0 3.76 3.76 0 007.53 0z",
              "fillOpacity": 0.9
            }
          }]
        };
        var search = vue.defineComponent({
          name: "SearchIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-search", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$1U(_objectSpread$1U({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$4, finalProps.value);
            };
          }
        });
        function ownKeys$1U(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1T(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1U(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1U(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$3 = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M11 8a3 3 0 11-6 0 3 3 0 016 0zm-1 0a2 2 0 10-4 0 2 2 0 004 0z",
              "fillOpacity": 0.9
            }
          }, {
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M8 1.25l6.06 3.38v6.75L8 14.75l-6.06-3.38V4.63L8 1.25zM2.94 5.21v5.58L8 13.6l5.06-2.82V5.2L8 2.4 2.94 5.21z",
              "fillOpacity": 0.9
            }
          }]
        };
        var setting = vue.defineComponent({
          name: "SettingIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-setting", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$1T(_objectSpread$1T({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$3, finalProps.value);
            };
          }
        });
        function ownKeys$1T(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1S(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1T(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1T(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$2 = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM7.5 5h1v2.97l2.85 2.86-.7.7L7.5 8.4V5z",
              "fillOpacity": 0.9
            }
          }]
        };
        var timeFilled = vue.defineComponent({
          name: "TimeFilledIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-time-filled", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$1S(_objectSpread$1S({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$2, finalProps.value);
            };
          }
        });
        function ownKeys$1S(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1R(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1S(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1S(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element$1 = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M7.5 4v4.39L10 11l.7-.7-2.2-2.33V4h-1z",
              "fillOpacity": 0.9
            }
          }, {
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M15 8A7 7 0 111 8a7 7 0 0114 0zm-1 0A6 6 0 102 8a6 6 0 0012 0z",
              "fillOpacity": 0.9
            }
          }]
        };
        var time = vue.defineComponent({
          name: "TimeIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-time", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$1R(_objectSpread$1R({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element$1, finalProps.value);
            };
          }
        });
        function ownKeys$1R(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1Q(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1R(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1R(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var element = {
          "tag": "svg",
          "attrs": {
            "fill": "none",
            "viewBox": "0 0 16 16",
            "width": "1em",
            "height": "1em"
          },
          "children": [{
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M3.74 6.68L7.5 2.9v8.59h1V2.91l3.76 3.77.71-.7-4.62-4.63a.5.5 0 00-.7 0L3.03 5.97l.7.7z",
              "fillOpacity": 0.9
            }
          }, {
            "tag": "path",
            "attrs": {
              "fill": "currentColor",
              "d": "M2 11v2a1 1 0 001 1h10a1 1 0 001-1v-2h-1v2H3v-2H2z",
              "fillOpacity": 0.9
            }
          }]
        };
        var upload = vue.defineComponent({
          name: "UploadIcon",
          props: {
            size: {
              type: String
            },
            onClick: {
              type: Function
            }
          },
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var _useSizeProps = useSizeProps(propsSize), className = _useSizeProps.className, style = _useSizeProps.style;
            var finalCls = vue.computed(function() {
              return ["t-icon", "t-icon-upload", className.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$1Q(_objectSpread$1Q({}, style.value), attrs.style);
            });
            var finalProps = vue.computed(function() {
              return {
                "class": finalCls.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props$onClick;
                  return (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return renderFn(element, finalProps.value);
            };
          }
        });
        var isServer = typeof window === "undefined";
        function checkScriptAndLoad(url, className) {
          if (isServer) {
            return;
          }
          if (!document || !url || typeof url !== "string")
            return;
          if (document.querySelectorAll(".".concat(className, '[src="').concat(url, '"]')).length > 0) {
            return;
          }
          var svg = document.createElement("script");
          svg.setAttribute("class", className);
          svg.setAttribute("src", url);
          document.body.appendChild(svg);
        }
        var props$16 = {
          name: {
            type: String,
            "default": ""
          },
          size: {
            type: String,
            "default": void 0
          },
          url: {
            type: [String, Array],
            "default": void 0
          },
          loadDefaultIcons: {
            type: Boolean,
            "default": true
          },
          onClick: Function
        };
        function ownKeys$1Q(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1P(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1Q(Object(source), true).forEach(function(key) {
              _defineProperty$1(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Q(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var classPrefix = ConfigContext.classPrefix;
        var CDN_ICONFONT_URL = "https://tdesign.gtimg.com/icon/0.1.0/fonts/index.js";
        var _Icon = vue.defineComponent({
          name: "Icon",
          props: props$16,
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var propsSize = vue.computed(function() {
              return props2.size;
            });
            var name = vue.computed(function() {
              return props2.name || "";
            });
            var _useSizeProps = useSizeProps(propsSize), sizeClassName = _useSizeProps.className, sizeStyle = _useSizeProps.style;
            var finalUrl = vue.computed(function() {
              var url = [];
              url = props2.url instanceof Array ? props2.url.concat() : [props2.url];
              if (props2.loadDefaultIcons)
                url.push(CDN_ICONFONT_URL);
              return url;
            });
            var classNames = vue.computed(function() {
              return ["".concat(classPrefix, "-icon"), "".concat(classPrefix, "-icon-").concat(name.value), sizeClassName.value];
            });
            var finalStyle = vue.computed(function() {
              return _objectSpread$1P(_objectSpread$1P({}, sizeStyle.value), attrs.style);
            });
            vue.onMounted(function() {
              Array.from(new Set(finalUrl.value)).forEach(function(url) {
                checkScriptAndLoad(url, "".concat(classPrefix, "-svg-js-stylesheet--unique-class"));
              });
            });
            var finalProps = vue.computed(function() {
              return {
                "class": classNames.value,
                style: finalStyle.value,
                onClick: function onClick(e) {
                  var _props2$onClick;
                  return (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
                    e
                  });
                }
              };
            });
            return function() {
              return vue.h("svg", finalProps.value, vue.h("use", {
                href: props2.url ? "#".concat(name.value) : "#t-icon-".concat(name.value)
              }));
            };
          }
        });
        var Icon$1 = _Icon;
        var Icon = withInstall(Icon$1, "TIcon");
        var props$15 = {
          align: {
            type: String,
            "default": "top",
            validator: function validator(val) {
              return ["top", "middle", "bottom"].includes(val);
            }
          },
          gutter: {
            type: [Number, Object, Array],
            "default": 0
          },
          justify: {
            type: String,
            "default": "start",
            validator: function validator(val) {
              return ["start", "end", "center", "space-around", "space-between"].includes(val);
            }
          },
          tag: {
            type: String,
            "default": "div"
          }
        };
        var calcSize = function calcSize2(width) {
          var size = "xs";
          if (width < 768) {
            size = "xs";
          } else if (width >= 768 && width < 992) {
            size = "sm";
          } else if (width >= 992 && width < 1200) {
            size = "md";
          } else if (width >= 1200 && width < 1400) {
            size = "lg";
          } else if (width >= 1400 && width < 1880) {
            size = "xl";
          } else {
            size = "xxl";
          }
          return size;
        };
        function useListener(type, listener) {
          vue.onMounted(function() {
            window.addEventListener(type, listener);
          });
          vue.onBeforeUnmount(function() {
            window.removeEventListener(type, listener);
          });
        }
        function useResize(listener, observer) {
          useListener("resize", listener);
          if (!window.ResizeObserver || !observer)
            return;
          var resizeObserver = new window.ResizeObserver(listener);
          resizeObserver.observe(observer);
          vue.onBeforeUnmount(function() {
            resizeObserver.disconnect();
          });
        }
        function ownKeys$1P(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1O(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1P(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1P(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function useRowSize() {
          var size = vue.ref(calcSize(isServer$1 ? 0 : window.innerWidth));
          var updateSize = function updateSize2() {
            size.value = calcSize(isServer$1 ? 0 : window.innerWidth);
          };
          useListener("resize", updateSize);
          return size;
        }
        function getRowClasses(name, props2) {
          var _ref;
          var justify = props2.justify, align = props2.align;
          return [name, (_ref = {}, _defineProperty$3(_ref, "".concat(name, "--").concat(justify), justify), _defineProperty$3(_ref, "".concat(name, "--").concat(align), align), _ref)];
        }
        function calcRowStyle(gutter, currentSize) {
          var rowStyle = {};
          var getMarginStyle = function getMarginStyle2(gutter2) {
            return Object.assign(rowStyle, {
              marginLeft: "".concat(gutter2 / -2, "px"),
              marginRight: "".concat(gutter2 / -2, "px")
            });
          };
          var getRowGapStyle = function getRowGapStyle2(gutter2) {
            return Object.assign(rowStyle, {
              rowGap: "".concat(gutter2, "px")
            });
          };
          var strategyMap = {
            isNumber: function isNumber2(gutter2) {
              if (typeof gutter2 === "number") {
                getMarginStyle(gutter2);
              }
            },
            isArray: function isArray2(gutter2) {
              if (Array.isArray(gutter2) && gutter2.length) {
                strategyMap.isNumber(gutter2[0]);
                if (typeof gutter2[1] === "number") {
                  getRowGapStyle(gutter2[1]);
                }
                if (isObject_1(gutter2[0]) && gutter2[0][currentSize] !== void 0) {
                  getMarginStyle(gutter2[0][currentSize]);
                }
                if (isObject_1(gutter2[1]) && gutter2[1][currentSize] !== void 0) {
                  getRowGapStyle(gutter2[1][currentSize]);
                }
              }
            },
            isObject: function isObject2(gutter2) {
              if (isObject_1(gutter2) && gutter2[currentSize]) {
                if (Array.isArray(gutter2) && gutter2.length) {
                  getMarginStyle(gutter2[currentSize][0]);
                  getRowGapStyle(gutter2[currentSize][1]);
                } else {
                  getMarginStyle(gutter2[currentSize]);
                }
              }
            }
          };
          Object.keys(strategyMap).forEach(function(item) {
            strategyMap[item](gutter);
          });
          return rowStyle;
        }
        function parseFlex(flex) {
          if (typeof flex === "number") {
            return "".concat(flex, " ").concat(flex, " 0");
          }
          if (/^\d+(\.\d+)?(px|r?em|%)$/.test(flex)) {
            return "0 0 ".concat(flex);
          }
          return flex;
        }
        function calcColPadding(gutter, currentSize) {
          var paddingObj = {};
          var getPaddingStyle = function getPaddingStyle2(gutter2) {
            return Object.assign(paddingObj, {
              paddingLeft: "".concat(gutter2 / 2, "px"),
              paddingRight: "".concat(gutter2 / 2, "px")
            });
          };
          var strategyMap = {
            isNumber: function isNumber2(gutter2) {
              if (typeof gutter2 === "number") {
                getPaddingStyle(gutter2);
              }
            },
            isArray: function isArray2(gutter2) {
              if (Array.isArray(gutter2) && gutter2.length) {
                if (typeof gutter2[0] === "number") {
                  getPaddingStyle(gutter2[0]);
                }
                if (isObject_1(gutter2[0]) && gutter2[0][currentSize]) {
                  getPaddingStyle(gutter2[0][currentSize]);
                }
              }
            },
            isObject: function isObject2(gutter2) {
              if (isObject_1(gutter2) && gutter2[currentSize]) {
                getPaddingStyle(gutter2[currentSize]);
              }
            }
          };
          Object.keys(strategyMap).forEach(function(item) {
            strategyMap[item](gutter);
          });
          return paddingObj;
        }
        function getColClasses(name, props2) {
          var _objectSpread3;
          var span = props2.span, order2 = props2.order, offset2 = props2.offset, push = props2.push, pull = props2.pull;
          var allSizes = ["xs", "sm", "md", "lg", "xl", "xxl"];
          var ColSizeClasses = allSizes.reduce(function(acc, currSize) {
            var _objectSpread22;
            var sizeProp = props2[currSize];
            var sizeObject = {};
            if (typeof sizeProp === "number") {
              sizeObject.span = sizeProp;
            } else if (isObject_1(sizeProp)) {
              sizeObject = sizeProp || {};
            }
            return _objectSpread$1O(_objectSpread$1O({}, acc), {}, (_objectSpread22 = {}, _defineProperty$3(_objectSpread22, "".concat(name, "-").concat(currSize, "-").concat(sizeObject.span), sizeObject.span !== void 0), _defineProperty$3(_objectSpread22, "".concat(name, "-").concat(currSize, "-order-").concat(sizeObject.order), parseInt(sizeObject.order, 10) >= 0), _defineProperty$3(_objectSpread22, "".concat(name, "-").concat(currSize, "-offset-").concat(sizeObject.offset), parseInt(sizeObject.offset, 10) >= 0), _defineProperty$3(_objectSpread22, "".concat(name, "-").concat(currSize, "-push-").concat(sizeObject.push), parseInt(sizeObject.push, 10) >= 0), _defineProperty$3(_objectSpread22, "".concat(name, "-").concat(currSize, "-pull-").concat(sizeObject.pull), parseInt(sizeObject.pull, 10) >= 0), _objectSpread22));
          }, {});
          return _objectSpread$1O((_objectSpread3 = {}, _defineProperty$3(_objectSpread3, "".concat(name), true), _defineProperty$3(_objectSpread3, "".concat(name, "-").concat(span), span !== void 0), _defineProperty$3(_objectSpread3, "".concat(name, "-order-").concat(order2), order2), _defineProperty$3(_objectSpread3, "".concat(name, "-offset-").concat(offset2), offset2), _defineProperty$3(_objectSpread3, "".concat(name, "-push-").concat(push), push), _defineProperty$3(_objectSpread3, "".concat(name, "-pull-").concat(pull), pull), _objectSpread3), ColSizeClasses);
        }
        function ownKeys$1O(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1N(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1O(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1O(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot$u(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var _Row = vue.defineComponent({
          name: "TRow",
          props: _objectSpread$1N({}, props$15),
          setup: function setup(props2) {
            var _toRefs = vue.toRefs(props2), gutter = _toRefs.gutter;
            var renderTNodeJSX2 = useTNodeJSX();
            vue.provide("rowContext", vue.reactive({
              gutter
            }));
            var size = useRowSize();
            var COMPONENT_NAME2 = usePrefixClass("row");
            var rowClasses = vue.computed(function() {
              return getRowClasses(COMPONENT_NAME2.value, props2);
            });
            var rowStyle = vue.computed(function() {
              return calcRowStyle(props2.gutter, size.value);
            });
            return function() {
              var _slot;
              var TAG = props2.tag;
              return vue.createVNode(TAG, {
                "class": rowClasses.value,
                "style": rowStyle.value
              }, _isSlot$u(_slot = renderTNodeJSX2("default")) ? _slot : {
                "default": function _default() {
                  return [_slot];
                }
              });
            };
          }
        });
        var props$14 = {
          flex: {
            type: [String, Number]
          },
          lg: {
            type: [Number, Object]
          },
          md: {
            type: [Number, Object]
          },
          offset: {
            type: Number,
            "default": 0
          },
          order: {
            type: Number,
            "default": 0
          },
          pull: {
            type: Number,
            "default": 0
          },
          push: {
            type: Number,
            "default": 0
          },
          sm: {
            type: [Number, Object]
          },
          span: {
            type: Number,
            "default": 12
          },
          tag: {
            type: String,
            "default": "div"
          },
          xl: {
            type: [Number, Object]
          },
          xs: {
            type: [Number, Object]
          },
          xxl: {
            type: [Number, Object]
          }
        };
        function ownKeys$1N(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1M(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1N(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1N(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot$t(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var _Col = vue.defineComponent({
          name: "TCol",
          inject: ["rowContext"],
          props: _objectSpread$1M({}, props$14),
          setup: function setup(props2) {
            var COMPONENT_NAME2 = usePrefixClass("col");
            var renderTNodeJSX2 = useTNodeJSX();
            var rowContext = vue.inject("rowContext", /* @__PURE__ */ Object.create(null));
            var size = useRowSize();
            var colClasses = vue.computed(function() {
              return getColClasses(COMPONENT_NAME2.value, props2);
            });
            var colStyle = vue.computed(function() {
              var colStyle2 = {};
              var flex = props2.flex;
              flex && (colStyle2.flex = parseFlex(flex));
              if (rowContext) {
                var rowGutter = rowContext.gutter;
                Object.assign(colStyle2, calcColPadding(rowGutter, size.value));
              }
              return colStyle2;
            });
            return function() {
              var _slot;
              var TAG = props2.tag;
              return vue.createVNode(TAG, {
                "class": colClasses.value,
                "style": colStyle.value
              }, _isSlot$t(_slot = renderTNodeJSX2("default")) ? _slot : {
                "default": function _default() {
                  return [_slot];
                }
              });
            };
          }
        });
        var Row = withInstall(_Row);
        var Col = withInstall(_Col);
        var _Layout = vue.defineComponent({
          name: "TLayout",
          setup: function setup() {
            var hasSide = vue.ref(false);
            var renderTNodeJSX2 = useTNodeJSX();
            var COMPONENT_NAME2 = usePrefixClass("layout");
            var classes = vue.computed(function() {
              return [COMPONENT_NAME2.value, _defineProperty$3({}, "".concat(COMPONENT_NAME2.value, "--with-sider"), hasSide.value)];
            });
            vue.provide("layout", {
              hasSide
            });
            return function() {
              return vue.createVNode("section", {
                "class": classes.value
              }, [renderTNodeJSX2("default")]);
            };
          }
        });
        var props$13 = {
          height: {
            type: String,
            "default": ""
          }
        };
        var _Header = vue.defineComponent({
          name: "THeader",
          props: props$13,
          setup: function setup(props2) {
            var COMPONENT_NAME2 = usePrefixClass("layout__header");
            var renderTNodeJSX2 = useTNodeJSX();
            return function() {
              return vue.createVNode("header", {
                "class": COMPONENT_NAME2.value,
                "style": props2.height ? {
                  height: props2.height
                } : {}
              }, [renderTNodeJSX2("default")]);
            };
          }
        });
        var props$12 = {
          height: {
            type: String,
            "default": ""
          }
        };
        var _Footer = vue.defineComponent({
          name: "TFooter",
          props: props$12,
          setup: function setup(props2) {
            var COMPONENT_NAME2 = usePrefixClass("layout__footer");
            var renderTNodeJSX2 = useTNodeJSX();
            return function() {
              return vue.createVNode("footer", {
                "class": COMPONENT_NAME2.value,
                "style": props2.height ? {
                  height: props2.height
                } : {}
              }, [renderTNodeJSX2("default")]);
            };
          }
        });
        var props$11 = {
          width: {
            type: String,
            "default": ""
          }
        };
        var _Aside = vue.defineComponent({
          name: "TAside",
          props: props$11,
          setup: function setup(props2) {
            var _inject = vue.inject("layout", /* @__PURE__ */ Object.create(null)), hasSide = _inject.hasSide;
            var COMPONENT_NAME2 = usePrefixClass("layout__sider");
            var renderTNodeJSX2 = useTNodeJSX();
            if (!hasSide)
              return;
            vue.onMounted(function() {
              hasSide.value = true;
            });
            vue.onUnmounted(function() {
              hasSide.value = false;
            });
            return function() {
              var styles = props2.width ? {
                width: props2.width
              } : {};
              return vue.createVNode("aside", {
                "class": COMPONENT_NAME2.value,
                "style": styles
              }, [renderTNodeJSX2("default")]);
            };
          }
        });
        var _Content = vue.defineComponent({
          name: "TContent",
          setup: function setup() {
            var COMPONENT_NAME2 = usePrefixClass("layout__content");
            var renderTNodeJSX2 = useTNodeJSX();
            return function() {
              return vue.createVNode("main", {
                "class": COMPONENT_NAME2.value
              }, [renderTNodeJSX2("default")]);
            };
          }
        });
        var Aside = withInstall(_Aside);
        var Layout = withInstall(_Layout);
        var Header = withInstall(_Header);
        var Footer = withInstall(_Footer);
        var Content$1 = withInstall(_Content);
        function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
          try {
            var info = gen[key](arg);
            var value = info.value;
          } catch (error2) {
            reject(error2);
            return;
          }
          if (info.done) {
            resolve(value);
          } else {
            Promise.resolve(value).then(_next, _throw);
          }
        }
        function _asyncToGenerator(fn) {
          return function() {
            var self2 = this, args = arguments;
            return new Promise(function(resolve, reject) {
              var gen = fn.apply(self2, args);
              function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
              }
              function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
              }
              _next(void 0);
            });
          };
        }
        var regeneratorRuntime$1 = { exports: {} };
        var _typeof$1 = { exports: {} };
        (function(module2) {
          function _typeof2(obj) {
            "@babel/helpers - typeof";
            return module2.exports = _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
              return typeof obj2;
            } : function(obj2) {
              return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
            }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports, _typeof2(obj);
          }
          module2.exports = _typeof2, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
        })(_typeof$1);
        (function(module2) {
          var _typeof2 = _typeof$1.exports["default"];
          function _regeneratorRuntime() {
            module2.exports = _regeneratorRuntime = function _regeneratorRuntime2() {
              return exports3;
            }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
            var exports3 = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
            function define(obj, key, value) {
              return Object.defineProperty(obj, key, {
                value,
                enumerable: true,
                configurable: true,
                writable: true
              }), obj[key];
            }
            try {
              define({}, "");
            } catch (err) {
              define = function define2(obj, key, value) {
                return obj[key] = value;
              };
            }
            function wrap(innerFn, outerFn, self2, tryLocsList) {
              var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []);
              return generator._invoke = function(innerFn2, self3, context2) {
                var state = "suspendedStart";
                return function(method, arg) {
                  if ("executing" === state)
                    throw new Error("Generator is already running");
                  if ("completed" === state) {
                    if ("throw" === method)
                      throw arg;
                    return doneResult();
                  }
                  for (context2.method = method, context2.arg = arg; ; ) {
                    var delegate = context2.delegate;
                    if (delegate) {
                      var delegateResult = maybeInvokeDelegate(delegate, context2);
                      if (delegateResult) {
                        if (delegateResult === ContinueSentinel)
                          continue;
                        return delegateResult;
                      }
                    }
                    if ("next" === context2.method)
                      context2.sent = context2._sent = context2.arg;
                    else if ("throw" === context2.method) {
                      if ("suspendedStart" === state)
                        throw state = "completed", context2.arg;
                      context2.dispatchException(context2.arg);
                    } else
                      "return" === context2.method && context2.abrupt("return", context2.arg);
                    state = "executing";
                    var record = tryCatch(innerFn2, self3, context2);
                    if ("normal" === record.type) {
                      if (state = context2.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel)
                        continue;
                      return {
                        value: record.arg,
                        done: context2.done
                      };
                    }
                    "throw" === record.type && (state = "completed", context2.method = "throw", context2.arg = record.arg);
                  }
                };
              }(innerFn, self2, context), generator;
            }
            function tryCatch(fn, obj, arg) {
              try {
                return {
                  type: "normal",
                  arg: fn.call(obj, arg)
                };
              } catch (err) {
                return {
                  type: "throw",
                  arg: err
                };
              }
            }
            exports3.wrap = wrap;
            var ContinueSentinel = {};
            function Generator() {
            }
            function GeneratorFunction() {
            }
            function GeneratorFunctionPrototype() {
            }
            var IteratorPrototype = {};
            define(IteratorPrototype, iteratorSymbol, function() {
              return this;
            });
            var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([])));
            NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
            var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
            function defineIteratorMethods(prototype) {
              ["next", "throw", "return"].forEach(function(method) {
                define(prototype, method, function(arg) {
                  return this._invoke(method, arg);
                });
              });
            }
            function AsyncIterator(generator, PromiseImpl) {
              function invoke(method, arg, resolve, reject) {
                var record = tryCatch(generator[method], generator, arg);
                if ("throw" !== record.type) {
                  var result = record.arg, value = result.value;
                  return value && "object" == _typeof2(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function(value2) {
                    invoke("next", value2, resolve, reject);
                  }, function(err) {
                    invoke("throw", err, resolve, reject);
                  }) : PromiseImpl.resolve(value).then(function(unwrapped) {
                    result.value = unwrapped, resolve(result);
                  }, function(error2) {
                    return invoke("throw", error2, resolve, reject);
                  });
                }
                reject(record.arg);
              }
              var previousPromise;
              this._invoke = function(method, arg) {
                function callInvokeWithMethodAndArg() {
                  return new PromiseImpl(function(resolve, reject) {
                    invoke(method, arg, resolve, reject);
                  });
                }
                return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
              };
            }
            function maybeInvokeDelegate(delegate, context) {
              var method = delegate.iterator[context.method];
              if (void 0 === method) {
                if (context.delegate = null, "throw" === context.method) {
                  if (delegate.iterator["return"] && (context.method = "return", context.arg = void 0, maybeInvokeDelegate(delegate, context), "throw" === context.method))
                    return ContinueSentinel;
                  context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
                }
                return ContinueSentinel;
              }
              var record = tryCatch(method, delegate.iterator, context.arg);
              if ("throw" === record.type)
                return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
              var info = record.arg;
              return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = void 0), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
            }
            function pushTryEntry(locs) {
              var entry = {
                tryLoc: locs[0]
              };
              1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
            }
            function resetTryEntry(entry) {
              var record = entry.completion || {};
              record.type = "normal", delete record.arg, entry.completion = record;
            }
            function Context(tryLocsList) {
              this.tryEntries = [{
                tryLoc: "root"
              }], tryLocsList.forEach(pushTryEntry, this), this.reset(true);
            }
            function values(iterable) {
              if (iterable) {
                var iteratorMethod = iterable[iteratorSymbol];
                if (iteratorMethod)
                  return iteratorMethod.call(iterable);
                if ("function" == typeof iterable.next)
                  return iterable;
                if (!isNaN(iterable.length)) {
                  var i2 = -1, next = function next2() {
                    for (; ++i2 < iterable.length; ) {
                      if (hasOwn.call(iterable, i2))
                        return next2.value = iterable[i2], next2.done = false, next2;
                    }
                    return next2.value = void 0, next2.done = true, next2;
                  };
                  return next.next = next;
                }
              }
              return {
                next: doneResult
              };
            }
            function doneResult() {
              return {
                value: void 0,
                done: true
              };
            }
            return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports3.isGeneratorFunction = function(genFun) {
              var ctor = "function" == typeof genFun && genFun.constructor;
              return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
            }, exports3.mark = function(genFun) {
              return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
            }, exports3.awrap = function(arg) {
              return {
                __await: arg
              };
            }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
              return this;
            }), exports3.AsyncIterator = AsyncIterator, exports3.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
              void 0 === PromiseImpl && (PromiseImpl = Promise);
              var iter = new AsyncIterator(wrap(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
              return exports3.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
                return result.done ? result.value : iter.next();
              });
            }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function() {
              return this;
            }), define(Gp, "toString", function() {
              return "[object Generator]";
            }), exports3.keys = function(object) {
              var keys2 = [];
              for (var key in object) {
                keys2.push(key);
              }
              return keys2.reverse(), function next() {
                for (; keys2.length; ) {
                  var key2 = keys2.pop();
                  if (key2 in object)
                    return next.value = key2, next.done = false, next;
                }
                return next.done = true, next;
              };
            }, exports3.values = values, Context.prototype = {
              constructor: Context,
              reset: function reset(skipTempReset) {
                if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(resetTryEntry), !skipTempReset)
                  for (var name in this) {
                    "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = void 0);
                  }
              },
              stop: function stop() {
                this.done = true;
                var rootRecord = this.tryEntries[0].completion;
                if ("throw" === rootRecord.type)
                  throw rootRecord.arg;
                return this.rval;
              },
              dispatchException: function dispatchException(exception) {
                if (this.done)
                  throw exception;
                var context = this;
                function handle(loc, caught) {
                  return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = void 0), !!caught;
                }
                for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
                  var entry = this.tryEntries[i2], record = entry.completion;
                  if ("root" === entry.tryLoc)
                    return handle("end");
                  if (entry.tryLoc <= this.prev) {
                    var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc");
                    if (hasCatch && hasFinally) {
                      if (this.prev < entry.catchLoc)
                        return handle(entry.catchLoc, true);
                      if (this.prev < entry.finallyLoc)
                        return handle(entry.finallyLoc);
                    } else if (hasCatch) {
                      if (this.prev < entry.catchLoc)
                        return handle(entry.catchLoc, true);
                    } else {
                      if (!hasFinally)
                        throw new Error("try statement without catch or finally");
                      if (this.prev < entry.finallyLoc)
                        return handle(entry.finallyLoc);
                    }
                  }
                }
              },
              abrupt: function abrupt(type, arg) {
                for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
                  var entry = this.tryEntries[i2];
                  if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                    var finallyEntry = entry;
                    break;
                  }
                }
                finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
                var record = finallyEntry ? finallyEntry.completion : {};
                return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
              },
              complete: function complete(record, afterLoc) {
                if ("throw" === record.type)
                  throw record.arg;
                return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
              },
              finish: function finish(finallyLoc) {
                for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
                  var entry = this.tryEntries[i2];
                  if (entry.finallyLoc === finallyLoc)
                    return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
                }
              },
              "catch": function _catch(tryLoc) {
                for (var i2 = this.tryEntries.length - 1; i2 >= 0; --i2) {
                  var entry = this.tryEntries[i2];
                  if (entry.tryLoc === tryLoc) {
                    var record = entry.completion;
                    if ("throw" === record.type) {
                      var thrown = record.arg;
                      resetTryEntry(entry);
                    }
                    return thrown;
                  }
                }
                throw new Error("illegal catch attempt");
              },
              delegateYield: function delegateYield(iterable, resultName, nextLoc) {
                return this.delegate = {
                  iterator: values(iterable),
                  resultName,
                  nextLoc
                }, "next" === this.method && (this.arg = void 0), ContinueSentinel;
              }
            }, exports3;
          }
          module2.exports = _regeneratorRuntime, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
        })(regeneratorRuntime$1);
        var runtime = regeneratorRuntime$1.exports();
        var regenerator = runtime;
        try {
          regeneratorRuntime = runtime;
        } catch (accidentalStrictMode) {
          if ((typeof globalThis === "undefined" ? "undefined" : _typeof$2(globalThis)) === "object") {
            globalThis.regeneratorRuntime = runtime;
          } else {
            Function("r", "regeneratorRuntime = r")(runtime);
          }
        }
        var props$10 = {
          container: {
            type: [String, Function],
            "default": function _default() {
              return function() {
                return window;
              };
            }
          },
          offsetBottom: {
            type: Number,
            "default": 0
          },
          offsetTop: {
            type: Number,
            "default": 0
          },
          zIndex: {
            type: Number
          },
          onFixedChange: Function
        };
        var _Affix = vue.defineComponent({
          name: "TAffix",
          props: props$10,
          emits: ["fixedChange"],
          setup: function setup(props2, context) {
            var COMPONENT_NAME2 = usePrefixClass("affix");
            var renderTNodeJSX2 = useTNodeJSX();
            var affixWrapRef = vue.ref(null);
            var affixRef = vue.ref(null);
            var placeholderEL = vue.ref(document.createElement("div"));
            var ticking = vue.ref(false);
            var binded = vue.ref(false);
            var scrollContainer = vue.ref();
            var handleScroll = function handleScroll2() {
              if (!ticking.value) {
                window.requestAnimationFrame(function() {
                  var _affixWrapRef$value$g;
                  var _ref = (_affixWrapRef$value$g = affixWrapRef.value.getBoundingClientRect()) !== null && _affixWrapRef$value$g !== void 0 ? _affixWrapRef$value$g : {
                    top: 0,
                    width: 0,
                    height: 0
                  }, wrapToTop = _ref.top, wrapWidth = _ref.width, wrapHeight = _ref.height;
                  var containerTop = 0;
                  if (scrollContainer.value instanceof HTMLElement) {
                    containerTop = scrollContainer.value.getBoundingClientRect().top;
                  }
                  var fixedTop;
                  var calcTop = wrapToTop - containerTop;
                  var containerHeight = scrollContainer.value[scrollContainer.value instanceof Window ? "innerHeight" : "clientHeight"] - wrapHeight;
                  var calcBottom = containerTop + containerHeight - props2.offsetBottom;
                  if (props2.offsetTop !== void 0 && calcTop <= props2.offsetTop) {
                    fixedTop = containerTop + props2.offsetTop;
                  } else if (props2.offsetBottom !== void 0 && wrapToTop >= calcBottom) {
                    fixedTop = calcBottom;
                  } else {
                    fixedTop = false;
                  }
                  if (affixRef.value) {
                    var affixed = fixedTop !== false;
                    var placeholderStatus = affixWrapRef.value.contains(placeholderEL.value);
                    if (affixed) {
                      affixRef.value.className = COMPONENT_NAME2.value;
                      affixRef.value.style.top = "".concat(fixedTop, "px");
                      affixRef.value.style.width = "".concat(wrapWidth, "px");
                      affixRef.value.style.height = "".concat(wrapHeight, "px");
                      if (props2.zIndex) {
                        affixRef.value.style.zIndex = "".concat(props2.zIndex);
                      }
                      if (!placeholderStatus) {
                        placeholderEL.value.style.width = "".concat(wrapWidth, "px");
                        placeholderEL.value.style.height = "".concat(wrapHeight, "px");
                        affixWrapRef.value.appendChild(placeholderEL.value);
                      }
                    } else {
                      affixRef.value.removeAttribute("class");
                      affixRef.value.removeAttribute("style");
                      placeholderStatus && placeholderEL.value.remove();
                    }
                    context.emit("fixedChange", affixed, {
                      top: Number(fixedTop)
                    });
                    if (isFunction_1(props2.onFixedChange))
                      props2.onFixedChange(affixed, {
                        top: Number(fixedTop)
                      });
                  }
                  ticking.value = false;
                });
                ticking.value = true;
              }
            };
            var bindScroll = /* @__PURE__ */ function() {
              var _ref2 = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee() {
                return regenerator.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return vue.nextTick();
                      case 2:
                        if (!binded.value) {
                          _context.next = 4;
                          break;
                        }
                        return _context.abrupt("return");
                      case 4:
                        scrollContainer.value = getScrollContainer(props2.container);
                        on$1(scrollContainer.value, "scroll", handleScroll);
                        on$1(window, "resize", handleScroll);
                        binded.value = true;
                      case 8:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));
              return function bindScroll2() {
                return _ref2.apply(this, arguments);
              };
            }();
            var unbindScroll = function unbindScroll2() {
              if (!scrollContainer.value || !binded.value)
                return;
              off$1(scrollContainer.value, "scroll", handleScroll);
              off$1(window, "resize", handleScroll);
              binded.value = false;
            };
            vue.watch(function() {
              return props2.offsetTop;
            }, function() {
              handleScroll();
            });
            vue.watch(function() {
              return props2.offsetBottom;
            }, function() {
              handleScroll();
            });
            vue.watch(function() {
              return props2.zIndex;
            }, function() {
              handleScroll();
            });
            vue.onMounted(bindScroll);
            vue.onActivated(bindScroll);
            vue.onDeactivated(unbindScroll);
            vue.onBeforeUnmount(unbindScroll);
            return {
              affixWrapRef,
              affixRef,
              bindScroll,
              unbindScroll,
              handleScroll,
              scrollContainer,
              renderTNodeJSX: renderTNodeJSX2
            };
          },
          render: function render() {
            return vue.createVNode("div", {
              "ref": "affixWrapRef"
            }, [vue.createVNode("div", {
              "ref": "affixRef"
            }, [this.renderTNodeJSX("default")])]);
          }
        });
        var Affix = withInstall(_Affix);
        var ANCHOR_SHARP_REGEXP = /#(\S+)$/;
        function getOffsetTop(target, container) {
          var _target$getBoundingCl = target.getBoundingClientRect(), top2 = _target$getBoundingCl.top;
          if (container === window) {
            return top2 - document.documentElement.clientTop;
          }
          return top2 - container.getBoundingClientRect().top;
        }
        var props$$ = {
          affixProps: {
            type: Object
          },
          bounds: {
            type: Number,
            "default": 5
          },
          container: {
            type: [String, Function],
            "default": function _default() {
              return function() {
                return window;
              };
            }
          },
          cursor: {
            type: Function
          },
          size: {
            type: String,
            "default": "medium",
            validator: function validator(val) {
              return ["small", "medium", "large"].includes(val);
            }
          },
          targetOffset: {
            type: Number,
            "default": 0
          },
          onChange: Function,
          onClick: Function
        };
        var AnchorInjectionKey = Symbol("AnchorInjectionProvide");
        function _isSlot$s(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var _Anchor = vue.defineComponent({
          name: "TAnchor",
          props: props$$,
          setup: function setup(props2, _ref) {
            _ref.slots;
            var attrs = _ref.attrs;
            var anchorRef = vue.ref(null);
            var links = vue.ref([]);
            var active = vue.ref("");
            var scrollContainer = vue.ref(null);
            var handleScrollLock = vue.ref(false);
            var activeLineStyle = vue.reactive({});
            var COMPONENT_NAME2 = usePrefixClass("anchor");
            var ANCHOR_LINE_CLASSNAME = usePrefixClass("anchor__line");
            var ANCHOR_LINE_CURSOR_CLASSNAME = usePrefixClass("anchor__line-cursor");
            var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS, SIZE = _useCommonClassName.SIZE;
            var renderTNodeJSX2 = useTNodeJSX();
            var getScrollContainer$1 = function getScrollContainer$12() {
              if (isServer$1) {
                return;
              }
              var container = props2.container;
              scrollContainer.value = getScrollContainer(container);
              on$1(scrollContainer.value, "scroll", handleScroll);
              handleScroll();
            };
            var handleScroll = function handleScroll2() {
              if (handleScrollLock.value)
                return;
              var bounds = props2.bounds, targetOffset = props2.targetOffset;
              var filters = [];
              var active2 = "";
              links.value.forEach(function(link) {
                var anchor = getAnchorTarget(link);
                if (!anchor) {
                  return;
                }
                var top2 = getOffsetTop(anchor, scrollContainer.value);
                if (top2 < bounds + targetOffset) {
                  filters.push({
                    link,
                    top: top2
                  });
                }
              });
              if (filters.length) {
                var latest = filters.reduce(function(prev, cur) {
                  return prev.top > cur.top ? prev : cur;
                });
                active2 = latest.link;
              }
              setCurrentActiveLink(active2);
            };
            var getAnchorTarget = function getAnchorTarget2(link) {
              var matcher = link.match(ANCHOR_SHARP_REGEXP);
              if (!matcher) {
                return;
              }
              var anchor = document.getElementById(matcher[1]);
              if (!anchor) {
                return;
              }
              return anchor;
            };
            var registerLink = function registerLink2(link) {
              if (!ANCHOR_SHARP_REGEXP.test(link) || links.value.indexOf(link) !== -1) {
                return;
              }
              links.value.push(link);
            };
            var unregisterLink = function unregisterLink2(link) {
              links.value = links.value.filter(function(each) {
                return each !== link;
              });
            };
            var setCurrentActiveLink = /* @__PURE__ */ function() {
              var _ref2 = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee(link) {
                var _props2$onChange;
                return regenerator.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        if (!(active.value === link)) {
                          _context.next = 2;
                          break;
                        }
                        return _context.abrupt("return");
                      case 2:
                        active.value = link;
                        (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 ? void 0 : _props2$onChange.call(props2, link, active.value);
                        _context.next = 6;
                        return vue.nextTick();
                      case 6:
                        updateActiveLine();
                      case 7:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));
              return function setCurrentActiveLink2(_x) {
                return _ref2.apply(this, arguments);
              };
            }();
            var updateActiveLine = function updateActiveLine2() {
              var _anchorRef$value;
              var ele = (_anchorRef$value = anchorRef.value) === null || _anchorRef$value === void 0 ? void 0 : _anchorRef$value.querySelector(".".concat(STATUS.value.active, ">a"));
              if (!ele) {
                Object.assign(activeLineStyle, {});
                return;
              }
              var top2 = ele.offsetTop, height = ele.offsetHeight;
              Object.assign(activeLineStyle, {
                top: "".concat(top2, "px"),
                height: "".concat(height, "px"),
                opacity: 1
              });
            };
            var handleLinkClick = function handleLinkClick2(link) {
              var _props2$onClick;
              (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, link);
            };
            var handleScrollTo = /* @__PURE__ */ function() {
              var _ref3 = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee2(link) {
                var anchor, targetOffset, scrollTop, offsetTop, top2;
                return regenerator.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        anchor = getAnchorTarget(link);
                        setCurrentActiveLink(link);
                        if (anchor) {
                          _context2.next = 4;
                          break;
                        }
                        return _context2.abrupt("return");
                      case 4:
                        handleScrollLock.value = true;
                        targetOffset = props2.targetOffset;
                        scrollTop = getScroll(scrollContainer.value);
                        offsetTop = getOffsetTop(anchor, scrollContainer.value);
                        top2 = scrollTop + offsetTop - targetOffset;
                        _context2.next = 11;
                        return scrollTo(top2, {
                          container: scrollContainer.value
                        });
                      case 11:
                        handleScrollLock.value = false;
                      case 12:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              }));
              return function handleScrollTo2(_x2) {
                return _ref3.apply(this, arguments);
              };
            }();
            var renderCursor = function renderCursor2() {
              var titleContent = renderTNodeJSX2("cursor");
              return titleContent || vue.createVNode("div", {
                "class": ANCHOR_LINE_CURSOR_CLASSNAME.value
              }, null);
            };
            vue.onMounted(/* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee3() {
              return regenerator.wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      getScrollContainer$1();
                      if (!active.value) {
                        _context3.next = 5;
                        break;
                      }
                      _context3.next = 4;
                      return vue.nextTick();
                    case 4:
                      handleScrollTo(active.value);
                    case 5:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, _callee3);
            })));
            vue.onUnmounted(function() {
              if (!scrollContainer.value)
                return;
              off$1(scrollContainer.value, "scroll", handleScroll);
            });
            vue.watchEffect(function() {
              if (scrollContainer.value) {
                off$1(scrollContainer.value, "scroll", handleScroll);
              }
              getScrollContainer$1();
            });
            vue.provide(AnchorInjectionKey, vue.reactive({
              registerLink,
              unregisterLink,
              handleScrollTo,
              handleLinkClick,
              active
            }));
            return function() {
              var size = props2.size, affixProps = props2.affixProps;
              var className = [COMPONENT_NAME2.value, SIZE.value[size]];
              var content = vue.createVNode("div", vue.mergeProps({
                "ref": anchorRef,
                "class": className
              }, attrs), [vue.createVNode("div", {
                "class": ANCHOR_LINE_CLASSNAME.value
              }, [vue.createVNode("div", {
                "class": "".concat(ANCHOR_LINE_CURSOR_CLASSNAME.value, "-wrapper"),
                "style": activeLineStyle
              }, [renderCursor()])]), renderTNodeJSX2("default")]);
              if (affixProps) {
                return vue.createVNode(Affix, affixProps, _isSlot$s(content) ? content : {
                  "default": function _default() {
                    return [content];
                  }
                });
              }
              return content;
            };
          }
        });
        var props$_ = {
          href: {
            type: String,
            "default": "",
            required: true
          },
          target: {
            type: String,
            "default": "_self",
            validator: function validator(val) {
              return ["_self", "_blank", "_parent", "_top"].includes(val);
            }
          },
          title: {
            type: [String, Function],
            "default": ""
          }
        };
        function ownKeys$1M(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1L(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1M(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1M(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var localProps = _objectSpread$1L(_objectSpread$1L({}, props$_), {}, {
          href: {
            type: String,
            required: true,
            validator: function validator(v) {
              return ANCHOR_SHARP_REGEXP.test(v);
            }
          }
        });
        var _AnchorItem = vue.defineComponent({
          name: "TAnchorItem",
          inject: {
            tAnchor: {
              "default": void 0
            }
          },
          props: localProps,
          setup: function setup(props2, _ref) {
            var slots = _ref.slots;
            var anchor = vue.inject(AnchorInjectionKey, void 0);
            var CLASSNAME_PREFIX = usePrefixClass("anchor__item");
            var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
            var register = function register2() {
              anchor.registerLink(props2.href);
            };
            var unregister = function unregister2() {
              var href = props2.href;
              if (!href)
                return;
              anchor.unregisterLink(href);
            };
            var handleClick = function handleClick2(e) {
              var href = props2.href, title = props2.title;
              anchor.handleScrollTo(href);
              anchor.handleLinkClick({
                href,
                title: typeof title === "string" ? title : void 0,
                e
              });
            };
            var renderTitle2 = function renderTitle3() {
              var title = props2.title;
              var titleSlot = slots.title;
              var titleVal;
              if (typeof title === "string") {
                titleVal = title;
              } else if (typeof title === "function") {
                titleVal = title(vue.h);
              } else if (titleSlot) {
                titleVal = titleSlot(null);
              }
              return titleVal;
            };
            vue.watch(function() {
              return props2.href;
            }, function() {
              unregister();
              register();
            }, {
              immediate: true
            });
            vue.onMounted(function() {
              register();
            });
            vue.onUnmounted(function() {
              register();
            });
            return function() {
              var _wrapperClass;
              var href = props2.href, target = props2.target;
              var children = slots["default"], titleSlot = slots.title;
              var title = renderTitle2();
              var titleAttr = typeof title === "string" ? title : null;
              var active = anchor.active === href;
              var wrapperClass = (_wrapperClass = {}, _defineProperty$3(_wrapperClass, CLASSNAME_PREFIX.value, true), _defineProperty$3(_wrapperClass, STATUS.value.active, active), _wrapperClass);
              var titleClass = _defineProperty$3({}, "".concat(CLASSNAME_PREFIX.value, "-link"), true);
              return vue.createVNode("div", {
                "class": wrapperClass
              }, [vue.createVNode("a", {
                "href": href,
                "title": titleAttr,
                "class": titleClass,
                "target": target,
                "onClick": handleClick
              }, [titleSlot ? titleSlot(null) : title]), children && children(null)]);
            };
          }
        });
        var clipboard = { exports: {} };
        (function(module2, exports3) {
          (function webpackUniversalModuleDefinition(root2, factory) {
            module2.exports = factory();
          })(commonjsGlobal, function() {
            return function() {
              var __webpack_modules__ = {
                686: function _(__unused_webpack_module, __webpack_exports__, __webpack_require__2) {
                  __webpack_require__2.d(__webpack_exports__, {
                    "default": function _default() {
                      return clipboard2;
                    }
                  });
                  var tiny_emitter = __webpack_require__2(279);
                  var tiny_emitter_default = /* @__PURE__ */ __webpack_require__2.n(tiny_emitter);
                  var listen = __webpack_require__2(370);
                  var listen_default = /* @__PURE__ */ __webpack_require__2.n(listen);
                  var src_select = __webpack_require__2(817);
                  var select_default = /* @__PURE__ */ __webpack_require__2.n(src_select);
                  function command(type) {
                    try {
                      return document.execCommand(type);
                    } catch (err) {
                      return false;
                    }
                  }
                  var ClipboardActionCut = function ClipboardActionCut2(target) {
                    var selectedText = select_default()(target);
                    command("cut");
                    return selectedText;
                  };
                  var actions_cut = ClipboardActionCut;
                  function createFakeElement(value) {
                    var isRTL = document.documentElement.getAttribute("dir") === "rtl";
                    var fakeElement = document.createElement("textarea");
                    fakeElement.style.fontSize = "12pt";
                    fakeElement.style.border = "0";
                    fakeElement.style.padding = "0";
                    fakeElement.style.margin = "0";
                    fakeElement.style.position = "absolute";
                    fakeElement.style[isRTL ? "right" : "left"] = "-9999px";
                    var yPosition = window.pageYOffset || document.documentElement.scrollTop;
                    fakeElement.style.top = "".concat(yPosition, "px");
                    fakeElement.setAttribute("readonly", "");
                    fakeElement.value = value;
                    return fakeElement;
                  }
                  var fakeCopyAction = function fakeCopyAction2(value, options) {
                    var fakeElement = createFakeElement(value);
                    options.container.appendChild(fakeElement);
                    var selectedText = select_default()(fakeElement);
                    command("copy");
                    fakeElement.remove();
                    return selectedText;
                  };
                  var ClipboardActionCopy = function ClipboardActionCopy2(target) {
                    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                      container: document.body
                    };
                    var selectedText = "";
                    if (typeof target === "string") {
                      selectedText = fakeCopyAction(target, options);
                    } else if (target instanceof HTMLInputElement && !["text", "search", "url", "tel", "password"].includes(target === null || target === void 0 ? void 0 : target.type)) {
                      selectedText = fakeCopyAction(target.value, options);
                    } else {
                      selectedText = select_default()(target);
                      command("copy");
                    }
                    return selectedText;
                  };
                  var actions_copy = ClipboardActionCopy;
                  function _typeof2(obj) {
                    "@babel/helpers - typeof";
                    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                      _typeof2 = function _typeof3(obj2) {
                        return typeof obj2;
                      };
                    } else {
                      _typeof2 = function _typeof3(obj2) {
                        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                      };
                    }
                    return _typeof2(obj);
                  }
                  var ClipboardActionDefault = function ClipboardActionDefault2() {
                    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                    var _options$action = options.action, action = _options$action === void 0 ? "copy" : _options$action, container = options.container, target = options.target, text = options.text;
                    if (action !== "copy" && action !== "cut") {
                      throw new Error('Invalid "action" value, use either "copy" or "cut"');
                    }
                    if (target !== void 0) {
                      if (target && _typeof2(target) === "object" && target.nodeType === 1) {
                        if (action === "copy" && target.hasAttribute("disabled")) {
                          throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                        }
                        if (action === "cut" && (target.hasAttribute("readonly") || target.hasAttribute("disabled"))) {
                          throw new Error(`Invalid "target" attribute. You can't cut text from elements with "readonly" or "disabled" attributes`);
                        }
                      } else {
                        throw new Error('Invalid "target" value, use a valid Element');
                      }
                    }
                    if (text) {
                      return actions_copy(text, {
                        container
                      });
                    }
                    if (target) {
                      return action === "cut" ? actions_cut(target) : actions_copy(target, {
                        container
                      });
                    }
                  };
                  var actions_default = ClipboardActionDefault;
                  function clipboard_typeof(obj) {
                    "@babel/helpers - typeof";
                    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                      clipboard_typeof = function _typeof3(obj2) {
                        return typeof obj2;
                      };
                    } else {
                      clipboard_typeof = function _typeof3(obj2) {
                        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                      };
                    }
                    return clipboard_typeof(obj);
                  }
                  function _classCallCheck2(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }
                  function _defineProperties2(target, props2) {
                    for (var i2 = 0; i2 < props2.length; i2++) {
                      var descriptor = props2[i2];
                      descriptor.enumerable = descriptor.enumerable || false;
                      descriptor.configurable = true;
                      if ("value" in descriptor)
                        descriptor.writable = true;
                      Object.defineProperty(target, descriptor.key, descriptor);
                    }
                  }
                  function _createClass2(Constructor, protoProps, staticProps) {
                    if (protoProps)
                      _defineProperties2(Constructor.prototype, protoProps);
                    if (staticProps)
                      _defineProperties2(Constructor, staticProps);
                    return Constructor;
                  }
                  function _inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                      throw new TypeError("Super expression must either be null or a function");
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, {
                      constructor: {
                        value: subClass,
                        writable: true,
                        configurable: true
                      }
                    });
                    if (superClass)
                      _setPrototypeOf(subClass, superClass);
                  }
                  function _setPrototypeOf(o, p) {
                    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
                      o2.__proto__ = p2;
                      return o2;
                    };
                    return _setPrototypeOf(o, p);
                  }
                  function _createSuper(Derived) {
                    var hasNativeReflectConstruct = _isNativeReflectConstruct();
                    return function _createSuperInternal() {
                      var Super = _getPrototypeOf(Derived), result;
                      if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                      } else {
                        result = Super.apply(this, arguments);
                      }
                      return _possibleConstructorReturn(this, result);
                    };
                  }
                  function _possibleConstructorReturn(self2, call) {
                    if (call && (clipboard_typeof(call) === "object" || typeof call === "function")) {
                      return call;
                    }
                    return _assertThisInitialized(self2);
                  }
                  function _assertThisInitialized(self2) {
                    if (self2 === void 0) {
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return self2;
                  }
                  function _isNativeReflectConstruct() {
                    if (typeof Reflect === "undefined" || !Reflect.construct)
                      return false;
                    if (Reflect.construct.sham)
                      return false;
                    if (typeof Proxy === "function")
                      return true;
                    try {
                      Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                      }));
                      return true;
                    } catch (e) {
                      return false;
                    }
                  }
                  function _getPrototypeOf(o) {
                    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
                      return o2.__proto__ || Object.getPrototypeOf(o2);
                    };
                    return _getPrototypeOf(o);
                  }
                  function getAttributeValue(suffix2, element2) {
                    var attribute = "data-clipboard-".concat(suffix2);
                    if (!element2.hasAttribute(attribute)) {
                      return;
                    }
                    return element2.getAttribute(attribute);
                  }
                  var Clipboard2 = /* @__PURE__ */ function(_Emitter) {
                    _inherits(Clipboard3, _Emitter);
                    var _super = _createSuper(Clipboard3);
                    function Clipboard3(trigger, options) {
                      var _this;
                      _classCallCheck2(this, Clipboard3);
                      _this = _super.call(this);
                      _this.resolveOptions(options);
                      _this.listenClick(trigger);
                      return _this;
                    }
                    _createClass2(Clipboard3, [{
                      key: "resolveOptions",
                      value: function resolveOptions() {
                        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                        this.action = typeof options.action === "function" ? options.action : this.defaultAction;
                        this.target = typeof options.target === "function" ? options.target : this.defaultTarget;
                        this.text = typeof options.text === "function" ? options.text : this.defaultText;
                        this.container = clipboard_typeof(options.container) === "object" ? options.container : document.body;
                      }
                    }, {
                      key: "listenClick",
                      value: function listenClick(trigger) {
                        var _this2 = this;
                        this.listener = listen_default()(trigger, "click", function(e) {
                          return _this2.onClick(e);
                        });
                      }
                    }, {
                      key: "onClick",
                      value: function onClick(e) {
                        var trigger = e.delegateTarget || e.currentTarget;
                        var action = this.action(trigger) || "copy";
                        var text = actions_default({
                          action,
                          container: this.container,
                          target: this.target(trigger),
                          text: this.text(trigger)
                        });
                        this.emit(text ? "success" : "error", {
                          action,
                          text,
                          trigger,
                          clearSelection: function clearSelection() {
                            if (trigger) {
                              trigger.focus();
                            }
                            window.getSelection().removeAllRanges();
                          }
                        });
                      }
                    }, {
                      key: "defaultAction",
                      value: function defaultAction(trigger) {
                        return getAttributeValue("action", trigger);
                      }
                    }, {
                      key: "defaultTarget",
                      value: function defaultTarget(trigger) {
                        var selector = getAttributeValue("target", trigger);
                        if (selector) {
                          return document.querySelector(selector);
                        }
                      }
                    }, {
                      key: "defaultText",
                      value: function defaultText(trigger) {
                        return getAttributeValue("text", trigger);
                      }
                    }, {
                      key: "destroy",
                      value: function destroy() {
                        this.listener.destroy();
                      }
                    }], [{
                      key: "copy",
                      value: function copy(target) {
                        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                          container: document.body
                        };
                        return actions_copy(target, options);
                      }
                    }, {
                      key: "cut",
                      value: function cut(target) {
                        return actions_cut(target);
                      }
                    }, {
                      key: "isSupported",
                      value: function isSupported() {
                        var action = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ["copy", "cut"];
                        var actions = typeof action === "string" ? [action] : action;
                        var support = !!document.queryCommandSupported;
                        actions.forEach(function(action2) {
                          support = support && !!document.queryCommandSupported(action2);
                        });
                        return support;
                      }
                    }]);
                    return Clipboard3;
                  }(tiny_emitter_default());
                  var clipboard2 = Clipboard2;
                },
                828: function _(module3) {
                  var DOCUMENT_NODE_TYPE = 9;
                  if (typeof Element !== "undefined" && !Element.prototype.matches) {
                    var proto = Element.prototype;
                    proto.matches = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;
                  }
                  function closest2(element2, selector) {
                    while (element2 && element2.nodeType !== DOCUMENT_NODE_TYPE) {
                      if (typeof element2.matches === "function" && element2.matches(selector)) {
                        return element2;
                      }
                      element2 = element2.parentNode;
                    }
                  }
                  module3.exports = closest2;
                },
                438: function _(module3, __unused_webpack_exports, __webpack_require__2) {
                  var closest2 = __webpack_require__2(828);
                  function _delegate(element2, selector, type, callback, useCapture) {
                    var listenerFn = listener.apply(this, arguments);
                    element2.addEventListener(type, listenerFn, useCapture);
                    return {
                      destroy: function destroy() {
                        element2.removeEventListener(type, listenerFn, useCapture);
                      }
                    };
                  }
                  function delegate(elements, selector, type, callback, useCapture) {
                    if (typeof elements.addEventListener === "function") {
                      return _delegate.apply(null, arguments);
                    }
                    if (typeof type === "function") {
                      return _delegate.bind(null, document).apply(null, arguments);
                    }
                    if (typeof elements === "string") {
                      elements = document.querySelectorAll(elements);
                    }
                    return Array.prototype.map.call(elements, function(element2) {
                      return _delegate(element2, selector, type, callback, useCapture);
                    });
                  }
                  function listener(element2, selector, type, callback) {
                    return function(e) {
                      e.delegateTarget = closest2(e.target, selector);
                      if (e.delegateTarget) {
                        callback.call(element2, e);
                      }
                    };
                  }
                  module3.exports = delegate;
                },
                879: function _(__unused_webpack_module, exports4) {
                  exports4.node = function(value) {
                    return value !== void 0 && value instanceof HTMLElement && value.nodeType === 1;
                  };
                  exports4.nodeList = function(value) {
                    var type = Object.prototype.toString.call(value);
                    return value !== void 0 && (type === "[object NodeList]" || type === "[object HTMLCollection]") && "length" in value && (value.length === 0 || exports4.node(value[0]));
                  };
                  exports4.string = function(value) {
                    return typeof value === "string" || value instanceof String;
                  };
                  exports4.fn = function(value) {
                    var type = Object.prototype.toString.call(value);
                    return type === "[object Function]";
                  };
                },
                370: function _(module3, __unused_webpack_exports, __webpack_require__2) {
                  var is = __webpack_require__2(879);
                  var delegate = __webpack_require__2(438);
                  function listen(target, type, callback) {
                    if (!target && !type && !callback) {
                      throw new Error("Missing required arguments");
                    }
                    if (!is.string(type)) {
                      throw new TypeError("Second argument must be a String");
                    }
                    if (!is.fn(callback)) {
                      throw new TypeError("Third argument must be a Function");
                    }
                    if (is.node(target)) {
                      return listenNode(target, type, callback);
                    } else if (is.nodeList(target)) {
                      return listenNodeList(target, type, callback);
                    } else if (is.string(target)) {
                      return listenSelector(target, type, callback);
                    } else {
                      throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList");
                    }
                  }
                  function listenNode(node, type, callback) {
                    node.addEventListener(type, callback);
                    return {
                      destroy: function destroy() {
                        node.removeEventListener(type, callback);
                      }
                    };
                  }
                  function listenNodeList(nodeList, type, callback) {
                    Array.prototype.forEach.call(nodeList, function(node) {
                      node.addEventListener(type, callback);
                    });
                    return {
                      destroy: function destroy() {
                        Array.prototype.forEach.call(nodeList, function(node) {
                          node.removeEventListener(type, callback);
                        });
                      }
                    };
                  }
                  function listenSelector(selector, type, callback) {
                    return delegate(document.body, selector, type, callback);
                  }
                  module3.exports = listen;
                },
                817: function _(module3) {
                  function select(element2) {
                    var selectedText;
                    if (element2.nodeName === "SELECT") {
                      element2.focus();
                      selectedText = element2.value;
                    } else if (element2.nodeName === "INPUT" || element2.nodeName === "TEXTAREA") {
                      var isReadOnly = element2.hasAttribute("readonly");
                      if (!isReadOnly) {
                        element2.setAttribute("readonly", "");
                      }
                      element2.select();
                      element2.setSelectionRange(0, element2.value.length);
                      if (!isReadOnly) {
                        element2.removeAttribute("readonly");
                      }
                      selectedText = element2.value;
                    } else {
                      if (element2.hasAttribute("contenteditable")) {
                        element2.focus();
                      }
                      var selection = window.getSelection();
                      var range = document.createRange();
                      range.selectNodeContents(element2);
                      selection.removeAllRanges();
                      selection.addRange(range);
                      selectedText = selection.toString();
                    }
                    return selectedText;
                  }
                  module3.exports = select;
                },
                279: function _(module3) {
                  function E() {
                  }
                  E.prototype = {
                    on: function on2(name, callback, ctx) {
                      var e = this.e || (this.e = {});
                      (e[name] || (e[name] = [])).push({
                        fn: callback,
                        ctx
                      });
                      return this;
                    },
                    once: function once2(name, callback, ctx) {
                      var self2 = this;
                      function listener() {
                        self2.off(name, listener);
                        callback.apply(ctx, arguments);
                      }
                      listener._ = callback;
                      return this.on(name, listener, ctx);
                    },
                    emit: function emit(name) {
                      var data = [].slice.call(arguments, 1);
                      var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
                      var i2 = 0;
                      var len = evtArr.length;
                      for (i2; i2 < len; i2++) {
                        evtArr[i2].fn.apply(evtArr[i2].ctx, data);
                      }
                      return this;
                    },
                    off: function off2(name, callback) {
                      var e = this.e || (this.e = {});
                      var evts = e[name];
                      var liveEvents = [];
                      if (evts && callback) {
                        for (var i2 = 0, len = evts.length; i2 < len; i2++) {
                          if (evts[i2].fn !== callback && evts[i2].fn._ !== callback)
                            liveEvents.push(evts[i2]);
                        }
                      }
                      liveEvents.length ? e[name] = liveEvents : delete e[name];
                      return this;
                    }
                  };
                  module3.exports = E;
                  module3.exports.TinyEmitter = E;
                }
              };
              var __webpack_module_cache__ = {};
              function __webpack_require__(moduleId) {
                if (__webpack_module_cache__[moduleId]) {
                  return __webpack_module_cache__[moduleId].exports;
                }
                var module3 = __webpack_module_cache__[moduleId] = {
                  exports: {}
                };
                __webpack_modules__[moduleId](module3, module3.exports, __webpack_require__);
                return module3.exports;
              }
              !function() {
                __webpack_require__.n = function(module3) {
                  var getter = module3 && module3.__esModule ? function() {
                    return module3["default"];
                  } : function() {
                    return module3;
                  };
                  __webpack_require__.d(getter, {
                    a: getter
                  });
                  return getter;
                };
              }();
              !function() {
                __webpack_require__.d = function(exports4, definition) {
                  for (var key in definition) {
                    if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports4, key)) {
                      Object.defineProperty(exports4, key, {
                        enumerable: true,
                        get: definition[key]
                      });
                    }
                  }
                };
              }();
              !function() {
                __webpack_require__.o = function(obj, prop) {
                  return Object.prototype.hasOwnProperty.call(obj, prop);
                };
              }();
              return __webpack_require__(686);
            }()["default"];
          });
        })(clipboard);
        var Clipboard = /* @__PURE__ */ getDefaultExportFromCjs(clipboard.exports);
        function copyText(_text) {
          var div = document.createElement("div");
          var clip3 = new Clipboard(div, {
            text: function text() {
              return _text;
            }
          });
          div.click();
          clip3.destroy();
          div.remove();
        }
        var THEME_LIST = ["info", "success", "warning", "error", "question", "loading"];
        var DISTANCE$1 = "32px";
        var PLACEMENT_OFFSET$1 = {
          top: {
            top: DISTANCE$1,
            left: "50%",
            transform: "translateX(-50%)"
          },
          center: {
            left: "50%",
            top: "50%",
            transform: "translateX(-50%) translateY(-50%)"
          },
          left: {
            left: DISTANCE$1,
            top: "50%",
            transform: "translateY(-50%)"
          },
          bottom: {
            bottom: DISTANCE$1,
            left: "50%",
            transform: "translateX(-50%)"
          },
          right: {
            right: DISTANCE$1,
            top: "50%",
            transform: "translateY(-50%)",
            display: "flex",
            flexDirection: "column",
            alignItems: "flex-end"
          },
          "top-left": {
            left: DISTANCE$1,
            top: DISTANCE$1
          },
          "top-right": {
            right: DISTANCE$1,
            top: DISTANCE$1,
            display: "flex",
            flexDirection: "column",
            alignItems: "flex-end"
          },
          "bottom-right": {
            right: DISTANCE$1,
            bottom: DISTANCE$1,
            display: "flex",
            flexDirection: "column",
            alignItems: "flex-end"
          },
          "bottom-left": {
            left: DISTANCE$1,
            bottom: DISTANCE$1
          }
        };
        var PLACEMENT_LIST$1 = Object.keys(PLACEMENT_OFFSET$1);
        var props$Z = {
          closeBtn: {
            type: [String, Boolean, Function],
            "default": void 0
          },
          content: {
            type: [String, Function]
          },
          duration: {
            type: Number,
            "default": 3e3
          },
          icon: {
            type: [Boolean, Function],
            "default": true
          },
          theme: {
            type: String,
            "default": "info",
            validator: function validator(val) {
              return ["info", "success", "warning", "error", "question", "loading"].includes(val);
            }
          },
          onCloseBtnClick: Function,
          onDurationEnd: Function
        };
        var ANIMATION_OPTION$1 = {
          duration: 200,
          easing: "linear"
        };
        function fadeIn$1(dom, placement) {
          if (!dom)
            return;
          var offsetWidth = (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
          var offsetHeight = (dom === null || dom === void 0 ? void 0 : dom.offsetHeight) || 0;
          var fadeInKeyframes = getFadeInKeyframes$1(placement, offsetWidth, offsetHeight);
          if (!fadeInKeyframes)
            return;
          var styleAfterFadeIn = fadeInKeyframes[fadeInKeyframes.length - 1];
          setDomStyleAfterAnimation(dom, styleAfterFadeIn);
          dom.animate && dom.animate(fadeInKeyframes, ANIMATION_OPTION$1);
        }
        function fadeOut$1(dom, placement, onFinish) {
          if (!dom)
            return;
          var offsetHeight = (dom === null || dom === void 0 ? void 0 : dom.offsetHeight) || 0;
          var fadeOutKeyframes = getFadeOutKeyframes$1(placement, offsetHeight);
          if (!fadeOutKeyframes)
            return onFinish();
          var styleAfterFadeOut = fadeOutKeyframes[fadeOutKeyframes.length - 1];
          setDomStyleAfterAnimation(dom, styleAfterFadeOut);
          var animation = dom.animate && dom.animate(fadeOutKeyframes, ANIMATION_OPTION$1);
          if (animation) {
            animation.onfinish = function() {
              dom.style.display = "none";
              onFinish();
            };
          } else {
            dom.style.display = "none";
            onFinish();
          }
        }
        function setDomStyleAfterAnimation(dom, styleAfterAnimation) {
          var keys2 = Object.keys(styleAfterAnimation);
          for (var i2 = 0; i2 < keys2.length; i2 += 1) {
            var key = keys2[i2];
            dom.style[key] = styleAfterAnimation[key];
          }
        }
        function getFadeInKeyframes$1(placement, offsetWidth, offsetHeight) {
          if (!PLACEMENT_LIST$1.includes(placement))
            return null;
          if (["top-left", "left", "bottom-left"].includes(placement)) {
            return [{
              opacity: 0,
              marginLeft: "-".concat(offsetWidth, "px")
            }, {
              opacity: 1,
              marginLeft: "0"
            }];
          }
          if (["top-right", "right", "bottom-right"].includes(placement)) {
            return [{
              opacity: 0,
              marginRight: "-".concat(offsetWidth, "px")
            }, {
              opacity: 1,
              marginRight: "0"
            }];
          }
          if (["top", "center"].includes(placement)) {
            return [{
              opacity: 0,
              marginTop: "-".concat(offsetHeight, "px")
            }, {
              opacity: 1,
              marginTop: "0"
            }];
          }
          if (["bottom"].includes(placement)) {
            return [{
              opacity: 0,
              transform: "translate3d(0, ".concat(offsetHeight, "px, 0)")
            }, {
              opacity: 1,
              transform: "translate3d(0, 0, 0)"
            }];
          }
        }
        function getFadeOutKeyframes$1(placement, offsetHeight) {
          if (!PLACEMENT_LIST$1.includes(placement))
            return null;
          if (["bottom-left", "bottom", "bottom-right"].includes(placement)) {
            var marginOffset2 = "".concat(offsetHeight, "px");
            return [{
              opacity: 1,
              marginTop: "0px"
            }, {
              opacity: 0,
              marginTop: marginOffset2
            }];
          }
          var marginOffset = "-".concat(offsetHeight, "px");
          return [{
            opacity: 1,
            marginTop: "0px"
          }, {
            opacity: 0,
            marginTop: marginOffset
          }];
        }
        function ownKeys$1L(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1K(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1L(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1L(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _Message = vue.defineComponent({
          name: "TMessage",
          props: _objectSpread$1K(_objectSpread$1K({}, props$Z), {}, {
            placement: String
          }),
          setup: function setup(props2, _ref) {
            var slots = _ref.slots, expose = _ref.expose;
            var COMPONENT_NAME2 = usePrefixClass("message");
            var classPrefix2 = usePrefixClass();
            var renderTNode = useTNodeJSX();
            var renderContent2 = useContent();
            var msgRef = vue.ref(null);
            var timer = vue.ref(null);
            var classes = vue.computed(function() {
              var status = {};
              THEME_LIST.forEach(function(t) {
                return status["".concat(classPrefix2.value, "-is-").concat(t)] = props2.theme === t;
              });
              return [COMPONENT_NAME2.value, status, _defineProperty$3({}, "".concat(classPrefix2.value, "-is-closable"), props2.closeBtn || slots.closeBtn)];
            });
            var close$1 = function close2(e) {
              var _props2$onCloseBtnCli;
              (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 ? void 0 : _props2$onCloseBtnCli.call(props2, {
                e
              });
            };
            var clearTimer = function clearTimer2() {
              props2.duration && clearTimeout(timer.value);
            };
            var setTimer = function setTimer2() {
              if (!props2.duration) {
                return;
              }
              timer.value = Number(setTimeout(function() {
                clearTimer();
                var msgDom = msgRef.value;
                fadeOut$1(msgDom, props2.placement, function() {
                  var _props2$onDurationEnd;
                  (_props2$onDurationEnd = props2.onDurationEnd) === null || _props2$onDurationEnd === void 0 ? void 0 : _props2$onDurationEnd.call(props2);
                });
              }, props2.duration));
            };
            var renderClose = function renderClose2() {
              var defaultClose = vue.createVNode(close, null, null);
              return vue.createVNode("span", {
                "class": "".concat(COMPONENT_NAME2.value, "__close"),
                "onClick": close$1
              }, [renderTNode("closeBtn", defaultClose)]);
            };
            var renderIcon = function renderIcon2() {
              if (props2.icon === false)
                return;
              if (typeof props2.icon === "function")
                return props2.icon(vue.h);
              if (slots.icon) {
                return slots.icon(null);
              }
              var Icon2 = {
                info: infoCircleFilled,
                success: checkCircleFilled,
                warning: errorCircleFilled,
                error: errorCircleFilled,
                question: helpCircleFilled,
                loading: Loading
              }[props2.theme];
              return vue.createVNode(Icon2, null, null);
            };
            vue.onBeforeMount(function() {
              props2.duration && setTimer();
            });
            vue.onMounted(function() {
              var msgDom = msgRef.value;
              fadeIn$1(msgDom, props2.placement);
            });
            expose({
              close: close$1
            });
            return function() {
              return vue.createVNode("div", {
                "ref": msgRef,
                "class": classes.value,
                "onMouseenter": clearTimer,
                "onMouseleave": setTimer
              }, [renderIcon(), renderContent2("content", "default"), renderClose()]);
            };
          }
        });
        function ownKeys$1K(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1J(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1K(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1K(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var DEFAULT_Z_INDEX$1 = 6e3;
        var getUniqueId = function() {
          var id2 = 0;
          return function() {
            id2 += 1;
            return id2;
          };
        }();
        var MessageList = vue.defineComponent({
          name: "TMessageList",
          props: {
            zIndex: {
              type: Number,
              "default": 0
            },
            placement: {
              type: String,
              "default": ""
            }
          },
          setup: function setup(props2, _ref) {
            var expose = _ref.expose;
            var list = vue.ref([]);
            var messageList = vue.ref([]);
            var styles = vue.computed(function() {
              return _objectSpread$1J(_objectSpread$1J({}, PLACEMENT_OFFSET$1[props2.placement]), {}, {
                zIndex: props2.zIndex !== DEFAULT_Z_INDEX$1 ? props2.zIndex : DEFAULT_Z_INDEX$1
              });
            });
            var add2 = function add3(msg) {
              var mg = _objectSpread$1J(_objectSpread$1J({}, msg), {}, {
                key: getUniqueId()
              });
              list.value.push(mg);
              return list.value.length - 1;
            };
            var remove2 = function remove3(index2) {
              list.value.splice(index2, 1);
            };
            var removeAll = function removeAll2() {
              list.value = [];
            };
            var getOffset = function getOffset2(val) {
              if (!val)
                return;
              return isNaN(Number(val)) ? val : "".concat(val, "px");
            };
            var msgStyles = function msgStyles2(item) {
              return item.offset && {
                position: "relative",
                left: getOffset(item.offset[0]),
                top: getOffset(item.offset[1])
              };
            };
            var getProps = function getProps2(index2, item) {
              return _objectSpread$1J(_objectSpread$1J({}, item), {}, {
                onCloseBtnClick: function onCloseBtnClick(e) {
                  if (item.onCloseBtnClick) {
                    item.onCloseBtnClick(e);
                  }
                  return remove2(index2);
                },
                onDurationEnd: function onDurationEnd() {
                  if (item.onDurationEnd) {
                    item.onDurationEnd();
                  }
                  return remove2(index2);
                }
              });
            };
            var addChild = function addChild2(el) {
              if (el) {
                messageList.value.push(el);
              }
            };
            expose({
              add: add2,
              removeAll,
              list,
              messageList
            });
            return function() {
              if (!list.value.length)
                return;
              return vue.createVNode("div", {
                "class": "t-message__list",
                "style": styles.value
              }, [list.value.map(function(item, index2) {
                return vue.createVNode(_Message, vue.mergeProps({
                  "key": item.key,
                  "style": msgStyles(item),
                  "ref": addChild
                }, getProps(index2, item)), null);
              })]);
            };
          }
        });
        function ownKeys$1J(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1I(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1J(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1J(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var instanceMap$1 = /* @__PURE__ */ new Map();
        function handleParams(params) {
          var options = _objectSpread$1I({
            duration: 3e3,
            attach: "body",
            zIndex: DEFAULT_Z_INDEX$1,
            placement: "top"
          }, params);
          options.content = params.content;
          return options;
        }
        var MessageFunction = function MessageFunction2(props2) {
          var options = handleParams(props2);
          var attach = options.attach, placement = options.placement;
          var attachDom = getAttach(attach);
          if (!instanceMap$1.get(attachDom)) {
            instanceMap$1.set(attachDom, {});
          }
          var p = instanceMap$1.get(attachDom)[placement];
          if (!p) {
            var wrapper = document.createElement("div");
            var instance = vue.createApp(MessageList, {
              zIndex: options.zIndex,
              placement: options.placement
            }).mount(wrapper);
            instance.add(options);
            instanceMap$1.get(attachDom)[placement] = instance;
            attachDom.appendChild(wrapper);
          } else {
            p.add(options);
          }
          return new Promise(function(resolve) {
            var ins = instanceMap$1.get(attachDom)[placement];
            vue.nextTick(function() {
              var msg = ins.messageList;
              resolve(msg[msg.length - 1]);
            });
          });
        };
        var showThemeMessage = function showThemeMessage2(theme, params, duration) {
          var options = {
            theme
          };
          if (typeof params === "string") {
            options.content = params;
          } else if (_typeof$2(params) === "object" && !(params instanceof Array)) {
            options = _objectSpread$1I(_objectSpread$1I({}, options), params);
          }
          (duration || duration === 0) && (options.duration = duration);
          return MessageFunction(options);
        };
        var extraApi$2 = {
          info: function info(params, duration) {
            return showThemeMessage("info", params, duration);
          },
          success: function success(params, duration) {
            return showThemeMessage("success", params, duration);
          },
          warning: function warning(params, duration) {
            return showThemeMessage("warning", params, duration);
          },
          error: function error2(params, duration) {
            return showThemeMessage("error", params, duration);
          },
          question: function question(params, duration) {
            return showThemeMessage("question", params, duration);
          },
          loading: function loading(params, duration) {
            return showThemeMessage("loading", params, duration);
          },
          close: function close2(promise) {
            promise.then(function(instance) {
              return instance.close();
            });
          },
          closeAll: function closeAll() {
            if (instanceMap$1 instanceof Map) {
              instanceMap$1.forEach(function(attach) {
                Object.keys(attach).forEach(function(placement) {
                  var instance = attach[placement];
                  instance.list = [];
                });
              });
            }
          }
        };
        var MessagePlugin = showThemeMessage;
        MessagePlugin.install = function(app2) {
          app2.config.globalProperties.$message = showThemeMessage;
          Object.keys(extraApi$2).forEach(function(funcName) {
            app2.config.globalProperties.$message[funcName] = extraApi$2[funcName];
          });
        };
        Object.keys(extraApi$2).forEach(function(funcName) {
          MessagePlugin[funcName] = extraApi$2[funcName];
        });
        var props$Y = {
          id: {
            type: String,
            "default": "",
            required: true
          },
          tag: {
            type: String,
            "default": "div"
          }
        };
        var _AnchorTarget = vue.defineComponent({
          name: "TAnchorTarget",
          props: props$Y,
          setup: function setup(props2, _ref) {
            var slots = _ref.slots;
            var _useConfig = useConfig("anchor"), global2 = _useConfig.global, classPrefix2 = _useConfig.classPrefix;
            var COMPONENT_NAME2 = usePrefixClass("anchor");
            var toCopyText = function toCopyText2() {
              var a = document.createElement("a");
              a.href = "#".concat(props2.id);
              copyText(a.href);
              MessagePlugin.success(global2.value.copySuccessText, 1e3);
            };
            return function() {
              var children = slots["default"];
              var TAG = props2.tag, id2 = props2.id;
              var className = ["".concat(COMPONENT_NAME2.value, "__target")];
              var iconClassName = "".concat(classPrefix2.value, "-copy");
              return vue.createVNode(TAG, {
                "id": id2,
                "class": className
              }, {
                "default": function _default() {
                  return [children && children(null), vue.createVNode(vue.resolveComponent("t-popup"), {
                    "content": global2.value.copyText,
                    "placement": "top",
                    "showArrow": true,
                    "class": iconClassName
                  }, {
                    "default": function _default2() {
                      return [vue.createVNode(fileCopy, {
                        "onClick": toCopyText
                      }, null)];
                    }
                  })];
                }
              });
            };
          }
        });
        var Anchor = withInstall(_Anchor);
        var AnchorItem = withInstall(_AnchorItem);
        var AnchorTarget = withInstall(_AnchorTarget);
        var props$X = {
          maxItemWidth: {
            type: String,
            "default": void 0
          },
          options: {
            type: Array
          },
          separator: {
            type: [String, Function]
          },
          theme: {
            type: String,
            "default": "light",
            validator: function validator(val) {
              return ["light"].includes(val);
            }
          }
        };
        var props$W = {
          content: {
            type: [String, Number, Function]
          },
          "default": {
            type: [String, Number, Function]
          },
          disabled: Boolean,
          href: {
            type: String,
            "default": ""
          },
          maxWidth: {
            type: String,
            "default": void 0
          },
          replace: Boolean,
          router: {
            type: Object
          },
          target: {
            type: String,
            "default": "_self",
            validator: function validator(val) {
              return ["_blank", "_self", "_parent", "_top"].includes(val);
            }
          },
          to: {
            type: [String, Object]
          }
        };
        var props$V = {
          delay: {
            type: Number
          },
          destroyOnClose: {
            type: Boolean,
            "default": true
          },
          duration: {
            type: Number
          },
          placement: {
            type: String,
            "default": "top"
          },
          showArrow: {
            type: Boolean,
            "default": true
          },
          theme: {
            type: String,
            "default": "default",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["default", "primary", "success", "danger", "warning", "light"].includes(val);
            }
          }
        };
        var popupProps = {
          attach: {
            type: [String, Function],
            "default": "body"
          },
          content: {
            type: [String, Function]
          },
          "default": {
            type: [String, Function]
          },
          destroyOnClose: Boolean,
          disabled: Boolean,
          hideEmptyPopup: Boolean,
          overlayClassName: {
            type: [String, Object, Array]
          },
          overlayStyle: {
            type: [Boolean, Object, Function]
          },
          placement: {
            type: String,
            "default": "top"
          },
          showArrow: Boolean,
          trigger: {
            type: String,
            "default": "hover",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["hover", "click", "focus", "context-menu"].includes(val);
            }
          },
          triggerElement: {
            type: [String, Function]
          },
          visible: {
            type: Boolean,
            "default": void 0
          },
          modelValue: {
            type: Boolean,
            "default": void 0
          },
          defaultVisible: Boolean,
          zIndex: {
            type: Number
          },
          onScroll: Function,
          onVisibleChange: Function
        };
        var top = "top";
        var bottom = "bottom";
        var right = "right";
        var left = "left";
        var auto = "auto";
        var basePlacements = [top, bottom, right, left];
        var start = "start";
        var end = "end";
        var clippingParents = "clippingParents";
        var viewport = "viewport";
        var popper = "popper";
        var reference = "reference";
        var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
          return acc.concat([placement + "-" + start, placement + "-" + end]);
        }, []);
        var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
          return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
        }, []);
        var beforeRead = "beforeRead";
        var read = "read";
        var afterRead = "afterRead";
        var beforeMain = "beforeMain";
        var main = "main";
        var afterMain = "afterMain";
        var beforeWrite = "beforeWrite";
        var write = "write";
        var afterWrite = "afterWrite";
        var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
        function getNodeName(element2) {
          return element2 ? (element2.nodeName || "").toLowerCase() : null;
        }
        function getWindow(node) {
          if (node == null) {
            return window;
          }
          if (node.toString() !== "[object Window]") {
            var ownerDocument = node.ownerDocument;
            return ownerDocument ? ownerDocument.defaultView || window : window;
          }
          return node;
        }
        function isElement(node) {
          var OwnElement = getWindow(node).Element;
          return node instanceof OwnElement || node instanceof Element;
        }
        function isHTMLElement(node) {
          var OwnElement = getWindow(node).HTMLElement;
          return node instanceof OwnElement || node instanceof HTMLElement;
        }
        function isShadowRoot(node) {
          if (typeof ShadowRoot === "undefined") {
            return false;
          }
          var OwnElement = getWindow(node).ShadowRoot;
          return node instanceof OwnElement || node instanceof ShadowRoot;
        }
        function applyStyles(_ref) {
          var state = _ref.state;
          Object.keys(state.elements).forEach(function(name) {
            var style = state.styles[name] || {};
            var attributes = state.attributes[name] || {};
            var element2 = state.elements[name];
            if (!isHTMLElement(element2) || !getNodeName(element2)) {
              return;
            }
            Object.assign(element2.style, style);
            Object.keys(attributes).forEach(function(name2) {
              var value = attributes[name2];
              if (value === false) {
                element2.removeAttribute(name2);
              } else {
                element2.setAttribute(name2, value === true ? "" : value);
              }
            });
          });
        }
        function effect$2(_ref2) {
          var state = _ref2.state;
          var initialStyles = {
            popper: {
              position: state.options.strategy,
              left: "0",
              top: "0",
              margin: "0"
            },
            arrow: {
              position: "absolute"
            },
            reference: {}
          };
          Object.assign(state.elements.popper.style, initialStyles.popper);
          state.styles = initialStyles;
          if (state.elements.arrow) {
            Object.assign(state.elements.arrow.style, initialStyles.arrow);
          }
          return function() {
            Object.keys(state.elements).forEach(function(name) {
              var element2 = state.elements[name];
              var attributes = state.attributes[name] || {};
              var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
              var style = styleProperties.reduce(function(style2, property2) {
                style2[property2] = "";
                return style2;
              }, {});
              if (!isHTMLElement(element2) || !getNodeName(element2)) {
                return;
              }
              Object.assign(element2.style, style);
              Object.keys(attributes).forEach(function(attribute) {
                element2.removeAttribute(attribute);
              });
            });
          };
        }
        var applyStyles$1 = {
          name: "applyStyles",
          enabled: true,
          phase: "write",
          fn: applyStyles,
          effect: effect$2,
          requires: ["computeStyles"]
        };
        function getBasePlacement(placement) {
          return placement.split("-")[0];
        }
        var max = Math.max;
        var min$1 = Math.min;
        var round = Math.round;
        function getBoundingClientRect(element2, includeScale) {
          if (includeScale === void 0) {
            includeScale = false;
          }
          var rect = element2.getBoundingClientRect();
          var scaleX = 1;
          var scaleY = 1;
          if (isHTMLElement(element2) && includeScale) {
            var offsetHeight = element2.offsetHeight;
            var offsetWidth = element2.offsetWidth;
            if (offsetWidth > 0) {
              scaleX = round(rect.width) / offsetWidth || 1;
            }
            if (offsetHeight > 0) {
              scaleY = round(rect.height) / offsetHeight || 1;
            }
          }
          return {
            width: rect.width / scaleX,
            height: rect.height / scaleY,
            top: rect.top / scaleY,
            right: rect.right / scaleX,
            bottom: rect.bottom / scaleY,
            left: rect.left / scaleX,
            x: rect.left / scaleX,
            y: rect.top / scaleY
          };
        }
        function getLayoutRect(element2) {
          var clientRect = getBoundingClientRect(element2);
          var width = element2.offsetWidth;
          var height = element2.offsetHeight;
          if (Math.abs(clientRect.width - width) <= 1) {
            width = clientRect.width;
          }
          if (Math.abs(clientRect.height - height) <= 1) {
            height = clientRect.height;
          }
          return {
            x: element2.offsetLeft,
            y: element2.offsetTop,
            width,
            height
          };
        }
        function contains(parent2, child) {
          var rootNode = child.getRootNode && child.getRootNode();
          if (parent2.contains(child)) {
            return true;
          } else if (rootNode && isShadowRoot(rootNode)) {
            var next = child;
            do {
              if (next && parent2.isSameNode(next)) {
                return true;
              }
              next = next.parentNode || next.host;
            } while (next);
          }
          return false;
        }
        function getComputedStyle$1(element2) {
          return getWindow(element2).getComputedStyle(element2);
        }
        function isTableElement(element2) {
          return ["table", "td", "th"].indexOf(getNodeName(element2)) >= 0;
        }
        function getDocumentElement(element2) {
          return ((isElement(element2) ? element2.ownerDocument : element2.document) || window.document).documentElement;
        }
        function getParentNode(element2) {
          if (getNodeName(element2) === "html") {
            return element2;
          }
          return element2.assignedSlot || element2.parentNode || (isShadowRoot(element2) ? element2.host : null) || getDocumentElement(element2);
        }
        function getTrueOffsetParent(element2) {
          if (!isHTMLElement(element2) || getComputedStyle$1(element2).position === "fixed") {
            return null;
          }
          return element2.offsetParent;
        }
        function getContainingBlock(element2) {
          var isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
          var isIE = navigator.userAgent.indexOf("Trident") !== -1;
          if (isIE && isHTMLElement(element2)) {
            var elementCss = getComputedStyle$1(element2);
            if (elementCss.position === "fixed") {
              return null;
            }
          }
          var currentNode = getParentNode(element2);
          if (isShadowRoot(currentNode)) {
            currentNode = currentNode.host;
          }
          while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
            var css2 = getComputedStyle$1(currentNode);
            if (css2.transform !== "none" || css2.perspective !== "none" || css2.contain === "paint" || ["transform", "perspective"].indexOf(css2.willChange) !== -1 || isFirefox && css2.willChange === "filter" || isFirefox && css2.filter && css2.filter !== "none") {
              return currentNode;
            } else {
              currentNode = currentNode.parentNode;
            }
          }
          return null;
        }
        function getOffsetParent(element2) {
          var window2 = getWindow(element2);
          var offsetParent = getTrueOffsetParent(element2);
          while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === "static") {
            offsetParent = getTrueOffsetParent(offsetParent);
          }
          if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle$1(offsetParent).position === "static")) {
            return window2;
          }
          return offsetParent || getContainingBlock(element2) || window2;
        }
        function getMainAxisFromPlacement(placement) {
          return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
        }
        function within(min2, value, max$1) {
          return max(min2, min$1(value, max$1));
        }
        function withinMaxClamp(min2, value, max2) {
          var v = within(min2, value, max2);
          return v > max2 ? max2 : v;
        }
        function getFreshSideObject() {
          return {
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
          };
        }
        function mergePaddingObject(paddingObject) {
          return Object.assign({}, getFreshSideObject(), paddingObject);
        }
        function expandToHashMap(value, keys2) {
          return keys2.reduce(function(hashMap, key) {
            hashMap[key] = value;
            return hashMap;
          }, {});
        }
        var toPaddingObject = function toPaddingObject2(padding, state) {
          padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
            placement: state.placement
          })) : padding;
          return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
        };
        function arrow(_ref) {
          var _state$modifiersData$;
          var state = _ref.state, name = _ref.name, options = _ref.options;
          var arrowElement = state.elements.arrow;
          var popperOffsets2 = state.modifiersData.popperOffsets;
          var basePlacement = getBasePlacement(state.placement);
          var axis = getMainAxisFromPlacement(basePlacement);
          var isVertical = [left, right].indexOf(basePlacement) >= 0;
          var len = isVertical ? "height" : "width";
          if (!arrowElement || !popperOffsets2) {
            return;
          }
          var paddingObject = toPaddingObject(options.padding, state);
          var arrowRect = getLayoutRect(arrowElement);
          var minProp = axis === "y" ? top : left;
          var maxProp = axis === "y" ? bottom : right;
          var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
          var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
          var arrowOffsetParent = getOffsetParent(arrowElement);
          var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
          var centerToReference = endDiff / 2 - startDiff / 2;
          var min2 = paddingObject[minProp];
          var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
          var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
          var offset2 = within(min2, center, max2);
          var axisProp = axis;
          state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
        }
        function effect$1(_ref2) {
          var state = _ref2.state, options = _ref2.options;
          var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
          if (arrowElement == null) {
            return;
          }
          if (typeof arrowElement === "string") {
            arrowElement = state.elements.popper.querySelector(arrowElement);
            if (!arrowElement) {
              return;
            }
          }
          {
            if (!isHTMLElement(arrowElement)) {
              console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
            }
          }
          if (!contains(state.elements.popper, arrowElement)) {
            {
              console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
            }
            return;
          }
          state.elements.arrow = arrowElement;
        }
        var arrow$1 = {
          name: "arrow",
          enabled: true,
          phase: "main",
          fn: arrow,
          effect: effect$1,
          requires: ["popperOffsets"],
          requiresIfExists: ["preventOverflow"]
        };
        function getVariation(placement) {
          return placement.split("-")[1];
        }
        var unsetSides = {
          top: "auto",
          right: "auto",
          bottom: "auto",
          left: "auto"
        };
        function roundOffsetsByDPR(_ref) {
          var x = _ref.x, y = _ref.y;
          var win = window;
          var dpr = win.devicePixelRatio || 1;
          return {
            x: round(x * dpr) / dpr || 0,
            y: round(y * dpr) / dpr || 0
          };
        }
        function mapToStyles(_ref2) {
          var _Object$assign2;
          var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
          var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
          var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
            x,
            y
          }) : {
            x,
            y
          };
          x = _ref3.x;
          y = _ref3.y;
          var hasX = offsets.hasOwnProperty("x");
          var hasY = offsets.hasOwnProperty("y");
          var sideX = left;
          var sideY = top;
          var win = window;
          if (adaptive) {
            var offsetParent = getOffsetParent(popper2);
            var heightProp = "clientHeight";
            var widthProp = "clientWidth";
            if (offsetParent === getWindow(popper2)) {
              offsetParent = getDocumentElement(popper2);
              if (getComputedStyle$1(offsetParent).position !== "static" && position === "absolute") {
                heightProp = "scrollHeight";
                widthProp = "scrollWidth";
              }
            }
            offsetParent = offsetParent;
            if (placement === top || (placement === left || placement === right) && variation === end) {
              sideY = bottom;
              var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
              y -= offsetY - popperRect.height;
              y *= gpuAcceleration ? 1 : -1;
            }
            if (placement === left || (placement === top || placement === bottom) && variation === end) {
              sideX = right;
              var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
              x -= offsetX - popperRect.width;
              x *= gpuAcceleration ? 1 : -1;
            }
          }
          var commonStyles = Object.assign({
            position
          }, adaptive && unsetSides);
          var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
            x,
            y
          }) : {
            x,
            y
          };
          x = _ref4.x;
          y = _ref4.y;
          if (gpuAcceleration) {
            var _Object$assign;
            return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
          }
          return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
        }
        function computeStyles(_ref5) {
          var state = _ref5.state, options = _ref5.options;
          var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
          {
            var transitionProperty = getComputedStyle$1(state.elements.popper).transitionProperty || "";
            if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property2) {
              return transitionProperty.indexOf(property2) >= 0;
            })) {
              console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
            }
          }
          var commonStyles = {
            placement: getBasePlacement(state.placement),
            variation: getVariation(state.placement),
            popper: state.elements.popper,
            popperRect: state.rects.popper,
            gpuAcceleration,
            isFixed: state.options.strategy === "fixed"
          };
          if (state.modifiersData.popperOffsets != null) {
            state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
              offsets: state.modifiersData.popperOffsets,
              position: state.options.strategy,
              adaptive,
              roundOffsets
            })));
          }
          if (state.modifiersData.arrow != null) {
            state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
              offsets: state.modifiersData.arrow,
              position: "absolute",
              adaptive: false,
              roundOffsets
            })));
          }
          state.attributes.popper = Object.assign({}, state.attributes.popper, {
            "data-popper-placement": state.placement
          });
        }
        var computeStyles$1 = {
          name: "computeStyles",
          enabled: true,
          phase: "beforeWrite",
          fn: computeStyles,
          data: {}
        };
        var passive = {
          passive: true
        };
        function effect(_ref) {
          var state = _ref.state, instance = _ref.instance, options = _ref.options;
          var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
          var window2 = getWindow(state.elements.popper);
          var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
          if (scroll) {
            scrollParents.forEach(function(scrollParent) {
              scrollParent.addEventListener("scroll", instance.update, passive);
            });
          }
          if (resize) {
            window2.addEventListener("resize", instance.update, passive);
          }
          return function() {
            if (scroll) {
              scrollParents.forEach(function(scrollParent) {
                scrollParent.removeEventListener("scroll", instance.update, passive);
              });
            }
            if (resize) {
              window2.removeEventListener("resize", instance.update, passive);
            }
          };
        }
        var eventListeners = {
          name: "eventListeners",
          enabled: true,
          phase: "write",
          fn: function fn() {
          },
          effect,
          data: {}
        };
        var hash$1 = {
          left: "right",
          right: "left",
          bottom: "top",
          top: "bottom"
        };
        function getOppositePlacement(placement) {
          return placement.replace(/left|right|bottom|top/g, function(matched) {
            return hash$1[matched];
          });
        }
        var hash = {
          start: "end",
          end: "start"
        };
        function getOppositeVariationPlacement(placement) {
          return placement.replace(/start|end/g, function(matched) {
            return hash[matched];
          });
        }
        function getWindowScroll(node) {
          var win = getWindow(node);
          var scrollLeft = win.pageXOffset;
          var scrollTop = win.pageYOffset;
          return {
            scrollLeft,
            scrollTop
          };
        }
        function getWindowScrollBarX(element2) {
          return getBoundingClientRect(getDocumentElement(element2)).left + getWindowScroll(element2).scrollLeft;
        }
        function getViewportRect(element2) {
          var win = getWindow(element2);
          var html = getDocumentElement(element2);
          var visualViewport = win.visualViewport;
          var width = html.clientWidth;
          var height = html.clientHeight;
          var x = 0;
          var y = 0;
          if (visualViewport) {
            width = visualViewport.width;
            height = visualViewport.height;
            if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
              x = visualViewport.offsetLeft;
              y = visualViewport.offsetTop;
            }
          }
          return {
            width,
            height,
            x: x + getWindowScrollBarX(element2),
            y
          };
        }
        function getDocumentRect(element2) {
          var _element$ownerDocumen;
          var html = getDocumentElement(element2);
          var winScroll = getWindowScroll(element2);
          var body = (_element$ownerDocumen = element2.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
          var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
          var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
          var x = -winScroll.scrollLeft + getWindowScrollBarX(element2);
          var y = -winScroll.scrollTop;
          if (getComputedStyle$1(body || html).direction === "rtl") {
            x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
          }
          return {
            width,
            height,
            x,
            y
          };
        }
        function isScrollParent(element2) {
          var _getComputedStyle = getComputedStyle$1(element2), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
          return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
        }
        function getScrollParent(node) {
          if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
            return node.ownerDocument.body;
          }
          if (isHTMLElement(node) && isScrollParent(node)) {
            return node;
          }
          return getScrollParent(getParentNode(node));
        }
        function listScrollParents(element2, list) {
          var _element$ownerDocumen;
          if (list === void 0) {
            list = [];
          }
          var scrollParent = getScrollParent(element2);
          var isBody = scrollParent === ((_element$ownerDocumen = element2.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
          var win = getWindow(scrollParent);
          var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
          var updatedList = list.concat(target);
          return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
        }
        function rectToClientRect(rect) {
          return Object.assign({}, rect, {
            left: rect.x,
            top: rect.y,
            right: rect.x + rect.width,
            bottom: rect.y + rect.height
          });
        }
        function getInnerBoundingClientRect(element2) {
          var rect = getBoundingClientRect(element2);
          rect.top = rect.top + element2.clientTop;
          rect.left = rect.left + element2.clientLeft;
          rect.bottom = rect.top + element2.clientHeight;
          rect.right = rect.left + element2.clientWidth;
          rect.width = element2.clientWidth;
          rect.height = element2.clientHeight;
          rect.x = rect.left;
          rect.y = rect.top;
          return rect;
        }
        function getClientRectFromMixedType(element2, clippingParent) {
          return clippingParent === viewport ? rectToClientRect(getViewportRect(element2)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element2)));
        }
        function getClippingParents(element2) {
          var clippingParents2 = listScrollParents(getParentNode(element2));
          var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle$1(element2).position) >= 0;
          var clipperElement = canEscapeClipping && isHTMLElement(element2) ? getOffsetParent(element2) : element2;
          if (!isElement(clipperElement)) {
            return [];
          }
          return clippingParents2.filter(function(clippingParent) {
            return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
          });
        }
        function getClippingRect(element2, boundary, rootBoundary) {
          var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element2) : [].concat(boundary);
          var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
          var firstClippingParent = clippingParents2[0];
          var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
            var rect = getClientRectFromMixedType(element2, clippingParent);
            accRect.top = max(rect.top, accRect.top);
            accRect.right = min$1(rect.right, accRect.right);
            accRect.bottom = min$1(rect.bottom, accRect.bottom);
            accRect.left = max(rect.left, accRect.left);
            return accRect;
          }, getClientRectFromMixedType(element2, firstClippingParent));
          clippingRect.width = clippingRect.right - clippingRect.left;
          clippingRect.height = clippingRect.bottom - clippingRect.top;
          clippingRect.x = clippingRect.left;
          clippingRect.y = clippingRect.top;
          return clippingRect;
        }
        function computeOffsets(_ref) {
          var reference2 = _ref.reference, element2 = _ref.element, placement = _ref.placement;
          var basePlacement = placement ? getBasePlacement(placement) : null;
          var variation = placement ? getVariation(placement) : null;
          var commonX = reference2.x + reference2.width / 2 - element2.width / 2;
          var commonY = reference2.y + reference2.height / 2 - element2.height / 2;
          var offsets;
          switch (basePlacement) {
            case top:
              offsets = {
                x: commonX,
                y: reference2.y - element2.height
              };
              break;
            case bottom:
              offsets = {
                x: commonX,
                y: reference2.y + reference2.height
              };
              break;
            case right:
              offsets = {
                x: reference2.x + reference2.width,
                y: commonY
              };
              break;
            case left:
              offsets = {
                x: reference2.x - element2.width,
                y: commonY
              };
              break;
            default:
              offsets = {
                x: reference2.x,
                y: reference2.y
              };
          }
          var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
          if (mainAxis != null) {
            var len = mainAxis === "y" ? "height" : "width";
            switch (variation) {
              case start:
                offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element2[len] / 2);
                break;
              case end:
                offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element2[len] / 2);
                break;
            }
          }
          return offsets;
        }
        function detectOverflow(state, options) {
          if (options === void 0) {
            options = {};
          }
          var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
          var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
          var altContext = elementContext === popper ? reference : popper;
          var popperRect = state.rects.popper;
          var element2 = state.elements[altBoundary ? altContext : elementContext];
          var clippingClientRect = getClippingRect(isElement(element2) ? element2 : element2.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
          var referenceClientRect = getBoundingClientRect(state.elements.reference);
          var popperOffsets2 = computeOffsets({
            reference: referenceClientRect,
            element: popperRect,
            strategy: "absolute",
            placement
          });
          var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
          var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
          var overflowOffsets = {
            top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
            bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
            left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
            right: elementClientRect.right - clippingClientRect.right + paddingObject.right
          };
          var offsetData = state.modifiersData.offset;
          if (elementContext === popper && offsetData) {
            var offset2 = offsetData[placement];
            Object.keys(overflowOffsets).forEach(function(key) {
              var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
              var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
              overflowOffsets[key] += offset2[axis] * multiply;
            });
          }
          return overflowOffsets;
        }
        function computeAutoPlacement(state, options) {
          if (options === void 0) {
            options = {};
          }
          var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
          var variation = getVariation(placement);
          var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
            return getVariation(placement2) === variation;
          }) : basePlacements;
          var allowedPlacements = placements$1.filter(function(placement2) {
            return allowedAutoPlacements.indexOf(placement2) >= 0;
          });
          if (allowedPlacements.length === 0) {
            allowedPlacements = placements$1;
            {
              console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
            }
          }
          var overflows = allowedPlacements.reduce(function(acc, placement2) {
            acc[placement2] = detectOverflow(state, {
              placement: placement2,
              boundary,
              rootBoundary,
              padding
            })[getBasePlacement(placement2)];
            return acc;
          }, {});
          return Object.keys(overflows).sort(function(a, b2) {
            return overflows[a] - overflows[b2];
          });
        }
        function getExpandedFallbackPlacements(placement) {
          if (getBasePlacement(placement) === auto) {
            return [];
          }
          var oppositePlacement = getOppositePlacement(placement);
          return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
        }
        function flip(_ref) {
          var state = _ref.state, options = _ref.options, name = _ref.name;
          if (state.modifiersData[name]._skip) {
            return;
          }
          var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
          var preferredPlacement = state.options.placement;
          var basePlacement = getBasePlacement(preferredPlacement);
          var isBasePlacement = basePlacement === preferredPlacement;
          var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
          var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
            return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
              placement: placement2,
              boundary,
              rootBoundary,
              padding,
              flipVariations,
              allowedAutoPlacements
            }) : placement2);
          }, []);
          var referenceRect = state.rects.reference;
          var popperRect = state.rects.popper;
          var checksMap = /* @__PURE__ */ new Map();
          var makeFallbackChecks = true;
          var firstFittingPlacement = placements2[0];
          for (var i2 = 0; i2 < placements2.length; i2++) {
            var placement = placements2[i2];
            var _basePlacement = getBasePlacement(placement);
            var isStartVariation = getVariation(placement) === start;
            var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
            var len = isVertical ? "width" : "height";
            var overflow = detectOverflow(state, {
              placement,
              boundary,
              rootBoundary,
              altBoundary,
              padding
            });
            var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
            if (referenceRect[len] > popperRect[len]) {
              mainVariationSide = getOppositePlacement(mainVariationSide);
            }
            var altVariationSide = getOppositePlacement(mainVariationSide);
            var checks = [];
            if (checkMainAxis) {
              checks.push(overflow[_basePlacement] <= 0);
            }
            if (checkAltAxis) {
              checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
            }
            if (checks.every(function(check2) {
              return check2;
            })) {
              firstFittingPlacement = placement;
              makeFallbackChecks = false;
              break;
            }
            checksMap.set(placement, checks);
          }
          if (makeFallbackChecks) {
            var numberOfChecks = flipVariations ? 3 : 1;
            var _loop = function _loop2(_i2) {
              var fittingPlacement = placements2.find(function(placement2) {
                var checks2 = checksMap.get(placement2);
                if (checks2) {
                  return checks2.slice(0, _i2).every(function(check2) {
                    return check2;
                  });
                }
              });
              if (fittingPlacement) {
                firstFittingPlacement = fittingPlacement;
                return "break";
              }
            };
            for (var _i = numberOfChecks; _i > 0; _i--) {
              var _ret = _loop(_i);
              if (_ret === "break")
                break;
            }
          }
          if (state.placement !== firstFittingPlacement) {
            state.modifiersData[name]._skip = true;
            state.placement = firstFittingPlacement;
            state.reset = true;
          }
        }
        var flip$1 = {
          name: "flip",
          enabled: true,
          phase: "main",
          fn: flip,
          requiresIfExists: ["offset"],
          data: {
            _skip: false
          }
        };
        function getSideOffsets(overflow, rect, preventedOffsets) {
          if (preventedOffsets === void 0) {
            preventedOffsets = {
              x: 0,
              y: 0
            };
          }
          return {
            top: overflow.top - rect.height - preventedOffsets.y,
            right: overflow.right - rect.width + preventedOffsets.x,
            bottom: overflow.bottom - rect.height + preventedOffsets.y,
            left: overflow.left - rect.width - preventedOffsets.x
          };
        }
        function isAnySideFullyClipped(overflow) {
          return [top, right, bottom, left].some(function(side) {
            return overflow[side] >= 0;
          });
        }
        function hide(_ref) {
          var state = _ref.state, name = _ref.name;
          var referenceRect = state.rects.reference;
          var popperRect = state.rects.popper;
          var preventedOffsets = state.modifiersData.preventOverflow;
          var referenceOverflow = detectOverflow(state, {
            elementContext: "reference"
          });
          var popperAltOverflow = detectOverflow(state, {
            altBoundary: true
          });
          var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
          var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
          var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
          var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
          state.modifiersData[name] = {
            referenceClippingOffsets,
            popperEscapeOffsets,
            isReferenceHidden,
            hasPopperEscaped
          };
          state.attributes.popper = Object.assign({}, state.attributes.popper, {
            "data-popper-reference-hidden": isReferenceHidden,
            "data-popper-escaped": hasPopperEscaped
          });
        }
        var hide$1 = {
          name: "hide",
          enabled: true,
          phase: "main",
          requiresIfExists: ["preventOverflow"],
          fn: hide
        };
        function distanceAndSkiddingToXY(placement, rects, offset2) {
          var basePlacement = getBasePlacement(placement);
          var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
          var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
            placement
          })) : offset2, skidding = _ref[0], distance = _ref[1];
          skidding = skidding || 0;
          distance = (distance || 0) * invertDistance;
          return [left, right].indexOf(basePlacement) >= 0 ? {
            x: distance,
            y: skidding
          } : {
            x: skidding,
            y: distance
          };
        }
        function offset(_ref2) {
          var state = _ref2.state, options = _ref2.options, name = _ref2.name;
          var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
          var data = placements.reduce(function(acc, placement) {
            acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
            return acc;
          }, {});
          var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
          if (state.modifiersData.popperOffsets != null) {
            state.modifiersData.popperOffsets.x += x;
            state.modifiersData.popperOffsets.y += y;
          }
          state.modifiersData[name] = data;
        }
        var offset$1 = {
          name: "offset",
          enabled: true,
          phase: "main",
          requires: ["popperOffsets"],
          fn: offset
        };
        function popperOffsets(_ref) {
          var state = _ref.state, name = _ref.name;
          state.modifiersData[name] = computeOffsets({
            reference: state.rects.reference,
            element: state.rects.popper,
            strategy: "absolute",
            placement: state.placement
          });
        }
        var popperOffsets$1 = {
          name: "popperOffsets",
          enabled: true,
          phase: "read",
          fn: popperOffsets,
          data: {}
        };
        function getAltAxis(axis) {
          return axis === "x" ? "y" : "x";
        }
        function preventOverflow(_ref) {
          var state = _ref.state, options = _ref.options, name = _ref.name;
          var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
          var overflow = detectOverflow(state, {
            boundary,
            rootBoundary,
            padding,
            altBoundary
          });
          var basePlacement = getBasePlacement(state.placement);
          var variation = getVariation(state.placement);
          var isBasePlacement = !variation;
          var mainAxis = getMainAxisFromPlacement(basePlacement);
          var altAxis = getAltAxis(mainAxis);
          var popperOffsets2 = state.modifiersData.popperOffsets;
          var referenceRect = state.rects.reference;
          var popperRect = state.rects.popper;
          var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
            placement: state.placement
          })) : tetherOffset;
          var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
            mainAxis: tetherOffsetValue,
            altAxis: tetherOffsetValue
          } : Object.assign({
            mainAxis: 0,
            altAxis: 0
          }, tetherOffsetValue);
          var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
          var data = {
            x: 0,
            y: 0
          };
          if (!popperOffsets2) {
            return;
          }
          if (checkMainAxis) {
            var _offsetModifierState$;
            var mainSide = mainAxis === "y" ? top : left;
            var altSide = mainAxis === "y" ? bottom : right;
            var len = mainAxis === "y" ? "height" : "width";
            var offset2 = popperOffsets2[mainAxis];
            var min2 = offset2 + overflow[mainSide];
            var max$1 = offset2 - overflow[altSide];
            var additive = tether ? -popperRect[len] / 2 : 0;
            var minLen = variation === start ? referenceRect[len] : popperRect[len];
            var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
            var arrowElement = state.elements.arrow;
            var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
              width: 0,
              height: 0
            };
            var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
            var arrowPaddingMin = arrowPaddingObject[mainSide];
            var arrowPaddingMax = arrowPaddingObject[altSide];
            var arrowLen = within(0, referenceRect[len], arrowRect[len]);
            var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
            var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
            var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
            var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
            var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
            var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
            var tetherMax = offset2 + maxOffset - offsetModifierValue;
            var preventedOffset = within(tether ? min$1(min2, tetherMin) : min2, offset2, tether ? max(max$1, tetherMax) : max$1);
            popperOffsets2[mainAxis] = preventedOffset;
            data[mainAxis] = preventedOffset - offset2;
          }
          if (checkAltAxis) {
            var _offsetModifierState$2;
            var _mainSide = mainAxis === "x" ? top : left;
            var _altSide = mainAxis === "x" ? bottom : right;
            var _offset = popperOffsets2[altAxis];
            var _len = altAxis === "y" ? "height" : "width";
            var _min = _offset + overflow[_mainSide];
            var _max = _offset - overflow[_altSide];
            var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
            var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
            var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
            var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
            var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
            popperOffsets2[altAxis] = _preventedOffset;
            data[altAxis] = _preventedOffset - _offset;
          }
          state.modifiersData[name] = data;
        }
        var preventOverflow$1 = {
          name: "preventOverflow",
          enabled: true,
          phase: "main",
          fn: preventOverflow,
          requiresIfExists: ["offset"]
        };
        function getHTMLElementScroll(element2) {
          return {
            scrollLeft: element2.scrollLeft,
            scrollTop: element2.scrollTop
          };
        }
        function getNodeScroll(node) {
          if (node === getWindow(node) || !isHTMLElement(node)) {
            return getWindowScroll(node);
          } else {
            return getHTMLElementScroll(node);
          }
        }
        function isElementScaled(element2) {
          var rect = element2.getBoundingClientRect();
          var scaleX = round(rect.width) / element2.offsetWidth || 1;
          var scaleY = round(rect.height) / element2.offsetHeight || 1;
          return scaleX !== 1 || scaleY !== 1;
        }
        function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
          if (isFixed === void 0) {
            isFixed = false;
          }
          var isOffsetParentAnElement = isHTMLElement(offsetParent);
          var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
          var documentElement = getDocumentElement(offsetParent);
          var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
          var scroll = {
            scrollLeft: 0,
            scrollTop: 0
          };
          var offsets = {
            x: 0,
            y: 0
          };
          if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
            if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
              scroll = getNodeScroll(offsetParent);
            }
            if (isHTMLElement(offsetParent)) {
              offsets = getBoundingClientRect(offsetParent, true);
              offsets.x += offsetParent.clientLeft;
              offsets.y += offsetParent.clientTop;
            } else if (documentElement) {
              offsets.x = getWindowScrollBarX(documentElement);
            }
          }
          return {
            x: rect.left + scroll.scrollLeft - offsets.x,
            y: rect.top + scroll.scrollTop - offsets.y,
            width: rect.width,
            height: rect.height
          };
        }
        function order(modifiers) {
          var map = /* @__PURE__ */ new Map();
          var visited = /* @__PURE__ */ new Set();
          var result = [];
          modifiers.forEach(function(modifier) {
            map.set(modifier.name, modifier);
          });
          function sort(modifier) {
            visited.add(modifier.name);
            var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
            requires.forEach(function(dep) {
              if (!visited.has(dep)) {
                var depModifier = map.get(dep);
                if (depModifier) {
                  sort(depModifier);
                }
              }
            });
            result.push(modifier);
          }
          modifiers.forEach(function(modifier) {
            if (!visited.has(modifier.name)) {
              sort(modifier);
            }
          });
          return result;
        }
        function orderModifiers(modifiers) {
          var orderedModifiers = order(modifiers);
          return modifierPhases.reduce(function(acc, phase) {
            return acc.concat(orderedModifiers.filter(function(modifier) {
              return modifier.phase === phase;
            }));
          }, []);
        }
        function debounce$2(fn) {
          var pending;
          return function() {
            if (!pending) {
              pending = new Promise(function(resolve) {
                Promise.resolve().then(function() {
                  pending = void 0;
                  resolve(fn());
                });
              });
            }
            return pending;
          };
        }
        function format(str) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          return [].concat(args).reduce(function(p, c) {
            return p.replace(/%s/, c);
          }, str);
        }
        var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
        var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
        var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
        function validateModifiers(modifiers) {
          modifiers.forEach(function(modifier) {
            [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index2, self2) {
              return self2.indexOf(value) === index2;
            }).forEach(function(key) {
              switch (key) {
                case "name":
                  if (typeof modifier.name !== "string") {
                    console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
                  }
                  break;
                case "enabled":
                  if (typeof modifier.enabled !== "boolean") {
                    console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
                  }
                  break;
                case "phase":
                  if (modifierPhases.indexOf(modifier.phase) < 0) {
                    console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
                  }
                  break;
                case "fn":
                  if (typeof modifier.fn !== "function") {
                    console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
                  }
                  break;
                case "effect":
                  if (modifier.effect != null && typeof modifier.effect !== "function") {
                    console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
                  }
                  break;
                case "requires":
                  if (modifier.requires != null && !Array.isArray(modifier.requires)) {
                    console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
                  }
                  break;
                case "requiresIfExists":
                  if (!Array.isArray(modifier.requiresIfExists)) {
                    console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
                  }
                  break;
                case "options":
                case "data":
                  break;
                default:
                  console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {
                    return '"' + s + '"';
                  }).join(", ") + '; but "' + key + '" was provided.');
              }
              modifier.requires && modifier.requires.forEach(function(requirement) {
                if (modifiers.find(function(mod) {
                  return mod.name === requirement;
                }) == null) {
                  console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
                }
              });
            });
          });
        }
        function uniqueBy(arr, fn) {
          var identifiers = /* @__PURE__ */ new Set();
          return arr.filter(function(item) {
            var identifier = fn(item);
            if (!identifiers.has(identifier)) {
              identifiers.add(identifier);
              return true;
            }
          });
        }
        function mergeByName(modifiers) {
          var merged = modifiers.reduce(function(merged2, current) {
            var existing = merged2[current.name];
            merged2[current.name] = existing ? Object.assign({}, existing, current, {
              options: Object.assign({}, existing.options, current.options),
              data: Object.assign({}, existing.data, current.data)
            }) : current;
            return merged2;
          }, {});
          return Object.keys(merged).map(function(key) {
            return merged[key];
          });
        }
        var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
        var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
        var DEFAULT_OPTIONS = {
          placement: "bottom",
          modifiers: [],
          strategy: "absolute"
        };
        function areValidElements() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return !args.some(function(element2) {
            return !(element2 && typeof element2.getBoundingClientRect === "function");
          });
        }
        function popperGenerator(generatorOptions) {
          if (generatorOptions === void 0) {
            generatorOptions = {};
          }
          var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
          return function createPopper2(reference2, popper2, options) {
            if (options === void 0) {
              options = defaultOptions;
            }
            var state = {
              placement: "bottom",
              orderedModifiers: [],
              options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
              modifiersData: {},
              elements: {
                reference: reference2,
                popper: popper2
              },
              attributes: {},
              styles: {}
            };
            var effectCleanupFns = [];
            var isDestroyed = false;
            var instance = {
              state,
              setOptions: function setOptions(setOptionsAction) {
                var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
                cleanupModifierEffects();
                state.options = Object.assign({}, defaultOptions, state.options, options2);
                state.scrollParents = {
                  reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
                  popper: listScrollParents(popper2)
                };
                var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
                state.orderedModifiers = orderedModifiers.filter(function(m) {
                  return m.enabled;
                });
                {
                  var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
                    var name = _ref.name;
                    return name;
                  });
                  validateModifiers(modifiers);
                  if (getBasePlacement(state.options.placement) === auto) {
                    var flipModifier = state.orderedModifiers.find(function(_ref2) {
                      var name = _ref2.name;
                      return name === "flip";
                    });
                    if (!flipModifier) {
                      console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
                    }
                  }
                  var _getComputedStyle = getComputedStyle$1(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
                  if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
                    return parseFloat(margin);
                  })) {
                    console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
                  }
                }
                runModifierEffects();
                return instance.update();
              },
              forceUpdate: function forceUpdate() {
                if (isDestroyed) {
                  return;
                }
                var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
                if (!areValidElements(reference3, popper3)) {
                  {
                    console.error(INVALID_ELEMENT_ERROR);
                  }
                  return;
                }
                state.rects = {
                  reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
                  popper: getLayoutRect(popper3)
                };
                state.reset = false;
                state.placement = state.options.placement;
                state.orderedModifiers.forEach(function(modifier) {
                  return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
                });
                var __debug_loops__ = 0;
                for (var index2 = 0; index2 < state.orderedModifiers.length; index2++) {
                  {
                    __debug_loops__ += 1;
                    if (__debug_loops__ > 100) {
                      console.error(INFINITE_LOOP_ERROR);
                      break;
                    }
                  }
                  if (state.reset === true) {
                    state.reset = false;
                    index2 = -1;
                    continue;
                  }
                  var _state$orderedModifie = state.orderedModifiers[index2], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
                  if (typeof fn === "function") {
                    state = fn({
                      state,
                      options: _options,
                      name,
                      instance
                    }) || state;
                  }
                }
              },
              update: debounce$2(function() {
                return new Promise(function(resolve) {
                  instance.forceUpdate();
                  resolve(state);
                });
              }),
              destroy: function destroy() {
                cleanupModifierEffects();
                isDestroyed = true;
              }
            };
            if (!areValidElements(reference2, popper2)) {
              {
                console.error(INVALID_ELEMENT_ERROR);
              }
              return instance;
            }
            instance.setOptions(options).then(function(state2) {
              if (!isDestroyed && options.onFirstUpdate) {
                options.onFirstUpdate(state2);
              }
            });
            function runModifierEffects() {
              state.orderedModifiers.forEach(function(_ref3) {
                var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect2 = _ref3.effect;
                if (typeof effect2 === "function") {
                  var cleanupFn = effect2({
                    state,
                    name,
                    instance,
                    options: options2
                  });
                  var noopFn = function noopFn2() {
                  };
                  effectCleanupFns.push(cleanupFn || noopFn);
                }
              });
            }
            function cleanupModifierEffects() {
              effectCleanupFns.forEach(function(fn) {
                return fn();
              });
              effectCleanupFns = [];
            }
            return instance;
          };
        }
        var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
        var createPopper = /* @__PURE__ */ popperGenerator({
          defaultModifiers
        });
        function _isSlot$r(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        function filterEmpty() {
          var children = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
          var vnodes = [];
          children.forEach(function(child) {
            if (Array.isArray(child)) {
              vnodes.push.apply(vnodes, _toConsumableArray(child));
            } else if (child.type === vue.Fragment) {
              vnodes.push.apply(vnodes, _toConsumableArray(filterEmpty(child.children)));
            } else {
              vnodes.push(child);
            }
          });
          return vnodes.filter(function(c) {
            return !(c && (typeof Comment !== "undefined" && c.type === Comment || c.type === vue.Fragment && c.children.length === 0 || c.type === vue.Text && c.children.trim() === ""));
          });
        }
        function isContentRectChanged(rect1, rect2) {
          if (!rect1 || !rect2)
            return;
          if (["width", "height", "x", "y"].some(function(k) {
            return rect1[k] !== rect2[k];
          })) {
            return true;
          }
          return false;
        }
        function observeResize(elm, cb) {
          var _window;
          if (!((_window = window) !== null && _window !== void 0 && _window.ResizeObserver) || !elm)
            return;
          var prevContentRect = null;
          var ro = new ResizeObserver(function() {
            var entries = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
            var _ref = entries[0] || {}, contentRect = _ref.contentRect;
            if (isContentRectChanged(contentRect, prevContentRect)) {
              prevContentRect = contentRect;
              cb(contentRect);
              return;
            }
            if (!prevContentRect) {
              prevContentRect = contentRect;
            }
          });
          ro.observe(elm);
          return function() {
            ro.unobserve(elm);
          };
        }
        function useObserveResize(elm, cb) {
          var cleanOR;
          vue.onMounted(function() {
            cleanOR = observeResize(elm(), cb);
          });
          vue.onUnmounted(function() {
            var _cleanOR;
            (_cleanOR = cleanOR) === null || _cleanOR === void 0 ? void 0 : _cleanOR();
          });
        }
        var Trigger = vue.defineComponent({
          emits: ["resize"],
          data: function data() {
            return {
              cleanOR: null
            };
          },
          mounted: function mounted() {
            var _this = this;
            this.cleanOR = observeResize(this.$el, function() {
              _this.$emit("resize");
            });
          },
          unmounted: function unmounted() {
            this.cleanOR();
          },
          render: function render() {
            var _children$;
            var children = filterEmpty(this.$slots["default"]());
            if (children.length > 1 || ((_children$ = children[0]) === null || _children$ === void 0 ? void 0 : _children$.type) === vue.Text) {
              return vue.createVNode("span", null, [children]);
            }
            return children[0];
          }
        });
        var Content = vue.defineComponent({
          emits: ["resize"],
          setup: function setup(props2, _ref2) {
            var emit = _ref2.emit;
            var el = vue.ref(null);
            useObserveResize(function() {
              return el.value.children[0];
            }, function() {
              emit("resize");
            });
            return {
              el
            };
          },
          render: function render() {
            return vue.createVNode("div", {
              "ref": "el",
              "style": "position: absolute; top: 0px; left: 0px; width: 100%"
            }, [this.$slots["default"]()]);
          }
        });
        var Container = vue.defineComponent({
          inheritAttrs: false,
          props: {
            parent: Object,
            visible: Boolean,
            attach: popupProps.attach,
            forwardRef: Function
          },
          emits: ["resize", "contentMounted"],
          setup: function setup(props2, _ref3) {
            var emit = _ref3.emit;
            var triggerRef = vue.ref(null);
            var mountContent = vue.ref(false);
            vue.onMounted(function() {
              mountContent.value = props2.visible;
              props2.forwardRef(triggerRef.value.$el);
            });
            vue.watch(function() {
              return props2.visible;
            }, function(visible) {
              if (visible) {
                mountContent.value = props2.visible;
              }
            });
            return {
              mountContent,
              triggerRef,
              unmountContent: function unmountContent() {
                mountContent.value = false;
              },
              emitResize: function emitResize() {
                emit("resize");
              },
              emitContentMounted: function emitContentMounted() {
                emit("contentMounted");
              }
            };
          },
          render: function render() {
            var _this2 = this;
            var _slot;
            return vue.createVNode(vue.Fragment, null, [vue.createVNode(Trigger, vue.mergeProps({
              "class": this.$attrs["class"]
            }, {
              "ref": "triggerRef",
              "onResize": this.emitResize
            }), _isSlot$r(_slot = this.$slots["default"]()) ? _slot : {
              "default": function _default() {
                return [_slot];
              }
            }), this.mountContent && vue.createVNode(vue.Teleport, {
              "to": getAttach(this.attach)
            }, {
              "default": function _default() {
                return [vue.createVNode(Content, {
                  "onResize": _this2.emitResize,
                  "onVnodeMounted": _this2.emitContentMounted
                }, {
                  "default": function _default2() {
                    return [_this2.$slots.content && _this2.$slots.content()];
                  }
                })];
              }
            })]);
          }
        });
        function useVModel(value, modelValue, defaultValue, onChange) {
          var propName = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : "value";
          var _getCurrentInstance = vue.getCurrentInstance(), emit = _getCurrentInstance.emit, attrs = _getCurrentInstance.attrs;
          var internalValue = vue.ref();
          internalValue.value = defaultValue;
          if (typeof value.value !== "undefined") {
            internalValue.value = value.value;
          } else if (typeof modelValue.value !== "undefined") {
            internalValue.value = modelValue.value;
          }
          vue.watch(value, function(newVal) {
            internalValue.value = newVal;
          });
          vue.watch(modelValue, function(newVal) {
            internalValue.value = newVal;
          });
          return [internalValue, function(newValue) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            if (attrs["onUpdate:".concat(propName)]) {
              emit === null || emit === void 0 ? void 0 : emit.apply(void 0, ["update:".concat(propName), newValue].concat(args));
            } else if (attrs["onUpdate:modelValue"]) {
              emit === null || emit === void 0 ? void 0 : emit.apply(void 0, ["update:modelValue", newValue].concat(args));
            }
            if (typeof value.value === "undefined" && typeof modelValue.value === "undefined") {
              internalValue.value = newValue;
            }
            onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));
          }];
        }
        function ownKeys$1I(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1H(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1I(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1I(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot$q(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var showTimeout = 250;
        var hideTimeout = 150;
        var triggers = ["click", "hover", "focus", "context-menu"];
        var injectionKey = Symbol("popup");
        function getPopperPlacement(placement) {
          return placement.replace(/-(left|top)$/, "-start").replace(/-(right|bottom)$/, "-end");
        }
        var _Popup = vue.defineComponent({
          name: "TPopup",
          props: _objectSpread$1H(_objectSpread$1H({}, popupProps), {}, {
            expandAnimation: {
              type: Boolean
            }
          }),
          setup: function setup(props2, _ref) {
            var expose = _ref.expose;
            var _toRefs = vue.toRefs(props2), visible = _toRefs.visible, modelValue = _toRefs.modelValue;
            var _useVModel = useVModel(visible, modelValue, props2.defaultVisible, props2.onVisibleChange, "visible"), _useVModel2 = _slicedToArray(_useVModel, 2), innerVisible = _useVModel2[0], setInnerVisible = _useVModel2[1];
            var popper2;
            var timeoutId;
            var hasDocumentEvent = false;
            var visibleState = vue.ref(0);
            var mouseInRange = vue.ref(false);
            var contentClicked = vue.ref(false);
            var triggerClicked = vue.ref(false);
            var triggerEl = vue.ref(null);
            var overlayEl = vue.ref(null);
            var popperEl = vue.ref(null);
            var containerRef = vue.ref(null);
            var parent2 = vue.inject(injectionKey, void 0);
            var prefixCls = usePrefixClass("popup");
            var _useCommonClassName = useCommonClassName$2(), commonCls = _useCommonClassName.STATUS;
            var overlayCls = vue.computed(function() {
              var _ref2;
              return ["".concat(prefixCls.value, "__content"), (_ref2 = {}, _defineProperty$3(_ref2, "".concat(prefixCls.value, "__content--text"), typeof props2.content === "string"), _defineProperty$3(_ref2, "".concat(prefixCls.value, "__content--arrow"), props2.showArrow), _defineProperty$3(_ref2, commonCls.value.disabled, props2.disabled), _ref2), props2.overlayClassName];
            });
            var hasTrigger = vue.computed(function() {
              return triggers.reduce(function(map, trigger) {
                return _objectSpread$1H(_objectSpread$1H({}, map), {}, _defineProperty$3({}, trigger, props2.trigger.includes(trigger)));
              }, {});
            });
            function updateOverlayStyle() {
              var overlayStyle = props2.overlayStyle;
              if (!triggerEl.value || !overlayEl.value)
                return;
              if (typeof overlayStyle === "function") {
                setStyle$1(overlayEl.value, overlayStyle(triggerEl.value, overlayEl.value));
              } else if (_typeof$2(overlayStyle) === "object") {
                setStyle$1(overlayEl.value, overlayStyle);
              }
            }
            function updatePopper() {
              if (!popperEl.value || !innerVisible.value)
                return;
              if (popper2) {
                popper2.update();
                return;
              }
              popper2 = createPopper(triggerEl.value, popperEl.value, {
                placement: getPopperPlacement(props2.placement),
                onFirstUpdate: function onFirstUpdate() {
                  vue.nextTick(updatePopper);
                }
              });
            }
            function destroyPopper() {
              if (popper2) {
                var _popper;
                (_popper = popper2) === null || _popper === void 0 ? void 0 : _popper.destroy();
                popper2 = null;
              }
              if (props2.destroyOnClose) {
                var _containerRef$value;
                (_containerRef$value = containerRef.value) === null || _containerRef$value === void 0 ? void 0 : _containerRef$value.unmountContent();
              }
            }
            function emitVisible(visible2, context) {
              if (props2.disabled || visible2 === innerVisible.value)
                return;
              if (!visible2 && visibleState.value > 1)
                return;
              if (visible2 && mouseInRange.value)
                return;
              setInnerVisible(visible2, context);
            }
            function preventClosing(preventing) {
              parent2 === null || parent2 === void 0 ? void 0 : parent2.preventClosing(preventing);
              if (preventing) {
                visibleState.value += 1;
              } else if (visibleState.value) {
                visibleState.value -= 1;
                if (!visibleState.value) {
                  emitVisible(false, {});
                  if (parent2 !== null && parent2 !== void 0 && parent2.hasTrigger.value.hover && !(parent2 !== null && parent2 !== void 0 && parent2.mouseInRange)) {
                    parent2.emitVisible(false, {});
                  }
                }
              }
            }
            function handleToggle(context) {
              emitVisible(!innerVisible.value, context);
            }
            function handleOpen(context) {
              clearTimeout(timeoutId);
              timeoutId = setTimeout(function() {
                emitVisible(true, context);
              }, hasTrigger.value.click ? 0 : showTimeout);
            }
            function handleClose(context) {
              clearTimeout(timeoutId);
              timeoutId = setTimeout(function() {
                emitVisible(false, context);
              }, hasTrigger.value.click ? 0 : hideTimeout);
            }
            function handleDocumentClick() {
              if (contentClicked.value || triggerClicked.value) {
                triggerClicked.value = false;
                setTimeout(function() {
                  contentClicked.value = false;
                });
                return;
              }
              visibleState.value = 0;
              emitVisible(false, {
                trigger: "document"
              });
            }
            function onMouseEnter() {
              mouseInRange.value = true;
              handleOpen({});
            }
            function onMouseLeave(ev) {
              if (visibleState.value > 1) {
                var rect = popperEl.value.getBoundingClientRect();
                if (ev.x > rect.x && ev.x < rect.x + rect.width && ev.y > rect.y && ev.y < rect.y + rect.height)
                  return;
              }
              mouseInRange.value = false;
              handleClose({});
              if (parent2 !== null && parent2 !== void 0 && parent2.mouseInRange) {
                parent2.onMouseLeave(ev);
              }
            }
            vue.onMounted(function() {
              if (hasTrigger.value.hover) {
                on$1(triggerEl.value, "mouseenter", function() {
                  return handleOpen({
                    trigger: "trigger-element-hover"
                  });
                });
                on$1(triggerEl.value, "mouseleave", function() {
                  return handleClose({
                    trigger: "trigger-element-hover"
                  });
                });
              } else if (hasTrigger.value.focus) {
                on$1(triggerEl.value, "focusin", function() {
                  return handleOpen({
                    trigger: "trigger-element-focus"
                  });
                });
                on$1(triggerEl.value, "focusout", function() {
                  return handleClose({
                    trigger: "trigger-element-blur"
                  });
                });
              } else if (hasTrigger.value.click) {
                on$1(triggerEl.value, "click", function(e) {
                  visibleState.value = 0;
                  handleToggle({
                    e,
                    trigger: "trigger-element-click"
                  });
                });
              } else if (hasTrigger.value["context-menu"]) {
                on$1(triggerEl.value, "contextmenu", function(e) {
                  e.preventDefault();
                  e.button === 2 && handleToggle({
                    trigger: "context-menu"
                  });
                });
              }
              if (!hasTrigger.value["context-menu"]) {
                on$1(triggerEl.value, "click", function() {
                  triggerClicked.value = true;
                });
              }
            });
            vue.onUnmounted(destroyPopper);
            vue.watch(function() {
              return [props2.overlayStyle, overlayEl.value];
            }, function() {
              updateOverlayStyle();
              if (popper2) {
                popper2.update();
              }
            });
            vue.watch(contentClicked, function(clicked) {
              if (parent2) {
                parent2.contentClicked.value = clicked;
              }
            });
            vue.watch(function() {
              return innerVisible.value;
            }, function(visible2) {
              if (visible2) {
                preventClosing(true);
                if (!hasDocumentEvent) {
                  on$1(document, "click", handleDocumentClick);
                  hasDocumentEvent = true;
                }
                if (triggerEl.value && hasTrigger.value.focus) {
                  once(triggerEl.value, "keydown", function(ev) {
                    if (ev.code === "Escape") {
                      handleClose({
                        trigger: "keydown-esc"
                      });
                    }
                  });
                }
              } else {
                preventClosing(false);
                off$1(document, "click", handleDocumentClick);
                hasDocumentEvent = false;
                mouseInRange.value = false;
              }
            });
            vue.provide(injectionKey, {
              preventClosing,
              emitVisible,
              contentClicked,
              mouseInRange,
              onMouseLeave,
              hasTrigger
            });
            expose({
              handleClose,
              updatePopper,
              getOverlay: function getOverlay() {
                return overlayEl.value;
              }
            });
            return {
              innerVisible,
              triggerEl,
              overlayEl,
              popperEl,
              prefixCls,
              overlayCls,
              hasTrigger,
              contentClicked,
              triggerClicked,
              updatePopper,
              destroyPopper,
              updateOverlayStyle,
              emitVisible,
              onMouseEnter,
              onMouseLeave
            };
          },
          render: function render() {
            var _this = this;
            var prefixCls = this.prefixCls, innerVisible = this.innerVisible, destroyOnClose = this.destroyOnClose, hasTrigger = this.hasTrigger, _onScroll = this.onScroll;
            var content = renderTNodeJSX(this, "content");
            var hidePopup = this.hideEmptyPopup && ["", void 0, null].includes(content);
            var overlay = innerVisible || !destroyOnClose ? vue.withDirectives(vue.createVNode("div", vue.mergeProps({
              "class": prefixCls,
              "ref": "popperEl",
              "style": [hidePopup && {
                visibility: "hidden",
                pointerEvents: "none"
              }, {
                zIndex: this.zIndex
              }],
              "onMousedown": function onMousedown() {
                _this.contentClicked = true;
              },
              "onMouseup": function onMouseup() {
                setTimeout(function() {
                  _this.contentClicked = false;
                });
              }
            }, hasTrigger.hover && {
              onMouseenter: this.onMouseEnter,
              onMouseleave: this.onMouseLeave
            }), [vue.createVNode("div", vue.mergeProps({
              "class": this.overlayCls,
              "ref": "overlayEl"
            }, _onScroll && {
              onScroll: function onScroll(e) {
                _onScroll({
                  e
                });
              }
            }), [content, this.showArrow && vue.createVNode("div", {
              "class": "".concat(prefixCls, "__arrow")
            }, null)])]), [[vue.vShow, innerVisible]]) : null;
            return vue.createVNode(Container, {
              "ref": "containerRef",
              "forwardRef": function forwardRef(ref2) {
                return _this.triggerEl = ref2;
              },
              "onContentMounted": function onContentMounted() {
                if (innerVisible) {
                  _this.updatePopper();
                  _this.updateOverlayStyle();
                }
              },
              "onResize": function onResize() {
                if (innerVisible) {
                  _this.updatePopper();
                }
              },
              "visible": innerVisible,
              "attach": this.attach
            }, {
              content: function content2() {
                return vue.createVNode(vue.Transition, {
                  "name": _this.expandAnimation ? "".concat(prefixCls, "--animation-expand") : "".concat(prefixCls, "--animation"),
                  "appear": true,
                  "onEnter": _this.updatePopper,
                  "onAfterLeave": _this.destroyPopper
                }, _isSlot$q(overlay) ? overlay : {
                  "default": function _default() {
                    return [overlay];
                  }
                });
              },
              "default": function _default() {
                return renderContent(_this, "default", "triggerElement");
              }
            });
          }
        });
        var Popup = withInstall(_Popup);
        var useMouse = function useMouse2() {
          var x = vue.ref(0);
          var y = vue.ref(0);
          var onMouseMove = function onMouseMove2(e) {
            x.value = e.clientX;
            y.value = e.clientY;
          };
          if (!isServer$1) {
            vue.onMounted(function() {
              window.addEventListener("mousemove", onMouseMove, {
                passive: true
              });
            });
            vue.onUnmounted(function() {
              window.removeEventListener("mousemove", onMouseMove);
            });
          }
          return {
            x,
            y
          };
        };
        function ownKeys$1H(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1G(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1H(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1H(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _Tooltip = vue.defineComponent({
          name: "TTooltip",
          components: {
            Popup
          },
          props: _objectSpread$1G(_objectSpread$1G({}, popupProps), props$V),
          setup: function setup(props2, ctx) {
            var timer = vue.ref(null);
            var popupRef = vue.ref(null);
            var _toRefs = vue.toRefs(props2), visible = _toRefs.visible, modelValue = _toRefs.modelValue;
            var _useVModel = useVModel(visible, modelValue, props2.defaultVisible, props2.onVisibleChange, "visible"), _useVModel2 = _slicedToArray(_useVModel, 2), innerVisible = _useVModel2[0], setInnerVisible = _useVModel2[1];
            var innerTooltipVisible = vue.ref(props2.visible || props2.defaultVisible);
            var classPrefix2 = usePrefixClass();
            var renderTNodeJSX2 = useTNodeJSX();
            var renderContent2 = useContent();
            var _useMouse = useMouse(), x = _useMouse.x;
            var offsetX = vue.ref(x.value);
            vue.onMounted(function() {
              if (props2.duration && innerTooltipVisible.value) {
                timer.value = setTimeout(function() {
                  innerTooltipVisible.value = false;
                  clearTimeout(timer.value);
                  timer.value = null;
                }, props2.duration);
              }
            });
            var onTipVisibleChange = function onTipVisibleChange2(val, ctx2) {
              if (timer.value && (ctx2 === null || ctx2 === void 0 ? void 0 : ctx2.trigger) !== "document")
                return;
              if (val) {
                offsetX.value = x.value;
              }
              setInnerVisible(val, ctx2);
            };
            var tooltipOverlayClassName = vue.computed(function() {
              return ["".concat(classPrefix2.value, "-tooltip"), _defineProperty$3({}, "".concat(classPrefix2.value, "-tooltip--").concat(props2.theme), props2.theme), props2.overlayClassName];
            });
            var popupProps2 = vue.computed(function() {
              return _objectSpread$1G(_objectSpread$1G({}, props2), {}, {
                placement: props2.placement === "mouse" ? "bottom-left" : props2.placement,
                showArrow: props2.placement === "mouse" ? false : props2.showArrow,
                content: function content() {
                  return renderTNodeJSX2("content");
                },
                "default": function _default() {
                  return renderContent2("default", "triggerElement");
                },
                overlayClassName: tooltipOverlayClassName.value,
                onVisibleChange: onTipVisibleChange
              });
            });
            var overlayStyle = vue.computed(function() {
              if (props2.placement !== "mouse" || offsetX.value === 0) {
                return props2.overlayStyle;
              }
              var offsetStyle = function offsetStyle2(triggerEl) {
                return {
                  transform: "translateX(".concat(offsetX.value - triggerEl.getBoundingClientRect().left, "px)")
                };
              };
              if (props2.overlayStyle) {
                return function(triggerEl, popupEl) {
                  return _objectSpread$1G(_objectSpread$1G({}, offsetStyle(triggerEl)), isFunction_1(props2.overlayStyle) ? props2.overlayStyle(triggerEl, popupEl) : props2.overlayStyle);
                };
              }
              return offsetStyle;
            });
            vue.watch(function() {
              return innerTooltipVisible.value;
            }, function() {
              if (timer.value && !innerTooltipVisible.value) {
                clearTimeout(timer.value);
                timer.value = null;
              }
            });
            var onPopupUpdate = function onPopupUpdate2() {
              var _popupRef$value, _popupRef$value$updat;
              (_popupRef$value = popupRef.value) === null || _popupRef$value === void 0 ? void 0 : (_popupRef$value$updat = _popupRef$value.updatePopper) === null || _popupRef$value$updat === void 0 ? void 0 : _popupRef$value$updat.call(_popupRef$value);
            };
            ctx.expose({
              updatePopper: onPopupUpdate
            });
            return function() {
              return vue.createVNode(Popup, vue.mergeProps({
                "ref": popupRef,
                "visible": innerVisible.value
              }, popupProps2.value, {
                "overlayStyle": overlayStyle.value
              }), null);
            };
          }
        });
        var Tooltip = withInstall(_Tooltip);
        function ownKeys$1G(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1F(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1G(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1G(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot$p(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var localTBreadcrumbOrigin = {
          separator: "",
          theme: "light",
          slots: {
            separator: ""
          },
          maxItemWidth: void 0
        };
        var _BreadcrumbItem = vue.defineComponent({
          name: "TBreadcrumbItem",
          props: props$W,
          setup: function setup(props2, _ref) {
            var _localTBreadcrumb$slo;
            var slots = _ref.slots, attrs = _ref.attrs;
            var breadcrumbText = vue.ref();
            var localTBreadcrumb = vue.inject("tBreadcrumb", localTBreadcrumbOrigin);
            var themeClassName = vue.ref(localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : localTBreadcrumb.theme);
            var isCutOff = vue.ref(false);
            var COMPONENT_NAME2 = usePrefixClass("breadcrumb__item");
            var separatorClass = usePrefixClass("breadcrumb__separator");
            var disableClass = usePrefixClass("is-disabled");
            var linkClass = usePrefixClass("link");
            var maxLengthClass = usePrefixClass("breadcrumb__inner");
            var textFlowClass = usePrefixClass("breadcrumb--text-overflow");
            var maxWithStyle = vue.computed(function() {
              var maxItemWidth = localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : localTBreadcrumb.maxItemWidth;
              var maxWith = props2.maxWidth || maxItemWidth || "120";
              return {
                maxWidth: "".concat(maxWith, "px")
              };
            });
            vue.onMounted(function() {
              isCutOff.value = isNodeOverflow(breadcrumbText.value);
            });
            vue.onBeforeUpdate(function() {
              isCutOff.value = isNodeOverflow(breadcrumbText.value);
            });
            var separatorPropContent = localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : localTBreadcrumb.separator;
            var separatorSlot = localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : (_localTBreadcrumb$slo = localTBreadcrumb.slots) === null || _localTBreadcrumb$slo === void 0 ? void 0 : _localTBreadcrumb$slo.separator;
            var separatorContent = separatorPropContent || separatorSlot || vue.createVNode(chevronRight, {
              color: "rgba(0,0,0,.3)"
            }, null);
            var _getCurrentInstance = vue.getCurrentInstance(), proxy = _getCurrentInstance.proxy;
            var bindEvent = function bindEvent2(e) {
              if (!props2.disabled) {
                e.preventDefault();
                if (props2.href) {
                  window.location.href = props2.href;
                }
                var router = props2.router || proxy.$root.$router;
                if (props2.to && router) {
                  props2.replace ? router.replace(props2.to) : router.push(props2.to);
                }
              }
            };
            return function() {
              var itemClass = [COMPONENT_NAME2.value, themeClassName.value];
              var textClass = [textFlowClass.value];
              if (props2.disabled) {
                textClass.push(disableClass.value);
              }
              var listeners = {
                onClick: function onClick(e) {
                  var _props2$onClick;
                  (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
                    e
                  });
                }
              };
              var textContent = vue.createVNode("span", vue.mergeProps({
                "ref": breadcrumbText
              }, {
                "class": maxLengthClass.value,
                style: maxWithStyle.value
              }), [slots["default"]()]);
              var itemContent = vue.createVNode("span", _objectSpread$1F({
                "class": textClass
              }, listeners), [textContent]);
              if ((props2.href || props2.to) && !props2.disabled) {
                textClass.push(linkClass.value);
                itemContent = vue.createVNode("a", vue.mergeProps({
                  "class": textClass,
                  "href": props2.href,
                  "target": props2.target
                }, listeners, {
                  "onClick": bindEvent
                }), [textContent]);
              }
              return vue.createVNode("div", vue.mergeProps({
                "class": itemClass
              }, attrs), [isCutOff.value ? vue.createVNode(Tooltip, {
                "content": function content() {
                  return slots === null || slots === void 0 ? void 0 : slots["default"]();
                }
              }, _isSlot$p(itemContent) ? itemContent : {
                "default": function _default() {
                  return [itemContent];
                }
              }) : itemContent, vue.createVNode("span", {
                "class": separatorClass.value
              }, [typeof separatorContent === "function" ? separatorContent() : separatorContent])]);
            };
          }
        });
        var _Breadcrumb = vue.defineComponent({
          name: "TBreadcrumb",
          props: props$X,
          setup: function setup(props2, _ref) {
            var slots = _ref.slots;
            var _toRefs = vue.toRefs(props2), separator = _toRefs.separator, theme = _toRefs.theme, maxItemWidth = _toRefs.maxItemWidth;
            vue.provide("tBreadcrumb", vue.reactive({
              separator,
              theme,
              slots: {
                separator: slots.separator
              },
              maxItemWidth
            }));
            var renderTNodeJSX2 = useTNodeJSX();
            return function() {
              var content = renderTNodeJSX2("default");
              if (props2.options && props2.options.length) {
                content = props2.options.map(function(option, index2) {
                  return vue.createVNode(_BreadcrumbItem, vue.mergeProps(option, {
                    "key": index2
                  }), {
                    "default": function _default() {
                      return [option["default"] || option.content];
                    }
                  });
                });
              }
              return vue.createVNode("div", {
                "class": "t-breadcrumb"
              }, [content]);
            };
          }
        });
        var Breadcrumb = withInstall(_Breadcrumb);
        var BreadcrumbItem = withInstall(_BreadcrumbItem);
        var itemProps = {
          active: Boolean,
          content: {
            type: [String, Function],
            "default": ""
          },
          disabled: Boolean,
          divider: Boolean,
          value: {
            type: [String, Number, Object]
          },
          onClick: Function
        };
        var injectKey$1 = Symbol("dropdownProvider");
        function ownKeys$1F(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1E(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1F(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1F(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _DropdownItem = vue.defineComponent({
          name: "TDropdownItem",
          props: _objectSpread$1E(_objectSpread$1E({}, itemProps), {}, {
            path: {
              type: String,
              "default": ""
            },
            hasChildren: {
              type: Boolean,
              "default": false
            },
            onHover: {
              type: Function
            }
          }),
          setup: function setup(props2) {
            var renderContent2 = useContent();
            var itemRef = vue.ref();
            useRipple(itemRef);
            var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
            var COMPONENT_NAME2 = usePrefixClass("dropdown__item");
            var classPrefix2 = usePrefixClass();
            var dropdownProvider = vue.inject(injectKey$1);
            var handleMenuClick = dropdownProvider.handleMenuClick;
            var renderSuffix = function renderSuffix2() {
              return props2.hasChildren ? vue.createVNode(chevronRight, {
                "class": "".concat(COMPONENT_NAME2.value, "__item-icon")
              }, null) : null;
            };
            var handleItemClick = function handleItemClick2(e) {
              e.stopPropagation();
              if (!props2.hasChildren && !props2.disabled) {
                var _props$onClick;
                var data = {
                  value: props2.value,
                  path: props2.path || "/".concat(props2.value),
                  content: props2.content
                };
                (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, data, {
                  e
                });
                handleMenuClick(data, {
                  e
                });
              }
            };
            var handleMouseover = function handleMouseover2() {
              var _props$onHover;
              (_props$onHover = props2.onHover) === null || _props$onHover === void 0 ? void 0 : _props$onHover.call(props2, props2.path);
            };
            return function() {
              var _ref;
              var classes = [COMPONENT_NAME2.value, (_ref = {}, _defineProperty$3(_ref, "".concat(classPrefix2.value, "-dropdown--suffix"), props2.hasChildren), _defineProperty$3(_ref, STATUS.value.disabled, props2.disabled), _defineProperty$3(_ref, STATUS.value.active, props2.active), _ref)];
              return vue.createVNode("div", null, [vue.createVNode("div", {
                "ref": itemRef,
                "class": classes,
                "onClick": handleItemClick,
                "onMouseover": handleMouseover
              }, [vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "-content")
              }, [vue.createVNode("span", {
                "class": "".concat(COMPONENT_NAME2.value, "-text")
              }, [renderContent2("content", "default")])]), renderSuffix()]), props2.divider ? vue.createVNode(Divider, null, null) : null]);
            };
          }
        });
        var _excluded$5 = ["from", "to", "direction"];
        function ownKeys$1E(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1D(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1E(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1E(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function omit$1(obj, fields) {
          var shallowCopy = _objectSpread$1D({}, obj);
          for (var i2 = 0; i2 < fields.length; i2++) {
            var key = fields[i2];
            delete shallowCopy[key];
          }
          return shallowCopy;
        }
        function firstUpperCase$1(str) {
          return str.toLowerCase().replace(/( |^)[a-z]/g, function(_char) {
            return _char.toUpperCase();
          });
        }
        function getBackgroundColor(color) {
          if (typeof color === "string") {
            return color;
          }
          if (Array.isArray(color)) {
            if (color[0] && color[0][0] === "#") {
              color.unshift("90deg");
            }
            return "linear-gradient( ".concat(color.join(","), " )");
          }
          var from = color.from, to = color.to, _color$direction = color.direction, direction = _color$direction === void 0 ? "to right" : _color$direction, rest = _objectWithoutProperties$1(color, _excluded$5);
          var keys2 = Object.keys(rest);
          if (keys2.length) {
            keys2 = keys2.sort(function(a, b2) {
              return parseFloat(a.substr(0, a.length - 1)) - parseFloat(b2.substr(0, b2.length - 1));
            });
            var tempArr = keys2.map(function(key) {
              return "".concat(rest[key], " ").concat(key);
            });
            return "linear-gradient(".concat(direction, ", ").concat(tempArr.join(","), ")");
          }
          return "linear-gradient(".concat(direction, ", ").concat(from, ", ").concat(to, ")");
        }
        function getPropsApiByEvent(eventName) {
          return camelCase_1("on-".concat(eventName));
        }
        function getCharacterLength(str, maxCharacter) {
          var hasMaxCharacter = typeof maxCharacter === "number";
          if (!str || str.length === 0) {
            if (hasMaxCharacter) {
              return {
                length: 0,
                characters: str
              };
            }
            return 0;
          }
          var len = 0;
          for (var i2 = 0; i2 < str.length; i2++) {
            var currentStringLength = 0;
            if (str.charCodeAt(i2) > 127 || str.charCodeAt(i2) === 94) {
              currentStringLength = 2;
            } else {
              currentStringLength = 1;
            }
            if (hasMaxCharacter && len + currentStringLength > maxCharacter) {
              return {
                length: len,
                characters: str.slice(0, i2)
              };
            }
            len += currentStringLength;
          }
          if (hasMaxCharacter) {
            return {
              length: len,
              characters: str
            };
          }
          return len;
        }
        function pxCompat(param) {
          return typeof param === "number" ? "".concat(param, "px") : param;
        }
        var _DropdownMenu = vue.defineComponent({
          name: "TDropdownMenu",
          props: {
            options: {
              type: Array,
              "default": function _default() {
                return [];
              }
            },
            maxHeight: {
              type: Number,
              "default": 300
            },
            maxColumnWidth: {
              type: Number || String,
              "default": 100
            },
            minColumnWidth: {
              type: Number || String,
              "default": 10
            }
          },
          setup: function setup(props2, _ref) {
            var slots = _ref.slots;
            var path6 = vue.ref("");
            var renderTNode = useTNodeJSX();
            var COMPONENT_NAME2 = usePrefixClass("dropdown__menu");
            var dropdownProvider = vue.inject(injectKey$1);
            var maxHeight = dropdownProvider.maxHeight, maxColumnWidth = dropdownProvider.maxColumnWidth, minColumnWidth = dropdownProvider.minColumnWidth;
            var handleHoverItem = function handleHoverItem2(p) {
              path6.value = p;
            };
            var handleItemClick = function handleItemClick2(data, context, idx) {
              var _props$options$idx$on, _props$options$idx, _props$onClick;
              (_props$options$idx$on = (_props$options$idx = props2.options[idx]).onClick) === null || _props$options$idx$on === void 0 ? void 0 : _props$options$idx$on.call(_props$options$idx, data, context);
              (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, data, context);
            };
            var isActive = function isActive2(item, pathPrefix) {
              var excludeSelf = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
              var itemPath = "".concat(pathPrefix, "/").concat(item.value);
              if (excludeSelf && path6.value === itemPath) {
                return false;
              }
              return path6.value.indexOf(itemPath) === 0;
            };
            var renderMenuColumn = function renderMenuColumn2(children, showSubmenu, pathPrefix) {
              var menuClass = ["".concat(COMPONENT_NAME2.value, "-column"), "narrow-scrollbar", {
                submenu__visible: showSubmenu
              }];
              return vue.createVNode("div", {
                "class": menuClass,
                "style": {
                  maxHeight: "".concat(maxHeight, "px"),
                  maxWidth: pxCompat(maxColumnWidth),
                  minWidth: pxCompat(minColumnWidth)
                }
              }, [children.map(function(item, idx) {
                return vue.createVNode(_DropdownItem, {
                  "key": idx,
                  "disabled": item.disabled,
                  "active": isActive(item, pathPrefix) || item.active,
                  "value": item.value,
                  "content": item.content,
                  "divider": item.divider,
                  "hasChildren": item.children && item.children.length > 0,
                  "path": "".concat(pathPrefix, "/").concat(item.value),
                  "maxColumnWidth": maxColumnWidth,
                  "minColumnWidth": minColumnWidth,
                  "onHover": handleHoverItem,
                  "onClick": function onClick(data, context) {
                    return handleItemClick(data, context, idx);
                  }
                }, null);
              })]);
            };
            return function() {
              var columns = [];
              var menuItems = props2.options;
              var pathPrefix = "";
              if (slots["default"]) {
                return vue.createVNode("div", {
                  "class": COMPONENT_NAME2.value
                }, [vue.createVNode("div", {
                  "class": ["".concat(COMPONENT_NAME2.value, "-column"), "narrow-scrollbar"],
                  "style": {
                    maxHeight: "".concat(maxHeight, "px"),
                    maxWidth: "".concat(maxColumnWidth, "px"),
                    minWidth: "".concat(minColumnWidth, "px")
                  }
                }, [renderTNode("default")])]);
              }
              while (menuItems && menuItems.length) {
                var activeItem = menuItems.find(function(item) {
                  return isActive(item, pathPrefix, false);
                });
                columns.push(renderMenuColumn(menuItems, !!activeItem, pathPrefix));
                if (activeItem) {
                  pathPrefix = "".concat(pathPrefix, "/").concat(activeItem.value);
                  menuItems = activeItem.children || [];
                } else {
                  menuItems = [];
                }
              }
              return vue.createVNode("div", {
                "class": COMPONENT_NAME2.value
              }, [columns]);
            };
          }
        });
        var props$U = {
          direction: {
            type: String,
            "default": "right",
            validator: function validator(val) {
              return ["left", "right"].includes(val);
            }
          },
          disabled: Boolean,
          hideAfterItemClick: {
            type: Boolean,
            "default": true
          },
          maxColumnWidth: {
            type: [String, Number],
            "default": 100
          },
          maxHeight: {
            type: Number,
            "default": 300
          },
          minColumnWidth: {
            type: [String, Number],
            "default": 10
          },
          options: {
            type: Array,
            "default": function _default() {
              return [];
            }
          },
          placement: {
            type: String,
            "default": "bottom-left",
            validator: function validator(val) {
              return ["top", "left", "right", "bottom", "top-left", "top-right", "bottom-left", "bottom-right", "left-top", "left-bottom", "right-top", "right-bottom"].includes(val);
            }
          },
          popupProps: {
            type: Object
          },
          trigger: {
            type: String,
            "default": "hover",
            validator: function validator(val) {
              return ["hover", "click", "focus", "context-menu"].includes(val);
            }
          },
          onClick: Function
        };
        function ownKeys$1D(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1C(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1D(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1D(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _Dropdown = vue.defineComponent({
          name: "TDropdown",
          props: props$U,
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            _ref.slots;
            var renderTNodeJSX2 = useTNodeJSX();
            var COMPONENT_NAME2 = usePrefixClass("dropdown");
            var popupElem = vue.ref(null);
            var handleMenuClick = function handleMenuClick2(data, context) {
              var _props2$onClick;
              if (props2.hideAfterItemClick) {
                popupElem.value.handleClose();
              }
              (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, data, context);
            };
            var _toRefs = vue.toRefs(props2), maxHeight = _toRefs.maxHeight, maxColumnWidth = _toRefs.maxColumnWidth, minColumnWidth = _toRefs.minColumnWidth;
            vue.provide(injectKey$1, vue.reactive({
              handleMenuClick,
              maxHeight,
              maxColumnWidth,
              minColumnWidth
            }));
            return function() {
              var _props2$popupProps;
              var trigger = renderTNodeJSX2("default");
              var contentSlot = renderTNodeJSX2("dropdown");
              var popupProps2 = _objectSpread$1C(_objectSpread$1C({}, attrs), {}, {
                disabled: props2.disabled,
                placement: props2.placement,
                trigger: props2.trigger,
                overlayClassName: [COMPONENT_NAME2.value, (_props2$popupProps = props2.popupProps) === null || _props2$popupProps === void 0 ? void 0 : _props2$popupProps.overlayClassName]
              });
              return vue.createVNode(Popup, vue.mergeProps(props2.popupProps, popupProps2, {
                "destroyOnClose": true,
                "ref": popupElem,
                "expandAnimation": true
              }), {
                "default": function _default() {
                  return [trigger];
                },
                content: function content() {
                  return contentSlot || vue.createVNode(_DropdownMenu, {
                    "options": props2.options,
                    "maxHeight": props2.maxHeight,
                    "maxColumnWidth": props2.maxColumnWidth,
                    "minColumnWidth": props2.minColumnWidth
                  }, null);
                }
              });
            };
          }
        });
        var Dropdown = withInstall(_Dropdown);
        var DropdownItem = withInstall(_DropdownItem);
        var DropdownMenu = withInstall(_DropdownMenu);
        var props$T = {
          collapsed: Boolean,
          expanded: {
            type: Array,
            "default": void 0
          },
          defaultExpanded: {
            type: Array,
            "default": []
          },
          expandMutex: Boolean,
          expandType: {
            type: String,
            "default": "normal",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["normal", "popup"].includes(val);
            }
          },
          logo: {
            type: Function
          },
          operations: {
            type: Function
          },
          theme: {
            type: String,
            "default": "light",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["light", "dark"].includes(val);
            }
          },
          value: {
            type: [String, Number],
            "default": void 0
          },
          modelValue: {
            type: [String, Number],
            "default": void 0
          },
          defaultValue: {
            type: [String, Number]
          },
          width: {
            type: [String, Number, Array],
            "default": "232px"
          },
          onChange: Function,
          onExpand: Function
        };
        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _defineProperties(target, props2) {
          for (var i2 = 0; i2 < props2.length; i2++) {
            var descriptor = props2[i2];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps)
            _defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            _defineProperties(Constructor, staticProps);
          Object.defineProperty(Constructor, "prototype", {
            writable: false
          });
          return Constructor;
        }
        var getTreePaths = function getTreePaths2(node, val, ans) {
          if (!node)
            return;
          for (var i2 = 0; i2 < node.children.length; ++i2) {
            var child = node.children[i2];
            if (child.value === val)
              return [].concat(_toConsumableArray(ans), [node.value]);
            var target = getTreePaths2(child, val, [].concat(_toConsumableArray(ans), [node.value]));
            if (target)
              return target;
          }
        };
        var getTreeSameParentNodes = function getTreeSameParentNodes2(node, val) {
          if (!node)
            return [];
          for (var i2 = 0; i2 < node.children.length; ++i2) {
            var child = node.children[i2];
            if (child.value === val)
              return node.children;
            var target = getTreeSameParentNodes2(child, val);
            if (target)
              return target;
          }
        };
        var DFS = function DFS2(root2, val) {
          if (root2.value === val)
            return root2;
          if (root2.children.length > 0) {
            for (var i2 = 0, len = root2.children.length; i2 < len; i2++) {
              var res = DFS2(root2.children[i2], val);
              if (res)
                return res;
            }
          }
        };
        var VMenu = /* @__PURE__ */ function() {
          function VMenu2(options) {
            _classCallCheck(this, VMenu2);
            _defineProperty$3(this, "data", null);
            _defineProperty$3(this, "cache", /* @__PURE__ */ new Set());
            _defineProperty$3(this, "isMutex", vue.ref(false));
            _defineProperty$3(this, "expandValues", null);
            var root2 = {
              value: null,
              parent: null,
              children: []
            };
            this.data = root2;
            this.isMutex = options === null || options === void 0 ? void 0 : options.isMutex;
            this.expandValues = new Set(options === null || options === void 0 ? void 0 : options.expandValues);
          }
          _createClass(VMenu2, [{
            key: "add",
            value: function add2(item) {
              var value = item.value, parent2 = item.parent, vnode = item.vnode;
              var node = {
                value,
                parent: parent2,
                children: [],
                vnode
              };
              this.cache.forEach(function(data, v2, set2) {
                if (item.value === data.parent) {
                  node.children.push(data);
                  set2["delete"](data);
                }
              });
              if (item.parent == null) {
                this.data.children.push(node);
                node.parent = this.data;
              } else if (this.data.children.length > 0) {
                var pNode = DFS(this.data, parent2);
                if (pNode) {
                  pNode.children.push(node);
                } else {
                  this.cache.add(node);
                }
              } else {
                this.cache.add(node);
              }
            }
          }, {
            key: "select",
            value: function select(val) {
              var activeValues = getTreePaths(this.data, val, []) || [];
              activeValues.push(val);
              return activeValues.filter(function(val2) {
                return val2 != null;
              });
            }
          }, {
            key: "expand",
            value: function expand2(val) {
              var _this = this;
              if (this.expandValues.has(val)) {
                this.expandValues["delete"](val);
                return _toConsumableArray(this.expandValues);
              }
              this.expandValues.add(val);
              if (!this.isMutex.value) {
                return _toConsumableArray(this.expandValues);
              }
              var sameParentNodes = getTreeSameParentNodes(this.data, val) || [];
              var sameLevelSubmenuValues = new Set(sameParentNodes.filter(function(node) {
                var _node$children;
                return ((_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.length) > 0 && node.value !== val;
              }).map(function(child) {
                return child.value;
              }));
              this.expandValues.forEach(function(val2) {
                var isHit = sameLevelSubmenuValues.has(val2);
                if (isHit) {
                  _this.expandValues["delete"](val2);
                }
              });
              return _toConsumableArray(this.expandValues);
            }
          }, {
            key: "getChild",
            value: function getChild2(value) {
              var target = DFS(this.data, value);
              return target ? target.children : [];
            }
          }]);
          return VMenu2;
        }();
        var logSet = /* @__PURE__ */ new Set();
        var log = {
          warn: function warn(componentName, message) {
            console.warn("TDesign ".concat(componentName, " Warn: ").concat(message));
          },
          warnOnce: function warnOnce(componentName, message) {
            var msgContent = "TDesign ".concat(componentName, " Warn: ").concat(message);
            if (logSet.has(msgContent))
              return;
            logSet.add(msgContent);
            console.warn(msgContent);
          },
          error: function error2(componentName, message) {
            console.error("TDesign ".concat(componentName, " Error: ").concat(message));
          },
          errorOnce: function errorOnce(componentName, message) {
            var msgContent = "TDesign ".concat(componentName, " Error: ").concat(message);
            if (logSet.has(msgContent))
              return;
            logSet.add(msgContent);
            console.error(msgContent);
          },
          info: function info(componentName, message) {
            console.info("TDesign ".concat(componentName, " Info: ").concat(message));
          }
        };
        function useDefaultValue(value, defaultValue, onChange, propsName) {
          var _getCurrentInstance = vue.getCurrentInstance(), emit = _getCurrentInstance.emit, attrs = _getCurrentInstance.attrs;
          var internalValue = vue.ref();
          internalValue.value = defaultValue;
          if (typeof value.value !== "undefined") {
            internalValue.value = value.value;
          }
          vue.watch(value, function(newVal) {
            internalValue.value = newVal;
          });
          return [internalValue, function(newValue) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            if (attrs["onUpdate:".concat(propsName)]) {
              emit === null || emit === void 0 ? void 0 : emit.apply(void 0, ["update:".concat(propsName), newValue].concat(args));
            }
            if (typeof value.value === "undefined") {
              internalValue.value = newValue;
            }
            onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));
          }];
        }
        function ownKeys$1C(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1B(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1C(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1C(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _Menu = vue.defineComponent({
          name: "TMenu",
          props: _objectSpread$1B({}, props$T),
          setup: function setup(props2, ctx) {
            var classPrefix2 = usePrefixClass();
            vue.watchEffect(function() {
              if (ctx.slots.options) {
                log.warnOnce("TMenu", "`options` slot is going to be deprecated, please use `operations` for slot instead.");
              }
            });
            var mode = vue.ref(props2.expandType);
            var theme = vue.computed(function() {
              return props2.theme;
            });
            var isMutex = vue.computed(function() {
              return props2.expandMutex;
            });
            var menuClass = vue.computed(function() {
              return ["".concat(classPrefix2.value, "-default-menu"), "".concat(classPrefix2.value, "-menu--").concat(props2.theme), _defineProperty$3({}, "".concat(classPrefix2.value, "-is-collapsed"), props2.collapsed)];
            });
            var innerClasses = vue.computed(function() {
              return ["".concat(classPrefix2.value, "-menu"), _defineProperty$3({}, "".concat(classPrefix2.value, "-menu--scroll"), mode.value !== "popup"), "narrow-scrollbar"];
            });
            var expandWidth = vue.computed(function() {
              var width = props2.width;
              var format2 = function format3(val) {
                return typeof val === "number" ? "".concat(val, "px") : val;
              };
              if (Array.isArray(width))
                return width.map(function(item) {
                  return format2(item);
                });
              return [format2(width), "64px"];
            });
            var styles = vue.computed(function() {
              return {
                height: "100%",
                width: props2.collapsed ? expandWidth.value[1] : expandWidth.value[0]
              };
            });
            var _toRefs = vue.toRefs(props2), value = _toRefs.value, modelValue = _toRefs.modelValue, expanded = _toRefs.expanded;
            var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), activeValue = _useVModel2[0], setActiveValue = _useVModel2[1];
            var _useDefaultValue = useDefaultValue(expanded, props2.defaultExpanded, props2.onExpand, "expanded"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2), expandValues = _useDefaultValue2[0], setExpand = _useDefaultValue2[1];
            var activeValues = vue.ref([]);
            vue.watchEffect(function() {
              var _props2$onCollapsed;
              mode.value = props2.collapsed ? "popup" : props2.expandType;
              (_props2$onCollapsed = props2.onCollapsed) === null || _props2$onCollapsed === void 0 ? void 0 : _props2$onCollapsed.call(props2, {
                collapsed: props2.collapsed
              });
            });
            var vMenu = new VMenu({
              isMutex,
              expandValues: expandValues.value ? _toConsumableArray(expandValues.value) : []
            });
            vue.provide("TdMenu", {
              activeValue,
              activeValues,
              expandValues,
              mode,
              theme,
              isHead: false,
              vMenu,
              select: function select(value2) {
                setActiveValue(value2);
              },
              open: function open2(value2, type) {
                if (mode.value === "normal") {
                  setExpand(vMenu.expand(value2));
                } else if (type === "add") {
                  if (expandValues.value.indexOf(value2) === -1) {
                    setExpand([].concat(_toConsumableArray(expandValues.value), [value2]));
                  }
                } else if (type === "remove") {
                  var index2 = expandValues.value.indexOf(value2);
                  var tmp = _toConsumableArray(expandValues.value);
                  tmp.splice(index2, 1);
                  setExpand(tmp);
                }
              }
            });
            vue.watch(function() {
              return props2.expanded;
            }, function(value2) {
              vMenu.expandValues = new Set(value2);
            });
            var updateActiveValues = function updateActiveValues2(value2) {
              activeValues.value = vMenu.select(value2);
            };
            vue.watch(activeValue, updateActiveValues);
            vue.onMounted(function() {
              activeValues.value = vMenu.select(activeValue.value);
            });
            return {
              styles,
              classPrefix: classPrefix2,
              menuClass,
              innerClasses,
              activeValue,
              activeValues,
              expandValues
            };
          },
          render: function render() {
            var operations = renderContent(this, "operations", "options");
            var logo = renderTNodeJSX(this, "logo");
            return vue.createVNode("div", {
              "class": this.menuClass,
              "style": this.styles
            }, [vue.createVNode("div", {
              "class": "".concat(this.classPrefix, "-default-menu__inner")
            }, [logo && vue.createVNode("div", {
              "class": "".concat(this.classPrefix, "-menu__logo")
            }, [logo]), vue.createVNode("ul", {
              "class": this.innerClasses
            }, [renderContent(this, "default", "content")]), operations && vue.createVNode("div", {
              "class": "".concat(this.classPrefix, "-menu__operations")
            }, [operations])])]);
          }
        });
        var props$S = {
          expanded: {
            type: Array,
            "default": void 0
          },
          defaultExpanded: {
            type: Array,
            "default": []
          },
          expandType: {
            type: String,
            "default": "normal",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["normal", "popup"].includes(val);
            }
          },
          logo: {
            type: Function
          },
          operations: {
            type: Function
          },
          theme: {
            type: String,
            "default": "light",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["light", "dark"].includes(val);
            }
          },
          value: {
            type: [String, Number],
            "default": void 0
          },
          modelValue: {
            type: [String, Number],
            "default": void 0
          },
          defaultValue: {
            type: [String, Number]
          },
          onChange: Function,
          onExpand: Function
        };
        var tabPanelProps = {
          "default": {
            type: Function
          },
          destroyOnHide: {
            type: Boolean,
            "default": true
          },
          disabled: Boolean,
          label: {
            type: [String, Function]
          },
          panel: {
            type: [String, Function]
          },
          removable: Boolean,
          value: {
            type: [String, Number]
          },
          onRemove: Function
        };
        var TDisplayNoneElementRefresh = "t-display-none-element-refresh";
        function useDestroyOnClose() {
          var refresh = vue.ref(0);
          vue.provide(TDisplayNoneElementRefresh, refresh);
          vue.onUpdated(function() {
            refresh.value += 1;
          });
        }
        function ownKeys$1B(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1A(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1B(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1B(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _TabPanel = vue.defineComponent({
          name: "TTabPanel",
          props: _objectSpread$1A({}, tabPanelProps),
          setup: function setup(props2) {
            var COMPONENT_NAME2 = usePrefixClass("tab-panel");
            var renderTNodeContent = useContent();
            useDestroyOnClose();
            var tabs = vue.inject("tabs");
            return function() {
              var isActive = props2.value === tabs.value.value;
              if (props2.destroyOnHide && !isActive)
                return null;
              return vue.withDirectives(vue.createVNode("div", {
                "class": COMPONENT_NAME2.value
              }, [renderTNodeContent("default", "panel")]), [[vue.vShow, isActive]]);
            };
          }
        });
        var root = _root;
        var now$1 = function now2() {
          return root.Date.now();
        };
        var now_1 = now$1;
        var reWhitespace = /\s/;
        function trimmedEndIndex$1(string) {
          var index2 = string.length;
          while (index2-- && reWhitespace.test(string.charAt(index2))) {
          }
          return index2;
        }
        var _trimmedEndIndex = trimmedEndIndex$1;
        var trimmedEndIndex = _trimmedEndIndex;
        var reTrimStart = /^\s+/;
        function baseTrim$1(string) {
          return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
        }
        var _baseTrim = baseTrim$1;
        var baseTrim = _baseTrim, isObject$4 = isObject_1, isSymbol$2 = isSymbol_1;
        var NAN = 0 / 0;
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        var reIsBinary = /^0b[01]+$/i;
        var reIsOctal = /^0o[0-7]+$/i;
        var freeParseInt = parseInt;
        function toNumber$3(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol$2(value)) {
            return NAN;
          }
          if (isObject$4(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject$4(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        var toNumber_1 = toNumber$3;
        var isObject$3 = isObject_1, now = now_1, toNumber$2 = toNumber_1;
        var FUNC_ERROR_TEXT$2 = "Expected a function";
        var nativeMax$2 = Math.max, nativeMin$1 = Math.min;
        function debounce$1(func, wait, options) {
          var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError(FUNC_ERROR_TEXT$2);
          }
          wait = toNumber$2(wait) || 0;
          if (isObject$3(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax$2(toNumber$2(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time2) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = void 0;
            lastInvokeTime = time2;
            result = func.apply(thisArg, args);
            return result;
          }
          function leadingEdge(time2) {
            lastInvokeTime = time2;
            timerId = setTimeout(timerExpired, wait);
            return leading ? invokeFunc(time2) : result;
          }
          function remainingWait(time2) {
            var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin$1(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time2) {
            var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
            return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time2 = now();
            if (shouldInvoke(time2)) {
              return trailingEdge(time2);
            }
            timerId = setTimeout(timerExpired, remainingWait(time2));
          }
          function trailingEdge(time2) {
            timerId = void 0;
            if (trailing && lastArgs) {
              return invokeFunc(time2);
            }
            lastArgs = lastThis = void 0;
            return result;
          }
          function cancel() {
            if (timerId !== void 0) {
              clearTimeout(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = void 0;
          }
          function flush() {
            return timerId === void 0 ? result : trailingEdge(now());
          }
          function debounced() {
            var time2 = now(), isInvoking = shouldInvoke(time2);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time2;
            if (isInvoking) {
              if (timerId === void 0) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout(timerId);
                timerId = setTimeout(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === void 0) {
              timerId = setTimeout(timerExpired, wait);
            }
            return result;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var debounce_1 = debounce$1;
        var props$R = {
          addable: Boolean,
          disabled: Boolean,
          dragSort: Boolean,
          list: {
            type: Array
          },
          placement: {
            type: String,
            "default": "top",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["left", "top", "bottom", "right"].includes(val);
            }
          },
          size: {
            type: String,
            "default": "medium",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["medium", "large"].includes(val);
            }
          },
          theme: {
            type: String,
            "default": "normal",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["normal", "card"].includes(val);
            }
          },
          value: {
            type: [String, Number],
            "default": void 0
          },
          modelValue: {
            type: [String, Number],
            "default": void 0
          },
          defaultValue: {
            type: [String, Number]
          },
          onAdd: Function,
          onChange: Function,
          onDragSort: Function,
          onRemove: Function
        };
        var getDomWidth = function getDomWidth2(dom) {
          return (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
        };
        var tabBase = {
          calcScrollLeft: function calcScrollLeft2(elements, scrollLeft) {
            var container = elements.navsContainer;
            var wrap = elements.navsWrap;
            var rightOperations = elements.rightOperations;
            var rightOperationsZoneWidth = getDomWidth(rightOperations);
            if (!wrap || !container)
              return scrollLeft;
            var containerWidth = getDomWidth(container);
            var wrapWidth = getDomWidth(wrap);
            if (wrapWidth <= containerWidth) {
              return 0;
            }
            if (scrollLeft + containerWidth - rightOperationsZoneWidth > wrapWidth) {
              return wrapWidth + rightOperationsZoneWidth - containerWidth;
            }
            return scrollLeft;
          },
          calculateCanToLeft: function calculateCanToLeft2(depElement, scrollLeft, placement) {
            if (["left", "right"].includes(placement.toLowerCase())) {
              return false;
            }
            var container = depElement.navsContainer, wrap = depElement.navsWrap, leftOperations = depElement.leftOperations, toLeftBtn = depElement.toLeftBtn;
            if (!wrap || !container) {
              return false;
            }
            var leftOperationsZoneWidth = getDomWidth(leftOperations);
            var leftIconWidth = getDomWidth(toLeftBtn);
            return scrollLeft + Math.round(leftOperationsZoneWidth - leftIconWidth) > 0;
          },
          calculateCanToRight: function calculateCanToRight2(depElement, scrollLeft, placement) {
            if (["left", "right"].includes(placement.toLowerCase())) {
              return false;
            }
            var container = depElement.navsContainer, wrap = depElement.navsWrap, rightOperations = depElement.rightOperations, toRightBtn = depElement.toRightBtn;
            if (!wrap || !container) {
              return false;
            }
            var rightOperationsZoneWidth = getDomWidth(rightOperations);
            var rightIconWidth = getDomWidth(toRightBtn);
            return scrollLeft + getDomWidth(container) - (rightOperationsZoneWidth - rightIconWidth) - getDomWidth(wrap) < -1;
          },
          moveActiveTabIntoView: function moveActiveTabIntoView2(depElement, scrollLeft) {
            var activeTab = depElement.activeTab, container = depElement.navsContainer, navsWrap = depElement.navsWrap, leftOperations = depElement.leftOperations, toLeftBtn = depElement.toLeftBtn, rightOperations = depElement.rightOperations, toRightBtn = depElement.toRightBtn;
            if (!activeTab)
              return scrollLeft;
            var totalWidthBeforeActiveTab = activeTab.offsetLeft;
            if (!container)
              return scrollLeft;
            var _getLeftCoverWidth = function _getLeftCoverWidth2() {
              var leftOperationsZoneWidth = getDomWidth(leftOperations);
              var leftIconWidth = getDomWidth(toLeftBtn);
              if (totalWidthBeforeActiveTab === 0) {
                return leftOperationsZoneWidth - leftIconWidth;
              }
              return leftOperationsZoneWidth;
            };
            var leftCoverWidth = _getLeftCoverWidth();
            var isCurrentTabHiddenInLeftZone = scrollLeft + leftCoverWidth > totalWidthBeforeActiveTab;
            if (isCurrentTabHiddenInLeftZone) {
              return totalWidthBeforeActiveTab - leftCoverWidth;
            }
            var activeTabWidth = activeTab.offsetWidth;
            if (!container || !navsWrap)
              return scrollLeft;
            var containerWidth = getDomWidth(container);
            var _getRightCoverWidth = function _getRightCoverWidth2() {
              var rightOperationsZoneWidth = getDomWidth(rightOperations);
              var rightIconWidth = getDomWidth(toRightBtn);
              var wrapWidth = getDomWidth(navsWrap);
              if (Math.abs(totalWidthBeforeActiveTab + activeTabWidth - wrapWidth) < 1) {
                return rightOperationsZoneWidth - rightIconWidth;
              }
              return rightOperationsZoneWidth;
            };
            var rightCoverWidth = _getRightCoverWidth();
            var isHiddenInRightZone = scrollLeft + containerWidth - rightCoverWidth < totalWidthBeforeActiveTab + activeTabWidth;
            if (isHiddenInRightZone) {
              return totalWidthBeforeActiveTab + activeTabWidth - containerWidth + rightCoverWidth;
            }
            return scrollLeft;
          },
          scrollToLeft: function scrollToLeft2(depElement, scrollLeft) {
            var container = depElement.navsContainer, leftOperations = depElement.leftOperations, toLeftBtn = depElement.toLeftBtn;
            if (!container)
              return 0;
            var leftOperationsZoneWidth = getDomWidth(leftOperations);
            var leftIconWidth = getDomWidth(toLeftBtn);
            var containerWidth = getDomWidth(container);
            return Math.max(-(leftOperationsZoneWidth - leftIconWidth), scrollLeft - containerWidth);
          },
          scrollToRight: function scrollToRight2(depElement, scrollLeft) {
            var container = depElement.navsContainer, wrap = depElement.navsWrap, rightOperations = depElement.rightOperations, toRightBtn = depElement.toRightBtn;
            var rightOperationsZoneWidth = getDomWidth(rightOperations);
            var rightIconWidth = getDomWidth(toRightBtn);
            var containerWidth = getDomWidth(container);
            var wrapWidth = getDomWidth(wrap);
            return Math.min(scrollLeft + containerWidth, wrapWidth - containerWidth + rightOperationsZoneWidth - rightIconWidth);
          }
        };
        var TTabNavItem = vue.defineComponent({
          name: "TTabNavItem",
          components: {
            CloseIcon: close
          },
          props: {
            index: Number,
            active: {
              type: Boolean
            },
            theme: props$R.theme,
            size: props$R.size,
            placement: props$R.placement,
            label: {
              type: null
            },
            disabled: tabPanelProps.disabled,
            removable: tabPanelProps.removable,
            value: tabPanelProps.value,
            onClick: Function,
            onRemove: Function
          },
          setup: function setup(props2) {
            var itemRef = vue.ref();
            useRipple(itemRef);
            var COMPONENT_NAME2 = usePrefixClass("tabs__nav-item");
            var classPrefix2 = usePrefixClass();
            var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS, SIZE = _useCommonClassName.SIZE;
            var removeBtnClick = function removeBtnClick2(_ref) {
              var e = _ref.e;
              e.stopPropagation();
              props2.onRemove({
                e,
                value: props2.value,
                index: props2.index
              });
            };
            var onClickNav = function onClickNav2(e) {
              if (props2.disabled)
                return;
              props2.onClick(e);
            };
            var navItemClass = vue.computed(function() {
              var _ref2;
              return _ref2 = {}, _defineProperty$3(_ref2, COMPONENT_NAME2.value, true), _defineProperty$3(_ref2, "".concat(classPrefix2.value, "-tabs__nav--card"), props2.theme === "card"), _defineProperty$3(_ref2, STATUS.value.disabled, props2.disabled), _defineProperty$3(_ref2, STATUS.value.active, props2.active), _defineProperty$3(_ref2, "".concat(classPrefix2.value, "-is-left"), props2.placement === "left"), _defineProperty$3(_ref2, "".concat(classPrefix2.value, "-is-right"), props2.placement === "right"), _defineProperty$3(_ref2, SIZE.value.medium, props2.size === "medium"), _defineProperty$3(_ref2, SIZE.value.large, props2.size === "large"), _ref2;
            });
            var renderCardItem = function renderCardItem2() {
              return vue.createVNode("div", {
                "class": navItemClass.value,
                "onClick": onClickNav,
                "ref": itemRef
              }, [vue.createVNode("span", {
                "class": "".concat(COMPONENT_NAME2.value, "-text-wrapper")
              }, [props2.label]), props2.removable && !props2.disabled ? vue.createVNode(close, {
                "class": "remove-btn",
                "onClick": removeBtnClick
              }, null) : null]);
            };
            var renderNormalItem = function renderNormalItem2() {
              var _ref3;
              return vue.createVNode("div", {
                "class": navItemClass.value,
                "onClick": onClickNav
              }, [vue.createVNode("div", {
                "class": ["".concat(COMPONENT_NAME2.value, "-wrapper"), (_ref3 = {}, _defineProperty$3(_ref3, STATUS.value.disabled, props2.disabled), _defineProperty$3(_ref3, STATUS.value.active, props2.active), _ref3)],
                "ref": itemRef
              }, [vue.createVNode("span", {
                "class": "".concat(COMPONENT_NAME2.value, "-text-wrapper")
              }, [props2.label])]), props2.removable && !props2.disabled ? vue.createVNode(close, {
                "class": "remove-btn",
                "onClick": removeBtnClick
              }, null) : null]);
            };
            return function() {
              return props2.theme === "card" ? renderCardItem() : renderNormalItem();
            };
          }
        });
        var TTabNavBar = vue.defineComponent({
          props: {
            navs: {
              type: Array
            },
            placement: props$R.placement,
            value: props$R.value
          },
          setup: function setup(props2) {
            var COMPONENT_NAME2 = usePrefixClass("tabs");
            var classPrefix2 = usePrefixClass();
            var navBarClass = vue.computed(function() {
              return ["".concat(COMPONENT_NAME2.value, "__bar"), "".concat(classPrefix2.value, "-is-").concat(props2.placement)];
            });
            var navBarStyle = vue.ref(null);
            var getStyle = function getStyle2() {
              var _props$navs$i$el2, _ref3;
              var isVertical = ["left", "right"].includes(props2.placement.toLowerCase());
              var _ref = isVertical ? ["height", "top"] : ["width", "left"], _ref2 = _slicedToArray(_ref, 2), sizePropName = _ref2[0], offsetPropName = _ref2[1];
              var offset2 = 0;
              var i2 = 0;
              for (; i2 < props2.navs.length; i2++) {
                var _props$navs$i, _props$navs$i$el;
                if (props2.navs[i2].props.value === props2.value) {
                  break;
                }
                offset2 += ((_props$navs$i = props2.navs[i2]) === null || _props$navs$i === void 0 ? void 0 : (_props$navs$i$el = _props$navs$i.el) === null || _props$navs$i$el === void 0 ? void 0 : _props$navs$i$el["client".concat(firstUpperCase$1(sizePropName))]) || 0;
              }
              if (!props2.navs[i2])
                return {};
              return _ref3 = {}, _defineProperty$3(_ref3, offsetPropName, "".concat(offset2, "px")), _defineProperty$3(_ref3, sizePropName, "".concat(((_props$navs$i$el2 = props2.navs[i2].el) === null || _props$navs$i$el2 === void 0 ? void 0 : _props$navs$i$el2["client".concat(firstUpperCase$1(sizePropName))]) || 0, "px")), _ref3;
            };
            vue.onMounted(function() {
              vue.nextTick(function() {
                navBarStyle.value = getStyle();
              });
            });
            vue.watch([function() {
              return props2.navs;
            }, function() {
              return props2.value;
            }, function() {
              return props2.placement;
            }], function() {
              vue.nextTick(function() {
                navBarStyle.value = getStyle();
              });
            });
            return function() {
              return vue.createVNode("div", {
                "class": navBarClass.value,
                "style": navBarStyle.value
              }, null);
            };
          }
        });
        function _createForOfIteratorHelper(o, allowArrayLike) {
          var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
          if (!it) {
            if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
              if (it)
                o = it;
              var i2 = 0;
              var F = function F2() {
              };
              return { s: F, n: function n() {
                if (i2 >= o.length)
                  return { done: true };
                return { done: false, value: o[i2++] };
              }, e: function e(_e) {
                throw _e;
              }, f: F };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          var normalCompletion = true, didErr = false, err;
          return { s: function s() {
            it = it.call(o);
          }, n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
          }, e: function e(_e2) {
            didErr = true;
            err = _e2;
          }, f: function f() {
            try {
              if (!normalCompletion && it["return"] != null)
                it["return"]();
            } finally {
              if (didErr)
                throw err;
            }
          } };
        }
        function _unsupportedIterableToArray(o, minLen) {
          if (!o)
            return;
          if (typeof o === "string")
            return _arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor)
            n = o.constructor.name;
          if (n === "Map" || n === "Set")
            return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
            return _arrayLikeToArray(o, minLen);
        }
        function _arrayLikeToArray(arr, len) {
          if (len == null || len > arr.length)
            len = arr.length;
          for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
            arr2[i2] = arr[i2];
          }
          return arr2;
        }
        var traversalTabNavs = function traversalTabNavs2(tabNavs, fn) {
          var _iterator = _createForOfIteratorHelper(tabNavs), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var itemNode = _step.value;
              if (itemNode.getAttribute("draggable")) {
                fn(itemNode);
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        };
        var handleTarget = function handleTarget2(target, tabNavs) {
          var resultTarget;
          traversalTabNavs(tabNavs, function(itemNode) {
            if (itemNode.contains(target)) {
              resultTarget = itemNode;
            }
          });
          return resultTarget;
        };
        function useDragSort$1(props2) {
          var navsWrap = null;
          var dragged;
          var enterTargets = [];
          var dragstart = function dragstart2(event) {
            var target = event.target;
            dragged = target;
            target.style.opacity = "0.5";
          };
          var dragend = function dragend2(event) {
            event.target.style.opacity = "";
          };
          var dragover = function dragover2(event) {
            event.preventDefault();
          };
          var dragenter = function dragenter2(event) {
            var target = handleTarget(event.target, navsWrap.children);
            if (target && target !== dragged) {
              target.firstChild.style.outline = "1px dashed #0052d9";
              if (!enterTargets.includes(target)) {
                enterTargets.push(target);
              }
            }
          };
          var dragleave = function dragleave2(event) {
            var target = event.target;
            var _iterator2 = _createForOfIteratorHelper(enterTargets), _step2;
            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                var enterTarget = _step2.value;
                if (!enterTarget.contains(target)) {
                  enterTarget.firstChild.style.outline = "none";
                }
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          };
          var drop2 = function drop3(event) {
            event.preventDefault();
            traversalTabNavs(navsWrap.children, function(tabNav) {
              tabNav.firstChild.style.outline = "none";
            });
            var target = handleTarget(event.target, navsWrap.children);
            if (target && target.parentNode !== dragged) {
              var dragIndex = [].indexOf.call(navsWrap.children, dragged);
              var targetIndex = [].indexOf.call(navsWrap.children, target);
              if (targetIndex > dragIndex) {
                target = navsWrap.children[targetIndex + 1];
              }
              navsWrap.insertBefore(dragged, target);
              var currentIndex = props2.theme === "card" ? dragIndex : dragIndex - 1;
              var endIndex = props2.theme === "card" ? dragIndex : targetIndex - 1;
              props2.onDragSort({
                currentIndex,
                current: props2.panels[currentIndex].value,
                targetIndex: endIndex,
                target: props2.panels[endIndex].value
              });
            }
          };
          function setNavsWrap(val) {
            navsWrap = val;
            navsWrap.addEventListener("dragstart", dragstart, false);
            navsWrap.addEventListener("dragend", dragend, false);
            navsWrap.addEventListener("dragover", dragover, false);
            navsWrap.addEventListener("dragenter", dragenter, false);
            document.addEventListener("dragleave", dragleave, false);
            document.addEventListener("mousemove", dragleave, false);
            navsWrap.addEventListener("drop", drop2, false);
          }
          vue.onUnmounted(function() {
            navsWrap.removeEventListener("dragstart", dragstart);
            navsWrap.removeEventListener("dragend", dragend);
            navsWrap.removeEventListener("dragover", dragover);
            navsWrap.removeEventListener("dragenter", dragenter);
            document.removeEventListener("dragleave", dragleave);
            document.removeEventListener("mousemove", dragleave);
            navsWrap.removeEventListener("drop", drop2);
          });
          return {
            setNavsWrap
          };
        }
        function ownKeys$1A(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1z(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1A(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1A(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var calculateCanToLeft = tabBase.calculateCanToLeft, calculateCanToRight = tabBase.calculateCanToRight, calcScrollLeft = tabBase.calcScrollLeft, scrollToLeft = tabBase.scrollToLeft, scrollToRight = tabBase.scrollToRight, moveActiveTabIntoView = tabBase.moveActiveTabIntoView;
        var TTabNav = vue.defineComponent(_objectSpread$1z(_objectSpread$1z({
          name: "TTabNav",
          components: {
            TTabNavItem,
            TTabNavBar,
            ChevronLeftIcon: chevronLeft,
            ChevronRightIcon: chevronRight,
            CloseIcon: close,
            AddIcon: add,
            Transition: vue.Transition
          }
        }, {
          resizeObserver: null
        }), {}, {
          props: {
            theme: props$R.theme,
            panels: {
              type: Array,
              "default": function _default() {
                return [];
              }
            },
            value: props$R.value,
            placement: props$R.placement,
            size: props$R.size,
            disabled: props$R.disabled,
            addable: props$R.addable,
            onChange: props$R.onChange,
            onAdd: props$R.onAdd,
            onRemove: props$R.onRemove,
            dragSort: props$R.dragSort,
            onDragSort: props$R.onDragSort
          },
          setup: function setup(props2) {
            var COMPONENT_NAME2 = usePrefixClass("tabs");
            var classPrefix2 = usePrefixClass();
            var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE;
            var scrollLeft = vue.ref(0);
            var canToLeft = vue.ref(false);
            var canToRight = vue.ref(false);
            var navsContainerRef = vue.ref();
            var navsWrapRef = vue.ref();
            var leftOperationsRef = vue.ref();
            var toLeftBtnRef = vue.ref();
            var rightOperationsRef = vue.ref();
            var toRightBtnRef = vue.ref();
            var activeTabRef = vue.ref();
            var getRefs = function getRefs2() {
              return {
                navsContainer: navsContainerRef.value,
                navsWrap: navsWrapRef.value,
                leftOperations: leftOperationsRef.value,
                toLeftBtn: toLeftBtnRef.value,
                rightOperations: rightOperationsRef.value,
                toRightBtn: toRightBtnRef.value
              };
            };
            var wrapTransformStyle = vue.computed(function() {
              if (["left", "right"].includes(props2.placement.toLowerCase()))
                return {};
              return {
                transform: "translate3d(".concat(-scrollLeft.value, "px, 0, 0)")
              };
            });
            var navsContainerStyle = vue.computed(function() {
              return props2.addable ? {
                "min-height": "48px"
              } : null;
            });
            var iconBaseClass = vue.computed(function() {
              var _ref;
              return _ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "__btn"), true), _defineProperty$3(_ref, SIZE.value.medium, props2.size === "medium"), _defineProperty$3(_ref, SIZE.value.large, props2.size === "large"), _ref;
            });
            var leftIconClass = vue.computed(function() {
              return _objectSpread$1z(_defineProperty$3({}, "".concat(COMPONENT_NAME2.value, "__btn--left"), true), iconBaseClass.value);
            });
            var rightIconClass = vue.computed(function() {
              return _objectSpread$1z(_defineProperty$3({}, "".concat(COMPONENT_NAME2.value, "__btn--right"), true), iconBaseClass.value);
            });
            var addIconClass = vue.computed(function() {
              return _objectSpread$1z(_defineProperty$3({}, "".concat(COMPONENT_NAME2.value, "__add-btn"), true), iconBaseClass.value);
            });
            var navContainerClass = vue.computed(function() {
              var _ref2;
              return _ref2 = {}, _defineProperty$3(_ref2, "".concat(COMPONENT_NAME2.value, "__nav-container"), true), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME2.value, "__nav--card"), props2.theme === "card"), _defineProperty$3(_ref2, "".concat(classPrefix2.value, "-is-").concat(props2.placement), true), _defineProperty$3(_ref2, "".concat(classPrefix2.value, "-is-addable"), props2.theme === "card" && props2.addable), _ref2;
            });
            var navScrollContainerClass = vue.computed(function() {
              var _ref3;
              return _ref3 = {}, _defineProperty$3(_ref3, "".concat(COMPONENT_NAME2.value, "__nav-scroll"), true), _defineProperty$3(_ref3, "".concat(classPrefix2.value, "-is-scrollable"), canToLeft.value || canToRight.value), _ref3;
            });
            var navsWrapClass = vue.computed(function() {
              return ["".concat(COMPONENT_NAME2.value, "__nav-wrap"), "".concat(classPrefix2.value, "-is-smooth"), _defineProperty$3({}, "".concat(classPrefix2.value, "-is-vertical"), props2.placement === "left" || props2.placement === "right")];
            });
            var totalAdjust = function totalAdjust2() {
              adjustArrowDisplay();
              adjustScrollLeft();
            };
            vue.watch([scrollLeft, function() {
              return props2.placement;
            }], totalAdjust);
            useResize(debounce_1(totalAdjust), navsContainerRef.value);
            vue.onMounted(totalAdjust);
            var adjustScrollLeft = function adjustScrollLeft2() {
              scrollLeft.value = calcScrollLeft(getRefs(), scrollLeft.value);
            };
            var adjustArrowDisplay = function adjustArrowDisplay2() {
              canToLeft.value = calculateCanToLeft(getRefs(), scrollLeft.value, props2.placement);
              canToRight.value = calculateCanToRight(getRefs(), scrollLeft.value, props2.placement);
            };
            var handleScroll = function handleScroll2(direction) {
              if (direction === "left") {
                scrollLeft.value = scrollToLeft(getRefs(), scrollLeft.value);
              } else {
                scrollLeft.value = scrollToRight(getRefs(), scrollLeft.value);
              }
            };
            var handleAddTab = function handleAddTab2(e) {
              var _props$onAdd;
              (_props$onAdd = props2.onAdd) === null || _props$onAdd === void 0 ? void 0 : _props$onAdd.call(props2, {
                e
              });
            };
            var tabClick = function tabClick2(event, nav) {
              var value = nav.value, disabled = nav.disabled;
              if (disabled || props2.value === value) {
                return false;
              }
              props2.onChange(value);
            };
            var removeBtnClick = function removeBtnClick2(_ref5) {
              var e = _ref5.e, value = _ref5.value, index2 = _ref5.index;
              props2.onRemove({
                e,
                value,
                index: index2
              });
            };
            var setActiveTab = function setActiveTab2(ref2) {
              if ((ref2 === null || ref2 === void 0 ? void 0 : ref2.value) === props2.value && activeTabRef.value !== ref2.$el) {
                activeTabRef.value = ref2.$el;
                scrollLeft.value = moveActiveTabIntoView(_objectSpread$1z({
                  activeTab: activeTabRef.value
                }, getRefs()), scrollLeft.value);
              }
            };
            var _useDragSort = useDragSort$1(props2), setNavsWrap = _useDragSort.setNavsWrap;
            vue.onMounted(function() {
              setNavsWrap(navsWrapRef.value);
            });
            var navs = vue.computed(function() {
              return props2.panels.map(function(panel, index2) {
                var _panel$children;
                var label;
                if (panel !== null && panel !== void 0 && (_panel$children = panel.children) !== null && _panel$children !== void 0 && _panel$children.label) {
                  label = panel.children.label();
                } else {
                  label = panel.label || "\u9009\u9879\u5361".concat(index2 + 1);
                }
                return vue.createVNode(TTabNavItem, {
                  "ref": setActiveTab,
                  "draggable": props2.dragSort,
                  "key": panel.value,
                  "index": index2,
                  "theme": props2.theme,
                  "size": props2.size,
                  "placement": props2.placement,
                  "label": label,
                  "active": panel.value === props2.value,
                  "disabled": props2.disabled || panel.disabled,
                  "removable": panel.removable,
                  "value": panel.value,
                  "onClick": function onClick(e) {
                    return tabClick(e, panel);
                  },
                  "onRemove": removeBtnClick
                }, null);
              });
            });
            var renderArrows = function renderArrows2() {
              return [vue.createVNode("div", {
                "ref": leftOperationsRef,
                "class": ["".concat(COMPONENT_NAME2.value, "__operations"), "".concat(COMPONENT_NAME2.value, "__operations--left")]
              }, [vue.createVNode(vue.resolveComponent("transition"), {
                "name": "fade",
                "mode": "out-in",
                "appear": true
              }, {
                "default": function _default() {
                  return [canToLeft.value ? vue.createVNode("div", {
                    "ref": toLeftBtnRef,
                    "class": leftIconClass.value,
                    "onClick": function onClick() {
                      return handleScroll("left");
                    }
                  }, [vue.createVNode(chevronLeft, null, null)]) : null];
                }
              })]), vue.createVNode("div", {
                "ref": rightOperationsRef,
                "class": ["".concat(COMPONENT_NAME2.value, "__operations"), "".concat(COMPONENT_NAME2.value, "__operations--right")]
              }, [vue.createVNode(vue.resolveComponent("transition"), {
                "name": "fade",
                "mode": "out-in",
                "appear": true
              }, {
                "default": function _default() {
                  return [canToRight.value ? vue.createVNode("div", {
                    "ref": toRightBtnRef,
                    "class": rightIconClass.value,
                    "onClick": function onClick() {
                      return handleScroll("right");
                    }
                  }, [vue.createVNode(chevronRight, null, null)]) : null];
                }
              }), props2.addable ? vue.createVNode("div", {
                "class": addIconClass.value,
                "onClick": handleAddTab
              }, [vue.createVNode(add, null, null)]) : null])];
            };
            var renderNavs = function renderNavs2() {
              return vue.createVNode("div", {
                "class": navContainerClass.value
              }, [vue.createVNode("div", {
                "class": navScrollContainerClass.value
              }, [vue.createVNode("div", {
                "ref": navsWrapRef,
                "class": navsWrapClass.value,
                "style": wrapTransformStyle.value
              }, [props2.theme !== "card" && vue.createVNode(TTabNavBar, {
                "placement": props2.placement,
                "value": props2.value,
                "navs": navs.value
              }, null), navs.value])])]);
            };
            return function() {
              return vue.createVNode("div", {
                "ref": navsContainerRef,
                "class": ["".concat(COMPONENT_NAME2.value, "__nav")],
                "style": navsContainerStyle.value
              }, [renderArrows(), renderNavs()]);
            };
          }
        }));
        var _Tabs = vue.defineComponent({
          name: "TTabs",
          components: {
            TTabPanel: _TabPanel,
            TTabNav
          },
          props: props$R,
          setup: function setup(props2) {
            var COMPONENT_NAME2 = usePrefixClass("tabs");
            var classPrefix2 = usePrefixClass();
            var renderTNodeJSX2 = useTNodeJSX();
            var _toRefs = vue.toRefs(props2), value = _toRefs.value, modelValue = _toRefs.modelValue;
            var _useVModel = useVModel(value, modelValue, props2.defaultValue || "", props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), tabValue = _useVModel2[0], setTabValue = _useVModel2[1];
            vue.provide("tabs", {
              value: tabValue
            });
            var onTabAdd = function onTabAdd2(context) {
              var _props2$onAdd;
              (_props2$onAdd = props2.onAdd) === null || _props2$onAdd === void 0 ? void 0 : _props2$onAdd.call(props2, {
                e: context.e
              });
            };
            var onTabChange = function onTabChange2(value2) {
              setTabValue(value2);
            };
            var onTabRemove = function onTabRemove2(_ref) {
              var e = _ref.e, value2 = _ref.value, index2 = _ref.index;
              props2.onRemove({
                value: value2,
                index: index2,
                e
              });
            };
            var getSlotPanels = function getSlotPanels2() {
              var content = renderTNodeJSX2("default");
              if (!content)
                return [];
              content = content.map(function(item) {
                if (item.children && Array.isArray(item.children))
                  return item.children;
                return item;
              }).flat().filter(function(item) {
                return item.type.name === "TTabPanel";
              });
              return content;
            };
            var renderHeader = function renderHeader2() {
              var _props2$list, _ref2;
              var panels = ((_props2$list = props2.list) !== null && _props2$list !== void 0 && _props2$list.length ? props2.list : getSlotPanels()) || [];
              var panelsData = panels.map(function(item) {
                var selfItem = item;
                if (item.props) {
                  Object.keys(item.props).forEach(function(key) {
                    selfItem[key] = item.props[key];
                  });
                }
                return selfItem;
              });
              var tabNavProps = {
                theme: props2.theme,
                value: tabValue.value,
                size: props2.size,
                disabled: props2.disabled,
                placement: props2.placement,
                addable: props2.addable,
                panels: panelsData,
                dragSort: props2.dragSort
              };
              return vue.createVNode("div", {
                "class": (_ref2 = {}, _defineProperty$3(_ref2, "".concat(classPrefix2.value, "-tabs__header"), true), _defineProperty$3(_ref2, "".concat(classPrefix2.value, "-is-").concat(props2.placement), true), _ref2)
              }, [vue.createVNode(TTabNav, vue.mergeProps(tabNavProps, {
                "onDragSort": props2.onDragSort,
                "onChange": onTabChange,
                "onAdd": onTabAdd,
                "onRemove": onTabRemove
              }), null)]);
            };
            var renderContent2 = function renderContent3() {
              var _props2$list2;
              var panels = getSlotPanels();
              if ((_props2$list2 = props2.list) !== null && _props2$list2 !== void 0 && _props2$list2.length) {
                return props2.list.map(function(item) {
                  return vue.createVNode(_TabPanel, vue.mergeProps(item, {
                    "onRemove": onTabRemove
                  }), null);
                });
              }
              if (panels && panels.length) {
                return vue.createVNode("div", {
                  "class": ["".concat(classPrefix2.value, "-tabs__content")]
                }, [panels]);
              }
              console.warn("Tdesign error: list or slots is empty");
            };
            return function() {
              return vue.createVNode("div", {
                "class": [COMPONENT_NAME2.value]
              }, [props2.placement !== "bottom" ? [renderHeader(), renderContent2()] : [renderContent2(), renderHeader()]]);
            };
          }
        });
        var Tabs = withInstall(_Tabs);
        var TabPanel = withInstall(_TabPanel);
        function ownKeys$1z(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1y(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1z(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1z(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot$o(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var _HeadMenu = vue.defineComponent({
          name: "THeadMenu",
          props: _objectSpread$1y({}, props$S),
          setup: function setup(props2, ctx) {
            var classPrefix2 = usePrefixClass();
            vue.watchEffect(function() {
              if (ctx.slots.options) {
                log.warnOnce("TMenu", "`options` slot is going to be deprecated, please use `operations` for slot instead.");
              }
            });
            var _toRefs = vue.toRefs(props2), value = _toRefs.value, modelValue = _toRefs.modelValue, expanded = _toRefs.expanded;
            var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), activeValue = _useVModel2[0], setActiveValue = _useVModel2[1];
            var _useDefaultValue = useDefaultValue(expanded, props2.defaultExpanded, props2.onExpand, "expanded"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2), expandValues = _useDefaultValue2[0], setExpanded = _useDefaultValue2[1];
            var activeValues = vue.ref([]);
            var theme = vue.computed(function() {
              return props2.theme;
            });
            var menuClass = vue.computed(function() {
              return ["".concat(classPrefix2.value, "-menu"), "".concat(classPrefix2.value, "-head-menu"), "".concat(classPrefix2.value, "-menu--").concat(props2.theme)];
            });
            var mode = vue.ref(props2.expandType);
            var submenu = vue.reactive([]);
            var vMenu = new VMenu({
              isMutex: true,
              expandValues: expandValues.value
            });
            vue.provide("TdMenu", {
              mode,
              theme,
              vMenu,
              isHead: true,
              expandValues,
              activeValue,
              activeValues,
              select: function select(value2) {
                setActiveValue(value2);
              },
              open: function open2(value2, type) {
                var expanded2 = _toConsumableArray(expandValues.value);
                var index2 = expanded2.indexOf(value2);
                if (mode.value === "popup") {
                  if (type === "add") {
                    if (index2 === -1) {
                      expanded2.push(value2);
                    }
                  } else if (type === "remove") {
                    expanded2.splice(index2, 1);
                  }
                } else {
                  expanded2.splice(0, 1);
                  if (index2 === -1) {
                    expanded2.push(value2);
                  }
                }
                setExpanded(expanded2);
              }
            });
            var handleTabChange = function handleTabChange2(value2) {
              setActiveValue(value2);
            };
            var handleSubmenuExpand = function handleSubmenuExpand2(value2) {
              var ans = vMenu.getChild(value2);
              submenu.length = 0;
              submenu.push.apply(submenu, _toConsumableArray(ans));
            };
            vue.watch(expandValues, function(value2) {
              if (mode.value === "normal") {
                handleSubmenuExpand(value2[0]);
              }
            });
            var updateActiveValues = function updateActiveValues2(value2) {
              activeValues.value = vMenu.select(value2);
            };
            vue.watch(activeValue, updateActiveValues);
            vue.watch(function() {
              return props2.expandType;
            }, function(value2) {
              mode.value = value2;
            });
            vue.onMounted(function() {
              var _expandValues$value;
              activeValues.value = vMenu.select(activeValue.value);
              if (((_expandValues$value = expandValues.value) === null || _expandValues$value === void 0 ? void 0 : _expandValues$value.length) > 0) {
                handleSubmenuExpand(expandValues.value[0]);
              }
            });
            return {
              classPrefix: classPrefix2,
              mode,
              menuClass,
              expandValues,
              activeValue,
              activeValues,
              submenu,
              handleTabChange
            };
          },
          methods: {
            renderNormalSubmenu: function renderNormalSubmenu() {
              var _slot;
              if (this.submenu.length === 0)
                return null;
              return vue.createVNode("ul", {
                "class": ["".concat(this.classPrefix, "-head-menu__submenu"), "".concat(this.classPrefix, "-submenu")]
              }, [vue.createVNode(Tabs, {
                "value": this.activeValue,
                "onChange": this.handleTabChange
              }, _isSlot$o(_slot = this.submenu.map(function(item) {
                var _item$vnode$;
                return vue.createVNode(TabPanel, {
                  "value": item.value,
                  "label": (_item$vnode$ = item.vnode()[0]) === null || _item$vnode$ === void 0 ? void 0 : _item$vnode$.children
                }, null);
              })) ? _slot : {
                "default": function _default() {
                  return [_slot];
                }
              })]);
            }
          },
          render: function render() {
            var classPrefix2 = this.classPrefix;
            var operations = renderContent(this, "operations", "options");
            var logo = renderTNodeJSX(this, "logo");
            return vue.createVNode("div", {
              "class": this.menuClass
            }, [vue.createVNode("div", {
              "class": "".concat(classPrefix2, "-head-menu__inner")
            }, [logo && vue.createVNode("div", {
              "class": "".concat(classPrefix2, "-menu__logo")
            }, [logo]), vue.createVNode("ul", {
              "class": "".concat(classPrefix2, "-menu")
            }, [renderContent(this, "default", "content")]), operations && vue.createVNode("div", {
              "class": "".concat(classPrefix2, "-menu__operations")
            }, [operations])]), this.mode === "normal" && this.renderNormalSubmenu()]);
          }
        });
        var props$Q = {
          content: {
            type: [String, Function]
          },
          "default": {
            type: [String, Function]
          },
          disabled: Boolean,
          icon: {
            type: Function
          },
          title: {
            type: [String, Function]
          },
          value: {
            type: [String, Number]
          }
        };
        var FakeArrow = vue.defineComponent({
          name: "TFakeArrow",
          props: {
            isActive: {
              type: Boolean
            },
            overlayClassName: {
              type: [String, Object, Array]
            },
            overlayStyle: {
              type: Object || String
            }
          },
          setup: function setup(props2) {
            var COMPONENT_NAME2 = usePrefixClass("fake-arrow");
            var classes = vue.computed(function() {
              return [COMPONENT_NAME2.value, _defineProperty$3({}, "".concat(COMPONENT_NAME2.value, "--active"), props2.isActive), props2.overlayClassName];
            });
            return {
              classes
            };
          },
          render: function render() {
            return vue.createVNode("svg", {
              "class": this.classes,
              "width": "16",
              "height": "16",
              "viewBox": "0 0 16 16",
              "fill": "none",
              "xmlns": "http://www.w3.org/2000/svg",
              "style": this.overlayStyle
            }, [vue.createVNode("path", {
              "d": "M3.75 5.7998L7.99274 10.0425L12.2361 5.79921",
              "stroke": "black",
              "stroke-opacity": "0.9",
              "stroke-width": "1.3"
            }, null)]);
          }
        });
        function ownKeys$1y(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1x(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1y(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1y(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _Submenu = vue.defineComponent({
          name: "TSubmenu",
          props: props$Q,
          setup: function setup(props2, ctx) {
            var classPrefix2 = usePrefixClass();
            var menu = vue.inject("TdMenu");
            var theme = menu.theme, activeValues = menu.activeValues, expandValues = menu.expandValues, mode = menu.mode, isHead = menu.isHead, open2 = menu.open;
            var submenu = vue.inject("TdSubmenu", null);
            var menuItems = vue.ref([]);
            var isActive = vue.computed(function() {
              return activeValues.value.indexOf(props2.value) > -1;
            });
            var popupVisible = vue.ref(false);
            var isCursorInPopup = vue.ref(false);
            var rippleColor = vue.computed(function() {
              return theme.value === "light" ? "#E7E7E7" : "#383838";
            });
            var isOpen = vue.computed(function() {
              var _expandValues$value;
              if (mode.value === "popup") {
                return popupVisible.value;
              }
              return expandValues ? (_expandValues$value = expandValues.value) === null || _expandValues$value === void 0 ? void 0 : _expandValues$value.includes(props2.value) : false;
            });
            var isNested = vue.ref(false);
            var submenuRef = vue.ref();
            useRipple(submenuRef, rippleColor);
            var classes = vue.computed(function() {
              var _ref;
              return ["".concat(classPrefix2.value, "-submenu"), (_ref = {}, _defineProperty$3(_ref, "".concat(classPrefix2.value, "-is-disabled"), props2.disabled), _defineProperty$3(_ref, "".concat(classPrefix2.value, "-is-opened"), isOpen.value), _ref)];
            });
            var popupClass = vue.computed(function() {
              return ["".concat(classPrefix2.value, "-menu__popup"), "".concat(classPrefix2.value, "-menu__popup--").concat(theme.value), "".concat(classPrefix2.value, "-is-").concat(isHead ? "horizontal" : "vertical"), _defineProperty$3({}, "".concat(classPrefix2.value, "-is-opened"), popupVisible.value)];
            });
            var submenuClass = vue.computed(function() {
              var _ref3;
              return ["".concat(classPrefix2.value, "-menu__item"), "".concat(classPrefix2.value, "-menu__item-spacer"), "".concat(classPrefix2.value, "-menu__item-spacer--").concat(isHead && !isNested.value ? "bottom" : "right"), (_ref3 = {}, _defineProperty$3(_ref3, "".concat(classPrefix2.value, "-is-disabled"), props2.disabled), _defineProperty$3(_ref3, "".concat(classPrefix2.value, "-is-opened"), isOpen.value), _defineProperty$3(_ref3, "".concat(classPrefix2.value, "-is-active"), isActive.value), _ref3)];
            });
            var subClass = vue.computed(function() {
              return ["".concat(classPrefix2.value, "-menu__sub"), _defineProperty$3({}, "".concat(classPrefix2.value, "-is-opened"), isOpen.value)];
            });
            var arrowClass = vue.computed(function() {
              return [_defineProperty$3({}, "".concat(classPrefix2.value, "-fake-arrow--active"), isOpen.value)];
            });
            var handleMouseEnter = function handleMouseEnter2() {
              if (props2.disabled)
                return;
              setTimeout(function() {
                if (!popupVisible.value) {
                  open2(props2.value);
                }
                popupVisible.value = true;
              }, 0);
            };
            var handleMouseLeave = function handleMouseLeave2(e) {
              setTimeout(function() {
                var _e$relatedTarget;
                var inPopup = (_e$relatedTarget = e.relatedTarget) === null || _e$relatedTarget === void 0 ? void 0 : _e$relatedTarget.classList.contains("".concat(classPrefix2.value, "-menu__popup"));
                if (isCursorInPopup.value || inPopup)
                  return;
                popupVisible.value = false;
              }, 0);
            };
            var handleMouseLeavePopup = function handleMouseLeavePopup2(e) {
              var toElement = e.toElement;
              var target = toElement;
              var isSubmenu = function isSubmenu2(el) {
                return el === submenuRef.value;
              };
              while (target !== document && !isSubmenu(target)) {
                target = target.parentNode;
              }
              isCursorInPopup.value = false;
              if (!isSubmenu(target)) {
                popupVisible.value = false;
              }
            };
            var handleEnterPopup = function handleEnterPopup2() {
              isCursorInPopup.value = true;
            };
            var handleSubmenuItemClick = function handleSubmenuItemClick2() {
              if (props2.disabled)
                return;
              open2(props2.value);
            };
            vue.watch(popupVisible, function(visible) {
              menu.open(props2.value, visible ? "add" : "remove");
            });
            var _toRefs = vue.toRefs(props2), value = _toRefs.value;
            vue.provide("TdSubmenu", vue.reactive({
              value,
              addMenuItem: function addMenuItem(item) {
                menuItems.value.push(item);
                if (submenu) {
                  submenu.addMenuItem(item);
                }
              }
            }));
            vue.onMounted(function() {
              var _menu$vMenu;
              menu === null || menu === void 0 ? void 0 : (_menu$vMenu = menu.vMenu) === null || _menu$vMenu === void 0 ? void 0 : _menu$vMenu.add({
                value: props2.value,
                parent: submenu === null || submenu === void 0 ? void 0 : submenu.value,
                vnode: ctx.slots["default"]
              });
              var instance = vue.getCurrentInstance();
              var node = instance.parent;
              while (node && !/^t(head)?menu/i.test((_node = node) === null || _node === void 0 ? void 0 : _node.type.name)) {
                var _node, _node2, _node3;
                if (/submenu/i.test((_node2 = node) === null || _node2 === void 0 ? void 0 : _node2.type.name)) {
                  isNested.value = true;
                  break;
                }
                node = (_node3 = node) === null || _node3 === void 0 ? void 0 : _node3.parent;
              }
            });
            return {
              classPrefix: classPrefix2,
              menuItems,
              mode,
              theme,
              isHead,
              isNested,
              classes,
              subClass,
              arrowClass,
              popupClass,
              submenuClass,
              submenuRef,
              popupVisible,
              isCursorInPopup,
              handleEnterPopup,
              handleMouseEnter,
              handleMouseLeave,
              handleMouseLeavePopup,
              handleSubmenuItemClick
            };
          },
          methods: {
            renderPopup: function renderPopup(triggerElement) {
              var _this = this;
              var placement = "right-top";
              if (!this.isNested && this.isHead) {
                placement = "bottom-left";
              }
              var overlayStyle = _defineProperty$3({}, "margin-".concat(this.isHead ? "top" : "left"), "20px");
              var popupWrapper = vue.createVNode("div", {
                "class": ["".concat(this.classPrefix, "-menu__spacer"), "".concat(this.classPrefix, "-menu__spacer--").concat(!this.isNested && this.isHead ? "top" : "left")],
                "onMouseenter": this.handleEnterPopup,
                "onMouseleave": this.handleMouseLeavePopup
              }, [vue.createVNode("ul", {
                "class": "".concat(this.classPrefix, "-menu__popup-wrapper")
              }, [renderContent(this, "default", "content")])]);
              var popupInside = vue.createVNode("div", {
                "ref": "submenuRef",
                "class": this.submenuClass
              }, [triggerElement, vue.createVNode("div", {
                "class": this.popupClass
              }, [popupWrapper])]);
              var slots = {
                content: function content() {
                  return popupWrapper;
                }
              };
              var realPopup = vue.createVNode(Popup, {
                "overlayClassName": _toConsumableArray(this.popupClass),
                "visible": this.popupVisible,
                "placement": placement,
                "overlayStyle": overlayStyle
              }, _objectSpread$1x({
                "default": function _default() {
                  return [vue.createVNode("div", {
                    "ref": "submenuRef",
                    "class": _this.submenuClass
                  }, [triggerElement])];
                }
              }, slots));
              return this.isNested ? popupInside : realPopup;
            },
            renderHeadSubmenu: function renderHeadSubmenu() {
              var icon = renderTNodeJSX(this, "icon");
              var normalSubmenu = [vue.createVNode("div", {
                "ref": "submenuRef",
                "class": this.submenuClass,
                "onClick": this.handleSubmenuItemClick
              }, [icon, vue.createVNode("span", {
                "class": ["".concat(this.classPrefix, "-menu__content")]
              }, [renderTNodeJSX(this, "title", {
                silent: true
              })])]), vue.createVNode("ul", {
                "style": "opacity: 0; width: 0; height: 0; overflow: hidden"
              }, [renderContent(this, "default", "content")])];
              var needRotate = this.mode === "popup" && this.isNested;
              var triggerElement = [icon, vue.createVNode("span", {
                "class": ["".concat(this.classPrefix, "-menu__content")]
              }, [renderTNodeJSX(this, "title", {
                silent: true
              })]), vue.createVNode(FakeArrow, {
                "overlayClassName": this.arrowClass,
                "overlayStyle": {
                  transform: "rotate(".concat(needRotate ? -90 : 0, "deg)")
                }
              }, null)];
              return this.mode === "normal" ? normalSubmenu : this.renderPopup(triggerElement);
            },
            renderSubmenu: function renderSubmenu() {
              var hasContent = this.$slots.content || this.$slots["default"];
              var icon = renderTNodeJSX(this, "icon");
              var child = renderContent(this, "default", "content");
              var _getCurrentInstance = vue.getCurrentInstance(), parent2 = _getCurrentInstance.parent;
              var paddingLeft = 44;
              while (parent2 && parent2.type.name !== "TMenu") {
                if (parent2.type.name === "TSubmenu") {
                  paddingLeft += 16;
                }
                parent2 = parent2.parent;
              }
              var needRotate = this.mode === "popup" && this.isNested;
              var normalSubmenu = [vue.createVNode("div", {
                "ref": "submenuRef",
                "class": this.submenuClass,
                "onClick": this.handleSubmenuItemClick
              }, [icon, vue.createVNode("span", {
                "class": ["".concat(this.classPrefix, "-menu__content")]
              }, [renderTNodeJSX(this, "title", {
                silent: true
              })]), hasContent && vue.createVNode(FakeArrow, {
                "overlayClassName": this.arrowClass,
                "overlayStyle": {
                  transform: "rotate(".concat(needRotate ? -90 : 0, "deg)")
                }
              }, null)]), vue.createVNode("ul", {
                "class": this.subClass,
                "style": {
                  "--padding-left": "".concat(paddingLeft, "px")
                }
              }, [child])];
              var triggerElement = [icon, vue.createVNode("span", {
                "class": ["".concat(this.classPrefix, "-menu__content")]
              }, [renderTNodeJSX(this, "title", {
                silent: true
              })]), vue.createVNode(FakeArrow, {
                "overlayClassName": this.arrowClass,
                "overlayStyle": {
                  transform: "rotate(".concat(needRotate ? -90 : 0, "deg)"),
                  "margin-left": "auto"
                }
              }, null)];
              return this.mode === "normal" ? normalSubmenu : this.renderPopup(triggerElement);
            }
          },
          render: function render() {
            var child = null;
            var events = {};
            if (this.mode === "popup") {
              events = {
                onmouseenter: this.handleMouseEnter,
                onmouseleave: this.handleMouseLeave
              };
            }
            if (Object.keys(this.$slots).length > 0) {
              child = this.isHead ? this.renderHeadSubmenu() : this.renderSubmenu();
            }
            return vue.createVNode("li", vue.mergeProps({
              "class": this.classes
            }, events), [child]);
          }
        });
        var props$P = {
          content: {
            type: [String, Function]
          },
          "default": {
            type: [String, Function]
          },
          disabled: Boolean,
          href: {
            type: String,
            "default": ""
          },
          icon: {
            type: Function
          },
          replace: Boolean,
          router: {
            type: Object
          },
          target: {
            type: String,
            validator: function validator(val) {
              if (!val)
                return true;
              return ["_blank", "_self", "_parent", "_top"].includes(val);
            }
          },
          to: {
            type: [String, Object]
          },
          value: {
            type: [String, Number]
          },
          onClick: Function
        };
        function emitEvent(vm, eventName) {
          var emitEventMethodName;
          if (typeof eventName === "string") {
            emitEventMethodName = getPropsApiByEvent(eventName);
          }
          for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            args[_key - 2] = arguments[_key];
          }
          if (typeof vm.$props[emitEventMethodName] === "function") {
            var _vm$$props;
            (_vm$$props = vm.$props)[emitEventMethodName].apply(_vm$$props, args);
          } else {
            vm.$emit.apply(vm, [eventName].concat(args));
          }
        }
        function ownKeys$1x(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1w(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1x(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1x(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _MenuItem = vue.defineComponent({
          name: "TMenuItem",
          props: _objectSpread$1w({}, props$P),
          emits: ["click"],
          setup: function setup(props2, ctx) {
            var classPrefix2 = usePrefixClass();
            var menu = vue.inject("TdMenu");
            var itemRef = vue.ref();
            useRipple(itemRef);
            var submenu = vue.inject("TdSubmenu", null);
            var active = vue.computed(function() {
              return menu.activeValue.value === props2.value;
            });
            var classes = vue.computed(function() {
              var _ref;
              return ["".concat(classPrefix2.value, "-menu__item"), (_ref = {}, _defineProperty$3(_ref, "".concat(classPrefix2.value, "-is-active"), active.value), _defineProperty$3(_ref, "".concat(classPrefix2.value, "-is-disabled"), props2.disabled), _defineProperty$3(_ref, "".concat(classPrefix2.value, "-menu__item--plain"), !ctx.slots.icon && !props2.icon), _defineProperty$3(_ref, "".concat(classPrefix2.value, "-submenu__item"), !!submenu && !menu.isHead), _ref)];
            });
            vue.onMounted(function() {
              var _menu$vMenu;
              menu === null || menu === void 0 ? void 0 : (_menu$vMenu = menu.vMenu) === null || _menu$vMenu === void 0 ? void 0 : _menu$vMenu.add({
                value: props2.value,
                parent: submenu === null || submenu === void 0 ? void 0 : submenu.value,
                vnode: ctx.slots["default"]
              });
            });
            return {
              classPrefix: classPrefix2,
              menu,
              active,
              classes,
              itemRef
            };
          },
          methods: {
            handleClick: function handleClick() {
              if (this.disabled)
                return;
              this.menu.select(this.value);
              emitEvent(this, "click");
              if (this.href) {
                window.open(this.href, this.target);
              } else if (this.to) {
                var router = this.router || this.$router;
                var methods = this.replace ? "replace" : "push";
                router[methods](this.to)["catch"](function(err) {
                  if (err.name !== "NavigationDuplicated" && !err.message.includes("Avoided redundant navigation to current location")) {
                    throw err;
                  }
                });
              }
            }
          },
          render: function render() {
            return vue.createVNode("li", {
              "ref": "itemRef",
              "class": this.classes,
              "onClick": this.handleClick
            }, [renderTNodeJSX(this, "icon"), vue.createVNode("span", {
              "class": ["".concat(this.classPrefix, "-menu__content")]
            }, [renderContent(this, "default", "content")])]);
          }
        });
        var props$O = {
          title: {
            type: [String, Function]
          }
        };
        var _MenuGroup = vue.defineComponent({
          name: "TMenuGroup",
          props: props$O,
          setup: function setup() {
            var classPrefix2 = usePrefixClass();
            return {
              classPrefix: classPrefix2
            };
          },
          render: function render() {
            var classPrefix2 = this.classPrefix;
            return vue.createVNode("div", {
              "class": "".concat(classPrefix2, "-menu-group")
            }, [vue.createVNode("div", {
              "class": "".concat(classPrefix2, "-menu-group__title")
            }, [this.title]), renderTNodeJSX(this, "default")]);
          }
        });
        var Menu = withInstall(_Menu);
        var HeadMenu = withInstall(_HeadMenu);
        var Submenu = withInstall(_Submenu);
        var MenuItem = withInstall(_MenuItem);
        var MenuGroup = withInstall(_MenuGroup);
        var baseGetTag$2 = _baseGetTag, isObjectLike$3 = isObjectLike_1;
        var numberTag$1 = "[object Number]";
        function isNumber$1(value) {
          return typeof value == "number" || isObjectLike$3(value) && baseGetTag$2(value) == numberTag$1;
        }
        var isNumber_1 = isNumber$1;
        var isNumber = isNumber_1;
        function isNaN$1(value) {
          return isNumber(value) && value != +value;
        }
        var _isNaN = isNaN$1;
        var _Addon = vue.defineComponent({
          name: "TAddon",
          inheritAttrs: false,
          props: {
            prepend: {
              type: [String, Function],
              "default": function _default() {
                return "";
              }
            },
            append: {
              type: [String, Function],
              "default": function _default() {
                return "";
              }
            }
          },
          setup: function setup(props2, _ref) {
            var slots = _ref.slots;
            var COMPONENT_NAME2 = usePrefixClass("addon");
            var renderTNodeJSX2 = useTNodeJSX();
            var renderAddon = function renderAddon2(h2, type, addon) {
              var addonNode;
              if (slots[type]) {
                addonNode = slots[type](null);
              } else if (typeof addon === "string") {
                addonNode = addon;
              } else if (typeof addon === "function") {
                addonNode = addon(h2);
              } else {
                addonNode = null;
              }
              return addonNode ? vue.createVNode("span", {
                "class": "".concat(COMPONENT_NAME2.value, "__").concat(type)
              }, [addonNode]) : addonNode;
            };
            return function() {
              var _ref2;
              var prepend = renderAddon(vue.h, "prepend", props2.prepend);
              var append = renderAddon(vue.h, "append", props2.append);
              var defaultSlot = renderTNodeJSX2("default") || [null];
              var className = [COMPONENT_NAME2.value, (_ref2 = {}, _defineProperty$3(_ref2, "".concat(COMPONENT_NAME2.value, "--prepend"), prepend), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME2.value, "--append"), append), _ref2)];
              if (!prepend && !append) {
                return defaultSlot[0];
              }
              return vue.createVNode("div", {
                "class": className
              }, [prepend, defaultSlot[0], append]);
            };
          }
        });
        var props$N = {
          align: {
            type: String,
            "default": "left",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["left", "center", "right"].includes(val);
            }
          },
          autocomplete: {
            type: String,
            "default": ""
          },
          autofocus: Boolean,
          autoWidth: Boolean,
          clearable: Boolean,
          disabled: Boolean,
          format: {
            type: Function
          },
          inputClass: {
            type: [String, Object, Array]
          },
          label: {
            type: [String, Function]
          },
          maxcharacter: {
            type: Number
          },
          maxlength: {
            type: Number
          },
          name: {
            type: String,
            "default": ""
          },
          placeholder: {
            type: String,
            "default": void 0
          },
          prefixIcon: {
            type: Function
          },
          readonly: Boolean,
          showClearIconOnEmpty: Boolean,
          size: {
            type: String,
            "default": "medium",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["small", "medium", "large"].includes(val);
            }
          },
          status: {
            type: String,
            validator: function validator(val) {
              if (!val)
                return true;
              return ["success", "warning", "error"].includes(val);
            }
          },
          suffix: {
            type: [String, Function]
          },
          suffixIcon: {
            type: Function
          },
          tips: {
            type: [String, Function]
          },
          type: {
            type: String,
            "default": "text",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["text", "number", "url", "tel", "password", "search", "submit", "hidden"].includes(val);
            }
          },
          value: {
            type: [String, Number],
            "default": void 0
          },
          modelValue: {
            type: [String, Number],
            "default": void 0
          },
          defaultValue: {
            type: [String, Number]
          },
          onBlur: Function,
          onChange: Function,
          onClear: Function,
          onCompositionend: Function,
          onCompositionstart: Function,
          onEnter: Function,
          onFocus: Function,
          onKeydown: Function,
          onKeypress: Function,
          onKeyup: Function,
          onMouseenter: Function,
          onMouseleave: Function,
          onPaste: Function,
          onWheel: Function
        };
        function useIcon() {
          var instance = vue.getCurrentInstance();
          return function renderIconTNode(iconType, defaultIcons) {
            var iconContent;
            if (typeof instance.props[iconType] === "function") {
              iconContent = instance.props[iconType](vue.h);
            } else if (instance.slots[iconType]) {
              iconContent = instance.slots[iconType] && instance.slots[iconType](null)[0];
            } else if (defaultIcons) {
              var Component = defaultIcons[instance.props.theme];
              iconContent = vue.createVNode(Component, null, null);
            }
            return iconContent;
          };
        }
        function useChildComponentSlots() {
          var instance = vue.getCurrentInstance();
          return function(childComponentName, slots) {
            var _slots, _slots$default;
            if (!slots) {
              slots = instance.slots;
            }
            var content = ((_slots = slots) === null || _slots === void 0 ? void 0 : (_slots$default = _slots["default"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(_slots)) || [];
            return content.map(function(item) {
              if (item.children && Array.isArray(item.children))
                return item.children;
              return item;
            }).flat().filter(function(item) {
              return item.type.name === childComponentName;
            });
          };
        }
        function useCommonClassName() {
          var _useConfig = useConfig(), classPrefix2 = _useConfig.classPrefix;
          var sizeClassNames = {
            small: "".concat(classPrefix2.value, "-size-s"),
            medium: "".concat(classPrefix2.value, "-size-m"),
            large: "".concat(classPrefix2.value, "-size-l"),
            "default": "",
            xs: "".concat(classPrefix2.value, "-size-xs"),
            xl: "".concat(classPrefix2.value, "-size-xl"),
            block: "".concat(classPrefix2.value, "-size-full-width")
          };
          var statusClassNames = {
            loading: "".concat(classPrefix2.value, "-is-loading"),
            loadMore: "".concat(classPrefix2.value, "-is-load-more"),
            disabled: "".concat(classPrefix2.value, "-is-disabled"),
            focused: "".concat(classPrefix2.value, "-is-focused"),
            success: "".concat(classPrefix2.value, "-is-success"),
            error: "".concat(classPrefix2.value, "-is-error"),
            warning: "".concat(classPrefix2.value, "-is-warning"),
            selected: "".concat(classPrefix2.value, "-is-selected"),
            active: "".concat(classPrefix2.value, "-is-active"),
            checked: "".concat(classPrefix2.value, "-is-checked"),
            current: "".concat(classPrefix2.value, "-is-current"),
            hidden: "".concat(classPrefix2.value, "-is-hidden"),
            visible: "".concat(classPrefix2.value, "-is-visible"),
            expanded: "".concat(classPrefix2.value, "-is-expanded"),
            indeterminate: "".concat(classPrefix2.value, "-is-indeterminate")
          };
          return {
            sizeClassNames,
            statusClassNames,
            classNames: {
              size: sizeClassNames,
              status: statusClassNames
            }
          };
        }
        function ownKeys$1w(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1v(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1w(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1w(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var useVirtualScroll = function useVirtualScroll2(_ref) {
          var data = _ref.data, container = _ref.container, _ref$fixedHeight = _ref.fixedHeight, fixedHeight = _ref$fixedHeight === void 0 ? false : _ref$fixedHeight, _ref$lineHeight = _ref.lineHeight, lineHeight = _ref$lineHeight === void 0 ? 30 : _ref$lineHeight, _ref$bufferSize = _ref.bufferSize, bufferSize = _ref$bufferSize === void 0 ? 20 : _ref$bufferSize, _ref$threshold = _ref.threshold, threshold = _ref$threshold === void 0 ? 100 : _ref$threshold;
          var state = vue.reactive({
            visibleData: [],
            cachedHeight: [],
            cachedScrollY: []
          });
          var isVirtual = vue.computed(function() {
            return data.value.length > threshold;
          });
          var updateId = vue.ref(0);
          var trs = /* @__PURE__ */ new Map();
          var visibleCount = 0;
          var beforeScrollTop = 0;
          var index2 = 0;
          var offset2 = 0;
          var start2 = 0;
          var last2 = 0;
          var reset = function reset2() {
            data.value.forEach(function(item, i2) {
              item.$index = i2;
              if (fixedHeight) {
                state.cachedScrollY[i2] = i2 * lineHeight;
              }
            });
            if (!fixedHeight) {
              state.cachedScrollY[data.value.length - 1] = void 0;
            }
          };
          reset();
          var scrollHeight = vue.computed(function() {
            var cachedHeight = state.cachedHeight;
            var length = cachedHeight.length;
            if (length) {
              var maxScrollY = cachedHeight.reduce(function(sum, v) {
                return sum + v || lineHeight;
              }, 0);
              if (cachedHeight.length === data.value.length) {
                return maxScrollY;
              }
              var average = maxScrollY / cachedHeight.length;
              return maxScrollY + (data.value.length - cachedHeight.length) * average;
            }
            return isVirtual.value ? data.value.length * lineHeight : 0;
          });
          var translateY = vue.computed(function() {
            var visibleData = state.visibleData;
            var firstRow = visibleData[0];
            if (firstRow) {
              return visibleData.length === 1 ? 0 : state.cachedScrollY[firstRow.$index];
            }
            return 0;
          });
          var updateVisibleData = function updateVisibleData2() {
            last2 = Math.min(start2 + visibleCount + bufferSize * 2, data.value.length);
            state.visibleData = data.value.slice(start2, last2);
          };
          var calculateScrollY = function calculateScrollY2() {
            var _anchorDom$getBoundin;
            var anchorDom = trs.get(index2);
            if (!anchorDom) {
              return;
            }
            var anchorDomHeight = anchorDom === null || anchorDom === void 0 ? void 0 : (_anchorDom$getBoundin = anchorDom.getBoundingClientRect()) === null || _anchorDom$getBoundin === void 0 ? void 0 : _anchorDom$getBoundin.height;
            state.cachedScrollY[index2] = container.value.scrollTop - offset2;
            state.cachedHeight[index2] = anchorDomHeight;
            for (var i2 = index2 + 1; i2 <= state.visibleData[state.visibleData.length - 1].$index; i2++) {
              var tr = trs.get(i2);
              var _ref2 = (tr === null || tr === void 0 ? void 0 : tr.getBoundingClientRect()) || {}, height = _ref2.height;
              state.cachedHeight[i2] = height;
              var scrollY = state.cachedScrollY[i2 - 1] + state.cachedHeight[i2 - 1];
              state.cachedScrollY.splice(i2, 1, scrollY);
            }
            for (var _i = index2 - 1; _i >= state.visibleData[0].$index; _i--) {
              var _tr = trs.get(_i);
              var _ref3 = (_tr === null || _tr === void 0 ? void 0 : _tr.getBoundingClientRect()) || {}, _height = _ref3.height;
              state.cachedHeight[_i] = _height;
              var _scrollY = state.cachedScrollY[_i + 1] - state.cachedHeight[_i];
              state.cachedScrollY.splice(_i, 1, _scrollY);
            }
            if (state.cachedScrollY[0] > 0) {
              var distance = state.cachedScrollY[0];
              var length = Math.min(last2, data.value.length);
              for (var _i2 = 0; _i2 < length; _i2++) {
                state.cachedScrollY.splice(_i2, 1, state.cachedScrollY[_i2] - distance);
              }
              var scrollTop = state.cachedScrollY[index2 - 1] ? state.cachedScrollY[index2 - 1] + offset2 : offset2;
              container.value.scrollTop = scrollTop;
              beforeScrollTop = scrollTop;
            }
            if (state.cachedScrollY[start2] < 0) {
              var s = state.cachedHeight.slice(0, Math.max(0, index2)).reduce(function(sum, v) {
                return sum + v;
              }, 0) + offset2;
              container.value.scrollTop = s;
              beforeScrollTop = s;
              if (s === 0) {
                index2 = 0;
                offset2 = 0;
              }
            }
            vue.nextTick(function() {
              var _container$value = container.value, scrollTop2 = _container$value.scrollTop, scrollHeight2 = _container$value.scrollHeight, clientHeight = _container$value.clientHeight;
              if (scrollTop2 + clientHeight === scrollHeight2) {
                for (var _i3 = last2 - 1; _i3 >= start2; _i3--) {
                  if (_i3 === last2 - 1) {
                    state.cachedScrollY.splice(_i3, 1, scrollHeight2.value - state.cachedHeight[_i3]);
                  } else {
                    state.cachedScrollY.splice(_i3, 1, state.cachedScrollY[_i3 + 1] - state.cachedHeight[_i3]);
                  }
                }
              }
            });
          };
          var handleScroll = function handleScroll2() {
            if (!isVirtual.value)
              return;
            var scrollTop = container.value.scrollTop;
            var distance = scrollTop - beforeScrollTop;
            beforeScrollTop = scrollTop;
            distance += offset2;
            var lastIndex = index2;
            if (!distance)
              return;
            if (distance >= 0) {
              while (lastIndex < data.value.length && distance > (state.cachedHeight[lastIndex] || lineHeight)) {
                if (!state.cachedHeight[lastIndex]) {
                  state.cachedHeight[lastIndex] = lineHeight;
                }
                distance -= state.cachedHeight[lastIndex];
                lastIndex++;
              }
              if (lastIndex >= data.value.length) {
                index2 = data.value.length - 1;
                offset2 = 0;
              } else {
                index2 = lastIndex;
                offset2 = distance;
              }
              var _container$value2 = container.value, clientHeight = _container$value2.clientHeight, scrollHeight2 = _container$value2.scrollHeight;
              if (scrollTop + clientHeight === scrollHeight2) {
                index2 = data.value.length - visibleCount + 1;
              }
              if (start2 <= index2 - bufferSize) {
                start2 = Math.min(data.value.length - visibleCount, index2 - bufferSize);
                if (start2 < 0) {
                  start2 = 0;
                }
              }
            } else {
              while (distance < 0) {
                lastIndex--;
                if (!state.cachedHeight[lastIndex]) {
                  state.cachedHeight[lastIndex] = lineHeight;
                }
                distance += state.cachedHeight[lastIndex];
              }
              if (lastIndex < 0) {
                index2 = 0;
                offset2 = 0;
              } else {
                index2 = lastIndex;
                offset2 = distance;
              }
              calculateScrollY();
              if (start2 > index2 - bufferSize) {
                start2 = Math.max(0, index2 - bufferSize);
              }
            }
            updateVisibleData();
          };
          !fixedHeight && vue.watch(updateId, calculateScrollY, {
            flush: "post"
          });
          var handleRowMounted = function handleRowMounted2() {
            if (!isVirtual.value)
              return;
            updateId.value++;
          };
          vue.watch(data, function() {
            reset();
            state.visibleData = [];
            state.cachedScrollY = [];
            state.cachedHeight = [];
            beforeScrollTop = 0;
            index2 = 0;
            offset2 = 0;
            start2 = 0;
            trs.clear();
            if (data.value.length <= threshold) {
              state.visibleData = data.value;
            } else {
              updateVisibleData();
            }
            container.value && (container.value.scrollTop = 0);
          });
          var mounted = false;
          var refreshContainer = function refreshContainer2() {
            if (mounted) {
              visibleCount = Math.ceil(container.value.offsetHeight / lineHeight);
              updateVisibleData();
            }
          };
          vue.onMounted(function() {
            if (!window || !window.IntersectionObserver) {
              return;
            }
            var ob = new window.IntersectionObserver(function(entries) {
              var entry = entries[0];
              if (entry.isIntersecting || entry.intersectionRatio) {
                mounted = true;
                isVirtual.value && refreshContainer();
                ob.unobserve(container.value);
              }
            });
            container.value && ob.observe(container.value);
          });
          return _objectSpread$1v(_objectSpread$1v({
            trs,
            scrollHeight
          }, vue.toRefs(state)), {}, {
            translateY,
            handleScroll,
            handleRowMounted,
            refreshContainer,
            fixedHeight,
            calculateScrollY
          });
        };
        var useCLASSNAMES$1 = function useCLASSNAMES2() {
          var classPrefix2 = usePrefixClass();
          return vue.computed(function() {
            var form = "".concat(classPrefix2.value, "-form");
            var input = "".concat(classPrefix2.value, "-input");
            var is = "".concat(classPrefix2.value, "-is");
            return {
              form,
              label: "".concat(form, "__label"),
              labelTop: "".concat(form, "__label--top"),
              inline: "".concat(form, "-inline"),
              formItem: "".concat(form, "__item"),
              formItemWithHelp: "".concat(form, "__item-with-help"),
              formItemWithExtra: "".concat(form, "__item-with-extra"),
              controls: "".concat(form, "__controls"),
              controlsContent: "".concat(form, "__controls-content"),
              status: "".concat(form, "__status"),
              extra: "".concat(input, "__extra"),
              help: "".concat(input, "__help"),
              success: "".concat(is, "-success"),
              successBorder: "".concat(form, "--success-border"),
              error: "".concat(is, "-error"),
              warning: "".concat(is, "-warning")
            };
          });
        };
        var FormInjectionKey = Symbol("FormProvide");
        var FormItemInjectionKey = Symbol("FormItemProvide");
        function useInput(props2, expose) {
          var _toRefs = vue.toRefs(props2), value = _toRefs.value, modelValue = _toRefs.modelValue;
          var inputValue = vue.ref();
          var clearIconRef = vue.ref(null);
          var innerClickElement = vue.ref();
          var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerValue = _useVModel2[0], setInnerValue = _useVModel2[1];
          var isHover = vue.ref(false);
          var focused = vue.ref(false);
          var renderType = vue.ref(props2.type);
          var inputRef = vue.ref(null);
          var inputPreRef = vue.ref(null);
          var showClear = vue.computed(function() {
            return (innerValue.value && !props2.disabled && props2.clearable && !props2.readonly || props2.showClearIconOnEmpty) && isHover.value;
          });
          var focus = function focus2() {
            var _inputRef$value;
            return (_inputRef$value = inputRef.value) === null || _inputRef$value === void 0 ? void 0 : _inputRef$value.focus();
          };
          var blur = function blur2() {
            var _inputRef$value2;
            return (_inputRef$value2 = inputRef.value) === null || _inputRef$value2 === void 0 ? void 0 : _inputRef$value2.blur();
          };
          var emitFocus = function emitFocus2(e) {
            var _props$onFocus;
            inputValue.value = innerValue.value;
            if (props2.disabled || props2.readonly)
              return;
            focused.value = true;
            (_props$onFocus = props2.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props2, innerValue.value, {
              e
            });
          };
          var emitClear = function emitClear2(_ref) {
            var _props$onClear;
            var e = _ref.e;
            (_props$onClear = props2.onClear) === null || _props$onClear === void 0 ? void 0 : _props$onClear.call(props2, {
              e
            });
            setInnerValue("");
          };
          var onClearIconMousedown = function onClearIconMousedown2(e) {
            innerClickElement.value = e.target;
          };
          var emitPassword = function emitPassword2() {
            var toggleType = renderType.value === "password" ? "text" : "password";
            renderType.value = toggleType;
          };
          var setInputElValue = function setInputElValue2() {
            var v = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
            var inputEl = inputRef.value;
            if (!inputEl)
              return;
            var sV = String(v);
            if (!inputEl.value) {
              return;
            }
            if (inputEl.value !== sV) {
              inputEl.value = sV;
            }
          };
          var inputValueChangeHandle = function inputValueChangeHandle2(e) {
            var target = e.target;
            var val = target.value;
            if (props2.maxcharacter && props2.maxcharacter >= 0) {
              var stringInfo = getCharacterLength(val, props2.maxcharacter);
              val = _typeof$2(stringInfo) === "object" && stringInfo.characters;
            }
            setInnerValue(val, {
              e
            });
            vue.nextTick(function() {
              return setInputElValue(innerValue.value);
            });
          };
          var handleInput = function handleInput2(e) {
            var checkInputType = e.inputType && e.inputType === "insertCompositionText";
            if (e.isComposing || checkInputType)
              return;
            inputValueChangeHandle(e);
          };
          var isClearIcon = function isClearIcon2() {
            var _clearIconRef$value;
            var tmp = innerClickElement.value;
            if (!tmp || !tmp.tagName || !((_clearIconRef$value = clearIconRef.value) !== null && _clearIconRef$value !== void 0 && _clearIconRef$value.$el) || !["path", "svg"].includes(tmp.tagName))
              return false;
            while (tmp) {
              var _clearIconRef$value2;
              if (((_clearIconRef$value2 = clearIconRef.value) === null || _clearIconRef$value2 === void 0 ? void 0 : _clearIconRef$value2.$el) === tmp) {
                return true;
              }
              tmp = tmp.parentNode;
            }
            return false;
          };
          var formItem = vue.inject(FormItemInjectionKey, void 0);
          var formatAndEmitBlur = function formatAndEmitBlur2(e) {
            if (props2.format) {
              inputValue.value = props2.format(innerValue.value);
            }
            focused.value = false;
            if (!isClearIcon()) {
              var _props$onBlur;
              (_props$onBlur = props2.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props2, props2.value, {
                e
              });
              formItem === null || formItem === void 0 ? void 0 : formItem.handleBlur();
            }
          };
          var onHandleCompositionend = function onHandleCompositionend2(e) {
            var _props$onCompositione;
            inputValueChangeHandle(e);
            (_props$onCompositione = props2.onCompositionend) === null || _props$onCompositione === void 0 ? void 0 : _props$onCompositione.call(props2, innerValue.value, {
              e
            });
          };
          var onHandleCompositionstart = function onHandleCompositionstart2(e) {
            var _props$onCompositions;
            (_props$onCompositions = props2.onCompositionstart) === null || _props$onCompositions === void 0 ? void 0 : _props$onCompositions.call(props2, innerValue.value, {
              e
            });
          };
          var onRootClick = function onRootClick2(e) {
            var _inputRef$value3;
            (_inputRef$value3 = inputRef.value) === null || _inputRef$value3 === void 0 ? void 0 : _inputRef$value3.focus();
          };
          vue.watch(function() {
            return props2.autofocus;
          }, function(value2) {
            if (value2 === true) {
              vue.nextTick(function() {
                var _inputRef$value4;
                (_inputRef$value4 = inputRef.value) === null || _inputRef$value4 === void 0 ? void 0 : _inputRef$value4.focus();
              });
            }
          }, {
            immediate: true
          });
          vue.watch(innerValue, function(v) {
            inputValue.value = v;
          }, {
            immediate: true
          });
          expose({
            focus,
            blur
          });
          return {
            isHover,
            focused,
            renderType,
            showClear,
            inputRef,
            clearIconRef,
            inputValue,
            emitFocus,
            formatAndEmitBlur,
            onHandleCompositionend,
            onHandleCompositionstart,
            onRootClick,
            emitPassword,
            handleInput,
            emitClear,
            onClearIconMousedown,
            innerValue,
            inputPreRef
          };
        }
        function useInputEventHandler(props2, isHover, innerValue) {
          var handleKeydown = function handleKeydown2(e) {
            if (props2.disabled)
              return;
            var code = e.code;
            if (code === "Enter" || code === "NumpadEnter") {
              var _props$onEnter;
              (_props$onEnter = props2.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props2, innerValue.value, {
                e
              });
            } else {
              var _props$onKeydown;
              (_props$onKeydown = props2.onKeydown) === null || _props$onKeydown === void 0 ? void 0 : _props$onKeydown.call(props2, innerValue.value, {
                e
              });
            }
          };
          var handleKeyUp = function handleKeyUp2(e) {
            var _props$onKeyup;
            if (props2.disabled)
              return;
            (_props$onKeyup = props2.onKeyup) === null || _props$onKeyup === void 0 ? void 0 : _props$onKeyup.call(props2, innerValue.value, {
              e
            });
          };
          var handleKeypress = function handleKeypress2(e) {
            var _props$onKeypress;
            if (props2.disabled)
              return;
            (_props$onKeypress = props2.onKeypress) === null || _props$onKeypress === void 0 ? void 0 : _props$onKeypress.call(props2, innerValue.value, {
              e
            });
          };
          var onHandlePaste = function onHandlePaste2(e) {
            var _props$onPaste;
            if (props2.disabled)
              return;
            var clipData = e.clipboardData || window.clipboardData;
            (_props$onPaste = props2.onPaste) === null || _props$onPaste === void 0 ? void 0 : _props$onPaste.call(props2, {
              e,
              pasteValue: clipData === null || clipData === void 0 ? void 0 : clipData.getData("text/plain")
            });
          };
          var mouseEvent = function mouseEvent2(v) {
            return isHover.value = v;
          };
          var onHandleMousewheel = function onHandleMousewheel2(e) {
            var _props$onWheel;
            return (_props$onWheel = props2.onWheel) === null || _props$onWheel === void 0 ? void 0 : _props$onWheel.call(props2, {
              e
            });
          };
          var onInputMouseenter = function onInputMouseenter2(e) {
            var _props$onMouseenter;
            mouseEvent(true);
            (_props$onMouseenter = props2.onMouseenter) === null || _props$onMouseenter === void 0 ? void 0 : _props$onMouseenter.call(props2, {
              e
            });
          };
          var onInputMouseleave = function onInputMouseleave2(e) {
            var _props$onMouseleave;
            mouseEvent(false);
            (_props$onMouseleave = props2.onMouseleave) === null || _props$onMouseleave === void 0 ? void 0 : _props$onMouseleave.call(props2, {
              e
            });
          };
          return {
            handleKeydown,
            handleKeyUp,
            handleKeypress,
            onHandlePaste,
            onHandleMousewheel,
            onInputMouseenter,
            onInputMouseleave
          };
        }
        function useInputWidth(props2, inputPreRef, inputRef, innerValue) {
          var composing = vue.ref(false);
          var updateInputWidth = function updateInputWidth2() {
            if (!inputPreRef.value)
              return;
            var width = inputPreRef.value.offsetWidth;
            inputRef.value.style.width = "".concat(width, "px");
          };
          var addListeners = function addListeners2() {
            vue.watch(function() {
              return innerValue.value + props2.placeholder;
            }, function() {
              if (!props2.autoWidth)
                return;
              vue.nextTick(function() {
                updateInputWidth();
              });
            }, {
              immediate: true
            });
          };
          vue.onMounted(function() {
            composing.value = false;
            if (props2.autoWidth) {
              addListeners();
            }
          });
        }
        var _excluded$4 = ["isHover", "inputRef", "inputPreRef", "renderType", "showClear", "focused", "inputValue", "innerValue"];
        function getValidAttrs$2(obj) {
          var newObj = {};
          Object.keys(obj).forEach(function(key) {
            if (typeof obj[key] !== "undefined") {
              newObj[key] = obj[key];
            }
          });
          return newObj;
        }
        var _Input = vue.defineComponent({
          name: "TInput",
          props: props$N,
          setup: function setup(props2, _ref) {
            var slots = _ref.slots, expose = _ref.expose;
            var _useConfig = useConfig("input"), global2 = _useConfig.global;
            var disabled = useFormDisabled();
            var COMPONENT_NAME2 = usePrefixClass("input");
            var INPUT_WRAP_CLASS = usePrefixClass("input__wrap");
            var INPUT_TIPS_CLASS = usePrefixClass("input__tips");
            var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS, SIZE = _useCommonClassName.SIZE;
            var classPrefix2 = usePrefixClass();
            var renderTNodeJSX2 = useTNodeJSX();
            var _useInput = useInput(props2, expose), isHover = _useInput.isHover, inputRef = _useInput.inputRef, inputPreRef = _useInput.inputPreRef, renderType = _useInput.renderType, showClear = _useInput.showClear, focused = _useInput.focused, inputValue = _useInput.inputValue, innerValue = _useInput.innerValue, inputHandle = _objectWithoutProperties$1(_useInput, _excluded$4);
            useInputWidth(props2, inputPreRef, inputRef, innerValue);
            var inputEventHandler = useInputEventHandler(props2, isHover, innerValue);
            var tPlaceholder = vue.computed(function() {
              var _props2$placeholder;
              return (_props2$placeholder = props2.placeholder) !== null && _props2$placeholder !== void 0 ? _props2$placeholder : global2.value.placeholder;
            });
            var inputAttrs = vue.computed(function() {
              return getValidAttrs$2({
                autofocus: props2.autofocus,
                disabled: disabled.value,
                readonly: props2.readonly,
                placeholder: tPlaceholder.value,
                maxlength: props2.maxlength,
                name: props2.name || void 0,
                type: renderType.value,
                autocomplete: renderType.value === "password" ? "on" : void 0
              });
            });
            var renderIcon = function renderIcon2(icon, iconType) {
              if (typeof icon === "function") {
                return icon(vue.h);
              }
              if (slots[kebabCase_1(iconType)]) {
                return slots[kebabCase_1(iconType)](null);
              }
              if (slots[camelCase_1(iconType)]) {
                return slots[camelCase_1(iconType)](null);
              }
              return null;
            };
            return function() {
              var _ref2, _inputValue$value;
              var prefixIcon = renderIcon(props2.prefixIcon, "prefix-icon");
              var suffixIcon = renderIcon(props2.suffixIcon, "suffix-icon");
              var label = renderTNodeJSX2("label", {
                silent: true
              });
              var suffix2 = renderTNodeJSX2("suffix");
              var labelContent = label ? vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__prefix")
              }, [label]) : null;
              var suffixContent = suffix2 ? vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__suffix")
              }, [suffix2]) : null;
              if (showClear.value) {
                suffixIcon = vue.createVNode(closeCircleFilled, {
                  "ref": inputHandle.clearIconRef,
                  "class": "".concat(COMPONENT_NAME2.value, "__suffix-clear"),
                  "onClick": inputHandle.emitClear,
                  "onMousedown": inputHandle.onClearIconMousedown
                }, null);
              }
              var classes = [COMPONENT_NAME2.value, props2.inputClass, (_ref2 = {}, _defineProperty$3(_ref2, SIZE.value[props2.size], props2.size !== "medium"), _defineProperty$3(_ref2, STATUS.value.disabled, disabled.value), _defineProperty$3(_ref2, STATUS.value.focused, focused.value), _defineProperty$3(_ref2, "".concat(classPrefix2.value, "-is-").concat(props2.status), props2.status), _defineProperty$3(_ref2, "".concat(classPrefix2.value, "-align-").concat(props2.align), props2.align !== "left"), _defineProperty$3(_ref2, "".concat(classPrefix2.value, "-is-readonly"), props2.readonly), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME2.value, "--prefix"), prefixIcon || labelContent), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME2.value, "--suffix"), suffixIcon || suffixContent), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME2.value, "--focused"), focused.value), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME2.value, "--auto-width"), props2.autoWidth), _ref2)];
              if (props2.type === "password") {
                if (renderType.value === "password") {
                  suffixIcon = vue.createVNode(browseOff, {
                    "class": "".concat(COMPONENT_NAME2.value, "__suffix-clear"),
                    "onClick": inputHandle.emitPassword
                  }, null);
                } else if (renderType.value === "text") {
                  suffixIcon = vue.createVNode(browse, {
                    "class": "".concat(COMPONENT_NAME2.value, "__suffix-clear"),
                    "onClick": inputHandle.emitPassword
                  }, null);
                }
              }
              var inputEvents = getValidAttrs$2({
                onFocus: function onFocus(e) {
                  return inputHandle.emitFocus(e);
                },
                onBlur: inputHandle.formatAndEmitBlur,
                onKeydown: inputEventHandler.handleKeydown,
                onKeyup: inputEventHandler.handleKeyUp,
                onKeypress: inputEventHandler.handleKeypress,
                onPaste: inputEventHandler.onHandlePaste,
                onCompositionend: inputHandle.onHandleCompositionend,
                onCompositionstart: inputHandle.onHandleCompositionstart
              });
              var tips = renderTNodeJSX2("tips");
              return vue.createVNode("div", {
                "class": INPUT_WRAP_CLASS.value
              }, [vue.createVNode("div", {
                "class": classes,
                "onClick": inputHandle.onRootClick,
                "onMouseenter": inputEventHandler.onInputMouseenter,
                "onMouseleave": inputEventHandler.onInputMouseleave,
                "onWheel": inputEventHandler.onHandleMousewheel
              }, [prefixIcon ? vue.createVNode("span", {
                "class": ["".concat(COMPONENT_NAME2.value, "__prefix"), "".concat(COMPONENT_NAME2.value, "__prefix-icon")]
              }, [prefixIcon]) : null, labelContent, vue.createVNode("input", vue.mergeProps({
                "class": "".concat(COMPONENT_NAME2.value, "__inner")
              }, inputAttrs.value, inputEvents, {
                "ref": inputRef,
                "value": (_inputValue$value = inputValue.value) !== null && _inputValue$value !== void 0 ? _inputValue$value : "",
                "onInput": function onInput(e) {
                  return inputHandle.handleInput(e);
                }
              }), null), props2.autoWidth && vue.createVNode("span", {
                "ref": inputPreRef,
                "className": "".concat(classPrefix2.value, "-input__input-pre")
              }, [innerValue.value || tPlaceholder.value]), suffixContent, suffixIcon ? vue.createVNode("span", {
                "class": ["".concat(COMPONENT_NAME2.value, "__suffix"), "".concat(COMPONENT_NAME2.value, "__suffix-icon"), _defineProperty$3({}, "".concat(COMPONENT_NAME2.value, "__clear"), showClear.value)]
              }, [suffixIcon]) : null]), tips && vue.createVNode("div", {
                "class": "".concat(INPUT_TIPS_CLASS.value, " ").concat(classPrefix2.value, "-input__tips--").concat(props2.status || "normal")
              }, [tips])]);
            };
          }
        });
        var _InputGroup = vue.defineComponent({
          name: "TInputGroup",
          props: {
            separate: {
              type: Boolean,
              "default": false
            }
          },
          setup: function setup(props2) {
            var COMPONENT_NAME2 = usePrefixClass("input-group");
            var renderTNodeJSX2 = useTNodeJSX();
            var CLASS = vue.computed(function() {
              return [COMPONENT_NAME2.value, _defineProperty$3({}, "".concat(COMPONENT_NAME2.value, "--separate"), props2.separate)];
            });
            return function() {
              return vue.createVNode("div", {
                "class": CLASS.value
              }, [renderTNodeJSX2("default")]);
            };
          }
        });
        var Addon = withInstall(_Addon);
        var Input = withInstall(_Input);
        var InputGroup = withInstall(_InputGroup);
        var props$M = {
          align: {
            type: String,
            validator: function validator(val) {
              if (!val)
                return true;
              return ["left", "center", "right"].includes(val);
            }
          },
          autoWidth: Boolean,
          decimalPlaces: {
            type: Number,
            "default": void 0
          },
          disabled: Boolean,
          format: {
            type: Function
          },
          inputProps: {
            type: Object
          },
          max: {
            type: Number,
            "default": Infinity
          },
          min: {
            type: Number,
            "default": -Infinity
          },
          placeholder: {
            type: String,
            "default": void 0
          },
          readonly: Boolean,
          size: {
            type: String,
            "default": "medium",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["small", "medium", "large"].includes(val);
            }
          },
          status: {
            type: String,
            validator: function validator(val) {
              if (!val)
                return true;
              return ["success", "warning", "error"].includes(val);
            }
          },
          step: {
            type: Number,
            "default": 1
          },
          theme: {
            type: String,
            "default": "row",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["column", "row", "normal"].includes(val);
            }
          },
          tips: {
            type: [String, Function]
          },
          value: {
            type: Number,
            "default": void 0
          },
          modelValue: {
            type: Number,
            "default": void 0
          },
          defaultValue: {
            type: Number,
            "default": void 0
          },
          onBlur: Function,
          onChange: Function,
          onEnter: Function,
          onFocus: Function,
          onKeydown: Function,
          onKeypress: Function,
          onKeyup: Function
        };
        function useInputNumberTools(props2, digitsNum, isError2) {
          var toDecimalPlaces = function toDecimalPlaces2(value) {
            var decimalPlaces = props2.decimalPlaces === void 0 ? digitsNum.value : props2.decimalPlaces;
            var factor = Math.pow(10, decimalPlaces);
            return Math.round(value * factor) / factor;
          };
          var multiNegative = function multiNegative2(s) {
            var m = s.match(/[-]/g);
            return m === null ? false : m.length > 2;
          };
          var multiDot = function multiDot2(s) {
            var m = s.match(/[.]/g);
            return m === null ? false : m.length > 1;
          };
          var multiE = function multiE2(s) {
            var m = s.match(/[e]/gi);
            return m === null ? false : m.length > 1;
          };
          var empty = function empty2(v) {
            return !v && !v.replace(" ", "");
          };
          var handleInputError = function handleInputError2(visible) {
            return isError2.value = visible;
          };
          var isValidNumber = function isValidNumber2(v) {
            if (v > props2.max) {
              handleInputError(true);
              return false;
            }
            if (v < props2.min) {
              handleInputError(true);
              return false;
            }
            if (!isNumber_1(v)) {
              handleInputError(true);
              return false;
            }
            handleInputError(false);
            return true;
          };
          var isValid = function isValid2(v) {
            var numV = Number(v);
            if (empty(v)) {
              return false;
            }
            if (Number.isNaN(numV)) {
              handleInputError(true);
              return false;
            }
            return isValidNumber(numV);
          };
          var toValidStringNumber = function toValidStringNumber2(s) {
            var filterVal = s.replace(/[^\d.eE。-]/g, "").replace("\u3002", ".");
            if (multiE(filterVal) || multiDot(filterVal) || multiNegative(filterVal)) {
              filterVal = filterVal.substring(0, filterVal.length - 1);
            }
            return filterVal;
          };
          var toValidNumber = function toValidNumber2(s) {
            var val = Number(s);
            if (Number.isNaN(val) || Number.isNaN(parseFloat(s)))
              return props2.value;
            if (val > props2.max)
              return props2.max;
            if (val < props2.min)
              return props2.min;
            return parseFloat(s);
          };
          return {
            toDecimalPlaces,
            multiNegative,
            multiDot,
            multiE,
            empty,
            isValidNumber,
            isValid,
            toValidStringNumber,
            toValidNumber,
            isError: isError2
          };
        }
        function useInputNumberAction(COMPONENT_NAME2, props2, isError2, filterValue) {
          var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
          var userInput = vue.ref(null);
          var _toRefs = vue.toRefs(props2), value = _toRefs.value, modelValue = _toRefs.modelValue;
          var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerValue = _useVModel2[0], setInnerValue = _useVModel2[1];
          var disabledReduce = vue.computed(function() {
            return props2.disabled || isError2.value || Number(innerValue.value) - props2.step < props2.min;
          });
          var disabledAdd = vue.computed(function() {
            return props2.disabled || isError2.value || Number(innerValue.value) + props2.step > props2.max;
          });
          var reduceClasses = vue.computed(function() {
            return ["".concat(COMPONENT_NAME2.value, "__decrease"), _defineProperty$3({}, STATUS.value.disabled, disabledReduce.value)];
          });
          var addClasses = vue.computed(function() {
            return ["".concat(COMPONENT_NAME2.value, "__increase"), _defineProperty$3({}, STATUS.value.disabled, disabledAdd.value)];
          });
          var stepDecimalPlaces = vue.computed(function() {
            var tempVal = String(props2.step);
            var tempIndex = tempVal.indexOf(".") + 1;
            return tempIndex > 0 ? tempVal.length - tempIndex : 0;
          });
          var valueDecimalPlaces = vue.computed(function() {
            var tempVal = filterValue.value !== null && !Number.isNaN(Number(filterValue.value)) && !Number.isNaN(parseFloat(filterValue.value)) ? filterValue.value : String(innerValue.value);
            var tempIndex = tempVal.indexOf(".") + 1;
            return tempIndex > 0 ? tempVal.length - tempIndex : 0;
          });
          var digitsNum = vue.computed(function() {
            if (props2.decimalPlaces !== void 0) {
              if (props2.decimalPlaces < stepDecimalPlaces.value) {
                console.warn("decimal places of step should be less than decimal-places");
              }
              return props2.decimalPlaces;
            }
            return valueDecimalPlaces.value > stepDecimalPlaces.value ? valueDecimalPlaces.value : stepDecimalPlaces.value;
          });
          var clearInput = function clearInput2() {
            return userInput.value = "";
          };
          var handleChange = function handleChange2(value2, ctx) {
            if (value2 !== void 0) {
              var v = Number(value2.toFixed(digitsNum.value));
              setInnerValue(v, {
                type: ctx.type,
                e: ctx.e
              });
            } else {
              setInnerValue(void 0, {
                type: ctx.type,
                e: ctx.e
              });
            }
          };
          var handleAction = function handleAction2(value2, actionType, e) {
            if (actionType !== "input") {
              clearInput();
            }
            handleChange(value2, {
              type: actionType,
              e
            });
          };
          var toDecimalPlaces = function toDecimalPlaces2(value2) {
            var decimalPlaces = props2.decimalPlaces === void 0 ? digitsNum.value : props2.decimalPlaces;
            var factor = Math.pow(10, decimalPlaces);
            return Math.round(value2 * factor) / factor;
          };
          var clearFilterValue = function clearFilterValue2() {
            return filterValue.value = "";
          };
          var handleAdd = function handleAdd2(e) {
            if (disabledAdd.value || props2.readonly)
              return;
            var value2 = innerValue.value || 0;
            var factor = Math.pow(10, digitsNum.value);
            handleAction(Number(toDecimalPlaces((value2 * factor + props2.step * factor) / factor).toFixed(digitsNum.value)), "add", e);
          };
          var handleReduce = function handleReduce2(e) {
            if (disabledReduce.value || props2.readonly)
              return;
            var value2 = innerValue.value || 0;
            var factor = Math.pow(10, digitsNum.value);
            handleAction(Number(toDecimalPlaces((value2 * factor - props2.step * factor) / factor).toFixed(digitsNum.value)), "reduce", e);
          };
          var inputNumberTools = useInputNumberTools(props2, digitsNum, isError2);
          var handleInput = function handleInput2(val, e) {
            userInput.value = val;
            filterValue.value = inputNumberTools.toValidStringNumber(userInput.value);
            userInput.value = "";
            if (!inputNumberTools.isValid(filterValue.value)) {
              handleAction(void 0, "input", e);
              return;
            }
            if (Number(filterValue.value) === innerValue.value)
              return;
            handleAction(Number(filterValue.value), "input", e);
          };
          return {
            reduceClasses,
            addClasses,
            clearFilterValue,
            handleAdd,
            handleReduce,
            digitsNum,
            filterValue,
            innerValue,
            handleAction,
            userInput,
            handleInput
          };
        }
        function useKeyboardEvents(props2, innerValue) {
          var handleKeydownEnter = function handleKeydownEnter2(e) {
            var _props$onEnter;
            if (e.key !== "Enter")
              return;
            (_props$onEnter = props2.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props2, innerValue.value, {
              e
            });
          };
          var handleKeydown = function handleKeydown2(e) {
            var _props$onKeydown;
            (_props$onKeydown = props2.onKeydown) === null || _props$onKeydown === void 0 ? void 0 : _props$onKeydown.call(props2, innerValue.value, {
              e
            });
            handleKeydownEnter(e);
          };
          var handleKeyup = function handleKeyup2(e) {
            var _props$onKeyup;
            (_props$onKeyup = props2.onKeyup) === null || _props$onKeyup === void 0 ? void 0 : _props$onKeyup.call(props2, innerValue.value, {
              e
            });
          };
          var handleKeypress = function handleKeypress2(e) {
            var _props$onKeypress;
            (_props$onKeypress = props2.onKeypress) === null || _props$onKeypress === void 0 ? void 0 : _props$onKeypress.call(props2, innerValue.value, {
              e
            });
          };
          return {
            handleKeydownEnter,
            handleKeydown,
            handleKeyup,
            handleKeypress
          };
        }
        function useComponentComputed(COMPONENT_NAME2, props2) {
          var disabled = useFormDisabled();
          var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE, STATUS = _useCommonClassName.STATUS;
          var classPrefix2 = usePrefixClass();
          var isError2 = vue.ref(false);
          var inputting = vue.ref(false);
          var filterValue = vue.ref(null);
          var _useInputNumberAction = useInputNumberAction(COMPONENT_NAME2, props2, isError2, filterValue), digitsNum = _useInputNumberAction.digitsNum, innerValue = _useInputNumberAction.innerValue, handleAction = _useInputNumberAction.handleAction, clearFilterValue = _useInputNumberAction.clearFilterValue, handleReduce = _useInputNumberAction.handleReduce, handleAdd = _useInputNumberAction.handleAdd, userInput = _useInputNumberAction.userInput, addClasses = _useInputNumberAction.addClasses, reduceClasses = _useInputNumberAction.reduceClasses, handleInput = _useInputNumberAction.handleInput;
          var inputNumberTools = useInputNumberTools(props2, digitsNum, isError2);
          var keyboardEvents = useKeyboardEvents(props2, innerValue);
          var handleStartInput = function handleStartInput2() {
            inputting.value = true;
            if (innerValue.value === void 0)
              return;
            filterValue.value = Number(innerValue.value).toFixed(digitsNum.value);
          };
          var handleEndInput = function handleEndInput2(e) {
            inputting.value = false;
            var value = inputNumberTools.toValidNumber(filterValue.value);
            if (value !== innerValue.value) {
              handleAction(value, "input", e);
            }
            isError2.value = false;
          };
          var handleBlur = /* @__PURE__ */ function() {
            var _ref = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee(e) {
              var _props$onBlur;
              return regenerator.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.next = 2;
                      return handleEndInput(e);
                    case 2:
                      clearFilterValue();
                      (_props$onBlur = props2.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props2, innerValue.value, {
                        e
                      });
                    case 4:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            }));
            return function handleBlur2(_x) {
              return _ref.apply(this, arguments);
            };
          }();
          var handleFocus = function handleFocus2(e) {
            var _props$onFocus;
            handleStartInput();
            (_props$onFocus = props2.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props2, innerValue.value, {
              e
            });
          };
          var reduceEvents = vue.computed(function() {
            return {
              onClick: handleReduce
            };
          });
          var addEvents = vue.computed(function() {
            return {
              onClick: handleAdd
            };
          });
          var componentWrapClasses = vue.computed(function() {
            var _ref2;
            return [COMPONENT_NAME2.value, SIZE.value[props2.size], (_ref2 = {}, _defineProperty$3(_ref2, STATUS.value.disabled, disabled.value), _defineProperty$3(_ref2, "".concat(classPrefix2.value, "-is-controls-right"), props2.theme === "column"), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME2.value, "--").concat(props2.theme), props2.theme), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME2.value, "--auto-width"), props2.autoWidth), _ref2)];
          });
          var inputEvents = vue.computed(function() {
            return {
              onBlur: handleBlur,
              onFocus: handleFocus,
              onKeydown: keyboardEvents.handleKeydown,
              onKeyup: keyboardEvents.handleKeyup,
              onKeypress: keyboardEvents.handleKeypress
            };
          });
          var inputAttrs = vue.computed(function() {
            return {
              disabled: disabled.value,
              readonly: props2.readonly,
              autocomplete: "off",
              ref: "refInputElem",
              placeholder: props2.placeholder,
              unselectable: props2.readonly ? "on" : "off",
              tips: props2.tips,
              autoWidth: props2.autoWidth,
              align: props2.align || (props2.theme === "row" ? "center" : void 0),
              status: isError2.value ? "error" : props2.status
            };
          });
          var displayValue = vue.computed(function() {
            if (inputting.value && userInput.value !== null) {
              return filterValue.value;
            }
            if ([void 0, null].includes(innerValue.value))
              return "";
            return props2.format && !inputting.value ? props2.format(innerValue.value) : Number(innerValue.value).toFixed(digitsNum.value);
          });
          vue.watch(innerValue, function(v) {
            if (v !== void 0) {
              inputNumberTools.isValidNumber(v);
            }
          }, {
            immediate: true
          });
          return {
            reduceEvents,
            addEvents,
            componentWrapClasses,
            inputEvents,
            inputAttrs,
            displayValue,
            addClasses,
            reduceClasses,
            handleInput
          };
        }
        var _InputNumber = vue.defineComponent({
          name: "TInputNumber",
          components: {
            AddIcon: add,
            RemoveIcon: remove,
            ChevronDownIcon: chevronDown,
            ChevronUpIcon: chevronUp,
            TButton: Button,
            TInput: Input
          },
          props: props$M,
          setup: function setup(props2) {
            var COMPONENT_NAME2 = usePrefixClass("input-number");
            var _useComponentComputed = useComponentComputed(COMPONENT_NAME2, props2), reduceEvents = _useComponentComputed.reduceEvents, addEvents = _useComponentComputed.addEvents, componentWrapClasses = _useComponentComputed.componentWrapClasses, inputEvents = _useComponentComputed.inputEvents, inputAttrs = _useComponentComputed.inputAttrs, displayValue = _useComponentComputed.displayValue, addClasses = _useComponentComputed.addClasses, reduceClasses = _useComponentComputed.reduceClasses, handleInput = _useComponentComputed.handleInput;
            var decreaseIcon = vue.computed(function() {
              return props2.theme === "column" ? vue.createVNode(vue.resolveComponent("chevron-down-icon"), {
                "size": props2.size
              }, null) : vue.createVNode(vue.resolveComponent("remove-icon"), {
                "size": props2.size
              }, null);
            });
            var increaseIcon = vue.computed(function() {
              return props2.theme === "column" ? vue.createVNode(vue.resolveComponent("chevron-up-icon"), {
                "size": props2.size
              }, null) : vue.createVNode(vue.resolveComponent("add-icon"), {
                "size": props2.size
              }, null);
            });
            return function() {
              return vue.createVNode("div", {
                "class": componentWrapClasses.value
              }, [props2.theme !== "normal" && vue.createVNode(vue.resolveComponent("t-button"), vue.mergeProps({
                "class": reduceClasses.value
              }, reduceEvents.value, {
                "variant": "outline",
                "shape": "square"
              }), {
                icon: function icon() {
                  return decreaseIcon.value;
                }
              }), vue.createVNode(vue.resolveComponent("t-input"), vue.mergeProps(inputAttrs.value, inputEvents.value, props2.inputProps, {
                "value": displayValue.value,
                "onChange": function onChange(val, _ref) {
                  var e = _ref.e;
                  return handleInput(val, e);
                }
              }), null), props2.theme !== "normal" && vue.createVNode(vue.resolveComponent("t-button"), vue.mergeProps({
                "class": addClasses.value
              }, addEvents.value, {
                "variant": "outline",
                "shape": "square"
              }), {
                icon: function icon() {
                  return increaseIcon.value;
                }
              })]);
            };
          }
        });
        var InputNumber = withInstall(_InputNumber);
        var _excluded$3 = ["name", "alias"];
        function ownKeys$1v(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1u(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1v(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1v(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function toCamel(str) {
          return str.replace(/-([a-z])/gi, function(m, letter) {
            return letter.toUpperCase();
          });
        }
        function getPropOptionMap(props2) {
          var propOptionMap = {};
          function parseProp(propOption) {
            var propName = propOption.name, alias = propOption.alias, others = _objectWithoutProperties$1(propOption, _excluded$3);
            var camelName = propName.replace(/^[a-z]/, function(letter) {
              return letter.toUpperCase();
            });
            var defaultName = "default".concat(camelName);
            var dataName = "data".concat(camelName);
            var events = [];
            if (propOption.event) {
              events = events.concat(propOption.event);
            }
            events.push("update:".concat(propName));
            if (alias) {
              events = events.concat(alias.map(function(item) {
                return "update:".concat(item);
              }));
            }
            return _objectSpread$1u({
              events,
              defaultName,
              dataName,
              alias
            }, others);
          }
          props2.forEach(function(prop) {
            var defaultOption = {
              alias: []
            };
            var propOption;
            if (typeof prop === "string") {
              propOption = _objectSpread$1u(_objectSpread$1u({}, defaultOption), {}, {
                name: prop
              });
            } else {
              propOption = _objectSpread$1u(_objectSpread$1u({}, defaultOption), prop);
            }
            propOptionMap[propOption.name] = parseProp(propOption);
          });
          return propOptionMap;
        }
        function mapProps(props2) {
          function mapProps2(componentConstructor) {
            var component = componentConstructor;
            var propOptionMap = getPropOptionMap(props2);
            var defineProps = _objectSpread$1u({}, component.props);
            var defineWatches = {};
            var defineEvents = [];
            var defineMethods = {};
            var camelPropsKeys = Object.keys(component.props).map(function(key) {
              return toCamel(key);
            });
            Object.keys(propOptionMap).forEach(function(propName) {
              var _propOptionMap$propNa = propOptionMap[propName], events = _propOptionMap$propNa.events, alias = _propOptionMap$propNa.alias, defaultName = _propOptionMap$propNa.defaultName, dataName = _propOptionMap$propNa.dataName;
              defineProps[propName] = component.props[propName];
              defineProps[defaultName] = component.props[defaultName];
              if (alias) {
                alias.forEach(function(prop) {
                  defineProps[prop] = defineProps[propName];
                });
              }
              defineEvents = defineEvents.concat(events);
              var defaultList = [];
              defineWatches[defaultName] = {
                handler: function handler(v) {
                  if (defaultList.indexOf(defaultName + this.$.uid) > -1)
                    return;
                  var props22 = this.$.vnode.props;
                  var hasDefault = props22 && (defaultName in props22 || kebabCase_1(defaultName) in props22);
                  if (hasDefault && !(propName in props22)) {
                    this.$data[dataName] = v;
                  }
                  defaultList.push(defaultName + this.$.uid);
                },
                immediate: true
              };
              alias.forEach(function(aliasItem) {
                defineWatches[aliasItem] = {
                  handler: function handler(v) {
                    var props22 = this.$.vnode.props;
                    if (props22 && aliasItem in props22 && !(propName in props22)) {
                      this.$data[dataName] = v;
                    }
                  },
                  immediate: true
                };
              });
              defineWatches[propName] = {
                handler: function handler(v) {
                  var props22 = this.$.vnode.props;
                  if (props22 && (propName in props22 || kebabCase_1(propName) in props22)) {
                    this.$data[dataName] = v;
                  }
                },
                immediate: true
              };
            });
            if (component.methods) {
              Object.keys(component.methods).forEach(function(key) {
                defineMethods[key] = function() {
                  if (this.$refs.component) {
                    var _this$$refs$component;
                    return (_this$$refs$component = this.$refs.component)[key].apply(_this$$refs$component, arguments);
                  }
                };
              });
            }
            var name = component.name;
            return vue.defineComponent({
              name: "".concat(name, "-mapprops"),
              inheritAttrs: false,
              props: _objectSpread$1u({}, defineProps),
              data: function data() {
                var data2 = {};
                Object.keys(propOptionMap).forEach(function(propName) {
                  var dataName = propOptionMap[propName].dataName;
                  data2[dataName] = void 0;
                });
                return _objectSpread$1u({}, data2);
              },
              computed: {
                _listeners: function _listeners() {
                  var _this = this;
                  var others = {};
                  Object.keys(this.$attrs).forEach(function(attr) {
                    var event = attr.startsWith("on") ? attr[2].toLowerCase() + attr.slice(3) : null;
                    if (event && defineEvents.indexOf(event) === -1) {
                      others[attr] = function() {
                        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                          args[_key] = arguments[_key];
                        }
                        _this.$emit.apply(_this, [event].concat(args));
                      };
                    }
                  });
                  return others;
                }
              },
              watch: defineWatches,
              methods: _objectSpread$1u({
                updateData: function updateData(propName, v) {
                  var _this2 = this;
                  for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                    args[_key2 - 2] = arguments[_key2];
                  }
                  propOptionMap[propName].events.forEach(function(event) {
                    var eventName = "on".concat(event.charAt(0).toUpperCase()).concat(event.substr(1));
                    if (typeof _this2[eventName] === "function") {
                      _this2[eventName].apply(_this2, [v].concat(args));
                      return true;
                    }
                    _this2.$emit.apply(_this2, [event, v].concat(args));
                  });
                  var props22 = this.$.vnode.props;
                  if (!props22 || !(propName in props22)) {
                    this[propOptionMap[propName].dataName] = v;
                    return true;
                  }
                }
              }, defineMethods),
              render: function render() {
                var _this3 = this;
                var propMap = {};
                var handlerMap = {};
                Object.keys(propOptionMap).forEach(function(propName) {
                  var _propOptionMap$propNa2 = propOptionMap[propName], dataName = _propOptionMap$propNa2.dataName, events = _propOptionMap$propNa2.events;
                  var eventName = "on".concat(events[0].charAt(0).toUpperCase()).concat(events[0].substr(1));
                  var props22 = _this3.$.vnode.props;
                  if (props22 && propName in props22 || typeof _this3[dataName] !== "undefined") {
                    propMap[propName] = _this3[dataName];
                  }
                  handlerMap[eventName] = function(v) {
                    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
                      args[_key3 - 1] = arguments[_key3];
                    }
                    return _this3.updateData.apply(_this3, [propName, v].concat(args));
                  };
                });
                var attrs = {};
                Object.keys(this.$attrs).forEach(function(attrName) {
                  var camelAttrKey = toCamel(attrName);
                  if (camelPropsKeys.indexOf(camelAttrKey) === -1) {
                    attrs[attrName] = _this3.$attrs[attrName];
                  }
                });
                return vue.h(componentConstructor, _objectSpread$1u(_objectSpread$1u(_objectSpread$1u(_objectSpread$1u(_objectSpread$1u(_objectSpread$1u({}, this.$props), propMap), attrs), this._listeners), handlerMap), {}, {
                  ref: "component"
                }), this.$slots);
              }
            });
          }
          return mapProps2;
        }
        var isArray$5 = isArray_1, isSymbol$1 = isSymbol_1;
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
        function isKey$3(value, object) {
          if (isArray$5(value)) {
            return false;
          }
          var type = _typeof$2(value);
          if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol$1(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
        }
        var _isKey = isKey$3;
        var MapCache$1 = _MapCache;
        var FUNC_ERROR_TEXT$1 = "Expected a function";
        function memoize$1(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError(FUNC_ERROR_TEXT$1);
          }
          var memoized = function memoized2() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized2.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result = func.apply(this, args);
            memoized2.cache = cache.set(key, result) || cache;
            return result;
          };
          memoized.cache = new (memoize$1.Cache || MapCache$1)();
          return memoized;
        }
        memoize$1.Cache = MapCache$1;
        var memoize_1 = memoize$1;
        var memoize = memoize_1;
        var MAX_MEMOIZE_SIZE = 500;
        function memoizeCapped$1(func) {
          var result = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result.cache;
          return result;
        }
        var _memoizeCapped = memoizeCapped$1;
        var memoizeCapped = _memoizeCapped;
        var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
        var reEscapeChar = /\\(\\)?/g;
        var stringToPath$1 = memoizeCapped(function(string) {
          var result = [];
          if (string.charCodeAt(0) === 46) {
            result.push("");
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
          });
          return result;
        });
        var _stringToPath = stringToPath$1;
        var isArray$4 = isArray_1, isKey$2 = _isKey, stringToPath = _stringToPath, toString$3 = toString_1;
        function castPath$6(value, object) {
          if (isArray$4(value)) {
            return value;
          }
          return isKey$2(value, object) ? [value] : stringToPath(toString$3(value));
        }
        var _castPath = castPath$6;
        var isSymbol = isSymbol_1;
        var INFINITY$1 = 1 / 0;
        function toKey$6(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result = value + "";
          return result == "0" && 1 / value == -INFINITY$1 ? "-0" : result;
        }
        var _toKey = toKey$6;
        var castPath$5 = _castPath, toKey$5 = _toKey;
        function baseGet$4(object, path6) {
          path6 = castPath$5(path6, object);
          var index2 = 0, length = path6.length;
          while (object != null && index2 < length) {
            object = object[toKey$5(path6[index2++])];
          }
          return index2 && index2 == length ? object : void 0;
        }
        var _baseGet = baseGet$4;
        var baseGet$3 = _baseGet;
        function get$1(object, path6, defaultValue) {
          var result = object == null ? void 0 : baseGet$3(object, path6);
          return result === void 0 ? defaultValue : result;
        }
        var get_1 = get$1;
        var assignValue = _assignValue, castPath$4 = _castPath, isIndex$1 = _isIndex, isObject$2 = isObject_1, toKey$4 = _toKey;
        function baseSet$2(object, path6, value, customizer) {
          if (!isObject$2(object)) {
            return object;
          }
          path6 = castPath$4(path6, object);
          var index2 = -1, length = path6.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index2 < length) {
            var key = toKey$4(path6[index2]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object;
            }
            if (index2 != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : void 0;
              if (newValue === void 0) {
                newValue = isObject$2(objValue) ? objValue : isIndex$1(path6[index2 + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var _baseSet = baseSet$2;
        var baseSet$1 = _baseSet;
        function set(object, path6, value) {
          return object == null ? object : baseSet$1(object, path6, value);
        }
        var set_1 = set;
        var props$L = {
          closable: Boolean,
          content: {
            type: [String, Number, Function]
          },
          "default": {
            type: [String, Number, Function]
          },
          disabled: Boolean,
          icon: {
            type: Function,
            "default": void 0
          },
          maxWidth: {
            type: [String, Number]
          },
          shape: {
            type: String,
            "default": "square",
            validator: function validator(val) {
              return ["square", "round", "mark"].includes(val);
            }
          },
          size: {
            type: String,
            "default": "medium",
            validator: function validator(val) {
              return ["small", "medium", "large"].includes(val);
            }
          },
          theme: {
            type: String,
            "default": "default",
            validator: function validator(val) {
              return ["default", "primary", "warning", "danger", "success"].includes(val);
            }
          },
          variant: {
            type: String,
            "default": "dark",
            validator: function validator(val) {
              return ["dark", "light", "outline", "light-outline"].includes(val);
            }
          },
          onClick: Function,
          onClose: Function
        };
        var _Tag = vue.defineComponent({
          name: "TTag",
          props: props$L,
          setup: function setup(props2) {
            var _useConfig = useConfig("tag"), tagGlobalConfig = _useConfig.global;
            var COMPONENT_NAME2 = usePrefixClass("tag");
            var renderTNodeJSX2 = useTNodeJSX();
            var renderContent2 = useContent();
            var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE;
            var tagClass = vue.computed(function() {
              var _ref;
              return ["".concat(COMPONENT_NAME2.value), "".concat(COMPONENT_NAME2.value, "--").concat(props2.theme), "".concat(COMPONENT_NAME2.value, "--").concat(props2.variant), (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--ellipsis"), props2.maxWidth), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--close"), props2.closable), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--disabled"), props2.disabled), _ref), SIZE.value[props2.size], props2.shape !== "square" && "".concat(COMPONENT_NAME2.value, "--").concat(props2.shape)];
            });
            var tagStyle = vue.computed(function() {
              return props2.maxWidth ? {
                maxWidth: "".concat(props2.maxWidth, "px")
              } : {};
            });
            var handleClick = function handleClick2(e) {
              var _props2$onClick;
              (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
                e
              });
            };
            var getCloseIcon = function getCloseIcon2() {
              if (!props2.closable)
                return null;
              var iconClassName = "".concat(COMPONENT_NAME2.value, "__icon-close");
              if (tagGlobalConfig.value.closeIcon) {
                return vue.h(tagGlobalConfig.value.closeIcon(vue.h), {
                  "class": iconClassName
                });
              }
              return vue.createVNode(close, {
                "onClick": function onClick(_ref2) {
                  var _props2$onClose;
                  var e = _ref2.e;
                  return (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 ? void 0 : _props2$onClose.call(props2, {
                    e
                  });
                },
                "class": iconClassName
              }, null);
            };
            return function() {
              var closeIcon = getCloseIcon();
              var tagContent = renderContent2("default", "content");
              var icon = renderTNodeJSX2("icon");
              return vue.createVNode("span", {
                "class": tagClass.value,
                "style": tagStyle.value,
                "onClick": handleClick
              }, [icon, props2.maxWidth ? vue.createVNode("span", {
                "style": tagStyle.value,
                "class": "".concat(COMPONENT_NAME2.value, "--text")
              }, [tagContent]) : tagContent, closeIcon]);
            };
          }
        });
        var props$K = {
          checked: {
            type: Boolean,
            "default": void 0
          },
          modelValue: {
            type: Boolean,
            "default": void 0
          },
          defaultChecked: Boolean,
          content: {
            type: [String, Number, Function]
          },
          "default": {
            type: [String, Number, Function]
          },
          disabled: Boolean,
          size: {
            type: String,
            "default": "medium",
            validator: function validator(val) {
              return ["small", "medium", "large"].includes(val);
            }
          },
          onChange: Function,
          onClick: Function
        };
        var _CheckTag = vue.defineComponent({
          name: "TCheckTag",
          props: props$K,
          setup: function setup(props2) {
            var COMPONENT_NAME2 = usePrefixClass("tag");
            var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE;
            var renderContent2 = useContent();
            var _toRefs = vue.toRefs(props2), checked = _toRefs.checked, modelValue = _toRefs.modelValue;
            var _useVModel = useVModel(checked, modelValue, props2.defaultChecked, props2.onChange, "checked"), _useVModel2 = _slicedToArray(_useVModel, 2), innerChecked = _useVModel2[0], setInnerChecked = _useVModel2[1];
            var tagClass = vue.computed(function() {
              var _ref;
              return ["".concat(COMPONENT_NAME2.value), "".concat(COMPONENT_NAME2.value, "--check"), "".concat(COMPONENT_NAME2.value, "--default"), SIZE.value[props2.size], (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--checked"), !props2.disabled && innerChecked.value), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--disabled"), props2.disabled), _ref)];
            });
            var handleClick = function handleClick2(e) {
              if (!props2.disabled) {
                var _props2$onClick;
                (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
                  e
                });
                setInnerChecked(!innerChecked.value);
              }
            };
            return function() {
              var tagContent = renderContent2("default", "content");
              return vue.createVNode("span", {
                "class": tagClass.value,
                "onClick": handleClick
              }, [tagContent]);
            };
          }
        });
        var Tag = withInstall(_Tag);
        var CheckTag = withInstall(_CheckTag);
        var props$J = {
          content: {
            type: [String, Function]
          },
          "default": {
            type: [String, Function]
          },
          disabled: Boolean,
          label: {
            type: String,
            "default": ""
          },
          value: {
            type: [String, Number]
          }
        };
        var props$I = {
          checkAll: Boolean,
          checked: {
            type: Boolean,
            "default": void 0
          },
          modelValue: {
            type: Boolean,
            "default": void 0
          },
          defaultChecked: Boolean,
          "default": {
            type: [String, Function]
          },
          disabled: {
            type: Boolean,
            "default": void 0
          },
          indeterminate: Boolean,
          label: {
            type: [String, Function]
          },
          name: {
            type: String,
            "default": ""
          },
          readonly: Boolean,
          value: {
            type: [String, Number]
          },
          onChange: Function
        };
        var CheckboxGroupInjectionKey = Symbol("CheckboxGroupProvide");
        function ownKeys$1u(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1t(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1u(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1u(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _Checkbox = vue.defineComponent({
          name: "TCheckbox",
          props: _objectSpread$1t(_objectSpread$1t({}, props$I), {}, {
            needRipple: Boolean
          }),
          setup: function setup(props2) {
            var labelRef = vue.ref();
            if (props2.needRipple) {
              useRipple(labelRef);
            }
            var _toRefs = vue.toRefs(props2), checked = _toRefs.checked, modelValue = _toRefs.modelValue;
            var _useVModel = useVModel(checked, modelValue, props2.defaultChecked, props2.onChange, "checked"), _useVModel2 = _slicedToArray(_useVModel, 2), innerChecked = _useVModel2[0], setInnerChecked = _useVModel2[1];
            var checkboxGroup = vue.inject(CheckboxGroupInjectionKey, void 0);
            var GroupDisabled = vue.computed(function() {
              return props2.disabled || !!(checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.disabled);
            });
            var formDisabled = useFormDisabled(GroupDisabled);
            var name = vue.computed(function() {
              return props2.name || (checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.name);
            });
            var selfChecked = vue.computed(function() {
              if (props2.checkAll)
                return checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.isCheckAll;
              return checkboxGroup ? !!checkboxGroup.checkedMap[props2.value] : innerChecked.value;
            });
            var disabled = vue.computed(function() {
              if (formDisabled)
                return formDisabled.value;
              if (!props2.checkAll && !selfChecked.value && checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.maxExceeded) {
                return true;
              }
              if (props2.disabled !== void 0)
                return props2.disabled;
              return !!(checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.disabled);
            });
            var selfIndeterminate = vue.computed(function() {
              if (props2.checkAll)
                return checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.indeterminate;
              return props2.indeterminate;
            });
            var classPrefix2 = usePrefixClass();
            var COMPONENT_NAME2 = usePrefixClass("checkbox");
            var labelClasses = vue.computed(function() {
              var _ref;
              return ["".concat(COMPONENT_NAME2.value), (_ref = {}, _defineProperty$3(_ref, "".concat(classPrefix2.value, "-is-checked"), selfChecked.value), _defineProperty$3(_ref, "".concat(classPrefix2.value, "-is-disabled"), disabled.value), _defineProperty$3(_ref, "".concat(classPrefix2.value, "-is-indeterminate"), selfIndeterminate.value), _ref)];
            });
            var handleChange = function handleChange2(e) {
              var checked2 = !selfChecked.value;
              setInnerChecked(checked2, {
                e
              });
              if (checkboxGroup && checkboxGroup.handleCheckboxChange) {
                checkboxGroup.onCheckedChange({
                  checked: checked2,
                  checkAll: props2.checkAll,
                  e,
                  option: props2
                });
              }
            };
            var renderContent2 = useContent();
            return function() {
              return vue.createVNode("label", {
                "class": labelClasses.value,
                "ref": "labelRef"
              }, [vue.createVNode("input", {
                "type": "checkbox",
                "class": "".concat(COMPONENT_NAME2.value, "__former"),
                "disabled": disabled.value,
                "readonly": props2.readonly,
                "indeterminate": props2.indeterminate,
                "name": name.value,
                "value": props2.value,
                "checked": selfChecked.value,
                "onChange": handleChange
              }, null), vue.createVNode("span", {
                "class": "".concat(COMPONENT_NAME2.value, "__input")
              }, null), vue.createVNode("span", {
                "class": "".concat(COMPONENT_NAME2.value, "__label")
              }, [renderContent2("default", "label")])]);
            };
          }
        });
        var HASH_UNDEFINED = "__lodash_hash_undefined__";
        function setCacheAdd$1(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        var _setCacheAdd = setCacheAdd$1;
        function setCacheHas$1(value) {
          return this.__data__.has(value);
        }
        var _setCacheHas = setCacheHas$1;
        var MapCache = _MapCache, setCacheAdd = _setCacheAdd, setCacheHas = _setCacheHas;
        function SetCache$3(values) {
          var index2 = -1, length = values == null ? 0 : values.length;
          this.__data__ = new MapCache();
          while (++index2 < length) {
            this.add(values[index2]);
          }
        }
        SetCache$3.prototype.add = SetCache$3.prototype.push = setCacheAdd;
        SetCache$3.prototype.has = setCacheHas;
        var _SetCache = SetCache$3;
        function baseFindIndex$2(array, predicate, fromIndex, fromRight) {
          var length = array.length, index2 = fromIndex + (fromRight ? 1 : -1);
          while (fromRight ? index2-- : ++index2 < length) {
            if (predicate(array[index2], index2, array)) {
              return index2;
            }
          }
          return -1;
        }
        var _baseFindIndex = baseFindIndex$2;
        function baseIsNaN$1(value) {
          return value !== value;
        }
        var _baseIsNaN = baseIsNaN$1;
        function strictIndexOf$1(array, value, fromIndex) {
          var index2 = fromIndex - 1, length = array.length;
          while (++index2 < length) {
            if (array[index2] === value) {
              return index2;
            }
          }
          return -1;
        }
        var _strictIndexOf = strictIndexOf$1;
        var baseFindIndex$1 = _baseFindIndex, baseIsNaN = _baseIsNaN, strictIndexOf = _strictIndexOf;
        function baseIndexOf$1(array, value, fromIndex) {
          return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex$1(array, baseIsNaN, fromIndex);
        }
        var _baseIndexOf = baseIndexOf$1;
        var baseIndexOf = _baseIndexOf;
        function arrayIncludes$2(array, value) {
          var length = array == null ? 0 : array.length;
          return !!length && baseIndexOf(array, value, 0) > -1;
        }
        var _arrayIncludes = arrayIncludes$2;
        function arrayIncludesWith$2(array, value, comparator) {
          var index2 = -1, length = array == null ? 0 : array.length;
          while (++index2 < length) {
            if (comparator(value, array[index2])) {
              return true;
            }
          }
          return false;
        }
        var _arrayIncludesWith = arrayIncludesWith$2;
        function cacheHas$3(cache, key) {
          return cache.has(key);
        }
        var _cacheHas = cacheHas$3;
        var SetCache$2 = _SetCache, arrayIncludes$1 = _arrayIncludes, arrayIncludesWith$1 = _arrayIncludesWith, arrayMap$4 = _arrayMap, baseUnary$1 = _baseUnary, cacheHas$2 = _cacheHas;
        var nativeMin = Math.min;
        function baseIntersection$1(arrays, iteratee, comparator) {
          var includes = comparator ? arrayIncludesWith$1 : arrayIncludes$1, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array(othLength), maxLength = Infinity, result = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee) {
              array = arrayMap$4(array, baseUnary$1(iteratee));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache$2(othIndex && array) : void 0;
          }
          array = arrays[0];
          var index2 = -1, seen = caches[0];
          outer:
            while (++index2 < length && result.length < maxLength) {
              var value = array[index2], computed = iteratee ? iteratee(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas$2(seen, computed) : includes(result, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas$2(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result.push(value);
              }
            }
          return result;
        }
        var _baseIntersection = baseIntersection$1;
        var isArrayLikeObject$2 = isArrayLikeObject_1;
        function castArrayLikeObject$1(value) {
          return isArrayLikeObject$2(value) ? value : [];
        }
        var _castArrayLikeObject = castArrayLikeObject$1;
        var arrayMap$3 = _arrayMap, baseIntersection = _baseIntersection, baseRest$3 = _baseRest, castArrayLikeObject = _castArrayLikeObject;
        var intersection = baseRest$3(function(arrays) {
          var mapped = arrayMap$3(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersection_1 = intersection;
        var props$H = {
          disabled: Boolean,
          max: {
            type: Number,
            "default": void 0
          },
          name: {
            type: String,
            "default": ""
          },
          options: {
            type: Array,
            "default": function _default() {
              return [];
            }
          },
          value: {
            type: Array,
            "default": void 0
          },
          modelValue: {
            type: Array,
            "default": void 0
          },
          defaultValue: {
            type: Array,
            "default": function _default() {
              return [];
            }
          },
          onChange: Function
        };
        function ownKeys$1t(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1s(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1t(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1t(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot$n(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var _Group$1 = vue.defineComponent({
          name: "TCheckboxGroup",
          props: props$H,
          setup: function setup(props2) {
            var COMPONENT_NAME2 = usePrefixClass("checkbox-group");
            var renderTNodeJSX2 = useTNodeJSX();
            var isArray2 = Array.isArray;
            var _toRefs = vue.toRefs(props2), value = _toRefs.value, modelValue = _toRefs.modelValue;
            var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerValue = _useVModel2[0], setInnerValue = _useVModel2[1];
            var checkedMap = vue.computed(function() {
              var map = {};
              if (isArray2(innerValue.value)) {
                innerValue.value.forEach(function(item) {
                  map[item] = true;
                });
              }
              return map;
            });
            var optionList = vue.ref([]);
            var intersectionLen = vue.computed(function() {
              var values = optionList.value.map(function(item) {
                return item.value;
              });
              if (isArray2(innerValue.value)) {
                var n = intersection_1(innerValue.value, values);
                return n.length;
              }
              return 0;
            });
            var isCheckAll = vue.computed(function() {
              if (isArray2(innerValue.value) && innerValue.value.length !== optionList.value.length - 1) {
                return false;
              }
              return intersectionLen.value === optionList.value.length - 1;
            });
            var indeterminate = vue.computed(function() {
              return !isCheckAll.value && intersectionLen.value < optionList.value.length && intersectionLen.value !== 0;
            });
            var maxExceeded = vue.computed(function() {
              return props2.max !== void 0 && innerValue.value.length === props2.max;
            });
            vue.watchEffect(function() {
              if (!props2.options)
                return [];
              optionList.value = props2.options.map(function(item) {
                var r = {};
                if (_typeof$2(item) !== "object") {
                  r = {
                    label: String(item),
                    value: item
                  };
                } else {
                  r = _objectSpread$1s({}, item);
                  r.disabled = r.disabled === void 0 ? props2.disabled : r.disabled;
                }
                return r;
              });
            });
            var getAllCheckboxValue = function getAllCheckboxValue2() {
              var val = /* @__PURE__ */ new Set();
              for (var i2 = 0, len = optionList.value.length; i2 < len; i2++) {
                var item = optionList.value[i2];
                if (item.checkAll)
                  continue;
                val.add(item.value);
                if (maxExceeded.value)
                  break;
              }
              return _toConsumableArray(val);
            };
            var onCheckAllChange = function onCheckAllChange2(checked, context) {
              var value2 = checked ? getAllCheckboxValue() : [];
              setInnerValue(value2, {
                e: context.e,
                type: checked ? "check" : "uncheck",
                current: void 0,
                option: void 0
              });
            };
            var handleCheckboxChange = function handleCheckboxChange2(data) {
              var currentValue = data.option.value;
              if (isArray2(innerValue.value)) {
                var val = _toConsumableArray(innerValue.value);
                if (data.checked) {
                  val.push(currentValue);
                } else {
                  var i2 = val.indexOf(currentValue);
                  val.splice(i2, 1);
                }
                setInnerValue(val, {
                  e: data.e,
                  current: data.option.value,
                  option: data.option,
                  type: data.checked ? "check" : "uncheck"
                });
              } else {
                console.warn("TDesign CheckboxGroup Warn: `value` must be an array, instead of ".concat(_typeof$2(innerValue.value)));
              }
            };
            var onCheckedChange = function onCheckedChange2(p) {
              var checked = p.checked, checkAll = p.checkAll, e = p.e;
              if (checkAll) {
                onCheckAllChange(checked, {
                  e
                });
              } else {
                handleCheckboxChange(p);
              }
            };
            var getOptionListBySlots = function getOptionListBySlots2(nodes) {
              var arr = [];
              nodes === null || nodes === void 0 ? void 0 : nodes.forEach(function(node) {
                var option = node.props;
                if ((option === null || option === void 0 ? void 0 : option["check-all"]) === "" || (option === null || option === void 0 ? void 0 : option["check-all"]) === true) {
                  option.checkAll = true;
                }
                option && arr.push(option);
              });
              return arr;
            };
            var renderLabel = function renderLabel2(option) {
              if (typeof option.label === "function") {
                return option.label(vue.h);
              }
              return option.label;
            };
            var _toRefs2 = vue.toRefs(props2), name = _toRefs2.name, disabled = _toRefs2.disabled;
            vue.provide(CheckboxGroupInjectionKey, vue.reactive({
              name,
              isCheckAll,
              checkedMap,
              maxExceeded,
              disabled,
              indeterminate,
              handleCheckboxChange,
              onCheckedChange
            }));
            return function() {
              var _props2$options;
              var children = null;
              if ((_props2$options = props2.options) !== null && _props2$options !== void 0 && _props2$options.length) {
                var _optionList$value;
                children = (_optionList$value = optionList.value) === null || _optionList$value === void 0 ? void 0 : _optionList$value.map(function(option, index2) {
                  var _slot;
                  return vue.createVNode(_Checkbox, vue.mergeProps({
                    "key": "".concat(option.value).concat(index2)
                  }, option, {
                    "checked": checkedMap.value[option.value]
                  }), _isSlot$n(_slot = renderLabel(option)) ? _slot : {
                    "default": function _default() {
                      return [_slot];
                    }
                  });
                });
              } else {
                var nodes = renderTNodeJSX2("default");
                optionList.value = getOptionListBySlots(nodes);
                children = nodes;
              }
              return vue.createVNode("div", {
                "class": COMPONENT_NAME2.value
              }, [children]);
            };
          }
        });
        var Checkbox = withInstall(_Checkbox);
        var CheckboxGroup = withInstall(_Group$1);
        function ownKeys$1s(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1r(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1s(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1s(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot$m(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var _Option = vue.defineComponent({
          name: "TOption",
          components: {
            TCheckbox: Checkbox
          },
          inject: {
            tSelect: {
              "default": void 0
            }
          },
          props: _objectSpread$1r({}, props$J),
          setup: function setup() {
            var disabled = useFormDisabled();
            var selectName = usePrefixClass("select");
            var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS, SIZE = _useCommonClassName.SIZE;
            var liRef = vue.ref();
            useRipple(liRef);
            return {
              STATUS,
              SIZE,
              selectName,
              disabled,
              liRef
            };
          },
          data: function data() {
            return {
              isHover: false
            };
          },
          computed: {
            hovering: function hovering() {
              return this.tSelect && this.tSelect.visible && this.tSelect.hoverOptions[this.tSelect.hoverIndex] && this.tSelect.hoverOptions[this.tSelect.hoverIndex][this.tSelect.realValue] === this.value;
            },
            multiLimitDisabled: function multiLimitDisabled() {
              if (this.tSelect && this.tSelect.multiple && this.tSelect.max) {
                if (this.tSelect.value instanceof Array && this.tSelect.value.indexOf(this.value) === -1 && this.tSelect.max <= this.tSelect.value.length) {
                  return true;
                }
              }
              return false;
            },
            classes: function classes() {
              var _ref;
              return ["".concat(this.selectName, "-option"), (_ref = {}, _defineProperty$3(_ref, this.STATUS.disabled, this.disabled || this.multiLimitDisabled), _defineProperty$3(_ref, this.STATUS.selected, this.selected), _defineProperty$3(_ref, this.SIZE[this.tSelect && this.tSelect.size], this.tSelect && this.tSelect.size), _defineProperty$3(_ref, "".concat(this.selectName, "-option__hover"), this.hovering), _ref)];
            },
            isCreatedOption: function isCreatedOption() {
              return this.tSelect.creatable && this.value === this.tSelect.searchInput;
            },
            labelText: function labelText() {
              return this.label || String(this.value);
            },
            selected: function selected() {
              var _this = this;
              var flag = false;
              if (!this.tSelect)
                return false;
              if (this.tSelect.value instanceof Array) {
                if (this.tSelect.labelInValue) {
                  flag = this.tSelect.value.map(function(item) {
                    return get_1(item, _this.tSelect.realValue);
                  }).indexOf(this.value) !== -1;
                } else {
                  flag = this.tSelect.value.indexOf(this.value) !== -1;
                }
              } else if (_typeof$2(this.tSelect.value) === "object") {
                flag = get_1(this.tSelect.value, this.tSelect.realValue) === this.value;
              } else {
                flag = this.tSelect.value === this.value;
              }
              return flag;
            }
          },
          watch: {
            value: function value() {
              this.tSelect && this.tSelect.getOptions(this);
            },
            label: function label() {
              this.tSelect && this.tSelect.getOptions(this);
            },
            hovering: function hovering() {
              var _this2 = this;
              if (this.hovering) {
                var timer = setTimeout(function() {
                  scrollSelectedIntoView(_this2.tSelect.getOverlayElm(), _this2.$el);
                  clearTimeout(timer);
                }, this.tSelect.popupOpenTime);
              }
            }
          },
          mounted: function mounted() {
            this.tSelect && this.tSelect.getOptions(this);
          },
          methods: {
            select: function select(e) {
              e.stopPropagation();
              if (this.disabled || this.multiLimitDisabled) {
                return false;
              }
              var parent2 = this.$el.parentNode;
              if (parent2 && parent2.className.indexOf("".concat(this.selectName, "__create-option")) !== -1) {
                this.tSelect && this.tSelect.createOption(this.value.toString());
              }
              this.tSelect && this.tSelect.onOptionClick(this.value, e);
            },
            mouseEvent: function mouseEvent(v) {
              this.isHover = v;
            }
          },
          render: function render() {
            var _this3 = this;
            var classes = this.classes, labelText = this.labelText, selected = this.selected, disabled = this.disabled, multiLimitDisabled = this.multiLimitDisabled;
            var children = renderContent(this, "default", "content");
            var optionChild = children || labelText;
            return vue.createVNode("li", {
              "ref": "liRef",
              "class": classes,
              "title": labelText,
              "onMouseenter": function onMouseenter() {
                return _this3.mouseEvent(true);
              },
              "onMouseleave": function onMouseleave() {
                return _this3.mouseEvent(false);
              },
              "onClick": function onClick(e) {
                e.preventDefault();
                _this3.select(e);
              }
            }, [this.tSelect && this.tSelect.multiple ? vue.createVNode(vue.resolveComponent("t-checkbox"), {
              "checked": selected,
              "disabled": disabled || multiLimitDisabled
            }, _isSlot$m(optionChild) ? optionChild : {
              "default": function _default() {
                return [optionChild];
              }
            }) : vue.createVNode("span", null, [optionChild])]);
          }
        });
        var props$G = {
          divider: {
            type: Boolean,
            "default": true
          },
          label: {
            type: String,
            "default": ""
          }
        };
        function ownKeys$1r(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1q(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1r(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1r(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _OptionGroup = vue.defineComponent({
          name: "TOptionGroup",
          inject: {
            tSelect: {
              "default": void 0
            }
          },
          props: _objectSpread$1q({}, props$G),
          setup: function setup() {
            var COMPONENT_NAME2 = usePrefixClass("select-option-group");
            var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE;
            return {
              SIZE,
              COMPONENT_NAME: COMPONENT_NAME2
            };
          },
          data: function data() {
            return {
              visible: true
            };
          },
          computed: {
            classes: function classes() {
              var _ref;
              return [this.COMPONENT_NAME, (_ref = {}, _defineProperty$3(_ref, this.SIZE[this.tSelect.size], this.tSelect && this.tSelect.size), _defineProperty$3(_ref, "".concat(this.COMPONENT_NAME, "__divider"), this.divider), _ref)];
            }
          },
          methods: {
            childrenChange: function childrenChange() {
              this.visible = this.$children && Array.isArray(this.$children) && this.$children.some(function(option) {
                return option.show === true;
              });
            }
          },
          render: function render() {
            var children = renderTNodeJSX(this, "default");
            return vue.createVNode("li", {
              "class": this.classes
            }, [vue.createVNode("div", {
              "class": "".concat(this.COMPONENT_NAME, "__header")
            }, [this.label]), vue.createVNode("ul", null, [children])]);
          }
        });
        var props$F = {
          autoWidth: Boolean,
          bordered: {
            type: Boolean,
            "default": true
          },
          borderless: Boolean,
          clearable: Boolean,
          collapsedItems: {
            type: Function
          },
          creatable: Boolean,
          disabled: Boolean,
          empty: {
            type: [String, Function],
            "default": ""
          },
          filter: {
            type: Function
          },
          filterable: Boolean,
          inputProps: {
            type: Object
          },
          inputValue: {
            type: [String, Number],
            "default": void 0
          },
          defaultInputValue: {
            type: [String, Number]
          },
          keys: {
            type: Object
          },
          loading: Boolean,
          loadingText: {
            type: [String, Function],
            "default": ""
          },
          max: {
            type: Number,
            "default": 0
          },
          minCollapsedNum: {
            type: Number,
            "default": 0
          },
          multiple: Boolean,
          options: {
            type: Array,
            "default": function _default() {
              return [];
            }
          },
          panelBottomContent: {
            type: [String, Function]
          },
          panelTopContent: {
            type: [String, Function]
          },
          placeholder: {
            type: String,
            "default": void 0
          },
          popupProps: {
            type: Object
          },
          popupVisible: {
            type: Boolean,
            "default": void 0
          },
          prefixIcon: {
            type: Function
          },
          readonly: Boolean,
          reserveKeyword: Boolean,
          selectInputProps: {
            type: Object
          },
          showCheckAlll: Boolean,
          showArrow: {
            type: Boolean,
            "default": true
          },
          size: {
            type: String,
            "default": "medium",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["small", "medium", "large"].includes(val);
            }
          },
          tagInputProps: {
            type: Object
          },
          tagProps: {
            type: Object
          },
          value: {
            type: [String, Number, Object, Array],
            "default": void 0
          },
          modelValue: {
            type: [String, Number, Object, Array],
            "default": void 0
          },
          defaultValue: {
            type: [String, Number, Object, Array]
          },
          valueDisplay: {
            type: [String, Function]
          },
          valueType: {
            type: String,
            "default": "value",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["value", "object"].includes(val);
            }
          },
          onBlur: Function,
          onChange: Function,
          onClear: Function,
          onCreate: Function,
          onEnter: Function,
          onFocus: Function,
          onInputChange: Function,
          onPopupVisibleChange: Function,
          onRemove: Function,
          onSearch: Function,
          onVisibleChange: Function
        };
        function ownKeys$1q(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1p(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1q(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1q(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot$l(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var DEFAULT_MAX_OVERLAY_WIDTH = 500;
        var DEFAULT_SCROLLY_WIDTH = 8;
        var _Select = vue.defineComponent({
          name: "TSelect",
          components: {
            CloseCircleFilledIcon: closeCircleFilled,
            TInput: Input,
            Tag,
            Popup,
            TOption: _Option,
            TOptionGroup: _OptionGroup
          },
          provide: function provide() {
            return {
              tSelect: this
            };
          },
          inject: {
            formItem: {
              "default": void 0
            }
          },
          props: _objectSpread$1p({}, props$F),
          emits: ["change", "input", "clear", "keydown", "keyup", "keypress", "focus", "blur", "remove", "create", "search", "visible-change", "popup-visible-change"],
          setup: function setup() {
            var disabled = useFormDisabled();
            var COMPONENT_NAME2 = usePrefixClass("select");
            var classPrefix2 = usePrefixClass("");
            var listName = usePrefixClass("select__list");
            var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS, SIZE = _useCommonClassName.SIZE;
            var _useConfig = useConfig("select"), global2 = _useConfig.global, t = _useConfig.t;
            return {
              STATUS,
              SIZE,
              classPrefix: classPrefix2,
              listName,
              COMPONENT_NAME: COMPONENT_NAME2,
              disabled,
              global: global2,
              t
            };
          },
          data: function data() {
            return {
              isHover: false,
              visible: false,
              searchInput: "",
              showCreateOption: false,
              hasOptions: false,
              defaultProps: {
                trigger: "click",
                placement: "bottom-left",
                overlayClassName: "",
                overlayStyle: {}
              },
              focusing: false,
              labelInValue: this.valueType === "object",
              realValue: this.keys && this.keys.value ? this.keys.value : "value",
              realLabel: this.keys && this.keys.label ? this.keys.label : "label",
              realOptions: [],
              hoverIndex: -1,
              popupOpenTime: 250,
              checkScroll: true
            };
          },
          computed: {
            classes: function classes() {
              var _ref;
              return ["".concat(this.COMPONENT_NAME), "".concat(this.COMPONENT_NAME, "-polyfill"), (_ref = {}, _defineProperty$3(_ref, this.STATUS.disabled, this.disabled), _defineProperty$3(_ref, this.STATUS.active, this.visible), _defineProperty$3(_ref, this.SIZE[this.size], this.size), _defineProperty$3(_ref, "".concat(this.classPrefix, "-has-prefix"), this.$slots.prefixIcon), _defineProperty$3(_ref, "".concat(this.classPrefix, "-no-border"), !this.bordered), _ref)];
            },
            popClass: function popClass() {
              var popupObject = this.popupObject;
              return "".concat(popupObject.overlayClassName, " ").concat(this.COMPONENT_NAME, "__dropdown narrow-scrollbar");
            },
            tipsClass: function tipsClass() {
              return ["".concat(this.COMPONENT_NAME, "__loading-tips"), _defineProperty$3({}, this.SIZE[this.size], this.size)];
            },
            emptyClass: function emptyClass() {
              return ["".concat(this.COMPONENT_NAME, "__empty"), _defineProperty$3({}, this.SIZE[this.size], this.size)];
            },
            showPlaceholder: function showPlaceholder() {
              if (!this.showFilter && (!this.multiple && !this.selectedSingle || !this.multiple && _typeof$2(this.value) === "object" && !this.selectedSingle || Array.isArray(this.value) && !this.value.length || this.value === null || this.value === void 0 || this.value === "")) {
                return true;
              }
              return false;
            },
            isGroupOption: function isGroupOption() {
              var _this$options;
              var firstOption = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options[0];
              return !!(firstOption && "group" in firstOption && "children" in firstOption);
            },
            filterPlaceholder: function filterPlaceholder() {
              if (this.multiple && Array.isArray(this.value) && this.value.length) {
                return "";
              }
              if (!this.multiple && this.selectedSingle) {
                return this.selectedSingle;
              }
              return this.placeholder;
            },
            showClose: function showClose() {
              return Boolean(this.clearable && this.isHover && !this.disabled && (!this.multiple && (this.value || this.value === 0) || this.multiple && Array.isArray(this.value) && this.value.length));
            },
            innerShowArrow: function innerShowArrow() {
              return this.showArrow && (!this.clearable || !this.isHover || this.disabled || !this.multiple && !this.value && this.value !== 0 || this.multiple && (!Array.isArray(this.value) || Array.isArray(this.value) && !this.value.length));
            },
            canFilter: function canFilter() {
              return this.filterable || isFunction_1(this.filter);
            },
            showLoading: function showLoading() {
              return this.loading && !this.disabled;
            },
            showFilter: function showFilter() {
              if (this.disabled)
                return false;
              if (!this.multiple && this.selectedSingle && this.canFilter) {
                return this.visible;
              }
              return this.canFilter;
            },
            selectedSingle: function selectedSingle() {
              var _this = this;
              if (!this.multiple && (typeof this.value === "string" || typeof this.value === "number")) {
                var target = [];
                if (this.realOptions && this.realOptions.length) {
                  target = this.realOptions.filter(function(item) {
                    return get_1(item, _this.realValue) === _this.value;
                  });
                }
                if (target.length) {
                  if (get_1(target[target.length - 1], this.realLabel) === "") {
                    return get_1(target[target.length - 1], this.realValue);
                  }
                  return get_1(target[target.length - 1], this.realLabel);
                }
                return this.value.toString();
              }
              var showText = get_1(this.value, this.realLabel);
              if (!this.multiple && _typeof$2(this.value) === "object" && showText !== void 0) {
                return showText === "" ? get_1(this.value, this.realValue) : showText;
              }
              return "";
            },
            selectedMultiple: function selectedMultiple() {
              var _this2 = this;
              if (this.multiple && Array.isArray(this.value) && this.value.length) {
                return this.value.map(function(item) {
                  if (_typeof$2(item) === "object") {
                    return item;
                  }
                  var tmp = _this2.realOptions.filter(function(op) {
                    return get_1(op, _this2.realValue) === item;
                  });
                  var valueLabel = {};
                  set_1(valueLabel, _this2.realValue, item);
                  set_1(valueLabel, _this2.realLabel, tmp.length ? get_1(tmp[tmp.length - 1], _this2.realLabel) : item);
                  return tmp.length && tmp[tmp.length - 1].disabled ? _objectSpread$1p(_objectSpread$1p({}, valueLabel), {}, {
                    disabled: true
                  }) : valueLabel;
                });
              }
              return [];
            },
            popupObject: function popupObject() {
              var propsObject = this.popupProps ? _objectSpread$1p(_objectSpread$1p({}, this.defaultProps), this.popupProps) : this.defaultProps;
              return propsObject;
            },
            filterOptions: function filterOptions() {
              var _this3 = this;
              if (isFunction_1(this.filter)) {
                return this.realOptions.filter(function(option) {
                  return _this3.filter(_this3.searchInput, option);
                });
              }
              if (this.filterable) {
                return this.realOptions.filter(function(option) {
                  return option[_this3.realLabel].toString().toLowerCase().indexOf(_this3.searchInput.toString().toLowerCase()) !== -1;
                });
              }
              return [];
            },
            displayOptions: function displayOptions() {
              if (isFunction_1(this.onSearch) || this.$attrs.search) {
                return this.realOptions;
              }
              if (this.canFilter && !this.creatable) {
                if (this.searchInput === "") {
                  return this.realOptions;
                }
                return this.filterOptions;
              }
              return this.realOptions;
            },
            hoverOptions: function hoverOptions() {
              if (!this.showCreateOption) {
                if (isFunction_1(this.filter) || this.filterable) {
                  return this.filterOptions;
                }
                return this.realOptions;
              }
              var willCreateOption = [{
                value: this.searchInput,
                label: this.searchInput
              }];
              if (isFunction_1(this.filter) || this.filterable) {
                return willCreateOption.concat(this.filterOptions);
              }
              return willCreateOption.concat(this.realOptions);
            }
          },
          watch: {
            showFilter: function showFilter(val) {
              var _this4 = this;
              if (val && this.selectedSingle) {
                vue.nextTick(function() {
                  _this4.doFocus();
                });
              }
            },
            searchInput: function searchInput(val) {
              var _this5 = this;
              if (!val && !this.visible)
                return;
              if (isFunction_1(this.onSearch) || this.$attrs.search) {
                this.debounceOnRemote();
              }
              if (this.canFilter && val && this.creatable) {
                var tmp = this.realOptions.filter(function(item) {
                  return get_1(item, _this5.realLabel).toString() === val;
                });
                this.showCreateOption = !tmp.length;
              } else {
                this.showCreateOption = false;
              }
            },
            options: {
              immediate: true,
              deep: true,
              handler: function handler(options) {
                if (Array.isArray(options)) {
                  this.realOptions = this.getRealOptions(options);
                } else {
                  console.error("TDesign Select: options must be an array.");
                }
              }
            },
            visible: function visible() {
              this.visible && document.addEventListener("keydown", this.keydownEvent);
              !this.visible && document.removeEventListener("keydown", this.keydownEvent);
            }
          },
          mounted: function mounted() {
            this.checkVal();
          },
          methods: {
            getRealOptions: function getRealOptions(options) {
              if (this.isGroupOption) {
                var arr = [];
                options.forEach(function(item) {
                  if ("children" in item) {
                    arr = arr.concat(item.children);
                  }
                });
                return arr;
              }
              return _toConsumableArray(options);
            },
            checkVal: function checkVal() {
              var value = this.value, multiple = this.multiple;
              if (multiple && !Array.isArray(value) || !multiple && Array.isArray(value)) {
                emitEvent(this, "change", this.multiple ? [] : "");
                console.warn("TDesign Warn:", "select props value invalid, v-model automatic calibration");
              }
            },
            multiLimitDisabled: function multiLimitDisabled(value) {
              if (this.multiple && this.max) {
                if (this.value instanceof Array && this.value.indexOf(value) === -1 && this.max <= this.value.length) {
                  return true;
                }
              }
              return false;
            },
            visibleChange: function visibleChange(val, context) {
              this.visible = val;
              if (!val) {
                this.searchInput = "";
                this.showCreateOption = false;
              }
              val && this.monitorWidth();
              val && this.canFilter && this.doFocus();
              emitEvent(this, "visible-change", val);
              emitEvent(this, "popup-visible-change", val, context);
            },
            onOptionClick: function onOptionClick(value, e) {
              var _this6 = this;
              if (this.value !== value) {
                if (this.multiple && this.value instanceof Array) {
                  if (this.labelInValue) {
                    var index2 = this.value.map(function(item) {
                      return get_1(item, _this6.realValue);
                    }).indexOf(value);
                    if (index2 > -1) {
                      this.removeTag(index2, {
                        e
                      });
                    } else {
                      this.value.push(this.realOptions.filter(function(item) {
                        return get_1(item, _this6.realValue) === value;
                      })[0]);
                      this.emitChange(this.value, "check");
                    }
                  } else {
                    var _index = this.value.indexOf(value);
                    if (_index > -1) {
                      this.removeTag(_index, {
                        e
                      });
                    } else {
                      this.value.push(value);
                      this.emitChange(this.value, "check");
                    }
                  }
                } else {
                  this.emitChange(value, "check");
                }
              }
              if (!this.multiple) {
                this.searchInput = "";
                this.hideMenu();
              } else {
                if (!this.reserveKeyword) {
                  this.searchInput = "";
                }
                this.canFilter && this.doFocus();
              }
            },
            removeTag: function removeTag(index2, context) {
              var _this7 = this;
              var _ref4 = context || {}, e = _ref4.e;
              e && e.stopPropagation();
              if (this.disabled) {
                return;
              }
              var val = this.value[index2];
              var removeOption = this.realOptions.filter(function(item) {
                return get_1(item, _this7.realValue) === val;
              });
              var tempValue = this.value instanceof Array ? [].concat(this.value) : [];
              tempValue.splice(index2, 1);
              this.emitChange(tempValue, "tag-remove");
              emitEvent(this, "remove", {
                value: val,
                data: removeOption[0],
                e
              });
            },
            hideMenu: function hideMenu() {
              this.visible = false;
            },
            clearSelect: function clearSelect(e) {
              e.stopPropagation();
              if (this.multiple) {
                this.emitChange([], "clear");
              } else {
                this.emitChange("", "clear");
              }
              this.focusing = false;
              this.searchInput = "";
              this.visible = false;
              emitEvent(this, "clear", {
                e
              });
            },
            getOptions: function getOptions(option) {
              var _this8 = this;
              if (option.$el && option.$el.className && option.$el.className.indexOf("".concat(this.COMPONENT_NAME, "__create-option--special")) !== -1)
                return;
              var tmp = this.realOptions.filter(function(item) {
                return get_1(item, _this8.realValue) === option.value;
              });
              if (!tmp.length) {
                this.hasOptions = true;
                var valueLabel = {};
                set_1(valueLabel, this.realValue, option.value);
                set_1(valueLabel, this.realLabel, option.label);
                var valueLabelAble = option.disabled ? _objectSpread$1p(_objectSpread$1p({}, valueLabel), {}, {
                  disabled: true
                }) : valueLabel;
                this.realOptions.push(valueLabelAble);
              }
            },
            destroyOptions: function destroyOptions(option) {
              var _this9 = this;
              this.realOptions.forEach(function(item, index2) {
                if (item[_this9.realValue] === option.value && item[_this9.realLabel] === option.label) {
                  _this9.realOptions.splice(index2, 1);
                }
              });
            },
            emitChange: function emitChange(val, trigger) {
              var _this10 = this;
              var value;
              if (this.labelInValue) {
                if (Array.isArray(val)) {
                  if (!val.length) {
                    value = [];
                  } else {
                    value = val;
                  }
                } else {
                  var target = this.realOptions.filter(function(item) {
                    return get_1(item, _this10.realValue) === val;
                  });
                  value = target.length ? target[0] : "";
                }
              } else {
                value = val;
              }
              emitEvent(this, "change", value, {
                trigger
              });
            },
            createOption: function createOption(value) {
              var _this11 = this;
              this.$nextTick(function() {
                _this11.searchInput = "";
                _this11.showCreateOption = false;
              });
              emitEvent(this, "create", value);
            },
            debounceOnRemote: debounce_1(function() {
              emitEvent(this, "search", this.searchInput);
            }, 300),
            focus: function focus(value, context) {
              this.focusing = true;
              emitEvent(this, "focus", {
                value: this.value,
                e: context === null || context === void 0 ? void 0 : context.e
              });
            },
            blur: function blur(value, context) {
              this.focusing = false;
              emitEvent(this, "blur", {
                value: this.value,
                e: context === null || context === void 0 ? void 0 : context.e
              });
            },
            enter: function enter(value, context) {
              emitEvent(this, "enter", {
                inputValue: this.searchInput,
                value: this.value,
                e: context === null || context === void 0 ? void 0 : context.e
              });
            },
            keydownEvent: function keydownEvent(e) {
              if (!this.hoverOptions.length)
                return;
              var preventKeys = ["ArrowDown", "ArrowUp", "Enter", "Escape", "Tab"];
              if (preventKeys.includes(e.code)) {
                e.preventDefault();
              }
              switch (e.code) {
                case "ArrowDown":
                  if (this.hoverIndex === -1) {
                    this.initHoverindex();
                    return;
                  }
                  if (this.hoverIndex < this.hoverOptions.length - 1) {
                    this.hoverIndex += 1;
                    this.arrowDownOption();
                  } else {
                    this.hoverIndex = 0;
                    this.arrowDownOption();
                  }
                  break;
                case "ArrowUp":
                  if (this.hoverIndex === -1) {
                    this.initHoverindex();
                    return;
                  }
                  if (this.hoverIndex > 0) {
                    this.hoverIndex -= 1;
                    this.arrowUpOption();
                  } else {
                    this.hoverIndex = this.hoverOptions.length - 1;
                    this.arrowUpOption();
                  }
                  break;
                case "Enter":
                  if (this.showCreateOption) {
                    this.createOption(this.searchInput);
                  }
                  this.hoverOptions[this.hoverIndex] && this.onOptionClick(this.hoverOptions[this.hoverIndex][this.realValue], e);
                  break;
                case "Escape":
                case "Tab":
                  this.visible = false;
                  emitEvent(this, "visible-change", false);
                  this.searchInput = "";
                  if (this.focusing) {
                    this.blur(this.searchInput, {
                      e
                    });
                  }
                  break;
              }
            },
            arrowDownOption: function arrowDownOption() {
              var count = 0;
              while (this.hoverIndex < this.hoverOptions.length) {
                if (!this.hoverOptions[this.hoverIndex] || !this.hoverOptions[this.hoverIndex].disabled) {
                  break;
                }
                if (this.hoverIndex === this.hoverOptions.length - 1) {
                  this.hoverIndex = 0;
                } else {
                  this.hoverIndex += 1;
                }
                count += 1;
                if (count >= this.hoverOptions.length)
                  break;
              }
            },
            arrowUpOption: function arrowUpOption() {
              var count = 0;
              while (this.hoverIndex > -1) {
                if (!this.hoverOptions[this.hoverIndex] || !this.hoverOptions[this.hoverIndex].disabled) {
                  break;
                }
                if (this.hoverIndex === 0) {
                  this.hoverIndex = this.hoverOptions.length - 1;
                } else {
                  this.hoverIndex -= 1;
                }
                count += 1;
                if (count >= this.hoverOptions.length)
                  break;
              }
            },
            hoverEvent: function hoverEvent(v) {
              this.isHover = v;
            },
            getOverlayElm: function getOverlayElm() {
              var r;
              try {
                r = this.$refs.popup.getOverlay();
              } catch (e) {
                console.warn("TDesign Warn:", e);
              }
              return r;
            },
            monitorWidth: function monitorWidth() {
              var _this12 = this;
              this.$nextTick(function() {
                var styles = _this12.popupProps && _this12.popupProps.overlayStyle || {};
                if (_this12.popupProps && isFunction_1(_this12.popupProps.overlayStyle)) {
                  styles = _this12.popupProps.overlayStyle(_this12.$refs.select) || {};
                }
                if (_typeof$2(styles) === "object" && !styles.width) {
                  var elWidth = _this12.$refs.select.getBoundingClientRect().width;
                  var popupWidth = _this12.getOverlayElm().getBoundingClientRect().width;
                  var width = elWidth > DEFAULT_MAX_OVERLAY_WIDTH ? elWidth : Math.min(DEFAULT_MAX_OVERLAY_WIDTH, Math.max(elWidth, popupWidth));
                  _this12.defaultProps.overlayStyle = {
                    width: "".concat(Math.ceil(width), "px")
                  };
                  if (_this12.checkScroll) {
                    var timer = setTimeout(function() {
                      var _this12$getOverlayElm = _this12.getOverlayElm(), scrollHeight = _this12$getOverlayElm.scrollHeight, clientHeight = _this12$getOverlayElm.clientHeight;
                      if (scrollHeight > clientHeight) {
                        _this12.defaultProps.overlayStyle = {
                          width: "".concat(Math.ceil(width) + DEFAULT_SCROLLY_WIDTH, "px")
                        };
                      }
                      _this12.checkScroll = false;
                      clearTimeout(timer);
                    }, _this12.popupOpenTime);
                  }
                }
              });
            },
            getEmpty: function getEmpty() {
              var useLocale = !this.empty && !this.$slots.empty;
              return useLocale ? this.t(this.global.empty) : renderTNodeJSX(this, "empty");
            },
            getLoadingText: function getLoadingText() {
              var useLocale = !this.loadingText && !this.$slots.loadingText;
              return useLocale ? this.t(this.global.loadingText) : renderTNodeJSX(this, "loadingText");
            },
            getPlaceholderText: function getPlaceholderText() {
              return this.placeholder || this.t(this.global.placeholder);
            },
            getCloseIcon: function getCloseIcon() {
              var _this13 = this;
              var closeIconClass = ["".concat(this.COMPONENT_NAME, "__right-icon"), "".concat(this.COMPONENT_NAME, "__right-icon-clear"), "".concat(this.COMPONENT_NAME, "__right-icon-polyfill")];
              if (isFunction_1(this.global.clearIcon)) {
                return vue.createVNode("span", {
                  "class": closeIconClass,
                  "onClick": this.clearSelect
                }, [this.global.clearIcon()]);
              }
              return vue.createVNode(vue.resolveComponent("close-circle-filled-icon"), {
                "class": closeIconClass,
                "size": this.size,
                "onClick": function onClick(_ref5) {
                  var e = _ref5.e;
                  return _this13.clearSelect(e);
                }
              }, null);
            },
            doFocus: function doFocus() {
              var input = this.$refs.input;
              input === null || input === void 0 ? void 0 : input.focus();
              this.focusing = true;
            },
            renderGroupOptions: function renderGroupOptions(options) {
              var _this14 = this;
              return vue.createVNode("ul", {
                "class": this.listName
              }, [options.map(function(groupList) {
                var _slot;
                var children = groupList.children.filter(function(item) {
                  return _this14.displayOptions.find(function(child) {
                    return child.value === item.value;
                  });
                });
                return vue.createVNode(vue.resolveComponent("t-option-group"), {
                  "label": groupList.group,
                  "divider": groupList.divider
                }, _isSlot$l(_slot = _this14.renderOptions(children)) ? _slot : {
                  "default": function _default() {
                    return [_slot];
                  }
                });
              })]);
            },
            renderOptions: function renderOptions(options) {
              var _this15 = this;
              return vue.createVNode("ul", {
                "class": this.listName
              }, [options.map(function(item, index2) {
                return vue.createVNode(vue.resolveComponent("t-option"), {
                  "value": get_1(item, _this15.realValue),
                  "label": get_1(item, _this15.realLabel),
                  "content": item.content,
                  "disabled": item.disabled || _this15.multiLimitDisabled(get_1(item, _this15.realValue)),
                  "key": index2
                }, null);
              })]);
            },
            renderDataWithOptions: function renderDataWithOptions() {
              return this.isGroupOption ? this.renderGroupOptions(this.options) : this.renderOptions(this.displayOptions);
            },
            initHoverindex: function initHoverindex() {
              var _this16 = this;
              if (!this.multiple && (typeof this.value === "string" || typeof this.value === "number")) {
                var targetIndex = Object.keys(this.hoverOptions).filter(function(i2) {
                  return get_1(_this16.hoverOptions[i2], _this16.realValue) === _this16.value;
                });
                this.hoverIndex = targetIndex.length ? parseInt(targetIndex[targetIndex.length - 1], 10) : -1;
              } else if (this.multiple && Array.isArray(this.value) && this.value.length) {
                this.value.some(function(item) {
                  var targetIndex2 = Object.keys(_this16.hoverOptions).filter(function(i2) {
                    return _typeof$2(item) === "object" && get_1(_this16.hoverOptions[i2], _this16.realValue) === get_1(item, _this16.realValue) || get_1(_this16.hoverOptions[i2], _this16.realValue) === item;
                  });
                  _this16.hoverIndex = targetIndex2.length ? parseInt(targetIndex2[targetIndex2.length - 1], 10) : -1;
                  return _this16.hoverIndex !== -1;
                });
              }
            }
          },
          render: function render() {
            var _this17 = this;
            var classes = this.classes, popupObject = this.popupObject, disabled = this.disabled, popClass = this.popClass, size = this.size, showPlaceholder = this.showPlaceholder, selectedMultiple = this.selectedMultiple, multiple = this.multiple, showFilter = this.showFilter, selectedSingle = this.selectedSingle, filterPlaceholder = this.filterPlaceholder, tipsClass = this.tipsClass, loading = this.loading, loadingText = this.loadingText, emptyClass = this.emptyClass, hasOptions = this.hasOptions, realLabel = this.realLabel, showCreateOption = this.showCreateOption, displayOptions = this.displayOptions;
            var children = renderTNodeJSX(this, "default");
            var prefixIconSlot = renderTNodeJSX(this, "prefixIcon");
            var emptySlot = this.getEmpty();
            var loadingTextSlot = this.getLoadingText();
            var placeholderText = this.getPlaceholderText();
            var slots = {
              content: function content() {
                return vue.createVNode("div", {
                  "className": "".concat(_this17.COMPONENT_NAME, "__dropdown-inner")
                }, [renderTNodeJSX(_this17, "panelTopContent"), vue.withDirectives(vue.createVNode("ul", {
                  "class": ["".concat(_this17.COMPONENT_NAME, "__create-option"), _this17.listName]
                }, [vue.createVNode(vue.resolveComponent("t-option"), {
                  "value": _this17.searchInput,
                  "label": _this17.searchInput,
                  "class": "".concat(_this17.COMPONENT_NAME, "__create-option--special")
                }, null)]), [[vue.vShow, showCreateOption]]), loading && vue.createVNode("div", {
                  "class": tipsClass
                }, [loadingTextSlot || loadingText]), !loading && !displayOptions.length && !showCreateOption && vue.createVNode("div", {
                  "class": emptyClass
                }, [emptySlot]), !hasOptions && displayOptions.length && !loading ? _this17.renderDataWithOptions() : vue.createVNode("ul", {
                  "class": ["".concat(_this17.COMPONENT_NAME, "__groups"), _this17.listName]
                }, [children]), renderTNodeJSX(_this17, "panelBottomContent")]);
              }
            };
            return vue.createVNode("div", {
              "ref": "select",
              "class": "".concat(this.COMPONENT_NAME, "__wrap")
            }, [vue.createVNode(Popup, vue.mergeProps({
              "ref": "popup"
            }, popupObject, {
              "class": "".concat(this.COMPONENT_NAME, "__popup-reference"),
              "visible": this.visible,
              "placement": popupObject.placement,
              "trigger": popupObject.trigger,
              "disabled": disabled,
              "overlayClassName": popClass,
              "overlayStyle": popupObject.overlayStyle,
              "onVisibleChange": this.visibleChange,
              "expandAnimation": true
            }), _objectSpread$1p({
              "default": function _default() {
                return [vue.createVNode("div", {
                  "class": classes,
                  "onMouseenter": _this17.hoverEvent.bind(null, true),
                  "onMouseleave": _this17.hoverEvent.bind(null, false)
                }, [prefixIconSlot && vue.createVNode("span", {
                  "class": "".concat(_this17.COMPONENT_NAME, "__left-icon")
                }, [prefixIconSlot[0]]), showPlaceholder && vue.createVNode("span", {
                  "class": "".concat(_this17.COMPONENT_NAME, "__placeholder")
                }, [" ", placeholderText]), multiple && (_this17.valueDisplay || _this17.$slots.valueDisplay ? renderTNodeJSX(_this17, "valueDisplay", {
                  params: {
                    value: selectedMultiple,
                    onClose: function onClose(index2) {
                      return _this17.removeTag(index2);
                    }
                  }
                }) : selectedMultiple.map(function(item, index2) {
                  var _slot2;
                  return vue.withDirectives(vue.createVNode(vue.resolveComponent("tag"), {
                    "key": index2,
                    "size": size,
                    "closable": !item.disabled && !disabled,
                    "disabled": disabled,
                    "style": "max-width: 100%;",
                    "maxWidth": "100%",
                    "title": get_1(item, realLabel),
                    "onClose": _this17.removeTag.bind(null, index2)
                  }, _isSlot$l(_slot2 = get_1(item, realLabel)) ? _slot2 : {
                    "default": function _default2() {
                      return [_slot2];
                    }
                  }), [[vue.vShow, _this17.minCollapsedNum <= 0 || index2 < _this17.minCollapsedNum]]);
                })), _this17.collapsedItems || _this17.$slots.collapsedItems ? renderTNodeJSX(_this17, "collapsedItems", {
                  params: {
                    value: selectedMultiple,
                    collapsedSelectedItems: selectedMultiple.slice(_this17.minCollapsedNum),
                    count: selectedMultiple.length - _this17.minCollapsedNum
                  }
                }) : vue.withDirectives(vue.createVNode(vue.resolveComponent("tag"), {
                  "size": size
                }, {
                  "default": function _default2() {
                    return ["+".concat(selectedMultiple.length - _this17.minCollapsedNum)];
                  }
                }), [[vue.vShow, _this17.minCollapsedNum > 0 && selectedMultiple.length > _this17.minCollapsedNum]]), !multiple && !showPlaceholder && !showFilter && (_this17.valueDisplay || _this17.$slots.valueDisplay ? renderTNodeJSX(_this17, "valueDisplay", {
                  params: {
                    value: selectedSingle
                  }
                }) : vue.createVNode("span", {
                  "title": selectedSingle,
                  "class": "".concat(_this17.COMPONENT_NAME, "__single")
                }, [selectedSingle])), showFilter && vue.createVNode(vue.resolveComponent("t-input"), {
                  "ref": "input",
                  "modelValue": _this17.searchInput,
                  "onUpdate:modelValue": function onUpdateModelValue($event) {
                    return _this17.searchInput = $event;
                  },
                  "size": size,
                  "placeholder": filterPlaceholder,
                  "disabled": disabled,
                  "class": "".concat(_this17.COMPONENT_NAME, "__input"),
                  "readonly": !_this17.visible || !_this17.showFilter,
                  "onFocus": _this17.focus,
                  "onBlur": _this17.blur,
                  "onEnter": _this17.enter
                }, null), _this17.innerShowArrow && !_this17.showLoading && vue.createVNode(FakeArrow, {
                  "overlayClassName": "".concat(_this17.COMPONENT_NAME, "__right-icon ").concat(_this17.COMPONENT_NAME, "__right-icon-polyfill"),
                  "isActive": _this17.visible && !_this17.disabled
                }, null), _this17.showClose && !_this17.showLoading && _this17.getCloseIcon(), _this17.showLoading && vue.createVNode(Loading, {
                  "class": "".concat(_this17.COMPONENT_NAME, "__right-icon ").concat(_this17.COMPONENT_NAME, "__active-icon ").concat(_this17.COMPONENT_NAME, "__right-icon-polyfill"),
                  "size": "small"
                }, null)])];
              }
            }, slots)), children && !this.visible && !this.hasOptions && vue.withDirectives(vue.createVNode("div", null, [children]), [[vue.vShow, false]])]);
          }
        });
        var Select = withInstall(mapProps([{
          name: "value",
          event: "change",
          alias: ["modelValue"]
        }])(_Select));
        var Option = withInstall(_Option);
        var OptionGroup = withInstall(_OptionGroup);
        var props$E = {
          current: {
            type: Number,
            "default": void 0
          },
          modelValue: {
            type: Number,
            "default": void 0
          },
          defaultCurrent: {
            type: Number,
            "default": 1
          },
          disabled: Boolean,
          foldedMaxPageBtn: {
            type: Number,
            "default": 5
          },
          maxPageBtn: {
            type: Number,
            "default": 10
          },
          pageSize: {
            type: Number,
            "default": void 0
          },
          defaultPageSize: {
            type: Number,
            "default": 10
          },
          pageSizeOptions: {
            type: Array,
            "default": function _default() {
              return [5, 10, 20, 50];
            }
          },
          showFirstAndLastPageBtn: Boolean,
          showJumper: Boolean,
          showPageNumber: {
            type: Boolean,
            "default": true
          },
          showPageSize: {
            type: Boolean,
            "default": true
          },
          showPreviousAndNextBtn: {
            type: Boolean,
            "default": true
          },
          size: {
            type: String,
            "default": "medium",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["small", "medium"].includes(val);
            }
          },
          theme: {
            type: String,
            "default": "default",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["default", "simple"].includes(val);
            }
          },
          total: {
            type: Number,
            "default": 0
          },
          totalContent: {
            type: [Boolean, Function],
            "default": true
          },
          onChange: Function,
          onCurrentChange: Function,
          onPageSizeChange: Function
        };
        function usePaginationClasses(props2, innerCurrent, innerPageSize, name) {
          var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE, STATUS = _useCommonClassName.STATUS;
          var pageCount = vue.computed(function() {
            var c = Math.ceil(props2.total / innerPageSize.value);
            return c > 0 ? c : 1;
          });
          var paginationClass = vue.computed(function() {
            return ["".concat(name.value), SIZE.value[props2.size], _defineProperty$3({}, STATUS.value.disabled, props2.disabled)];
          });
          var totalClass = vue.computed(function() {
            return ["".concat(name.value, "__total")];
          });
          var sizerClass = vue.computed(function() {
            return ["".concat(name.value, "__select")];
          });
          var preBtnClass = vue.computed(function() {
            return ["".concat(name.value, "__btn"), "".concat(name.value, "__btn-prev"), _defineProperty$3({}, STATUS.value.disabled, props2.disabled || innerCurrent.value === 1)];
          });
          var nextBtnClass = vue.computed(function() {
            return ["".concat(name.value, "__btn"), "".concat(name.value, "__btn-next"), _defineProperty$3({}, STATUS.value.disabled, props2.disabled || innerCurrent.value === pageCount.value)];
          });
          var btnWrapClass = vue.computed(function() {
            return ["".concat(name.value, "__pager")];
          });
          var btnMoreClass = vue.computed(function() {
            return ["".concat(name.value, "__number"), "".concat(name.value, "__number--more"), _defineProperty$3({}, STATUS.value.disabled, props2.disabled)];
          });
          var jumperClass = vue.computed(function() {
            return ["".concat(name.value, "__jump")];
          });
          var jumperInputClass = vue.computed(function() {
            return ["".concat(name.value, "__input")];
          });
          var simpleClass = vue.computed(function() {
            return ["".concat(name.value, "__select")];
          });
          var getButtonClass = function getButtonClass2(index2) {
            var _ref5;
            return ["".concat(name.value, "__number"), (_ref5 = {}, _defineProperty$3(_ref5, STATUS.value.disabled, props2.disabled), _defineProperty$3(_ref5, STATUS.value.current, innerCurrent.value === index2), _ref5)];
          };
          return {
            pageCount,
            paginationClass,
            totalClass,
            sizerClass,
            preBtnClass,
            nextBtnClass,
            btnWrapClass,
            btnMoreClass,
            jumperClass,
            jumperInputClass,
            simpleClass,
            getButtonClass
          };
        }
        function useMoreAction(props2, pageCount, innerCurrent) {
          var prevMore = vue.ref(false);
          var nextMore = vue.ref(false);
          var curPageLeftCount = vue.computed(function() {
            return Math.ceil((props2.foldedMaxPageBtn - 1) / 2);
          });
          var curPageRightCount = vue.computed(function() {
            return Math.ceil((props2.foldedMaxPageBtn - 1) / 2);
          });
          var isPrevMoreShow = vue.computed(function() {
            return 2 + curPageLeftCount.value < innerCurrent.value;
          });
          var isNextMoreShow = vue.computed(function() {
            return pageCount.value - 1 - curPageRightCount.value > innerCurrent.value;
          });
          return {
            prevMore,
            nextMore,
            curPageLeftCount,
            curPageRightCount,
            isPrevMoreShow,
            isNextMoreShow
          };
        }
        var _excluded$2 = ["pageCount"];
        function ownKeys$1p(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1o(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1p(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1p(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot$k(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var min = 1;
        var _Pagination = vue.defineComponent({
          name: "TPagination",
          props: props$E,
          setup: function setup(props2) {
            var _toRefs = vue.toRefs(props2), modelValue = _toRefs.modelValue, pageSize = _toRefs.pageSize, current = _toRefs.current;
            var renderTNodeJSX2 = useTNodeJSX();
            var _useVModel = useVModel(current, modelValue, props2.defaultCurrent, props2.onCurrentChange, "current"), _useVModel2 = _slicedToArray(_useVModel, 2), innerCurrent = _useVModel2[0], setInnerCurrent = _useVModel2[1];
            var _useDefaultValue = useDefaultValue(pageSize, props2.defaultPageSize, props2.onPageSizeChange, "pageSize"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2), innerPageSize = _useDefaultValue2[0], setInnerPageSize = _useDefaultValue2[1];
            var _useConfig = useConfig("pagination"), t = _useConfig.t, global2 = _useConfig.global;
            var COMPONENT_NAME2 = usePrefixClass("pagination");
            var _usePaginationClasses = usePaginationClasses(props2, innerCurrent, innerPageSize, COMPONENT_NAME2), pageCount = _usePaginationClasses.pageCount, paginationClasses = _objectWithoutProperties$1(_usePaginationClasses, _excluded$2);
            var _useMoreAction = useMoreAction(props2, pageCount, innerCurrent), prevMore = _useMoreAction.prevMore, isPrevMoreShow = _useMoreAction.isPrevMoreShow, curPageLeftCount = _useMoreAction.curPageLeftCount, nextMore = _useMoreAction.nextMore, isNextMoreShow = _useMoreAction.isNextMoreShow, curPageRightCount = _useMoreAction.curPageRightCount;
            var jumpIndex = vue.ref(innerCurrent.value);
            var isSimple = vue.computed(function() {
              return props2.theme === "simple";
            });
            var isFolded = vue.computed(function() {
              return pageCount.value > props2.maxPageBtn;
            });
            var pageCountOption = vue.computed(function() {
              var ans = [];
              for (var i2 = 1; i2 <= pageCount.value; i2++) {
                ans.push({
                  value: i2,
                  label: "".concat(i2, "/").concat(pageCount.value)
                });
              }
              return ans;
            });
            var sizeOptions = vue.computed(function() {
              var pageSizeOptions = props2.pageSizeOptions;
              var options = pageSizeOptions.map(function(option) {
                return _typeof$2(option) === "object" ? option : {
                  label: t(global2.value.itemsPerPage, {
                    size: option
                  }),
                  value: Number(option)
                };
              });
              return options.sort(function(a, b2) {
                return a.value - b2.value;
              });
            });
            var pages = vue.computed(function() {
              var array = [];
              var start2;
              var end2;
              if (isFolded.value) {
                if (isPrevMoreShow.value && isNextMoreShow.value) {
                  start2 = innerCurrent.value - curPageLeftCount.value;
                  end2 = innerCurrent.value + curPageRightCount.value;
                } else {
                  start2 = isPrevMoreShow.value ? pageCount.value - props2.foldedMaxPageBtn + 1 : 2;
                  end2 = isPrevMoreShow.value ? pageCount.value - 1 : props2.foldedMaxPageBtn;
                }
              } else {
                start2 = 1;
                end2 = pageCount.value;
              }
              for (var i2 = start2; i2 <= end2; i2++) {
                array.push(i2);
              }
              return array;
            });
            vue.watch(function() {
              return innerCurrent.value;
            }, function(val) {
              return jumpIndex.value = val;
            });
            var toPage = function toPage2(pageIndex, isTriggerChange) {
              if (props2.disabled) {
                return;
              }
              var current2 = pageIndex;
              if (pageIndex < min) {
                current2 = min;
              } else if (pageIndex > pageCount.value) {
                current2 = pageCount.value;
              }
              if (innerCurrent.value !== current2) {
                var prev = innerCurrent.value;
                var pageInfo = {
                  current: current2,
                  previous: prev,
                  pageSize: innerPageSize.value
                };
                if (isTriggerChange !== false) {
                  var _props2$onChange;
                  (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 ? void 0 : _props2$onChange.call(props2, pageInfo);
                }
                setInnerCurrent(current2, pageInfo);
              }
            };
            var handlePageChange = function handlePageChange2(type) {
              var pageChangeMap = {
                prevPage: function prevPage() {
                  return toPage(innerCurrent.value - 1);
                },
                nextPage: function nextPage() {
                  return toPage(innerCurrent.value + 1);
                },
                prevMorePage: function prevMorePage() {
                  return toPage(innerCurrent.value - props2.foldedMaxPageBtn);
                },
                nextMorePage: function nextMorePage() {
                  return toPage(innerCurrent.value + props2.foldedMaxPageBtn);
                }
              };
              pageChangeMap[type]();
            };
            var onSelectorChange = function onSelectorChange2(e) {
              var _props2$onChange2;
              if (props2.disabled) {
                return;
              }
              var pageSize2 = parseInt(e, 10);
              var pageCount2 = 1;
              if (pageSize2 > 0) {
                pageCount2 = Math.ceil(props2.total / pageSize2);
              }
              var isIndexChange = false;
              if (innerCurrent.value > pageCount2) {
                isIndexChange = true;
              }
              var pageInfo = {
                current: isIndexChange ? pageCount2 : innerCurrent.value,
                previous: innerCurrent.value,
                pageSize: pageSize2
              };
              (_props2$onChange2 = props2.onChange) === null || _props2$onChange2 === void 0 ? void 0 : _props2$onChange2.call(props2, pageInfo);
              setInnerPageSize(pageSize2, pageInfo);
              if (isIndexChange) {
                toPage(pageCount2, false);
              }
            };
            var onJumperChange = function onJumperChange2(val) {
              var currentIndex = Math.trunc(+val);
              if (_isNaN(currentIndex))
                return;
              jumpIndex.value = currentIndex;
              toPage(currentIndex);
            };
            return _objectSpread$1o(_objectSpread$1o({
              renderTNodeJSX: renderTNodeJSX2,
              global: global2,
              t
            }, paginationClasses), {}, {
              sizeOptions,
              isSimple,
              isFolded,
              isPrevMoreShow,
              prevMore,
              pages,
              isNextMoreShow,
              nextMore,
              pageCount,
              pageCountOption,
              jumpIndex,
              toPage,
              handlePageChange,
              onSelectorChange,
              onJumperChange,
              innerCurrent,
              innerPageSize
            });
          },
          render: function render() {
            var _this = this;
            var _slot;
            var pageCount = this.pageCount, innerPageSize = this.innerPageSize, innerCurrent = this.innerCurrent, renderTNodeJSX2 = this.renderTNodeJSX;
            var _this$$props = this.$props, total = _this$$props.total, pageSizeOptions = _this$$props.pageSizeOptions, size = _this$$props.size, disabled = _this$$props.disabled, showJumper = _this$$props.showJumper;
            if (pageCount < 1)
              return null;
            return vue.createVNode("div", {
              "class": this.paginationClass
            }, [renderTNodeJSX2("totalContent", vue.createVNode("div", {
              "class": this.totalClass
            }, [this.t(this.global.total, {
              total
            })])), this.showPageSize && pageSizeOptions.length > 0 && vue.createVNode(Select, {
              "size": size,
              "value": innerPageSize,
              "disabled": disabled,
              "class": this.sizerClass,
              "onChange": this.onSelectorChange
            }, _isSlot$k(_slot = this.sizeOptions.map(function(item, index2) {
              return vue.createVNode(Option, {
                "value": item.value,
                "label": item.label,
                "key": index2
              }, null);
            })) ? _slot : {
              "default": function _default() {
                return [_slot];
              }
            }), this.showFirstAndLastPageBtn ? vue.createVNode("div", {
              "class": this.preBtnClass,
              "onClick": function onClick() {
                return _this.toPage(1);
              },
              "disabled": this.disabled || this.current === min
            }, [vue.createVNode(pageFirst, null, null)]) : null, this.showPreviousAndNextBtn ? vue.createVNode("div", {
              "class": this.preBtnClass,
              "onClick": function onClick() {
                return _this.handlePageChange("prevPage");
              },
              "disabled": disabled || innerCurrent === min
            }, [vue.createVNode(chevronLeft, null, null)]) : null, this.showPageNumber && this.theme === "default" ? vue.createVNode("ul", {
              "class": this.btnWrapClass
            }, [this.isFolded && vue.createVNode("li", {
              "class": this.getButtonClass(1),
              "onClick": function onClick() {
                return _this.toPage(min);
              }
            }, [min]), this.isFolded && this.isPrevMoreShow ? vue.createVNode("li", {
              "class": this.btnMoreClass,
              "onClick": function onClick() {
                return _this.handlePageChange("prevMorePage");
              },
              "onMouseOver": function onMouseOver() {
                return _this.prevMore = true;
              },
              "onMouseOut": function onMouseOut() {
                return _this.prevMore = false;
              }
            }, [this.prevMore ? vue.createVNode(chevronLeftDouble, null, null) : vue.createVNode(ellipsis, null, null)]) : null, this.pages.map(function(i2) {
              return vue.createVNode("li", {
                "class": _this.getButtonClass(i2),
                "key": i2,
                "onClick": function onClick() {
                  return _this.toPage(i2);
                }
              }, [i2]);
            }), this.isFolded && this.isNextMoreShow ? vue.createVNode("li", {
              "class": this.btnMoreClass,
              "onClick": function onClick() {
                return _this.handlePageChange("nextMorePage");
              },
              "onMouseOver": function onMouseOver() {
                return _this.nextMore = true;
              },
              "onMouseOut": function onMouseOut() {
                return _this.nextMore = false;
              }
            }, [this.nextMore ? vue.createVNode(chevronRightDouble, null, null) : vue.createVNode(ellipsis, null, null)]) : null, this.isFolded ? vue.createVNode("li", {
              "class": this.getButtonClass(this.pageCount),
              "onClick": function onClick() {
                return _this.toPage(_this.pageCount);
              }
            }, [this.pageCount]) : null]) : null, this.showPageNumber && this.theme === "simple" ? vue.createVNode(Select, {
              "size": size,
              "value": innerCurrent,
              "disabled": disabled,
              "class": this.simpleClass,
              "onChange": this.toPage,
              "options": this.pageCountOption
            }, null) : null, this.showPreviousAndNextBtn ? vue.createVNode("div", {
              "class": this.nextBtnClass,
              "onClick": function onClick() {
                return _this.handlePageChange("nextPage");
              },
              "disabled": disabled || innerCurrent === this.pageCount
            }, [vue.createVNode(chevronRight, null, null)]) : null, this.showFirstAndLastPageBtn ? vue.createVNode("div", {
              "class": this.nextBtnClass,
              "onClick": function onClick() {
                return _this.toPage(_this.pageCount);
              },
              "disabled": this.disabled || this.current === this.pageCount
            }, [vue.createVNode(pageLast, null, null)]) : null, showJumper ? vue.createVNode("div", {
              "class": this.jumperClass
            }, [this.t(this.global.jumpTo), vue.createVNode(InputNumber, {
              "class": this.jumperInputClass,
              "modelValue": _this.jumpIndex,
              "onUpdate:modelValue": function onUpdateModelValue($event) {
                return _this.jumpIndex = $event;
              },
              "onBlur": this.onJumperChange,
              "onEnter": this.onJumperChange,
              "max": this.pageCount,
              "min": min,
              "size": size,
              "disabled": this.disabled,
              "theme": "normal",
              "placeholder": ""
            }, null), this.t(this.global.page)]) : null]);
          }
        });
        var Pagination = withInstall(_Pagination);
        var props$D = {
          current: {
            type: [String, Number],
            "default": void 0
          },
          modelValue: {
            type: [String, Number],
            "default": void 0
          },
          defaultCurrent: {
            type: [String, Number]
          },
          layout: {
            type: String,
            "default": "horizontal",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["horizontal", "vertical"].includes(val);
            }
          },
          options: {
            type: Array
          },
          readonly: Boolean,
          separator: {
            type: String,
            "default": "line",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["line", "dashed", "arrow"].includes(val);
            }
          },
          sequence: {
            type: String,
            "default": "positive",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["positive", "reverse"].includes(val);
            }
          },
          theme: {
            type: String,
            "default": "default",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["default", "dot"].includes(val);
            }
          },
          onChange: Function
        };
        var props$C = {
          content: {
            type: [String, Function],
            "default": ""
          },
          "default": {
            type: [String, Function]
          },
          extra: {
            type: [String, Function]
          },
          icon: {
            type: [Boolean, Function],
            "default": true
          },
          status: {
            type: String,
            "default": "default",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["default", "process", "finish", "error"].includes(val);
            }
          },
          title: {
            type: [String, Function],
            "default": ""
          },
          value: {
            type: [String, Number]
          }
        };
        function ownKeys$1o(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1n(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1o(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1o(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _Steps = vue.defineComponent({
          name: "TSteps",
          props: _objectSpread$1n({}, props$D),
          setup: function setup(props2) {
            var COMPONENT_NAME2 = usePrefixClass("steps");
            var _toRefs = vue.toRefs(props2), current = _toRefs.current, modelValue = _toRefs.modelValue;
            var _useVModel = useVModel(current, modelValue, props2.defaultCurrent, props2.onChange, "current"), _useVModel2 = _slicedToArray(_useVModel, 2), innerCurrent = _useVModel2[0], setInnerCurrent = _useVModel2[1];
            vue.provide("StepsState", vue.reactive({
              current: innerCurrent,
              setCurrent: setInnerCurrent
            }));
            vue.provide("StepsProps", props2);
            var indexMap = vue.ref({});
            vue.watchEffect(function() {
              var _props2$options;
              if (!props2.options)
                return;
              (_props2$options = props2.options) === null || _props2$options === void 0 ? void 0 : _props2$options.forEach(function(item, index2) {
                if (item.value !== void 0)
                  indexMap.value[item.value] = index2;
              });
            });
            var handleStatus = function handleStatus2(itemProps2, index2) {
              if (itemProps2.status && itemProps2.status !== "default")
                return itemProps2.status;
              if (innerCurrent.value === "FINISH")
                return "finish";
              if (itemProps2.value === void 0) {
                if (props2.sequence === "positive" && index2 < innerCurrent.value)
                  return "finish";
                if (props2.sequence === "reverse" && index2 > innerCurrent.value)
                  return "finish";
              }
              if (itemProps2.value !== void 0) {
                var matchIndex = indexMap.value[innerCurrent.value];
                if (matchIndex === void 0) {
                  console.warn("TDesign Steps Warn: The current `value` is not exist.");
                  return "default";
                }
                if (props2.sequence === "positive" && index2 < matchIndex)
                  return "finish";
                if (props2.sequence === "reverse" && index2 > matchIndex)
                  return "finish";
              }
              var key = itemProps2.value === void 0 ? index2 : itemProps2.value;
              if (key === innerCurrent.value)
                return "process";
              return "default";
            };
            var getChildComponentByName = useChildComponentSlots();
            var getOptionListBySlots = function getOptionListBySlots2(nodes) {
              var arr = [];
              nodes === null || nodes === void 0 ? void 0 : nodes.forEach(function(node) {
                var option = node === null || node === void 0 ? void 0 : node.props;
                var children = node === null || node === void 0 ? void 0 : node.children;
                if (!option && !children)
                  return;
                if (children && isObject_1(children)) {
                  for (var key in children) {
                    if (key in props$C && !option[key]) {
                      option[key] = children[key];
                    }
                  }
                }
                props2.sequence === "reverse" ? arr.unshift(option) : arr.push(option);
              });
              return arr;
            };
            var getOptions = function getOptions2() {
              var _props2$options2;
              var options;
              if ((_props2$options2 = props2.options) !== null && _props2$options2 !== void 0 && _props2$options2.length) {
                options = props2.sequence === "reverse" ? props2.options.slice().reverse() : props2.options;
              } else {
                var nodes = getChildComponentByName("TStepItem");
                options = getOptionListBySlots(nodes);
              }
              return options;
            };
            var renderContent2 = function renderContent3() {
              var content = null;
              var options = getOptions();
              var nodes = getChildComponentByName("TStepItem");
              content = options.map(function(item, index2) {
                var stepIndex = props2.sequence === "reverse" ? options.length - index2 - 1 : index2;
                var stepItem = vue.createVNode(vue.resolveComponent("t-step-item"), vue.mergeProps(item, {
                  "index": stepIndex,
                  "status": handleStatus(item, index2),
                  "key": item.value || index2
                }), null);
                if (nodes && nodes[index2]) {
                  var vnode = nodes[index2];
                  vnode.props = _objectSpread$1n(_objectSpread$1n({}, item), {}, {
                    index: stepIndex,
                    status: handleStatus(item, index2)
                  });
                  return vnode;
                }
                return stepItem;
              });
              return content;
            };
            var handleTheme = function handleTheme2() {
              var theme = props2.theme;
              var options = getOptions();
              options.forEach(function(item) {
                if ((item === null || item === void 0 ? void 0 : item.icon) !== void 0) {
                  theme = "default";
                }
              });
              return theme;
            };
            var baseClass = vue.computed(function() {
              return [COMPONENT_NAME2.value, "".concat(COMPONENT_NAME2.value, "--").concat(props2.layout), "".concat(COMPONENT_NAME2.value, "--").concat(handleTheme(), "-anchor"), "".concat(COMPONENT_NAME2.value, "--").concat(props2.sequence), "".concat(COMPONENT_NAME2.value, "--").concat(props2.separator, "-separator")];
            });
            return function() {
              return vue.createVNode("div", {
                "class": baseClass.value
              }, [renderContent2()]);
            };
          }
        });
        function ownKeys$1n(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1m(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1n(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1n(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _StepItem = vue.defineComponent({
          name: "TStepItem",
          props: _objectSpread$1m(_objectSpread$1m({}, props$C), {}, {
            index: Number
          }),
          setup: function setup(props2) {
            var stepsState = vue.inject("StepsState", void 0);
            var stepsProps = vue.inject("StepsProps", void 0);
            var _useConfig = useConfig("steps"), global2 = _useConfig.global;
            var canClick = vue.computed(function() {
              return props2.status !== "process" && !(stepsProps !== null && stepsProps !== void 0 && stepsProps.readonly);
            });
            var onStepClick = function onStepClick2(e) {
              if (!canClick.value)
                return;
              var val = props2.value === void 0 ? props2.index : props2.value;
              stepsState.setCurrent(val, stepsState.current, {
                e
              });
            };
            var COMPONENT_NAME2 = usePrefixClass("steps-item");
            var statusClass = vue.computed(function() {
              return _defineProperty$3({}, "".concat(COMPONENT_NAME2.value, "--").concat(props2.status), props2.status);
            });
            var baseClass = vue.computed(function() {
              return [COMPONENT_NAME2.value, statusClass.value];
            });
            var iconClass = vue.computed(function() {
              return ["".concat(COMPONENT_NAME2.value, "__icon"), statusClass.value];
            });
            var renderTNodeJSX2 = useTNodeJSX();
            var renderContent2 = useContent();
            var renderIcon = function renderIcon2() {
              var defaultIcon;
              if (stepsProps.theme === "default") {
                var icon = "";
                switch (props2.status) {
                  case "finish":
                    icon = vue.createVNode(check, null, null);
                    break;
                  case "error":
                    if (isFunction_1(global2.value.errorIcon)) {
                      icon = global2.value.errorIcon(vue.h);
                    } else {
                      icon = vue.createVNode(close, null, null);
                    }
                    break;
                  default:
                    icon = String(props2.index + 1);
                    break;
                }
                defaultIcon = vue.createVNode("span", {
                  "class": "".concat(COMPONENT_NAME2.value, "__icon--number")
                }, [icon]);
              }
              return renderTNodeJSX2("icon", defaultIcon);
            };
            return function() {
              return vue.createVNode("div", {
                "class": baseClass.value
              }, [vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__inner ").concat(canClick.value ? "".concat(COMPONENT_NAME2.value, "--clickable") : ""),
                "onClick": onStepClick
              }, [vue.createVNode("div", {
                "class": iconClass.value
              }, [renderIcon()]), vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__content")
              }, [vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__title")
              }, [renderTNodeJSX2("title")]), vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__description")
              }, [renderContent2("default", "content")]), vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__extra")
              }, [renderTNodeJSX2("extra")])])])]);
            };
          }
        });
        var Steps = withInstall(_Steps);
        var StepItem = withInstall(_StepItem);
        function getSingleContent(cascaderContext) {
          var value = cascaderContext.value, multiple = cascaderContext.multiple, treeStore = cascaderContext.treeStore, showAllLevels = cascaderContext.showAllLevels, setValue = cascaderContext.setValue;
          if (multiple || !value)
            return "";
          if (Array.isArray(value))
            return "";
          var node = treeStore && treeStore.getNodes(value);
          if (!(node && node.length)) {
            if (value) {
              setValue(multiple ? [] : "", "invalid-value");
            }
            return "";
          }
          var path6 = node && node[0].getPath();
          if (path6 && path6.length) {
            return showAllLevels ? path6.map(function(node2) {
              return node2.label;
            }).join(" / ") : path6[path6.length - 1].label;
          }
          return value;
        }
        function getMultipleContent(cascaderContext) {
          var value = cascaderContext.value, multiple = cascaderContext.multiple, treeStore = cascaderContext.treeStore, showAllLevels = cascaderContext.showAllLevels;
          if (!multiple)
            return [];
          if (multiple && !Array.isArray(value))
            return [];
          var node = treeStore && treeStore.getNodes(value);
          if (!node)
            return [];
          return value.map(function(item) {
            var node2 = treeStore.getNodes(item);
            return showAllLevels ? getFullPathLabel(node2[0]) : node2[0].label;
          });
        }
        function getPanels(treeNodes) {
          var panels = [];
          treeNodes.forEach(function(node) {
            if (panels[node.level]) {
              panels[node.level].push(node);
            } else {
              panels[node.level] = [node];
            }
          });
          return panels;
        }
        function getFullPathLabel(node) {
          return node.getPath().map(function(node2) {
            return node2.label;
          }).join("/");
        }
        var getTreeValue = function getTreeValue2(value) {
          var treeValue = [];
          if (Array.isArray(value)) {
            if (value.length > 0 && _typeof$2(value[0]) === "object") {
              treeValue = value.map(function(val) {
                return val.value;
              });
            } else if (value.length) {
              treeValue = value;
            }
          } else if (value) {
            if (_typeof$2(value) === "object") {
              treeValue = [value.value];
            } else {
              treeValue = [value];
            }
          }
          return treeValue;
        };
        var getCascaderValue = function getCascaderValue2(value, valueType, multiple) {
          if (valueType === "single") {
            return value;
          }
          if (multiple) {
            return value.map(function(item) {
              return item[item.length - 1];
            });
          }
          return value[value.length - 1];
        };
        function isEmptyValues(value) {
          if (typeof value === "number" && !isNaN(value))
            return false;
          return isEmpty_1(value);
        }
        function isValueInvalid(value, cascaderContext) {
          var multiple = cascaderContext.multiple, showAllLevels = cascaderContext.showAllLevels;
          return multiple && !Array.isArray(value) || !multiple && Array.isArray(value) && !showAllLevels;
        }
        function getFakeArrowIconClass(prefix, STATUS, cascaderContext) {
          var disabled = cascaderContext.disabled;
          return ["".concat(prefix, "-cascader__icon"), _defineProperty$3({}, STATUS.disabled, disabled)];
        }
        function getNodeStatusClass(node, STATUS, cascaderContext) {
          var _ref2;
          var checkStrictly = cascaderContext.checkStrictly, multiple = cascaderContext.multiple, value = cascaderContext.value, max2 = cascaderContext.max;
          var expandedActive = !checkStrictly && node.expanded && (multiple ? !node.isLeaf() : true) || checkStrictly && node.expanded;
          var isLeaf = node.isLeaf();
          var isDisabled = node.disabled || multiple && value.length >= max2 && max2 !== 0;
          var isSelected = node.checked || multiple && !checkStrictly && node.expanded && !isLeaf;
          return [(_ref2 = {}, _defineProperty$3(_ref2, STATUS.selected, !isDisabled && isSelected), _defineProperty$3(_ref2, STATUS.expanded, !isDisabled && expandedActive), _defineProperty$3(_ref2, STATUS.disabled, isDisabled), _ref2)];
        }
        function getCascaderItemClass(prefix, node, SIZE, STATUS, cascaderContext) {
          var _ref3;
          var size = cascaderContext.size;
          return ["".concat(prefix, "-cascader__item")].concat(_toConsumableArray(getNodeStatusClass(node, STATUS, cascaderContext)), [SIZE[size], (_ref3 = {}, _defineProperty$3(_ref3, "".concat(prefix, "-cascader__item--with-icon"), !!node.children), _defineProperty$3(_ref3, "".concat(prefix, "-cascader__item--leaf"), node.isLeaf()), _ref3)]);
        }
        function getCascaderItemIconClass(prefix, node, STATUS, cascaderContext) {
          return ["".concat(prefix, "-cascader__item-icon")].concat(_toConsumableArray(getNodeStatusClass(node, STATUS, cascaderContext)));
        }
        function _isSlot$j(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var props$B = {
          node: {
            type: Object,
            "default": function _default() {
              return {};
            }
          },
          cascaderContext: {
            type: Object
          },
          onChange: Function,
          onClick: Function,
          onMouseenter: Function
        };
        var Item = vue.defineComponent({
          name: "TCascaderItem",
          props: props$B,
          setup: function setup(props2) {
            var liRef = vue.ref();
            var liRef2 = vue.ref();
            useRipple(liRef);
            var COMPONENT_NAME2 = usePrefixClass("cascader__item");
            var classPrefix2 = usePrefixClass();
            var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS, SIZE = _useCommonClassName.SIZE;
            var itemClass = vue.computed(function() {
              return getCascaderItemClass(classPrefix2.value, props2.node, SIZE.value, STATUS.value, props2.cascaderContext);
            });
            var iconClass = vue.computed(function() {
              return getCascaderItemIconClass(classPrefix2.value, props2.node, STATUS.value, props2.cascaderContext);
            });
            function RenderLabelInner(node, cascaderContext) {
              var inputVal = cascaderContext.inputVal;
              var labelText = inputVal ? getFullPathLabel(node) : node.label;
              if (inputVal) {
                var texts = labelText.split(inputVal);
                var doms = [];
                for (var index2 = 0; index2 < texts.length; index2++) {
                  doms.push(vue.createVNode("span", {
                    "key": index2
                  }, [texts[index2]]));
                  if (index2 === texts.length - 1)
                    break;
                  doms.push(vue.createVNode("span", {
                    "key": "".concat(index2, "filter"),
                    "class": "".concat(COMPONENT_NAME2.value, "-label--filter")
                  }, [inputVal]));
                }
                return doms;
              }
              return labelText;
            }
            function RenderLabelContent(node, cascaderContext) {
              var label = RenderLabelInner(node, cascaderContext);
              var labelCont = vue.createVNode("span", {
                "title": cascaderContext.inputVal ? getFullPathLabel(node) : node.label,
                "ref": liRef2,
                "class": ["".concat(COMPONENT_NAME2.value, "-label"), "".concat(COMPONENT_NAME2.value, "-label--ellipsis")],
                "role": "label"
              }, [label]);
              return labelCont;
            }
            function RenderCheckBox(node, cascaderContext) {
              var checkProps = cascaderContext.checkProps, value = cascaderContext.value, max2 = cascaderContext.max, inputVal = cascaderContext.inputVal, size = cascaderContext.size;
              var label = RenderLabelInner(node, cascaderContext);
              return vue.createVNode(Checkbox, vue.mergeProps({
                "checked": node.checked,
                "indeterminate": node.indeterminate,
                "disabled": node.isDisabled() || value.length >= max2 && max2 !== 0,
                "name": node.value,
                "size": size,
                "title": inputVal ? getFullPathLabel(node) : node.label,
                "onChange": function onChange() {
                  props2.onChange(node);
                }
              }, checkProps), _isSlot$j(label) ? label : {
                "default": function _default() {
                  return [label];
                }
              });
            }
            return function() {
              var cascaderContext = props2.cascaderContext, node = props2.node;
              return vue.createVNode("li", {
                "ref": liRef,
                "class": itemClass.value,
                "onClick": function onClick(e) {
                  e.stopPropagation();
                  props2.onClick(node);
                },
                "onMouseenter": function onMouseenter(e) {
                  e.stopPropagation();
                  props2.onMouseenter(node);
                }
              }, [cascaderContext.multiple ? RenderCheckBox(node, cascaderContext) : RenderLabelContent(node, cascaderContext), node.children && (node.loading ? vue.createVNode(Loading, {
                "class": iconClass.value,
                "size": "small"
              }, null) : vue.createVNode(chevronRight, {
                "class": iconClass.value
              }, null))]);
            };
          }
        });
        var props$A = {
          checkProps: {
            type: Object
          },
          checkStrictly: Boolean,
          clearable: Boolean,
          collapsedItems: {
            type: Function
          },
          disabled: Boolean,
          empty: {
            type: [String, Function]
          },
          filterable: Boolean,
          keys: {
            type: Object
          },
          lazy: {
            type: Boolean,
            "default": true
          },
          load: {
            type: Function
          },
          loading: Boolean,
          loadingText: {
            type: [String, Function],
            "default": ""
          },
          max: {
            type: Number,
            "default": 0
          },
          minCollapsedNum: {
            type: Number,
            "default": 0
          },
          multiple: Boolean,
          options: {
            type: Array,
            "default": function _default() {
              return [];
            }
          },
          placeholder: {
            type: String,
            "default": void 0
          },
          popupProps: {
            type: Object
          },
          popupVisible: {
            type: Boolean,
            "default": void 0
          },
          readonly: Boolean,
          selectInputProps: {
            type: Object
          },
          showAllLevels: {
            type: Boolean,
            "default": true
          },
          size: {
            type: String,
            "default": "medium",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["large", "medium", "small"].includes(val);
            }
          },
          trigger: {
            type: String,
            "default": "click",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["click", "hover"].includes(val);
            }
          },
          value: {
            type: [String, Number, Array],
            defaultValue: void 0
          },
          modelValue: {
            type: [String, Number, Array],
            defaultValue: void 0
          },
          defaultValue: {
            type: [String, Number, Array],
            "default": function _default() {
              return [];
            }
          },
          valueMode: {
            type: String,
            "default": "onlyLeaf",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["onlyLeaf", "parentFirst", "all"].includes(val);
            }
          },
          valueType: {
            type: String,
            "default": "single",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["single", "full"].includes(val);
            }
          },
          onBlur: Function,
          onChange: Function,
          onFocus: Function,
          onPopupVisibleChange: Function,
          onRemove: Function
        };
        function expendClickEffect(propsTrigger, trigger, node, cascaderContext) {
          var checkStrictly = cascaderContext.checkStrictly, multiple = cascaderContext.multiple, treeStore = cascaderContext.treeStore, setVisible = cascaderContext.setVisible, setValue = cascaderContext.setValue, setTreeNodes = cascaderContext.setTreeNodes, setExpend = cascaderContext.setExpend, value = cascaderContext.value, max2 = cascaderContext.max, valueType = cascaderContext.valueType;
          var isDisabled = node.disabled || multiple && value.length >= max2 && max2 !== 0;
          if (isDisabled)
            return;
          if (propsTrigger === trigger && !node.isLeaf()) {
            var expanded = node.setExpanded(true);
            treeStore.refreshNodes();
            treeStore.replaceExpanded(expanded);
            var nodes = treeStore.getNodes().filter(function(node2) {
              return node2.visible;
            });
            setTreeNodes(nodes);
            if (multiple) {
              setExpend(expanded);
            }
          }
          if (!multiple && (node.isLeaf() || checkStrictly) && trigger === "click") {
            treeStore.resetChecked();
            var checked = node.setChecked(!node.checked);
            var _checked = _slicedToArray(checked, 1), value2 = _checked[0];
            setValue(valueType === "single" ? value2 : node.getPath().map(function(item) {
              return item.value;
            }), "check", node.getModel());
            if (!checkStrictly) {
              setVisible(false, {});
            }
          }
        }
        function valueChangeEffect(node, cascaderContext) {
          var disabled = cascaderContext.disabled, max2 = cascaderContext.max, inputVal = cascaderContext.inputVal, multiple = cascaderContext.multiple, setVisible = cascaderContext.setVisible, setValue = cascaderContext.setValue, treeNodes = cascaderContext.treeNodes, treeStore = cascaderContext.treeStore, valueType = cascaderContext.valueType;
          if (!node || disabled || node.disabled) {
            return;
          }
          var checked = node.setChecked(!node.isChecked());
          if (isNumber_1(max2) && max2 < 0) {
            console.warn("TDesign Warn:", "max should > 0");
          }
          if (checked.length > max2 && isNumber_1(max2) && max2 > 0) {
            return;
          }
          if (checked.length === 0) {
            var expanded = treeStore.getExpanded();
            setTimeout(function() {
              treeStore.replaceExpanded(expanded);
              treeStore.refreshNodes();
            }, 0);
          }
          if (!multiple) {
            setVisible(false, {});
          }
          var isSelectAll = treeNodes.every(function(item) {
            return checked.indexOf(item.value) > -1;
          });
          if (inputVal && isSelectAll) {
            setVisible(false, {});
          }
          var resValue = valueType === "single" ? checked : checked.map(function(val) {
            return treeStore.getNode(val).getPath().map(function(item) {
              return item.value;
            });
          });
          setValue(resValue, "check", node.getModel());
        }
        function closeIconClickEffect(cascaderContext) {
          var setVisible = cascaderContext.setVisible, multiple = cascaderContext.multiple, setExpend = cascaderContext.setExpend, setValue = cascaderContext.setValue;
          setVisible(false, {});
          if (multiple) {
            setExpend([]);
          }
          setValue(multiple ? [] : "", "clear");
        }
        function handleRemoveTagEffect(cascaderContext, index2, onRemove) {
          var disabled = cascaderContext.disabled, setValue = cascaderContext.setValue, value = cascaderContext.value, valueType = cascaderContext.valueType, treeStore = cascaderContext.treeStore;
          if (disabled)
            return;
          var newValue = cloneDeep_1(value);
          var res = newValue.splice(index2, 1);
          var node = treeStore.getNodes(res[0])[0];
          setValue(newValue, "uncheck", node.getModel());
          var checked = node.setChecked(!node.isChecked());
          var resValue = valueType === "single" ? checked : checked.map(function(val) {
            return treeStore.getNode(val).getPath().map(function(item) {
              return item.value;
            });
          });
          setValue(resValue, "uncheck", node.getModel());
          if (isFunction_1(onRemove)) {
            onRemove({
              value: checked,
              node
            });
          }
        }
        var treeNodesEffect = function treeNodesEffect2(inputVal, treeStore, setTreeNodes) {
          if (!treeStore)
            return;
          var nodes = [];
          if (inputVal) {
            nodes = treeStore.nodes.filter(function(node) {
              var fullPathLabel = getFullPathLabel(node);
              return fullPathLabel.toLocaleLowerCase().indexOf("".concat(inputVal).toLocaleLowerCase()) > -1 && node.isLeaf();
            });
          } else {
            nodes = treeStore.getNodes().filter(function(node) {
              return node.visible;
            });
          }
          setTreeNodes(nodes);
        };
        var treeStoreExpendEffect = function treeStoreExpendEffect2(treeStore, value, expend) {
          var treeValue = getTreeValue(value);
          if (!treeStore)
            return;
          if (Array.isArray(treeValue) && expend.length === 0) {
            var expandedMap = /* @__PURE__ */ new Map();
            var _treeValue = _slicedToArray(treeValue, 1), val = _treeValue[0];
            if (val) {
              expandedMap.set(val, true);
              var node = treeStore.getNode(val);
              if (!node) {
                treeStore.refreshNodes();
                return;
              }
              node.getParents().forEach(function(tn) {
                expandedMap.set(tn.value, true);
              });
              var expandedArr = Array.from(expandedMap.keys());
              treeStore.replaceExpanded(expandedArr);
            } else {
              treeStore.resetExpanded();
            }
          }
          if (treeStore.getExpanded() && expend.length) {
            treeStore.replaceExpanded(expend);
          }
          treeStore.refreshNodes();
        };
        var Panel = vue.defineComponent({
          name: "TCascaderSubPanel",
          props: {
            empty: props$A.empty,
            trigger: props$A.trigger,
            onChange: props$A.onChange,
            visible: {
              type: Boolean,
              "default": true
            },
            cascaderContext: {
              type: Object
            }
          },
          setup: function setup(props2) {
            var renderTNodeJSXDefault2 = useTNodeDefault();
            var COMPONENT_NAME2 = usePrefixClass("cascader");
            var _useConfig = useConfig("cascader"), global2 = _useConfig.global, t = _useConfig.t;
            var itemShow = vue.ref(props2.visible);
            var panels = vue.computed(function() {
              return getPanels(props2.cascaderContext.treeNodes);
            });
            var handleExpand = function handleExpand2(node, trigger) {
              var propsTrigger = props2.trigger, cascaderContext = props2.cascaderContext;
              expendClickEffect(propsTrigger, trigger, node, cascaderContext);
            };
            vue.watch(function() {
              return props2.visible;
            }, function() {
              vue.nextTick(function() {
                itemShow.value = props2.visible;
              });
            });
            var renderItem = function renderItem2(node) {
              return vue.createVNode(Item, {
                "key": node.value,
                "node": node,
                "cascaderContext": props2.cascaderContext,
                "onClick": function onClick(node2) {
                  handleExpand(node2, "click");
                },
                "onMouseenter": function onMouseenter(node2) {
                  handleExpand(node2, "hover");
                },
                "onChange": function onChange(node2) {
                  valueChangeEffect(node2, props2.cascaderContext);
                }
              }, null);
            };
            var renderList = function renderList2(treeNodes) {
              var _ref;
              var isFilter = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              var segment = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
              var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "1";
              return vue.createVNode("ul", {
                "class": ["".concat(COMPONENT_NAME2.value, "__menu"), "narrow-scrollbar", (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "__menu--segment"), segment), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "__menu--filter"), isFilter), _ref)],
                "key": key
              }, [treeNodes.map(function(node) {
                return renderItem(node);
              })]);
            };
            var renderPanels = function renderPanels2() {
              var _props$cascaderContex = props2.cascaderContext, inputVal = _props$cascaderContex.inputVal, treeNodes = _props$cascaderContex.treeNodes;
              return inputVal ? renderList(treeNodes, true) : panels.value.map(function(treeNodes2, index2) {
                return renderList(treeNodes2, false, index2 !== panels.value.length - 1, "".concat(COMPONENT_NAME2.value, "__menu").concat(index2));
              });
            };
            return function() {
              return vue.createVNode("div", {
                "class": ["".concat(COMPONENT_NAME2.value, "__panel"), _defineProperty$3({}, "".concat(COMPONENT_NAME2.value, "--normal"), panels.value.length)]
              }, [panels.value.length ? renderPanels() : renderTNodeJSXDefault2("empty", vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__panel--empty")
              }, [t(global2.value.empty)]))]);
            };
          }
        });
        var props$z = {
          allowInput: Boolean,
          autoWidth: Boolean,
          borderless: Boolean,
          clearable: Boolean,
          collapsedItems: {
            type: Function
          },
          disabled: Boolean,
          inputProps: {
            type: Object
          },
          inputValue: {
            type: [String, Number]
          },
          defaultInputValue: {
            type: [String, Number]
          },
          keys: {
            type: Object
          },
          label: {
            type: [String, Function]
          },
          loading: Boolean,
          minCollapsedNum: {
            type: Number,
            "default": 0
          },
          multiple: Boolean,
          panel: {
            type: [String, Function]
          },
          placeholder: {
            type: String,
            "default": ""
          },
          popupProps: {
            type: Object
          },
          popupVisible: {
            type: Boolean,
            "default": void 0
          },
          readonly: Boolean,
          status: {
            type: String,
            validator: function validator(val) {
              if (!val)
                return true;
              return ["success", "warning", "error"].includes(val);
            }
          },
          suffix: {
            type: [String, Function]
          },
          suffixIcon: {
            type: Function
          },
          tag: {
            type: [String, Function]
          },
          tagInputProps: {
            type: Object
          },
          tagProps: {
            type: Object
          },
          tips: {
            type: [String, Function]
          },
          value: {
            type: [String, Number, Boolean, Object, Array, Date]
          },
          valueDisplay: {
            type: [String, Function]
          },
          onBlur: Function,
          onClear: Function,
          onEnter: Function,
          onFocus: Function,
          onInputChange: Function,
          onMouseenter: Function,
          onMouseleave: Function,
          onPaste: Function,
          onPopupVisibleChange: Function,
          onTagChange: Function
        };
        var baseGet$2 = _baseGet, baseSet = _baseSet, castPath$3 = _castPath;
        function basePickBy$1(object, paths, predicate) {
          var index2 = -1, length = paths.length, result = {};
          while (++index2 < length) {
            var path6 = paths[index2], value = baseGet$2(object, path6);
            if (predicate(value, path6)) {
              baseSet(result, castPath$3(path6, object), value);
            }
          }
          return result;
        }
        var _basePickBy = basePickBy$1;
        function baseHasIn$1(object, key) {
          return object != null && key in Object(object);
        }
        var _baseHasIn = baseHasIn$1;
        var castPath$2 = _castPath, isArguments$1 = isArguments_1, isArray$3 = isArray_1, isIndex = _isIndex, isLength = isLength_1, toKey$3 = _toKey;
        function hasPath$1(object, path6, hasFunc) {
          path6 = castPath$2(path6, object);
          var index2 = -1, length = path6.length, result = false;
          while (++index2 < length) {
            var key = toKey$3(path6[index2]);
            if (!(result = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result || ++index2 != length) {
            return result;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray$3(object) || isArguments$1(object));
        }
        var _hasPath = hasPath$1;
        var baseHasIn = _baseHasIn, hasPath = _hasPath;
        function hasIn$2(object, path6) {
          return object != null && hasPath(object, path6, baseHasIn);
        }
        var hasIn_1 = hasIn$2;
        var basePickBy = _basePickBy, hasIn$1 = hasIn_1;
        function basePick$1(object, paths) {
          return basePickBy(object, paths, function(value, path6) {
            return hasIn$1(object, path6);
          });
        }
        var _basePick = basePick$1;
        var _Symbol$1 = _Symbol$6, isArguments = isArguments_1, isArray$2 = isArray_1;
        var spreadableSymbol = _Symbol$1 ? _Symbol$1.isConcatSpreadable : void 0;
        function isFlattenable$1(value) {
          return isArray$2(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        var _isFlattenable = isFlattenable$1;
        var arrayPush = _arrayPush, isFlattenable = _isFlattenable;
        function baseFlatten$2(array, depth, predicate, isStrict, result) {
          var index2 = -1, length = array.length;
          predicate || (predicate = isFlattenable);
          result || (result = []);
          while (++index2 < length) {
            var value = array[index2];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten$2(value, depth - 1, predicate, isStrict, result);
              } else {
                arrayPush(result, value);
              }
            } else if (!isStrict) {
              result[result.length] = value;
            }
          }
          return result;
        }
        var _baseFlatten = baseFlatten$2;
        var baseFlatten$1 = _baseFlatten;
        function flatten$1(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten$1(array, 1) : [];
        }
        var flatten_1 = flatten$1;
        var flatten = flatten_1, overRest = _overRest, setToString = _setToString;
        function flatRest$2(func) {
          return setToString(overRest(func, void 0, flatten), func + "");
        }
        var _flatRest = flatRest$2;
        var basePick = _basePick, flatRest$1 = _flatRest;
        var pick = flatRest$1(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        var pick_1 = pick;
        function ownKeys$1m(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1l(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1m(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1m(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var COMMON_PROPERTIES = ["status", "clearable", "disabled", "label", "placeholder", "readonly", "suffix", "suffixIcon", "onPaste", "onEnter", "onMouseenter", "onMouseleave"];
        var DEFAULT_KEYS$1 = {
          label: "label",
          value: "value"
        };
        function getInputValue(value, keys2) {
          var iKeys = keys2 || DEFAULT_KEYS$1;
          return isObject_1(value) ? value[iKeys.label] : value;
        }
        function useSingle(props2, context) {
          var _props$defaultInputVa;
          var _toRefs = vue.toRefs(props2), value = _toRefs.value, keys2 = _toRefs.keys, propsInputValue = _toRefs.inputValue;
          var classPrefix2 = usePrefixClass();
          var inputRef = vue.ref();
          var _useDefaultValue = useDefaultValue(propsInputValue, (_props$defaultInputVa = props2.defaultInputValue) !== null && _props$defaultInputVa !== void 0 ? _props$defaultInputVa : "", props2.onInputChange, "inputValue"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2), inputValue = _useDefaultValue2[0], setInputValue = _useDefaultValue2[1];
          var renderTNode = useTNodeJSX();
          var commonInputProps = vue.computed(function() {
            return pick_1(props2, COMMON_PROPERTIES);
          });
          var onInnerClear = function onInnerClear2(context2) {
            var _context2$e, _props$onClear;
            context2 === null || context2 === void 0 ? void 0 : (_context2$e = context2.e) === null || _context2$e === void 0 ? void 0 : _context2$e.stopPropagation();
            (_props$onClear = props2.onClear) === null || _props$onClear === void 0 ? void 0 : _props$onClear.call(props2, context2);
            setInputValue("", {
              trigger: "clear"
            });
          };
          var onInnerInputChange = function onInnerInputChange2(value2, context2) {
            if (props2.allowInput) {
              setInputValue(value2, _objectSpread$1l(_objectSpread$1l({}, context2), {}, {
                trigger: "input"
              }));
            }
          };
          var renderSelectSingle = function renderSelectSingle2(popupVisible) {
            var singleValueDisplay = renderTNode("valueDisplay");
            var displayedValue = popupVisible && props2.allowInput ? inputValue.value : getInputValue(value.value, keys2.value);
            var prefixContent = [singleValueDisplay, renderTNode("label")];
            var inputProps = _objectSpread$1l(_objectSpread$1l(_objectSpread$1l({}, commonInputProps.value), props2.inputProps), {}, {
              value: singleValueDisplay ? void 0 : displayedValue,
              label: prefixContent.length ? function() {
                return prefixContent;
              } : void 0,
              autoWidth: props2.autoWidth,
              readonly: !props2.allowInput,
              placeholder: singleValueDisplay ? "" : props2.placeholder,
              suffixIcon: !props2.disabled && props2.loading ? function() {
                return vue.createVNode(Loading, {
                  "loading": true,
                  "size": "small"
                }, null);
              } : props2.suffixIcon,
              showClearIconOnEmpty: Boolean(props2.clearable && (inputValue.value || displayedValue))
            });
            return vue.createVNode(Input, vue.mergeProps({
              "ref": "inputRef"
            }, inputProps, {
              "onChange": onInnerInputChange,
              "onClear": onInnerClear,
              "onBlur": function onBlur(val, context2) {
                var _props$onBlur;
                (_props$onBlur = props2.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props2, value.value, _objectSpread$1l(_objectSpread$1l({}, context2), {}, {
                  inputValue: val
                }));
              },
              "onEnter": function onEnter(val, context2) {
                var _props$onEnter;
                (_props$onEnter = props2.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props2, value.value, _objectSpread$1l(_objectSpread$1l({}, context2), {}, {
                  inputValue: val
                }));
              },
              "onFocus": function onFocus(val, context2) {
                var _props$onFocus;
                (_props$onFocus = props2.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props2, value.value, _objectSpread$1l(_objectSpread$1l({}, context2), {}, {
                  inputValue: val
                }));
                !popupVisible && setInputValue(getInputValue(value.value, keys2.value), _objectSpread$1l(_objectSpread$1l({}, context2), {}, {
                  trigger: "input"
                }));
              },
              "inputClass": _defineProperty$3({}, "".concat(classPrefix2.value, "-input--focused"), popupVisible)
            }), context.slots);
          };
          return {
            inputRef,
            commonInputProps,
            onInnerClear,
            renderSelectSingle
          };
        }
        var props$y = {
          autoWidth: Boolean,
          clearable: Boolean,
          collapsedItems: {
            type: Function
          },
          disabled: Boolean,
          dragSort: Boolean,
          excessTagsDisplayType: {
            type: String,
            "default": "scroll",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["scroll", "break-line"].includes(val);
            }
          },
          inputProps: {
            type: Object
          },
          inputValue: {
            type: [String, Number],
            "default": void 0
          },
          defaultInputValue: {
            type: [String, Number],
            "default": ""
          },
          label: {
            type: [String, Function]
          },
          max: {
            type: Number
          },
          minCollapsedNum: {
            type: Number,
            "default": 0
          },
          placeholder: {
            type: String,
            "default": void 0
          },
          readonly: Boolean,
          size: {
            type: String,
            "default": "medium",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["small", "medium", "large"].includes(val);
            }
          },
          status: {
            type: String,
            validator: function validator(val) {
              if (!val)
                return true;
              return ["success", "warning", "error"].includes(val);
            }
          },
          suffix: {
            type: [String, Function]
          },
          suffixIcon: {
            type: Function
          },
          tag: {
            type: [String, Function]
          },
          tagProps: {
            type: Object
          },
          tips: {
            type: [String, Function]
          },
          value: {
            type: Array,
            "default": void 0
          },
          modelValue: {
            type: Array,
            "default": void 0
          },
          defaultValue: {
            type: Array
          },
          valueDisplay: {
            type: [String, Function]
          },
          onBlur: Function,
          onChange: Function,
          onClear: Function,
          onDragSort: Function,
          onEnter: Function,
          onFocus: Function,
          onInputChange: Function,
          onMouseenter: Function,
          onMouseleave: Function,
          onPaste: Function,
          onRemove: Function
        };
        function useTagScroll(props2) {
          var tagInputRef = vue.ref();
          var _toRefs = vue.toRefs(props2), excessTagsDisplayType = _toRefs.excessTagsDisplayType, readonly = _toRefs.readonly, disabled = _toRefs.disabled;
          var scrollDistance = vue.ref(0);
          var scrollElement = vue.ref();
          var mouseEnterTimer = vue.ref();
          var updateScrollElement = function updateScrollElement2(element2) {
            var inputElement = element2.children[0];
            scrollElement.value = inputElement;
          };
          var updateScrollDistance = function updateScrollDistance2() {
            scrollDistance.value = scrollElement.value.scrollWidth - scrollElement.value.clientWidth;
          };
          var scrollTo2 = function scrollTo3(distance) {
            var _scrollElement$value;
            (_scrollElement$value = scrollElement.value) === null || _scrollElement$value === void 0 ? void 0 : _scrollElement$value.scroll({
              left: distance,
              behavior: "smooth"
            });
          };
          var scrollToRight2 = function scrollToRight3() {
            updateScrollDistance();
            scrollTo2(scrollDistance.value);
          };
          var scrollToLeft2 = function scrollToLeft3() {
            scrollTo2(0);
          };
          var onWheel = function onWheel2(_ref) {
            var e = _ref.e;
            if (readonly.value || disabled.value)
              return;
            if (!scrollElement.value)
              return;
            if (e.deltaX > 0) {
              var distance = Math.min(scrollElement.value.scrollLeft + 120, scrollDistance.value);
              scrollTo2(distance);
            } else {
              var _distance = Math.max(scrollElement.value.scrollLeft - 120, 0);
              scrollTo2(_distance);
            }
          };
          var scrollToRightOnEnter = function scrollToRightOnEnter2() {
            if (excessTagsDisplayType.value !== "scroll")
              return;
            mouseEnterTimer.value = setTimeout(function() {
              scrollToRight2();
              clearTimeout(mouseEnterTimer.value);
            }, 100);
          };
          var scrollToLeftOnLeave = function scrollToLeftOnLeave2() {
            if (excessTagsDisplayType.value !== "scroll")
              return;
            scrollTo2(0);
            clearTimeout(mouseEnterTimer.value);
          };
          var init = function init2() {
            var _tagInputRef$value;
            var element2 = (_tagInputRef$value = tagInputRef.value) === null || _tagInputRef$value === void 0 ? void 0 : _tagInputRef$value.$el;
            if (!element2)
              return;
            updateScrollElement(element2);
          };
          var clear = function clear2() {
            clearTimeout(mouseEnterTimer.value);
          };
          vue.onMounted(init);
          vue.onUnmounted(clear);
          return {
            tagInputRef,
            scrollElement,
            scrollDistance,
            scrollTo: scrollTo2,
            scrollToRight: scrollToRight2,
            scrollToLeft: scrollToLeft2,
            updateScrollElement,
            updateScrollDistance,
            onWheel,
            scrollToRightOnEnter,
            scrollToLeftOnLeave
          };
        }
        function ownKeys$1l(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1k(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1l(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1l(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function useTagList(props2) {
          var renderTNode = useTNodeJSX();
          var classPrefix2 = usePrefixClass();
          var _toRefs = vue.toRefs(props2), value = _toRefs.value, modelValue = _toRefs.modelValue, onRemove = _toRefs.onRemove, max2 = _toRefs.max, minCollapsedNum = _toRefs.minCollapsedNum, size = _toRefs.size, disabled = _toRefs.disabled, readonly = _toRefs.readonly, tagProps = _toRefs.tagProps;
          var _useVModel = useVModel(value, modelValue, props2.defaultValue || [], props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), tagValue = _useVModel2[0], setTagValue = _useVModel2[1];
          var oldInputValue = vue.ref();
          var _onClose = function onClose(p) {
            var _onRemove$value;
            var arr = _toConsumableArray(tagValue.value);
            arr.splice(p.index, 1);
            setTagValue(arr, _objectSpread$1k({
              trigger: "tag-remove"
            }, p));
            (_onRemove$value = onRemove.value) === null || _onRemove$value === void 0 ? void 0 : _onRemove$value.call(onRemove, _objectSpread$1k(_objectSpread$1k({}, p), {}, {
              trigger: "tag-remove",
              value: arr
            }));
          };
          var clearAll = function clearAll2(context) {
            setTagValue([], {
              trigger: "clear",
              e: context.e
            });
          };
          var onInnerEnter = function onInnerEnter2(value2, context) {
            var _tagValue$value, _props$onEnter;
            var valueStr = value2 ? String(value2).trim() : "";
            if (!valueStr)
              return;
            var isLimitExceeded = max2 && ((_tagValue$value = tagValue.value) === null || _tagValue$value === void 0 ? void 0 : _tagValue$value.length) >= max2.value;
            var newValue = tagValue.value;
            if (!isLimitExceeded) {
              newValue = tagValue.value instanceof Array ? tagValue.value.concat(String(valueStr)) : [valueStr];
              setTagValue(newValue, {
                trigger: "enter",
                index: newValue.length - 1,
                item: valueStr,
                e: context.e
              });
            }
            props2 === null || props2 === void 0 ? void 0 : (_props$onEnter = props2.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props2, newValue, _objectSpread$1k(_objectSpread$1k({}, context), {}, {
              inputValue: value2
            }));
          };
          var onInputBackspaceKeyUp = function onInputBackspaceKeyUp2(value2, context) {
            var e = context.e;
            if (!tagValue.value || !tagValue.value.length)
              return;
            if (!oldInputValue.value && ["Backspace", "NumpadDelete"].includes(e.code)) {
              var _onRemove$value2;
              var index2 = tagValue.value.length - 1;
              var item = tagValue.value[index2];
              var trigger = "backspace";
              setTagValue(tagValue.value.slice(0, -1), {
                e,
                index: index2,
                item,
                trigger
              });
              (_onRemove$value2 = onRemove.value) === null || _onRemove$value2 === void 0 ? void 0 : _onRemove$value2.call(onRemove, {
                e,
                index: index2,
                item,
                trigger,
                value: tagValue.value
              });
            }
            oldInputValue.value = value2;
          };
          var renderLabel = function renderLabel2(_ref) {
            var displayNode = _ref.displayNode, label = _ref.label;
            var newList = minCollapsedNum.value ? tagValue.value.slice(0, minCollapsedNum.value) : tagValue.value;
            var list = displayNode ? [displayNode] : newList === null || newList === void 0 ? void 0 : newList.map(function(item, index2) {
              var tagContent = renderTNode("tag", {
                params: {
                  value: item
                }
              });
              return vue.createVNode(Tag, vue.mergeProps({
                "key": "".concat(item).concat(index2),
                "size": size.value,
                "disabled": disabled.value,
                "onClose": function onClose(context) {
                  return _onClose({
                    e: context.e,
                    item,
                    index: index2
                  });
                },
                "closable": !readonly.value && !disabled.value
              }, tagProps.value), {
                "default": function _default() {
                  return [tagContent !== null && tagContent !== void 0 ? tagContent : item];
                }
              });
            });
            if (![null, void 0, ""].includes(label)) {
              list.unshift(vue.createVNode("div", {
                "class": "".concat(classPrefix2.value, "-tag-input__prefix"),
                "key": "label"
              }, [label]));
            }
            if (newList.length !== tagValue.value.length) {
              var len = tagValue.value.length - newList.length;
              var more = renderTNode("collapsedItems", {
                params: {
                  value: tagValue.value,
                  count: tagValue.value.length,
                  collapsedTags: tagValue.value.slice(minCollapsedNum.value, tagValue.value.length)
                }
              });
              list.push(more !== null && more !== void 0 ? more : vue.createVNode(Tag, {
                "key": "more"
              }, {
                "default": function _default() {
                  return ["+", len];
                }
              }));
            }
            return list;
          };
          return {
            tagValue,
            clearAll,
            onClose: _onClose,
            onInnerEnter,
            onInputBackspaceKeyUp,
            renderLabel
          };
        }
        function useHover(props2) {
          var disabled = props2.disabled, readonly = props2.readonly, onMouseenter = props2.onMouseenter, onMouseleave = props2.onMouseleave;
          var isHover = vue.ref(false);
          var addHover = function addHover2(context) {
            if (readonly || disabled)
              return;
            isHover.value = true;
            onMouseenter === null || onMouseenter === void 0 ? void 0 : onMouseenter(context);
          };
          var cancelHover = function cancelHover2(context) {
            if (readonly || disabled)
              return;
            isHover.value = false;
            onMouseleave === null || onMouseleave === void 0 ? void 0 : onMouseleave(context);
          };
          return {
            isHover,
            addHover,
            cancelHover
          };
        }
        function ownKeys$1k(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1j(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1k(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1k(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var useComponentClassName$1 = function useComponentClassName2() {
          return {
            NAME_CLASS: usePrefixClass("tag-input"),
            CLEAR_CLASS: usePrefixClass("tag-input__suffix-clear"),
            BREAK_LINE_CLASS: usePrefixClass("tag-input--break-line")
          };
        };
        var _TagInput = vue.defineComponent({
          name: "TTagInput",
          props: _objectSpread$1j({}, props$y),
          setup: function setup(props2) {
            var _useComponentClassNam = useComponentClassName$1(), NAME_CLASS = _useComponentClassNam.NAME_CLASS, CLEAR_CLASS = _useComponentClassNam.CLEAR_CLASS, BREAK_LINE_CLASS = _useComponentClassNam.BREAK_LINE_CLASS;
            var _toRefs = vue.toRefs(props2), inputValue = _toRefs.inputValue;
            var _useDefault = useDefaultValue(inputValue, props2.defaultInputValue, props2.onInputChange, "inputValue"), _useDefault2 = _slicedToArray(_useDefault, 2), tInputValue = _useDefault2[0], setTInputValue = _useDefault2[1];
            var _toRefs2 = vue.toRefs(props2), excessTagsDisplayType = _toRefs2.excessTagsDisplayType, readonly = _toRefs2.readonly, disabled = _toRefs2.disabled, clearable = _toRefs2.clearable, placeholder = _toRefs2.placeholder;
            var _useHover = useHover({
              readonly: props2.readonly,
              disabled: props2.disabled,
              onMouseenter: props2.onMouseenter,
              onMouseleave: props2.onMouseleave
            }), isHover = _useHover.isHover, addHover = _useHover.addHover, cancelHover = _useHover.cancelHover;
            var _useTagScroll = useTagScroll(props2), scrollToRight2 = _useTagScroll.scrollToRight, onWheel = _useTagScroll.onWheel, scrollToRightOnEnter = _useTagScroll.scrollToRightOnEnter, scrollToLeftOnLeave = _useTagScroll.scrollToLeftOnLeave, tagInputRef = _useTagScroll.tagInputRef;
            var _useTagList = useTagList(props2), tagValue = _useTagList.tagValue, onInnerEnter = _useTagList.onInnerEnter, onInputBackspaceKeyUp = _useTagList.onInputBackspaceKeyUp, clearAll = _useTagList.clearAll, renderLabel = _useTagList.renderLabel, onClose = _useTagList.onClose;
            var classes = vue.computed(function() {
              return [NAME_CLASS.value, _defineProperty$3({}, BREAK_LINE_CLASS.value, excessTagsDisplayType.value === "break-line")];
            });
            var tagInputPlaceholder = vue.computed(function() {
              var _tagValue$value;
              return !((_tagValue$value = tagValue.value) !== null && _tagValue$value !== void 0 && _tagValue$value.length) ? placeholder.value : "";
            });
            var showClearIcon = vue.computed(function() {
              var _tagValue$value2;
              return Boolean(!readonly.value && !disabled.value && clearable.value && isHover.value && (((_tagValue$value2 = tagValue.value) === null || _tagValue$value2 === void 0 ? void 0 : _tagValue$value2.length) || tInputValue.value));
            });
            var onInputEnter = function onInputEnter2(value, context) {
              setTInputValue("", {
                e: context.e,
                trigger: "enter"
              });
              onInnerEnter(value, context);
              vue.nextTick(function() {
                scrollToRight2();
              });
            };
            var onClick = function onClick2() {
              tagInputRef.value.focus();
            };
            var onClearClick = function onClearClick2(context) {
              var _props2$onClear;
              clearAll(context);
              setTInputValue("", {
                e: context.e,
                trigger: "clear"
              });
              (_props2$onClear = props2.onClear) === null || _props2$onClear === void 0 ? void 0 : _props2$onClear.call(props2, context);
            };
            return {
              CLEAR_CLASS,
              tagValue,
              tInputValue,
              isHover,
              tagInputPlaceholder,
              showClearIcon,
              tagInputRef,
              setTInputValue,
              addHover,
              cancelHover,
              onInputEnter,
              onInnerEnter,
              onInputBackspaceKeyUp,
              renderLabel,
              onWheel,
              scrollToRightOnEnter,
              scrollToLeftOnLeave,
              onClick,
              onClearClick,
              onClose,
              classes
            };
          },
          render: function render() {
            var _this = this;
            var suffixIconNode = this.showClearIcon ? vue.createVNode(closeCircleFilled, {
              "class": this.CLEAR_CLASS,
              "onClick": this.onClearClick
            }, null) : renderTNodeJSX(this, "suffixIcon");
            var displayNode = renderTNodeJSX(this, "valueDisplay", {
              params: {
                value: this.tagValue,
                onClose: function onClose(index2, item) {
                  return _this.onClose({
                    index: index2,
                    item
                  });
                }
              }
            });
            var _label = renderTNodeJSX(this, "label", {
              silent: true
            });
            return vue.createVNode(Input, vue.mergeProps({
              "ref": "tagInputRef",
              "readonly": this.readonly
            }, this.inputProps, {
              "value": this.tInputValue,
              "onWheel": this.onWheel,
              "autoWidth": this.autoWidth,
              "size": this.size,
              "disabled": this.disabled,
              "label": function label() {
                return _this.renderLabel({
                  displayNode,
                  label: _label
                });
              },
              "class": this.classes,
              "tips": this.tips,
              "status": this.status,
              "placeholder": this.tagInputPlaceholder,
              "suffix": this.suffix,
              "suffixIcon": function suffixIcon() {
                return suffixIconNode;
              },
              "onChange": function onChange(val, context) {
                _this.setTInputValue(val, _objectSpread$1j(_objectSpread$1j({}, context), {}, {
                  trigger: "input"
                }));
              },
              "onPaste": this.onPaste,
              "onEnter": this.onInputEnter,
              "onKeyup": this.onInputBackspaceKeyUp,
              "onMouseenter": function onMouseenter(context) {
                _this.addHover(context);
                _this.scrollToRightOnEnter();
              },
              "onMouseleave": function onMouseleave(context) {
                _this.cancelHover(context);
                _this.scrollToLeftOnLeave();
              },
              "onFocus": function onFocus(inputValue, context) {
                var _this$onFocus;
                (_this$onFocus = _this.onFocus) === null || _this$onFocus === void 0 ? void 0 : _this$onFocus.call(_this, _this.tagValue, {
                  e: context.e,
                  inputValue
                });
              },
              "onBlur": function onBlur(inputValue, context) {
                var _this$onBlur;
                (_this$onBlur = _this.onBlur) === null || _this$onBlur === void 0 ? void 0 : _this$onBlur.call(_this, _this.tagValue, {
                  e: context.e,
                  inputValue
                });
              },
              "onClick": this.onClick
            }), null);
          }
        });
        var TagInput = withInstall(_TagInput);
        function ownKeys$1j(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1i(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1j(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1j(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var DEFAULT_KEYS = {
          label: "label",
          key: "key",
          children: "children"
        };
        function useMultiple(props2, context) {
          var _toRefs = vue.toRefs(props2), inputValue = _toRefs.inputValue;
          var classPrefix2 = usePrefixClass();
          var tagInputRef = vue.ref();
          var _useDefault = useDefaultValue(inputValue, props2.defaultInputValue, props2.onInputChange, "inputValue"), _useDefault2 = _slicedToArray(_useDefault, 2), tInputValue = _useDefault2[0], setTInputValue = _useDefault2[1];
          var iKeys = vue.computed(function() {
            return _objectSpread$1i(_objectSpread$1i({}, DEFAULT_KEYS), props2.keys);
          });
          var tags = vue.computed(function() {
            if (!(props2.value instanceof Array)) {
              return isObject_1(props2.value) ? [props2.value[iKeys.value.label]] : [props2.value];
            }
            return props2.value.map(function(item) {
              return isObject_1(item) ? item[iKeys.value.label] : item;
            });
          });
          var tPlaceholder = vue.computed(function() {
            return !tags.value || !tags.value.length ? props2.placeholder : "";
          });
          var onTagInputChange = function onTagInputChange2(val, context2) {
            var _props$onTagChange;
            if (context2.trigger === "tag-remove") {
              var _context2$e;
              (_context2$e = context2.e) === null || _context2$e === void 0 ? void 0 : _context2$e.stopPropagation();
            }
            (_props$onTagChange = props2.onTagChange) === null || _props$onTagChange === void 0 ? void 0 : _props$onTagChange.call(props2, val, context2);
          };
          var renderSelectMultiple = function renderSelectMultiple2(p) {
            var tagInputProps = _objectSpread$1i(_objectSpread$1i(_objectSpread$1i({}, p.commonInputProps), props2.tagInputProps), {}, {
              tagProps: props2.tagProps,
              label: props2.label,
              autoWidth: props2.autoWidth,
              placeholder: tPlaceholder.value,
              minCollapsedNum: props2.minCollapsedNum,
              collapsedItems: props2.collapsedItems,
              tag: props2.tag,
              value: tags.value,
              valueDisplay: props2.valueDisplay,
              inputValue: tInputValue.value || "",
              inputProps: {
                readonly: !props2.allowInput || props2.readonly,
                inputClass: _defineProperty$3({}, "".concat(classPrefix2.value, "-input--focused"), p.popupVisible)
              },
              suffixIcon: !props2.disabled && props2.loading ? function() {
                return vue.createVNode(Loading, {
                  "loading": true,
                  "size": "small"
                }, null);
              } : props2.suffixIcon
            });
            return vue.createVNode(TagInput, vue.mergeProps({
              "ref": "tagInputRef"
            }, tagInputProps, {
              "onInputChange": function onInputChange(val, context2) {
                if ((context2 === null || context2 === void 0 ? void 0 : context2.trigger) === "enter")
                  return;
                setTInputValue(val, {
                  trigger: context2.trigger,
                  e: context2.e
                });
              },
              "onChange": onTagInputChange,
              "onClear": p.onInnerClear,
              "onBlur": function onBlur(val, context2) {
                var _props$onBlur;
                (_props$onBlur = props2.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props2, props2.value, _objectSpread$1i(_objectSpread$1i({}, context2), {}, {
                  tagInputValue: val
                }));
              },
              "onFocus": function onFocus(val, context2) {
                var _props$onFocus;
                (_props$onFocus = props2.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props2, props2.value, _objectSpread$1i(_objectSpread$1i({}, context2), {}, {
                  tagInputValue: val
                }));
              }
            }), context.slots);
          };
          return {
            tags,
            tPlaceholder,
            tagInputRef,
            renderSelectMultiple
          };
        }
        function ownKeys$1i(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1h(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1i(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1i(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var MAX_POPUP_WIDTH = 1e3;
        function useOverlayStyle(props2) {
          var _toRefs = vue.toRefs(props2), popupProps2 = _toRefs.popupProps, autoWidth = _toRefs.autoWidth;
          var innerPopupVisible = vue.ref(false);
          var macthWidthFunc = function macthWidthFunc2(triggerElement, popupElement) {
            var SCROLLBAR_WIDTH = popupElement.scrollHeight > popupElement.offsetHeight ? 8 : 0;
            var width = popupElement.offsetWidth + SCROLLBAR_WIDTH >= triggerElement.offsetWidth ? popupElement.offsetWidth : triggerElement.offsetWidth;
            var otherOverlayStyle = {};
            if (popupProps2.value && _typeof$2(popupProps2.value.overlayStyle) === "object" && !popupProps2.value.overlayStyle.width) {
              otherOverlayStyle = popupProps2.value.overlayStyle;
            }
            return _objectSpread$1h({
              width: "".concat(Math.min(width, MAX_POPUP_WIDTH), "px")
            }, otherOverlayStyle);
          };
          var onInnerPopupVisibleChange = function onInnerPopupVisibleChange2(visible, context) {
            var _props$onPopupVisible;
            if (props2.disabled || props2.readonly)
              return;
            var newVisible = context.trigger === "trigger-element-click" ? true : visible;
            innerPopupVisible.value = newVisible;
            (_props$onPopupVisible = props2.onPopupVisibleChange) === null || _props$onPopupVisible === void 0 ? void 0 : _props$onPopupVisible.call(props2, newVisible, context);
          };
          var tOverlayStyle = vue.computed(function() {
            var _popupProps$value;
            var result = {};
            var overlayStyle = ((_popupProps$value = popupProps2.value) === null || _popupProps$value === void 0 ? void 0 : _popupProps$value.overlayStyle) || {};
            if (isFunction_1(overlayStyle) || isObject_1(overlayStyle) && overlayStyle.width) {
              result = overlayStyle;
            } else if (!autoWidth.value) {
              result = macthWidthFunc;
            }
            return result;
          });
          return {
            tOverlayStyle,
            innerPopupVisible,
            onInnerPopupVisibleChange
          };
        }
        function ownKeys$1h(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1g(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1h(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1h(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var useComponentClassName = function useComponentClassName2() {
          return {
            NAME_CLASS: usePrefixClass("select-input"),
            BASE_CLASS_BORDERLESS: usePrefixClass("select-input--borderless"),
            BASE_CLASS_MULTIPLE: usePrefixClass("select-input--multiple"),
            BASE_CLASS_POPUP_VISIBLE: usePrefixClass("select-input--popup-visible"),
            BASE_CLASS_EMPTY: usePrefixClass("select-input--empty")
          };
        };
        var _SelectInput = vue.defineComponent({
          name: "TSelectInput",
          props: _objectSpread$1g({}, props$z),
          setup: function setup(props2, context) {
            var _useComponentClassNam = useComponentClassName(), NAME_CLASS = _useComponentClassNam.NAME_CLASS, BASE_CLASS_BORDERLESS = _useComponentClassNam.BASE_CLASS_BORDERLESS, BASE_CLASS_MULTIPLE = _useComponentClassNam.BASE_CLASS_MULTIPLE, BASE_CLASS_POPUP_VISIBLE = _useComponentClassNam.BASE_CLASS_POPUP_VISIBLE, BASE_CLASS_EMPTY = _useComponentClassNam.BASE_CLASS_EMPTY;
            var classPrefix2 = usePrefixClass();
            var selectInputRef = vue.ref();
            var selectInputWrapRef = vue.ref();
            var _toRefs = vue.toRefs(props2), multiple = _toRefs.multiple, value = _toRefs.value, popupVisible = _toRefs.popupVisible, borderless = _toRefs.borderless;
            var _useSingle = useSingle(props2, context), commonInputProps = _useSingle.commonInputProps, onInnerClear = _useSingle.onInnerClear, renderSelectSingle = _useSingle.renderSelectSingle;
            var _useMultiple = useMultiple(props2, context), renderSelectMultiple = _useMultiple.renderSelectMultiple;
            var _useOverlayStyle = useOverlayStyle(props2), tOverlayStyle = _useOverlayStyle.tOverlayStyle, innerPopupVisible = _useOverlayStyle.innerPopupVisible, onInnerPopupVisibleChange = _useOverlayStyle.onInnerPopupVisibleChange;
            var popupClasses = vue.computed(function() {
              var _popupVisible$value, _ref;
              return [NAME_CLASS.value, (_ref = {}, _defineProperty$3(_ref, BASE_CLASS_BORDERLESS.value, borderless.value), _defineProperty$3(_ref, BASE_CLASS_MULTIPLE.value, multiple.value), _defineProperty$3(_ref, BASE_CLASS_POPUP_VISIBLE.value, (_popupVisible$value = popupVisible.value) !== null && _popupVisible$value !== void 0 ? _popupVisible$value : innerPopupVisible.value), _defineProperty$3(_ref, BASE_CLASS_EMPTY.value, value.value instanceof Array ? !value.value.length : !value.value), _ref)];
            });
            return {
              classPrefix: classPrefix2,
              NAME_CLASS,
              selectInputWrapRef,
              innerPopupVisible,
              commonInputProps,
              tOverlayStyle,
              selectInputRef,
              popupClasses,
              onInnerClear,
              renderSelectSingle,
              renderSelectMultiple,
              onInnerPopupVisibleChange
            };
          },
          render: function render() {
            var _this$popupVisible, _this$popupProps, _this = this;
            var visibleProps = {
              visible: (_this$popupVisible = this.popupVisible) !== null && _this$popupVisible !== void 0 ? _this$popupVisible : this.innerPopupVisible
            };
            var mainContent = vue.createVNode(Popup, vue.mergeProps({
              "ref": "selectInputRef",
              "class": this.popupClasses,
              "trigger": ((_this$popupProps = this.popupProps) === null || _this$popupProps === void 0 ? void 0 : _this$popupProps.trigger) || "click",
              "placement": "bottom-left"
            }, visibleProps, {
              "content": this.panel,
              "hideEmptyPopup": true,
              "onVisibleChange": this.onInnerPopupVisibleChange
            }, this.popupProps, {
              "overlayStyle": this.tOverlayStyle
            }), _objectSpread$1g({
              "default": function _default() {
                return [_this.multiple ? _this.renderSelectMultiple({
                  commonInputProps: _this.commonInputProps,
                  onInnerClear: _this.onInnerClear,
                  popupVisible: visibleProps.visible
                }) : _this.renderSelectSingle(visibleProps.visible)];
              }
            }, _objectSpread$1g(_objectSpread$1g({}, this.$slots), {}, {
              content: this.$slots.panel
            })));
            if (!this.tips)
              return mainContent;
            return vue.createVNode("div", {
              "ref": "selectInputWrapRef",
              "class": "".concat(this.NAME_CLASS, "__wrap")
            }, [mainContent, vue.createVNode("div", {
              "class": "".concat(this.classPrefix, "-input__tips ").concat(this.classPrefix, "-input__tips--").concat(this.status || "normal")
            }, [this.tips])]);
          }
        });
        var SelectInput = withInstall(_SelectInput);
        function arraySome$1(array, predicate) {
          var index2 = -1, length = array == null ? 0 : array.length;
          while (++index2 < length) {
            if (predicate(array[index2], index2, array)) {
              return true;
            }
          }
          return false;
        }
        var _arraySome = arraySome$1;
        var SetCache$1 = _SetCache, arraySome = _arraySome, cacheHas$1 = _cacheHas;
        var COMPARE_PARTIAL_FLAG$5 = 1, COMPARE_UNORDERED_FLAG$3 = 2;
        function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5, arrLength = array.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index2 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache$1() : void 0;
          stack.set(array, other);
          stack.set(other, array);
          while (++index2 < arrLength) {
            var arrValue = array[index2], othValue = other[index2];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index2, other, array, stack) : customizer(arrValue, othValue, index2, array, other, stack);
            }
            if (compared !== void 0) {
              if (compared) {
                continue;
              }
              result = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas$1(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result = false;
              break;
            }
          }
          stack["delete"](array);
          stack["delete"](other);
          return result;
        }
        var _equalArrays = equalArrays$2;
        function mapToArray$1(map) {
          var index2 = -1, result = Array(map.size);
          map.forEach(function(value, key) {
            result[++index2] = [key, value];
          });
          return result;
        }
        var _mapToArray = mapToArray$1;
        function setToArray$1(set2) {
          var index2 = -1, result = Array(set2.size);
          set2.forEach(function(value) {
            result[++index2] = value;
          });
          return result;
        }
        var _setToArray = setToArray$1;
        var _Symbol = _Symbol$6, Uint8Array2 = _Uint8Array, eq$1 = eq_1, equalArrays$1 = _equalArrays, mapToArray = _mapToArray, setToArray = _setToArray;
        var COMPARE_PARTIAL_FLAG$4 = 1, COMPARE_UNORDERED_FLAG$2 = 2;
        var boolTag$1 = "[object Boolean]", dateTag = "[object Date]", errorTag$1 = "[object Error]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]";
        var symbolProto = _Symbol ? _Symbol.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
        function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                return false;
              }
              return true;
            case boolTag$1:
            case dateTag:
            case numberTag:
              return eq$1(+object, +other);
            case errorTag$1:
              return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
              return object == other + "";
            case mapTag:
              var convert2 = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
              convert2 || (convert2 = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG$2;
              stack.set(object, other);
              var result = equalArrays$1(convert2(object), convert2(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        var _equalByTag = equalByTag$1;
        var getAllKeys = _getAllKeys;
        var COMPARE_PARTIAL_FLAG$3 = 1;
        var objectProto$3 = Object.prototype;
        var hasOwnProperty$4 = objectProto$3.hasOwnProperty;
        function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index2 = objLength;
          while (index2--) {
            var key = objProps[index2];
            if (!(isPartial ? key in other : hasOwnProperty$4.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index2 < objLength) {
            key = objProps[index2];
            var objValue = object[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
            }
            if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && "constructor" in object && "constructor" in other && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result;
        }
        var _equalObjects = equalObjects$1;
        var Stack$1 = _Stack, equalArrays = _equalArrays, equalByTag = _equalByTag, equalObjects = _equalObjects, getTag = _getTag, isArray$1 = isArray_1, isBuffer = isBuffer$5.exports, isTypedArray = isTypedArray_1;
        var COMPARE_PARTIAL_FLAG$2 = 1;
        var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]";
        var objectProto$2 = Object.prototype;
        var hasOwnProperty$3 = objectProto$2.hasOwnProperty;
        function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray$1(object), othIsArr = isArray$1(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack$1());
            return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
            var objIsWrapped = objIsObj && hasOwnProperty$3.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty$3.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack$1());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack$1());
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        var _baseIsEqualDeep = baseIsEqualDeep$1;
        var baseIsEqualDeep = _baseIsEqualDeep, isObjectLike$2 = isObjectLike_1;
        function baseIsEqual$3(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike$2(value) && !isObjectLike$2(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual$3, stack);
        }
        var _baseIsEqual = baseIsEqual$3;
        var baseIsEqual$2 = _baseIsEqual;
        function isEqual(value, other) {
          return baseIsEqual$2(value, other);
        }
        var isEqual_1 = isEqual;
        var SetCache = _SetCache, arrayIncludes = _arrayIncludes, arrayIncludesWith = _arrayIncludesWith, arrayMap$2 = _arrayMap, baseUnary = _baseUnary, cacheHas = _cacheHas;
        var LARGE_ARRAY_SIZE = 200;
        function baseDifference$2(array, values, iteratee, comparator) {
          var index2 = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
          if (!length) {
            return result;
          }
          if (iteratee) {
            values = arrayMap$2(values, baseUnary(iteratee));
          }
          if (comparator) {
            includes = arrayIncludesWith;
            isCommon = false;
          } else if (values.length >= LARGE_ARRAY_SIZE) {
            includes = cacheHas;
            isCommon = false;
            values = new SetCache(values);
          }
          outer:
            while (++index2 < length) {
              var value = array[index2], computed = iteratee == null ? value : iteratee(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result.push(value);
              } else if (!includes(values, computed, comparator)) {
                result.push(value);
              }
            }
          return result;
        }
        var _baseDifference = baseDifference$2;
        var baseDifference$1 = _baseDifference, baseFlatten = _baseFlatten, baseRest$2 = _baseRest, isArrayLikeObject$1 = isArrayLikeObject_1;
        var difference = baseRest$2(function(array, values) {
          return isArrayLikeObject$1(array) ? baseDifference$1(array, baseFlatten(values, 1, isArrayLikeObject$1, true)) : [];
        });
        var difference_1 = difference;
        var toString$2 = toString_1;
        var idCounter = 0;
        function uniqueId(prefix) {
          var id2 = ++idCounter;
          return toString$2(prefix) + id2;
        }
        var uniqueId_1 = uniqueId;
        function ownKeys$1g(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1f(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1g(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1g(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function getExposedProps(node) {
          var props2 = pick_1(node, ["value", "label", "data", "actived", "expanded", "checked", "indeterminate", "loading"]);
          return props2;
        }
        function createNodeModel(node) {
          var props2 = getExposedProps(node);
          var model = _objectSpread$1f(_objectSpread$1f({}, props2), {}, {
            getLevel: function getLevel() {
              return node.getLevel();
            },
            getIndex: function getIndex() {
              return node.getIndex();
            },
            isFirst: function isFirst() {
              return node.isFirst();
            },
            isLast: function isLast() {
              return node.isLast();
            },
            isLeaf: function isLeaf() {
              return node.isLeaf();
            },
            insertBefore: function insertBefore(newData) {
              return node.insertBefore(newData);
            },
            insertAfter: function insertAfter(newData) {
              return node.insertAfter(newData);
            },
            appendData: function appendData(data) {
              return node.append(data);
            },
            getPath: function getPath() {
              var nodes = node.getPath();
              return nodes.map(function(item) {
                return item.getModel();
              });
            },
            getParent: function getParent() {
              var _node$parent;
              return (_node$parent = node.parent) === null || _node$parent === void 0 ? void 0 : _node$parent.getModel();
            },
            getParents: function getParents() {
              var nodes = node.getParents();
              return nodes.map(function(item) {
                return item.getModel();
              });
            },
            getRoot: function getRoot() {
              var root2 = node.getRoot();
              return root2 === null || root2 === void 0 ? void 0 : root2.getModel();
            },
            getSiblings: function getSiblings() {
              var nodes = node.getSiblings();
              return nodes.map(function(item) {
                return item.getModel();
              });
            },
            getChildren: function getChildren(deep) {
              var childrenModel = false;
              var children = node.children;
              if (Array.isArray(children)) {
                if (children.length > 0) {
                  if (deep) {
                    var nodes = node.walk();
                    nodes.shift();
                    childrenModel = nodes.map(function(item) {
                      return item.getModel();
                    });
                  } else {
                    childrenModel = children.map(function(item) {
                      return item.getModel();
                    });
                  }
                } else {
                  childrenModel = false;
                }
              } else if (typeof children === "boolean") {
                childrenModel = children;
              }
              return childrenModel;
            },
            remove: function remove2(value) {
              if (!value) {
                node.remove();
                return;
              }
              var tree = node.tree;
              var targetNode = tree.getNode(value);
              if (!targetNode) {
                log.warnOnce("Tree", "`".concat(value, "` is not exist"));
                return;
              }
              var parents = targetNode.getParents();
              var parentValues = parents.map(function(pnode) {
                return pnode.value;
              });
              if (parentValues.indexOf(node.value) < 0) {
                log.warnOnce("Tree", "`".concat(value, "` is not a childNode of current node"));
                return;
              }
              targetNode.remove();
            },
            setData: function setData(data) {
              Object.assign(node.data, data);
            }
          });
          return model;
        }
        function updateNodeModel(model, node) {
          var props2 = getExposedProps(node);
          Object.assign(model, props2);
        }
        function ownKeys$1f(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1e(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1f(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1f(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
        var defaultStatus = {
          expandMutex: false,
          activable: false,
          checkable: false,
          disabled: false,
          draggable: false,
          loading: false
        };
        var TreeNode = /* @__PURE__ */ function() {
          function TreeNode2(tree, data, parent2) {
            _classCallCheck(this, TreeNode2);
            _defineProperty$3(this, "tree", void 0);
            _defineProperty$3(this, "value", void 0);
            _defineProperty$3(this, "label", void 0);
            _defineProperty$3(this, "data", void 0);
            _defineProperty$3(this, "parent", void 0);
            _defineProperty$3(this, "children", void 0);
            _defineProperty$3(this, "model", void 0);
            _defineProperty$3(this, "vmIsLeaf", void 0);
            _defineProperty$3(this, "vmIsFirst", void 0);
            _defineProperty$3(this, "vmIsLast", void 0);
            _defineProperty$3(this, "vmIsRest", void 0);
            _defineProperty$3(this, "vmIsLocked", void 0);
            _defineProperty$3(this, "expanded", void 0);
            _defineProperty$3(this, "expandMutex", void 0);
            _defineProperty$3(this, "actived", void 0);
            _defineProperty$3(this, "activable", void 0);
            _defineProperty$3(this, "checkable", void 0);
            _defineProperty$3(this, "vmCheckable", void 0);
            _defineProperty$3(this, "checked", void 0);
            _defineProperty$3(this, "indeterminate", void 0);
            _defineProperty$3(this, "disabled", void 0);
            _defineProperty$3(this, "draggable", void 0);
            _defineProperty$3(this, "visible", void 0);
            _defineProperty$3(this, "level", void 0);
            _defineProperty$3(this, "loading", void 0);
            this.data = data;
            this.tree = tree;
            var config = tree.config || {};
            var prefix = config.prefix || "t";
            var keys2 = get_1(tree, "config.keys") || {};
            var propChildren = keys2.children || "children";
            var propLabel = keys2.label || "label";
            var propValue = keys2.value || "value";
            this.model = null;
            this.children = null;
            this.vmCheckable = false;
            this.vmIsLeaf = false;
            this.vmIsFirst = false;
            this.vmIsLast = false;
            this.vmIsRest = true;
            this.vmIsLocked = false;
            var spec = _objectSpread$1e(_objectSpread$1e({}, defaultStatus), {}, {
              actived: false,
              expanded: false,
              checked: false
            }, data);
            var children = spec[propChildren];
            this.set(spec);
            this.label = spec[propLabel] || "";
            this.value = spec[propValue] || uniqueId_1(prefix);
            this.tree.nodeMap.set(this.value, this);
            if (parent2 && parent2 instanceof TreeNode2) {
              this.parent = parent2;
            } else {
              this.parent = null;
            }
            if (children === true) {
              this.children = children;
            }
            this.level = 0;
            this.visible = true;
            this.actived = spec.actived;
            this.initActived();
            this.expanded = spec.expanded;
            this.initExpanded();
            this.checked = spec.checked;
            this.initChecked();
            this.update();
            tree.reflow(this);
            if (Array.isArray(children)) {
              this.append(children);
            } else if (children === true && !config.lazy) {
              this.loadChildren();
            }
            this.checked = false;
            this.indeterminate = false;
            this.updateChecked();
          }
          _createClass(TreeNode2, [{
            key: "initChecked",
            value: function initChecked() {
              var tree = this.tree, value = this.value, parent2 = this.parent;
              var checkStrictly = tree.config.checkStrictly;
              var checked = this.checked;
              checked = parent2 === null || parent2 === void 0 ? void 0 : parent2.isChecked();
              if (checked && !checkStrictly) {
                tree.checkedMap.set(value, true);
              }
              this.checked = checked;
            }
          }, {
            key: "initExpanded",
            value: function initExpanded() {
              var tree = this.tree;
              var expanded = this.expanded;
              var config = tree.config;
              if (typeof config.expandLevel === "number" && this.getLevel() < config.expandLevel) {
                tree.expandedMap.set(this.value, true);
                expanded = true;
              }
              if (config.expandAll) {
                expanded = true;
              }
              if (this.children === true && config.lazy) {
                expanded = false;
              }
              if (expanded) {
                tree.expandedMap.set(this.value, true);
              } else {
                tree.expandedMap["delete"](this.value);
              }
              this.expanded = expanded;
            }
          }, {
            key: "initActived",
            value: function initActived() {
              var tree = this.tree, actived = this.actived;
              if (actived) {
                tree.activedMap.set(this.value, true);
              }
            }
          }, {
            key: "append",
            value: function append(data) {
              var _this = this;
              var list = [];
              if (!Array.isArray(data)) {
                list.push(data);
              } else {
                list.push.apply(list, _toConsumableArray(data));
              }
              if (list.length <= 0) {
                return;
              }
              if (!Array.isArray(this.children)) {
                this.children = [];
              }
              var children = this.children, tree = this.tree;
              list.forEach(function(item) {
                var node = null;
                if (item instanceof TreeNode2) {
                  node = item;
                  node.appendTo(_this.tree, _this);
                } else {
                  node = new TreeNode2(_this.tree, item, _this);
                  children.push(node);
                }
              });
              tree.reflow(this);
              this.updateRelated();
            }
          }, {
            key: "appendTo",
            value: function appendTo(tree, parent2, index2) {
              var _this2 = this;
              var parentNode = parent2;
              if (!parentNode)
                return;
              var targetParents = parentNode.getParents();
              var includeCurrent = targetParents.some(function(node) {
                return node.value === _this2.value;
              });
              if (includeCurrent) {
                return;
              }
              if (Array.isArray(parentNode.children)) {
                var targetIndex = 0;
                if (typeof index2 === "number") {
                  targetIndex = index2;
                }
                var targetPosNode = parentNode.children[targetIndex];
                if (targetPosNode.value === this.value) {
                  return;
                }
              }
              this.remove();
              this.parent = parentNode;
              var siblings = null;
              if (parentNode instanceof TreeNode2) {
                if (!Array.isArray(parentNode.children)) {
                  parentNode.children = [];
                }
                siblings = parent2.children;
              } else {
                siblings = tree.children;
              }
              if (Array.isArray(siblings)) {
                if (typeof index2 === "number") {
                  siblings.splice(index2, 0, this);
                } else {
                  siblings.push(this);
                }
              }
              var nodes = this.walk();
              nodes.forEach(function(item) {
                var node = item;
                node.tree = tree;
                tree.nodeMap.set(node.value, node);
                if (node.expanded) {
                  tree.expandedMap.set(node.value, true);
                }
              });
              var updateNodes = parentNode.walk();
              updateNodes.forEach(function(node) {
                node.update();
                node.updateChecked();
              });
              tree.reflow();
            }
          }, {
            key: "insert",
            value: function insert(item, index2) {
              var tree = this.tree, parent2 = this.parent;
              var siblings = this.getSiblings();
              var node = null;
              if (item instanceof TreeNode2) {
                node = item;
                node.appendTo(tree, parent2, index2);
              } else if (item) {
                node = new TreeNode2(tree, item, parent2);
                if (typeof index2 === "number") {
                  siblings.splice(index2, 0, node);
                }
                siblings.forEach(function(sibling) {
                  sibling.update();
                });
              }
              tree.reflow();
            }
          }, {
            key: "insertBefore",
            value: function insertBefore(newData) {
              var index2 = this.getIndex();
              this.insert(newData, index2);
            }
          }, {
            key: "insertAfter",
            value: function insertAfter(newData) {
              var index2 = this.getIndex();
              this.insert(newData, index2 + 1);
            }
          }, {
            key: "remove",
            value: function remove2() {
              var tree = this.tree;
              var nodes = this.walk();
              var siblings = this.getSiblings();
              var index2 = this.getIndex();
              if (Array.isArray(siblings)) {
                siblings.splice(index2, 1);
              }
              nodes.forEach(function(node) {
                node.clean();
              });
              siblings.forEach(function(node) {
                node.update();
              });
              this.updateParents();
              tree.reflow();
            }
          }, {
            key: "clean",
            value: function clean() {
              var tree = this.tree, value = this.value;
              tree.activedMap["delete"](value);
              tree.checkedMap["delete"](value);
              tree.expandedMap["delete"](value);
              tree.nodeMap["delete"](value);
            }
          }, {
            key: "loadChildren",
            value: function() {
              var _loadChildren = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee() {
                var config, list;
                return regenerator.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        config = get_1(this, "tree.config") || {};
                        if (!(this.children === true && !this.loading)) {
                          _context.next = 13;
                          break;
                        }
                        if (!(typeof config.load === "function")) {
                          _context.next = 13;
                          break;
                        }
                        this.loading = true;
                        this.update();
                        list = [];
                        _context.next = 8;
                        return config.load(this);
                      case 8:
                        list = _context.sent;
                        this.tree.emit("load", {
                          node: this,
                          data: list
                        });
                        this.loading = false;
                        if (Array.isArray(list) && list.length > 0) {
                          this.append(list);
                        } else {
                          this.children = false;
                        }
                        this.update();
                      case 13:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, this);
              }));
              function loadChildren() {
                return _loadChildren.apply(this, arguments);
              }
              return loadChildren;
            }()
          }, {
            key: "set",
            value: function set2(item) {
              var _this3 = this;
              var tree = this.tree;
              var keys2 = Object.keys(item);
              keys2.forEach(function(key) {
                if (hasOwnProperty$2.call(defaultStatus, key) || key === "label") {
                  _this3[key] = item[key];
                }
              });
              tree.updated(this);
            }
          }, {
            key: "getParent",
            value: function getParent() {
              return this.parent;
            }
          }, {
            key: "getParents",
            value: function getParents() {
              var parents = [];
              var node = this.parent;
              while (node) {
                parents.push(node);
                node = node.parent;
              }
              return parents;
            }
          }, {
            key: "getSiblings",
            value: function getSiblings() {
              var parent2 = this.parent, tree = this.tree;
              var list = [];
              if (parent2) {
                if (Array.isArray(parent2.children)) {
                  list = parent2.children;
                }
              } else if (tree) {
                list = tree.children;
              }
              return list;
            }
          }, {
            key: "getRoot",
            value: function getRoot() {
              var parents = this.getParents();
              return parents[parents.length - 1] || null;
            }
          }, {
            key: "getIndex",
            value: function getIndex() {
              var list = this.getSiblings();
              return list.indexOf(this);
            }
          }, {
            key: "getPath",
            value: function getPath() {
              var nodes = this.getParents();
              nodes.unshift(this);
              return nodes.reverse();
            }
          }, {
            key: "getLevel",
            value: function getLevel() {
              var parents = this.getParents();
              return parents.length;
            }
          }, {
            key: "isRest",
            value: function isRest() {
              var _this$tree = this.tree, config = _this$tree.config, filterMap = _this$tree.filterMap;
              var rest = true;
              if (typeof config.filter === "function") {
                var nodeModel = this.getModel();
                rest = config.filter(nodeModel);
              }
              if (rest) {
                filterMap.set(this.value, true);
              } else if (filterMap.get(this.value)) {
                filterMap["delete"](this.value);
              }
              return rest;
            }
          }, {
            key: "isVisible",
            value: function isVisible() {
              var nodeMap = this.tree.nodeMap;
              var visible = true;
              if (this.vmIsLocked) {
                return true;
              }
              if (nodeMap.get(this.value)) {
                var filterVisible = this.isRest();
                var expandVisible = true;
                var parents = this.getParents();
                if (parents.length > 0) {
                  expandVisible = parents.every(function(node) {
                    return node.isExpanded();
                  });
                }
                visible = expandVisible && filterVisible;
              } else {
                visible = false;
              }
              return visible;
            }
          }, {
            key: "isDisabled",
            value: function isDisabled() {
              if (this.vmIsLocked)
                return true;
              var treeDisabled = get_1(this, "tree.config.disabled");
              return !!(treeDisabled || this.disabled);
            }
          }, {
            key: "isExpandMutex",
            value: function isExpandMutex() {
              return !!(get_1(this, "tree.config.expandMutex") || this.expandMutex);
            }
          }, {
            key: "isActivable",
            value: function isActivable() {
              return !!(get_1(this, "tree.config.activable") || this.activable);
            }
          }, {
            key: "isCheckable",
            value: function isCheckable() {
              return !!(get_1(this, "tree.config.checkable") || this.checkable);
            }
          }, {
            key: "isActived",
            value: function isActived(map) {
              var tree = this.tree, value = this.value;
              var activedMap = map || tree.activedMap;
              return !!(tree.nodeMap.get(value) && activedMap.get(value));
            }
          }, {
            key: "isExpanded",
            value: function isExpanded(map) {
              var tree = this.tree, value = this.value, vmIsLocked = this.vmIsLocked;
              if (vmIsLocked)
                return true;
              var expandedMap = map || tree.expandedMap;
              return !!(tree.nodeMap.get(value) && expandedMap.get(value));
            }
          }, {
            key: "isChecked",
            value: function isChecked(map) {
              var children = this.children, tree = this.tree;
              var checkStrictly = tree.config.checkStrictly;
              var checked = false;
              var checkedMap = map || tree.checkedMap;
              if (tree.nodeMap.get(this.value)) {
                if (checkedMap.get(this.value)) {
                  checked = true;
                } else if (Array.isArray(children) && children.length > 0 && !checkStrictly) {
                  checked = children.every(function(node) {
                    var childIsChecked = node.isChecked(checkedMap);
                    return childIsChecked;
                  });
                } else if (!checkStrictly) {
                  var parents = this.getParents();
                  checked = parents.some(function(node) {
                    return checkedMap.get(node.value);
                  });
                }
              }
              return !!checked;
            }
          }, {
            key: "isIndeterminate",
            value: function isIndeterminate() {
              var children = this.children, tree = this.tree;
              var checkStrictly = tree.config.checkStrictly;
              if (checkStrictly) {
                return false;
              }
              var indeterminate = false;
              if (Array.isArray(children)) {
                var childChecked = null;
                indeterminate = children.some(function(node) {
                  if (node.isIndeterminate()) {
                    return true;
                  }
                  if (childChecked === null) {
                    childChecked = node.isChecked();
                  }
                  if (childChecked !== node.isChecked()) {
                    return true;
                  }
                  return false;
                });
              }
              return indeterminate;
            }
          }, {
            key: "isFirst",
            value: function isFirst() {
              var siblings = this.getSiblings();
              return siblings[0] === this;
            }
          }, {
            key: "isLast",
            value: function isLast() {
              var siblings = this.getSiblings();
              return siblings[siblings.length - 1] === this;
            }
          }, {
            key: "isLeaf",
            value: function isLeaf() {
              var isLeaf2 = false;
              if (Array.isArray(this.children)) {
                isLeaf2 = this.children.length <= 0;
              } else {
                isLeaf2 = !this.children;
              }
              return isLeaf2;
            }
          }, {
            key: "lock",
            value: function lock(lockState) {
              this.vmIsLocked = lockState;
              this.expanded = this.isExpanded();
              this.visible = this.isVisible();
            }
          }, {
            key: "afterExpanded",
            value: function afterExpanded() {
              this.update();
              if (this.expanded && this.children === true) {
                this.loadChildren();
              }
            }
          }, {
            key: "toggleExpanded",
            value: function toggleExpanded() {
              return this.setExpanded(!this.isExpanded());
            }
          }, {
            key: "setExpanded",
            value: function setExpanded(expanded, opts) {
              var tree = this.tree;
              var options = _objectSpread$1e({
                directly: false
              }, opts);
              var map = tree.expandedMap;
              if (!options.directly) {
                map = new Map(tree.expandedMap);
              }
              if (expanded) {
                var shouldExpandNodes = [];
                shouldExpandNodes.push(this);
                if (get_1(tree, "config.expandParent")) {
                  this.getParents().forEach(function(node) {
                    shouldExpandNodes.push(node);
                  });
                }
                shouldExpandNodes.forEach(function(node) {
                  var isExpandMutex = false;
                  if (node.parent) {
                    isExpandMutex = node.parent.isExpandMutex();
                  } else {
                    var _tree$config;
                    isExpandMutex = tree === null || tree === void 0 ? void 0 : (_tree$config = tree.config) === null || _tree$config === void 0 ? void 0 : _tree$config.expandMutex;
                  }
                  if (isExpandMutex) {
                    var siblings = node.getSiblings();
                    siblings.forEach(function(snode) {
                      map["delete"](snode.value);
                    });
                  }
                  map.set(node.value, true);
                });
              } else {
                map["delete"](this.value);
              }
              if (options.directly) {
                this.afterExpanded();
                this.update();
                this.updateChildren();
              }
              return tree.getExpanded(map);
            }
          }, {
            key: "toggleActived",
            value: function toggleActived() {
              return this.setActived(!this.isActived());
            }
          }, {
            key: "setActived",
            value: function setActived(actived, opts) {
              var tree = this.tree;
              var options = _objectSpread$1e({
                directly: false
              }, opts);
              var config = tree.config || {};
              var map = tree.activedMap;
              if (!options.directly) {
                map = new Map(tree.activedMap);
              }
              if (this.isActivable()) {
                if (actived) {
                  if (!config.activeMultiple) {
                    map.clear();
                  }
                  map.set(this.value, true);
                } else {
                  map["delete"](this.value);
                }
              }
              if (options.directly) {
                this.update();
              }
              return tree.getActived(map);
            }
          }, {
            key: "toggleChecked",
            value: function toggleChecked() {
              return this.setChecked(!this.isChecked());
            }
          }, {
            key: "setChecked",
            value: function setChecked(checked, opts) {
              var tree = this.tree;
              var config = tree.config || {};
              var options = _objectSpread$1e({
                directly: false
              }, opts);
              var map = tree.checkedMap;
              if (!options.directly) {
                map = new Map(tree.checkedMap);
              }
              if (this.isCheckable() && checked !== this.isChecked()) {
                if (config.checkStrictly) {
                  if (checked) {
                    map.set(this.value, true);
                  } else {
                    map["delete"](this.value);
                  }
                } else {
                  var children = this.walk();
                  children.forEach(function(node) {
                    if (checked) {
                      map.set(node.value, true);
                    } else {
                      map["delete"](node.value);
                    }
                  });
                  var parents = this.getParents();
                  parents.forEach(function(node) {
                    map["delete"](node.value);
                  });
                }
              }
              if (options.directly) {
                if (config.checkStrictly) {
                  this.updateChecked();
                } else {
                  var relatedNodes = tree.getRelatedNodes([this.value]);
                  relatedNodes.forEach(function(node) {
                    node.updateChecked();
                  });
                }
              }
              return tree.getChecked(map);
            }
          }, {
            key: "update",
            value: function update() {
              this.level = this.getLevel();
              this.actived = this.isActived();
              this.expanded = this.isExpanded();
              this.vmCheckable = this.isCheckable();
              this.visible = this.isVisible();
              this.vmIsRest = this.isRest();
              this.vmIsFirst = this.isFirst();
              this.vmIsLast = this.isLast();
              this.vmIsLeaf = this.isLeaf();
              this.tree.updated(this);
            }
          }, {
            key: "updateChecked",
            value: function updateChecked() {
              var tree = this.tree;
              this.vmCheckable = this.isCheckable();
              if (this.vmCheckable && !this.disabled) {
                this.checked = this.isChecked();
                if (this.checked) {
                  tree.checkedMap.set(this.value, true);
                }
                this.indeterminate = this.isIndeterminate();
                tree.updated(this);
              }
            }
          }, {
            key: "updateChildren",
            value: function updateChildren() {
              var children = this.children;
              if (Array.isArray(children)) {
                children.forEach(function(node) {
                  node.update();
                  node.updateChecked();
                  node.updateChildren();
                });
              }
            }
          }, {
            key: "updateParents",
            value: function updateParents() {
              var parent2 = this.parent;
              if (parent2) {
                parent2.update();
                parent2.updateChecked();
                parent2.updateParents();
              }
            }
          }, {
            key: "updateRelated",
            value: function updateRelated() {
              var tree = this.tree;
              var relatedNodes = tree.getRelatedNodes([this.value]);
              relatedNodes.forEach(function(node) {
                node.update();
                node.updateChecked();
              });
              tree.reflow();
            }
          }, {
            key: "walk",
            value: function walk3() {
              var children = this.children;
              var list = [];
              list.push(this);
              if (Array.isArray(children) && children.length > 0) {
                children.forEach(function(node) {
                  list = list.concat(node.walk());
                });
              }
              return list;
            }
          }, {
            key: "getModel",
            value: function getModel() {
              var model = this.model;
              if (!model) {
                model = createNodeModel(this);
                this.model = model;
              }
              updateNodeModel(model, this);
              return model;
            }
          }]);
          return TreeNode2;
        }();
        function ownKeys$1e(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1d(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1e(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1e(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var TreeStore = /* @__PURE__ */ function() {
          function TreeStore2(options) {
            _classCallCheck(this, TreeStore2);
            _defineProperty$3(this, "children", void 0);
            _defineProperty$3(this, "nodes", void 0);
            _defineProperty$3(this, "nodeMap", void 0);
            _defineProperty$3(this, "config", void 0);
            _defineProperty$3(this, "activedMap", void 0);
            _defineProperty$3(this, "updatedMap", void 0);
            _defineProperty$3(this, "checkedMap", void 0);
            _defineProperty$3(this, "expandedMap", void 0);
            _defineProperty$3(this, "filterMap", void 0);
            _defineProperty$3(this, "updateTimer", void 0);
            _defineProperty$3(this, "shouldReflow", void 0);
            _defineProperty$3(this, "prevFilter", void 0);
            var config = _objectSpread$1d({
              prefix: "t",
              keys: {},
              expandAll: false,
              expandLevel: 0,
              expandMutex: false,
              expandParent: false,
              activable: false,
              activeMultiple: false,
              checkable: false,
              checkStrictly: false,
              disabled: false,
              load: null,
              lazy: false,
              valueMode: "onlyLeaf",
              filter: null,
              onLoad: null,
              onReflow: null,
              onUpdate: null,
              allowFoldNodeOnFilter: false
            }, options);
            this.config = config;
            this.nodes = [];
            this.children = [];
            this.nodeMap = /* @__PURE__ */ new Map();
            this.activedMap = /* @__PURE__ */ new Map();
            this.expandedMap = /* @__PURE__ */ new Map();
            this.checkedMap = /* @__PURE__ */ new Map();
            this.updatedMap = /* @__PURE__ */ new Map();
            this.filterMap = /* @__PURE__ */ new Map();
            this.prevFilter = null;
            this.updateTimer = null;
            this.shouldReflow = false;
          }
          _createClass(TreeStore2, [{
            key: "setConfig",
            value: function setConfig(options) {
              var _this = this;
              var hasChanged = false;
              Object.keys(options).forEach(function(key) {
                var val = options[key];
                if (val !== _this.config[key]) {
                  hasChanged = true;
                  _this.config[key] = val;
                }
              });
              if (hasChanged) {
                this.refreshState();
              }
            }
          }, {
            key: "getChildren",
            value: function getChildren() {
              return this.children;
            }
          }, {
            key: "getNode",
            value: function getNode2(item) {
              var node = null;
              if (typeof item === "string" || typeof item === "number") {
                node = this.nodeMap.get(item);
              } else if (item instanceof TreeNode) {
                node = this.nodeMap.get(item.value);
              }
              return node;
            }
          }, {
            key: "getIndex",
            value: function getIndex(node) {
              return this.nodes.indexOf(node);
            }
          }, {
            key: "getParent",
            value: function getParent(value) {
              var parent2 = null;
              var node = this.getNode(value);
              if (node) {
                parent2 = node.getParent();
              }
              return parent2;
            }
          }, {
            key: "getParents",
            value: function getParents(value) {
              var node = this.getNode(value);
              var parents = [];
              if (node) {
                parents = node.getParents();
              }
              return parents;
            }
          }, {
            key: "getNodeIndex",
            value: function getNodeIndex(value) {
              var node = this.getNode(value);
              var index2 = -1;
              if (node) {
                index2 = node.getIndex();
              }
              return index2;
            }
          }, {
            key: "getNodes",
            value: function getNodes(item, options) {
              var nodes = [];
              var val = "";
              if (typeof item === "string" || typeof item === "number") {
                val = item;
              } else if (item instanceof TreeNode) {
                val = item.value;
              }
              if (!val) {
                nodes = this.nodes.slice(0);
              } else {
                var node = this.getNode(val);
                if (node) {
                  nodes = node.walk();
                }
              }
              if (options) {
                var conf = _objectSpread$1d({
                  filter: null,
                  level: Infinity
                }, options);
                if (typeof conf.level === "number" && conf.level !== Infinity) {
                  nodes = nodes.filter(function(node2) {
                    return node2.level <= conf.level;
                  });
                }
                if (typeof conf.filter === "function") {
                  nodes = nodes.filter(function(node2) {
                    var nodeModel = node2.getModel();
                    return conf.filter(nodeModel);
                  });
                }
                if (isPlainObject_1(conf.props)) {
                  nodes = nodes.filter(function(node2) {
                    var result = Object.keys(conf.props).every(function(key) {
                      var propEqual = node2[key] === conf.props[key];
                      return propEqual;
                    });
                    return result;
                  });
                }
              }
              return nodes;
            }
          }, {
            key: "append",
            value: function append(list) {
              var _this2 = this;
              list.forEach(function(item) {
                var node = new TreeNode(_this2, item);
                _this2.children.push(node);
              });
              this.reflow();
            }
          }, {
            key: "reload",
            value: function reload(list) {
              this.expandedMap.clear();
              this.checkedMap.clear();
              this.activedMap.clear();
              this.filterMap.clear();
              this.removeAll();
              this.append(list);
            }
          }, {
            key: "parseNodeData",
            value: function parseNodeData(para, item) {
              var value = "";
              var node = null;
              var data = null;
              if (typeof para === "string" || typeof para === "number") {
                value = para;
                data = item;
                node = this.getNode(value);
              } else if (para instanceof TreeNode) {
                node = para;
                data = item;
              } else {
                data = para;
              }
              var spec = {
                node,
                data
              };
              return spec;
            }
          }, {
            key: "appendNodes",
            value: function appendNodes(para, item) {
              var spec = this.parseNodeData(para, item);
              if (spec.data) {
                if (!spec.node) {
                  if (spec.data instanceof TreeNode) {
                    spec.data.appendTo(this);
                  } else if (Array.isArray(spec.data)) {
                    this.append(spec.data);
                  } else {
                    this.append([spec.data]);
                  }
                } else {
                  if (spec.data instanceof TreeNode) {
                    spec.data.appendTo(this, spec.node);
                  } else if (Array.isArray(spec.data)) {
                    spec.node.append(spec.data);
                  } else {
                    spec.node.append([spec.data]);
                  }
                  spec.node.updateRelated();
                }
              }
            }
          }, {
            key: "insertBefore",
            value: function insertBefore(value, item) {
              var node = this.getNode(value);
              if (node) {
                node.insertBefore(item);
              }
            }
          }, {
            key: "insertAfter",
            value: function insertAfter(value, item) {
              var node = this.getNode(value);
              if (node) {
                node.insertAfter(item);
              }
            }
          }, {
            key: "refreshNodes",
            value: function refreshNodes() {
              var children = this.children, nodes = this.nodes;
              nodes.length = 0;
              children.forEach(function(node) {
                var list = node.walk();
                Array.prototype.push.apply(nodes, list);
              });
            }
          }, {
            key: "refreshState",
            value: function refreshState() {
              var nodes = this.nodes;
              nodes.forEach(function(node) {
                node.update();
                node.updateChecked();
              });
            }
          }, {
            key: "reflow",
            value: function reflow(node) {
              this.shouldReflow = true;
              this.updated(node);
            }
          }, {
            key: "updated",
            value: function updated(node) {
              var _this3 = this;
              if (node !== null && node !== void 0 && node.value) {
                this.updatedMap.set(node.value, true);
              }
              if (this.updateTimer)
                return;
              this.updateTimer = +setTimeout(function() {
                var _this3$config;
                clearTimeout(_this3.updateTimer);
                _this3.updateTimer = null;
                if (_this3.shouldReflow) {
                  _this3.refreshNodes();
                  _this3.emit("reflow");
                }
                if (!((_this3$config = _this3.config) !== null && _this3$config !== void 0 && _this3$config.allowFoldNodeOnFilter))
                  _this3.lockFilterPathNodes();
                var updatedList = Array.from(_this3.updatedMap.keys());
                if (updatedList.length > 0) {
                  var updatedNodes = updatedList.map(function(value) {
                    return _this3.getNode(value);
                  });
                  _this3.emit("update", {
                    nodes: updatedNodes,
                    map: _this3.updatedMap
                  });
                } else if (_this3.shouldReflow) {
                  _this3.emit("update", {
                    nodes: [],
                    map: _this3.updatedMap
                  });
                }
                _this3.shouldReflow = false;
                _this3.updatedMap.clear();
              });
            }
          }, {
            key: "getActived",
            value: function getActived(map) {
              var activedMap = map || this.activedMap;
              return Array.from(activedMap.keys());
            }
          }, {
            key: "getActivedNodes",
            value: function getActivedNodes(item) {
              var nodes = this.getNodes(item);
              nodes = nodes.filter(function(node) {
                return node.isActived();
              });
              return nodes;
            }
          }, {
            key: "replaceActived",
            value: function replaceActived(list) {
              this.resetActived();
              this.setActived(list);
            }
          }, {
            key: "setActived",
            value: function setActived(actived) {
              var _this4 = this;
              var activeMultiple = this.config.activeMultiple;
              var list = actived.slice(0);
              if (!activeMultiple) {
                list.length = 1;
              }
              list.forEach(function(val) {
                _this4.activedMap.set(val, true);
                var node = _this4.getNode(val);
                if (node) {
                  node.update();
                }
              });
            }
          }, {
            key: "resetActived",
            value: function resetActived() {
              var actived = this.getActived();
              this.activedMap.clear();
              var relatedNodes = this.getRelatedNodes(actived);
              relatedNodes.forEach(function(node) {
                node.update();
              });
            }
          }, {
            key: "getExpanded",
            value: function getExpanded(map) {
              var expandedMap = map || this.expandedMap;
              return Array.from(expandedMap.keys());
            }
          }, {
            key: "replaceExpanded",
            value: function replaceExpanded(list) {
              var expanded = this.getExpanded();
              var added = difference_1(list, expanded);
              var removed = difference_1(expanded, list);
              this.setExpandedDirectly(removed, false);
              this.updateExpanded(removed);
              this.setExpanded(added);
            }
          }, {
            key: "setExpanded",
            value: function setExpanded(list) {
              this.setExpandedDirectly(list);
              this.updateExpanded(list);
            }
          }, {
            key: "setExpandedDirectly",
            value: function setExpandedDirectly(list) {
              var _this5 = this;
              var expanded = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
              list.forEach(function(val) {
                if (expanded) {
                  _this5.expandedMap.set(val, true);
                  var node = _this5.getNode(val);
                  if (node) {
                    node.afterExpanded();
                  }
                } else {
                  _this5.expandedMap["delete"](val);
                }
              });
            }
          }, {
            key: "resetExpanded",
            value: function resetExpanded() {
              var expanded = this.getExpanded();
              this.expandedMap.clear();
              this.updateExpanded(expanded);
            }
          }, {
            key: "updateExpanded",
            value: function updateExpanded(list) {
              var relatedNodes = this.getRelatedNodes(list, {
                withParents: false
              });
              relatedNodes.forEach(function(node) {
                node.update();
              });
            }
          }, {
            key: "getChecked",
            value: function getChecked(map) {
              var nodes = this.nodes, config = this.config;
              var valueMode = config.valueMode, checkStrictly = config.checkStrictly;
              var list = [];
              var checkedMap = map || this.checkedMap;
              nodes.forEach(function(node) {
                if (node.isChecked(checkedMap)) {
                  if (valueMode === "parentFirst" && !checkStrictly) {
                    if (!node.parent || !node.parent.isChecked(checkedMap)) {
                      list.push(node.value);
                    }
                  } else if (valueMode === "onlyLeaf" && !checkStrictly) {
                    if (node.isLeaf()) {
                      list.push(node.value);
                    }
                  } else {
                    list.push(node.value);
                  }
                }
              });
              return list;
            }
          }, {
            key: "getCheckedNodes",
            value: function getCheckedNodes(item) {
              var nodes = this.getNodes(item);
              nodes = nodes.filter(function(node) {
                return node.isChecked();
              });
              return nodes;
            }
          }, {
            key: "replaceChecked",
            value: function replaceChecked(list) {
              this.resetChecked();
              this.setChecked(list);
            }
          }, {
            key: "setChecked",
            value: function setChecked(list) {
              var _this6 = this;
              var _this$config = this.config, valueMode = _this$config.valueMode, checkStrictly = _this$config.checkStrictly, checkable = _this$config.checkable;
              if (!checkable)
                return;
              list.forEach(function(val) {
                var node = _this6.getNode(val);
                if (node) {
                  if (valueMode === "parentFirst" && !checkStrictly) {
                    var childrenNodes = node.walk();
                    childrenNodes.forEach(function(childNode) {
                      _this6.checkedMap.set(childNode.value, true);
                    });
                  } else {
                    _this6.checkedMap.set(val, true);
                    node.updateChecked();
                  }
                }
              });
              if (!checkStrictly) {
                var checked = this.getChecked();
                var relatedNodes = this.getRelatedNodes(checked);
                relatedNodes.forEach(function(node) {
                  node.updateChecked();
                });
              }
            }
          }, {
            key: "resetChecked",
            value: function resetChecked() {
              var checked = this.getChecked();
              var relatedNodes = this.getRelatedNodes(checked);
              this.checkedMap.clear();
              relatedNodes.forEach(function(node) {
                node.updateChecked();
              });
            }
          }, {
            key: "updateAll",
            value: function updateAll() {
              var nodes = this.getNodes();
              nodes.forEach(function(node) {
                node.update();
              });
            }
          }, {
            key: "remove",
            value: function remove2(value) {
              var node = this.getNode(value);
              if (node) {
                node.remove();
              }
            }
          }, {
            key: "removeAll",
            value: function removeAll() {
              var nodes = this.getNodes();
              nodes.forEach(function(node) {
                node.remove();
              });
            }
          }, {
            key: "getRelatedNodes",
            value: function getRelatedNodes(list, options) {
              var _this7 = this;
              var conf = _objectSpread$1d({
                withParents: true
              }, options);
              var map = /* @__PURE__ */ new Map();
              list.forEach(function(value) {
                if (map.get(value))
                  return;
                var node = _this7.getNode(value);
                if (node) {
                  var parents = node.getParents();
                  var children = node.walk();
                  var related = [];
                  if (conf.withParents) {
                    related = parents.concat(children);
                  } else {
                    related = children;
                  }
                  related.forEach(function(relatedNode) {
                    map.set(relatedNode.value, relatedNode);
                  });
                }
              });
              var relatedNodes = Array.from(map.values());
              return relatedNodes;
            }
          }, {
            key: "emit",
            value: function emit(name, state) {
              var config = this.config || {};
              var methodName = camelCase_1("on-".concat(name));
              var method = config[methodName];
              if (typeof method === "function") {
                method(state);
              }
            }
          }, {
            key: "lockFilterPathNodes",
            value: function lockFilterPathNodes() {
              var _this8 = this;
              var config = this.config;
              var allNodes = this.getNodes();
              if (this.prevFilter) {
                allNodes.forEach(function(node) {
                  node.lock(false);
                });
              }
              if (!config.filter) {
                return;
              }
              this.prevFilter = config.filter;
              var map = /* @__PURE__ */ new Map();
              allNodes.reverse().forEach(function(item) {
                var node = item;
                var parent2 = node.getParent();
                if (node.vmIsRest) {
                  if (parent2) {
                    parent2.expanded = true;
                  }
                  node.visible = true;
                }
                if (node.vmIsRest || map.get(node.value)) {
                  if (parent2 && !parent2.vmIsRest) {
                    map.set(parent2.value, true);
                  }
                }
              });
              var filterPathValues = Array.from(map.keys());
              filterPathValues.forEach(function(value) {
                var node = _this8.getNode(value);
                if (node) {
                  node.lock(true);
                }
              });
            }
          }]);
          return TreeStore2;
        }();
        function ownKeys$1d(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1c(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1d(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1d(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var useContext = function useContext2(props2, setInnerValue, innerPopupVisible, setPopupVisible) {
          var statusContext = vue.reactive({
            treeStore: null,
            inputVal: null,
            scopeVal: void 0,
            treeNodes: [],
            expend: []
          });
          return {
            statusContext,
            cascaderContext: vue.computed(function() {
              var size = props2.size, checkStrictly = props2.checkStrictly, lazy = props2.lazy, multiple = props2.multiple, filterable = props2.filterable, clearable = props2.clearable, checkProps = props2.checkProps, max2 = props2.max, disabled = props2.disabled, showAllLevels = props2.showAllLevels, minCollapsedNum = props2.minCollapsedNum, loading = props2.loading, valueType = props2.valueType;
              return _objectSpread$1c(_objectSpread$1c({
                value: statusContext.scopeVal,
                size,
                checkStrictly,
                lazy,
                multiple,
                filterable,
                clearable,
                checkProps,
                max: max2,
                disabled,
                showAllLevels,
                minCollapsedNum,
                loading,
                valueType,
                visible: innerPopupVisible.value
              }, statusContext), {}, {
                setTreeNodes: function setTreeNodes(nodes) {
                  statusContext.treeNodes = nodes;
                },
                setValue: function setValue(val, source, node) {
                  if (isEqual_1(val, statusContext.scopeVal))
                    return;
                  setInnerValue(val, {
                    source,
                    node
                  });
                },
                setVisible: setPopupVisible,
                setInputVal: function setInputVal(val) {
                  statusContext.inputVal = val;
                },
                setExpend: function setExpend(val) {
                  statusContext.expend = val;
                }
              });
            })
          };
        };
        var useCascaderContext = function useCascaderContext2(props2) {
          var disabled = useFormDisabled();
          var _toRefs = vue.toRefs(props2), value = _toRefs.value, modelValue = _toRefs.modelValue, popupVisible = _toRefs.popupVisible;
          var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerValue = _useVModel2[0], setInnerValue = _useVModel2[1];
          var _useDefaultValue = useDefaultValue(popupVisible, false, props2.onPopupVisibleChange, "popupVisible"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2), innerPopupVisible = _useDefaultValue2[0], setPopupVisible = _useDefaultValue2[1];
          var _useContext = useContext(props2, setInnerValue, innerPopupVisible, setPopupVisible), cascaderContext = _useContext.cascaderContext, statusContext = _useContext.statusContext;
          var updatedTreeNodes = function updatedTreeNodes2() {
            var _cascaderContext$valu = cascaderContext.value, inputVal = _cascaderContext$valu.inputVal, treeStore = _cascaderContext$valu.treeStore, setTreeNodes = _cascaderContext$valu.setTreeNodes;
            treeNodesEffect(inputVal, treeStore, setTreeNodes);
          };
          var updateExpend = function updateExpend2() {
            var _cascaderContext$valu2 = cascaderContext.value, value2 = _cascaderContext$valu2.value, treeStore = _cascaderContext$valu2.treeStore;
            var expend = statusContext.expend;
            treeStoreExpendEffect(treeStore, value2, expend);
            treeStore.replaceChecked(getTreeValue(value2));
          };
          vue.watch(function() {
            return props2.options;
          }, function() {
            var options = props2.options, _props$keys = props2.keys, keys2 = _props$keys === void 0 ? {} : _props$keys, checkStrictly = props2.checkStrictly;
            var treeStore = statusContext.treeStore;
            if (!options.length && !treeStore)
              return;
            if (!treeStore) {
              var treeStore2 = new TreeStore({
                keys: _objectSpread$1c(_objectSpread$1c({}, keys2), {}, {
                  children: typeof keys2.children === "string" ? keys2.children : "children"
                }),
                checkable: true,
                expandMutex: true,
                expandParent: true,
                checkStrictly,
                onLoad: function onLoad() {
                  vue.nextTick(function() {
                    treeStore2.refreshNodes();
                    updatedTreeNodes();
                  });
                }
              });
              treeStore2.append(options);
              statusContext.treeStore = treeStore2;
            } else {
              treeStore.reload(options);
              treeStore.refreshNodes();
            }
            updateExpend();
            updatedTreeNodes();
          }, {
            immediate: true
          });
          vue.watch(function() {
            var checkStrictly = props2.checkStrictly, lazy = props2.lazy, load = props2.load, valueMode = props2.valueMode;
            return JSON.stringify({
              valueMode,
              checkStrictly,
              lazy,
              load
            });
          }, function() {
            var treeStore = statusContext.treeStore;
            if (!treeStore)
              return;
            var checkStrictly = props2.checkStrictly, lazy = props2.lazy, load = props2.load, valueMode = props2.valueMode;
            var treeProps = {
              checkStrictly,
              disabled,
              load,
              lazy,
              valueMode
            };
            treeStore.setConfig(treeProps);
          }, {
            immediate: true
          });
          vue.watch(innerValue, function() {
            var _cascaderContext$valu3 = cascaderContext.value, setValue = _cascaderContext$valu3.setValue, multiple = _cascaderContext$valu3.multiple, valueType = _cascaderContext$valu3.valueType;
            if (isValueInvalid(innerValue.value, cascaderContext.value)) {
              setValue(multiple ? [] : "", "invalid-value");
              console.warn("TDesign Cascader Warn:", "cascader props value invalid, v-model automatic calibration");
            }
            if (!isEmptyValues(innerValue)) {
              statusContext.scopeVal = getCascaderValue(innerValue.value, valueType, multiple);
            }
            if (!statusContext.treeStore)
              return;
            updateExpend();
            updatedTreeNodes();
          }, {
            immediate: true
          });
          vue.watch(function() {
            return innerPopupVisible.value && props2.filterable;
          }, function(visible) {
            var setInputVal = cascaderContext.value.setInputVal;
            if (visible) {
              setInputVal("");
            }
          });
          vue.watch(function() {
            return statusContext.inputVal;
          }, function() {
            updatedTreeNodes();
          });
          return {
            setInnerValue,
            cascaderContext
          };
        };
        function ownKeys$1c(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1b(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1c(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1c(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _Cascader = vue.defineComponent({
          name: "TCascader",
          props: _objectSpread$1b({}, props$A),
          setup: function setup(props2, _ref) {
            var slots = _ref.slots;
            var disabled = useFormDisabled();
            var COMPONENT_NAME2 = usePrefixClass("cascader");
            var classPrefix2 = usePrefixClass();
            var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
            var overlayClassName = usePrefixClass("cascader__popup");
            var _useConfig = useConfig("cascader"), global2 = _useConfig.global;
            var _useCascaderContext = useCascaderContext(props2), cascaderContext = _useCascaderContext.cascaderContext;
            var displayValue = vue.computed(function() {
              return props2.multiple ? getMultipleContent(cascaderContext.value) : getSingleContent(cascaderContext.value);
            });
            var panels = vue.computed(function() {
              return getPanels(cascaderContext.value.treeNodes);
            });
            var inputPlaceholder = vue.computed(function() {
              return cascaderContext.value.visible && !props2.multiple && getSingleContent(cascaderContext.value) || global2.value.placeholder;
            });
            var renderSuffixIcon = function renderSuffixIcon2() {
              var _cascaderContext$valu = cascaderContext.value, visible = _cascaderContext$valu.visible, disabled2 = _cascaderContext$valu.disabled;
              return vue.createVNode(FakeArrow, {
                "overlayClassName": getFakeArrowIconClass(classPrefix2.value, STATUS.value, cascaderContext.value),
                "isActive": visible,
                "disabled": disabled2
              }, null);
            };
            return function() {
              var _cascaderContext$valu2 = cascaderContext.value, setVisible = _cascaderContext$valu2.setVisible, visible = _cascaderContext$valu2.visible, inputVal = _cascaderContext$valu2.inputVal, setInputVal = _cascaderContext$valu2.setInputVal;
              return vue.createVNode(SelectInput, vue.mergeProps({
                "class": COMPONENT_NAME2.value,
                "value": displayValue.value,
                "inputValue": visible ? inputVal : "",
                "popupVisible": visible,
                "keys": props2.keys,
                "allowInput": visible && props2.filterable,
                "min-collapsed-num": props2.minCollapsedNum,
                "collapsed-items": props2.collapsedItems,
                "readonly": props2.readonly,
                "disabled": props2.disabled,
                "clearable": props2.clearable,
                "placeholder": inputPlaceholder.value,
                "multiple": props2.multiple,
                "loading": props2.loading,
                "overlayClassName": overlayClassName.value,
                "suffixIcon": function suffixIcon() {
                  return renderSuffixIcon();
                },
                "popup-props": panels.value.length ? {
                  overlayStyle: {
                    width: "auto"
                  }
                } : {},
                "popupProps": props2.popupProps,
                "inputProps": {
                  size: props2.size
                }
              }, props2.selectInputProps, {
                "onInputChange": function onInputChange(value) {
                  setInputVal(value);
                },
                "onTagChange": function onTagChange(val, ctx) {
                  handleRemoveTagEffect(cascaderContext.value, ctx.index, props2.onRemove);
                },
                "onPopupVisibleChange": function onPopupVisibleChange(val, context) {
                  if (disabled.value)
                    return;
                  setVisible(val, context);
                },
                "onClear": function onClear(_ref2) {
                  _ref2.e;
                  closeIconClickEffect(cascaderContext.value);
                }
              }, props2.selectInputProps), {
                panel: function panel() {
                  return vue.createVNode(Panel, {
                    "empty": props2.empty,
                    "visible": visible,
                    "trigger": props2.trigger,
                    "cascaderContext": cascaderContext.value
                  }, {
                    empty: slots.empty
                  });
                },
                collapsedItems: slots.collapsedItems
              });
            };
          }
        });
        var Cascader = withInstall(_Cascader);
        var dayjs_min = { exports: {} };
        (function(module2, exports3) {
          !function(t, e) {
            module2.exports = e();
          }(commonjsGlobal, function() {
            var t = 1e3, e = 6e4, n = 36e5, r = "millisecond", i2 = "second", s = "minute", u = "hour", a = "day", o = "week", f = "month", h = "quarter", c = "year", d = "date", $ = "Invalid Date", l = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = {
              name: "en",
              weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
              months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_")
            }, m = function m2(t2, e2, n2) {
              var r2 = String(t2);
              return !r2 || r2.length >= e2 ? t2 : "" + Array(e2 + 1 - r2.length).join(n2) + t2;
            }, g = {
              s: m,
              z: function z(t2) {
                var e2 = -t2.utcOffset(), n2 = Math.abs(e2), r2 = Math.floor(n2 / 60), i3 = n2 % 60;
                return (e2 <= 0 ? "+" : "-") + m(r2, 2, "0") + ":" + m(i3, 2, "0");
              },
              m: function t2(e2, n2) {
                if (e2.date() < n2.date())
                  return -t2(n2, e2);
                var r2 = 12 * (n2.year() - e2.year()) + (n2.month() - e2.month()), i3 = e2.clone().add(r2, f), s2 = n2 - i3 < 0, u2 = e2.clone().add(r2 + (s2 ? -1 : 1), f);
                return +(-(r2 + (n2 - i3) / (s2 ? i3 - u2 : u2 - i3)) || 0);
              },
              a: function a2(t2) {
                return t2 < 0 ? Math.ceil(t2) || 0 : Math.floor(t2);
              },
              p: function p2(t2) {
                return {
                  M: f,
                  y: c,
                  w: o,
                  d: a,
                  D: d,
                  h: u,
                  m: s,
                  s: i2,
                  ms: r,
                  Q: h
                }[t2] || String(t2 || "").toLowerCase().replace(/s$/, "");
              },
              u: function u2(t2) {
                return void 0 === t2;
              }
            }, v = "en", D = {};
            D[v] = M;
            var p = function p2(t2) {
              return t2 instanceof _;
            }, S = function t2(e2, n2, r2) {
              var i3;
              if (!e2)
                return v;
              if ("string" == typeof e2) {
                var s2 = e2.toLowerCase();
                D[s2] && (i3 = s2), n2 && (D[s2] = n2, i3 = s2);
                var u2 = e2.split("-");
                if (!i3 && u2.length > 1)
                  return t2(u2[0]);
              } else {
                var a2 = e2.name;
                D[a2] = e2, i3 = a2;
              }
              return !r2 && i3 && (v = i3), i3 || !r2 && v;
            }, w = function w2(t2, e2) {
              if (p(t2))
                return t2.clone();
              var n2 = "object" == _typeof$2(e2) ? e2 : {};
              return n2.date = t2, n2.args = arguments, new _(n2);
            }, O = g;
            O.l = S, O.i = p, O.w = function(t2, e2) {
              return w(t2, {
                locale: e2.$L,
                utc: e2.$u,
                x: e2.$x,
                $offset: e2.$offset
              });
            };
            var _ = function() {
              function M2(t2) {
                this.$L = S(t2.locale, null, true), this.parse(t2);
              }
              var m2 = M2.prototype;
              return m2.parse = function(t2) {
                this.$d = function(t3) {
                  var e2 = t3.date, n2 = t3.utc;
                  if (null === e2)
                    return new Date(NaN);
                  if (O.u(e2))
                    return new Date();
                  if (e2 instanceof Date)
                    return new Date(e2);
                  if ("string" == typeof e2 && !/Z$/i.test(e2)) {
                    var r2 = e2.match(l);
                    if (r2) {
                      var i3 = r2[2] - 1 || 0, s2 = (r2[7] || "0").substring(0, 3);
                      return n2 ? new Date(Date.UTC(r2[1], i3, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2)) : new Date(r2[1], i3, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2);
                    }
                  }
                  return new Date(e2);
                }(t2), this.$x = t2.x || {}, this.init();
              }, m2.init = function() {
                var t2 = this.$d;
                this.$y = t2.getFullYear(), this.$M = t2.getMonth(), this.$D = t2.getDate(), this.$W = t2.getDay(), this.$H = t2.getHours(), this.$m = t2.getMinutes(), this.$s = t2.getSeconds(), this.$ms = t2.getMilliseconds();
              }, m2.$utils = function() {
                return O;
              }, m2.isValid = function() {
                return !(this.$d.toString() === $);
              }, m2.isSame = function(t2, e2) {
                var n2 = w(t2);
                return this.startOf(e2) <= n2 && n2 <= this.endOf(e2);
              }, m2.isAfter = function(t2, e2) {
                return w(t2) < this.startOf(e2);
              }, m2.isBefore = function(t2, e2) {
                return this.endOf(e2) < w(t2);
              }, m2.$g = function(t2, e2, n2) {
                return O.u(t2) ? this[e2] : this.set(n2, t2);
              }, m2.unix = function() {
                return Math.floor(this.valueOf() / 1e3);
              }, m2.valueOf = function() {
                return this.$d.getTime();
              }, m2.startOf = function(t2, e2) {
                var n2 = this, r2 = !!O.u(e2) || e2, h2 = O.p(t2), $2 = function $3(t3, e3) {
                  var i3 = O.w(n2.$u ? Date.UTC(n2.$y, e3, t3) : new Date(n2.$y, e3, t3), n2);
                  return r2 ? i3 : i3.endOf(a);
                }, l2 = function l3(t3, e3) {
                  return O.w(n2.toDate()[t3].apply(n2.toDate("s"), (r2 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e3)), n2);
                }, y2 = this.$W, M3 = this.$M, m3 = this.$D, g2 = "set" + (this.$u ? "UTC" : "");
                switch (h2) {
                  case c:
                    return r2 ? $2(1, 0) : $2(31, 11);
                  case f:
                    return r2 ? $2(1, M3) : $2(0, M3 + 1);
                  case o:
                    var v2 = this.$locale().weekStart || 0, D2 = (y2 < v2 ? y2 + 7 : y2) - v2;
                    return $2(r2 ? m3 - D2 : m3 + (6 - D2), M3);
                  case a:
                  case d:
                    return l2(g2 + "Hours", 0);
                  case u:
                    return l2(g2 + "Minutes", 1);
                  case s:
                    return l2(g2 + "Seconds", 2);
                  case i2:
                    return l2(g2 + "Milliseconds", 3);
                  default:
                    return this.clone();
                }
              }, m2.endOf = function(t2) {
                return this.startOf(t2, false);
              }, m2.$set = function(t2, e2) {
                var n2, o2 = O.p(t2), h2 = "set" + (this.$u ? "UTC" : ""), $2 = (n2 = {}, n2[a] = h2 + "Date", n2[d] = h2 + "Date", n2[f] = h2 + "Month", n2[c] = h2 + "FullYear", n2[u] = h2 + "Hours", n2[s] = h2 + "Minutes", n2[i2] = h2 + "Seconds", n2[r] = h2 + "Milliseconds", n2)[o2], l2 = o2 === a ? this.$D + (e2 - this.$W) : e2;
                if (o2 === f || o2 === c) {
                  var y2 = this.clone().set(d, 1);
                  y2.$d[$2](l2), y2.init(), this.$d = y2.set(d, Math.min(this.$D, y2.daysInMonth())).$d;
                } else
                  $2 && this.$d[$2](l2);
                return this.init(), this;
              }, m2.set = function(t2, e2) {
                return this.clone().$set(t2, e2);
              }, m2.get = function(t2) {
                return this[O.p(t2)]();
              }, m2.add = function(r2, h2) {
                var d2, $2 = this;
                r2 = Number(r2);
                var l2 = O.p(h2), y2 = function y3(t2) {
                  var e2 = w($2);
                  return O.w(e2.date(e2.date() + Math.round(t2 * r2)), $2);
                };
                if (l2 === f)
                  return this.set(f, this.$M + r2);
                if (l2 === c)
                  return this.set(c, this.$y + r2);
                if (l2 === a)
                  return y2(1);
                if (l2 === o)
                  return y2(7);
                var M3 = (d2 = {}, d2[s] = e, d2[u] = n, d2[i2] = t, d2)[l2] || 1, m3 = this.$d.getTime() + r2 * M3;
                return O.w(m3, this);
              }, m2.subtract = function(t2, e2) {
                return this.add(-1 * t2, e2);
              }, m2.format = function(t2) {
                var e2 = this, n2 = this.$locale();
                if (!this.isValid())
                  return n2.invalidDate || $;
                var r2 = t2 || "YYYY-MM-DDTHH:mm:ssZ", i3 = O.z(this), s2 = this.$H, u2 = this.$m, a2 = this.$M, o2 = n2.weekdays, f2 = n2.months, h2 = function h3(t3, n3, i4, s3) {
                  return t3 && (t3[n3] || t3(e2, r2)) || i4[n3].slice(0, s3);
                }, c2 = function c3(t3) {
                  return O.s(s2 % 12 || 12, t3, "0");
                }, d2 = n2.meridiem || function(t3, e3, n3) {
                  var r3 = t3 < 12 ? "AM" : "PM";
                  return n3 ? r3.toLowerCase() : r3;
                }, l2 = {
                  YY: String(this.$y).slice(-2),
                  YYYY: this.$y,
                  M: a2 + 1,
                  MM: O.s(a2 + 1, 2, "0"),
                  MMM: h2(n2.monthsShort, a2, f2, 3),
                  MMMM: h2(f2, a2),
                  D: this.$D,
                  DD: O.s(this.$D, 2, "0"),
                  d: String(this.$W),
                  dd: h2(n2.weekdaysMin, this.$W, o2, 2),
                  ddd: h2(n2.weekdaysShort, this.$W, o2, 3),
                  dddd: o2[this.$W],
                  H: String(s2),
                  HH: O.s(s2, 2, "0"),
                  h: c2(1),
                  hh: c2(2),
                  a: d2(s2, u2, true),
                  A: d2(s2, u2, false),
                  m: String(u2),
                  mm: O.s(u2, 2, "0"),
                  s: String(this.$s),
                  ss: O.s(this.$s, 2, "0"),
                  SSS: O.s(this.$ms, 3, "0"),
                  Z: i3
                };
                return r2.replace(y, function(t3, e3) {
                  return e3 || l2[t3] || i3.replace(":", "");
                });
              }, m2.utcOffset = function() {
                return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
              }, m2.diff = function(r2, d2, $2) {
                var l2, y2 = O.p(d2), M3 = w(r2), m3 = (M3.utcOffset() - this.utcOffset()) * e, g2 = this - M3, v2 = O.m(this, M3);
                return v2 = (l2 = {}, l2[c] = v2 / 12, l2[f] = v2, l2[h] = v2 / 3, l2[o] = (g2 - m3) / 6048e5, l2[a] = (g2 - m3) / 864e5, l2[u] = g2 / n, l2[s] = g2 / e, l2[i2] = g2 / t, l2)[y2] || g2, $2 ? v2 : O.a(v2);
              }, m2.daysInMonth = function() {
                return this.endOf(f).$D;
              }, m2.$locale = function() {
                return D[this.$L];
              }, m2.locale = function(t2, e2) {
                if (!t2)
                  return this.$L;
                var n2 = this.clone(), r2 = S(t2, e2, true);
                return r2 && (n2.$L = r2), n2;
              }, m2.clone = function() {
                return O.w(this.$d, this);
              }, m2.toDate = function() {
                return new Date(this.valueOf());
              }, m2.toJSON = function() {
                return this.isValid() ? this.toISOString() : null;
              }, m2.toISOString = function() {
                return this.$d.toISOString();
              }, m2.toString = function() {
                return this.$d.toUTCString();
              }, M2;
            }(), T = _.prototype;
            return w.prototype = T, [["$ms", r], ["$s", i2], ["$m", s], ["$H", u], ["$W", a], ["$M", f], ["$y", c], ["$D", d]].forEach(function(t2) {
              T[t2[1]] = function(e2) {
                return this.$g(e2, t2[0], t2[1]);
              };
            }), w.extend = function(t2, e2) {
              return t2.$i || (t2(e2, _, w), t2.$i = true), w;
            }, w.locale = S, w.isDayjs = p, w.unix = function(t2) {
              return w(1e3 * t2);
            }, w.en = D[v], w.Ls = D, w.p = {}, w;
          });
        })(dayjs_min);
        var dayjs = dayjs_min.exports;
        var isBetween$2 = { exports: {} };
        (function(module2, exports3) {
          !function(e, i2) {
            module2.exports = i2();
          }(commonjsGlobal, function() {
            return function(e, i2, t) {
              i2.prototype.isBetween = function(e2, i3, s, f) {
                var n = t(e2), o = t(i3), r = "(" === (f = f || "()")[0], u = ")" === f[1];
                return (r ? this.isAfter(n, s) : !this.isBefore(n, s)) && (u ? this.isBefore(o, s) : !this.isAfter(o, s)) || (r ? this.isBefore(n, s) : !this.isAfter(n, s)) && (u ? this.isAfter(o, s) : !this.isBefore(o, s));
              };
            };
          });
        })(isBetween$2);
        var isBetween$1 = isBetween$2.exports;
        var props$x = {
          allowInput: Boolean,
          clearable: Boolean,
          disabled: Boolean,
          disableDate: {
            type: [Object, Array, Function]
          },
          enableTimePicker: Boolean,
          firstDayOfWeek: {
            type: Number,
            validator: function validator(val) {
              return [1, 2, 3, 4, 5, 6, 7].includes(val);
            }
          },
          format: {
            type: String,
            "default": void 0
          },
          inputProps: {
            type: Object
          },
          mode: {
            type: String,
            "default": "month",
            validator: function validator(val) {
              return ["year", "month", "date"].includes(val);
            }
          },
          placeholder: {
            type: [String, Array],
            "default": void 0
          },
          popupProps: {
            type: Object
          },
          prefixIcon: {
            type: Function
          },
          presets: {
            type: Object
          },
          range: Boolean,
          size: {
            type: String,
            "default": "medium",
            validator: function validator(val) {
              return ["small", "medium", "large"].includes(val);
            }
          },
          suffixIcon: {
            type: Function
          },
          timePickerProps: Boolean,
          value: {
            type: [String, Array, Date]
          },
          modelValue: {
            type: [String, Array, Date]
          },
          defaultValue: {
            type: [String, Array, Date]
          },
          onBlur: Function,
          onChange: Function,
          onFocus: Function,
          onInput: Function,
          onPick: Function,
          onApply: Function
        };
        var TCalendarPresets = vue.defineComponent({
          name: "TCalendarPresets",
          components: {
            TButton: Button
          },
          props: {
            global: {
              type: Object
            },
            presets: {
              type: Object
            },
            onClick: Function
          },
          setup: function setup() {
            var COMPONENT_NAME2 = usePrefixClass("date-picker__presets");
            return {
              COMPONENT_NAME: COMPONENT_NAME2
            };
          },
          methods: {
            _isDate: function _isDate(obj) {
              return obj.$d instanceof Date && !isNaN(obj.valueOf());
            },
            clickPreset: function clickPreset(value) {
              var dateCheckResult = true;
              if (value instanceof Array) {
                for (var i2 = 0; i2 < value.length; i2++) {
                  if (!this._isDate(value[i2])) {
                    dateCheckResult = false;
                    break;
                  }
                }
              } else if (_typeof$2(value) === "object") {
                dateCheckResult = this._isDate(value);
              } else {
                dateCheckResult = false;
              }
              if (dateCheckResult) {
                this.onClick(value);
              } else {
                this.$message.info("\u65E5\u671F\u683C\u5F0F\u9519\u8BEF");
              }
            }
          },
          render: function render() {
            var _this = this;
            var presets = this.presets;
            return vue.createVNode("div", {
              "class": this.COMPONENT_NAME
            }, [vue.createVNode("ul", null, [presets && Object.keys(presets).map(function(key) {
              return vue.createVNode("li", {
                "key": key
              }, [vue.createVNode("a", {
                "onClick": function onClick() {
                  return _this.clickPreset(presets[key]);
                }
              }, [key])]);
            })])]);
          }
        });
        var TDateHeader = vue.defineComponent({
          name: "TDatePickerHeader",
          components: {
            TButton,
            RoundIcon: round$1,
            ChevronLeftIcon: chevronLeft,
            ChevronRightIcon: chevronRight
          },
          props: {
            year: Number,
            month: Number,
            type: {
              type: String,
              "default": "date",
              validator: function validator(v) {
                return ["year", "month", "date"].indexOf(v) > -1;
              }
            },
            onBtnClick: Function,
            onTypeChange: Function
          },
          setup: function setup() {
            var COMPONENT_NAME2 = usePrefixClass("date-picker__header");
            var _useConfig = useConfig("datePicker"), global2 = _useConfig.global;
            return {
              global: global2,
              COMPONENT_NAME: COMPONENT_NAME2
            };
          },
          render: function render() {
            var _this = this;
            var COMPONENT_NAME2 = this.COMPONENT_NAME;
            var _this$$props = this.$props, type = _this$$props.type, year = _this$$props.year, month = _this$$props.month, onBtnClick = _this$$props.onBtnClick, onTypeChange = _this$$props.onTypeChange;
            var startYear = parseInt((this.year / 10).toString(), 10) * 10;
            var _this$global = this.global, rangeSeparator = _this$global.rangeSeparator, yearAriaLabel = _this$global.yearAriaLabel, now2 = _this$global.now, preMonth = _this$global.preMonth, preYear = _this$global.preYear, nextMonth = _this$global.nextMonth, nextYear = _this$global.nextYear, preDecade = _this$global.preDecade, nextDecade = _this$global.nextDecade;
            var preLabel;
            var nextLabel;
            if (type === "year") {
              preLabel = preDecade;
              nextLabel = nextDecade;
            } else if (type === "date") {
              preLabel = preMonth;
              nextLabel = nextMonth;
            } else {
              preLabel = preYear;
              nextLabel = nextYear;
            }
            return vue.createVNode("div", {
              "class": COMPONENT_NAME2
            }, [vue.createVNode("span", {
              "class": "".concat(COMPONENT_NAME2, "-title")
            }, [type === "year" && vue.createVNode("span", null, [vue.createVNode("span", null, [startYear]), rangeSeparator, vue.createVNode("span", null, [startYear + 9])]), type !== "year" && vue.createVNode(vue.resolveComponent("t-button"), {
              "class": "".concat(COMPONENT_NAME2, "-btn"),
              "variant": "text",
              "size": "small",
              "onClick": function onClick() {
                return onTypeChange("year");
              }
            }, {
              "default": function _default() {
                return ["".concat(year, " ").concat(yearAriaLabel)];
              }
            }), type === "date" && vue.createVNode(vue.resolveComponent("t-button"), {
              "class": "".concat(COMPONENT_NAME2, "-btn"),
              "variant": "text",
              "size": "small",
              "onClick": function onClick() {
                return onTypeChange("month");
              }
            }, {
              "default": function _default() {
                return [_this.global.months[month]];
              }
            })]), vue.createVNode("span", {
              "class": "".concat(COMPONENT_NAME2, "-controller")
            }, [vue.createVNode(vue.resolveComponent("t-button"), {
              "class": "".concat(COMPONENT_NAME2, "-controller__btn"),
              "variant": "text",
              "onClick": function onClick() {
                return onBtnClick(-1);
              },
              "title": preLabel
            }, {
              icon: function icon() {
                return vue.createVNode(vue.resolveComponent("chevron-left-icon"), null, null);
              }
            }), vue.createVNode(vue.resolveComponent("t-button"), {
              "class": ["".concat(COMPONENT_NAME2, "-controller__btn"), "".concat(COMPONENT_NAME2, "-controller__btn--now")],
              "variant": "text",
              "onClick": function onClick() {
                return onBtnClick(0);
              },
              "title": now2
            }, {
              icon: function icon() {
                return vue.createVNode(vue.resolveComponent("round-icon"), null, null);
              }
            }), vue.createVNode(vue.resolveComponent("t-button"), {
              "class": "".concat(COMPONENT_NAME2, "-controller__btn"),
              "variant": "text",
              "onClick": function onClick() {
                return onBtnClick(1);
              },
              "title": nextLabel
            }, {
              icon: function icon() {
                return vue.createVNode(vue.resolveComponent("chevron-right-icon"), null, null);
              }
            })])]);
          }
        });
        var TDatePickerCell = vue.defineComponent({
          name: "TDatePickerCell",
          props: {
            text: [String, Number],
            value: Date,
            active: Boolean,
            highlight: Boolean,
            disabled: Boolean,
            startOfRange: Boolean,
            endOfRange: Boolean,
            additional: Boolean,
            now: Boolean,
            firstDayOfMonth: Boolean,
            lastDayOfMonth: Boolean,
            onClick: Function,
            onMouseEnter: {
              type: Function
            }
          },
          setup: function setup() {
            var COMPONENT_NAME2 = usePrefixClass("date-picker__cell");
            var name = usePrefixClass("date-picker-cell");
            return {
              name,
              COMPONENT_NAME: COMPONENT_NAME2
            };
          },
          render: function render() {
            var _ref;
            var name = this.name, COMPONENT_NAME2 = this.COMPONENT_NAME, text = this.text, value = this.value, active = this.active, highlight = this.highlight, disabled = this.disabled, startOfRange = this.startOfRange, endOfRange = this.endOfRange, additional = this.additional, now2 = this.now, firstDayOfMonth = this.firstDayOfMonth, lastDayOfMonth = this.lastDayOfMonth, _onClick = this.onClick, onMouseEnter = this.onMouseEnter;
            var cellClass = [name, (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--now"), now2), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--active"), active), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--disabled"), disabled), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--highlight"), highlight), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--active-start"), startOfRange), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--active-end"), endOfRange), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--additional"), additional), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--first-day-of-month"), firstDayOfMonth), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2, "--last-day-of-month"), lastDayOfMonth), _ref)];
            return vue.createVNode("td", {
              "class": cellClass
            }, [vue.createVNode("div", {
              "class": "".concat(COMPONENT_NAME2, "-wrapper"),
              "onClick": function onClick(e) {
                if (!disabled) {
                  _onClick(value, {
                    e
                  });
                }
              },
              "onMouseenter": function onMouseenter() {
                return onMouseEnter && onMouseEnter(value);
              }
            }, [vue.createVNode("span", {
              "class": "".concat(COMPONENT_NAME2, "-text")
            }, [text])])]);
          }
        });
        var DAY_NAMES = ["\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D", "\u65E5"];
        var TDateTable = vue.defineComponent({
          name: "TDatePickerTable",
          components: {
            TDatePickerCell
          },
          props: {
            type: {
              type: String,
              "default": "day"
            },
            data: Array,
            firstDayOfWeek: Number,
            dayNames: {
              type: Array,
              "default": function _default() {
                return DAY_NAMES;
              }
            },
            onCellClick: {
              type: Function
            },
            onCellMouseEnter: {
              type: Function
            }
          },
          setup: function setup() {
            var _useConfig = useConfig("datePicker"), global2 = _useConfig.global;
            return {
              global: global2
            };
          },
          render: function render() {
            var _this = this;
            var _this$$props = this.$props, type = _this$$props.type, data = _this$$props.data, onCellClick = _this$$props.onCellClick, onCellMouseEnter = _this$$props.onCellMouseEnter, firstDayOfWeek = _this$$props.firstDayOfWeek;
            var weekdays = this.global.weekdays;
            var weekArr = [];
            var wi = firstDayOfWeek - 1;
            var len = weekdays.length;
            while (weekArr.length < len) {
              weekArr.push(weekdays[wi]);
              wi = (wi + len + 1) % len;
            }
            var panelClass = "t-date-picker--".concat(type);
            return vue.createVNode("div", {
              "class": panelClass
            }, [vue.createVNode("table", null, [type === "date" && vue.createVNode("thead", null, [vue.createVNode("tr", null, [weekArr.map(function(value, i2) {
              return vue.createVNode("th", {
                "key": i2
              }, [value]);
            })])]), vue.createVNode("tbody", null, [data.map(function(row, i2) {
              return vue.createVNode("tr", {
                "key": i2
              }, [row.map(function(col, j) {
                return vue.createVNode(vue.resolveComponent("t-date-picker-cell"), vue.mergeProps(col, _this.$attrs, {
                  "key": j,
                  "onClick": onCellClick,
                  "onMouseEnter": onCellMouseEnter
                }), null);
              })]);
            })])])]);
          }
        });
        function _extends$1() {
          _extends$1 = Object.assign ? Object.assign.bind() : function(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return _extends$1.apply(this, arguments);
        }
        var toNumber$1 = toNumber_1;
        var INFINITY = 1 / 0, MAX_INTEGER = 17976931348623157e292;
        function toFinite$1(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber$1(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        var toFinite_1 = toFinite$1;
        var toFinite = toFinite_1;
        function toInteger$2(value) {
          var result = toFinite(value), remainder = result % 1;
          return result === result ? remainder ? result - remainder : result : 0;
        }
        var toInteger_1 = toInteger$2;
        var baseSlice$1 = _baseSlice, isIterateeCall$1 = _isIterateeCall, toInteger$1 = toInteger_1;
        var nativeCeil = Math.ceil, nativeMax$1 = Math.max;
        function chunk(array, size, guard) {
          if (guard ? isIterateeCall$1(array, size, guard) : size === void 0) {
            size = 1;
          } else {
            size = nativeMax$1(toInteger$1(size), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size < 1) {
            return [];
          }
          var index2 = 0, resIndex = 0, result = Array(nativeCeil(length / size));
          while (index2 < length) {
            result[resIndex++] = baseSlice$1(array, index2, index2 += size);
          }
          return result;
        }
        var chunk_1 = chunk;
        function firstUpperCase(str) {
          if (!str)
            return str;
          return str[0].toUpperCase().concat(str.substring(1, str.length));
        }
        function getFirstDayOfMonth(_ref) {
          var year = _ref.year, month = _ref.month;
          return new Date(year, month, 1);
        }
        function getDaysInMonth(_ref2) {
          var year = _ref2.year, month = _ref2.month;
          return new Date(year, month + 1, 0).getDate();
        }
        function getLastDayOfMonth(_ref3) {
          var year = _ref3.year, month = _ref3.month;
          return new Date(year, month, getDaysInMonth({
            year,
            month
          }));
        }
        function isSameYear(date1, date2) {
          return date1.getFullYear() === date2.getFullYear();
        }
        function isSameMonth(date1, date2) {
          return isSameYear(date1, date2) && date1.getMonth() === date2.getMonth();
        }
        function isSameDate(date1, date2) {
          return isSameMonth(date1, date2) && date1.getDate() === date2.getDate();
        }
        function isBetween(value, _ref4) {
          var start2 = _ref4.start, end2 = _ref4.end;
          var date = new Date(value.getFullYear(), value.getMonth(), value.getDate());
          var startTime = new Date(start2.getFullYear(), start2.getMonth(), start2.getDate());
          var endTime = new Date(end2.getFullYear(), end2.getMonth(), end2.getDate());
          return startTime <= date && endTime >= date;
        }
        function compareAsc(date1, date2) {
          var d1 = date1.getTime();
          var d2 = date2.getTime();
          if (d1 < d2)
            return -1;
          if (d1 > d2)
            return 1;
          return 0;
        }
        function isSame(date1, date2) {
          var type = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "date";
          var func = {
            isSameYear,
            isSameMonth,
            isSameDate
          };
          return func["isSame".concat(firstUpperCase(type))](date1, date2);
        }
        function outOfRanges(d, min2, max2) {
          return min2 && compareAsc(d, min2) === -1 || max2 && compareAsc(d, max2) === 1;
        }
        function getToday() {
          var now2 = new Date();
          return new Date(now2.getFullYear(), now2.getMonth(), now2.getDate(), 0, 0, 0);
        }
        function getDateObj(date) {
          var tempDate = date;
          if (!(date instanceof Date)) {
            tempDate = getToday();
          }
          return {
            year: tempDate.getFullYear(),
            month: tempDate.getMonth(),
            date: tempDate.getDate(),
            hours: tempDate.getHours(),
            minutes: tempDate.getMinutes(),
            seconds: tempDate.getSeconds(),
            meridiem: tempDate.getHours() > 11 ? "PM" : "AM"
          };
        }
        function setDateTime(d, hour, min2, sec) {
          var _getDateObj = getDateObj(d), year = _getDateObj.year, month = _getDateObj.month, date = _getDateObj.date;
          return new Date(year, month, date, hour, min2, sec, 0);
        }
        function subtractMonth(date, num) {
          var day = date.getDate();
          var newDate = new Date(date);
          var _num = num;
          while (_num--) {
            newDate.setDate(0);
          }
          newDate.setDate(day);
          return newDate;
        }
        function addMonth(date, num) {
          var _num = num;
          if (num < 0)
            _num = 0;
          var newDate = new Date(date);
          var year = date.getFullYear();
          var month = date.getMonth() + _num;
          var day = newDate.getDate();
          newDate.setDate(1);
          newDate.setMonth(month);
          newDate.setDate(Math.min(day, getDaysInMonth({
            year,
            month
          })));
          return newDate;
        }
        function getWeeks(_ref5, _ref6) {
          var year = _ref5.year, month = _ref5.month;
          var firstDayOfWeek = _ref6.firstDayOfWeek, _ref6$disableDate = _ref6.disableDate, disableDate = _ref6$disableDate === void 0 ? function() {
            return false;
          } : _ref6$disableDate, minDate = _ref6.minDate, maxDate = _ref6.maxDate;
          var prependDay = getFirstDayOfMonth({
            year,
            month
          });
          var appendDay = getLastDayOfMonth({
            year,
            month
          });
          var maxDays = getDaysInMonth({
            year,
            month
          });
          var daysArr = [];
          var i2 = 1;
          var today = getToday();
          for (i2; i2 <= maxDays; i2++) {
            var currentDay = new Date(year, month, i2);
            daysArr.push({
              text: i2,
              active: false,
              value: currentDay,
              disabled: typeof disableDate === "function" && disableDate(currentDay) || outOfRanges(currentDay, minDate, maxDate),
              now: isSame(today, currentDay),
              firstDayOfMonth: i2 === 1,
              lastDayOfMonth: i2 === maxDays,
              type: "current-month"
            });
          }
          if (prependDay.getDay() !== firstDayOfWeek) {
            prependDay.setDate(0);
            while (true) {
              daysArr.unshift({
                text: prependDay.getDate().toString(),
                active: false,
                value: new Date(prependDay),
                disabled: typeof disableDate === "function" && disableDate(prependDay) || outOfRanges(prependDay, minDate, maxDate),
                additional: true,
                type: "prev-month"
              });
              prependDay.setDate(prependDay.getDate() - 1);
              if (prependDay.getDay() === Math.abs(firstDayOfWeek + 6) % 7)
                break;
            }
          }
          var LEN = 42;
          while (daysArr.length < LEN) {
            appendDay.setDate(appendDay.getDate() + 1);
            daysArr.push({
              text: appendDay.getDate(),
              active: false,
              value: new Date(appendDay),
              disabled: typeof disableDate === "function" && disableDate(appendDay) || outOfRanges(appendDay, minDate, maxDate),
              additional: true,
              type: "next-month"
            });
          }
          return chunk_1(daysArr, 7);
        }
        function getYears(year, _ref7) {
          var _ref7$disableDate = _ref7.disableDate, disableDate = _ref7$disableDate === void 0 ? function() {
            return false;
          } : _ref7$disableDate, minDate = _ref7.minDate, maxDate = _ref7.maxDate;
          var startYear = parseInt((year / 10).toString(), 10) * 10;
          var endYear = startYear + 9;
          var yearArr = [];
          var today = getToday();
          for (var i2 = startYear; i2 <= endYear; i2++) {
            var date = new Date(i2, 1);
            var disabledMonth = 0;
            var outOfRangeMonth = 0;
            for (var j = 0; j < 12; j++) {
              var d = new Date(i2, j);
              if (typeof disableDate === "function" && disableDate(d))
                disabledMonth += 1;
              if (outOfRanges(d, minDate, maxDate))
                outOfRangeMonth += 1;
            }
            yearArr.push({
              value: date,
              now: isSame(date, today, "year"),
              disabled: disabledMonth === 12 || outOfRangeMonth === 12,
              active: false,
              text: "".concat(date.getFullYear())
            });
          }
          return chunk_1(yearArr, 4);
        }
        function getMonths(year, params) {
          var _params$disableDate = params.disableDate, disableDate = _params$disableDate === void 0 ? function() {
            return false;
          } : _params$disableDate, minDate = params.minDate, maxDate = params.maxDate, monthLocal = params.monthLocal;
          var MonthArr = [];
          var today = getToday();
          for (var i2 = 0; i2 <= 11; i2++) {
            var date = new Date(year, i2);
            var disabledDay = 0;
            var outOfRangeDay = 0;
            var daysInMonth = getDaysInMonth({
              year,
              month: i2
            });
            for (var j = 1; j <= daysInMonth; j++) {
              var d = new Date(year, i2, j);
              if (typeof disableDate === "function" && disableDate(d))
                disabledDay += 1;
              if (outOfRanges(d, minDate, maxDate))
                outOfRangeDay += 1;
            }
            MonthArr.push({
              value: date,
              now: isSame(date, today, "month"),
              disabled: disabledDay === daysInMonth || outOfRangeDay === daysInMonth,
              active: false,
              text: monthLocal[date.getMonth()]
            });
          }
          return chunk_1(MonthArr, 4);
        }
        function flagActive(data, _ref8) {
          var args = _extends$1({}, _ref8);
          var start2 = args.start, end2 = args.end, _args$type = args.type, type = _args$type === void 0 ? "date" : _args$type;
          if (!end2) {
            return data.map(function(row) {
              return row.map(function(item) {
                var _item = item;
                _item.active = isSame(item.value, start2, type);
                return _item;
              });
            });
          }
          return data.map(function(row) {
            return row.map(function(item) {
              var _item = item;
              var date = item.value;
              var isStart = isSame(start2, date, type);
              var isEnd = isSame(end2, date, type);
              _item.active = isStart || isEnd;
              _item.highlight = isBetween(date, {
                start: start2,
                end: end2
              });
              _item.startOfRange = isStart;
              _item.endOfRange = isEnd;
              return _item;
            });
          });
        }
        function extractTimeFormat(dateFormat) {
          var res = dateFormat.match(/(a\s)?h{1,2}:m{1,2}(:s{1,2})?(\sa)?/i);
          if (!res)
            return null;
          return res[0];
        }
        var TDate = vue.defineComponent({
          name: "TDatePickerPanel",
          components: {
            TDateHeader,
            TDateTable
          },
          inheritAttrs: false,
          props: {
            global: {
              type: Object,
              "default": function _default() {
                return {};
              }
            },
            value: {
              type: Date,
              "default": function _default() {
                return getToday();
              }
            },
            mode: props$x.mode,
            minDate: Date,
            maxDate: Date,
            firstDayOfWeek: props$x.firstDayOfWeek,
            disableDate: props$x.disableDate,
            onChange: props$x.onChange
          },
          emits: ["change"],
          setup: function setup() {
            var COMPONENT_NAME2 = usePrefixClass("date-picker__panel");
            return {
              COMPONENT_NAME: COMPONENT_NAME2
            };
          },
          data: function data() {
            return {
              year: this.value.getFullYear(),
              month: this.value.getMonth(),
              type: this.mode
            };
          },
          computed: {
            tableData: function tableData() {
              var year = this.year, month = this.month, type = this.type, value = this.value, mode = this.mode, disableDate = this.disableDate, minDate = this.minDate, maxDate = this.maxDate, firstDayOfWeek = this.firstDayOfWeek, global2 = this.global;
              var data;
              var options = {
                disableDate,
                minDate,
                maxDate,
                firstDayOfWeek,
                monthLocal: global2.months
              };
              switch (type) {
                case "date":
                  data = getWeeks({
                    year,
                    month
                  }, options);
                  break;
                case "month":
                  data = getMonths(year, options);
                  break;
                case "year":
                  data = getYears(year, options);
                  break;
              }
              var start2 = type === "date" || type === mode ? value : new Date(year, month);
              return flagActive(data, {
                start: start2,
                type
              });
            }
          },
          watch: {
            mode: function mode(value) {
              this.type = value;
            },
            value: function value(_value) {
              this.year = _value.getFullYear();
              this.month = _value.getMonth();
            }
          },
          methods: {
            getClickHandler: function getClickHandler() {
              return this["click".concat(firstUpperCase(this.type))];
            },
            clickDate: function clickDate(date) {
              this.$emit("change", date);
            },
            clickMonth: function clickMonth(date) {
              if (this.mode === "month") {
                this.$emit("change", date);
              } else {
                this.type = "date";
                this.year = date.getFullYear();
                this.month = date.getMonth();
              }
            },
            clickYear: function clickYear(date) {
              if (this.mode === "year") {
                this.$emit("change", date);
              } else {
                this.type = "month";
                this.year = date.getFullYear();
              }
            },
            clickHeader: function clickHeader(flag) {
              var monthCount = 0;
              var next = null;
              switch (this.type) {
                case "date":
                  monthCount = 1;
                  break;
                case "month":
                  monthCount = 12;
                  break;
                case "year":
                  monthCount = 120;
              }
              var current = new Date(this.year, this.month);
              switch (flag) {
                case 1:
                  next = addMonth(current, monthCount);
                  break;
                case -1:
                  next = subtractMonth(current, monthCount);
                  break;
                case 0:
                  next = new Date();
                  break;
              }
              this.year = next.getFullYear();
              this.month = next.getMonth();
            },
            onTypeChange: function onTypeChange(type) {
              this.type = type;
            }
          },
          render: function render() {
            var year = this.year, month = this.month, type = this.type, tableData = this.tableData, firstDayOfWeek = this.firstDayOfWeek, COMPONENT_NAME2 = this.COMPONENT_NAME;
            return vue.createVNode("div", {
              "class": COMPONENT_NAME2,
              "onClick": function onClick(e) {
                return e.stopPropagation();
              }
            }, [vue.createVNode(vue.resolveComponent("t-date-header"), {
              "year": year,
              "month": month,
              "type": type,
              "onBtnClick": this.clickHeader,
              "onTypeChange": this.onTypeChange
            }, null), vue.createVNode(vue.resolveComponent("t-date-table"), {
              "type": type,
              "firstDayOfWeek": firstDayOfWeek,
              "data": tableData,
              "onCellClick": this.getClickHandler()
            }, null)]);
          }
        });
        var TODAY = getToday();
        var LEFT = "left";
        var RIGHT = "right";
        var TDateRange = vue.defineComponent({
          name: "TDatePickerDateRange",
          components: {
            TDateHeader,
            TDateTable
          },
          inheritAttrs: false,
          props: {
            global: {
              type: Object,
              "default": function _default() {
                return {};
              }
            },
            mode: {
              type: String,
              "default": "date",
              validator: function validator(v) {
                return ["year", "month", "date"].indexOf(v) > -1;
              }
            },
            value: {
              type: Array,
              "default": function _default() {
                return [TODAY, TODAY];
              }
            },
            minDate: Date,
            maxDate: Date,
            firstDayOfWeek: props$x.firstDayOfWeek,
            disableDate: props$x.disableDate,
            onChange: props$x.onChange,
            onPick: Function
          },
          emits: ["change"],
          setup: function setup() {
            var COMPONENT_NAME2 = usePrefixClass("date-picker");
            return {
              COMPONENT_NAME: COMPONENT_NAME2
            };
          },
          data: function data() {
            return {
              leftYear: null,
              leftMonth: null,
              rightMonth: null,
              rightYear: null,
              leftType: this.mode,
              rightType: this.mode,
              startValue: null,
              endValue: null,
              isFirstClick: true,
              firstClickValue: null
            };
          },
          computed: {
            leftData: function leftData() {
              return this.getData({
                year: this.leftYear,
                month: this.leftMonth,
                type: this.leftType
              });
            },
            rightData: function rightData() {
              return this.getData({
                year: this.rightYear,
                month: this.rightMonth,
                type: this.rightType
              });
            }
          },
          watch: {
            value: {
              handler: function handler(value) {
                var _value = _slicedToArray(value, 2), _value$ = _value[0], startValue = _value$ === void 0 ? TODAY : _value$, _value$2 = _value[1], endValue = _value$2 === void 0 ? TODAY : _value$2;
                this.startValue = startValue;
                this.endValue = endValue;
              },
              immediate: true
            },
            mode: function mode(value) {
              this.leftType = value;
              this.rightType = value;
            }
          },
          created: function created() {
            this.initialPicker();
          },
          beforeUnmount: function beforeUnmount() {
            this.initialPicker();
          },
          methods: {
            initialPicker: function initialPicker() {
              var data = this.getLeftAndRightDataFromValue(this.value);
              this.leftYear = data.leftYear;
              this.leftMonth = data.leftMonth;
              this.rightYear = data.rightYear;
              this.rightMonth = data.rightMonth;
              this.leftType = this.mode;
              this.rightType = this.mode;
              var _this$value = _slicedToArray(this.value, 2), startValue = _this$value[0], endValue = _this$value[1];
              this.startValue = startValue;
              this.endValue = endValue;
              this.isFirstClick = true;
              this.firstClickValue = TODAY;
            },
            getLeftAndRightDataFromValue: function getLeftAndRightDataFromValue(value) {
              var _ref = value || this.value, _ref2 = _slicedToArray(_ref, 2), _ref2$ = _ref2[0], startValue = _ref2$ === void 0 ? TODAY : _ref2$, _ref2$2 = _ref2[1], endValue = _ref2$2 === void 0 ? TODAY : _ref2$2;
              var leftYear = startValue.getFullYear();
              var leftMonth = startValue.getMonth();
              var rightMonth = endValue.getMonth();
              var rightYear = endValue.getFullYear();
              if (this.mode === "date" && isSame(startValue, endValue, "month")) {
                var next = addMonth(endValue, 1);
                rightMonth = addMonth(endValue, 1).getMonth();
                rightYear = next.getFullYear();
              }
              if (this.mode === "month" && isSame(startValue, endValue, "year")) {
                rightYear = leftYear + 1;
              }
              if (this.mode === "year" && isSame(startValue, endValue, "year")) {
                rightYear = leftYear + 10;
              }
              return {
                leftYear,
                leftMonth,
                rightMonth,
                rightYear
              };
            },
            getData: function getData(_ref3) {
              var year = _ref3.year, month = _ref3.month, type = _ref3.type;
              var disableDate = this.disableDate, minDate = this.minDate, maxDate = this.maxDate, startValue = this.startValue, endValue = this.endValue, firstDayOfWeek = this.firstDayOfWeek;
              var data;
              var start2 = startValue;
              var end2 = endValue;
              var options = {
                disableDate,
                minDate,
                maxDate,
                firstDayOfWeek,
                monthLocal: this.global.months
              };
              switch (type) {
                case "date":
                  data = getWeeks({
                    year,
                    month
                  }, options);
                  break;
                case "month":
                  data = getMonths(year, options);
                  break;
                case "year":
                  data = getYears(year, options);
                  break;
              }
              return flagActive(data, {
                start: start2,
                end: end2,
                type
              });
            },
            getClickHandler: function getClickHandler(direction, date, e) {
              var type = this["".concat(direction, "Type")];
              return this["click".concat(firstUpperCase(type))](date, e, direction);
            },
            clickHeader: function clickHeader(flag, direction) {
              var year = this["".concat(direction, "Year")];
              var month = this["".concat(direction, "Month")];
              var type = this["".concat(direction, "Type")];
              var monthCount;
              var next;
              switch (type) {
                case "date":
                  monthCount = 1;
                  break;
                case "month":
                  monthCount = 12;
                  break;
                case "year":
                  monthCount = 120;
              }
              var current = new Date(year, month);
              if (flag === 1) {
                next = addMonth(current, monthCount);
              } else if (flag === -1) {
                next = subtractMonth(current, monthCount);
              } else {
                next = new Date();
              }
              this["".concat(direction, "Year")] = next.getFullYear();
              this["".concat(direction, "Month")] = next.getMonth();
            },
            clickDate: function clickDate(date, e) {
              var partial = "start";
              if (this.isFirstClick) {
                this.startValue = date;
                this.endValue = date;
                this.isFirstClick = false;
                this.firstClickValue = date;
              } else {
                if (dayjs(this.firstClickValue).isBefore(dayjs(date), "day")) {
                  this.endValue = date;
                } else {
                  this.endValue = this.firstClickValue;
                  this.startValue = date;
                }
                this.$props.onChange([setDateTime(this.startValue, 0, 0, 0), setDateTime(this.endValue, 23, 59, 59)]);
                this.isFirstClick = true;
                partial = "end";
              }
              this.$props.onPick && this.$props.onPick(date, {
                e,
                partial
              });
            },
            clickYear: function clickYear(date, e, type) {
              if (this.mode === "year") {
                if (this.isFirstClick) {
                  this.startValue = date;
                  this.isFirstClick = false;
                  this.firstClickValue = date;
                } else {
                  this.$props.onChange([this.startValue, this.endValue]);
                  this.isFirstClick = true;
                }
              } else {
                this["".concat(type, "Type")] = "month";
                this["".concat(type, "Year")] = date.getFullYear();
              }
            },
            clickMonth: function clickMonth(date, e, type) {
              if (this.mode === "month") {
                if (this.isFirstClick) {
                  this.startValue = date;
                  this.isFirstClick = false;
                  this.firstClickValue = date;
                } else {
                  if (this.endValue < this.startValue) {
                    this.endValue = this.startValue;
                  }
                  this.$props.onChange([this.startValue, this.endValue]);
                  this.isFirstClick = true;
                }
              } else {
                this["".concat(type, "Type")] = "date";
                this["".concat(type, "Month")] = date.getMonth();
                this["".concat(type, "Year")] = date.getFullYear();
              }
            },
            onMouseEnter: function onMouseEnter(date) {
              if (this.isFirstClick) {
                return;
              }
              if (this.firstClickValue.getTime() > date.getTime()) {
                this.startValue = date;
                this.endValue = this.firstClickValue;
              } else {
                this.startValue = this.firstClickValue;
                this.endValue = date;
              }
            },
            onTypeChange: function onTypeChange() {
              this.startValue = this.firstClickValue;
              this.endValue = this.firstClickValue;
            },
            handleTypeChange: function handleTypeChange(direction, type) {
              this["".concat(direction, "Type")] = type;
            }
          },
          render: function render() {
            var _this = this;
            var COMPONENT_NAME2 = this.COMPONENT_NAME, leftYear = this.leftYear, leftMonth = this.leftMonth, leftType = this.leftType, leftData = this.leftData, rightYear = this.rightYear, rightMonth = this.rightMonth, rightType = this.rightType, rightData = this.rightData, firstDayOfWeek = this.firstDayOfWeek;
            return vue.createVNode("div", {
              "class": "".concat(COMPONENT_NAME2, "__panels"),
              "onClick": function onClick(e) {
                return e.stopPropagation();
              }
            }, [vue.createVNode("div", {
              "class": "".concat(COMPONENT_NAME2, "__panel")
            }, [vue.createVNode(vue.resolveComponent("t-date-header"), {
              "year": leftYear,
              "month": leftMonth,
              "type": leftType,
              "onBtnClick": function onBtnClick(flag) {
                return _this.clickHeader(flag, LEFT);
              },
              "onTypeChange": function onTypeChange(type) {
                return _this.handleTypeChange(LEFT, type);
              }
            }, null), vue.createVNode(vue.resolveComponent("t-date-table"), {
              "type": leftType,
              "first-day-of-week": firstDayOfWeek,
              "data": leftData,
              "onCellClick": function onCellClick(date, e) {
                return _this.getClickHandler(LEFT, date, e);
              },
              "onCellMouseEnter": this.onMouseEnter
            }, null)]), vue.createVNode("div", {
              "class": "".concat(COMPONENT_NAME2, "__panel")
            }, [vue.createVNode(vue.resolveComponent("t-date-header"), {
              "year": rightYear,
              "month": rightMonth,
              "type": rightType,
              "onBtnClick": function onBtnClick(flag) {
                return _this.clickHeader(flag, RIGHT);
              },
              "onTypeChange": function onTypeChange(type) {
                return _this.handleTypeChange(RIGHT, type);
              }
            }, null), vue.createVNode(vue.resolveComponent("t-date-table"), {
              "type": rightType,
              "first-day-of-week": firstDayOfWeek,
              "data": rightData,
              "onUpdateType": this.onTypeChange,
              "onCellClick": function onCellClick(date, e) {
                return _this.getClickHandler(RIGHT, date, e);
              },
              "onCellMouseEnter": this.onMouseEnter
            }, null)])]);
          }
        });
        var customParseFormat$1 = { exports: {} };
        (function(module2, exports3) {
          !function(e, t) {
            module2.exports = t();
          }(commonjsGlobal, function() {
            var e = {
              LTS: "h:mm:ss A",
              LT: "h:mm A",
              L: "MM/DD/YYYY",
              LL: "MMMM D, YYYY",
              LLL: "MMMM D, YYYY h:mm A",
              LLLL: "dddd, MMMM D, YYYY h:mm A"
            }, t = /(\[[^[]*\])|([-:/.()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g, n = /\d\d/, r = /\d\d?/, i2 = /\d*[^\s\d-_:/()]+/, o = {}, s = function s2(e2) {
              return (e2 = +e2) + (e2 > 68 ? 1900 : 2e3);
            };
            var a = function a2(e2) {
              return function(t2) {
                this[e2] = +t2;
              };
            }, f = [/[+-]\d\d:?(\d\d)?|Z/, function(e2) {
              (this.zone || (this.zone = {})).offset = function(e3) {
                if (!e3)
                  return 0;
                if ("Z" === e3)
                  return 0;
                var t2 = e3.match(/([+-]|\d\d)/g), n2 = 60 * t2[1] + (+t2[2] || 0);
                return 0 === n2 ? 0 : "+" === t2[0] ? -n2 : n2;
              }(e2);
            }], h = function h2(e2) {
              var t2 = o[e2];
              return t2 && (t2.indexOf ? t2 : t2.s.concat(t2.f));
            }, u = function u2(e2, t2) {
              var n2, r2 = o.meridiem;
              if (r2) {
                for (var i3 = 1; i3 <= 24; i3 += 1) {
                  if (e2.indexOf(r2(i3, 0, t2)) > -1) {
                    n2 = i3 > 12;
                    break;
                  }
                }
              } else
                n2 = e2 === (t2 ? "pm" : "PM");
              return n2;
            }, d = {
              A: [i2, function(e2) {
                this.afternoon = u(e2, false);
              }],
              a: [i2, function(e2) {
                this.afternoon = u(e2, true);
              }],
              S: [/\d/, function(e2) {
                this.milliseconds = 100 * +e2;
              }],
              SS: [n, function(e2) {
                this.milliseconds = 10 * +e2;
              }],
              SSS: [/\d{3}/, function(e2) {
                this.milliseconds = +e2;
              }],
              s: [r, a("seconds")],
              ss: [r, a("seconds")],
              m: [r, a("minutes")],
              mm: [r, a("minutes")],
              H: [r, a("hours")],
              h: [r, a("hours")],
              HH: [r, a("hours")],
              hh: [r, a("hours")],
              D: [r, a("day")],
              DD: [n, a("day")],
              Do: [i2, function(e2) {
                var t2 = o.ordinal, n2 = e2.match(/\d+/);
                if (this.day = n2[0], t2)
                  for (var r2 = 1; r2 <= 31; r2 += 1) {
                    t2(r2).replace(/\[|\]/g, "") === e2 && (this.day = r2);
                  }
              }],
              M: [r, a("month")],
              MM: [n, a("month")],
              MMM: [i2, function(e2) {
                var t2 = h("months"), n2 = (h("monthsShort") || t2.map(function(e3) {
                  return e3.slice(0, 3);
                })).indexOf(e2) + 1;
                if (n2 < 1)
                  throw new Error();
                this.month = n2 % 12 || n2;
              }],
              MMMM: [i2, function(e2) {
                var t2 = h("months").indexOf(e2) + 1;
                if (t2 < 1)
                  throw new Error();
                this.month = t2 % 12 || t2;
              }],
              Y: [/[+-]?\d+/, a("year")],
              YY: [n, function(e2) {
                this.year = s(e2);
              }],
              YYYY: [/\d{4}/, a("year")],
              Z: f,
              ZZ: f
            };
            function c(n2) {
              var r2, i3;
              r2 = n2, i3 = o && o.formats;
              for (var s2 = (n2 = r2.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function(t2, n3, r3) {
                var o2 = r3 && r3.toUpperCase();
                return n3 || i3[r3] || e[r3] || i3[o2].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(e2, t3, n4) {
                  return t3 || n4.slice(1);
                });
              })).match(t), a2 = s2.length, f2 = 0; f2 < a2; f2 += 1) {
                var h2 = s2[f2], u2 = d[h2], c2 = u2 && u2[0], l = u2 && u2[1];
                s2[f2] = l ? {
                  regex: c2,
                  parser: l
                } : h2.replace(/^\[|\]$/g, "");
              }
              return function(e2) {
                for (var t2 = {}, n3 = 0, r3 = 0; n3 < a2; n3 += 1) {
                  var i4 = s2[n3];
                  if ("string" == typeof i4)
                    r3 += i4.length;
                  else {
                    var o2 = i4.regex, f3 = i4.parser, h3 = e2.slice(r3), u3 = o2.exec(h3)[0];
                    f3.call(t2, u3), e2 = e2.replace(u3, "");
                  }
                }
                return function(e3) {
                  var t3 = e3.afternoon;
                  if (void 0 !== t3) {
                    var n4 = e3.hours;
                    t3 ? n4 < 12 && (e3.hours += 12) : 12 === n4 && (e3.hours = 0), delete e3.afternoon;
                  }
                }(t2), t2;
              };
            }
            return function(e2, t2, n2) {
              n2.p.customParseFormat = true, e2 && e2.parseTwoDigitYear && (s = e2.parseTwoDigitYear);
              var r2 = t2.prototype, i3 = r2.parse;
              r2.parse = function(e3) {
                var t3 = e3.date, r3 = e3.utc, s2 = e3.args;
                this.$u = r3;
                var a2 = s2[1];
                if ("string" == typeof a2) {
                  var f2 = true === s2[2], h2 = true === s2[3], u2 = f2 || h2, d2 = s2[2];
                  h2 && (d2 = s2[2]), o = this.$locale(), !f2 && d2 && (o = n2.Ls[d2]), this.$d = function(e4, t4, n3) {
                    try {
                      if (["x", "X"].indexOf(t4) > -1)
                        return new Date(("X" === t4 ? 1e3 : 1) * e4);
                      var r4 = c(t4)(e4), i4 = r4.year, o2 = r4.month, s3 = r4.day, a3 = r4.hours, f3 = r4.minutes, h3 = r4.seconds, u3 = r4.milliseconds, d3 = r4.zone, l2 = new Date(), m2 = s3 || (i4 || o2 ? 1 : l2.getDate()), M2 = i4 || l2.getFullYear(), Y = 0;
                      i4 && !o2 || (Y = o2 > 0 ? o2 - 1 : l2.getMonth());
                      var p = a3 || 0, v = f3 || 0, D = h3 || 0, g = u3 || 0;
                      return d3 ? new Date(Date.UTC(M2, Y, m2, p, v, D, g + 60 * d3.offset * 1e3)) : n3 ? new Date(Date.UTC(M2, Y, m2, p, v, D, g)) : new Date(M2, Y, m2, p, v, D, g);
                    } catch (e5) {
                      return new Date("");
                    }
                  }(t3, a2, r3), this.init(), d2 && true !== d2 && (this.$L = this.locale(d2).$L), u2 && t3 != this.format(a2) && (this.$d = new Date("")), o = {};
                } else if (a2 instanceof Array)
                  for (var l = a2.length, m = 1; m <= l; m += 1) {
                    s2[1] = a2[m - 1];
                    var M = n2.apply(this, s2);
                    if (M.isValid()) {
                      this.$d = M.$d, this.$L = M.$L, this.init();
                      break;
                    }
                    m === l && (this.$d = new Date(""));
                  }
                else
                  i3.call(this, e3);
              };
            };
          });
        })(customParseFormat$1);
        var customParseFormat = customParseFormat$1.exports;
        var EPickerCols = /* @__PURE__ */ function(EPickerCols2) {
          EPickerCols2["hour"] = "hour";
          EPickerCols2["minute"] = "minute";
          EPickerCols2["second"] = "second";
          EPickerCols2["meridiem"] = "meridiem";
          return EPickerCols2;
        }(EPickerCols || {});
        var AM = "AM";
        var PM = "PM";
        var MERIDIEM_LIST = [AM, PM];
        var amFormat = /^(a|A)\s+?[h]{1,2}(:[m]{1,2}(:[s]{1,2})?)?$/;
        var pmFormat = /^[h]{1,2}(:[m]{1,2}(:[s]{1,2})?)?(\s+(a|A))?$/;
        var TIME_PICKER_EMPTY = [void 0, void 0];
        var KeyboardDirection = /* @__PURE__ */ function(KeyboardDirection2) {
          KeyboardDirection2[KeyboardDirection2["left"] = 37] = "left";
          KeyboardDirection2[KeyboardDirection2["up"] = 38] = "up";
          KeyboardDirection2[KeyboardDirection2["right"] = 39] = "right";
          KeyboardDirection2[KeyboardDirection2["down"] = 40] = "down";
          return KeyboardDirection2;
        }(KeyboardDirection || {});
        var EMPTY_VALUE = -1;
        var props$w = {
          allowInput: Boolean,
          clearable: Boolean,
          disabled: Boolean,
          disableTime: {
            type: Function
          },
          format: {
            type: String,
            "default": "HH:mm:ss"
          },
          hideDisabledTime: {
            type: Boolean,
            "default": true
          },
          placeholder: {
            type: String,
            "default": ""
          },
          size: {
            type: String,
            "default": "medium",
            validator: function validator(val) {
              return ["small", "medium", "large"].includes(val);
            }
          },
          steps: {
            type: Array,
            "default": function _default() {
              return [1, 1, 1];
            }
          },
          value: {
            type: String,
            "default": ""
          },
          modelValue: {
            type: String,
            "default": ""
          },
          defaultValue: {
            type: String,
            "default": ""
          },
          onBlur: Function,
          onChange: Function,
          onClose: Function,
          onFocus: Function,
          onInput: Function,
          onOpen: Function
        };
        function ownKeys$1b(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1a(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1b(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1b(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var BooleanType = {
          type: Boolean,
          "default": true,
          validator: function validator(v) {
            return typeof v === "boolean";
          }
        };
        var panelProps = function panelProps2() {
          return {
            disabled: _objectSpread$1a(_objectSpread$1a({}, BooleanType), {
              "default": false
            }),
            isFocus: _objectSpread$1a(_objectSpread$1a({}, BooleanType), {
              "default": false
            }),
            value: {
              type: Array,
              "default": function _default() {
                return [dayjs()];
              }
            },
            format: {
              type: String,
              "default": "HH:mm:ss"
            },
            steps: _objectSpread$1a({
              type: Array
            }, {
              "default": [1, 1, 1]
            }),
            isShowPanel: _objectSpread$1a(_objectSpread$1a({}, BooleanType), {
              "default": false
            }),
            hideDisabledTime: _objectSpread$1a({}, props$w.hideDisabledTime),
            disableTime: _objectSpread$1a({}, props$w.disableTime),
            isFooterDisplay: _objectSpread$1a({}, BooleanType)
          };
        };
        var panelColProps = function panelColProps2() {
          return {
            format: {
              type: String,
              "default": "HH:mm:ss"
            },
            cols: {
              type: Array,
              "default": function _default() {
                return [EPickerCols.hour, EPickerCols.minute, EPickerCols.second];
              }
            },
            value: _objectSpread$1a({
              type: Object
            }, {
              "default": function _default() {
                return dayjs();
              }
            }),
            range: {
              type: Array,
              "default": function _default() {
                return [];
              }
            },
            steps: _objectSpread$1a({
              type: Array
            }, {
              "default": [1, 1, 1]
            }),
            hideDisabledTime: _objectSpread$1a({}, props$w.hideDisabledTime),
            disableTime: _objectSpread$1a({}, props$w.disableTime),
            localeMeridiems: {
              type: Array
            }
          };
        };
        dayjs.extend(customParseFormat);
        var PanelCol = vue.defineComponent({
          name: "TTimePickerPanelCol",
          props: panelColProps(),
          emits: ["time-pick"],
          setup: function setup() {
            var COMPONENT_NAME2 = usePrefixClass("time-picker");
            var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
            return {
              COMPONENT_NAME: COMPONENT_NAME2,
              STATUS
            };
          },
          data: function data() {
            return {
              splitValue: /* @__PURE__ */ Object.create(null),
              timeArr: [EPickerCols.hour, EPickerCols.minute, EPickerCols.second]
            };
          },
          computed: {
            valStr: function valStr() {
              return dayjs(this.value, this.format).format(this.format);
            },
            isPm: function isPm() {
              return dayjs(this.valStr, this.format).hour() >= 12;
            },
            currentTimes: function currentTimes() {
              return [Number(this.value.get("hour")), Number(this.value.get("minute")), Number(this.value.get("second"))];
            },
            timeItemMargin: function timeItemMargin() {
              var _this$$el, _this$$el$querySelect;
              var maskDom = (_this$$el = this.$el) === null || _this$$el === void 0 ? void 0 : (_this$$el$querySelect = _this$$el.querySelector) === null || _this$$el$querySelect === void 0 ? void 0 : _this$$el$querySelect.call(_this$$el, ".".concat(this.COMPONENT_NAME, "__panel-body-active-mask > div"));
              return maskDom && parseInt(getComputedStyle(maskDom).margin, 10);
            }
          },
          methods: {
            getTimeItemHeight: function getTimeItemHeight(col) {
              var cols = this.$refs["".concat(col, "_scroller")];
              return cols.querySelector("li").offsetHeight;
            },
            generateColTime: function generateColTime(col) {
              var res;
              var count;
              if (this.timeArr.includes(col)) {
                var colIdx = this.timeArr.indexOf(col);
                if (col === EPickerCols.hour) {
                  count = /[h]{1}/.test(this.format) ? 11 : 23;
                } else {
                  count = 59;
                }
                res = this.generateTimeList(count, Number(this.steps[colIdx]));
              } else {
                res = this.localeMeridiems;
              }
              return res;
            },
            generateTimeList: function generateTimeList(num, step) {
              var res = [];
              var count = 0;
              while (count <= num) {
                if (!/[h]{1}/.test(this.format) && count < 10) {
                  res.push("0".concat(count));
                } else {
                  res.push(count);
                }
                count += step;
              }
              return res;
            },
            disableFilter: function disableFilter(preIdx, col) {
              var _this = this;
              var filteredIdx = preIdx;
              if (this.hideDisabledTime && this.disableTime) {
                var timeList = this.generateColTime(col);
                var index2 = this.timeArr.indexOf(col);
                filteredIdx = timeList.filter(function(t) {
                  var params = _this.currentTimes;
                  params[index2] = Number(t);
                  return _this.disableTime && !_this.disableTime.apply(_this, params);
                }).indexOf(preIdx);
              }
              return filteredIdx;
            },
            calculateTimeIdx: function calculateTimeIdx(time2, step, type) {
              var timeIdx = time2;
              timeIdx = this.disableFilter(Number(timeIdx), type);
              return Math.floor(Number(timeIdx) / Number(step));
            },
            getScrollDistance: function getScrollDistance(col, time2) {
              var timeIndex;
              if (this.timeArr.includes(col)) {
                var colIdx = this.timeArr.indexOf(col);
                timeIndex = this.calculateTimeIdx(time2, this.steps[colIdx], col);
                if (col === EPickerCols.hour && /[h]{1}/.test(this.format)) {
                  timeIndex %= 12;
                }
              } else {
                timeIndex = this.localeMeridiems.indexOf(time2.toUpperCase());
              }
              var timeItemTotalHeight = this.getTimeItemHeight(col) + this.timeItemMargin;
              var distance = timeIndex * timeItemTotalHeight + timeItemTotalHeight / 2;
              return distance;
            },
            scrollToTime: function scrollToTime(col, time2) {
              var behavior = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "auto";
              var distance = this.getScrollDistance(col, time2);
              var scroller = this.$refs["".concat(col, "_scroller")];
              if (!distance || !scroller)
                return;
              if (scroller.scrollTop === distance)
                return;
              scroller.scrollTo({
                top: distance,
                behavior
              });
            },
            updateTimeScrollPos: function updateTimeScrollPos() {
              var _this2 = this;
              var hour = EPickerCols.hour, minute = EPickerCols.minute, second = EPickerCols.second;
              var isNormalScroll = this.steps.filter(function(step) {
                return step !== 1;
              }).length < 1 || Number(this.splitValue[hour]) !== Number(this.steps[0]) - 1 || Number(this.splitValue[minute]) !== Number(this.steps[1]) - 1 || Number(this.splitValue[second]) !== Number(this.steps[2]) - 1;
              this.cols.forEach(function(col) {
                isNormalScroll ? _this2.scrollToTime(col, _this2.splitValue[col]) : _this2.scrollToTime(col, 0);
              });
            },
            generateColRows: function generateColRows(col) {
              var _this3 = this;
              return this.generateColTime(col).map(function(el) {
                var _ref;
                if (!_this3.timeItemCanUsed(col, el) && _this3.hideDisabledTime)
                  return null;
                var isCurrent = _this3.isCurrent(col, el);
                if (isCurrent) {
                  _this3.splitValue[col] = el;
                }
                var classNames = ["".concat(_this3.COMPONENT_NAME, "__panel-body-scroll-item"), (_ref = {}, _defineProperty$3(_ref, _this3.STATUS.disabled, !_this3.timeItemCanUsed(col, el)), _defineProperty$3(_ref, _this3.STATUS.current, isCurrent), _ref)];
                return vue.createVNode("li", {
                  "class": classNames,
                  "onClick": function onClick(e) {
                    return _this3.handleTimeItemClick(e, col, el);
                  }
                }, [el]);
              });
            },
            handleTimeItemClick: function handleTimeItemClick(_e, col, time2) {
              var canUse = this.timeItemCanUsed(col, time2);
              if (canUse) {
                this.scrollToTime(col, time2, "smooth");
                this.$emit("time-pick", col, time2);
              }
            },
            isCurrent: function isCurrent(col, colItem) {
              var colVal;
              switch (col) {
                case EPickerCols.meridiem:
                  return this.isPm === (colItem === this.localeMeridiems[1]);
                case EPickerCols.hour:
                case EPickerCols.minute:
                case EPickerCols.second:
                  colVal = this.value.get(col);
                  if (col === EPickerCols.hour && /[h]{1}/.test(this.format)) {
                    colVal %= 12;
                  }
                  return colVal === Number(colItem);
              }
            },
            timeItemCanUsed: function timeItemCanUsed(col, time2) {
              if (this.timeArr.includes(col)) {
                var index2 = this.timeArr.indexOf(col);
                var params = this.currentTimes;
                params[index2] = Number(time2);
                return !(this.disableTime && this.disableTime.apply(this, params));
              }
              return true;
            },
            renderScrollers: function renderScrollers() {
              var _this4 = this;
              return this.cols.map(function(col) {
                return _this4.renderScroller(col);
              });
            },
            renderScroller: function renderScroller(col) {
              var _this5 = this;
              return vue.createVNode("ul", {
                "class": "".concat(this.COMPONENT_NAME, "__panel-body-scroll"),
                "ref": "".concat(col, "_scroller"),
                "onScroll": debounce_1(function() {
                  return _this5.handleScroll(col);
                }, 50)
              }, [this.generateColRows(col)]);
            },
            closestLookup: function closestLookup(availableArr, calcVal, step) {
              if (step <= 1)
                return calcVal;
              if (calcVal < step)
                return 0;
              return availableArr.sort(function(a, b2) {
                return Math.abs(calcVal + 1 - a) - Math.abs(calcVal + 1 - b2);
              })[0];
            },
            handleScroll: function handleScroll(col) {
              var _this6 = this;
              var scrollVal;
              var cols = this.$refs["".concat(col, "_scroller")];
              var availableList = this.generateColTime(col);
              var scrollTop = cols.scrollTop;
              var itemHeight = this.getTimeItemHeight(col);
              if (this.timeArr.includes(col)) {
                var colIdx = this.timeArr.indexOf(col);
                var max2 = 59;
                if (col === EPickerCols.hour) {
                  max2 = /[h]{1}/.test(this.format) ? 11 : 23;
                }
                scrollVal = Math.min(Math.abs(Math.round((scrollTop - itemHeight / 2) / (itemHeight + this.timeItemMargin) * Number(this.steps[colIdx]))), max2);
                scrollVal = this.closestLookup(availableList, scrollVal, Number(this.steps[colIdx]));
                if (this.disableTime && this.hideDisabledTime) {
                  scrollVal = availableList.filter(function(t) {
                    var _this6$disableTime;
                    var params = _this6.currentTimes;
                    params[colIdx] = Number(t);
                    return !((_this6$disableTime = _this6.disableTime) !== null && _this6$disableTime !== void 0 && _this6$disableTime.apply(_this6, params));
                  })[scrollVal];
                }
              } else {
                scrollVal = Math.min(Math.abs(Math.round((scrollTop - itemHeight / 2) / (itemHeight + this.timeItemMargin))), 1);
                scrollVal = this.localeMeridiems[scrollVal];
              }
              var distance = this.getScrollDistance(col, scrollVal);
              if (distance !== scrollTop) {
                var scroller = this.$refs["".concat(col, "_scroller")];
                scroller.scrollTo({
                  top: distance,
                  behavior: "smooth"
                });
              }
              this.timeItemCanUsed(col, scrollVal) && this.$emit("time-pick", col, scrollVal);
            },
            renderActiveMask: function renderActiveMask() {
              return vue.createVNode("div", {
                "class": "".concat(this.COMPONENT_NAME, "__panel-body-active-mask")
              }, [this.cols.map(function(_col, idx) {
                return vue.createVNode("div", {
                  "key": idx
                }, null);
              })]);
            }
          },
          render: function render() {
            return vue.createVNode("div", {
              "class": "".concat(this.COMPONENT_NAME, "__panel-body")
            }, [this.renderActiveMask(), this.renderScrollers()]);
          }
        });
        function _isSlot$i(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        dayjs.extend(customParseFormat);
        var PickerPanel = vue.defineComponent({
          name: "TimePickerPanel",
          components: {
            PanelCol,
            TButton
          },
          props: panelProps(),
          emits: ["sure", "now-action", "time-pick"],
          setup: function setup() {
            var COMPONENT_NAME2 = usePrefixClass("time-picker");
            var COMPONENT_NAME_PANEL = usePrefixClass("time-picker__panel");
            var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
            var _useConfig = useConfig("timePicker"), t = _useConfig.t, global2 = _useConfig.global;
            return {
              t,
              global: global2,
              COMPONENT_NAME_PANEL,
              COMPONENT_NAME: COMPONENT_NAME2,
              STATUS
            };
          },
          data: function data() {
            return {
              panel: null,
              isSetup: false
            };
          },
          computed: {
            sectionComponentName: function sectionComponentName() {
              return "".concat(this.COMPONENT_NAME_PANEL, "-section");
            },
            classNames: function classNames() {
              return this.rangePicker ? [this.COMPONENT_NAME_PANEL, this.sectionComponentName] : [this.COMPONENT_NAME_PANEL];
            },
            colValues: function colValues() {
              return this.value.map(function(el) {
                return el || dayjs();
              });
            },
            rangePicker: function rangePicker() {
              return this.colValues.length > 1;
            },
            formatField: function formatField() {
              var match = this.format.match(/(a\s+|A\s+)?(h+|H+)?:?(m+)?:?(s+)?(\s+a|\s+A)?/);
              var _match = _slicedToArray(match, 6), startAChart = _match[1], hour = _match[2], minute = _match[3], second = _match[4], endAChart = _match[5];
              return {
                startAChart,
                hour,
                minute,
                second,
                endAChart
              };
            },
            cols: function cols() {
              if (!this.formatField) {
                return [EPickerCols.hour, EPickerCols.minute, EPickerCols.second];
              }
              var _this$formatField = this.formatField, startAChart = _this$formatField.startAChart, hour = _this$formatField.hour, minute = _this$formatField.minute, second = _this$formatField.second, endAChart = _this$formatField.endAChart;
              var res = [];
              startAChart && res.push(EPickerCols.meridiem);
              hour && res.push(EPickerCols.hour);
              minute && res.push(EPickerCols.minute);
              second && res.push(EPickerCols.second);
              endAChart && res.push(EPickerCols.meridiem);
              return res;
            },
            localeMeridiems: function localeMeridiems() {
              return [this.global.anteMeridiem, this.global.postMeridiem];
            }
          },
          watch: {
            isShowPanel: {
              handler: function handler(val) {
                if (val) {
                  this.panelColUpdate();
                }
              },
              immediate: true
            }
          },
          methods: {
            panelColUpdate: function panelColUpdate() {
              var _this = this;
              vue.nextTick(function() {
                var panelCol0 = _this.$refs.panelCol_0;
                var panelCol1 = _this.$refs.panelCol_1;
                panelCol0 && panelCol0.updateTimeScrollPos();
                panelCol1 && panelCol1.updateTimeScrollPos();
              });
            },
            scrollToTime: function scrollToTime(colIndex, col, time2, behavior) {
              var scroller = this.$refs["panelCol_".concat(colIndex)];
              scroller && scroller.scrollToTime(col, time2, behavior);
            },
            renderFooter: function renderFooter() {
              var _slot, _slot2;
              var confirmAction = this.confirmBtnClick.bind(this);
              return vue.createVNode("div", {
                "class": "".concat(this.sectionComponentName, "-footer")
              }, [vue.createVNode(vue.resolveComponent("t-button"), {
                "theme": "primary",
                "variant": "base",
                "onClick": confirmAction
              }, _isSlot$i(_slot = this.t(this.global.confirm)) ? _slot : {
                "default": function _default() {
                  return [_slot];
                }
              }), this.rangePicker || vue.createVNode(vue.resolveComponent("t-button"), {
                "theme": "primary",
                "variant": "text",
                "onClick": this.nowAction
              }, _isSlot$i(_slot2 = this.t(this.global.now)) ? _slot2 : {
                "default": function _default() {
                  return [_slot2];
                }
              })]);
            },
            renderBody: function renderBody() {
              return vue.createVNode("div", {
                "class": "".concat(this.sectionComponentName, "-body")
              }, [this.renderSinglePicker(0), this.rangePicker && this.renderSinglePicker(1)]);
            },
            renderSinglePicker: function renderSinglePicker(index2) {
              var _this2 = this;
              var val = this.colValues[index2];
              var ref = "panelCol_".concat(index2);
              return vue.createVNode(vue.resolveComponent("panel-col"), {
                "ref": ref,
                "value": val,
                "cols": this.cols,
                "steps": this.steps,
                "hideDisabledTime": this.hideDisabledTime,
                "disableTime": this.disableTime,
                "format": this.format,
                "onTimePick": function onTimePick(col, time2) {
                  return _this2.handleTimePick(col, time2, index2);
                },
                "localeMeridiems": this.localeMeridiems
              }, null);
            },
            confirmBtnClick: function confirmBtnClick(e) {
              this.$emit("sure", e);
            },
            nowAction: function nowAction() {
              this.$emit("now-action");
              this.panelColUpdate();
            },
            handleTimePick: function handleTimePick(col, time2, index2) {
              this.$emit("time-pick", col, time2, index2, this.colValues[index2]);
            }
          },
          render: function render() {
            var isFooterDisplay = this.isFooterDisplay, classNames = this.classNames;
            return vue.createVNode("div", {
              "class": classNames
            }, [this.renderBody(), isFooterDisplay ? this.renderFooter() : null]);
          }
        });
        function ownKeys$1a(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$19(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1a(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1a(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        dayjs.extend(isBetween$1);
        var _DatePicker = vue.defineComponent({
          name: "TDatePicker",
          components: {
            TPopup: Popup,
            TButton: Button,
            TInput: Input,
            TCalendarPresets,
            TDate,
            TDateRange,
            TTimePickerPanel: PickerPanel
          },
          props: props$x,
          emits: ["input", "open", "close", "focus", "click", "change", "pick"],
          setup: function setup() {
            var disabled = useFormDisabled();
            var classPrefix2 = usePrefixClass();
            var COMPONENT_NAME2 = usePrefixClass("date-picker");
            var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE, STATUS = _useCommonClassName.STATUS;
            var _useConfig = useConfig("datePicker"), global2 = _useConfig.global;
            return {
              global: global2,
              classPrefix: classPrefix2,
              COMPONENT_NAME: COMPONENT_NAME2,
              SIZE,
              STATUS,
              disabled
            };
          },
          data: function data() {
            return {
              tempValue: "",
              monthDate: new Date(),
              start: new Date(),
              end: new Date(),
              selectedDates: [],
              inSelection: false,
              inline: false,
              dateFormat: "",
              multiSeparator: ",",
              inlineView: false,
              showTime: false,
              isOpen: false,
              startTimeValue: dayjs(),
              endTimeValue: dayjs()
            };
          },
          computed: {
            startText: function startText() {
              return this.formatDate(this.start);
            },
            endText: function endText() {
              return this.formatDate(this.end);
            },
            formattedValue: {
              get: function get2() {
                var _this = this;
                var tempValue = this.tempValue, range = this.range, mode = this.mode, isOpen = this.isOpen, startText = this.startText, endText = this.endText, global2 = this.global, outValue = this.value;
                var selectedDates = this.getDates(outValue);
                var selectedFmtDates = selectedDates.map(function(d) {
                  return _this.formatDate(d);
                });
                if (tempValue) {
                  return tempValue;
                }
                var strMode = range ? "range" : mode;
                var value = "";
                switch (strMode) {
                  case "time":
                  case "date":
                  case "month":
                  case "year":
                    value = selectedFmtDates.join("");
                    break;
                  case "range":
                    if (isOpen) {
                      value = [startText, endText].join(global2.rangeSeparator);
                    } else if (selectedFmtDates.length > 1) {
                      value = [selectedFmtDates[0], selectedFmtDates[1]].join(global2.rangeSeparator);
                    }
                    break;
                }
                return value;
              },
              set: function set2(value) {
                var min2 = this.min, dateFormat = this.dateFormat;
                if (value) {
                  if (String(value).length >= String(this.formatDate(min2 || new Date())).length && dayjs(value, dateFormat)) {
                    this.tempValue = "";
                    this.setDate(value, true);
                  } else {
                    this.tempValue = value;
                  }
                }
              }
            },
            rangeText: {
              get: function get2() {
                var range = this.startText;
                if (this.range) {
                  range += " ".concat(this.global.rangeSeparator, " ").concat(this.endText);
                }
                return range;
              },
              set: function set2(value) {
                if (this.value) {
                  this.setDate(value, false);
                }
              }
            },
            min: function min2() {
              var disableDate = this.disableDate || {};
              var before = disableDate.before;
              return before ? new Date(before) : null;
            },
            max: function max2() {
              var disableDate = this.disableDate || {};
              var after = disableDate.after;
              return after ? new Date(after) : null;
            },
            classes: function classes() {
              var _ref;
              return [this.COMPONENT_NAME, this.SIZE[this.size] || "", (_ref = {}, _defineProperty$3(_ref, "".concat(this.COMPONENT_NAME, "--month-picker"), this.mode === "year" || this.mode === "month"), _defineProperty$3(_ref, "".concat(this.classPrefix, "-inline"), this.inline || this.inlineView), _ref)];
            },
            pickerStyles: function pickerStyles() {
              var _ref2;
              return _ref2 = {}, _defineProperty$3(_ref2, "".concat(this.COMPONENT_NAME, "__container"), true), _defineProperty$3(_ref2, "".concat(this.COMPONENT_NAME, "--open"), this.isOpen || this.inlineView), _defineProperty$3(_ref2, "".concat(this.COMPONENT_NAME, "--calendar-inline-view"), this.inlineView), _defineProperty$3(_ref2, "".concat(this.COMPONENT_NAME, "--range"), this.range), _ref2;
            }
          },
          mounted: function mounted() {
            this.attachDatePicker();
          },
          methods: {
            handleTimePick: function handleTimePick(col, time2, index2) {
              if (!this.range || index2 === 0) {
                var start2 = new Date(this.start);
                start2["set".concat(firstUpperCase(col), "s")](time2);
                this.start = start2;
                this.startTimeValue = dayjs(start2);
                this.dateClick(new Date(start2));
              } else {
                var end2 = new Date(this.end);
                end2["set".concat(firstUpperCase(col), "s")](time2);
                this.end = end2;
                this.endTimeValue = dayjs(end2);
                this.dateClick(new Date(end2));
              }
            },
            attachDatePicker: function attachDatePicker() {
              var startDate = new Date();
              var endDate = new Date();
              this.dateFormat = this.format;
              var start2 = new Date(startDate);
              var end2 = new Date(endDate);
              if (!this.range) {
                end2 = new Date(startDate);
              }
              this.start = start2;
              this.end = end2;
              var val = this.value || this.defaultValue || "";
              this.setDate(val, false);
              if (this.inlineView) {
                this.open();
              }
            },
            onNativeInput: function onNativeInput(event) {
              var val = event.target.value;
              this.formattedValue = val;
              var d1 = this.parseDate(val);
              if (d1 instanceof Date) {
                var d2 = this.formatDate(d1);
                emitEvent(this, "input", d2);
              }
            },
            onNativeFocus: function onNativeFocus(event) {
              if (!this.isOpen) {
                this.open();
              }
              emitEvent(this, "focus", event);
            },
            onClick: function onClick(event) {
              if (!this.isOpen) {
                this.open();
              }
              emitEvent(this, "click", event);
            },
            normalizeDateTime: function normalizeDateTime(value, oldValue) {
              var newDate = dayjs(value);
              var oldDate = dayjs(oldValue);
              if (this.enableTimePicker) {
                newDate.hour(oldDate.hour());
                newDate.minute(oldDate.minute());
                newDate.second(oldDate.second());
                newDate.millisecond(oldDate.millisecond());
              }
              return newDate.toDate();
            },
            dateClick: function dateClick(value) {
              var mode = this.range ? "range" : this.mode;
              var start2 = this.start;
              var end2 = this.end;
              if (this.showTime) {
                mode = "time";
              }
              switch (mode) {
                case "time":
                  this.selectedDates = this.range ? [this.start, this.end] : [value];
                  this.clickedApply(false);
                  break;
                case "year":
                case "month":
                case "date":
                  this.start = this.normalizeDateTime(value, start2);
                  this.selectedDates = [this.start];
                  this.clickedApply(!this.enableTimePicker);
                  break;
                case "range":
                  if (this.inSelection) {
                    this.inSelection = false;
                    this.start = this.normalizeDateTime(value[0], end2);
                    this.end = this.normalizeDateTime(value[1], end2);
                    if (this.end < this.start) {
                      this.inSelection = true;
                      this.start = this.normalizeDateTime(value[0], start2);
                    }
                  } else {
                    this.start = this.normalizeDateTime(value[0], start2);
                    this.end = this.normalizeDateTime(value[1], end2);
                    this.inSelection = true;
                  }
                  this.clickedApply(!this.enableTimePicker);
                  break;
              }
            },
            toggle: function toggle() {
              if (!this.disabled) {
                if (this.isOpen) {
                  this.close();
                } else {
                  this.open();
                }
              }
            },
            open: function open2() {
              var _this2 = this;
              if (!this.disabled) {
                var formattedValue = this.formattedValue;
                if (formattedValue) {
                  this.setDate(formattedValue);
                }
                this.tempValue = "";
                this.isOpen = true;
                vue.nextTick().then(function() {
                  return emitEvent(_this2, "open", _this2.selectedDates);
                });
              }
            },
            close: function close2() {
              if (!this.disabled) {
                this.tempValue = "";
                this.isOpen = false;
                this.showTime = false;
                emitEvent(this, "close", this.selectedDates);
              }
            },
            clickedApply: function clickedApply() {
              var _this3 = this;
              var closePicker = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
              if (this.range) {
                this.selectedDates = [this.start, this.end];
              }
              var selectedDates = this.selectedDates.map(function(d) {
                var fd = _this3.formatDate(d);
                return fd;
              });
              this.submitInput(selectedDates, true);
              if (closePicker) {
                var mode = this.range ? "range" : this.mode;
                var multiSeparator = this.multiSeparator;
                switch (mode) {
                  case "date":
                  case "month":
                  case "year":
                    emitEvent(this, "apply", selectedDates.join(multiSeparator));
                    break;
                  case "range":
                    emitEvent(this, "apply", selectedDates);
                    break;
                }
                this.close();
              }
            },
            toggleTime: function toggleTime() {
              this.startTimeValue = dayjs(this.start);
              this.endTimeValue = dayjs(this.end);
              this.showTime = !this.showTime;
            },
            clickRange: function clickRange(value) {
              if (Array.isArray(value)) {
                var _value = _slicedToArray(value, 2), start2 = _value[0], end2 = _value[1];
                this.start = dayjs(start2).toDate();
                this.end = dayjs(end2 || start2).toDate();
                this.monthDate = dayjs(start2).toDate();
              } else {
                this.start = dayjs(value).toDate();
                this.end = dayjs(value).toDate();
                this.monthDate = dayjs(value).toDate();
              }
              this.clickedApply();
            },
            clear: function clear() {
              var triggerChange = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
              this.close();
              if (!this.disabled) {
                var selectedDates = [];
                this.selectedDates = selectedDates;
                this.formattedValue = "";
                this.start = new Date();
                this.end = new Date();
                this.submitInput(selectedDates, triggerChange);
              }
            },
            submitInput: function submitInput(selectedDates) {
              var triggerChange = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
              var multiSeparator = this.multiSeparator;
              var mode = this.range ? "range" : this.mode;
              switch (mode) {
                case "date":
                case "month":
                case "year":
                  emitEvent(this, "input", selectedDates.join(multiSeparator));
                  if (triggerChange) {
                    emitEvent(this, "change", selectedDates.join(multiSeparator));
                  }
                  break;
                case "range":
                  emitEvent(this, "input", selectedDates);
                  if (triggerChange) {
                    emitEvent(this, "change", selectedDates);
                  }
                  break;
              }
            },
            parseDate: function parseDate() {
              var value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
              var format2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
              if (value instanceof Date) {
                return new Date(value);
              }
              if (format2) {
                var oDate = dayjs(value, format2);
                if (oDate.isValid()) {
                  return new Date(oDate.toDate());
                }
                return false;
              }
              var d2 = dayjs(value);
              if (d2.isValid()) {
                return new Date(d2.toDate());
              }
              return false;
            },
            isEnabled: function isEnabled(value) {
              var min2 = this.min, max2 = this.max, disableDate = this.disableDate, dateFormat = this.dateFormat;
              if (!disableDate) {
                return true;
              }
              if (typeof disableDate === "function") {
                return !disableDate(value);
              }
              if (Array.isArray(disableDate)) {
                var isIncludes = false;
                var formatedDisabledDate = disableDate.map(function(item) {
                  return dayjs(item, dateFormat);
                });
                formatedDisabledDate.forEach(function(item) {
                  if (item.isSame(dayjs(value))) {
                    isIncludes = true;
                  }
                });
                return !isIncludes;
              }
              if (max2 && min2) {
                var compareMin = dayjs(new Date(min2)).startOf("day");
                var compareMax = dayjs(new Date(max2)).startOf("day");
                return dayjs(value).isBetween(compareMin, compareMax, null, "[]");
              }
              var from = disableDate.from, to = disableDate.to;
              if (from && to) {
                var compareMin = dayjs(new Date(from)).startOf("day");
                var compareMax = dayjs(new Date(to)).startOf("day");
                return !dayjs(value).isBetween(compareMin, compareMax, null, "[]");
              }
              return true;
            },
            setDate: function setDate() {
              var inputDate = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
              var triggerChange = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              if (inputDate !== 0 && !inputDate || inputDate instanceof Array && inputDate.length === 0) {
                return this.clear(triggerChange);
              }
              var selectedDates = this.getDates(inputDate);
              this.selectedDates = selectedDates;
              if (selectedDates.length > 0) {
                var _selectedDates = _slicedToArray(selectedDates, 2), start2 = _selectedDates[0], end2 = _selectedDates[1];
                this.start = start2;
                this.end = end2 || start2;
              }
            },
            getDates: function getDates() {
              var _this4 = this;
              var inputDate = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
              if (inputDate !== 0 && !inputDate || inputDate instanceof Array && inputDate.length === 0) {
                return [];
              }
              var format2 = this.dateFormat || "";
              var dates = [];
              if (inputDate instanceof Array) {
                dates = inputDate.map(function(d) {
                  var d1 = _this4.parseDate(d, format2);
                  return d1;
                });
              } else if (inputDate instanceof Date || typeof inputDate === "number") {
                dates = [this.parseDate(inputDate, format2)];
              } else if (typeof inputDate === "string") {
                var mode = this.range ? "range" : this.mode;
                switch (mode) {
                  case "date":
                  case "month":
                  case "year":
                    dates = [this.parseDate(inputDate, format2)];
                    break;
                  case "range":
                    dates = inputDate.split(this.global.rangeSeparator || "-").map(function(d) {
                      var d1 = _this4.parseDate(d, format2);
                      return d1;
                    });
                    break;
                }
              }
              var selectedDates = dates.filter(function(d) {
                var isEnable = d instanceof Date && _this4.isEnabled(d);
                return isEnable;
              });
              selectedDates.sort(function(a, b2) {
                return a.getTime() - b2.getTime();
              });
              return selectedDates;
            },
            formatDate: function formatDate(date) {
              var format2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
              var dateFormat = format2 || this.dateFormat || this.global.format;
              var arrTime = ["H", "h", "m", "s"];
              var hasTime = arrTime.some(function(f) {
                return String(dateFormat).includes(f);
              });
              if (this.enableTimePicker && !hasTime) {
                dateFormat = [dateFormat, "HH:mm:ss"].join(" ");
              }
              var d1 = new Date(date);
              return dayjs(d1).format(dateFormat);
            },
            getPlaceholderText: function getPlaceholderText() {
              var _this$global, _this$global$placehol;
              var placeholder = this.placeholder, mode = this.mode;
              var placeholderStr = placeholder || ((_this$global = this.global) === null || _this$global === void 0 ? void 0 : (_this$global$placehol = _this$global.placeholder) === null || _this$global$placehol === void 0 ? void 0 : _this$global$placehol[mode]);
              if (placeholder && Array.isArray(placeholder)) {
                placeholderStr = placeholder.join(this.global.rangeSeparator);
              }
              return placeholderStr;
            },
            handleTInputFocus: function handleTInputFocus() {
              var _this5 = this;
              vue.nextTick(function() {
                _this5.$refs["native"].blur();
              });
            }
          },
          render: function render() {
            var _this6 = this;
            var popupProps2 = this.popupProps, disabled = this.disabled, clearable = this.clearable, allowInput = this.allowInput, size = this.size, inputProps = this.inputProps, enableTimePicker = this.enableTimePicker, mode = this.mode, range = this.range, presets = this.presets, firstDayOfWeek = this.firstDayOfWeek;
            var start2 = this.start, end2 = this.end, showTime = this.showTime, startTimeValue = this.startTimeValue, global2 = this.global, isOpen = this.isOpen, endTimeValue = this.endTimeValue;
            var panelProps2 = {
              value: range ? [start2, end2] : start2,
              mode,
              firstDayOfWeek: firstDayOfWeek === void 0 ? 1 : firstDayOfWeek,
              disableDate: function disableDate(d) {
                return !_this6.isEnabled(d);
              },
              onChange: this.dateClick,
              global: this.global
            };
            var onPick = function onPick2(date, context) {
              emitEvent(_this6, "pick", date, context);
            };
            var panelComponent = range ? vue.createVNode(vue.resolveComponent("t-date-range"), _objectSpread$19(_objectSpread$19({}, panelProps2), {}, {
              onPick
            }), null) : vue.createVNode(vue.resolveComponent("t-date"), panelProps2, null);
            var popupContent = function popupContent2() {
              return vue.createVNode("div", {
                "ref": "dropdownPopup",
                "class": _this6.pickerStyles
              }, [enableTimePicker && showTime && vue.createVNode("div", null, [vue.createVNode(PickerPanel, {
                "ref": "timePickerPanel",
                "format": extractTimeFormat(_this6.dateFormat) || "HH:mm:ss",
                "cols": [EPickerCols.hour, EPickerCols.minute, EPickerCols.second],
                "steps": [1, 1, 1],
                "value": !range ? [startTimeValue] : [startTimeValue, endTimeValue],
                "onTimePick": _this6.handleTimePick,
                "isShowPanel": showTime,
                "isFooterDisplay": false
              }, null)]), !showTime && panelComponent, (!!presets || enableTimePicker) && vue.createVNode("div", {
                "class": "".concat(_this6.classPrefix, "-date-picker__footer")
              }, [vue.createVNode(TCalendarPresets, {
                "presets": presets,
                "global": global2,
                "onClick": range ? _this6.clickRange : _this6.dateClick
              }, null), enableTimePicker && vue.createVNode("div", {
                "class": "".concat(_this6.COMPONENT_NAME, "--apply")
              }, [enableTimePicker && vue.createVNode(Button, {
                "theme": "primary",
                "variant": "text",
                "onClick": _this6.toggleTime
              }, {
                "default": function _default() {
                  return [showTime ? global2.selectDate : global2.selectTime];
                }
              }), vue.createVNode(Button, {
                "theme": "primary",
                "onClick": function onClick() {
                  return _this6.clickedApply();
                }
              }, {
                "default": function _default() {
                  return [global2.confirm];
                }
              })])])]);
            };
            var inputClassNames = ["".concat(this.classPrefix, "-form-controls"), _defineProperty$3({}, this.STATUS.active, this.isOpen)];
            var prefixIcon = renderTNodeJSX(this, "prefixIcon");
            var suffixIconSlot = renderTNodeJSX(this, "suffixIcon");
            var suffixIcon = function suffixIcon2() {
              if (suffixIconSlot) {
                return suffixIconSlot;
              }
              if (enableTimePicker) {
                return vue.createVNode(time, null, null);
              }
              return vue.createVNode(calendar, null, null);
            };
            return vue.createVNode("div", {
              "class": this.classes
            }, [vue.createVNode(vue.resolveComponent("t-popup"), {
              "ref": "popup",
              "class": "".concat(this.COMPONENT_NAME, "__popup-reference"),
              "trigger": "click",
              "placement": "bottom-left",
              "disabled": disabled,
              "showArrow": false,
              "visible": isOpen,
              "popupProps": popupProps2,
              "overlayClassName": this.COMPONENT_NAME,
              "content": popupContent,
              "expandAnimation": true,
              "onVisibleChange": function onVisibleChange(visible, context) {
                if (context.trigger === "document") {
                  _this6.toggle();
                }
              }
            }, {
              "default": function _default() {
                return [vue.createVNode("div", {
                  "class": inputClassNames,
                  "onClick": _this6.toggle
                }, [vue.createVNode(vue.resolveComponent("t-input"), {
                  "ref": "native",
                  "modelValue": _this6.formattedValue,
                  "onUpdate:modelValue": function onUpdateModelValue($event) {
                    return _this6.formattedValue = $event;
                  },
                  "disabled": disabled,
                  "clearable": clearable,
                  "placeholder": _this6.getPlaceholderText(),
                  "allowInput": allowInput ? 1 : 0,
                  "size": size,
                  "inputProps": inputProps,
                  "onClear": function onClear(context) {
                    context.e.stopPropagation();
                    _this6.clear(true);
                  },
                  "focus": _this6.onNativeFocus,
                  "input": _this6.onNativeInput,
                  "click": _this6.onClick,
                  "suffixIcon": suffixIcon,
                  "prefixIcon": prefixIcon,
                  "onFocus": _this6.handleTInputFocus
                }, null)])];
              }
            })]);
          }
        });
        var DatePicker = withInstall(mapProps([{
          name: "value",
          event: "change",
          alias: ["modelValue"]
        }])(_DatePicker));
        var baseGetTag$1 = _baseGetTag, isObjectLike$1 = isObjectLike_1;
        var boolTag = "[object Boolean]";
        function isBoolean(value) {
          return value === true || value === false || isObjectLike$1(value) && baseGetTag$1(value) == boolTag;
        }
        var isBoolean_1 = isBoolean;
        var props$v = {
          colon: Boolean,
          data: {
            type: Object,
            "default": function _default() {
              return {};
            }
          },
          disabled: {
            type: Boolean,
            "default": void 0
          },
          errorMessage: {
            type: Object
          },
          formControlledComponents: {
            type: Array
          },
          labelAlign: {
            type: String,
            "default": "right",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["left", "right", "top"].includes(val);
            }
          },
          labelWidth: {
            type: [String, Number],
            "default": "100px"
          },
          layout: {
            type: String,
            "default": "vertical",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["vertical", "inline"].includes(val);
            }
          },
          preventSubmitDefault: {
            type: Boolean,
            "default": true
          },
          requiredMark: {
            type: Boolean,
            "default": void 0
          },
          resetType: {
            type: String,
            "default": "empty",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["empty", "initial"].includes(val);
            }
          },
          rules: {
            type: Object
          },
          scrollToFirstError: {
            type: String,
            "default": "",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["smooth", "auto", ""].includes(val);
            }
          },
          showErrorMessage: {
            type: Boolean,
            "default": true
          },
          statusIcon: {
            type: [Boolean, Function],
            "default": void 0
          },
          submitWithWarningMessage: Boolean,
          onReset: Function,
          onSubmit: Function,
          onValidate: Function
        };
        function ownKeys$19(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$18(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$19(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$19(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _Form = vue.defineComponent({
          name: "TForm",
          props: _objectSpread$18({}, props$v),
          setup: function setup(props2, _ref) {
            var expose = _ref.expose;
            var renderContent2 = useTNodeJSX();
            var _toRefs = vue.toRefs(props2), disabled = _toRefs.disabled;
            vue.provide("formDisabled", {
              disabled
            });
            var formRef = vue.ref(null);
            var children = vue.ref([]);
            var _toRefs2 = vue.toRefs(props2), showErrorMessage = _toRefs2.showErrorMessage, labelWidth = _toRefs2.labelWidth, labelAlign = _toRefs2.labelAlign, data = _toRefs2.data, colon = _toRefs2.colon, requiredMark = _toRefs2.requiredMark, rules = _toRefs2.rules, errorMessage = _toRefs2.errorMessage, resetType = _toRefs2.resetType;
            vue.provide(FormInjectionKey, vue.reactive({
              showErrorMessage,
              labelWidth,
              labelAlign,
              data,
              colon,
              requiredMark,
              rules,
              errorMessage,
              resetType,
              children,
              renderContent: renderContent2
            }));
            var COMPONENT_NAME2 = usePrefixClass("form");
            var CLASS_NAMES = useCLASSNAMES$1();
            var formClass = vue.computed(function() {
              return [CLASS_NAMES.value.form, _defineProperty$3({}, "".concat(COMPONENT_NAME2.value, "-inline"), props2.layout === "inline")];
            });
            var FORM_ITEM_CLASS_PREFIX = usePrefixClass("form-item__");
            var getFirstError = function getFirstError2(result) {
              if (isBoolean_1(result))
                return "";
              var _Object$keys = Object.keys(result), _Object$keys2 = _slicedToArray(_Object$keys, 1), firstKey = _Object$keys2[0];
              if (props2.scrollToFirstError) {
                scrollTo2(".".concat(FORM_ITEM_CLASS_PREFIX.value + firstKey));
              }
              var resArr = result[firstKey];
              if (!isArray_1(resArr))
                return "";
              return resArr.filter(function(item) {
                return !item.result;
              })[0].message;
            };
            var scrollTo2 = function scrollTo3(selector) {
              var _formRef$value;
              var dom = (_formRef$value = formRef.value) === null || _formRef$value === void 0 ? void 0 : _formRef$value.querySelector(selector);
              var behavior = props2.scrollToFirstError;
              if (behavior) {
                dom && dom.scrollIntoView({
                  behavior
                });
              }
            };
            var needValidate = function needValidate2(name, fields) {
              if (!fields || !Array.isArray(fields))
                return true;
              return fields.indexOf(name) !== -1;
            };
            var validate2 = /* @__PURE__ */ function() {
              var _ref3 = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee(param) {
                var _props2$onValidate;
                var _ref4, fields, _ref4$trigger, trigger, list, arr, r, result;
                return regenerator.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _ref4 = param || {}, fields = _ref4.fields, _ref4$trigger = _ref4.trigger, trigger = _ref4$trigger === void 0 ? "all" : _ref4$trigger;
                        list = children.value.filter(function(child) {
                          return isFunction_1(child.validate) && needValidate(child.name, fields);
                        }).map(function(child) {
                          return child.validate(trigger);
                        });
                        _context.next = 4;
                        return Promise.all(list);
                      case 4:
                        arr = _context.sent;
                        r = arr.reduce(function(r2, err) {
                          return Object.assign(r2 || {}, err);
                        }, {});
                        Object.keys(r).forEach(function(key) {
                          if (r[key] === true) {
                            delete r[key];
                          }
                        });
                        result = isEmpty_1(r) ? true : r;
                        (_props2$onValidate = props2.onValidate) === null || _props2$onValidate === void 0 ? void 0 : _props2$onValidate.call(props2, {
                          validateResult: result,
                          firstError: getFirstError(result)
                        });
                        return _context.abrupt("return", result);
                      case 10:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));
              return function validate3(_x) {
                return _ref3.apply(this, arguments);
              };
            }();
            var submit = function submit2(e) {
              if (props2.preventSubmitDefault && e) {
                e === null || e === void 0 ? void 0 : e.preventDefault();
                e === null || e === void 0 ? void 0 : e.stopPropagation();
              }
              validate2().then(function(r) {
                var _props2$onSubmit;
                (_props2$onSubmit = props2.onSubmit) === null || _props2$onSubmit === void 0 ? void 0 : _props2$onSubmit.call(props2, {
                  validateResult: r,
                  firstError: getFirstError(r),
                  e
                });
              });
            };
            var reset = function reset2(e) {
              var _props2$onReset;
              if (props2.preventSubmitDefault) {
                e === null || e === void 0 ? void 0 : e.preventDefault();
                e === null || e === void 0 ? void 0 : e.stopPropagation();
              }
              children.value.filter(function(child) {
                return isFunction_1(child.resetField);
              }).forEach(function(child) {
                return child.resetField();
              });
              (_props2$onReset = props2.onReset) === null || _props2$onReset === void 0 ? void 0 : _props2$onReset.call(props2, {
                e
              });
            };
            var clearValidate = function clearValidate2(fields) {
              children.value.forEach(function(child) {
                if (isFunction_1(child.resetHandler) && needValidate(child.name, fields)) {
                  child.resetHandler();
                }
              });
            };
            var setValidateMessage = function setValidateMessage2(validateMessage) {
              var keys2 = Object.keys(validateMessage);
              if (!keys2.length)
                return;
              var list = children.value.filter(function(child) {
                return isFunction_1(child.setValidateMessage) && keys2.includes(child.name);
              }).map(function(child) {
                return child.setValidateMessage(validateMessage[child.name]);
              });
              Promise.all(list);
            };
            expose({
              validate: validate2,
              submit,
              reset,
              clearValidate,
              setValidateMessage
            });
            return function() {
              return vue.createVNode("form", {
                "ref": formRef,
                "class": formClass.value,
                "onSubmit": function onSubmit(e) {
                  return submit(e);
                },
                "onReset": function onReset(e) {
                  return reset(e);
                }
              }, [renderContent2("default")]);
            };
          }
        });
        function isNil(value) {
          return value == null;
        }
        var isNil_1 = isNil;
        var copyObject$1 = _copyObject, createAssigner = _createAssigner, keysIn = keysIn_1;
        var assignInWith$1 = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject$1(source, keysIn(source), object, customizer);
        });
        var assignInWith_1 = assignInWith$1;
        var baseGetTag = _baseGetTag, isObjectLike = isObjectLike_1, isPlainObject$1 = isPlainObject_1;
        var domExcTag = "[object DOMException]", errorTag = "[object Error]";
        function isError$2(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject$1(value);
        }
        var isError_1 = isError$2;
        var apply = _apply, baseRest$1 = _baseRest, isError$1 = isError_1;
        var attempt$1 = baseRest$1(function(func, args) {
          try {
            return apply(func, void 0, args);
          } catch (e) {
            return isError$1(e) ? e : new Error(e);
          }
        });
        var attempt_1 = attempt$1;
        var arrayMap$1 = _arrayMap;
        function baseValues$1(object, props2) {
          return arrayMap$1(props2, function(key) {
            return object[key];
          });
        }
        var _baseValues = baseValues$1;
        var eq = eq_1;
        var objectProto$1 = Object.prototype;
        var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
        function customDefaultsAssignIn$1(objValue, srcValue, key, object) {
          if (objValue === void 0 || eq(objValue, objectProto$1[key]) && !hasOwnProperty$1.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        var _customDefaultsAssignIn = customDefaultsAssignIn$1;
        var stringEscapes = {
          "\\": "\\",
          "'": "'",
          "\n": "n",
          "\r": "r",
          "\u2028": "u2028",
          "\u2029": "u2029"
        };
        function escapeStringChar$1(chr) {
          return "\\" + stringEscapes[chr];
        }
        var _escapeStringChar = escapeStringChar$1;
        var reInterpolate$2 = /<%=([\s\S]+?)%>/g;
        var _reInterpolate = reInterpolate$2;
        var basePropertyOf = _basePropertyOf;
        var htmlEscapes = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#39;"
        };
        var escapeHtmlChar$1 = basePropertyOf(htmlEscapes);
        var _escapeHtmlChar = escapeHtmlChar$1;
        var escapeHtmlChar = _escapeHtmlChar, toString$1 = toString_1;
        var reUnescapedHtml = /[&<>"']/g, reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
        function escape$2(string) {
          string = toString$1(string);
          return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        var _escape = escape$2;
        var reEscape$1 = /<%-([\s\S]+?)%>/g;
        var _reEscape = reEscape$1;
        var reEvaluate$1 = /<%([\s\S]+?)%>/g;
        var _reEvaluate = reEvaluate$1;
        var escape$1 = _escape, reEscape = _reEscape, reEvaluate = _reEvaluate, reInterpolate$1 = _reInterpolate;
        var templateSettings$1 = {
          "escape": reEscape,
          "evaluate": reEvaluate,
          "interpolate": reInterpolate$1,
          "variable": "",
          "imports": {
            "_": {
              "escape": escape$1
            }
          }
        };
        var templateSettings_1 = templateSettings$1;
        var assignInWith = assignInWith_1, attempt = attempt_1, baseValues = _baseValues, customDefaultsAssignIn = _customDefaultsAssignIn, escapeStringChar = _escapeStringChar, isError = isError_1, isIterateeCall = _isIterateeCall, keys$1 = keys_1, reInterpolate = _reInterpolate, templateSettings = templateSettings_1, toString = toString_1;
        var INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
        var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
        var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
        var reNoMatch = /($^)/;
        var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
        var objectProto = Object.prototype;
        var hasOwnProperty = objectProto.hasOwnProperty;
        function template(string, options, guard) {
          var settings = templateSettings.imports._.templateSettings || templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = void 0;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys$1(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index2 = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
          var sourceURL = hasOwnProperty.call(options, "sourceURL") ? "//# sourceURL=" + (options.sourceURL + "").replace(/\s/g, " ") + "\n" : "";
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset2) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string.slice(index2, offset2).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index2 = offset2 + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result = attempt(function() {
            return Function(importsKeys, sourceURL + "return " + source).apply(void 0, importsValues);
          });
          result.source = source;
          if (isError(result)) {
            throw result;
          }
          return result;
        }
        var template_1 = template;
        var isDate$1 = { exports: {} };
        var merge = { exports: {} };
        (function(module2, exports3) {
          Object.defineProperty(exports3, "__esModule", {
            value: true
          });
          exports3["default"] = merge2;
          function merge2() {
            var obj = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            var defaults2 = arguments.length > 1 ? arguments[1] : void 0;
            for (var key in defaults2) {
              if (typeof obj[key] === "undefined") {
                obj[key] = defaults2[key];
              }
            }
            return obj;
          }
          module2.exports = exports3["default"];
          module2.exports["default"] = exports3["default"];
        })(merge, merge.exports);
        (function(module2, exports3) {
          Object.defineProperty(exports3, "__esModule", {
            value: true
          });
          exports3["default"] = isDate2;
          var _merge = _interopRequireDefault(merge.exports);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              "default": obj
            };
          }
          function _slicedToArray2(arr, i2) {
            return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i2) || _unsupportedIterableToArray2(arr, i2) || _nonIterableRest2();
          }
          function _nonIterableRest2() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          function _iterableToArrayLimit2(arr, i2) {
            if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
              return;
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = void 0;
            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i2 && _arr.length === i2)
                  break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i["return"] != null)
                  _i["return"]();
              } finally {
                if (_d)
                  throw _e;
              }
            }
            return _arr;
          }
          function _arrayWithHoles2(arr) {
            if (Array.isArray(arr))
              return arr;
          }
          function _createForOfIteratorHelper2(o, allowArrayLike) {
            var it;
            if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
              if (Array.isArray(o) || (it = _unsupportedIterableToArray2(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it)
                  o = it;
                var i2 = 0;
                var F = function F2() {
                };
                return {
                  s: F,
                  n: function n() {
                    if (i2 >= o.length)
                      return {
                        done: true
                      };
                    return {
                      done: false,
                      value: o[i2++]
                    };
                  },
                  e: function e(_e2) {
                    throw _e2;
                  },
                  f: F
                };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var normalCompletion = true, didErr = false, err;
            return {
              s: function s() {
                it = o[Symbol.iterator]();
              },
              n: function n() {
                var step = it.next();
                normalCompletion = step.done;
                return step;
              },
              e: function e(_e3) {
                didErr = true;
                err = _e3;
              },
              f: function f() {
                try {
                  if (!normalCompletion && it["return"] != null)
                    it["return"]();
                } finally {
                  if (didErr)
                    throw err;
                }
              }
            };
          }
          function _unsupportedIterableToArray2(o, minLen) {
            if (!o)
              return;
            if (typeof o === "string")
              return _arrayLikeToArray2(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            if (n === "Object" && o.constructor)
              n = o.constructor.name;
            if (n === "Map" || n === "Set")
              return Array.from(o);
            if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
              return _arrayLikeToArray2(o, minLen);
          }
          function _arrayLikeToArray2(arr, len) {
            if (len == null || len > arr.length)
              len = arr.length;
            for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
              arr2[i2] = arr[i2];
            }
            return arr2;
          }
          var default_date_options = {
            format: "YYYY/MM/DD",
            delimiters: ["/", "-"],
            strictMode: false
          };
          function isValidFormat(format2) {
            return /(^(y{4}|y{2})[.\/-](m{1,2})[.\/-](d{1,2})$)|(^(m{1,2})[.\/-](d{1,2})[.\/-]((y{4}|y{2})$))|(^(d{1,2})[.\/-](m{1,2})[.\/-]((y{4}|y{2})$))/gi.test(format2);
          }
          function zip(date, format2) {
            var zippedArr = [], len = Math.min(date.length, format2.length);
            for (var i2 = 0; i2 < len; i2++) {
              zippedArr.push([date[i2], format2[i2]]);
            }
            return zippedArr;
          }
          function isDate2(input, options) {
            if (typeof options === "string") {
              options = (0, _merge["default"])({
                format: options
              }, default_date_options);
            } else {
              options = (0, _merge["default"])(options, default_date_options);
            }
            if (typeof input === "string" && isValidFormat(options.format)) {
              var formatDelimiter = options.delimiters.find(function(delimiter) {
                return options.format.indexOf(delimiter) !== -1;
              });
              var dateDelimiter = options.strictMode ? formatDelimiter : options.delimiters.find(function(delimiter) {
                return input.indexOf(delimiter) !== -1;
              });
              var dateAndFormat = zip(input.split(dateDelimiter), options.format.toLowerCase().split(formatDelimiter));
              var dateObj = {};
              var _iterator = _createForOfIteratorHelper2(dateAndFormat), _step;
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                  var _step$value = _slicedToArray2(_step.value, 2), dateWord = _step$value[0], formatWord = _step$value[1];
                  if (dateWord.length !== formatWord.length) {
                    return false;
                  }
                  dateObj[formatWord.charAt(0)] = dateWord;
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
              return new Date("".concat(dateObj.m, "/").concat(dateObj.d, "/").concat(dateObj.y)).getDate() === +dateObj.d;
            }
            if (!options.strictMode) {
              return Object.prototype.toString.call(input) === "[object Date]" && isFinite(input);
            }
            return false;
          }
          module2.exports = exports3["default"];
          module2.exports["default"] = exports3["default"];
        })(isDate$1, isDate$1.exports);
        var isDate = /* @__PURE__ */ getDefaultExportFromCjs(isDate$1.exports);
        var isEmail$1 = { exports: {} };
        var assertString = { exports: {} };
        (function(module2, exports3) {
          Object.defineProperty(exports3, "__esModule", {
            value: true
          });
          exports3["default"] = assertString2;
          function _typeof2(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof2 = function _typeof3(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof2 = function _typeof3(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof2(obj);
          }
          function assertString2(input) {
            var isString2 = typeof input === "string" || input instanceof String;
            if (!isString2) {
              var invalidType = _typeof2(input);
              if (input === null)
                invalidType = "null";
              else if (invalidType === "object")
                invalidType = input.constructor.name;
              throw new TypeError("Expected a string but received a ".concat(invalidType));
            }
          }
          module2.exports = exports3["default"];
          module2.exports["default"] = exports3["default"];
        })(assertString, assertString.exports);
        var isByteLength = { exports: {} };
        (function(module2, exports3) {
          Object.defineProperty(exports3, "__esModule", {
            value: true
          });
          exports3["default"] = isByteLength2;
          var _assertString = _interopRequireDefault(assertString.exports);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              "default": obj
            };
          }
          function _typeof2(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof2 = function _typeof3(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof2 = function _typeof3(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof2(obj);
          }
          function isByteLength2(str, options) {
            (0, _assertString["default"])(str);
            var min2;
            var max2;
            if (_typeof2(options) === "object") {
              min2 = options.min || 0;
              max2 = options.max;
            } else {
              min2 = arguments[1];
              max2 = arguments[2];
            }
            var len = encodeURI(str).split(/%..|./).length - 1;
            return len >= min2 && (typeof max2 === "undefined" || len <= max2);
          }
          module2.exports = exports3["default"];
          module2.exports["default"] = exports3["default"];
        })(isByteLength, isByteLength.exports);
        var isFQDN = { exports: {} };
        (function(module2, exports3) {
          Object.defineProperty(exports3, "__esModule", {
            value: true
          });
          exports3["default"] = isFQDN2;
          var _assertString = _interopRequireDefault(assertString.exports);
          var _merge = _interopRequireDefault(merge.exports);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              "default": obj
            };
          }
          var default_fqdn_options = {
            require_tld: true,
            allow_underscores: false,
            allow_trailing_dot: false,
            allow_numeric_tld: false,
            allow_wildcard: false
          };
          function isFQDN2(str, options) {
            (0, _assertString["default"])(str);
            options = (0, _merge["default"])(options, default_fqdn_options);
            if (options.allow_trailing_dot && str[str.length - 1] === ".") {
              str = str.substring(0, str.length - 1);
            }
            if (options.allow_wildcard === true && str.indexOf("*.") === 0) {
              str = str.substring(2);
            }
            var parts = str.split(".");
            var tld = parts[parts.length - 1];
            if (options.require_tld) {
              if (parts.length < 2) {
                return false;
              }
              if (!/^([a-z\u00A1-\u00A8\u00AA-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
                return false;
              }
              if (/\s/.test(tld)) {
                return false;
              }
            }
            if (!options.allow_numeric_tld && /^\d+$/.test(tld)) {
              return false;
            }
            return parts.every(function(part) {
              if (part.length > 63) {
                return false;
              }
              if (!/^[a-z_\u00a1-\uffff0-9-]+$/i.test(part)) {
                return false;
              }
              if (/[\uff01-\uff5e]/.test(part)) {
                return false;
              }
              if (/^-|-$/.test(part)) {
                return false;
              }
              if (!options.allow_underscores && /_/.test(part)) {
                return false;
              }
              return true;
            });
          }
          module2.exports = exports3["default"];
          module2.exports["default"] = exports3["default"];
        })(isFQDN, isFQDN.exports);
        var isIP = { exports: {} };
        (function(module2, exports3) {
          Object.defineProperty(exports3, "__esModule", {
            value: true
          });
          exports3["default"] = isIP2;
          var _assertString = _interopRequireDefault(assertString.exports);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              "default": obj
            };
          }
          var IPv4SegmentFormat = "(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])";
          var IPv4AddressFormat = "(".concat(IPv4SegmentFormat, "[.]){3}").concat(IPv4SegmentFormat);
          var IPv4AddressRegExp = new RegExp("^".concat(IPv4AddressFormat, "$"));
          var IPv6SegmentFormat = "(?:[0-9a-fA-F]{1,4})";
          var IPv6AddressRegExp = new RegExp("^(" + "(?:".concat(IPv6SegmentFormat, ":){7}(?:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){6}(?:").concat(IPv4AddressFormat, "|:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){5}(?::").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,2}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){4}(?:(:").concat(IPv6SegmentFormat, "){0,1}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,3}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){3}(?:(:").concat(IPv6SegmentFormat, "){0,2}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,4}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){2}(?:(:").concat(IPv6SegmentFormat, "){0,3}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,5}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){1}(?:(:").concat(IPv6SegmentFormat, "){0,4}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,6}|:)|") + "(?::((?::".concat(IPv6SegmentFormat, "){0,5}:").concat(IPv4AddressFormat, "|(?::").concat(IPv6SegmentFormat, "){1,7}|:))") + ")(%[0-9a-zA-Z-.:]{1,})?$");
          function isIP2(str) {
            var version3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
            (0, _assertString["default"])(str);
            version3 = String(version3);
            if (!version3) {
              return isIP2(str, 4) || isIP2(str, 6);
            }
            if (version3 === "4") {
              if (!IPv4AddressRegExp.test(str)) {
                return false;
              }
              var parts = str.split(".").sort(function(a, b2) {
                return a - b2;
              });
              return parts[3] <= 255;
            }
            if (version3 === "6") {
              return !!IPv6AddressRegExp.test(str);
            }
            return false;
          }
          module2.exports = exports3["default"];
          module2.exports["default"] = exports3["default"];
        })(isIP, isIP.exports);
        (function(module2, exports3) {
          Object.defineProperty(exports3, "__esModule", {
            value: true
          });
          exports3["default"] = isEmail2;
          var _assertString = _interopRequireDefault(assertString.exports);
          var _merge = _interopRequireDefault(merge.exports);
          var _isByteLength = _interopRequireDefault(isByteLength.exports);
          var _isFQDN = _interopRequireDefault(isFQDN.exports);
          var _isIP = _interopRequireDefault(isIP.exports);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              "default": obj
            };
          }
          var default_email_options = {
            allow_display_name: false,
            require_display_name: false,
            allow_utf8_local_part: true,
            require_tld: true,
            blacklisted_chars: "",
            ignore_max_length: false,
            host_blacklist: []
          };
          var splitNameAddress = /^([^\x00-\x1F\x7F-\x9F\cX]+)</i;
          var emailUserPart = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i;
          var gmailUserPart = /^[a-z\d]+$/;
          var quotedEmailUser = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i;
          var emailUserUtf8Part = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i;
          var quotedEmailUserUtf8 = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;
          var defaultMaxEmailLength = 254;
          function validateDisplayName(display_name) {
            var display_name_without_quotes = display_name.replace(/^"(.+)"$/, "$1");
            if (!display_name_without_quotes.trim()) {
              return false;
            }
            var contains_illegal = /[\.";<>]/.test(display_name_without_quotes);
            if (contains_illegal) {
              if (display_name_without_quotes === display_name) {
                return false;
              }
              var all_start_with_back_slash = display_name_without_quotes.split('"').length === display_name_without_quotes.split('\\"').length;
              if (!all_start_with_back_slash) {
                return false;
              }
            }
            return true;
          }
          function isEmail2(str, options) {
            (0, _assertString["default"])(str);
            options = (0, _merge["default"])(options, default_email_options);
            if (options.require_display_name || options.allow_display_name) {
              var display_email = str.match(splitNameAddress);
              if (display_email) {
                var display_name = display_email[1];
                str = str.replace(display_name, "").replace(/(^<|>$)/g, "");
                if (display_name.endsWith(" ")) {
                  display_name = display_name.substr(0, display_name.length - 1);
                }
                if (!validateDisplayName(display_name)) {
                  return false;
                }
              } else if (options.require_display_name) {
                return false;
              }
            }
            if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {
              return false;
            }
            var parts = str.split("@");
            var domain = parts.pop();
            var lower_domain = domain.toLowerCase();
            if (options.host_blacklist.includes(lower_domain)) {
              return false;
            }
            var user = parts.join("@");
            if (options.domain_specific_validation && (lower_domain === "gmail.com" || lower_domain === "googlemail.com")) {
              user = user.toLowerCase();
              var username = user.split("+")[0];
              if (!(0, _isByteLength["default"])(username.replace(/\./g, ""), {
                min: 6,
                max: 30
              })) {
                return false;
              }
              var _user_parts = username.split(".");
              for (var i2 = 0; i2 < _user_parts.length; i2++) {
                if (!gmailUserPart.test(_user_parts[i2])) {
                  return false;
                }
              }
            }
            if (options.ignore_max_length === false && (!(0, _isByteLength["default"])(user, {
              max: 64
            }) || !(0, _isByteLength["default"])(domain, {
              max: 254
            }))) {
              return false;
            }
            if (!(0, _isFQDN["default"])(domain, {
              require_tld: options.require_tld
            })) {
              if (!options.allow_ip_domain) {
                return false;
              }
              if (!(0, _isIP["default"])(domain)) {
                if (!domain.startsWith("[") || !domain.endsWith("]")) {
                  return false;
                }
                var noBracketdomain = domain.substr(1, domain.length - 2);
                if (noBracketdomain.length === 0 || !(0, _isIP["default"])(noBracketdomain)) {
                  return false;
                }
              }
            }
            if (user[0] === '"') {
              user = user.slice(1, user.length - 1);
              return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);
            }
            var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;
            var user_parts = user.split(".");
            for (var _i = 0; _i < user_parts.length; _i++) {
              if (!pattern.test(user_parts[_i])) {
                return false;
              }
            }
            if (options.blacklisted_chars) {
              if (user.search(new RegExp("[".concat(options.blacklisted_chars, "]+"), "g")) !== -1)
                return false;
            }
            return true;
          }
          module2.exports = exports3["default"];
          module2.exports["default"] = exports3["default"];
        })(isEmail$1, isEmail$1.exports);
        var isEmail = /* @__PURE__ */ getDefaultExportFromCjs(isEmail$1.exports);
        var isURL$1 = { exports: {} };
        (function(module2, exports3) {
          Object.defineProperty(exports3, "__esModule", {
            value: true
          });
          exports3["default"] = isURL2;
          var _assertString = _interopRequireDefault(assertString.exports);
          var _isFQDN = _interopRequireDefault(isFQDN.exports);
          var _isIP = _interopRequireDefault(isIP.exports);
          var _merge = _interopRequireDefault(merge.exports);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
              "default": obj
            };
          }
          function _slicedToArray2(arr, i2) {
            return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i2) || _unsupportedIterableToArray2(arr, i2) || _nonIterableRest2();
          }
          function _nonIterableRest2() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          function _unsupportedIterableToArray2(o, minLen) {
            if (!o)
              return;
            if (typeof o === "string")
              return _arrayLikeToArray2(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            if (n === "Object" && o.constructor)
              n = o.constructor.name;
            if (n === "Map" || n === "Set")
              return Array.from(o);
            if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
              return _arrayLikeToArray2(o, minLen);
          }
          function _arrayLikeToArray2(arr, len) {
            if (len == null || len > arr.length)
              len = arr.length;
            for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
              arr2[i2] = arr[i2];
            }
            return arr2;
          }
          function _iterableToArrayLimit2(arr, i2) {
            if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
              return;
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = void 0;
            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i2 && _arr.length === i2)
                  break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i["return"] != null)
                  _i["return"]();
              } finally {
                if (_d)
                  throw _e;
              }
            }
            return _arr;
          }
          function _arrayWithHoles2(arr) {
            if (Array.isArray(arr))
              return arr;
          }
          var default_url_options = {
            protocols: ["http", "https", "ftp"],
            require_tld: true,
            require_protocol: false,
            require_host: true,
            require_port: false,
            require_valid_protocol: true,
            allow_underscores: false,
            allow_trailing_dot: false,
            allow_protocol_relative_urls: false,
            allow_fragments: true,
            allow_query_components: true,
            validate_length: true
          };
          var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;
          function isRegExp(obj) {
            return Object.prototype.toString.call(obj) === "[object RegExp]";
          }
          function checkHost(host, matches2) {
            for (var i2 = 0; i2 < matches2.length; i2++) {
              var match = matches2[i2];
              if (host === match || isRegExp(match) && match.test(host)) {
                return true;
              }
            }
            return false;
          }
          function isURL2(url, options) {
            (0, _assertString["default"])(url);
            if (!url || /[\s<>]/.test(url)) {
              return false;
            }
            if (url.indexOf("mailto:") === 0) {
              return false;
            }
            options = (0, _merge["default"])(options, default_url_options);
            if (options.validate_length && url.length >= 2083) {
              return false;
            }
            if (!options.allow_fragments && url.includes("#")) {
              return false;
            }
            if (!options.allow_query_components && (url.includes("?") || url.includes("&"))) {
              return false;
            }
            var protocol, auth, host, hostname, port, port_str, split, ipv6;
            split = url.split("#");
            url = split.shift();
            split = url.split("?");
            url = split.shift();
            split = url.split("://");
            if (split.length > 1) {
              protocol = split.shift().toLowerCase();
              if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
                return false;
              }
            } else if (options.require_protocol) {
              return false;
            } else if (url.substr(0, 2) === "//") {
              if (!options.allow_protocol_relative_urls) {
                return false;
              }
              split[0] = url.substr(2);
            }
            url = split.join("://");
            if (url === "") {
              return false;
            }
            split = url.split("/");
            url = split.shift();
            if (url === "" && !options.require_host) {
              return true;
            }
            split = url.split("@");
            if (split.length > 1) {
              if (options.disallow_auth) {
                return false;
              }
              if (split[0] === "") {
                return false;
              }
              auth = split.shift();
              if (auth.indexOf(":") >= 0 && auth.split(":").length > 2) {
                return false;
              }
              var _auth$split = auth.split(":"), _auth$split2 = _slicedToArray2(_auth$split, 2), user = _auth$split2[0], password = _auth$split2[1];
              if (user === "" && password === "") {
                return false;
              }
            }
            hostname = split.join("@");
            port_str = null;
            ipv6 = null;
            var ipv6_match = hostname.match(wrapped_ipv6);
            if (ipv6_match) {
              host = "";
              ipv6 = ipv6_match[1];
              port_str = ipv6_match[2] || null;
            } else {
              split = hostname.split(":");
              host = split.shift();
              if (split.length) {
                port_str = split.join(":");
              }
            }
            if (port_str !== null && port_str.length > 0) {
              port = parseInt(port_str, 10);
              if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
                return false;
              }
            } else if (options.require_port) {
              return false;
            }
            if (options.host_whitelist) {
              return checkHost(host, options.host_whitelist);
            }
            if (!(0, _isIP["default"])(host) && !(0, _isFQDN["default"])(host, options) && (!ipv6 || !(0, _isIP["default"])(ipv6, 6))) {
              return false;
            }
            host = host || ipv6;
            if (options.host_blacklist && checkHost(host, options.host_blacklist)) {
              return false;
            }
            return true;
          }
          module2.exports = exports3["default"];
          module2.exports["default"] = exports3["default"];
        })(isURL$1, isURL$1.exports);
        var isURL = /* @__PURE__ */ getDefaultExportFromCjs(isURL$1.exports);
        function ownKeys$18(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$17(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$18(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$18(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function isValueEmpty(val) {
          var type = Object.prototype.toString.call(val);
          var typeMap = {
            Date: "[object Date]"
          };
          if (type === typeMap.Date) {
            return false;
          }
          return _typeof$2(val) === "object" ? isEmpty_1(val) : ["", void 0, null].includes(val);
        }
        var VALIDATE_MAP = {
          date: isDate,
          url: isURL,
          email: isEmail,
          required: function required(val) {
            return !isValueEmpty(val);
          },
          "boolean": function boolean(val) {
            return typeof val === "boolean";
          },
          max: function max2(val, num) {
            return isNumber_1(val) ? val <= num : getCharacterLength(val) <= num;
          },
          min: function min2(val, num) {
            return isNumber_1(val) ? val >= num : getCharacterLength(val) >= num;
          },
          len: function len(val, num) {
            return getCharacterLength(val) === num;
          },
          number: function number(val) {
            return isNumber_1(val);
          },
          "enum": function _enum(val, strs) {
            return strs.includes(val);
          },
          idcard: function idcard(val) {
            return /^(\d{18,18}|\d{15,15}|\d{17,17}x)$/i.test(val);
          },
          telnumber: function telnumber(val) {
            return /^1[3-9]\d{9}$/.test(val);
          },
          pattern: function pattern(val, regexp) {
            return regexp.test(val);
          },
          validator: function validator(val, validate2) {
            return validate2(val);
          }
        };
        function validateOneRule(_x, _x2) {
          return _validateOneRule.apply(this, arguments);
        }
        function _validateOneRule() {
          _validateOneRule = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee(value, rule) {
            var validateResult, keys2, vOptions, vValidateFun, i2, key, validateRule;
            return regenerator.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    validateResult = {
                      result: true
                    };
                    keys2 = Object.keys(rule);
                    i2 = 0;
                  case 3:
                    if (!(i2 < keys2.length)) {
                      _context.next = 15;
                      break;
                    }
                    key = keys2[i2];
                    if (!(!rule.required && isValueEmpty(value) && !rule.validator)) {
                      _context.next = 7;
                      break;
                    }
                    return _context.abrupt("return", validateResult);
                  case 7:
                    validateRule = VALIDATE_MAP[key];
                    if (!(validateRule && rule[key])) {
                      _context.next = 12;
                      break;
                    }
                    vOptions = rule[key] === true ? void 0 : rule[key];
                    vValidateFun = validateRule;
                    return _context.abrupt("break", 15);
                  case 12:
                    i2++;
                    _context.next = 3;
                    break;
                  case 15:
                    if (!vValidateFun) {
                      _context.next = 23;
                      break;
                    }
                    _context.next = 18;
                    return vValidateFun(value, vOptions);
                  case 18:
                    validateResult = _context.sent;
                    if (!(typeof validateResult === "boolean")) {
                      _context.next = 21;
                      break;
                    }
                    return _context.abrupt("return", _objectSpread$17(_objectSpread$17({}, rule), {}, {
                      result: validateResult
                    }));
                  case 21:
                    if (!(_typeof$2(validateResult) === "object")) {
                      _context.next = 23;
                      break;
                    }
                    return _context.abrupt("return", validateResult);
                  case 23:
                    return _context.abrupt("return", validateResult);
                  case 24:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));
          return _validateOneRule.apply(this, arguments);
        }
        function validate(_x3, _x4) {
          return _validate.apply(this, arguments);
        }
        function _validate() {
          _validate = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee2(value, rules) {
            var all, r;
            return regenerator.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    all = rules.map(function(rule) {
                      return validateOneRule(value, rule);
                    });
                    _context2.next = 3;
                    return Promise.all(all);
                  case 3:
                    r = _context2.sent;
                    return _context2.abrupt("return", r);
                  case 5:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));
          return _validate.apply(this, arguments);
        }
        var props$u = {
          "for": {
            type: String,
            "default": ""
          },
          help: {
            type: [String, Function]
          },
          label: {
            type: [String, Function],
            "default": ""
          },
          labelAlign: {
            type: String,
            validator: function validator(val) {
              if (!val)
                return true;
              return ["left", "right", "top"].includes(val);
            }
          },
          labelWidth: {
            type: [String, Number]
          },
          name: {
            type: String,
            "default": ""
          },
          requiredMark: {
            type: Boolean,
            "default": void 0
          },
          rules: {
            type: Array,
            "default": function _default() {
              return [];
            }
          },
          showErrorMessage: {
            type: Boolean,
            "default": void 0
          },
          statusIcon: {
            type: [Boolean, Function],
            "default": void 0
          },
          successBorder: Boolean
        };
        function ownKeys$17(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$16(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$17(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$17(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _FormItem = vue.defineComponent({
          name: "TFormItem",
          props: _objectSpread$16({}, props$u),
          setup: function setup(props2) {
            var renderContent2 = useTNodeJSX();
            var CLASS_NAMES = useCLASSNAMES$1();
            var _useConfig = useConfig("form"), global2 = _useConfig.global;
            var form = vue.inject(FormInjectionKey, void 0);
            var FORM_ITEM_CLASS_PREFIX = usePrefixClass("form-item__");
            var needRequiredMark = vue.computed(function() {
              var requiredMark = props2.requiredMark;
              if (typeof requiredMark === "boolean")
                return requiredMark;
              var parentRequiredMark = (form === null || form === void 0 ? void 0 : form.requiredMark) === void 0 ? global2.value.requiredMark : form === null || form === void 0 ? void 0 : form.requiredMark;
              var isRequired = innerRules.value.filter(function(rule) {
                return rule.required;
              }).length > 0;
              return Boolean(parentRequiredMark && isRequired);
            });
            var hasColon = vue.computed(function() {
              return !!(form !== null && form !== void 0 && form.colon && renderContent2("label"));
            });
            var FROM_LABEL = usePrefixClass("form__label");
            var labelAlign = vue.computed(function() {
              return isNil_1(props2.labelAlign) ? form === null || form === void 0 ? void 0 : form.labelAlign : props2.labelAlign;
            });
            var labelWidth = vue.computed(function() {
              return isNil_1(props2.labelWidth) ? form === null || form === void 0 ? void 0 : form.labelWidth : props2.labelWidth;
            });
            var labelClasses = vue.computed(function() {
              var _ref;
              return [CLASS_NAMES.value.label, (_ref = {}, _defineProperty$3(_ref, "".concat(FROM_LABEL.value, "--required"), needRequiredMark.value), _defineProperty$3(_ref, "".concat(FROM_LABEL.value, "--colon"), hasColon.value), _defineProperty$3(_ref, "".concat(FROM_LABEL.value, "--top"), labelAlign.value === "top" || !labelWidth.value), _defineProperty$3(_ref, "".concat(FROM_LABEL.value, "--left"), labelAlign.value === "left" && labelWidth.value), _defineProperty$3(_ref, "".concat(FROM_LABEL.value, "--right"), labelAlign.value === "right" && labelWidth.value), _ref)];
            });
            var renderLabel = function renderLabel2() {
              if (Number(labelWidth.value) === 0)
                return;
              var labelStyle = {};
              if (labelWidth.value && labelAlign.value !== "top") {
                if (typeof labelWidth.value === "number") {
                  labelStyle = {
                    width: "".concat(labelWidth.value, "px")
                  };
                } else {
                  labelStyle = {
                    width: labelWidth.value
                  };
                }
              }
              return vue.createVNode("div", {
                "class": labelClasses.value,
                "style": labelStyle
              }, [vue.createVNode("label", {
                "for": props2["for"]
              }, [renderContent2("label")])]);
            };
            var getDefaultIcon = function getDefaultIcon2() {
              var resultIcon = function resultIcon2(Icon2) {
                return vue.createVNode("span", {
                  "class": CLASS_NAMES.value.status
                }, [vue.createVNode(Icon2, null, null)]);
              };
              var list = errorList.value;
              if (verifyStatus.value === "success") {
                return resultIcon(checkCircleFilled);
              }
              if (list !== null && list !== void 0 && list[0]) {
                var type = list[0].type || "error";
                var icon = {
                  error: closeCircleFilled,
                  warning: errorCircleFilled
                }[type] || checkCircleFilled;
                return resultIcon(icon);
              }
              return null;
            };
            var renderSuffixIcon = function renderSuffixIcon2() {
              var statusIcon = props2.statusIcon;
              if (statusIcon === false)
                return;
              var resultIcon = renderContent2("statusIcon", {
                defaultNode: getDefaultIcon()
              });
              if (resultIcon)
                return vue.createVNode("span", {
                  "className": CLASS_NAMES.value.status
                }, [resultIcon]);
              if (resultIcon === false)
                return;
              resultIcon = form === null || form === void 0 ? void 0 : form.renderContent("statusIcon", {
                defaultNode: getDefaultIcon()
              });
              if (resultIcon)
                return resultIcon;
            };
            var errorClasses = vue.computed(function() {
              if (!showErrorMessage.value)
                return "";
              if (verifyStatus.value === "success") {
                return props2.successBorder ? [CLASS_NAMES.value.success, CLASS_NAMES.value.successBorder].join(" ") : CLASS_NAMES.value.success;
              }
              if (!errorList.value.length)
                return;
              var type = errorList.value[0].type || "error";
              return type === "error" ? CLASS_NAMES.value.error : CLASS_NAMES.value.warning;
            });
            var contentClasses = vue.computed(function() {
              return [CLASS_NAMES.value.controls, errorClasses.value];
            });
            var contentStyle = vue.computed(function() {
              var contentStyle2 = {};
              if (labelWidth.value && labelAlign.value !== "top") {
                if (typeof labelWidth.value === "number") {
                  contentStyle2 = {
                    marginLeft: "".concat(labelWidth.value, "px")
                  };
                } else {
                  contentStyle2 = {
                    marginLeft: labelWidth.value
                  };
                }
              }
              return contentStyle2;
            });
            var errorList = vue.ref([]);
            var successList = vue.ref([]);
            var verifyStatus = vue.ref(
              "not"
            );
            var resetValidating = vue.ref(false);
            var needResetField = vue.ref(false);
            var resetHandler = function resetHandler2() {
              needResetField.value = false;
              errorList.value = [];
              successList.value = [];
              verifyStatus.value = "not";
            };
            var getEmptyValue = function getEmptyValue2() {
              var type = Object.prototype.toString.call(get_1(form === null || form === void 0 ? void 0 : form.data, props2.name));
              var emptyValue;
              if (type === "[object String]") {
                emptyValue = "";
              }
              if (type === "[object Array]") {
                emptyValue = [];
              }
              if (type === "[object Object]") {
                emptyValue = {};
              }
              return emptyValue;
            };
            var resetField = /* @__PURE__ */ function() {
              var _ref2 = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee(resetType) {
                return regenerator.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        if (props2.name) {
                          _context.next = 2;
                          break;
                        }
                        return _context.abrupt("return");
                      case 2:
                        if (resetType !== void 0) {
                          resetType === "empty" && set_1(form === null || form === void 0 ? void 0 : form.data, props2.name, getEmptyValue());
                          resetType === "initial" && set_1(form === null || form === void 0 ? void 0 : form.data, props2.name, initialValue.value);
                        } else {
                          (form === null || form === void 0 ? void 0 : form.resetType) === "empty" && set_1(form === null || form === void 0 ? void 0 : form.data, props2.name, getEmptyValue());
                          (form === null || form === void 0 ? void 0 : form.resetType) === "initial" && set_1(form === null || form === void 0 ? void 0 : form.data, props2.name, initialValue.value);
                        }
                        _context.next = 5;
                        return vue.nextTick();
                      case 5:
                        if (resetValidating.value) {
                          needResetField.value = true;
                        } else {
                          resetHandler();
                        }
                      case 6:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));
              return function resetField2(_x) {
                return _ref2.apply(this, arguments);
              };
            }();
            var errorMessages = vue.computed(function() {
              var _form$errorMessage;
              return (_form$errorMessage = form === null || form === void 0 ? void 0 : form.errorMessage) !== null && _form$errorMessage !== void 0 ? _form$errorMessage : global2.value.errorMessage;
            });
            var innerRules = vue.computed(function() {
              var _props2$rules;
              if ((_props2$rules = props2.rules) !== null && _props2$rules !== void 0 && _props2$rules.length)
                return props2.rules;
              if (!props2.name)
                return [];
              var index2 = props2.name.lastIndexOf(".") || -1;
              var pRuleName = props2.name.slice(index2 + 1);
              return get_1(form === null || form === void 0 ? void 0 : form.rules, props2.name) || get_1(form === null || form === void 0 ? void 0 : form.rules, pRuleName) || [];
            });
            function validateHandler(_x2) {
              return _validateHandler.apply(this, arguments);
            }
            function _validateHandler() {
              _validateHandler = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee4(trigger) {
                var rules, res;
                return regenerator.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        resetValidating.value = true;
                        rules = trigger === "all" ? innerRules.value : innerRules.value.filter(function(item) {
                          return (item.trigger || "change") === trigger;
                        });
                        if (rules !== null && rules !== void 0 && rules.length) {
                          _context4.next = 5;
                          break;
                        }
                        resetValidating.value = false;
                        return _context4.abrupt("return");
                      case 5:
                        _context4.next = 7;
                        return validate(value.value, rules);
                      case 7:
                        res = _context4.sent;
                        errorList.value = res.filter(function(item) {
                          return item.result !== true;
                        }).map(function(item) {
                          Object.keys(item).forEach(function(key) {
                            if (!item.message && errorMessages.value[key]) {
                              var compiled = template_1(errorMessages.value[key]);
                              item.message = compiled({
                                name: props2.label,
                                validate: item[key]
                              });
                            }
                          });
                          return item;
                        });
                        successList.value = res.filter(function(item) {
                          return item.result === true && item.message && item.type === "success";
                        });
                        if (rules.length) {
                          verifyStatus.value = errorList.value.length ? "fail" : "success";
                        } else {
                          verifyStatus.value = "not";
                        }
                        if (needResetField.value) {
                          resetHandler();
                        }
                        resetValidating.value = false;
                        return _context4.abrupt("return", _defineProperty$3({}, props2.name, errorList.value.length === 0 ? true : res));
                      case 14:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, _callee4);
              }));
              return _validateHandler.apply(this, arguments);
            }
            var setValidateMessage = function setValidateMessage2(validateMessage) {
              if (!validateMessage && !Array.isArray(validateMessage))
                return;
              if (validateMessage.length === 0) {
                errorList.value = [];
                verifyStatus.value = "success";
              }
              errorList.value = validateMessage.map(function(item) {
                return _objectSpread$16(_objectSpread$16({}, item), {}, {
                  result: false
                });
              });
              verifyStatus.value = "fail";
            };
            var value = vue.computed(function() {
              return (form === null || form === void 0 ? void 0 : form.data) && get_1(form === null || form === void 0 ? void 0 : form.data, props2.name);
            });
            var initialValue = vue.ref(void 0);
            var _toRefs = vue.toRefs(props2), name = _toRefs.name;
            var context = vue.reactive({
              name,
              resetHandler,
              resetField,
              validate: validateHandler,
              setValidateMessage
            });
            vue.onMounted(function() {
              initialValue.value = cloneDeep_1(value.value);
              form === null || form === void 0 ? void 0 : form.children.push(context);
            });
            vue.onBeforeUnmount(function() {
              if (form)
                form.children = form === null || form === void 0 ? void 0 : form.children.filter(function(ctx) {
                  return ctx !== context;
                });
            });
            vue.watch(value, /* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee2() {
              return regenerator.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      _context2.next = 2;
                      return validateHandler("change");
                    case 2:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2);
            })), {
              deep: true
            });
            var showErrorMessage = vue.computed(function() {
              if (typeof props2.showErrorMessage === "boolean")
                return props2.showErrorMessage;
              return form === null || form === void 0 ? void 0 : form.showErrorMessage;
            });
            var classes = vue.computed(function() {
              var _ref4;
              return [CLASS_NAMES.value.formItem, FORM_ITEM_CLASS_PREFIX.value + props2.name, (_ref4 = {}, _defineProperty$3(_ref4, CLASS_NAMES.value.formItemWithHelp, helpNode.value), _defineProperty$3(_ref4, CLASS_NAMES.value.formItemWithExtra, extraNode.value), _ref4)];
            });
            var helpNode = vue.computed(function() {
              if (props2.help) {
                return vue.createVNode("div", {
                  "class": CLASS_NAMES.value.help
                }, [props2.help]);
              }
              return null;
            });
            var extraNode = vue.computed(function() {
              var _list$;
              var getExtraNode = function getExtraNode2(content) {
                return vue.createVNode("div", {
                  "class": CLASS_NAMES.value.extra
                }, [content]);
              };
              var list = errorList.value;
              if (showErrorMessage.value && list !== null && list !== void 0 && (_list$ = list[0]) !== null && _list$ !== void 0 && _list$.message) {
                return getExtraNode(list[0].message);
              }
              if (successList.value.length) {
                return getExtraNode(successList.value[0].message);
              }
              return null;
            });
            var handleBlur = /* @__PURE__ */ function() {
              var _ref5 = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee3() {
                return regenerator.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        _context3.next = 2;
                        return validateHandler("blur");
                      case 2:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3);
              }));
              return function handleBlur2() {
                return _ref5.apply(this, arguments);
              };
            }();
            vue.provide(FormItemInjectionKey, {
              handleBlur
            });
            return function() {
              return vue.createVNode("div", {
                "class": classes.value
              }, [renderLabel(), vue.createVNode("div", {
                "class": contentClasses.value,
                "style": contentStyle.value
              }, [vue.createVNode("div", {
                "class": CLASS_NAMES.value.controlsContent
              }, [renderContent2("default"), renderSuffixIcon()]), [helpNode.value, extraNode.value]])]);
            };
          }
        });
        var Form = withInstall(_Form);
        var FormItem = withInstall(_FormItem);
        var props$t = {
          allowUncheck: Boolean,
          checked: {
            type: Boolean,
            "default": void 0
          },
          modelValue: {
            type: Boolean,
            "default": void 0
          },
          defaultChecked: Boolean,
          "default": {
            type: [String, Function]
          },
          disabled: {
            type: Boolean,
            "default": void 0
          },
          label: {
            type: [String, Function]
          },
          name: {
            type: String,
            "default": ""
          },
          value: {
            type: [String, Number, Boolean],
            "default": void 0
          },
          onChange: Function,
          onClick: Function
        };
        var RadioGroupInjectionKey = Symbol("RadioGroupProvide");
        var RadioButtonInjectionKey = Symbol("RadioButtonProvide");
        function ownKeys$16(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$15(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$16(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$16(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function getValidAttrs$1(obj) {
          var newObj = {};
          Object.keys(obj).forEach(function(key) {
            if (typeof obj[key] !== "undefined") {
              newObj[key] = obj[key];
            }
          });
          return newObj;
        }
        var _Radio = vue.defineComponent({
          name: "TRadio",
          inheritAttrs: false,
          props: _objectSpread$15({}, props$t),
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var _toRefs = vue.toRefs(props2), checked = _toRefs.checked, modelValue = _toRefs.modelValue;
            var _useVModel = useVModel(checked, modelValue, props2.defaultChecked, props2.onChange, "checked"), _useVModel2 = _slicedToArray(_useVModel, 2), innerChecked = _useVModel2[0], setInnerChecked = _useVModel2[1];
            var radioChecked = vue.computed(function() {
              return radioGroup ? props2.value === radioGroup.value : innerChecked.value;
            });
            var radioGroup = vue.inject(RadioGroupInjectionKey, void 0);
            var handleChange = function handleChange2(e) {
              if (radioGroup !== null && radioGroup !== void 0 && radioGroup.setValue) {
                radioGroup.setValue(props2.value, {
                  e
                });
              } else {
                var checked2 = e.target.checked;
                setInnerChecked(checked2, {
                  e
                });
              }
            };
            var handleClick = function handleClick2(e) {
              var _props2$onClick;
              (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
                e
              });
              if (!radioChecked.value || !props2.allowUncheck)
                return;
              if (radioGroup) {
                radioGroup.setValue(void 0, {
                  e
                });
              } else {
                setInnerChecked(false, {
                  e
                });
              }
            };
            var inputEvents = vue.computed(function() {
              return getValidAttrs$1({
                focus: attrs.onFocus,
                blur: attrs.onBlur,
                keydown: attrs.onKeydown,
                keyup: attrs.onKeyup,
                keypresss: attrs.onKeypresss
              });
            });
            var wrapperAttrs = vue.computed(function() {
              var events = [].concat(_toConsumableArray(Object.keys(inputEvents.value)), ["input", "change"]).map(function(str) {
                return "on".concat(str[0].toUpperCase()).concat(str.slice(1));
              });
              return omit$1(attrs, events);
            });
            var groupDisabled = vue.computed(function() {
              return radioGroup === null || radioGroup === void 0 ? void 0 : radioGroup.disabled;
            });
            var disabled = useFormDisabled(groupDisabled);
            var inputProps = vue.computed(function() {
              return {
                name: radioGroup ? radioGroup.name : props2.name,
                checked: radioChecked.value,
                disabled: disabled.value,
                value: props2.value
              };
            });
            var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
            var radioButton = vue.inject(RadioButtonInjectionKey, void 0);
            var radioBtnName = usePrefixClass("radio-button");
            var COMPONENT_NAME2 = usePrefixClass("radio");
            var prefixCls = vue.computed(function() {
              return radioButton ? radioBtnName.value : COMPONENT_NAME2.value;
            });
            var inputClass = vue.computed(function() {
              var _ref2;
              return ["".concat(prefixCls.value), (_ref2 = {}, _defineProperty$3(_ref2, STATUS.value.checked, inputProps.value.checked), _defineProperty$3(_ref2, STATUS.value.disabled, inputProps.value.disabled), _ref2)];
            });
            var renderContent2 = useContent();
            return function() {
              return vue.createVNode("label", vue.mergeProps({
                "class": inputClass.value
              }, wrapperAttrs.value), [vue.createVNode("input", vue.mergeProps({
                "type": "radio",
                "class": "".concat(prefixCls.value, "__former")
              }, inputEvents.value, inputProps.value, {
                "onChange": handleChange,
                "onClick": handleClick
              }), null), vue.createVNode("span", {
                "class": "".concat(prefixCls.value, "__input")
              }, null), vue.createVNode("span", {
                "class": "".concat(prefixCls.value, "__label")
              }, [renderContent2("default", "label")])]);
            };
          }
        });
        var props$s = {
          disabled: {
            type: Boolean,
            "default": void 0
          },
          name: {
            type: String,
            "default": ""
          },
          options: {
            type: Array
          },
          size: {
            type: String,
            "default": "medium",
            validator: function validator(val) {
              return ["small", "medium", "large"].includes(val);
            }
          },
          value: {
            type: [String, Number, Boolean],
            "default": void 0
          },
          modelValue: {
            type: [String, Number, Boolean],
            "default": void 0
          },
          defaultValue: {
            type: [String, Number, Boolean],
            "default": void 0
          },
          variant: {
            type: String,
            "default": "outline",
            validator: function validator(val) {
              return ["outline", "primary-filled", "default-filled"].includes(val);
            }
          },
          onChange: Function
        };
        function ownKeys$15(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$14(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$15(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$15(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _Group = vue.defineComponent({
          name: "TRadioGroup",
          props: _objectSpread$14({}, props$s),
          setup: function setup(props2) {
            var _toRefs = vue.toRefs(props2), value = _toRefs.value, modelValue = _toRefs.modelValue;
            var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerValue = _useVModel2[0], setInnerValue = _useVModel2[1];
            var radioGroupRef = vue.ref();
            var radioBtnName = usePrefixClass("radio-button");
            var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS, SIZE = _useCommonClassName.SIZE;
            var checkedClassName = vue.computed(function() {
              return ".".concat(radioBtnName.value, ".").concat(STATUS.value.checked);
            });
            var barStyle = vue.ref({
              width: "0px",
              left: "0px"
            });
            var calcDefaultBarStyle = function calcDefaultBarStyle2() {
              var div = document.createElement("div");
              div.setAttribute("style", "position: absolute; visibility: hidden;");
              div.appendChild(radioGroupRef.value.cloneNode(true));
              document.body.appendChild(div);
              var defaultCheckedRadio = div.querySelector(checkedClassName.value);
              var offsetWidth = defaultCheckedRadio.offsetWidth, offsetLeft = defaultCheckedRadio.offsetLeft;
              barStyle.value = {
                width: "".concat(offsetWidth, "px"),
                left: "".concat(offsetLeft, "px")
              };
              document.body.removeChild(div);
            };
            var calcBarStyle = function calcBarStyle2() {
              if (props2.variant === "outline")
                return;
              var checkedRadio = radioGroupRef.value.querySelector(checkedClassName.value);
              if (!checkedRadio)
                return;
              var offsetWidth = checkedRadio.offsetWidth, offsetLeft = checkedRadio.offsetLeft;
              if (!offsetWidth) {
                calcDefaultBarStyle();
              } else {
                barStyle.value = {
                  width: "".concat(offsetWidth, "px"),
                  left: "".concat(offsetLeft, "px")
                };
              }
            };
            vue.watch(innerValue, /* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee() {
              return regenerator.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.next = 2;
                      return vue.nextTick();
                    case 2:
                      calcBarStyle();
                    case 3:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            })));
            vue.onMounted(function() {
              calcBarStyle();
            });
            var _toRefs2 = vue.toRefs(props2), name = _toRefs2.name, disabled = _toRefs2.disabled;
            vue.provide(RadioGroupInjectionKey, vue.reactive({
              name,
              disabled,
              value: innerValue,
              setValue: setInnerValue
            }));
            var radioGroupName = usePrefixClass("radio-group");
            var renderSlot = useTNodeDefault();
            var renderBlock = function renderBlock2() {
              if (props2.variant.includes("filled") && innerValue.value)
                return vue.createVNode("div", {
                  "style": barStyle.value,
                  "class": "".concat(radioGroupName.value, "__bg-block")
                }, null);
            };
            var renderOptions = function renderOptions2() {
              var _props2$options;
              return (_props2$options = props2.options) === null || _props2$options === void 0 ? void 0 : _props2$options.map(function(option) {
                var opt = option;
                if (isNumber_1(option) || isString_1(option)) {
                  opt = {
                    value: option,
                    label: option.toString()
                  };
                }
                return vue.createVNode(_Radio, {
                  "key": "radio-group-options-".concat(opt.value, "-").concat(Math.random()),
                  "name": props2.name,
                  "checked": innerValue.value === opt.value,
                  "disabled": "disabled" in opt ? opt.disabled : props2.disabled,
                  "value": opt.value
                }, {
                  "default": function _default() {
                    return [typeof opt.label === "function" ? opt.label(vue.h) : opt.label];
                  }
                });
              });
            };
            var groupClass = vue.computed(function() {
              var _ref2;
              return ["".concat(radioGroupName.value), SIZE.value[props2.size], (_ref2 = {}, _defineProperty$3(_ref2, "".concat(radioGroupName.value, "__outline"), props2.variant === "outline"), _defineProperty$3(_ref2, "".concat(radioGroupName.value, "--filled"), props2.variant.includes("filled")), _defineProperty$3(_ref2, "".concat(radioGroupName.value, "--primary-filled"), props2.variant === "primary-filled"), _ref2)];
            });
            return function() {
              return vue.createVNode("div", {
                "ref": radioGroupRef,
                "class": groupClass.value
              }, [renderSlot("default") || renderOptions(), renderBlock()]);
            };
          }
        });
        function ownKeys$14(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$13(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$14(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$14(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot$h(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var _RadioButton = vue.defineComponent({
          name: "TRadioButton",
          inheritAttrs: false,
          props: _objectSpread$13({}, props$t),
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            vue.provide(RadioButtonInjectionKey, vue.reactive({}));
            var radioProps = vue.computed(function() {
              var res = _objectSpread$13(_objectSpread$13({}, props2), omit$1(attrs, Object.keys(attrs).filter(function(key) {
                return key.startsWith("on");
              })));
              return res;
            });
            var renderContent2 = useTNodeDefault();
            return function() {
              var _slot;
              return vue.createVNode(_Radio, radioProps.value, _isSlot$h(_slot = renderContent2("default")) ? _slot : {
                "default": function _default() {
                  return [_slot];
                }
              });
            };
          }
        });
        var Radio = withInstall(_Radio);
        var RadioGroup = withInstall(_Group);
        var RadioButton = withInstall(_RadioButton);
        var props$r = {
          disabled: Boolean,
          inputNumberProps: {
            type: [Boolean, Object],
            "default": false
          },
          label: {
            type: [String, Boolean, Function],
            "default": false
          },
          layout: {
            type: String,
            "default": "horizontal",
            validator: function validator(val) {
              return ["vertical", "horizontal"].includes(val);
            }
          },
          marks: {
            type: [Object, Array]
          },
          max: {
            type: Number,
            "default": 100
          },
          min: {
            type: Number,
            "default": 0
          },
          range: Boolean,
          step: {
            type: Number,
            "default": 1
          },
          modelValue: {
            type: [Number, Array],
            "default": void 0
          },
          tooltipProps: {
            type: Object
          },
          value: {
            type: [Number, Array],
            "default": void 0
          },
          defaultValue: {
            type: [Number, Array]
          },
          onChange: Function
        };
        var TSliderMark = vue.defineComponent({
          name: "TSliderMark",
          props: {
            mark: {
              type: [Object, Array, String, Number]
            },
            point: {
              type: Number
            },
            onClickMarkPoint: {
              type: Function,
              "default": function _default() {
              }
            }
          },
          setup: function setup(props2) {
            var COMPONENT_NAME2 = usePrefixClass("slider__mark");
            var changeValue = function changeValue2(e) {
              var _props$onClickMarkPoi;
              e.stopPropagation();
              props2 === null || props2 === void 0 ? void 0 : (_props$onClickMarkPoi = props2.onClickMarkPoint) === null || _props$onClickMarkPoi === void 0 ? void 0 : _props$onClickMarkPoi.call(props2, props2.point);
            };
            return function() {
              return vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "-text"),
                "onClick": changeValue
              }, [props2.mark]);
            };
          }
        });
        function ownKeys$13(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$12(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$13(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$13(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var initialProps = {
          visible: false,
          trigger: "hover",
          showArrow: true,
          overlayStyle: void 0,
          overlayClassName: void 0,
          attach: "body",
          theme: "default"
        };
        var useSliderTooltip = function useSliderTooltip2(tooltipProps, vertical) {
          var tooltipRef = vue.ref();
          var showTooltip = vue.ref(!tooltipProps === false);
          var normalizeProps = vue.ref(_objectSpread$12({}, initialProps));
          var toggleTooltip = function toggleTooltip2(toState) {
            normalizeProps.value.visible = toState;
          };
          var validProps = vue.computed(function() {
            var placement = vertical ? "right" : "top";
            if (tooltipProps instanceof Object) {
              if (!(tooltipProps !== null && tooltipProps !== void 0 && tooltipProps.placement)) {
                normalizeProps.value.placement = placement;
              }
              return _objectSpread$12(_objectSpread$12({}, normalizeProps.value), tooltipProps);
            }
            return _objectSpread$12(_objectSpread$12({}, normalizeProps.value), {}, {
              placement
            });
          });
          return {
            tooltipRef,
            tooltipProps: validProps,
            toggleTooltip,
            showTooltip
          };
        };
        var sliderPropsInjectKey = Symbol("sliderProps");
        var _SliderButton = vue.defineComponent({
          name: "TSliderButton",
          components: {
            TTooltip: Tooltip
          },
          props: {
            value: {
              type: [Number],
              "default": 0
            },
            vertical: {
              type: Boolean,
              "default": false
            },
            tooltipProps: {
              type: [Boolean, Object],
              "default": true
            }
          },
          emits: ["input"],
          setup: function setup(props2, ctx) {
            var COMPONENT_NAME2 = usePrefixClass("slider__button");
            var _useSliderTooltip = useSliderTooltip(props2.tooltipProps, props2.vertical), tooltipRef = _useSliderTooltip.tooltipRef, tooltipProps = _useSliderTooltip.tooltipProps, toggleTooltip = _useSliderTooltip.toggleTooltip, showTooltip = _useSliderTooltip.showTooltip;
            var parentProps = vue.inject(sliderPropsInjectKey);
            var buttonRef = vue.ref();
            var slideButtonProps = vue.reactive({
              dragging: false,
              isClick: false,
              startX: 0,
              startY: 0,
              startPos: 0,
              newPos: null
            });
            var rangeDiff = vue.computed(function() {
              return Number(parentProps.max) - Number(parentProps.min);
            });
            var currentPos = vue.computed(function() {
              return "".concat((props2.value - parentProps.min) / rangeDiff.value * 100, "%");
            });
            var step = vue.computed(function() {
              return parentProps.step;
            });
            var wrapperStyle = vue.computed(function() {
              return props2.vertical ? {
                bottom: currentPos.value
              } : {
                left: currentPos.value
              };
            });
            vue.watchEffect(function() {
              parentProps.toggleDragging(slideButtonProps.dragging);
            });
            var setPosition = function setPosition2(pos) {
              var newPos = pos;
              if (newPos === null || Number.isNaN(newPos)) {
                return;
              }
              if (newPos > 100) {
                newPos = 100;
              } else if (newPos < 0) {
                newPos = 0;
              }
              var perStepLen = 100 * step.value / rangeDiff.value;
              var steps = Math.round(newPos / perStepLen);
              var value = steps * perStepLen * rangeDiff.value * 0.01;
              value += parentProps.min;
              value = Number(parseFloat("".concat(value)).toFixed(parentProps.precision));
              ctx.emit("input", value);
              vue.nextTick(function() {
                var _tooltipRef$value$upd, _tooltipRef$value;
                tooltipRef.value && ((_tooltipRef$value$upd = (_tooltipRef$value = tooltipRef.value).updatePopper) === null || _tooltipRef$value$upd === void 0 ? void 0 : _tooltipRef$value$upd.call(_tooltipRef$value));
              });
            };
            var handleMouseEnter = function handleMouseEnter2() {
              buttonRef.value.focus();
              toggleTooltip(true);
            };
            var handleMouseLeave = function handleMouseLeave2() {
              if (!slideButtonProps.dragging) {
                toggleTooltip(false);
              }
            };
            var onDragStart = function onDragStart2(event) {
              slideButtonProps.dragging = true;
              slideButtonProps.isClick = true;
              var type = event.type;
              var clientY = event.clientY, clientX = event.clientX;
              if (type === "touchstart") {
                var touch = event.touches;
                var _ref = [touch[0].clientY, touch[0].clientX];
                clientY = _ref[0];
                clientX = _ref[1];
              }
              if (props2.vertical) {
                slideButtonProps.startY = clientY;
              } else {
                slideButtonProps.startX = clientX;
              }
              slideButtonProps.startPos = parseFloat(currentPos.value);
              slideButtonProps.newPos = slideButtonProps.startPos;
            };
            var onDragging = function onDragging2(e) {
              var event = e;
              if (!slideButtonProps.dragging) {
                return;
              }
              slideButtonProps.isClick = false;
              if (parentProps !== null && parentProps !== void 0 && parentProps.resetSize && typeof (parentProps === null || parentProps === void 0 ? void 0 : parentProps.resetSize) === "function") {
                parentProps.resetSize();
              }
              var diff = 0;
              var parentSliderSize = parentProps.sliderSize;
              if (props2.vertical) {
                diff = slideButtonProps.startY - event.clientY;
              } else {
                diff = event.clientX - slideButtonProps.startX;
              }
              diff = diff / parentSliderSize * 100;
              slideButtonProps.newPos = slideButtonProps.startPos + diff;
              setPosition(slideButtonProps.newPos);
            };
            var onDragEnd = function onDragEnd2() {
              if (slideButtonProps.dragging) {
                setTimeout(function() {
                  slideButtonProps.dragging = false;
                  toggleTooltip(false);
                  if (!slideButtonProps.isClick) {
                    setPosition(slideButtonProps.newPos);
                  }
                }, 0);
                window.removeEventListener("mousemove", onDragging);
                window.removeEventListener("touchmove", onDragging);
                window.removeEventListener("mouseup", onDragEnd2);
                window.removeEventListener("touchend", onDragEnd2);
                window.removeEventListener("contextmenu", onDragEnd2);
              }
            };
            function onButtonDown(event) {
              if (parentProps.disabled) {
                return;
              }
              event.preventDefault();
              onDragStart(event);
              window.addEventListener("mousemove", onDragging);
              window.addEventListener("mouseup", onDragEnd);
              window.addEventListener("touchmove", onDragging);
              window.addEventListener("touchend", onDragEnd);
              window.addEventListener("contextmenu", onDragEnd);
            }
            var onKeyDown = function onKeyDown2(state) {
              if (parentProps.disabled) {
                return;
              }
              var stepLength = step.value / rangeDiff.value * 100;
              if (state === "sub") {
                stepLength = -stepLength;
              }
              slideButtonProps.newPos = parseFloat(currentPos.value) + stepLength;
              setPosition(slideButtonProps.newPos);
            };
            var onNativeKeyDown = function onNativeKeyDown2(e) {
              var code = e.code;
              e.preventDefault();
              if (code === "ArrowDown" || code === "ArrowLeft") {
                onKeyDown("sub");
              }
              if (code === "ArrowUp" || code === "ArrowRight") {
                onKeyDown("add");
              }
            };
            ctx.expose({
              setPosition
            });
            return function() {
              return vue.createVNode("div", {
                "ref": buttonRef,
                "class": "".concat(COMPONENT_NAME2.value, "-wrapper"),
                "style": wrapperStyle.value,
                "tabindex": "0",
                "show-tooltip": showTooltip.value,
                "disabled": parentProps.disabled,
                "onmouseenter": handleMouseEnter,
                "onmouseleave": handleMouseLeave,
                "onmousedown": onButtonDown,
                "onTouchstart": onButtonDown,
                "onfocus": handleMouseEnter,
                "onblur": handleMouseLeave,
                "onKeydown": onNativeKeyDown
              }, [vue.createVNode(vue.resolveComponent("t-tooltip"), vue.mergeProps({
                "ref": tooltipRef,
                "disabled": !showTooltip.value,
                "content": String(props2.value)
              }, tooltipProps.value), {
                "default": function _default() {
                  return [vue.createVNode("div", {
                    "class": [COMPONENT_NAME2.value, _defineProperty$3({}, "".concat(COMPONENT_NAME2.value, "--dragging"), slideButtonProps.dragging)]
                  }, null)];
                }
              })]);
            };
          }
        });
        var getStopStyle = function getStopStyle2(position, isVertical) {
          return isVertical ? {
            top: "calc(".concat(100 - position, "% - 1px)")
          } : {
            left: "".concat(position, "%")
          };
        };
        var formatSlderValue = function formatSlderValue2(val, type) {
          if (type === "first") {
            if (val instanceof Array) {
              return val[0];
            }
            return val;
          }
          if (val instanceof Array) {
            return val[1];
          }
          return 0;
        };
        var useSliderMark = function useSliderMark2(config) {
          var name = config.value.prefixName;
          var markList = vue.computed(function() {
            var markProps = config.value;
            if (!markProps.marks) {
              return [];
            }
            var legalMarks = [];
            if (Array.isArray(markProps.marks)) {
              var marksList = cloneDeep_1(markProps.marks).sort(function(a, b2) {
                return a - b2;
              });
              var maxLimit = Math.max.apply(Math, _toConsumableArray(marksList).concat([markProps.max]));
              var minLimit = Math.min.apply(Math, _toConsumableArray(marksList).concat([markProps.min]));
              if (minLimit < markProps.min) {
                log.errorOnce("TSlider", "marks min value should >= props min");
              }
              if (maxLimit > markProps.max) {
                log.errorOnce("TSlider", "marks max value should <= props max");
              }
              marksList.forEach(function(item) {
                legalMarks.push({
                  point: item,
                  position: (item - minLimit) / (maxLimit - minLimit) * 100,
                  mark: item
                });
              });
            } else {
              Object.keys(markProps.marks).map(parseFloat).sort(function(a, b2) {
                return a - b2;
              }).filter(function(point) {
                return point <= markProps.max && point >= markProps.min;
              }).forEach(function(point) {
                var item = {
                  point,
                  position: (point - markProps.min) * 100 / (markProps.max - markProps.min),
                  mark: markProps.marks[point]
                };
                legalMarks.push(item);
              });
            }
            return legalMarks;
          });
          var renderMask = function renderMask2(onChangeFn) {
            if (markList.value.length) {
              return vue.createVNode("div", null, [vue.createVNode("div", null, [markList.value.map(function(item, index2) {
                return vue.createVNode("div", {
                  "class": "".concat(name, "__stop ").concat(name, "__mark-stop"),
                  "style": getStopStyle(item.position, config.value.vertical),
                  "key": index2
                }, null);
              })]), vue.createVNode("div", {
                "class": "".concat(name, "__mark")
              }, [markList.value.map(function(item, key) {
                return vue.createVNode(vue.resolveComponent("t-slider-mark"), {
                  "mark": item.mark,
                  "point": item.point,
                  "key": key,
                  "style": getStopStyle(item.position, config.value.vertical),
                  "onClickMarkPoint": onChangeFn
                }, null);
              })])]);
            }
          };
          return renderMask;
        };
        var useSliderInput = function useSliderInput2(config) {
          var name = config.value.prefixName;
          var sliderInputState = vue.computed(function() {
            var initialState = {
              inputDecimalPlaces: 0,
              inputFormat: null,
              inputPlaceholder: "",
              inputTheme: "column"
            };
            var inputProps = config.value;
            if (typeof inputProps.inputNumberProps !== "boolean") {
              var inputNumbeConfig = inputProps.inputNumberProps;
              var inputDecimalPlaces = inputNumbeConfig.decimalPlaces;
              var inputFormat = inputNumbeConfig.format;
              var inputPlaceholder = inputNumbeConfig.placeholder;
              var inputTheme = inputNumbeConfig.theme;
              if (typeof inputDecimalPlaces === "number" && !Number.isNaN(inputDecimalPlaces)) {
                initialState.inputDecimalPlaces = inputDecimalPlaces;
              }
              if (inputPlaceholder) {
                initialState.inputPlaceholder = inputPlaceholder;
              }
              if (typeof inputFormat === "function") {
                initialState.inputFormat = inputFormat;
              }
              if (["column", "row", "normal"].includes(inputTheme)) {
                initialState.inputTheme = inputTheme;
              }
            }
            return initialState;
          });
          var sliderNumberClass = vue.computed(function() {
            return ["".concat(name, "__input"), {
              "is-vertical": config.value.vertical
            }];
          });
          var renderInputNumber = function renderInputNumber2(val, changeFn) {
            return vue.createVNode(InputNumber, {
              "class": sliderNumberClass.value,
              "value": val,
              "step": config.value.step,
              "onChange": changeFn,
              "disabled": config.value.disabled,
              "min": config.value.min,
              "max": config.value.max,
              "decimalPlaces": sliderInputState.value.inputDecimalPlaces,
              "format": sliderInputState.value.inputFormat,
              "placeholder": sliderInputState.value.inputPlaceholder,
              "theme": sliderInputState.value.inputTheme
            }, null);
          };
          return renderInputNumber;
        };
        function ownKeys$12(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$11(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$12(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$12(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _Slider = vue.defineComponent({
          name: "TSlider",
          components: {
            TSliderMark,
            TInputNumber: InputNumber,
            TSliderButton: _SliderButton
          },
          model: {
            prop: "value",
            event: "change"
          },
          props: _objectSpread$11({}, props$r),
          setup: function setup(props2, ctx) {
            var disabled = useFormDisabled();
            var COMPONENT_NAME2 = usePrefixClass("slider");
            var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
            var _toRefs = vue.toRefs(props2), value = _toRefs.value, modelValue = _toRefs.modelValue;
            var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), sliderValue = _useVModel2[0], setSliderValue = _useVModel2[1];
            var sliderContainerRef = vue.ref();
            var sliderRef = vue.ref();
            var firstButtonRef = vue.ref();
            var secondButtonRef = vue.ref();
            var sliderState = vue.reactive({
              prevValue: 0,
              showSteps: false
            });
            var firstValue = vue.ref(formatSlderValue(sliderValue.value, "first"));
            var secondValue = vue.ref(formatSlderValue(sliderValue.value, "second"));
            var dragging = vue.ref(false);
            var sliderSize = vue.ref(1);
            var vertical = vue.computed(function() {
              return props2.layout === "vertical";
            });
            var containerClass = vue.computed(function() {
              return ["".concat(COMPONENT_NAME2.value, "__container"), {
                "is-vertical": vertical.value
              }];
            });
            var sliderClass = vue.computed(function() {
              var _ref;
              return ["".concat(COMPONENT_NAME2.value), (_ref = {
                "is-vertical": vertical.value
              }, _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--with-input"), props2.inputNumberProps), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--vertical"), vertical.value), _defineProperty$3(_ref, STATUS.value.disabled, disabled.value), _ref)];
            });
            var sliderRailClass = vue.computed(function() {
              return ["".concat(COMPONENT_NAME2.value, "__rail"), {
                "show-input": props2.inputNumberProps,
                disabled: disabled.value
              }];
            });
            var runwayStyle = vue.computed(function() {
              return vertical.value ? {
                height: "100%"
              } : {};
            });
            var barStyle = vue.computed(function() {
              var barStart = props2.range ? "".concat(100 * (minValue.value - props2.min) / rangeDiff.value, "%") : "0%";
              var cuttentDiff = props2.range ? maxValue.value - minValue.value : firstValue.value - props2.min;
              var barSize = "".concat(100 * cuttentDiff / rangeDiff.value, "%");
              return vertical.value ? {
                height: barSize,
                bottom: barStart
              } : {
                width: barSize,
                left: barStart
              };
            });
            var rangeDiff = vue.computed(function() {
              return props2.max - props2.min;
            });
            var minValue = vue.computed(function() {
              return Math.min(firstValue.value, secondValue.value);
            });
            var maxValue = vue.computed(function() {
              return Math.max(firstValue.value, secondValue.value);
            });
            var steps = vue.computed(function() {
              if (!sliderState.showSteps || props2.min > props2.max)
                return [];
              if (props2.step === 0) {
                console.warn("[Element Warn][Slider]step should not be 0.");
                return [];
              }
              var stepCount = rangeDiff.value / props2.step;
              var stepWidth = 100 * props2.step / rangeDiff.value;
              var result = [];
              for (var i2 = 1; i2 < stepCount; i2++) {
                result.push(i2 * stepWidth);
              }
              if (props2.range) {
                return result.filter(function(step2) {
                  return step2 < 100 * (minValue.value - props2.min) / rangeDiff.value || props2.step > 100 * (maxValue.value - props2.min) / rangeDiff.value;
                });
              }
              return result.filter(function(step2) {
                return step2 > 100 * (firstValue.value - props2.min) / rangeDiff.value;
              });
            });
            var precision = vue.computed(function() {
              var precisions = [props2.min, props2.max, props2.step].map(function(item) {
                var decimalArr = "".concat(item).split(".");
                return decimalArr[1] ? decimalArr[1].length : 0;
              });
              return Math.max.apply(null, precisions);
            });
            var setValues = function setValues2(value2) {
              var _ref2 = [props2.min, props2.max], min22 = _ref2[0], max22 = _ref2[1];
              if (min22 > max22) {
                console.warn("[Slider] max should be greater than min.");
                return;
              }
              if (props2.range && Array.isArray(value2)) {
                var _ref3 = [Math.min.apply(Math, _toConsumableArray(value2)), Math.max.apply(Math, _toConsumableArray(value2))], maxLimit = _ref3[0], minLimit = _ref3[1];
                if (maxLimit > max22) {
                  maxLimit = firstValue.value;
                }
                if (maxLimit < min22) {
                  maxLimit = min22;
                }
                if (minLimit < min22) {
                  minLimit = secondValue.value;
                }
                if (minLimit > max22) {
                  minLimit = max22;
                }
                var _ref4 = [maxLimit, minLimit];
                firstValue.value = _ref4[0];
                secondValue.value = _ref4[1];
                return [maxLimit, minLimit];
              }
              var preValue = value2;
              if (preValue < min22) {
                preValue = min22;
              }
              if (preValue > max22) {
                preValue = max22;
              }
              return preValue;
            };
            var emitChange = function emitChange2(value2) {
              var changeValue2 = value2;
              if (changeValue2 === void 0) {
                if (props2.range) {
                  changeValue2 = [firstValue.value, secondValue.value];
                } else {
                  changeValue2 = sliderState.prevValue;
                }
              }
              var fixValue = setValues(changeValue2);
              setSliderValue(fixValue);
            };
            var resetSize = function resetSize2() {
              if (sliderRef.value) {
                sliderSize.value = sliderRef.value["client".concat(vertical.value ? "Height" : "Width")];
              }
            };
            var init = function init2() {
              var valuetext;
              if (props2.range) {
                if (Array.isArray(sliderValue.value)) {
                  firstValue.value = Math.max(props2.min || 0, sliderValue.value[0]);
                  secondValue.value = Math.min(props2.max || 100, sliderValue.value[1]);
                } else {
                  firstValue.value = props2.min || 0;
                  secondValue.value = props2.max || 100;
                }
                sliderState.prevValue = [firstValue.value, secondValue.value];
                valuetext = "".concat(firstValue.value, "-").concat(secondValue.value);
              } else {
                if (typeof sliderValue.value !== "number") {
                  firstValue.value = props2.min;
                } else {
                  firstValue.value = Math.min(props2.max, Math.max(props2.min, sliderValue.value));
                }
                sliderState.prevValue = firstValue.value;
                valuetext = String(firstValue.value);
              }
              if (sliderContainerRef.value) {
                sliderContainerRef.value.setAttribute("aria-valuetext", valuetext);
              }
              resetSize();
              window.addEventListener("resize", resetSize);
            };
            var setPosition = function setPosition2(percent) {
              var targetValue = percent * rangeDiff.value / 100;
              targetValue = props2.min + targetValue;
              if (!props2.range && firstButtonRef.value) {
                firstButtonRef.value.setPosition(percent);
                return;
              }
              var button;
              if (Math.abs(minValue.value - targetValue) < Math.abs(maxValue.value - targetValue)) {
                button = firstValue.value < secondValue.value ? "button1" : "button2";
              } else {
                button = firstValue.value > secondValue.value ? "button1" : "button2";
              }
              if (button === "button1" && firstButtonRef.value) {
                firstButtonRef.value.setPosition(percent);
              }
              if (button === "button2" && secondButtonRef.value) {
                secondButtonRef.value.setPosition(percent);
              }
            };
            var onSliderClick = function onSliderClick2(event) {
              if (disabled.value || dragging.value) {
                return;
              }
              if (!sliderRef.value)
                return;
              resetSize();
              var value2 = 0;
              if (vertical.value) {
                var sliderOffsetBottom = sliderRef.value.getBoundingClientRect().bottom;
                value2 = (sliderOffsetBottom - event.clientY) / sliderSize.value * 100;
                setPosition(value2);
              } else {
                var sliderOffsetLeft = sliderRef.value.getBoundingClientRect().left;
                value2 = (event.clientX - sliderOffsetLeft) / sliderSize.value * 100;
                setPosition(value2);
              }
            };
            var changeValue = function changeValue2(point) {
              if (disabled.value || dragging.value) {
                return;
              }
              resetSize();
              var value2 = Number(point / rangeDiff.value * 100);
              setPosition(value2);
              emitChange(point);
            };
            vue.watch(function() {
              return sliderValue.value;
            }, function(newVal) {
              if (dragging.value === true)
                return;
              if (Array.isArray(newVal) && props2.range) {
                var _newVal = _slicedToArray(newVal, 2);
                firstValue.value = _newVal[0];
                secondValue.value = _newVal[1];
              } else {
                firstValue.value = newVal;
              }
            });
            vue.watch([firstValue, secondValue, dragging], function(newStates, prevStates) {
              if (newStates[0] !== prevStates[0]) {
                if (props2.range) {
                  emitChange([minValue.value, maxValue.value]);
                } else {
                  emitChange(firstValue.value);
                }
              }
              if (newStates[1] !== prevStates[1]) {
                if (props2.range) {
                  emitChange([minValue.value, maxValue.value]);
                }
              }
              if (newStates[2] !== prevStates[2] && newStates[2] === false) {
                init();
              }
            });
            vue.onMounted(function() {
              init();
            });
            vue.onBeforeUnmount(function() {
              window.removeEventListener("resize", resetSize);
            });
            var markConfig = vue.computed(function() {
              return {
                max: props2.max,
                min: props2.min,
                marks: props2.marks,
                vertical: vertical.value,
                prefixName: COMPONENT_NAME2.value
              };
            });
            var renderMask = useSliderMark(markConfig);
            var inputConfig = vue.computed(function() {
              return {
                max: props2.max,
                min: props2.min,
                inputNumberProps: props2.inputNumberProps,
                step: props2.step,
                prefixName: COMPONENT_NAME2.value,
                vertical: vertical.value,
                disabled: disabled.value
              };
            });
            var renderInputNumber = useSliderInput(inputConfig);
            var renderInputButton = function renderInputButton2() {
              var firstInputVal = props2.range ? firstValue.value : sliderState.prevValue;
              var firstInputOnChange = function firstInputOnChange2(v) {
                firstValue.value = v;
                props2.range ? firstValue.value = v : sliderState.prevValue = v;
              };
              var secondInputVal = secondValue.value;
              var secondInputOnChange = function secondInputOnChange2(v) {
                secondValue.value = v;
              };
              return vue.createVNode("div", {
                "class": ["".concat(COMPONENT_NAME2.value, "__input-container"), {
                  "is-vertical": vertical.value
                }]
              }, [renderInputNumber(firstInputVal, firstInputOnChange), props2.range && vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__center-line")
              }, null), props2.range && renderInputNumber(secondInputVal, secondInputOnChange)]);
            };
            var toggleDragging = function toggleDragging2(toState) {
              dragging.value = toState;
            };
            var _toRefs2 = vue.toRefs(props2), min2 = _toRefs2.min, max2 = _toRefs2.max, step = _toRefs2.step;
            vue.provide(sliderPropsInjectKey, vue.reactive({
              min: min2,
              max: max2,
              step,
              dragging,
              toggleDragging,
              precision,
              disabled,
              resetSize,
              sliderSize
            }));
            return function() {
              return vue.createVNode("div", {
                "class": containerClass.value,
                "ref": sliderContainerRef
              }, [vue.createVNode("div", {
                "class": sliderClass.value,
                "role": "slider",
                "aria-valuemin": props2.min,
                "aria-valuemax": props2.max,
                "aria-orientation": props2.layout,
                "aria-disabled": disabled.value,
                "tooltip-props": props2.tooltipProps
              }, [vue.createVNode("div", {
                "class": sliderRailClass.value,
                "style": runwayStyle.value,
                "onClick": onSliderClick,
                "ref": sliderRef
              }, [vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__track"),
                "style": barStyle.value
              }, null), vue.createVNode(vue.resolveComponent("t-slider-button"), {
                "vertical": vertical.value,
                "value": firstValue.value,
                "ref": firstButtonRef,
                "disabled": disabled.value,
                "tooltip-props": props2.tooltipProps,
                "onInput": function onInput(v) {
                  firstValue.value = v;
                }
              }, null), props2.range && vue.createVNode(vue.resolveComponent("t-slider-button"), {
                "vertical": vertical.value,
                "value": secondValue.value,
                "ref": secondButtonRef,
                "disabled": disabled.value,
                "tooltip-props": props2.tooltipProps,
                "onInput": function onInput(v) {
                  secondValue.value = v;
                }
              }, null), sliderState.showSteps && vue.createVNode("div", null, [steps.value.map(function(item, key) {
                return vue.createVNode("div", {
                  "class": "".concat(COMPONENT_NAME2.value, "__stop"),
                  "key": key,
                  "style": getStopStyle(item, vertical.value)
                }, null);
              })]), renderMask(changeValue)])]), props2.inputNumberProps && renderInputButton()]);
            };
          }
        });
        var Slider = withInstall(_Slider);
        var SliderButton = withInstall(_SliderButton);
        var props$q = {
          customValue: {
            type: Array
          },
          disabled: Boolean,
          label: {
            type: [Array, Function],
            "default": function _default() {
              return [];
            }
          },
          loading: Boolean,
          size: {
            type: String,
            "default": "medium",
            validator: function validator(val) {
              return ["small", "medium", "large"].includes(val);
            }
          },
          modelValue: {
            type: [String, Number, Boolean],
            "default": void 0
          },
          value: {
            type: [String, Number, Boolean],
            "default": void 0
          },
          defaultValue: {
            type: [String, Number, Boolean],
            "default": false
          },
          onChange: Function
        };
        function ownKeys$11(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$10(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$11(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$11(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _Switch = vue.defineComponent({
          name: "TSwitch",
          props: _objectSpread$10({}, props$q),
          setup: function setup(props2, _ref) {
            var slots = _ref.slots;
            var disabled = useFormDisabled();
            var COMPONENT_NAME2 = usePrefixClass("switch");
            var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS, SIZE = _useCommonClassName.SIZE;
            var _toRefs = vue.toRefs(props2), value = _toRefs.value, modelValue = _toRefs.modelValue;
            var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerValue = _useVModel2[0], setSwitchVal = _useVModel2[1];
            var activeValue = vue.computed(function() {
              if (props2.customValue && props2.customValue.length > 0) {
                return props2.customValue[0];
              }
              return true;
            });
            var inactiveValue = vue.computed(function() {
              if (props2.customValue && props2.customValue.length > 1) {
                return props2.customValue[1];
              }
              return false;
            });
            function handleToggle() {
              var checked = innerValue.value === activeValue.value ? inactiveValue.value : activeValue.value;
              setSwitchVal(checked);
            }
            function toggle() {
              if (disabled.value || props2.loading) {
                return;
              }
              handleToggle();
            }
            var classes = vue.computed(function() {
              var _ref2;
              return ["".concat(COMPONENT_NAME2.value), SIZE.value[props2.size], (_ref2 = {}, _defineProperty$3(_ref2, STATUS.value.disabled, disabled.value), _defineProperty$3(_ref2, STATUS.value.loading, props2.loading), _defineProperty$3(_ref2, STATUS.value.checked, innerValue.value === activeValue.value || props2.modelValue === activeValue.value), _ref2)];
            });
            var nodeClasses = vue.computed(function() {
              var _ref3;
              return ["".concat(COMPONENT_NAME2.value, "__handle"), (_ref3 = {}, _defineProperty$3(_ref3, STATUS.value.disabled, disabled.value), _defineProperty$3(_ref3, STATUS.value.loading, props2.loading), _ref3)];
            });
            var contentClasses = vue.computed(function() {
              return ["".concat(COMPONENT_NAME2.value, "__content"), SIZE.value[props2.size], _defineProperty$3({}, STATUS.value.disabled, disabled.value)];
            });
            vue.watch(innerValue, function(val) {
              if (props2.customValue && props2.customValue.length && !props2.customValue.includes(val)) {
                throw new Error("value is not in ".concat(JSON.stringify(props2.customValue)));
              }
            }, {
              immediate: true
            });
            var content = vue.computed(function() {
              if (typeof props2.label === "function") {
                return props2.label(vue.h, {
                  value: innerValue.value
                });
              }
              if (typeof props2.label === "string") {
                return props2.label;
              }
              if (Array.isArray(props2.label)) {
                var label = innerValue.value === activeValue.value ? props2.label[0] : props2.label[1];
                if (!label)
                  return;
                if (typeof label === "string") {
                  return label;
                }
                if (typeof label === "function") {
                  return label(vue.h);
                }
              }
              if (slots.label) {
                return slots.label({
                  value: innerValue.value
                });
              }
              return null;
            });
            return function() {
              var switchContent;
              var loadingContent;
              if (props2.loading) {
                loadingContent = vue.createVNode(Loading, {
                  "size": "small"
                }, null);
              } else if (content.value) {
                switchContent = content.value;
              }
              return vue.createVNode("div", {
                "class": classes.value,
                "disabled": disabled.value,
                "onClick": toggle
              }, [vue.createVNode("span", {
                "class": nodeClasses.value
              }, [loadingContent]), vue.createVNode("div", {
                "class": contentClasses.value
              }, [switchContent])]);
            };
          }
        });
        var Switch = withInstall(_Switch);
        var props$p = {
          autofocus: Boolean,
          autosize: {
            type: [Boolean, Object],
            "default": false
          },
          disabled: Boolean,
          maxcharacter: {
            type: Number
          },
          maxlength: {
            type: Number
          },
          name: {
            type: String,
            "default": ""
          },
          placeholder: {
            type: String,
            "default": void 0
          },
          readonly: Boolean,
          status: {
            type: String,
            validator: function validator(val) {
              return ["success", "warning", "error"].includes(val);
            }
          },
          tips: {
            type: [String, Function]
          },
          value: {
            type: [String, Number]
          },
          modelValue: {
            type: [String, Number]
          },
          defaultValue: {
            type: [String, Number]
          },
          onBlur: Function,
          onChange: Function,
          onFocus: Function,
          onKeydown: Function,
          onKeypress: Function,
          onKeyup: Function
        };
        var hiddenTextarea;
        var HIDDEN_TEXTAREA_STYLE = "\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n";
        var SIZING_PROPS = ["letter-spacing", "line-height", "padding-top", "padding-bottom", "font-family", "font-weight", "font-size", "font-variant", "text-rendering", "text-transform", "width", "text-indent", "padding-left", "padding-right", "border-width", "box-sizing"];
        function calculateNodeStyling(targetElement) {
          var style = window.getComputedStyle(targetElement);
          var boxSizing = style.getPropertyValue("box-sizing") || style.getPropertyValue("-moz-box-sizing") || style.getPropertyValue("-webkit-box-sizing");
          var paddingSize = parseFloat(style.getPropertyValue("padding-bottom")) + parseFloat(style.getPropertyValue("padding-top"));
          var borderSize = parseFloat(style.getPropertyValue("border-bottom-width")) + parseFloat(style.getPropertyValue("border-top-width"));
          var sizingStyle = SIZING_PROPS.map(function(name) {
            return "".concat(name, ":").concat(style.getPropertyValue(name));
          }).join(";");
          return {
            sizingStyle,
            paddingSize,
            borderSize,
            boxSizing
          };
        }
        function calcTextareaHeight(targetElement) {
          var minRows = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
          var maxRows = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!hiddenTextarea) {
            hiddenTextarea = document.createElement("textarea");
            document.body.appendChild(hiddenTextarea);
          }
          var _calculateNodeStyling = calculateNodeStyling(targetElement), paddingSize = _calculateNodeStyling.paddingSize, borderSize = _calculateNodeStyling.borderSize, boxSizing = _calculateNodeStyling.boxSizing, sizingStyle = _calculateNodeStyling.sizingStyle;
          hiddenTextarea.setAttribute("style", "".concat(sizingStyle, ";").concat(HIDDEN_TEXTAREA_STYLE));
          hiddenTextarea.value = targetElement.value || targetElement.placeholder || "";
          var height = hiddenTextarea.scrollHeight;
          var result = {};
          if (boxSizing === "border-box") {
            height += borderSize;
          } else if (boxSizing === "content-box") {
            height -= paddingSize;
          }
          hiddenTextarea.value = "";
          var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
          if (minRows !== null) {
            var minHeight = singleRowHeight * minRows;
            if (boxSizing === "border-box") {
              minHeight = minHeight + paddingSize + borderSize;
            }
            height = Math.max(minHeight, height);
            result.minHeight = "".concat(minHeight, "px");
          }
          if (maxRows !== null) {
            var maxHeight = singleRowHeight * maxRows;
            if (boxSizing === "border-box") {
              maxHeight = maxHeight + paddingSize + borderSize;
            }
            height = Math.min(maxHeight, height);
          }
          result.height = "".concat(height, "px");
          hiddenTextarea.parentNode && hiddenTextarea.parentNode.removeChild(hiddenTextarea);
          hiddenTextarea = null;
          return result;
        }
        function ownKeys$10(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$$(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$10(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$10(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function getValidAttrs(obj) {
          var newObj = {};
          Object.keys(obj).forEach(function(key) {
            if (typeof obj[key] !== "undefined") {
              newObj[key] = obj[key];
            }
          });
          return newObj;
        }
        var _Textarea = vue.defineComponent({
          name: "TTextarea",
          props: _objectSpread$$({}, props$p),
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var prefix = usePrefixClass();
            var name = usePrefixClass("textarea");
            var TEXTAREA_TIPS_CLASS = vue.computed(function() {
              return "".concat(name.value, "__tips");
            });
            var TEXTAREA_LIMIT = vue.computed(function() {
              return "".concat(name.value, "__limit");
            });
            var _toRefs = vue.toRefs(props2), value = _toRefs.value, modelValue = _toRefs.modelValue;
            var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerValue = _useVModel2[0], setInnerValue = _useVModel2[1];
            var disabled = useFormDisabled();
            var textareaStyle = vue.ref({});
            var refTextareaElem = vue.ref();
            var focused = vue.ref(false);
            var adjustTextareaHeight = function adjustTextareaHeight2() {
              if (props2.autosize === true) {
                vue.nextTick(function() {
                  textareaStyle.value = calcTextareaHeight(refTextareaElem.value);
                });
              } else if (_typeof$2(props2.autosize) === "object") {
                var _props2$autosize = props2.autosize, minRows = _props2$autosize.minRows, maxRows = _props2$autosize.maxRows;
                textareaStyle.value = calcTextareaHeight(refTextareaElem.value, minRows, maxRows);
              } else if (attrs.rows) {
                textareaStyle.value = {
                  height: "auto",
                  minHeight: "auto"
                };
              }
            };
            var setInputValue = function setInputValue2() {
              var v = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
              var textareaElem = refTextareaElem.value;
              var sV = String(v);
              if (!textareaElem) {
                return;
              }
              if (textareaElem.value !== sV) {
                textareaElem.value = sV;
                innerValue.value = sV;
              }
            };
            var inputValueChangeHandle = function inputValueChangeHandle2(e) {
              var target = e.target;
              var val = target.value;
              if (props2.maxcharacter && props2.maxcharacter >= 0) {
                var stringInfo = getCharacterLength(val, props2.maxcharacter);
                val = _typeof$2(stringInfo) === "object" && stringInfo.characters;
              }
              setInnerValue(val, {
                e
              });
              vue.nextTick(function() {
                return setInputValue(val);
              });
              adjustTextareaHeight();
            };
            var handleInput = function handleInput2(e) {
              if (e.isComposing || e.inputType === "insertCompositionText")
                return;
              inputValueChangeHandle(e);
            };
            var onCompositionend = function onCompositionend2(e) {
              inputValueChangeHandle(e);
            };
            var eventDeal = function eventDeal2(name2, e) {
              var _props2$_name;
              if (disabled.value)
                return;
              var _name = "on".concat(name2[0].toUpperCase()).concat(name2.slice(1));
              (_props2$_name = props2[_name]) === null || _props2$_name === void 0 ? void 0 : _props2$_name.call(props2, innerValue.value, {
                e
              });
            };
            var emitKeyDown = function emitKeyDown2(e) {
              eventDeal("keydown", e);
            };
            var emitKeyUp = function emitKeyUp2(e) {
              eventDeal("keyup", e);
            };
            var emitKeypress = function emitKeypress2(e) {
              eventDeal("keypress", e);
            };
            var emitFocus = function emitFocus2(e) {
              var _props2$onFocus;
              if (disabled.value)
                return;
              focused.value = true;
              (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 ? void 0 : _props2$onFocus.call(props2, innerValue.value, {
                e
              });
            };
            var formItem = vue.inject(FormItemInjectionKey, void 0);
            var emitBlur = function emitBlur2(e) {
              var _props2$onBlur;
              focused.value = false;
              (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 ? void 0 : _props2$onBlur.call(props2, innerValue.value, {
                e
              });
              formItem === null || formItem === void 0 ? void 0 : formItem.handleBlur();
            };
            var textareaClasses = vue.computed(function() {
              var _ref2;
              return [name.value, (_ref2 = {}, _defineProperty$3(_ref2, "".concat(prefix.value, "-is-disabled"), disabled.value), _defineProperty$3(_ref2, "".concat(prefix.value, "-is-readonly"), props2.readonly), _ref2)];
            });
            var inputAttrs = vue.computed(function() {
              return getValidAttrs({
                autofocus: props2.autofocus,
                disabled: disabled.value,
                readonly: props2.readonly,
                placeholder: props2.placeholder,
                maxlength: props2.maxlength || void 0,
                name: props2.name || void 0
              });
            });
            var characterNumber = vue.computed(function() {
              var characterInfo = getCharacterLength(String(innerValue.value || ""));
              if (_typeof$2(characterInfo) === "object") {
                return characterInfo.length;
              }
              return characterInfo;
            });
            vue.watch(function() {
              return innerValue.value;
            }, function() {
              return adjustTextareaHeight();
            });
            vue.watch(refTextareaElem, function(el) {
              if (!el)
                return;
              adjustTextareaHeight();
            });
            vue.watch(function() {
              return props2.autofocus;
            }, function(val) {
              if (val) {
                refTextareaElem.value.focus();
              }
            });
            vue.onMounted(function() {
              adjustTextareaHeight();
            });
            var renderTNodeJSX2 = useTNodeJSX();
            return function() {
              var _String;
              var inputEvents = getValidAttrs({
                onFocus: emitFocus,
                onBlur: emitBlur,
                onKeydown: emitKeyDown,
                onKeyup: emitKeyUp,
                onKeypress: emitKeypress
              });
              var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
              var classes = vue.computed(function() {
                var _ref3;
                return ["".concat(name.value, "__inner"), (_ref3 = {}, _defineProperty$3(_ref3, "".concat(prefix.value, "-is-").concat(props2.status), props2.status), _defineProperty$3(_ref3, STATUS.value.disabled, disabled.value), _defineProperty$3(_ref3, STATUS.value.focused, focused.value), _defineProperty$3(_ref3, "".concat(prefix.value, "-resize-none"), props2.maxlength), _ref3), "narrow-scrollbar"];
              });
              var tips = renderTNodeJSX2("tips");
              return vue.createVNode("div", {
                "class": textareaClasses.value
              }, [vue.createVNode("textarea", vue.mergeProps({
                "onInput": handleInput,
                "onCompositionend": onCompositionend,
                "ref": refTextareaElem,
                "value": innerValue.value,
                "style": textareaStyle.value,
                "class": classes.value
              }, inputEvents, inputAttrs.value), null), props2.maxcharacter && vue.createVNode("span", {
                "class": TEXTAREA_LIMIT.value
              }, ["".concat(characterNumber.value, "/").concat(props2.maxcharacter)]), !props2.maxcharacter && props2.maxlength ? vue.createVNode("span", {
                "class": TEXTAREA_LIMIT.value
              }, ["".concat(innerValue.value ? (_String = String(innerValue.value)) === null || _String === void 0 ? void 0 : _String.length : 0, "/").concat(props2.maxlength)]) : null, tips && vue.createVNode("div", {
                "class": "".concat(TEXTAREA_TIPS_CLASS.value, " ").concat(name.value, "__tips--").concat(props2.status || "normal")
              }, [tips])]);
            };
          }
        });
        var Textarea = withInstall(_Textarea);
        function ownKeys$$(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$_(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$$(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$$(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var TRANSFER_NAME = "TTransfer";
        function getTransferListOption(prop) {
          if (Array.isArray(prop)) {
            return {
              source: prop[0],
              target: prop[1]
            };
          }
          return {
            source: prop,
            target: prop
          };
        }
        function getDataValues(data, filterValues) {
          var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref$isTreeMode = _ref.isTreeMode, isTreeMode = _ref$isTreeMode === void 0 ? false : _ref$isTreeMode, _ref$include = _ref.include, include = _ref$include === void 0 ? true : _ref$include;
          if (isTreeMode) {
            var result = [];
            if (data) {
              for (var i2 = 0; i2 < data.length; i2++) {
                var item = data[i2];
                var isInclude = filterValues.includes(item.value);
                if (!include && isInclude) {
                  continue;
                }
                if (item.children && item.children.length > 0) {
                  var childResult = getDataValues(item.children, filterValues, {
                    isTreeMode,
                    include
                  });
                  result = result.concat(childResult);
                } else if (include && isInclude || !include && !isInclude) {
                  result.push(item.value);
                }
              }
            }
            return result;
          }
          return data.filter(function(item2) {
            var isInclude2 = filterValues.includes(item2.value);
            return (include && isInclude2 || !include && !isInclude2) && !item2.disabled;
          }).map(function(item2) {
            return item2.value;
          });
        }
        function getTransferData(data, keys2) {
          var isTreeMode = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
          var list = data.map(function(transferDataItem, index2) {
            var _transferDataItem$dis;
            var labelKey = (keys2 === null || keys2 === void 0 ? void 0 : keys2.label) || "label";
            var valueKey = (keys2 === null || keys2 === void 0 ? void 0 : keys2.value) || "value";
            if (transferDataItem[labelKey] === void 0) {
              throw new Error("".concat(labelKey, " is not in DataOption ").concat(JSON.stringify(transferDataItem)));
            }
            if (transferDataItem[valueKey] === void 0) {
              throw new Error("".concat(valueKey, " is not in DataOption ").concat(JSON.stringify(transferDataItem)));
            }
            var result = {
              label: transferDataItem[labelKey],
              value: transferDataItem[valueKey],
              key: "key__value_".concat(transferDataItem[valueKey], "_index_").concat(index2),
              disabled: (_transferDataItem$dis = transferDataItem.disabled) !== null && _transferDataItem$dis !== void 0 ? _transferDataItem$dis : false,
              data: transferDataItem
            };
            if (isTreeMode && transferDataItem.children) {
              result.children = getTransferData(transferDataItem.children, keys2, true);
            }
            return result;
          });
          return list;
        }
        function isAllNodeValid(data, filterValues, needMatch) {
          if (filterValues.includes(data.value)) {
            return needMatch;
          }
          return false;
        }
        function isTreeNodeValid(data, filterValues, needMatch) {
          if (!data)
            return !needMatch;
          if (filterValues.includes(data.value)) {
            return needMatch;
          }
          if (data.children) {
            return data.children.some(function(item) {
              return isTreeNodeValid(item, filterValues, needMatch);
            });
          }
          return !needMatch;
        }
        function cloneTreeWithFilter(sourceTree, targetTree, filterValues, needMatch) {
          sourceTree.forEach(function(item) {
            var newNode;
            if (isAllNodeValid(item, filterValues, needMatch)) {
              newNode = cloneDeep_1(item);
              targetTree.push(newNode);
            } else if (isTreeNodeValid(item, filterValues, needMatch)) {
              newNode = _objectSpread$_({}, item);
              delete newNode.children;
              targetTree.push(newNode);
              if (item.children) {
                newNode.children = [];
                cloneTreeWithFilter(item.children, newNode.children, filterValues, needMatch);
                if (newNode.children.length === 0) {
                  delete newNode.children;
                }
              }
            }
          });
        }
        function filterTransferData(data, filterValues) {
          var needMatch = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
          var isTreeMode = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
          if (!isTreeMode) {
            if (needMatch) {
              return filterValues.map(function(value) {
                return data.find(function(item) {
                  return item.value === value;
                });
              });
            }
            return data.filter(function(item) {
              var isMatch = filterValues.includes(item.value);
              return !isMatch;
            });
          }
          var result = [];
          cloneTreeWithFilter(data, result, filterValues, needMatch);
          return result;
        }
        function getLefCount(nodes) {
          var total = 0;
          nodes.forEach(function(child) {
            if (child.children && child.children.length > 0) {
              total += getLefCount(child.children);
            } else {
              total += 1;
            }
          });
          return total;
        }
        var Search = vue.defineComponent({
          name: "TTransferSearch",
          props: {
            value: {
              type: String,
              "default": ""
            },
            search: {
              type: [Boolean, Object],
              "default": false
            },
            placeholder: {
              type: String,
              "default": ""
            },
            onChange: Function
          },
          setup: function setup(props2) {
            var classPrefix2 = usePrefixClass();
            var handleChange = function handleChange2(value, changeCtx) {
              var _props$onChange;
              (_props$onChange = props2.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props2, {
                value,
                e: changeCtx.e
              });
            };
            var inputProps = _typeof$2(props2.search) === "object" ? props2.search : {
              clearable: true
            };
            return function() {
              return vue.createVNode("div", {
                "class": "".concat(classPrefix2.value, "-transfer__search-wrapper")
              }, [vue.createVNode(Input, vue.mergeProps(inputProps, {
                "defaultValue": props2.value,
                "onChange": handleChange,
                "placeholder": props2.placeholder
              }), {
                "default": function _default() {
                  return [vue.createVNode(search, {
                    "slot": "suffix-icon"
                  }, null)];
                }
              })]);
            };
          }
        });
        function ownKeys$_(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$Z(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$_(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$_(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot$g(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var props$o = {
          checkboxProps: {
            type: Object,
            "default": function _default() {
              return {};
            }
          },
          dataSource: {
            type: Array,
            "default": function _default() {
              return [];
            }
          },
          listType: {
            type: String,
            "default": "target"
          },
          title: {
            type: [String, Function]
          },
          checkedValue: {
            type: Array,
            "default": function _default() {
              return [];
            }
          },
          disabled: {
            type: Boolean,
            "default": false
          },
          search: {
            type: [Boolean, Object],
            "default": false
          },
          transferItem: Function,
          empty: {
            type: [Function, String]
          },
          pagination: [Boolean, Object],
          footer: [Function, String],
          checkAll: Boolean,
          isTreeMode: {
            type: Boolean,
            "default": false
          },
          onCheckedChange: Function
        };
        var TransferList = vue.defineComponent({
          name: "TTransferList",
          props: _objectSpread$Z({}, props$o),
          setup: function setup(props2) {
            var classPrefix2 = usePrefixClass();
            var _useConfig = useConfig("transfer"), t = _useConfig.t, global2 = _useConfig.global;
            var filterValue = vue.ref("");
            var defaultCurrent = vue.ref(1);
            var defaultPageSize = vue.ref(0);
            var currentPage = vue.computed(function() {
              var pagination = props2.pagination;
              return (pagination === null || pagination === void 0 ? void 0 : pagination.current) || defaultCurrent.value || (pagination === null || pagination === void 0 ? void 0 : pagination.defaultCurrent);
            });
            var pageSize = vue.computed(function() {
              var pagination = props2.pagination;
              return (pagination === null || pagination === void 0 ? void 0 : pagination.pageSize) || defaultPageSize.value || (pagination === null || pagination === void 0 ? void 0 : pagination.defaultPageSize);
            });
            var filteredData = vue.computed(function() {
              return props2.dataSource.filter(function(item) {
                var label = item && item.label.toString();
                return label.toLowerCase().indexOf(filterValue.value.toLowerCase()) > -1;
              });
            });
            var pageTotal = vue.computed(function() {
              return filteredData.value && filteredData.value.length || 0;
            });
            var curPageData = vue.computed(function() {
              var pageData = filteredData.value;
              if (!props2.pagination)
                return pageData;
              if (pageSize.value === 0)
                return pageData;
              var startIndex = (currentPage.value - 1) * pageSize.value;
              var endIndex = currentPage.value * pageSize.value;
              pageData = pageData.slice(startIndex, endIndex);
              return pageData;
            });
            var paginationProps = vue.computed(function() {
              var defaultPaginationProps = {
                size: "small",
                theme: "simple",
                totalContent: false,
                pageSizeOptions: []
              };
              return _typeof$2(props2.pagination) === "object" ? _objectSpread$Z(_objectSpread$Z(_objectSpread$Z({}, defaultPaginationProps), props2.pagination), {}, {
                current: currentPage.value,
                total: pageTotal.value,
                pageSize: pageSize.value
              }) : {};
            });
            var isAllChecked = vue.computed(function() {
              var allValue = getDataValues(props2.dataSource, [], {
                isTreeMode: props2.isTreeMode,
                include: false
              });
              return props2.checkedValue.length > 0 && (props2.isTreeMode ? allValue.every(function(item) {
                return props2.checkedValue.includes(item);
              }) : props2.dataSource.every(function(item) {
                return item.disabled || props2.checkedValue.includes(item.value);
              }));
            });
            var indeterminate = vue.computed(function() {
              return !isAllChecked.value && props2.checkedValue.length > 0;
            });
            var totalCount = vue.computed(function() {
              return getLefCount(props2.dataSource);
            });
            vue.watch(totalCount, function(val) {
              if (val <= (currentPage.value - 1) * pageSize.value) {
                var lastPage = Math.ceil(val / pageSize.value);
                defaultCurrent.value = lastPage;
              }
            });
            var handlePaginationChange = function handlePaginationChange2(pageInfo) {
              var _props2$onPageChange;
              (_props2$onPageChange = props2.onPageChange) === null || _props2$onPageChange === void 0 ? void 0 : _props2$onPageChange.call(props2, pageInfo);
              defaultCurrent.value = pageInfo.current;
              defaultPageSize.value = pageInfo.pageSize;
            };
            var handleCheckedChange = function handleCheckedChange2(val) {
              var _props2$onCheckedChan;
              (_props2$onCheckedChan = props2.onCheckedChange) === null || _props2$onCheckedChan === void 0 ? void 0 : _props2$onCheckedChan.call(props2, val);
            };
            var handleCheckedAllChange = function handleCheckedAllChange2(checked) {
              if (checked) {
                var allValue = getDataValues(props2.dataSource, [], {
                  isTreeMode: props2.isTreeMode,
                  include: false
                });
                handleCheckedChange(allValue);
              } else {
                handleCheckedChange([]);
              }
            };
            var scroll = function scroll2(e) {
              var _props2$onScroll;
              (_props2$onScroll = props2.onScroll) === null || _props2$onScroll === void 0 ? void 0 : _props2$onScroll.call(props2, e);
            };
            var handleSearch = function handleSearch2(e) {
              var _props2$onSearch;
              var event = {
                query: e.value,
                type: props2.listType,
                e: e.e,
                trigger: e.trigger
              };
              filterValue.value = e.value;
              (_props2$onSearch = props2.onSearch) === null || _props2$onSearch === void 0 ? void 0 : _props2$onSearch.call(props2, event);
            };
            var renderTNodeJSX2 = useTNodeDefault();
            var renderTitle2 = function renderTitle3() {
              var defaultNode = props2.title && typeof props2.title === "string" ? vue.createVNode("template", null, [props2.title]) : null;
              var titleNode = renderTNodeJSX2("title", {
                defaultNode,
                params: {
                  type: props2.listType
                }
              });
              return vue.createVNode("span", null, [titleNode]);
            };
            var renderContent2 = function renderContent3() {
              var _slot2;
              var defaultNode = vue.createVNode(CheckboxGroup, {
                "value": props2.checkedValue,
                "onChange": handleCheckedChange
              }, _isSlot$g(_slot2 = curPageData.value.map(function(item, index2) {
                var _slot;
                return vue.createVNode(Checkbox, vue.mergeProps({
                  "disabled": props2.disabled || item.disabled,
                  "value": item.value,
                  "needRipple": true,
                  "class": ["".concat(classPrefix2.value, "-transfer__list-item"), props2.checkedValue.includes(item.value) ? "".concat(classPrefix2.value, "-is-checked") : ""],
                  "key": item.key
                }, {
                  props: props2.checkboxProps
                }), _isSlot$g(_slot = renderTNodeJSX2("transferItem", {
                  defaultNode: vue.createVNode("span", null, [item.label]),
                  params: {
                    data: item.data,
                    index: index2,
                    type: props2.listType
                  }
                })) ? _slot : {
                  "default": function _default() {
                    return [_slot];
                  }
                });
              })) ? _slot2 : {
                "default": function _default() {
                  return [_slot2];
                }
              });
              return vue.createVNode("div", {
                "class": "".concat(classPrefix2.value, "-transfer__list-content narrow-scrollbar"),
                "onScroll": scroll
              }, [renderTNodeJSX2("tree", {
                defaultNode,
                params: {
                  data: curPageData.value,
                  value: props2.checkedValue,
                  onChange: handleCheckedChange
                }
              })]);
            };
            var renderEmpty = function renderEmpty2() {
              var empty = props2.empty || t(global2.value.empty);
              var defaultNode = typeof empty === "string" ? vue.createVNode("span", null, [empty]) : null;
              return vue.createVNode("div", {
                "class": "".concat(classPrefix2.value, "-transfer__empty")
              }, [renderTNodeJSX2("empty", {
                defaultNode,
                params: {
                  type: props2.listType
                }
              })]);
            };
            var renderFooter = function renderFooter2() {
              var defaultNode = typeof props2.footer === "string" ? vue.createVNode("div", {
                "class": "".concat(classPrefix2.value, "-transfer__footer")
              }, [props2.footer]) : null;
              return renderTNodeJSX2("footer", {
                defaultNode,
                params: {
                  type: props2.listType
                }
              });
            };
            return function() {
              return vue.createVNode("div", {
                "class": "".concat(classPrefix2.value, "-transfer__list ").concat(classPrefix2.value, "-transfer__list-").concat(props2.listType)
              }, [vue.createVNode("div", {
                "class": "".concat(classPrefix2.value, "-transfer__list-header")
              }, [vue.createVNode("div", null, [props2.checkAll && vue.createVNode(Checkbox, {
                "disabled": props2.disabled || !props2.dataSource.length,
                "checked": isAllChecked.value,
                "indeterminate": indeterminate.value,
                "onChange": handleCheckedAllChange
              }, null), vue.createVNode("span", null, [t(global2.value.title, {
                checked: props2.checkedValue.length,
                total: totalCount.value
              })])]), renderTitle2()]), vue.createVNode("div", {
                "class": ["".concat(classPrefix2.value, "-transfer__list-body"), props2.search ? "".concat(classPrefix2.value, "-transfer__list--with-search") : ""]
              }, [props2.search && vue.createVNode(Search, {
                "searchValue": filterValue.value,
                "placeholder": t(global2.value.placeholder),
                "onChange": handleSearch,
                "disabled": props2.disabled,
                "search": props2.search
              }, null), curPageData.value.length > 0 ? renderContent2() : renderEmpty()]), props2.pagination && pageSize.value > 0 && pageTotal.value > 0 && vue.createVNode("div", {
                "class": "".concat(classPrefix2.value, "-transfer__list-pagination")
              }, [vue.createVNode(Pagination, vue.mergeProps(paginationProps.value, {
                "onChange": handlePaginationChange
              }), null)]), renderFooter()]);
            };
          }
        });
        var props$n = {
          checkboxProps: {
            type: Object
          },
          checked: {
            type: Array,
            "default": void 0
          },
          defaultChecked: {
            type: Array,
            "default": function _default() {
              return [];
            }
          },
          data: {
            type: Array,
            "default": function _default() {
              return [];
            }
          },
          direction: {
            type: String,
            "default": "both",
            validator: function validator(val) {
              return ["left", "right", "both"].includes(val);
            }
          },
          disabled: {
            type: [Boolean, Array],
            "default": false
          },
          empty: {
            type: [String, Array, Function],
            "default": ""
          },
          footer: {
            type: [Array, Function]
          },
          keys: {
            type: Object
          },
          operation: {
            type: [Array, Function]
          },
          pagination: {
            type: [Object, Array]
          },
          search: {
            type: [Boolean, Object, Array],
            "default": false
          },
          showCheckAll: {
            type: [Boolean, Array],
            "default": true
          },
          targetSort: {
            type: String,
            "default": "original",
            validator: function validator(val) {
              return ["original", "push", "unshift"].includes(val);
            }
          },
          title: {
            type: [Array, Function],
            "default": function _default() {
              return [];
            }
          },
          transferItem: {
            type: Function
          },
          value: {
            type: Array,
            "default": void 0
          },
          modelValue: {
            type: Array,
            "default": void 0
          },
          defaultValue: {
            type: Array,
            "default": function _default() {
              return [];
            }
          },
          onChange: Function,
          onCheckedChange: Function,
          onPageChange: Function,
          onScroll: Function,
          onSearch: Function
        };
        function _isSlot$f(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var TransferOperations = vue.defineComponent({
          name: "TTransferOperations",
          props: {
            leftDisabled: {
              type: Boolean,
              required: true
            },
            rightDisabled: {
              type: Boolean,
              required: true
            },
            operation: props$n.operation
          },
          emits: ["moveToRight", "moveToLeft"],
          setup: function setup(props2, _ref) {
            var slots = _ref.slots, emit = _ref.emit;
            var classPrefix2 = usePrefixClass();
            var moveToRight = function moveToRight2() {
              emit("moveToRight");
            };
            var moveToLeft = function moveToLeft2() {
              emit("moveToLeft");
            };
            var getIconRight = function getIconRight2() {
              return vue.createVNode(chevronRight, null, null);
            };
            var getIconLeft = function getIconLeft2() {
              return vue.createVNode(chevronLeft, null, null);
            };
            var getIcon = function getIcon2(direction) {
              if (typeof props2.operation === "function") {
                return null;
              }
              if (direction === "right" && props2.operation && typeof props2.operation[0] === "function") {
                return null;
              }
              if (direction === "left" && props2.operation && typeof props2.operation[1] === "function") {
                return null;
              }
              if (slots.operation) {
                return null;
              }
              return direction === "left" ? getIconLeft : getIconRight;
            };
            var renderButton = function renderButton2(h2, direction) {
              if (typeof slots.operation === "function") {
                return slots.operation({
                  direction
                });
              }
              if (typeof props2.operation === "function") {
                var renderContent2 = props2.operation;
                return renderContent2(h2, {
                  direction
                });
              }
              var renderContent3;
              if (Array.isArray(props2.operation)) {
                var _props2$operation = _slicedToArray(props2.operation, 2), left2 = _props2$operation[0], right2 = _props2$operation[1];
                renderContent3 = direction === "right" ? right2 : left2;
              } else {
                renderContent3 = "";
              }
              return renderContent3;
            };
            return function() {
              var _slot, _slot2;
              return vue.createVNode("div", {
                "class": "".concat(classPrefix2.value, "-transfer__operations")
              }, [vue.createVNode(Button, {
                "variant": props2.rightDisabled ? "outline" : "base",
                "key": props2.rightDisabled ? "right-outline" : "right-base",
                "disabled": props2.rightDisabled,
                "onClick": moveToRight,
                "icon": getIcon("right")
              }, _isSlot$f(_slot = renderButton(vue.h, "right")) ? _slot : {
                "default": function _default() {
                  return [_slot];
                }
              }), vue.createVNode(Button, {
                "variant": props2.leftDisabled ? "outline" : "base",
                "key": props2.rightDisabled ? "left-outline" : "left-base",
                "disabled": props2.leftDisabled,
                "onClick": moveToLeft,
                "icon": getIcon("left")
              }, _isSlot$f(_slot2 = renderButton(vue.h, "left")) ? _slot2 : {
                "default": function _default() {
                  return [_slot2];
                }
              })]);
            };
          }
        });
        function ownKeys$Z(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$Y(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$Z(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Z(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot$e(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var SOURCE = "source";
        var TARGET = "target";
        var _Transfer = vue.defineComponent({
          name: TRANSFER_NAME,
          props: _objectSpread$Y({}, props$n),
          setup: function setup(props2, _ref) {
            var slots = _ref.slots;
            var disabled = useFormDisabled();
            var classPrefix2 = usePrefixClass();
            var _toRefs = vue.toRefs(props2), value = _toRefs.value, modelValue = _toRefs.modelValue, checked = _toRefs.checked;
            var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerValue = _useVModel2[0], setInnerValue = _useVModel2[1];
            var _useDefaultValue = useDefaultValue(checked, props2.defaultChecked, props2.onCheckedChange, "checked"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 1), innerChecked = _useDefaultValue2[0];
            var valueList = vue.computed(function() {
              return innerValue.value;
            });
            var isTreeMode = vue.computed(function() {
              var treeSlot = slots.tree;
              return typeof treeSlot === "function";
            });
            var leftButtonDisabled = vue.computed(function() {
              return props2.direction === "right";
            });
            var rightButtonDisabled = vue.computed(function() {
              return props2.direction === "left";
            });
            var transferData = vue.computed(function() {
              return getTransferData(props2.data, props2.keys, isTreeMode.value);
            });
            var sourceList = vue.computed(function() {
              return filterTransferData(transferData.value, valueList.value, false, isTreeMode.value);
            });
            var targetList = vue.computed(function() {
              return filterTransferData(transferData.value, valueList.value, true, isTreeMode.value);
            });
            var checkedValue = vue.computed(function() {
              var _ref2;
              return _ref2 = {}, _defineProperty$3(_ref2, SOURCE, getDataValues(sourceList.value, innerChecked.value, {
                isTreeMode: isTreeMode.value
              })), _defineProperty$3(_ref2, TARGET, getDataValues(targetList.value, innerChecked.value, {
                isTreeMode: isTreeMode.value
              })), _ref2;
            });
            var hasFooter = vue.computed(function() {
              return !!slots.footer || !!props2.footer;
            });
            var showPagination = vue.computed(function() {
              return !!props2.pagination && !slots.content;
            });
            var showSearch = vue.computed(function() {
              return !!props2.search;
            });
            var footerOption = vue.computed(function() {
              var footer = props2.footer || "";
              return getTransferListOption(footer);
            });
            var emptyOption = vue.computed(function() {
              return getTransferListOption(props2.empty);
            });
            var searchOption = vue.computed(function() {
              return getTransferListOption(props2.search);
            });
            var checkAllOption = vue.computed(function() {
              return getTransferListOption(props2.showCheckAll);
            });
            var disabledOption = vue.computed(function() {
              return getTransferListOption(disabled.value);
            });
            var titleOption = vue.computed(function() {
              return getTransferListOption(props2.title);
            });
            var paginationOption = vue.computed(function() {
              return getTransferListOption(props2.pagination);
            });
            var handleCheckedChange = function handleCheckedChange2(val, listType) {
              var _props2$onCheckedChan;
              var sourceChecked = listType === SOURCE ? val : checkedValue.value[SOURCE];
              var targetChecked = listType === TARGET ? val : checkedValue.value[TARGET];
              var checked2 = [].concat(_toConsumableArray(sourceChecked), _toConsumableArray(targetChecked));
              var event = {
                checked: checked2,
                sourceChecked,
                targetChecked,
                type: listType
              };
              innerChecked.value = checked2;
              (_props2$onCheckedChan = props2.onCheckedChange) === null || _props2$onCheckedChan === void 0 ? void 0 : _props2$onCheckedChan.call(props2, event);
            };
            var transferTo = function transferTo2(toDirection) {
              var oldTargetValue = JSON.parse(JSON.stringify(valueList.value));
              var newTargetValue;
              var selfCheckedValue = toDirection === TARGET ? checkedValue.value[SOURCE] : checkedValue.value[TARGET];
              if (toDirection === SOURCE) {
                newTargetValue = oldTargetValue.filter(function(v) {
                  return !selfCheckedValue.includes(v);
                });
              } else if (props2.targetSort === "original") {
                newTargetValue = getDataValues(transferData.value, oldTargetValue.concat(selfCheckedValue), {
                  isTreeMode: isTreeMode.value
                });
              } else if (props2.targetSort === "unshift") {
                newTargetValue = selfCheckedValue.concat(oldTargetValue);
              } else {
                newTargetValue = oldTargetValue.concat(selfCheckedValue);
              }
              handleCheckedChange([], toDirection === SOURCE ? TARGET : SOURCE);
              var params = {
                type: toDirection,
                movedValue: selfCheckedValue
              };
              setInnerValue(newTargetValue, params);
            };
            var transferToRight = function transferToRight2() {
              transferTo(TARGET);
            };
            var transferToLeft = function transferToLeft2() {
              transferTo(SOURCE);
            };
            var handleScroll = function handleScroll2(e, listType) {
              var _props2$onScroll;
              var target = e.target;
              var bottomDistance = target.scrollHeight - target.scrollTop - target.clientHeight;
              var event = {
                e,
                bottomDistance,
                type: listType
              };
              (_props2$onScroll = props2.onScroll) === null || _props2$onScroll === void 0 ? void 0 : _props2$onScroll.call(props2, event);
            };
            var handleSearch = function handleSearch2(e) {
              var _props2$onSearch;
              (_props2$onSearch = props2.onSearch) === null || _props2$onSearch === void 0 ? void 0 : _props2$onSearch.call(props2, e);
            };
            var handlePageChange = function handlePageChange2(pageInfo, listType) {
              var _props2$onPageChange;
              (_props2$onPageChange = props2.onPageChange) === null || _props2$onPageChange === void 0 ? void 0 : _props2$onPageChange.call(props2, pageInfo, {
                type: listType
              });
            };
            var renderTransferList = function renderTransferList2(listType) {
              var scopedSlots = pick_1(slots, ["title", "empty", "footer", "operation", "transferItem", "default", "tree"]);
              return vue.createVNode(TransferList, {
                "checkboxProps": props2.checkboxProps,
                "transferItem": props2.transferItem,
                "list-type": listType,
                "title": titleOption.value[listType],
                "data-source": listType === SOURCE ? sourceList.value : targetList.value,
                "checked-value": checkedValue.value[listType],
                "disabled": disabledOption.value[listType],
                "search": searchOption.value[listType],
                "pagination": paginationOption.value[listType],
                "check-all": checkAllOption.value[listType],
                "footer": footerOption.value[listType],
                "empty": emptyOption.value[listType],
                "onCheckedChange": function onCheckedChange($event) {
                  return handleCheckedChange($event, listType);
                },
                "onScroll": function onScroll($event) {
                  return handleScroll($event, listType);
                },
                "onSearch": handleSearch,
                "onPageChange": function onPageChange($event) {
                  return handlePageChange($event, listType);
                },
                "isTreeMode": isTreeMode.value
              }, _isSlot$e(scopedSlots) ? scopedSlots : {
                "default": function _default() {
                  return [scopedSlots];
                }
              });
            };
            return function() {
              return vue.createVNode("div", {
                "class": ["".concat(classPrefix2.value, "-transfer"), showSearch.value ? "".concat(classPrefix2.value, "-transfer__search") : "", hasFooter.value ? "".concat(classPrefix2.value, "-transfer__footer") : "", showPagination.value ? "".concat(classPrefix2.value, "-transfer__pagination") : "", isTreeMode.value ? "".concat(classPrefix2.value, "-transfer--with-tree") : ""]
              }, [renderTransferList(SOURCE), vue.createVNode(TransferOperations, {
                "leftDisabled": disabledOption.value[TARGET] || leftButtonDisabled.value || checkedValue.value[TARGET].length === 0,
                "rightDisabled": disabledOption.value[SOURCE] || rightButtonDisabled.value || checkedValue.value[SOURCE].length === 0,
                "operation": props2.operation,
                "onMoveToRight": transferToRight,
                "onMoveToLeft": transferToLeft
              }, {
                operation: slots.operation
              }), renderTransferList(TARGET)]);
            };
          }
        });
        var Transfer = withInstall(_Transfer);
        var InputItems = vue.defineComponent({
          name: "TTimePickerInputItems",
          props: {
            format: {
              type: String,
              "default": ""
            },
            dayjs: {
              type: [Object, Array, void 0],
              "default": void 0
            },
            placeholder: {
              type: String,
              "default": ""
            },
            allowInput: {
              type: Boolean
            },
            isRangePicker: {
              type: Boolean,
              "default": false
            },
            disabled: {
              type: Boolean
            }
          },
          emits: ["change", "blurDefault", "focusDefault", "toggleMeridiem"],
          setup: function setup() {
            var COMPONENT_NAME2 = usePrefixClass("time-picker");
            var _useConfig = useConfig("timePicker"), global2 = _useConfig.global;
            return {
              global: global2,
              COMPONENT_NAME: COMPONENT_NAME2
            };
          },
          computed: {
            displayTimeList: function displayTimeList() {
              return this.isRangePicker ? this.dayjs : [this.dayjs];
            }
          },
          methods: {
            onInput: function onInput(e, type, index2) {
              if (!this.allowInput)
                return;
              var target = e.target, data = e.data;
              var value = target.value;
              var format2 = this.$props.format;
              var curDayJs = this.displayTimeList[index2];
              var number = Number(value);
              if (curDayJs[type] === "00" && number === 0 || value === "") {
                emitEvent(this, "change", {
                  value: EMPTY_VALUE,
                  type,
                  index: index2
                });
              } else if ("".concat(number).length > 2) {
                number = Number(data);
              }
              var emitChange = true;
              if (!isNaN(number)) {
                switch (type) {
                  case "hour":
                    if (number > (/[h]{1}/.test(format2) ? 12 : 24) || number < 0) {
                      emitChange = false;
                    }
                    break;
                  case "minute":
                    if (number > 59 || number < 0) {
                      emitChange = false;
                    }
                    break;
                  case "second":
                    if (number > 59 || number < 0) {
                      emitChange = false;
                    }
                    break;
                }
                if (emitChange) {
                  emitEvent(this, "change", {
                    value: number,
                    type,
                    index: index2
                  });
                }
              }
              if (curDayJs[type] !== void 0)
                this.setInputValue(curDayJs[type], target);
            },
            onBlur: function onBlur(e, trigger, index2, input) {
              this.allowInput && emitEvent(this, "blurDefault", e, trigger, index2, input);
            },
            onFocus: function onFocus(e, trigger, index2, input) {
              this.allowInput && emitEvent(this, "focusDefault", e, trigger, index2, input);
            },
            onKeydown: function onKeydown(e, type, index2) {
              if (!this.allowInput)
                return;
              var which = e.which;
              var format2 = this.$props.format;
              var curDayJs = this.displayTimeList[index2];
              if ([KeyboardDirection.up, KeyboardDirection.down].includes(which)) {
                if (type === "meridiem")
                  return;
                var current = curDayJs[type] ? Number(curDayJs[type]) : 0;
                var operate = which === KeyboardDirection.up ? -1 : 1;
                var result = current + operate;
                if (type === "hour") {
                  if (result > (/[h]{1}/.test(format2) ? 11 : 23)) {
                    result = 0;
                  } else if (result < 0) {
                    result = /[h]{1}/.test(format2) ? 11 : 23;
                  }
                } else if (result > 59) {
                  result = 1;
                } else if (result < 0) {
                  result = 59;
                }
                emitEvent(this, "change", {
                  value: result,
                  type,
                  index: index2
                });
              } else if ([KeyboardDirection.left, KeyboardDirection.right].includes(which)) {
                var target = e.target;
                var parentNode = target.parentNode;
                var focus = which === KeyboardDirection.left ? parentNode.previousSibling : parentNode.nextSibling;
                if (focus) {
                  var input = focus.querySelector("input");
                  if (!input.focus)
                    return;
                  input.focus();
                }
              }
            },
            onToggleMeridiem: function onToggleMeridiem(index2) {
              emitEvent(this, "toggleMeridiem", index2);
            },
            setInputValue: function setInputValue(v, input) {
              var sV = String(v);
              if (!input) {
                return;
              }
              if (input.value !== sV) {
                Object.assign(input, {
                  value: sV
                });
              }
            },
            switchRenderComponent: function switchRenderComponent() {
              var _this = this;
              var _this$$props = this.$props, format2 = _this$$props.format, placeholder = _this$$props.placeholder, allowInput = _this$$props.allowInput, disabled = _this$$props.disabled;
              function isEmptyDayjs(val) {
                return val === void 0 || val.hour === void 0 && val.minute === void 0 && val.second === void 0;
              }
              var isEmptyVal = this.displayTimeList.every(function(date) {
                return isEmptyDayjs(date);
              });
              if (isEmptyVal) {
                return vue.createVNode("span", {
                  "class": "".concat(this.COMPONENT_NAME, "__input-placeholder")
                }, [placeholder]);
              }
              var itemClasses = disabled ? ["".concat(this.COMPONENT_NAME, "__input-item"), "".concat(this.COMPONENT_NAME, "__input-item-disabled")] : ["".concat(this.COMPONENT_NAME, "__input-item")];
              var inputClass = "".concat(this.COMPONENT_NAME, "__input-item-input");
              var render = [];
              this.displayTimeList.forEach(function(inputTime, index2) {
                if (index2 > 0)
                  render.push("-");
                var hour = inputTime.hour, minute = inputTime.minute, second = inputTime.second;
                render.push(vue.createVNode("span", {
                  "class": itemClasses
                }, [vue.createVNode("input", {
                  "class": inputClass,
                  "value": hour,
                  "disabled": !allowInput,
                  "onKeydown": function onKeydown(e) {
                    return _this.onKeydown(e, "hour", index2);
                  },
                  "onInput": function onInput(e) {
                    return _this.onInput(e, "hour", index2);
                  },
                  "onBlur": function onBlur(e) {
                    return _this.onBlur(e, "hour", index2, Number(hour));
                  },
                  "onFocus": function onFocus(e) {
                    return _this.onFocus(e, "hour", index2, Number(hour));
                  }
                }, null)]));
                if (/[hH]{1,2}:m{1,2}/.test(format2)) {
                  render.push(vue.createVNode("span", {
                    "class": itemClasses
                  }, [":", vue.createVNode("input", {
                    "class": inputClass,
                    "value": minute,
                    "disabled": !allowInput,
                    "onKeydown": function onKeydown(e) {
                      return _this.onKeydown(e, "minute", index2);
                    },
                    "onInput": function onInput(e) {
                      return _this.onInput(e, "minute", index2);
                    },
                    "onBlur": function onBlur(e) {
                      return _this.onBlur(e, "minute", index2, Number(minute));
                    },
                    "onFocus": function onFocus(e) {
                      return _this.onFocus(e, "minute", index2, Number(minute));
                    }
                  }, null)]));
                  if (/[hH]{1,2}:m{1,2}:s{1,2}/.test(format2)) {
                    render.push(vue.createVNode("span", {
                      "class": itemClasses
                    }, [":", vue.createVNode("input", {
                      "class": inputClass,
                      "value": second,
                      "disabled": !allowInput,
                      "onKeydown": function onKeydown(e) {
                        return _this.onKeydown(e, "second", index2);
                      },
                      "onInput": function onInput(e) {
                        return _this.onInput(e, "second", index2);
                      },
                      "onBlur": function onBlur(e) {
                        return _this.onBlur(e, "second", index2, Number(second));
                      },
                      "onFocus": function onFocus(e) {
                        return _this.onFocus(e, "second", index2, Number(second));
                      }
                    }, null)]));
                  }
                }
                if (/[h]{1}/.test(format2) && (format2.includes("A") || format2.includes("a"))) {
                  var localeMeridiemList = [_this.global.anteMeridiem, _this.global.postMeridiem];
                  var text = localeMeridiemList[MERIDIEM_LIST.indexOf(inputTime.meridiem.toUpperCase())];
                  render[amFormat.test(format2) ? "unshift" : "push"](vue.createVNode("span", {
                    "class": itemClasses,
                    "onClick": function onClick() {
                      return allowInput && _this.onToggleMeridiem(index2);
                    }
                  }, [vue.createVNode("input", {
                    "readonly": true,
                    "class": [inputClass, "".concat(inputClass, "-meridiem")],
                    "value": text,
                    "onKeydown": function onKeydown(e) {
                      return _this.onKeydown(e, "meridiem", index2);
                    },
                    "disabled": !allowInput
                  }, null)]));
                }
              });
              return render;
            }
          },
          render: function render() {
            var classes = ["".concat(this.COMPONENT_NAME, "__input")];
            return vue.createVNode("div", {
              "class": classes
            }, [this.switchRenderComponent()]);
          }
        });
        function ownKeys$Y(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$X(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$Y(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Y(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        dayjs.extend(customParseFormat);
        var _TimePicker = vue.defineComponent({
          name: "TTimePicker",
          components: {
            PickerPanel,
            TimeIcon: time,
            TPopup: Popup,
            TInput: Input,
            InputItems
          },
          props: _objectSpread$X({}, props$w),
          emits: ["change", "input", "close", "open", "focus", "blur"],
          setup: function setup() {
            var disabled = useFormDisabled();
            var COMPONENT_NAME2 = usePrefixClass("time-picker");
            var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE, STATUS = _useCommonClassName.STATUS;
            var _useConfig = useConfig("timePicker"), global2 = _useConfig.global;
            return {
              global: global2,
              SIZE,
              STATUS,
              COMPONENT_NAME: COMPONENT_NAME2,
              disabled
            };
          },
          data: function data() {
            var _this$$props = this.$props, defaultValue = _this$$props.defaultValue, value = _this$$props.value;
            var time2 = value || defaultValue;
            return {
              els: [],
              focus: false,
              isShowPanel: false,
              time: time2 ? dayjs(time2, this.format) : void 0,
              inputTime: time2 ? this.setInputValue(dayjs(time2, this.format)) : void 0,
              needClear: false
            };
          },
          computed: {
            panelValue: function panelValue() {
              var time2 = this.$data.time;
              if (time2) {
                return [dayjs(time2, this.format)];
              }
              if (this.steps.filter(function(step) {
                return step !== 1;
              }).length < 1) {
                return [dayjs()];
              }
              return [dayjs().hour(0).minute(0).second(0)];
            },
            textClassName: function textClassName() {
              var _this$inputTime, _this$inputTime2, _this$inputTime3;
              var isDefault = !!((_this$inputTime = this.inputTime) !== null && _this$inputTime !== void 0 && _this$inputTime.hour) && !!((_this$inputTime2 = this.inputTime) !== null && _this$inputTime2 !== void 0 && _this$inputTime2.minute) && !!((_this$inputTime3 = this.inputTime) !== null && _this$inputTime3 !== void 0 && _this$inputTime3.second);
              return isDefault ? "" : "".concat(this.COMPONENT_NAME, "__group-text");
            }
          },
          watch: {
            value: {
              handler: function handler() {
                this.time = this.value ? dayjs(this.value, this.format) : void 0;
                this.inputTime = this.value ? this.setInputValue(dayjs(this.value, this.format)) : void 0;
              }
            }
          },
          methods: {
            inputChange: function inputChange(event) {
              var type = event.type, value = event.value;
              var time2 = this.$data.time;
              var newTime = time2;
              if (value === EMPTY_VALUE) {
                this.inputTime[type] = void 0;
                newTime[type](0);
                return;
              }
              if (!newTime) {
                newTime = dayjs();
                newTime.hour(0);
                newTime.minute(0);
                newTime.second(0);
              }
              newTime = newTime.set(type, value);
              this.time = dayjs(newTime);
              this.inputTime = this.setInputValue(this.time);
              emitEvent(this, "input", {
                input: value,
                value: this.time.format(this.format),
                e: event
              });
              var panelRef = this.$refs.panel;
              panelRef.panelColUpdate();
            },
            onBlurDefault: function onBlurDefault(e, trigger, index2, input) {
              emitEvent(this, "blur", {
                trigger,
                input,
                value: this.time.format(this.format),
                e
              });
            },
            onFocusDefault: function onFocusDefault(e, trigger, index2, input) {
              emitEvent(this, "focus", {
                trigger,
                input,
                value: this.time.format(this.format),
                e
              });
            },
            panelVisibleChange: function panelVisibleChange(val, context) {
              if (context.trigger) {
                var isClickDoc = context.trigger === "document";
                this.isShowPanel = !isClickDoc;
                emitEvent(this, isClickDoc ? "close" : "open", context);
              } else {
                this.isShowPanel = val;
                emitEvent(this, val ? "open" : "close", context);
              }
            },
            toggleInputMeridiem: function toggleInputMeridiem() {
              var time2 = this.$data.time;
              var current = time2.format("A");
              var currentHour = time2.hour() + (current === AM ? 12 : -12);
              this.inputChange({
                type: "hour",
                value: currentHour
              });
            },
            pickTime: function pickTime(col, change, index2, value) {
              var time2 = this.time, format2 = this.format;
              var setTime = time2;
              if (EPickerCols.hour === col) {
                setTime = value.set(col, value.hour() >= 12 && (amFormat.test(format2) || pmFormat.test(format2)) ? Number(change) + 12 : change);
              } else if ([EPickerCols.minute, EPickerCols.second].includes(col)) {
                setTime = value.set(col, change);
              } else {
                var currentHour = value.hour();
                if (change === this.global.anteMeridiem && currentHour > 12) {
                  currentHour -= 12;
                } else if (change === this.global.postMeridiem && currentHour < 12) {
                  currentHour += 12;
                }
                setTime = value.hour(currentHour);
              }
              this.time = setTime;
              this.inputTime = this.setInputValue(setTime);
              var formatValue = dayjs(setTime).format(this.format);
              emitEvent(this, "change", formatValue);
            },
            makeSure: function makeSure(e) {
              this.panelVisibleChange(false, {
                e
              });
              this.output();
            },
            nowAction: function nowAction() {
              var currentTime = dayjs();
              if (isFunction_1(this.disableTime) && this.disableTime(currentTime.get("hour"), currentTime.get("minute"), currentTime.get("second"))) {
                return;
              }
              this.time = currentTime;
              this.inputTime = this.setInputValue(this.time);
              emitEvent(this, "change", currentTime.format(this.format));
            },
            output: function output() {
              if (this.needClear) {
                this.inputTime = this.setInputValue(void 0);
                this.needClear = false;
              } else {
                var _this$time;
                this.time = (_this$time = this.time) !== null && _this$time !== void 0 ? _this$time : dayjs();
                this.inputTime = this.setInputValue(this.time);
              }
            },
            setInputValue: function setInputValue(val) {
              var ans = {
                hour: void 0,
                minute: void 0,
                second: void 0,
                meridiem: AM
              };
              if (!val)
                return ans;
              return this.dayjs2InputTime(val);
            },
            dayjs2InputTime: function dayjs2InputTime(val) {
              var format2 = this.$props.format;
              if (!val) {
                return {
                  hour: void 0,
                  minute: void 0,
                  second: void 0,
                  meridiem: AM
                };
              }
              var hour = val.hour();
              var minute = val.minute();
              var second = val.second();
              if (/[h]{1}/.test(format2)) {
                hour %= 12;
              }
              if (/[h|H]{2}/.test(format2)) {
                hour = hour < 10 ? "0".concat(hour) : hour;
              }
              if (/[m|M]{2}/.test(format2)) {
                minute = minute < 10 ? "0".concat(minute) : minute;
              }
              if (/[s|S]{2}/.test(format2)) {
                second = second < 10 ? "0".concat(second) : second;
              }
              return {
                hour,
                minute,
                second,
                meridiem: val.format("a")
              };
            },
            clear: function clear(context) {
              var e = context.e;
              this.time = void 0;
              this.needClear = true;
              this.inputTime = this.setInputValue(void 0);
              emitEvent(this, "change", void 0);
              e.stopPropagation();
            },
            handleTInputFocus: function handleTInputFocus() {
              var _this = this;
              vue.nextTick(function() {
                _this.$refs.tInput.blur();
              });
            },
            renderInput: function renderInput() {
              var _this2 = this;
              var classes = ["".concat(this.COMPONENT_NAME, "__group"), _defineProperty$3({}, this.STATUS.focused, this.isShowPanel)];
              var slots = {
                "suffix-icon": function suffixIcon() {
                  return vue.createVNode(vue.resolveComponent("time-icon"), null, null);
                }
              };
              return vue.createVNode("div", {
                "class": classes,
                "onClick": function onClick() {
                  return _this2.isShowPanel = true;
                }
              }, [vue.createVNode(vue.resolveComponent("t-input"), {
                "disabled": this.disabled,
                "size": this.size,
                "onClear": this.clear,
                "clearable": this.clearable,
                "placeholder": " ",
                "value": this.time ? " " : void 0,
                "ref": "tInput",
                "onFocus": this.handleTInputFocus
              }, slots), vue.createVNode(vue.resolveComponent("input-items"), {
                "size": this.size,
                "dayjs": this.inputTime,
                "disabled": this.disabled,
                "format": this.format,
                "steps": this.steps,
                "allowInput": this.allowInput,
                "placeholder": this.placeholder || this.global.placeholder,
                "onToggleMeridiem": function onToggleMeridiem() {
                  return _this2.toggleInputMeridiem();
                },
                "onBlurDefault": this.onBlurDefault,
                "onFocusDefault": this.onFocusDefault,
                "onChange": function onChange(e) {
                  return _this2.inputChange(e);
                }
              }, null)]);
            }
          },
          render: function render() {
            var _this3 = this;
            var size = this.size, className = this.$attrs.className, disabled = this.disabled;
            var classes = [this.COMPONENT_NAME, this.SIZE[size] || "", className];
            var slots = {
              content: function content() {
                return vue.createVNode(vue.resolveComponent("picker-panel"), {
                  "ref": "panel",
                  "format": _this3.format,
                  "value": _this3.panelValue,
                  "disabled": _this3.disabled,
                  "isShowPanel": _this3.isShowPanel,
                  "onTimePick": _this3.pickTime,
                  "onSure": _this3.makeSure,
                  "onNowAction": _this3.nowAction,
                  "steps": _this3.steps,
                  "hideDisabledTime": _this3.hideDisabledTime,
                  "disableTime": _this3.disableTime,
                  "isFocus": _this3.focus
                }, null);
              }
            };
            return vue.createVNode(vue.resolveComponent("t-popup"), {
              "ref": "popup",
              "placement": "bottom-left",
              "class": classes,
              "trigger": "click",
              "disabled": disabled,
              "visible": this.isShowPanel,
              "overlayClassName": "".concat(this.COMPONENT_NAME, "__panel-container"),
              "onVisibleChange": this.panelVisibleChange,
              "expandAnimation": true
            }, _objectSpread$X({
              "default": function _default() {
                return [_this3.renderInput()];
              }
            }, slots));
          }
        });
        var props$m = {
          allowInput: Boolean,
          clearable: Boolean,
          disabled: {
            type: [Boolean, Array],
            "default": false
          },
          disableTime: {
            type: Function
          },
          format: {
            type: String,
            "default": "HH:mm:ss"
          },
          hideDisabledTime: {
            type: Boolean,
            "default": true
          },
          placeholder: {
            type: [String, Array]
          },
          size: {
            type: String,
            "default": "medium",
            validator: function validator(val) {
              return ["small", "medium", "large"].includes(val);
            }
          },
          steps: {
            type: Array,
            "default": function _default() {
              return [1, 1, 1];
            }
          },
          value: {
            type: Array
          },
          modelValue: {
            type: Array
          },
          defaultValue: {
            type: Array
          },
          onBlur: Function,
          onChange: Function,
          onFocus: Function,
          onInput: Function
        };
        function ownKeys$X(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$W(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$X(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$X(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        dayjs.extend(customParseFormat);
        var _TimeRangePicker = vue.defineComponent({
          name: "TTimeRangePicker",
          components: {
            PickerPanel,
            TimeIcon: time,
            InputItems,
            TPopup: Popup,
            TInput: Input
          },
          props: _objectSpread$W({}, props$m),
          emits: ["input", "click", "blur", "focus", "change", "close", "open"],
          setup: function setup() {
            var COMPONENT_NAME2 = usePrefixClass("time-picker");
            var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE, STATUS = _useCommonClassName.STATUS;
            var _useConfig = useConfig("timePicker"), global2 = _useConfig.global;
            return {
              global: global2,
              STATUS,
              SIZE,
              COMPONENT_NAME: COMPONENT_NAME2
            };
          },
          data: function data() {
            return {
              els: [],
              focus: false,
              isShowPanel: false,
              time: TIME_PICKER_EMPTY,
              inputTime: TIME_PICKER_EMPTY
            };
          },
          computed: {
            panelValue: function panelValue() {
              var time2 = this.time || TIME_PICKER_EMPTY;
              return time2.map(function(val) {
                return val ? dayjs(val) : dayjs();
              });
            },
            textClassName: function textClassName() {
              var isDefault = this.inputTime.some(function(item) {
                return !!item.hour && !!item.minute && !!item.second;
              });
              return isDefault ? "" : "".concat(this.COMPONENT_NAME, "__group-text");
            }
          },
          watch: {
            value: {
              handler: function handler(val, oldVal) {
                if (JSON.stringify(val) === JSON.stringify(oldVal))
                  return;
                var values = Array.isArray(this.value) ? this.value : [];
                var format2 = this.format;
                function getVal(value) {
                  return value ? dayjs(value, format2) : void 0;
                }
                var dayjsList = [getVal(values[0]), getVal(values[1])];
                this.time = dayjsList;
                this.updateInputTime();
              },
              immediate: true
            }
          },
          methods: {
            inputChange: function inputChange(event) {
              var type = event.type, value = event.value, index2 = event.index;
              var newTime = this.time[index2];
              if (value === EMPTY_VALUE) {
                this.inputTime[index2][type] = void 0;
                newTime[type](0);
                return;
              }
              if (!newTime) {
                newTime = dayjs();
                newTime.hour(0);
                newTime.minute(0);
                newTime.second(0);
              }
              newTime = newTime.set(type, value);
              this.time[index2] = dayjs(newTime);
              this.updateInputTime();
              emitEvent(this, "input", {
                input: value,
                value: this.time[index2].format(this.format),
                e: event
              });
              var panelRef = this.$refs.panel;
              panelRef.panelColUpdate();
            },
            getFormatValues: function getFormatValues() {
              var _this = this;
              var values = [];
              this.time.forEach(function(time2) {
                if (time2) {
                  values.push(time2.format(_this.format));
                }
              });
              return values;
            },
            onBlurDefault: function onBlurDefault(e) {
              var value = this.getFormatValues();
              emitEvent(this, "blur", {
                value,
                e
              });
            },
            onFocusDefault: function onFocusDefault(e) {
              var value = this.getFormatValues();
              emitEvent(this, "focus", {
                value,
                e
              });
            },
            panelVisibleChange: function panelVisibleChange(val, context) {
              if (context.trigger) {
                var isClickDoc = context.trigger === "document";
                this.isShowPanel = !isClickDoc;
                emitEvent(this, isClickDoc ? "close" : "open", context);
              } else {
                this.isShowPanel = val;
                emitEvent(this, val ? "open" : "close", context);
              }
            },
            toggleInputMeridiem: function toggleInputMeridiem(index2) {
              var curTime = this.time[index2];
              var current = curTime.format("a");
              var currentHour = curTime.hour() + (current === AM ? 12 : -12);
              this.inputChange({
                type: "hour",
                value: currentHour,
                index: index2
              });
            },
            pickTime: function pickTime(col, change, index2, value) {
              var time2 = this.time, format2 = this.format;
              var panelRef = this.$refs.panel;
              var shouldUpdatePanel = false;
              var setTime = time2[index2];
              if (EPickerCols.hour === col) {
                setTime = value.set(col, value.hour() >= 12 && (amFormat.test(format2) || pmFormat.test(format2)) ? Number(change) + 12 : change);
              } else if ([EPickerCols.minute, EPickerCols.second].includes(col)) {
                setTime = value.set(col, change);
              } else {
                var currentHour = value.hour();
                if (change === this.global.anteMeridiem) {
                  currentHour -= 12;
                } else if (change === this.global.postMeridiem) {
                  currentHour += 12;
                }
                setTime = value.hour(currentHour);
              }
              this.time[index2] = setTime;
              if (index2 === 0 && !this.time[1]) {
                this.time[1] = setTime;
                shouldUpdatePanel = true;
              } else if (index2 === 1 && !this.time[0]) {
                this.time[0] = dayjs().hour(0).minute(0).second(0);
                shouldUpdatePanel = true;
              }
              this.updateInputTime();
              shouldUpdatePanel && panelRef.panelColUpdate();
            },
            makeSure: function makeSure(e) {
              this.panelVisibleChange(false, {
                e
              });
            },
            updateInputTime: function updateInputTime() {
              var format2 = this.$props.format;
              var disPlayValues = [];
              (this.time || []).forEach(function(time2) {
                if (!time2) {
                  disPlayValues.push({
                    hour: void 0,
                    minute: void 0,
                    second: void 0,
                    meridiem: AM
                  });
                } else {
                  var hour = time2.hour();
                  var minute = time2.minute();
                  var second = time2.second();
                  if (/[h]{1}/.test(format2)) {
                    hour %= 12;
                  }
                  if (/[h|H]{2}/.test(format2)) {
                    hour = hour < 10 ? "0".concat(hour) : hour;
                  }
                  if (/[m|M]{2}/.test(format2)) {
                    minute = minute < 10 ? "0".concat(minute) : minute;
                  }
                  if (/[s|S]{2}/.test(format2)) {
                    second = second < 10 ? "0".concat(second) : second;
                  }
                  disPlayValues.push({
                    hour,
                    minute,
                    second,
                    meridiem: time2.format("a")
                  });
                }
              });
              this.inputTime = disPlayValues;
              this.triggerUpdateValue();
            },
            clear: function clear(context) {
              var e = context.e;
              this.time = TIME_PICKER_EMPTY;
              this.updateInputTime();
              e.stopPropagation();
            },
            triggerUpdateValue: function triggerUpdateValue() {
              var _this2 = this;
              var values = [];
              this.time.forEach(function(time2) {
                if (time2) {
                  values.push(time2.format(_this2.format));
                }
              });
              emitEvent(this, "change", values);
              isFunction_1(this.onChange) && this.onChange(values);
            },
            handleTInputFocus: function handleTInputFocus() {
              var _this3 = this;
              vue.nextTick(function() {
                _this3.$refs.tInput.blur();
              });
            },
            renderInput: function renderInput() {
              var _this4 = this;
              var classes = ["".concat(this.COMPONENT_NAME, "__group"), _defineProperty$3({}, this.STATUS.focused, this.isShowPanel)];
              return vue.createVNode("div", {
                "class": classes,
                "onClick": function onClick() {
                  return _this4.isShowPanel = true;
                }
              }, [vue.createVNode(vue.resolveComponent("t-input"), {
                "disabled": this.disabled,
                "size": this.size,
                "onClear": this.clear,
                "clearable": this.clearable,
                "placeholder": " ",
                "value": !isEqual_1(this.time, TIME_PICKER_EMPTY) ? " " : void 0,
                "ref": "tInput",
                "onFocus": this.handleTInputFocus
              }, {
                "suffix-icon": function suffixIcon() {
                  return vue.createVNode(vue.resolveComponent("time-icon"), null, null);
                }
              }), vue.createVNode(vue.resolveComponent("input-items"), {
                "size": this.size,
                "dayjs": this.inputTime,
                "disabled": this.disabled,
                "format": this.format,
                "allowInput": this.allowInput,
                "placeholder": this.placeholder || this.global.placeholder,
                "isRangePicker": true,
                "onToggleMeridiem": function onToggleMeridiem(index2) {
                  return _this4.toggleInputMeridiem(index2);
                },
                "onBlurDefault": this.onBlurDefault,
                "onFocusDefault": this.onFocusDefault,
                "onChange": function onChange(e) {
                  return _this4.inputChange(e);
                },
                "steps": this.steps
              }, null)]);
            }
          },
          render: function render() {
            var _this5 = this;
            var _this$$props = this.$props, size = _this$$props.size, disabled = _this$$props.disabled;
            var classes = [this.COMPONENT_NAME, this.SIZE[size]];
            var slots = {
              content: function content() {
                return vue.createVNode(vue.resolveComponent("picker-panel"), {
                  "ref": "panel",
                  "format": _this5.format,
                  "value": _this5.panelValue,
                  "disabled": _this5.disabled,
                  "isShowPanel": _this5.isShowPanel,
                  "onTimePick": _this5.pickTime,
                  "onSure": _this5.makeSure,
                  "steps": _this5.steps,
                  "hideDisabledTime": _this5.hideDisabledTime,
                  "disableTime": _this5.disableTime,
                  "isFocus": _this5.focus
                }, null);
              }
            };
            return vue.createVNode(vue.resolveComponent("t-popup"), {
              "ref": "popup",
              "class": classes,
              "placement": "bottom-left",
              "trigger": "click",
              "disabled": disabled,
              "visible": this.isShowPanel,
              "overlayClassName": "".concat(this.COMPONENT_NAME, "__panel-container"),
              "onVisibleChange": this.panelVisibleChange,
              "expandAnimation": true
            }, _objectSpread$W({
              "default": function _default() {
                return [_this5.renderInput()];
              }
            }, slots));
          }
        });
        var TimePicker = withInstall(mapProps([{
          name: "value",
          event: "change",
          alias: ["modelValue"]
        }])(_TimePicker));
        var TimeRangePicker = withInstall(mapProps([{
          name: "value",
          event: "change",
          alias: ["modelValue"]
        }])(_TimeRangePicker));
        var props$l = {
          activable: Boolean,
          actived: {
            type: Array,
            "default": void 0
          },
          defaultActived: {
            type: Array
          },
          activeMultiple: Boolean,
          allowFoldNodeOnFilter: Boolean,
          checkable: Boolean,
          checkProps: {
            type: Object
          },
          checkStrictly: Boolean,
          data: {
            type: Array,
            "default": function _default() {
              return [];
            }
          },
          disableCheck: {
            type: [Boolean, Function],
            "default": false
          },
          disabled: Boolean,
          empty: {
            type: [String, Function],
            "default": ""
          },
          expandAll: Boolean,
          expanded: {
            type: Array,
            "default": void 0
          },
          defaultExpanded: {
            type: Array,
            "default": function _default() {
              return [];
            }
          },
          expandLevel: {
            type: Number,
            "default": 0
          },
          expandMutex: Boolean,
          expandOnClickNode: Boolean,
          expandParent: Boolean,
          filter: {
            type: Function
          },
          hover: Boolean,
          icon: {
            type: [Boolean, Function],
            "default": true
          },
          keys: {
            type: Object
          },
          label: {
            type: [String, Boolean, Function],
            "default": true
          },
          lazy: {
            type: Boolean,
            "default": true
          },
          line: {
            type: [Boolean, Function],
            "default": false
          },
          load: {
            type: Function
          },
          operations: {
            type: Function
          },
          transition: {
            type: Boolean,
            "default": true
          },
          value: {
            type: Array,
            "default": void 0
          },
          modelValue: {
            type: Array,
            "default": void 0
          },
          defaultValue: {
            type: Array,
            "default": function _default() {
              return [];
            }
          },
          valueMode: {
            type: String,
            "default": "onlyLeaf",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["onlyLeaf", "parentFirst", "all"].includes(val);
            }
          },
          onActive: Function,
          onChange: Function,
          onClick: Function,
          onExpand: Function,
          onLoad: Function
        };
        var useCLASSNAMES = function useCLASSNAMES2() {
          var classPrefix2 = usePrefixClass();
          return vue.computed(function() {
            var tree = "".concat(classPrefix2.value, "-tree");
            return {
              icon: "".concat(classPrefix2.value, "-icon"),
              folderIcon: "".concat(classPrefix2.value, "-folder-icon"),
              actived: "".concat(classPrefix2.value, "-is-active"),
              disabled: "".concat(classPrefix2.value, "-is-disabled"),
              treeIconRight: "".concat(classPrefix2.value, "-icon-arrow-right"),
              treeIconDown: "".concat(classPrefix2.value, "-icon-arrow-down"),
              treeNodeToggle: "".concat(classPrefix2.value, "-tree-toggle"),
              tree,
              treeTransition: "".concat(tree, "--transition"),
              treeBlockNode: "".concat(tree, "--block-node"),
              treeEmpty: "".concat(tree, "__empty"),
              treeList: "".concat(tree, "__list"),
              treeNode: "".concat(tree, "__item"),
              treeNodeOpen: "".concat(tree, "__item--open"),
              treeHoverAble: "".concat(tree, "--hoverable"),
              treeCheckable: "".concat(tree, "--checkable"),
              treeLabel: "".concat(tree, "__label"),
              treeLabelStrictly: "".concat(tree, "__label--strictly"),
              treeIcon: "".concat(tree, "__icon"),
              treeIconDefault: "".concat(tree, "__icon--default"),
              treeSpace: "".concat(tree, "__space"),
              treeOperations: "".concat(tree, "__operations"),
              treeNodeVisible: "".concat(tree, "__item--visible"),
              treeNodeHidden: "".concat(tree, "__item--hidden"),
              treeNodeEnter: "".concat(tree, "__item--enter-active"),
              treeNodeLeave: "".concat(tree, "__item--leave-active"),
              line: "".concat(tree, "__line"),
              lineIsLeaf: "".concat(tree, "__line--leaf"),
              lineIsFirst: "".concat(tree, "__line--first")
            };
          });
        };
        function ownKeys$W(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$V(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$W(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$W(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function getParentsToRoot(element2, root2) {
          var list = [];
          var el = element2;
          while (el && el.parentNode) {
            list.push(el);
            if (el === root2) {
              break;
            }
            el = el.parentNode;
          }
          return list;
        }
        function getParentMarks(name, element2, root2) {
          var list = getParentsToRoot(element2, root2);
          return list.map(function(el) {
            var mark = {
              name,
              value: el.getAttribute(name) || "",
              el
            };
            return mark;
          }).filter(function(mark) {
            return mark.value;
          });
        }
        function getMark(name, element2, root2) {
          var list = getParentMarks(name, element2, root2);
          var info = list.pop() || null;
          return info;
        }
        function getTNode(prop) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var tnode = null;
          var item = null;
          var conf = _objectSpread$V({}, options);
          if (typeof prop === "function") {
            var _conf$node;
            item = prop(vue.h, (_conf$node = conf.node) === null || _conf$node === void 0 ? void 0 : _conf$node.getModel());
          } else if (typeof prop === "string") {
            item = prop;
          }
          if (typeof item === "string") {
            tnode = item;
          } else if (item) {
            tnode = item;
          }
          return tnode;
        }
        function isTreeNodeValue(item) {
          return typeof item === "string" || typeof item === "number";
        }
        function getNode(store, item) {
          var node = null;
          var val = null;
          if (typeof item === "string" || typeof item === "number") {
            val = item;
          } else if (item && isTreeNodeValue(item.value)) {
            val = item.value;
          }
          node = store.getNode(val);
          return node;
        }
        var getStoreConfig = function getStoreConfig2(props2) {
          var storeProps = pick_1(props2, ["keys", "expandAll", "expandLevel", "expandMutex", "expandParent", "activable", "activeMultiple", "disabled", "checkable", "checkStrictly", "load", "lazy", "valueMode", "filter"]);
          return storeProps;
        };
        function ownKeys$V(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$U(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$V(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$V(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot$d(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var TreeItem = vue.defineComponent({
          name: "TTreeNode",
          props: {
            node: {
              type: Object
            },
            onClick: Function,
            onChange: Function
          },
          setup: function setup(props2) {
            var treeScope = vue.inject(injectKey);
            var label = vue.ref();
            useRipple(label);
            var CLASS_NAMES = useCLASSNAMES();
            var _useConfig = useConfig("tree"), global2 = _useConfig.global;
            var handleClick = function handleClick2(evt) {
              var _props$onClick;
              var node = props2.node;
              var state = {
                mouseEvent: evt,
                event: evt,
                node,
                path: node.getPath()
              };
              (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, state);
            };
            var handleChange = function handleChange2() {
              var _props$onChange;
              var node = props2.node;
              var event = new Event("change");
              var state = {
                event,
                node
              };
              (_props$onChange = props2.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props2, state);
            };
            var itemStyles = vue.computed(function() {
              var level = props2.node.level;
              var styles = "--level: ".concat(level, ";");
              return styles;
            });
            var itemClassList = vue.computed(function() {
              var _list$push;
              var node = props2.node;
              var list = [];
              list.push(CLASS_NAMES.value.treeNode);
              list.push((_list$push = {}, _defineProperty$3(_list$push, CLASS_NAMES.value.treeNodeOpen, node.expanded), _defineProperty$3(_list$push, CLASS_NAMES.value.actived, node.isActivable() ? node.actived : false), _defineProperty$3(_list$push, CLASS_NAMES.value.disabled, node.isDisabled()), _list$push));
              return list;
            });
            var renderLine = function renderLine2() {
              var node = props2.node;
              var _treeScope$value = treeScope.value, line = _treeScope$value.line, scopedSlots = _treeScope$value.scopedSlots;
              var iconVisible = !!treeScope.value.icon;
              var lineNode = null;
              if (line === true) {
                if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.line) {
                  lineNode = scopedSlots.line({
                    node: node === null || node === void 0 ? void 0 : node.getModel()
                  });
                } else if (node.parent && node.tree) {
                  var vmIsLeaf = node.vmIsLeaf, vmIsFirst = node.vmIsFirst, level = node.level;
                  var lineClasses = [];
                  lineClasses.push(CLASS_NAMES.value.line);
                  if (vmIsLeaf || !iconVisible) {
                    lineClasses.push(CLASS_NAMES.value.lineIsLeaf);
                  }
                  if (vmIsFirst && iconVisible) {
                    lineClasses.push(CLASS_NAMES.value.lineIsFirst);
                  }
                  var shadowStyles = [];
                  var parents = node.getParents();
                  parents.pop();
                  parents.forEach(function(pNode, index2) {
                    if (!pNode.vmIsLast) {
                      shadowStyles.push("calc(-".concat(index2 + 1, " * var(--space)) 0 var(--color)"));
                    }
                  });
                  var styles = {
                    "--level": level,
                    "box-shadow": shadowStyles.join(",")
                  };
                  lineNode = vue.createVNode("span", {
                    "class": lineClasses,
                    "style": styles
                  }, null);
                }
              } else {
                lineNode = getTNode(line, {
                  node
                });
              }
              return lineNode;
            };
            var renderIcon = function renderIcon2() {
              var getFolderIcon = function getFolderIcon2() {
                if (isFunction_1(global2.value.folderIcon)) {
                  return global2.value.folderIcon(vue.h);
                }
                return vue.createVNode(caretRightSmall, null, null);
              };
              var node = props2.node;
              var _treeScope$value2 = treeScope.value, icon = _treeScope$value2.icon, scopedSlots = _treeScope$value2.scopedSlots;
              var isDefaultIcon = false;
              var iconNode = null;
              if (icon === true) {
                if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.icon) {
                  iconNode = scopedSlots.icon({
                    node: node === null || node === void 0 ? void 0 : node.getModel()
                  });
                } else if (!node.vmIsLeaf) {
                  isDefaultIcon = true;
                  iconNode = getFolderIcon();
                  if (node.loading && node.expanded) {
                    iconNode = vue.createVNode(Loading, null, null);
                  }
                } else {
                  iconNode = "";
                }
              } else {
                iconNode = getTNode(icon, {
                  node
                });
              }
              iconNode = vue.createVNode("span", {
                "class": [CLASS_NAMES.value.treeIcon, CLASS_NAMES.value.folderIcon, isDefaultIcon ? CLASS_NAMES.value.treeIconDefault : ""],
                "trigger": "expand",
                "ignore": "active"
              }, [iconNode]);
              return iconNode;
            };
            var renderLabel = function renderLabel2() {
              var node = props2.node;
              var _treeScope$value3 = treeScope.value, label2 = _treeScope$value3.label, scopedSlots = _treeScope$value3.scopedSlots, disableCheck = _treeScope$value3.disableCheck;
              var checkProps = treeScope.value.checkProps || {};
              var labelNode = null;
              if (label2 === true) {
                if (scopedSlots.label) {
                  labelNode = scopedSlots.label({
                    node: node.getModel()
                  });
                } else {
                  labelNode = node.label || "";
                }
              } else {
                labelNode = getTNode(label2, {
                  node
                });
              }
              var labelClasses = [CLASS_NAMES.value.treeLabel, CLASS_NAMES.value.treeLabelStrictly, _defineProperty$3({}, CLASS_NAMES.value.actived, node.isActivable() ? node.actived : false)];
              if (node.vmCheckable) {
                var checkboxDisabled = false;
                if (typeof disableCheck === "function") {
                  checkboxDisabled = disableCheck(node);
                } else {
                  checkboxDisabled = !!disableCheck;
                }
                if (node.isDisabled()) {
                  checkboxDisabled = true;
                }
                var itemCheckProps = _objectSpread$U(_objectSpread$U({}, checkProps), {}, {
                  disabled: checkboxDisabled
                });
                var _labelNode = function() {
                  return labelNode;
                }();
                labelNode = vue.createVNode(Checkbox, vue.mergeProps({
                  "class": labelClasses,
                  "checked": node.checked,
                  "indeterminate": node.indeterminate,
                  "disabled": node.isDisabled(),
                  "name": node.value,
                  "onChange": function onChange() {
                    return handleChange();
                  },
                  "ignore": "expand,active",
                  "needRipple": true
                }, itemCheckProps), _isSlot$d(labelNode) ? labelNode : {
                  "default": function _default() {
                    return [_labelNode];
                  }
                });
              } else {
                var inner = vue.createVNode("span", {
                  "style": "position: relative"
                }, [labelNode]);
                labelNode = node.isActivable() ? vue.createVNode("span", {
                  "key": "1",
                  "ref": "label",
                  "class": labelClasses
                }, [inner]) : vue.createVNode("span", {
                  "key": "2",
                  "class": labelClasses
                }, [inner]);
              }
              return labelNode;
            };
            var renderOperations = function renderOperations2() {
              var node = props2.node;
              var _treeScope$value4 = treeScope.value, operations = _treeScope$value4.operations, scopedSlots = _treeScope$value4.scopedSlots;
              var opNode = null;
              if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.operations) {
                opNode = scopedSlots.operations({
                  node: node === null || node === void 0 ? void 0 : node.getModel()
                });
              } else {
                opNode = getTNode(operations, {
                  node
                });
              }
              if (opNode) {
                opNode = vue.createVNode("span", {
                  "class": CLASS_NAMES.value.treeOperations,
                  "ignore": "active,expand"
                }, [opNode]);
              }
              return opNode;
            };
            return function() {
              var node = props2.node;
              return vue.createVNode("div", {
                "class": itemClassList.value,
                "data-value": node.value,
                "data-level": node.level,
                "style": itemStyles.value,
                "onClick": function onClick(evt) {
                  return handleClick(evt);
                }
              }, [renderLine(), renderIcon(), renderLabel(), renderOperations()]);
            };
          }
        });
        function ownKeys$U(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$T(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$U(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$U(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function useTree(props2, statusContext) {
          var treeStore = vue.ref();
          var cacheMap = /* @__PURE__ */ new Map();
          var treeNodeViews = vue.ref([]);
          var _toRefs = vue.toRefs(props2), expanded = _toRefs.expanded, actived = _toRefs.actived, value = _toRefs.value, modelValue = _toRefs.modelValue;
          var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerChecked = _useVModel2[0], setInnerChecked = _useVModel2[1];
          var _useDefaultValue = useDefaultValue(actived, props2.defaultActived, props2.onActive, "actived"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2), innerActived = _useDefaultValue2[0], setInnerActived = _useDefaultValue2[1];
          var _useDefaultValue3 = useDefaultValue(expanded, props2.defaultExpanded, props2.onExpand, "expanded"), _useDefaultValue4 = _slicedToArray(_useDefaultValue3, 2), innerExpanded = _useDefaultValue4[0], setInnerExpanded = _useDefaultValue4[1];
          var handleLoad = function handleLoad2(info) {
            var _props$onLoad;
            var node = info.node;
            var ctx = {
              node: node.getModel()
            };
            if (innerChecked.value && innerChecked.value.length > 0) {
              treeStore.value.replaceChecked(innerChecked.value);
            }
            if (innerExpanded.value && innerExpanded.value.length > 0) {
              treeStore.value.replaceExpanded(innerExpanded.value);
            }
            if (innerActived.value && innerActived.value.length > 0) {
              treeStore.value.replaceActived(innerActived.value);
            }
            (_props$onLoad = props2.onLoad) === null || _props$onLoad === void 0 ? void 0 : _props$onLoad.call(props2, ctx);
          };
          var handleClick = function handleClick2(state) {
            var _props$onClick;
            var expandOnClickNode = props2.expandOnClickNode;
            var mouseEvent = state.mouseEvent, event = state.event, node = state.node;
            if (!node || props2.disabled || node.disabled) {
              return;
            }
            var shouldExpand = expandOnClickNode;
            var shouldActive = true;
            ["trigger", "ignore"].forEach(function(markName) {
              var mark = getMark(markName, event.target, event.currentTarget);
              var markValue = (mark === null || mark === void 0 ? void 0 : mark.value) || "";
              if (markValue.indexOf("expand") >= 0) {
                if (markName === "trigger") {
                  shouldExpand = true;
                } else if (markName === "ignore") {
                  shouldExpand = false;
                }
              }
              if (markValue.indexOf("active") >= 0) {
                if (markName === "ignore") {
                  shouldActive = false;
                }
              }
            });
            var ctx = {
              node: node.getModel(),
              e: mouseEvent
            };
            if (shouldExpand) {
              var tnode = getNode(treeStore.value, node);
              var expanded2 = node.setExpanded(!tnode.isExpanded());
              setInnerExpanded(expanded2, ctx);
            }
            if (shouldActive) {
              var _tnode = getNode(treeStore.value, node);
              var actived2 = node.setActived(!_tnode.isActived());
              setInnerActived(actived2, ctx);
            }
            (_props$onClick = props2.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props2, ctx);
          };
          var handleChange = function handleChange2(state) {
            var disabled = props2.disabled;
            var node = state.node, mouseEvent = state.mouseEvent;
            if (!node || disabled || node.disabled) {
              return;
            }
            var tnode = getNode(treeStore.value, node);
            var checked = node.setChecked(!tnode.isChecked());
            setInnerChecked(checked, {
              node: node.getModel(),
              e: mouseEvent
            });
          };
          var renderTreeNodeViews = function renderTreeNodeViews2() {
            var nodes = treeStore.value.getNodes();
            treeNodeViews.value = nodes.filter(function(node) {
              return node.visible;
            }).map(function(node) {
              var nodeView = cacheMap.get(node.value);
              if (!nodeView) {
                nodeView = vue.createVNode(TreeItem, {
                  "key": node.value,
                  "node": node,
                  "onChange": handleChange,
                  "onClick": handleClick
                }, null);
                cacheMap.set(node.value, nodeView);
              }
              return nodeView;
            });
            vue.nextTick(function() {
              cacheMap.forEach(function(view, value2) {
                if (!treeStore.value.getNode(value2)) {
                  cacheMap["delete"](value2);
                }
              });
            });
          };
          var updateExpanded = function updateExpanded2() {
            var expandParent = props2.expandParent;
            if (Array.isArray(innerExpanded.value)) {
              var expandedMap = /* @__PURE__ */ new Map();
              innerExpanded.value.forEach(function(val) {
                expandedMap.set(val, true);
                if (expandParent) {
                  var node = treeStore.value.getNode(val);
                  node.getParents().forEach(function(tn) {
                    expandedMap.set(tn.value, true);
                  });
                }
              });
              var expandedArr = Array.from(expandedMap.keys());
              treeStore.value.setExpanded(expandedArr);
            }
          };
          var init = function init2() {
            var options = props2.data;
            var store = new TreeStore(_objectSpread$T(_objectSpread$T({}, getStoreConfig(props2)), {}, {
              onLoad: function onLoad(info) {
                handleLoad(info);
              },
              onUpdate: function onUpdate() {
                renderTreeNodeViews();
              }
            }));
            treeStore.value = store;
            if (!Array.isArray(options)) {
              options = [];
            }
            store.append(options);
            store.refreshNodes();
            if (Array.isArray(innerChecked.value)) {
              store.setChecked(innerChecked.value);
            }
            updateExpanded();
            if (Array.isArray(innerActived.value)) {
              store.setActived(innerActived.value);
            }
            renderTreeNodeViews();
          };
          vue.watch(function() {
            return props2.data;
          }, function(list) {
            cacheMap.clear();
            treeStore.value.reload(list);
            if (!list.length)
              return;
            if (Array.isArray(innerChecked.value)) {
              treeStore.value.setChecked(innerChecked.value);
            }
            updateExpanded();
            if (Array.isArray(innerActived.value)) {
              treeStore.value.setActived(innerActived.value);
            }
            treeStore.value.refreshState();
          });
          vue.watch(function() {
            return getStoreConfig(props2);
          }, function() {
            if (!treeStore.value)
              return;
            treeStore.value.setConfig(getStoreConfig(props2));
          });
          vue.watch(innerChecked, function(nVal) {
            treeStore.value.replaceChecked(nVal);
          });
          vue.watch(innerExpanded, function(nVal) {
            treeStore.value.replaceExpanded(nVal);
          });
          vue.watch(innerActived, function(nVal) {
            treeStore.value.replaceActived(nVal);
          });
          init();
          return {
            treeStore,
            treeNodeViews
          };
        }
        function useExposeFunc(treeStore, expose) {
          var setItem = function setItem2(value, options) {
            var node = treeStore.value.getNode(value);
            var spec = options;
            var keys2 = Object.keys(spec);
            if (node && spec) {
              ["expanded", "actived", "checked"].forEach(function(name) {
                if (keys2.includes(name))
                  ;
              });
              node.set(spec);
            }
          };
          var getItem = function getItem2(value) {
            var node = treeStore.value.getNode(value);
            return node === null || node === void 0 ? void 0 : node.getModel();
          };
          var getItems = function getItems2(value) {
            var nodes = treeStore.value.getNodes(value);
            return nodes.map(function(node) {
              return node.getModel();
            });
          };
          var appendTo = function appendTo2(para, item) {
            var list = [];
            if (Array.isArray(item)) {
              list = item;
            } else {
              list = [item];
            }
            list.forEach(function(item2) {
              var val = (item2 === null || item2 === void 0 ? void 0 : item2.value) || "";
              var node = getNode(treeStore.value, val);
              if (node) {
                treeStore.value.appendNodes(para, node);
              } else {
                treeStore.value.appendNodes(para, item2);
              }
            });
          };
          var insertBefore = function insertBefore2(value, item) {
            var val = (item === null || item === void 0 ? void 0 : item.value) || "";
            var node = getNode(treeStore.value, val);
            if (node) {
              treeStore.value.insertBefore(value, node);
            } else {
              treeStore.value.insertBefore(value, item);
            }
          };
          var insertAfter = function insertAfter2(value, item) {
            var val = (item === null || item === void 0 ? void 0 : item.value) || "";
            var node = getNode(treeStore.value, val);
            if (node) {
              treeStore.value.insertAfter(value, node);
            } else {
              treeStore.value.insertAfter(value, item);
            }
          };
          var remove2 = function remove3(value) {
            return treeStore.value.remove(value);
          };
          var getIndex = function getIndex2(value) {
            return treeStore.value.getNodeIndex(value);
          };
          var getParent = function getParent2(value) {
            var node = treeStore.value.getParent(value);
            return node === null || node === void 0 ? void 0 : node.getModel();
          };
          var getParents = function getParents2(value) {
            var nodes = treeStore.value.getParents(value);
            return nodes.map(function(node) {
              return node.getModel();
            });
          };
          var getPath = function getPath2(value) {
            var node = treeStore.value.getNode(value);
            var pathNodes = [];
            if (node) {
              pathNodes = node.getPath().map(function(node2) {
                return node2.getModel();
              });
            }
            return pathNodes;
          };
          expose({
            setItem,
            getItem,
            getItems,
            appendTo,
            insertBefore,
            insertAfter,
            remove: remove2,
            getIndex,
            getParent,
            getParents,
            getPath
          });
        }
        var injectKey = Symbol("treeProvider");
        var _TdTree = vue.defineComponent({
          name: "TTree",
          props: props$l,
          setup: function setup(props2, _ref) {
            var expose = _ref.expose, slots = _ref.slots;
            var _useConfig = useConfig("tree"), global2 = _useConfig.global, t = _useConfig.t;
            var CLASS_NAMES = useCLASSNAMES();
            var renderTNodeJSX2 = useTNodeDefault();
            var statusContext = vue.computed(function() {
              var checkProps = props2.checkProps, empty = props2.empty, icon = props2.icon, label = props2.label, line = props2.line, disableCheck = props2.disableCheck, operations = props2.operations;
              return {
                checkProps,
                empty,
                icon,
                label,
                line,
                disableCheck,
                operations,
                scopedSlots: slots
              };
            });
            vue.provide(injectKey, statusContext);
            var _useTree = useTree(props2), treeStore = _useTree.treeStore, treeNodeViews = _useTree.treeNodeViews;
            useExposeFunc(treeStore, expose);
            var classList = vue.computed(function() {
              var _ref2;
              return [CLASS_NAMES.value.tree, (_ref2 = {}, _defineProperty$3(_ref2, CLASS_NAMES.value.disabled, props2.disabled), _defineProperty$3(_ref2, CLASS_NAMES.value.treeHoverAble, props2.hover), _defineProperty$3(_ref2, CLASS_NAMES.value.treeCheckable, props2.checkable), _defineProperty$3(_ref2, CLASS_NAMES.value.treeTransition, props2.transition), _defineProperty$3(_ref2, CLASS_NAMES.value.treeBlockNode, props2.expandOnClickNode), _ref2)];
            });
            return function() {
              return vue.createVNode("div", {
                "class": classList.value
              }, [treeNodeViews.value.length === 0 ? vue.createVNode("div", {
                "class": CLASS_NAMES.value.treeEmpty
              }, [renderTNodeJSX2("empty", {
                defaultNode: t(global2.value.empty)
              })]) : vue.createVNode(vue.TransitionGroup, {
                "name": CLASS_NAMES.value.treeNodeToggle,
                "tag": "div",
                "enter-active-class": CLASS_NAMES.value.treeNodeEnter,
                "leave-active-class": CLASS_NAMES.value.treeNodeLeave
              }, {
                "default": function _default() {
                  return [treeNodeViews.value];
                }
              })]);
            };
          }
        });
        var Tree = withInstall(_TdTree);
        var props$k = {
          clearable: Boolean,
          collapsedItems: {
            type: Function
          },
          data: {
            type: Array,
            "default": function _default() {
              return [];
            }
          },
          disabled: Boolean,
          empty: {
            type: [String, Function],
            "default": ""
          },
          filter: {
            type: Function
          },
          filterable: Boolean,
          loading: Boolean,
          loadingText: {
            type: [String, Function],
            "default": ""
          },
          max: {
            type: Number,
            "default": 0
          },
          minCollapsedNum: {
            type: Number,
            "default": 0
          },
          multiple: Boolean,
          placeholder: {
            type: String,
            "default": ""
          },
          popupProps: {
            type: Object
          },
          prefixIcon: {
            type: Function
          },
          showCheckAlll: Boolean,
          size: {
            type: String,
            "default": "medium",
            validator: function validator(val) {
              return ["small", "medium", "large"].includes(val);
            }
          },
          treeProps: {
            type: Object
          },
          value: {
            type: [String, Number, Object, Array]
          },
          modelValue: {
            type: [String, Number, Object, Array]
          },
          defaultValue: {
            type: [String, Number, Object, Array]
          },
          valueDisplay: {
            type: Function
          },
          valueType: {
            type: String,
            "default": "value",
            validator: function validator(val) {
              return ["value", "object"].includes(val);
            }
          },
          onBlur: Function,
          onChange: Function,
          onClear: Function,
          onFocus: Function,
          onRemove: Function,
          onSearch: Function
        };
        function ownKeys$T(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$S(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$T(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$T(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _TreeSelect = vue.defineComponent({
          name: "TTreeSelect",
          props: props$k,
          setup: function setup(props2, _ref) {
            var slots = _ref.slots;
            var renderTNodeJSX2 = useTNodeJSX();
            var classPrefix2 = usePrefixClass();
            var _useConfig = useConfig("treeSelect"), global2 = _useConfig.global;
            var treeRef = vue.ref(null);
            var selectInputRef = vue.ref(null);
            var formDisabled = useFormDisabled();
            var visible = vue.ref(false);
            var isHover = vue.ref(false);
            var defaultProps = vue.reactive({
              trigger: "click",
              placement: "bottom-left",
              overlayClassName: "",
              overlayStyle: function overlayStyle(trigger) {
                return {
                  width: "".concat(trigger.offsetWidth, "px")
                };
              }
            });
            var filterByText = vue.ref(null);
            var actived = vue.ref([]);
            var expanded = vue.ref([]);
            var nodeInfo = vue.ref(null);
            var treeKey = vue.ref(0);
            var _toRefs = vue.toRefs(props2), value = _toRefs.value, modelValue = _toRefs.modelValue;
            var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), treeSelectValue = _useVModel2[0], setTreeSelectValue = _useVModel2[1];
            vue.watch(function() {
              return treeSelectValue.value;
            }, /* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee() {
              return regenerator.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.next = 2;
                      return changeNodeInfo();
                    case 2:
                      if (!props2.multiple) {
                        actived.value = nodeInfo.value ? [nodeInfo.value.value] : [];
                      }
                    case 3:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            })));
            vue.watch(function() {
              return props2.data;
            }, /* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee2() {
              return regenerator.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      _context2.next = 2;
                      return changeNodeInfo();
                    case 2:
                      treeRerender();
                    case 3:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2);
            })));
            var tDisabled = vue.computed(function() {
              return formDisabled.value || props2.disabled;
            });
            var inputPlaceholder = vue.computed(function() {
              return props2.placeholder || global2.value.placeholder;
            });
            var popupClass = vue.computed(function() {
              return "".concat(popupObject.value.overlayClassName, " ").concat(classPrefix2.value, "-select__dropdown-inner ").concat(classPrefix2.value, "-select__dropdown narrow-scrollbar");
            });
            var isObjectValue = vue.computed(function() {
              return props2.valueType === "object";
            });
            var checked = vue.computed(function() {
              if (props2.multiple) {
                if (isObjectValue.value) {
                  return isArray_1(treeSelectValue.value) ? treeSelectValue.value.map(function(item) {
                    return item.value;
                  }) : [];
                }
                return isArray_1(treeSelectValue.value) ? treeSelectValue.value.map(function(item) {
                  return item;
                }) : [];
              }
              return [];
            });
            var showLoading = vue.computed(function() {
              return props2.loading && !tDisabled.value;
            });
            var showFilter = vue.computed(function() {
              return props2.filterable || isFunction_1(props2.filter);
            });
            var showTree = vue.computed(function() {
              return !props2.loading;
            });
            var popupObject = vue.computed(function() {
              return props2.popupProps ? _objectSpread$S(_objectSpread$S({}, defaultProps), props2.popupProps) : defaultProps;
            });
            var selectedMultiple = vue.computed(function() {
              if (props2.multiple && isArray_1(treeSelectValue.value) && !isEmpty_1(treeSelectValue.value)) {
                return treeSelectValue.value;
              }
              return [];
            });
            var multiLimitDisabled = vue.computed(function() {
              return props2.multiple && !!props2.max && isArray_1(treeSelectValue.value) && props2.max <= treeSelectValue.value.length;
            });
            var loadingTextSlot = vue.computed(function() {
              var useLocale = !props2.loadingText && !slots.loadingText;
              return useLocale ? vue.createVNode("div", {
                "class": "".concat(classPrefix2.value, "-select__empty")
              }, [global2.value.loadingText]) : renderTNodeJSX2("loadingText");
            });
            var emptySlot = vue.computed(function() {
              var useLocale = !props2.empty && !slots.empty;
              return useLocale ? vue.createVNode("div", {
                "class": "".concat(classPrefix2.value, "-select__empty")
              }, [global2.value.empty]) : renderTNodeJSX2("empty");
            });
            var prefixIconSlot = vue.computed(function() {
              return renderTNodeJSX2("prefixIcon");
            });
            var collapsedItemsSlots = vue.computed(function() {
              if (!props2.multiple) {
                return null;
              }
              var notUseLocale = props2.collapsedItems || slots.collapsedItems || props2.minCollapsedNum <= 0 || selectedMultiple.value.length <= props2.minCollapsedNum;
              return notUseLocale ? renderTNodeJSX2("collapsedItems", {
                params: {
                  count: selectedMultiple.value.length - props2.minCollapsedNum,
                  value: selectedMultiple.value,
                  collapsedSelectedItems: selectedMultiple.value.slice(props2.minCollapsedNum)
                }
              }) : null;
            });
            var valueDisplaySlot = vue.computed(function() {
              var notUseLocale = props2.valueDisplay || slots.valueDisplay;
              var notUseSingleLocale = !props2.multiple && treeSelectValue.value !== "" && notUseLocale;
              var notUseMultipleLocale = props2.multiple && !isEmpty_1(treeSelectValue.value) && notUseLocale;
              if (notUseSingleLocale) {
                var _ref4;
                return renderTNodeJSX2("valueDisplay", {
                  params: {
                    value: nodeInfo.value || (_ref4 = {}, _defineProperty$3(_ref4, realLabel.value, ""), _defineProperty$3(_ref4, realValue.value, void 0), _ref4)
                  }
                });
              }
              if (notUseMultipleLocale) {
                return renderTNodeJSX2("valueDisplay", {
                  params: {
                    value: nodeInfo.value,
                    onClose: function onClose(value2, context) {
                      tagChange(value2, context);
                    }
                  }
                });
              }
              return null;
            });
            var realLabel = vue.computed(function() {
              if (!isEmpty_1(props2.treeProps) && !isEmpty_1(props2.treeProps.keys)) {
                return props2.treeProps.keys.label || "label";
              }
              return "label";
            });
            var realValue = vue.computed(function() {
              if (!isEmpty_1(props2.treeProps) && !isEmpty_1(props2.treeProps.keys)) {
                return props2.treeProps.keys.value || "value";
              }
              return "value";
            });
            vue.onMounted(/* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee3() {
              return regenerator.wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      if (!(!treeSelectValue.value && props2.defaultValue)) {
                        _context3.next = 3;
                        break;
                      }
                      _context3.next = 3;
                      return change(props2.defaultValue, null);
                    case 3:
                      if (isObjectValue.value) {
                        actived.value = isArray_1(treeSelectValue.value) ? treeSelectValue.value.map(function(item) {
                          return item.value;
                        }) : [treeSelectValue.value.value];
                      } else {
                        actived.value = isArray_1(treeSelectValue.value) ? treeSelectValue.value : [treeSelectValue.value];
                      }
                      changeNodeInfo();
                    case 5:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, _callee3);
            })));
            var popupVisibleChange = function popupVisibleChange2(state) {
              visible.value = state;
            };
            var change = function change2(valueParam, node) {
              var _props2$onChange;
              setTreeSelectValue(valueParam, {
                node
              });
              changeNodeInfo();
              (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 ? void 0 : _props2$onChange.call(props2, valueParam, {
                node
              });
            };
            var clear = function clear2(content) {
              var _props2$onClear;
              var defaultValue = props2.multiple ? [] : "";
              actived.value = [];
              change(defaultValue, null);
              (_props2$onClear = props2.onClear) === null || _props2$onClear === void 0 ? void 0 : _props2$onClear.call(props2, {
                e: content.e
              });
            };
            var focus = function focus2(value2, context) {
              var _props2$onFocus;
              (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 ? void 0 : _props2$onFocus.call(props2, {
                value: value2,
                e: context.e
              });
            };
            var blur = function blur2(value2, context) {
              var _props2$onBlur;
              (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 ? void 0 : _props2$onBlur.call(props2, {
                value: value2,
                e: context.e
              });
            };
            var remove2 = function remove3(options) {
              var _props2$onRemove;
              (_props2$onRemove = props2.onRemove) === null || _props2$onRemove === void 0 ? void 0 : _props2$onRemove.call(props2, options);
            };
            var search2 = function search3(filterWordsParam) {
              var _props2$onSearch;
              (_props2$onSearch = props2.onSearch) === null || _props2$onSearch === void 0 ? void 0 : _props2$onSearch.call(props2, filterWordsParam);
            };
            var treeNodeChange = function treeNodeChange2(valueParam, context) {
              var current = valueParam;
              if (isObjectValue.value) {
                current = valueParam.map(function(nodeValue) {
                  return getTreeNode(props2.data, nodeValue);
                });
              }
              change(current, context.node);
            };
            var treeNodeActive = function treeNodeActive2(valueParam, context) {
              visible.value = false;
              if (props2.multiple) {
                return;
              }
              if (treeSelectValue.value === context.node.data[realValue.value]) {
                return;
              }
              var current = valueParam;
              if (isObjectValue.value) {
                var nodeValue = isEmpty_1(valueParam) ? "" : valueParam[0];
                current = getTreeNode(props2.data, nodeValue);
              } else {
                current = isEmpty_1(valueParam) ? "" : valueParam[0];
              }
              change(current, context.node);
              actived.value = valueParam;
            };
            var treeNodeExpand = function treeNodeExpand2(valueParam) {
              expanded.value = valueParam;
            };
            var inputChange = function inputChange2(value2) {
              if (!value2) {
                filterByText.value = null;
                return null;
              }
              filterByText.value = function(node) {
                if (isFunction_1(props2.filter)) {
                  var filter2 = props2.filter(String(value2), node);
                  if (isBoolean_1(filter2)) {
                    return filter2;
                  }
                }
                return node.data[realLabel.value].indexOf(value2) >= 0;
              };
              search2(String(value2));
            };
            var tagChange = function tagChange2(value2, context) {
              var trigger = context.trigger, index2 = context.index;
              if (["tag-remove", "backspace"].includes(trigger)) {
                isArray_1(treeSelectValue.value) && treeSelectValue.value.splice(index2, 1);
              }
              remove2({
                value: value2,
                data: null,
                e: context && context.e
              });
              change(treeSelectValue.value, null);
            };
            var changeNodeInfo = /* @__PURE__ */ function() {
              var _ref6 = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee4() {
                return regenerator.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        _context4.next = 2;
                        return treeSelectValue.value;
                      case 2:
                        if (!props2.multiple) {
                          if (treeSelectValue.value || treeSelectValue.value === 0) {
                            nodeInfo.value = getSingleNodeInfo();
                          } else {
                            nodeInfo.value = "";
                          }
                        } else if (props2.multiple) {
                          if (isArray_1(treeSelectValue.value)) {
                            nodeInfo.value = getMultipleNodeInfo();
                          } else {
                            nodeInfo.value = [];
                          }
                        } else {
                          nodeInfo.value = null;
                        }
                      case 3:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, _callee4);
              }));
              return function changeNodeInfo2() {
                return _ref6.apply(this, arguments);
              };
            }();
            var getSingleNodeInfo = function getSingleNodeInfo2() {
              var _props2$treeProps;
              var nodeValue = isObjectValue.value ? treeSelectValue.value.value : treeSelectValue.value;
              if (treeRef.value && (_props2$treeProps = props2.treeProps) !== null && _props2$treeProps !== void 0 && _props2$treeProps.load) {
                if (!isEmpty_1(props2.data)) {
                  var node2 = treeRef.value.getItem(nodeValue);
                  if (!node2)
                    return;
                  return {
                    label: node2.data[realLabel.value],
                    value: node2.data[realValue.value]
                  };
                }
                return {
                  label: nodeValue,
                  value: nodeValue
                };
              }
              var node = getTreeNode(props2.data, nodeValue);
              if (!node) {
                return {
                  label: nodeValue,
                  value: nodeValue
                };
              }
              return node;
            };
            var getMultipleNodeInfo = function getMultipleNodeInfo2() {
              return treeSelectValue.value.map(function(value2) {
                var _props2$treeProps2;
                var nodeValue = isObjectValue.value ? value2.value : value2;
                if (treeRef.value && (_props2$treeProps2 = props2.treeProps) !== null && _props2$treeProps2 !== void 0 && _props2$treeProps2.load) {
                  if (!isEmpty_1(props2.data)) {
                    var node2 = treeRef.value.getItem(nodeValue);
                    if (!node2)
                      return;
                    return {
                      label: node2.data[realLabel.value],
                      value: node2.data[realValue.value]
                    };
                  }
                  return {
                    label: nodeValue,
                    value: nodeValue
                  };
                }
                var node = getTreeNode(props2.data, nodeValue);
                if (!node) {
                  return {
                    label: nodeValue,
                    value: nodeValue
                  };
                }
                return node;
              });
            };
            var getTreeNode = function getTreeNode2(data, targetValue) {
              for (var i2 = 0, len = data.length; i2 < len; i2++) {
                var _data$i;
                if (data[i2][realValue.value] === targetValue) {
                  return {
                    label: data[i2][realLabel.value],
                    value: data[i2][realValue.value]
                  };
                }
                if ((_data$i = data[i2]) !== null && _data$i !== void 0 && _data$i.children) {
                  var _data$i2;
                  var result = getTreeNode2((_data$i2 = data[i2]) === null || _data$i2 === void 0 ? void 0 : _data$i2.children, targetValue);
                  if (!isNil_1(result)) {
                    return result;
                  }
                }
              }
              return null;
            };
            var treeRerender = function treeRerender2() {
              treeKey.value += 1;
            };
            var treeSlots = {
              empty: function empty() {
                return vue.createVNode("span", null, [emptySlot.value]);
              }
            };
            var treeItem = function treeItem2() {
              return vue.withDirectives(vue.createVNode(Tree, vue.mergeProps({
                "ref": treeRef,
                "key": treeKey.value,
                "value": _toConsumableArray(checked.value),
                "hover": true,
                "data": props2.data,
                "activable": !props2.multiple,
                "checkable": props2.multiple,
                "disabled": tDisabled.value || multiLimitDisabled.value,
                "empty": props2.empty,
                "size": props2.size,
                "filter": filterByText.value,
                "icon": !filterByText.value,
                "actived": actived.value,
                "expanded": expanded.value,
                "activeMultiple": props2.multiple,
                "onChange": treeNodeChange,
                "onActive": treeNodeActive,
                "onExpand": treeNodeExpand,
                "expandOnClickNode": true
              }, props2.treeProps), treeSlots), [[vue.vShow, showTree.value]]);
            };
            var SelectInputSlots = {
              panel: function panel() {
                return vue.createVNode("div", null, [vue.withDirectives(vue.createVNode("p", {
                  "class": "".concat(classPrefix2.value, "-select-loading-tips ").concat(classPrefix2.value, "-select__right-icon-polyfill")
                }, [loadingTextSlot.value]), [[vue.vShow, showLoading.value]]), treeItem()]);
              },
              suffixIcon: function suffixIcon() {
                var _ref7;
                return vue.createVNode(FakeArrow, {
                  "isActive": visible.value,
                  "disabled": props2.disabled,
                  "overlayClassName": (_ref7 = {}, _defineProperty$3(_ref7, "".concat(classPrefix2.value, "-fake-arrow--highlight"), visible.value), _defineProperty$3(_ref7, "".concat(classPrefix2.value, "-fake-arrow--disable"), props2.disabled), _ref7)
                }, null);
              }
            };
            if (prefixIconSlot.value) {
              SelectInputSlots.prefixIcon = function() {
                return vue.createVNode(vue.Fragment, null, [prefixIconSlot.value]);
              };
            }
            if (collapsedItemsSlots.value) {
              SelectInputSlots.collapsedItems = function() {
                return vue.createVNode(vue.Fragment, null, [collapsedItemsSlots.value]);
              };
            }
            if (valueDisplaySlot.value) {
              SelectInputSlots.valueDisplay = function() {
                return vue.createVNode(vue.Fragment, null, [valueDisplaySlot.value]);
              };
            }
            var popupProps2 = {
              placement: popupObject.value.placement,
              trigger: popupObject.value.trigger,
              overlayStyle: popupObject.value.overlayStyle,
              overlayClassName: popupClass.value,
              expandAnimation: true
            };
            var inputProps = {
              size: props2.size
            };
            var tagInputProps = {
              inputProps: {
                size: props2.size,
                onClear: clear
              }
            };
            var tagProps = {
              size: props2.size,
              closable: true,
              maxWidth: 300
            };
            return function() {
              return vue.createVNode(SelectInput, {
                "class": "".concat(classPrefix2.value, "-tree-select"),
                "ref": selectInputRef,
                "value": nodeInfo.value,
                "multiple": props2.multiple,
                "loading": props2.loading,
                "disabled": tDisabled.value,
                "clearable": props2.clearable,
                "placeholder": inputPlaceholder.value,
                "allowInput": showFilter.value,
                "popupVisible": visible.value,
                "minCollapsedNum": props2.minCollapsedNum,
                "tagProps": tagProps,
                "popupProps": popupProps2,
                "inputProps": inputProps,
                "tagInputProps": tagInputProps,
                "onClear": clear,
                "onBlur": blur,
                "onFocus": focus,
                "onInputChange": inputChange,
                "onTagChange": tagChange,
                "onPopupVisibleChange": popupVisibleChange,
                "onMouseenter": function onMouseenter() {
                  return isHover.value = true;
                },
                "onMouseleave": function onMouseleave() {
                  return isHover.value = false;
                }
              }, SelectInputSlots);
            };
          }
        });
        var TreeSelect = withInstall(_TreeSelect);
        var props$j = {
          closeBtn: {
            type: [String, Boolean, Function],
            "default": true
          },
          colorModes: {
            type: Array,
            "default": ["monochrome", "linear-gradient"]
          },
          disabled: Boolean,
          enableAlpha: Boolean,
          format: {
            type: String,
            "default": "RGB",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["RGB", "RGBA", "HSL", "HSLA", "HSB", "HSV", "HSVA", "HEX", "CMYK", "CSS"].includes(val);
            }
          },
          inputProps: {
            type: Object
          },
          multiple: Boolean,
          popupProps: {
            type: Object
          },
          recentColors: {
            type: Array,
            "default": void 0
          },
          defaultRecentColors: {
            type: Array,
            "default": function _default() {
              return [];
            }
          },
          selectInputProps: {
            type: Object
          },
          swatchColors: {
            type: Array
          },
          value: {
            type: String,
            "default": void 0
          },
          modelValue: {
            type: String,
            "default": void 0
          },
          defaultValue: {
            type: String,
            "default": ""
          },
          onChange: Function,
          onPaletteBarChange: Function,
          onRecentColorsChange: Function
        };
        var TD_COLOR_USED_COLORS_MAX_SIZE = 100;
        var COLOR_MODES = {
          monochrome: "\u5355\u8272",
          "linear-gradient": "\u6E10\u53D8"
        };
        var DEFAULT_COLOR = "#001F97";
        var DEFAULT_LINEAR_GRADIENT = "linear-gradient(90deg, rgba(241,29,0,1) 0%, rgba(73,106,220,1) 100%);";
        var DEFAULT_SYSTEM_SWATCH_COLORS = ["#ECF2FE", "#D4E3FC", "#BBD3FB", "#96BBF8", "#699EF5", "#4787F0", "#266FE8", "#0052D9", "#0034B5", "#001F97", "#FDECEE", "#F9D7D9", "#F8B9BE", "#F78D94", "#F36D78", "#E34D59", "#C9353F", "#B11F26", "#951114", "#680506", "#FEF3E6", "#F9E0C7", "#F7C797", "#F2995F", "#ED7B2F", "#D35A21", "#BA431B", "#9E3610", "#842B0B", "#5A1907", "#E8F8F2", "#BCEBDC", "#85DBBE", "#48C79C", "#00A870", "#078D5C", "#067945", "#056334", "#044F2A", "#033017"];
        var SATURATION_PANEL_DEFAULT_WIDTH = 248;
        var SATURATION_PANEL_DEFAULT_HEIGHT = 140;
        var SLIDER_DEFAULT_WIDTH = 248;
        var GRADIENT_SLIDER_DEFAULT_WIDTH = 190;
        var FORMATS = ["HEX", "RGB", "HSL", "HSV", "CMYK", "CSS"];
        var BASE_COMPONENT_NAME = "color-picker";
        var useBaseClassName = function useBaseClassName2(className) {
          var baseClassName = usePrefixClass(BASE_COMPONENT_NAME);
          return vue.computed(function() {
            return className ? "".concat(baseClassName.value, "-").concat(className) : baseClassName.value;
          });
        };
        function ownKeys$S(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$R(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$S(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$S(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot$c(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var PanelHeader = vue.defineComponent({
          name: "PanelHeader",
          components: {
            CloseIcon: close,
            TRadioGroup: RadioGroup,
            TRadioButton: RadioButton
          },
          props: _objectSpread$R(_objectSpread$R({}, props$j), {}, {
            mode: {
              type: String,
              "default": "color"
            },
            togglePopup: {
              type: Function
            },
            onModeChange: {
              type: Function,
              "default": function _default() {
                return function() {
                };
              }
            }
          }),
          setup: function setup(props2) {
            var baseClassName = useBaseClassName();
            var modeValue = vue.ref(props2.mode);
            var handleClosePopup = function handleClosePopup2() {
              var _props2$togglePopup;
              (_props2$togglePopup = props2.togglePopup) === null || _props2$togglePopup === void 0 ? void 0 : _props2$togglePopup.call(props2, false);
            };
            var handleModeChange = function handleModeChange2(v) {
              return props2.onModeChange(v);
            };
            vue.watch(function() {
              return props2.mode;
            }, function(v) {
              return modeValue.value = v;
            });
            return {
              baseClassName,
              modeValue,
              handleModeChange,
              handleClosePopup
            };
          },
          render: function render() {
            var _slot;
            var _this$colorModes, _this = this;
            var baseClassName = this.baseClassName;
            return vue.createVNode("div", {
              "className": "".concat(baseClassName, "__head")
            }, [vue.createVNode("div", {
              "className": "".concat(baseClassName, "__mode")
            }, [((_this$colorModes = this.colorModes) === null || _this$colorModes === void 0 ? void 0 : _this$colorModes.length) === 1 ? COLOR_MODES[this.colorModes[0]] : vue.createVNode(vue.resolveComponent("t-radio-group"), {
              "variant": "default-filled",
              "size": "small",
              "modelValue": _this.modeValue,
              "onUpdate:modelValue": function onUpdateModelValue($event) {
                return _this.modeValue = $event;
              },
              "onChange": this.handleModeChange
            }, _isSlot$c(_slot = Object.keys(COLOR_MODES).map(function(key) {
              return vue.createVNode(vue.resolveComponent("t-radio-button"), {
                "key": key,
                "value": key
              }, {
                "default": function _default() {
                  return [COLOR_MODES[key]];
                }
              });
            })) ? _slot : {
              "default": function _default() {
                return [_slot];
              }
            })]), this.closeBtn ? vue.createVNode("span", {
              "role": "button",
              "class": ["".concat(baseClassName, "__icon"), "".concat(baseClassName, "__close")],
              "onClick": this.handleClosePopup
            }, [vue.createVNode(vue.resolveComponent("close-icon"), null, null)]) : null]);
          }
        });
        var rgb2cmyk = function rgb2cmyk2(red, green, blue) {
          var computedC = 0;
          var computedM = 0;
          var computedY = 0;
          var computedK = 0;
          var r = parseInt("".concat(red).replace(/\s/g, ""), 10);
          var g = parseInt("".concat(green).replace(/\s/g, ""), 10);
          var b2 = parseInt("".concat(blue).replace(/\s/g, ""), 10);
          if (r === 0 && g === 0 && b2 === 0) {
            computedK = 1;
            return [0, 0, 0, 1];
          }
          computedC = 1 - r / 255;
          computedM = 1 - g / 255;
          computedY = 1 - b2 / 255;
          var minCMY = Math.min(computedC, Math.min(computedM, computedY));
          computedC = (computedC - minCMY) / (1 - minCMY);
          computedM = (computedM - minCMY) / (1 - minCMY);
          computedY = (computedY - minCMY) / (1 - minCMY);
          computedK = minCMY;
          return [computedC, computedM, computedY, computedK];
        };
        var cmyk2rgb = function cmyk2rgb2(cyan, magenta, yellow, black) {
          var c = cyan / 100;
          var m = magenta / 100;
          var y = yellow / 100;
          var k = black / 100;
          c = c * (1 - k) + k;
          m = m * (1 - k) + k;
          y = y * (1 - k) + k;
          var r = 1 - c;
          var g = 1 - m;
          var b2 = 1 - y;
          r = Math.round(255 * r);
          g = Math.round(255 * g);
          b2 = Math.round(255 * b2);
          return {
            r,
            g,
            b: b2
          };
        };
        var REG_CMYK_STRING = /cmyk\((\d+%?),(\d+%?),(\d+%?),(\d+%?)\)/;
        var toNumber = function toNumber2(str) {
          return Math.max(0, Math.min(255, parseInt(str, 10)));
        };
        var cmykInputToColor = function cmykInputToColor2(input) {
          if (/cmyk/i.test(input)) {
            var str = input.replace(/\s/g, "");
            var match = str.match(REG_CMYK_STRING);
            var c = toNumber(match[1]);
            var m = toNumber(match[2]);
            var y = toNumber(match[3]);
            var k = toNumber(match[4]);
            var _cmyk2rgb = cmyk2rgb(c, m, y, k), r = _cmyk2rgb.r, g = _cmyk2rgb.g, b2 = _cmyk2rgb.b;
            return "rgb(".concat(r, ", ").concat(g, ", ").concat(b2, ")");
          }
          return input;
        };
        var tinycolor = { exports: {} };
        (function(module2) {
          (function(Math2) {
            var trimLeft = /^\s+/, trimRight = /\s+$/, tinyCounter = 0, mathRound2 = Math2.round, mathMin = Math2.min, mathMax = Math2.max, mathRandom = Math2.random;
            function tinycolor2(color, opts) {
              color = color ? color : "";
              opts = opts || {};
              if (color instanceof tinycolor2) {
                return color;
              }
              if (!(this instanceof tinycolor2)) {
                return new tinycolor2(color, opts);
              }
              var rgb = inputToRGB(color);
              this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound2(100 * this._a) / 100, this._format = opts.format || rgb.format;
              this._gradientType = opts.gradientType;
              if (this._r < 1) {
                this._r = mathRound2(this._r);
              }
              if (this._g < 1) {
                this._g = mathRound2(this._g);
              }
              if (this._b < 1) {
                this._b = mathRound2(this._b);
              }
              this._ok = rgb.ok;
              this._tc_id = tinyCounter++;
            }
            tinycolor2.prototype = {
              isDark: function isDark() {
                return this.getBrightness() < 128;
              },
              isLight: function isLight() {
                return !this.isDark();
              },
              isValid: function isValid() {
                return this._ok;
              },
              getOriginalInput: function getOriginalInput() {
                return this._originalInput;
              },
              getFormat: function getFormat() {
                return this._format;
              },
              getAlpha: function getAlpha() {
                return this._a;
              },
              getBrightness: function getBrightness() {
                var rgb = this.toRgb();
                return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
              },
              getLuminance: function getLuminance() {
                var rgb = this.toRgb();
                var RsRGB, GsRGB, BsRGB, R, G, B;
                RsRGB = rgb.r / 255;
                GsRGB = rgb.g / 255;
                BsRGB = rgb.b / 255;
                if (RsRGB <= 0.03928) {
                  R = RsRGB / 12.92;
                } else {
                  R = Math2.pow((RsRGB + 0.055) / 1.055, 2.4);
                }
                if (GsRGB <= 0.03928) {
                  G = GsRGB / 12.92;
                } else {
                  G = Math2.pow((GsRGB + 0.055) / 1.055, 2.4);
                }
                if (BsRGB <= 0.03928) {
                  B = BsRGB / 12.92;
                } else {
                  B = Math2.pow((BsRGB + 0.055) / 1.055, 2.4);
                }
                return 0.2126 * R + 0.7152 * G + 0.0722 * B;
              },
              setAlpha: function setAlpha(value) {
                this._a = boundAlpha(value);
                this._roundA = mathRound2(100 * this._a) / 100;
                return this;
              },
              toHsv: function toHsv() {
                var hsv = rgbToHsv(this._r, this._g, this._b);
                return {
                  h: hsv.h * 360,
                  s: hsv.s,
                  v: hsv.v,
                  a: this._a
                };
              },
              toHsvString: function toHsvString() {
                var hsv = rgbToHsv(this._r, this._g, this._b);
                var h = mathRound2(hsv.h * 360), s = mathRound2(hsv.s * 100), v = mathRound2(hsv.v * 100);
                return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
              },
              toHsl: function toHsl() {
                var hsl = rgbToHsl(this._r, this._g, this._b);
                return {
                  h: hsl.h * 360,
                  s: hsl.s,
                  l: hsl.l,
                  a: this._a
                };
              },
              toHslString: function toHslString() {
                var hsl = rgbToHsl(this._r, this._g, this._b);
                var h = mathRound2(hsl.h * 360), s = mathRound2(hsl.s * 100), l = mathRound2(hsl.l * 100);
                return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
              },
              toHex: function toHex(allow3Char) {
                return rgbToHex(this._r, this._g, this._b, allow3Char);
              },
              toHexString: function toHexString(allow3Char) {
                return "#" + this.toHex(allow3Char);
              },
              toHex8: function toHex8(allow4Char) {
                return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
              },
              toHex8String: function toHex8String(allow4Char) {
                return "#" + this.toHex8(allow4Char);
              },
              toRgb: function toRgb() {
                return {
                  r: mathRound2(this._r),
                  g: mathRound2(this._g),
                  b: mathRound2(this._b),
                  a: this._a
                };
              },
              toRgbString: function toRgbString() {
                return this._a == 1 ? "rgb(" + mathRound2(this._r) + ", " + mathRound2(this._g) + ", " + mathRound2(this._b) + ")" : "rgba(" + mathRound2(this._r) + ", " + mathRound2(this._g) + ", " + mathRound2(this._b) + ", " + this._roundA + ")";
              },
              toPercentageRgb: function toPercentageRgb() {
                return {
                  r: mathRound2(bound01(this._r, 255) * 100) + "%",
                  g: mathRound2(bound01(this._g, 255) * 100) + "%",
                  b: mathRound2(bound01(this._b, 255) * 100) + "%",
                  a: this._a
                };
              },
              toPercentageRgbString: function toPercentageRgbString() {
                return this._a == 1 ? "rgb(" + mathRound2(bound01(this._r, 255) * 100) + "%, " + mathRound2(bound01(this._g, 255) * 100) + "%, " + mathRound2(bound01(this._b, 255) * 100) + "%)" : "rgba(" + mathRound2(bound01(this._r, 255) * 100) + "%, " + mathRound2(bound01(this._g, 255) * 100) + "%, " + mathRound2(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
              },
              toName: function toName() {
                if (this._a === 0) {
                  return "transparent";
                }
                if (this._a < 1) {
                  return false;
                }
                return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
              },
              toFilter: function toFilter(secondColor) {
                var hex8String = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a);
                var secondHex8String = hex8String;
                var gradientType = this._gradientType ? "GradientType = 1, " : "";
                if (secondColor) {
                  var s = tinycolor2(secondColor);
                  secondHex8String = "#" + rgbaToArgbHex(s._r, s._g, s._b, s._a);
                }
                return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
              },
              toString: function toString2(format2) {
                var formatSet = !!format2;
                format2 = format2 || this._format;
                var formattedString = false;
                var hasAlpha = this._a < 1 && this._a >= 0;
                var needsAlphaFormat = !formatSet && hasAlpha && (format2 === "hex" || format2 === "hex6" || format2 === "hex3" || format2 === "hex4" || format2 === "hex8" || format2 === "name");
                if (needsAlphaFormat) {
                  if (format2 === "name" && this._a === 0) {
                    return this.toName();
                  }
                  return this.toRgbString();
                }
                if (format2 === "rgb") {
                  formattedString = this.toRgbString();
                }
                if (format2 === "prgb") {
                  formattedString = this.toPercentageRgbString();
                }
                if (format2 === "hex" || format2 === "hex6") {
                  formattedString = this.toHexString();
                }
                if (format2 === "hex3") {
                  formattedString = this.toHexString(true);
                }
                if (format2 === "hex4") {
                  formattedString = this.toHex8String(true);
                }
                if (format2 === "hex8") {
                  formattedString = this.toHex8String();
                }
                if (format2 === "name") {
                  formattedString = this.toName();
                }
                if (format2 === "hsl") {
                  formattedString = this.toHslString();
                }
                if (format2 === "hsv") {
                  formattedString = this.toHsvString();
                }
                return formattedString || this.toHexString();
              },
              clone: function clone2() {
                return tinycolor2(this.toString());
              },
              _applyModification: function _applyModification(fn, args) {
                var color = fn.apply(null, [this].concat([].slice.call(args)));
                this._r = color._r;
                this._g = color._g;
                this._b = color._b;
                this.setAlpha(color._a);
                return this;
              },
              lighten: function lighten() {
                return this._applyModification(_lighten, arguments);
              },
              brighten: function brighten() {
                return this._applyModification(_brighten, arguments);
              },
              darken: function darken() {
                return this._applyModification(_darken, arguments);
              },
              desaturate: function desaturate() {
                return this._applyModification(_desaturate, arguments);
              },
              saturate: function saturate() {
                return this._applyModification(_saturate, arguments);
              },
              greyscale: function greyscale() {
                return this._applyModification(_greyscale, arguments);
              },
              spin: function spin() {
                return this._applyModification(_spin, arguments);
              },
              _applyCombination: function _applyCombination(fn, args) {
                return fn.apply(null, [this].concat([].slice.call(args)));
              },
              analogous: function analogous() {
                return this._applyCombination(_analogous, arguments);
              },
              complement: function complement() {
                return this._applyCombination(_complement, arguments);
              },
              monochromatic: function monochromatic() {
                return this._applyCombination(_monochromatic, arguments);
              },
              splitcomplement: function splitcomplement() {
                return this._applyCombination(_splitcomplement, arguments);
              },
              triad: function triad() {
                return this._applyCombination(_triad, arguments);
              },
              tetrad: function tetrad() {
                return this._applyCombination(_tetrad, arguments);
              }
            };
            tinycolor2.fromRatio = function(color, opts) {
              if (_typeof$2(color) == "object") {
                var newColor = {};
                for (var i2 in color) {
                  if (color.hasOwnProperty(i2)) {
                    if (i2 === "a") {
                      newColor[i2] = color[i2];
                    } else {
                      newColor[i2] = convertToPercentage(color[i2]);
                    }
                  }
                }
                color = newColor;
              }
              return tinycolor2(color, opts);
            };
            function inputToRGB(color) {
              var rgb = {
                r: 0,
                g: 0,
                b: 0
              };
              var a = 1;
              var s = null;
              var v = null;
              var l = null;
              var ok = false;
              var format2 = false;
              if (typeof color == "string") {
                color = stringInputToObject(color);
              }
              if (_typeof$2(color) == "object") {
                if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
                  rgb = rgbToRgb(color.r, color.g, color.b);
                  ok = true;
                  format2 = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
                } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
                  s = convertToPercentage(color.s);
                  v = convertToPercentage(color.v);
                  rgb = hsvToRgb(color.h, s, v);
                  ok = true;
                  format2 = "hsv";
                } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
                  s = convertToPercentage(color.s);
                  l = convertToPercentage(color.l);
                  rgb = hslToRgb(color.h, s, l);
                  ok = true;
                  format2 = "hsl";
                }
                if (color.hasOwnProperty("a")) {
                  a = color.a;
                }
              }
              a = boundAlpha(a);
              return {
                ok,
                format: color.format || format2,
                r: mathMin(255, mathMax(rgb.r, 0)),
                g: mathMin(255, mathMax(rgb.g, 0)),
                b: mathMin(255, mathMax(rgb.b, 0)),
                a
              };
            }
            function rgbToRgb(r, g, b2) {
              return {
                r: bound01(r, 255) * 255,
                g: bound01(g, 255) * 255,
                b: bound01(b2, 255) * 255
              };
            }
            function rgbToHsl(r, g, b2) {
              r = bound01(r, 255);
              g = bound01(g, 255);
              b2 = bound01(b2, 255);
              var max2 = mathMax(r, g, b2), min2 = mathMin(r, g, b2);
              var h, s, l = (max2 + min2) / 2;
              if (max2 == min2) {
                h = s = 0;
              } else {
                var d = max2 - min2;
                s = l > 0.5 ? d / (2 - max2 - min2) : d / (max2 + min2);
                switch (max2) {
                  case r:
                    h = (g - b2) / d + (g < b2 ? 6 : 0);
                    break;
                  case g:
                    h = (b2 - r) / d + 2;
                    break;
                  case b2:
                    h = (r - g) / d + 4;
                    break;
                }
                h /= 6;
              }
              return {
                h,
                s,
                l
              };
            }
            function hslToRgb(h, s, l) {
              var r, g, b2;
              h = bound01(h, 360);
              s = bound01(s, 100);
              l = bound01(l, 100);
              function hue2rgb(p2, q2, t) {
                if (t < 0)
                  t += 1;
                if (t > 1)
                  t -= 1;
                if (t < 1 / 6)
                  return p2 + (q2 - p2) * 6 * t;
                if (t < 1 / 2)
                  return q2;
                if (t < 2 / 3)
                  return p2 + (q2 - p2) * (2 / 3 - t) * 6;
                return p2;
              }
              if (s === 0) {
                r = g = b2 = l;
              } else {
                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                var p = 2 * l - q;
                r = hue2rgb(p, q, h + 1 / 3);
                g = hue2rgb(p, q, h);
                b2 = hue2rgb(p, q, h - 1 / 3);
              }
              return {
                r: r * 255,
                g: g * 255,
                b: b2 * 255
              };
            }
            function rgbToHsv(r, g, b2) {
              r = bound01(r, 255);
              g = bound01(g, 255);
              b2 = bound01(b2, 255);
              var max2 = mathMax(r, g, b2), min2 = mathMin(r, g, b2);
              var h, s, v = max2;
              var d = max2 - min2;
              s = max2 === 0 ? 0 : d / max2;
              if (max2 == min2) {
                h = 0;
              } else {
                switch (max2) {
                  case r:
                    h = (g - b2) / d + (g < b2 ? 6 : 0);
                    break;
                  case g:
                    h = (b2 - r) / d + 2;
                    break;
                  case b2:
                    h = (r - g) / d + 4;
                    break;
                }
                h /= 6;
              }
              return {
                h,
                s,
                v
              };
            }
            function hsvToRgb(h, s, v) {
              h = bound01(h, 360) * 6;
              s = bound01(s, 100);
              v = bound01(v, 100);
              var i2 = Math2.floor(h), f = h - i2, p = v * (1 - s), q = v * (1 - f * s), t = v * (1 - (1 - f) * s), mod = i2 % 6, r = [v, q, p, p, t, v][mod], g = [t, v, v, q, p, p][mod], b2 = [p, p, t, v, v, q][mod];
              return {
                r: r * 255,
                g: g * 255,
                b: b2 * 255
              };
            }
            function rgbToHex(r, g, b2, allow3Char) {
              var hex = [pad2(mathRound2(r).toString(16)), pad2(mathRound2(g).toString(16)), pad2(mathRound2(b2).toString(16))];
              if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
                return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
              }
              return hex.join("");
            }
            function rgbaToHex(r, g, b2, a, allow4Char) {
              var hex = [pad2(mathRound2(r).toString(16)), pad2(mathRound2(g).toString(16)), pad2(mathRound2(b2).toString(16)), pad2(convertDecimalToHex(a))];
              if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
                return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
              }
              return hex.join("");
            }
            function rgbaToArgbHex(r, g, b2, a) {
              var hex = [pad2(convertDecimalToHex(a)), pad2(mathRound2(r).toString(16)), pad2(mathRound2(g).toString(16)), pad2(mathRound2(b2).toString(16))];
              return hex.join("");
            }
            tinycolor2.equals = function(color1, color2) {
              if (!color1 || !color2) {
                return false;
              }
              return tinycolor2(color1).toRgbString() == tinycolor2(color2).toRgbString();
            };
            tinycolor2.random = function() {
              return tinycolor2.fromRatio({
                r: mathRandom(),
                g: mathRandom(),
                b: mathRandom()
              });
            };
            function _desaturate(color, amount) {
              amount = amount === 0 ? 0 : amount || 10;
              var hsl = tinycolor2(color).toHsl();
              hsl.s -= amount / 100;
              hsl.s = clamp01(hsl.s);
              return tinycolor2(hsl);
            }
            function _saturate(color, amount) {
              amount = amount === 0 ? 0 : amount || 10;
              var hsl = tinycolor2(color).toHsl();
              hsl.s += amount / 100;
              hsl.s = clamp01(hsl.s);
              return tinycolor2(hsl);
            }
            function _greyscale(color) {
              return tinycolor2(color).desaturate(100);
            }
            function _lighten(color, amount) {
              amount = amount === 0 ? 0 : amount || 10;
              var hsl = tinycolor2(color).toHsl();
              hsl.l += amount / 100;
              hsl.l = clamp01(hsl.l);
              return tinycolor2(hsl);
            }
            function _brighten(color, amount) {
              amount = amount === 0 ? 0 : amount || 10;
              var rgb = tinycolor2(color).toRgb();
              rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound2(255 * -(amount / 100))));
              rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound2(255 * -(amount / 100))));
              rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound2(255 * -(amount / 100))));
              return tinycolor2(rgb);
            }
            function _darken(color, amount) {
              amount = amount === 0 ? 0 : amount || 10;
              var hsl = tinycolor2(color).toHsl();
              hsl.l -= amount / 100;
              hsl.l = clamp01(hsl.l);
              return tinycolor2(hsl);
            }
            function _spin(color, amount) {
              var hsl = tinycolor2(color).toHsl();
              var hue = (hsl.h + amount) % 360;
              hsl.h = hue < 0 ? 360 + hue : hue;
              return tinycolor2(hsl);
            }
            function _complement(color) {
              var hsl = tinycolor2(color).toHsl();
              hsl.h = (hsl.h + 180) % 360;
              return tinycolor2(hsl);
            }
            function _triad(color) {
              var hsl = tinycolor2(color).toHsl();
              var h = hsl.h;
              return [tinycolor2(color), tinycolor2({
                h: (h + 120) % 360,
                s: hsl.s,
                l: hsl.l
              }), tinycolor2({
                h: (h + 240) % 360,
                s: hsl.s,
                l: hsl.l
              })];
            }
            function _tetrad(color) {
              var hsl = tinycolor2(color).toHsl();
              var h = hsl.h;
              return [tinycolor2(color), tinycolor2({
                h: (h + 90) % 360,
                s: hsl.s,
                l: hsl.l
              }), tinycolor2({
                h: (h + 180) % 360,
                s: hsl.s,
                l: hsl.l
              }), tinycolor2({
                h: (h + 270) % 360,
                s: hsl.s,
                l: hsl.l
              })];
            }
            function _splitcomplement(color) {
              var hsl = tinycolor2(color).toHsl();
              var h = hsl.h;
              return [tinycolor2(color), tinycolor2({
                h: (h + 72) % 360,
                s: hsl.s,
                l: hsl.l
              }), tinycolor2({
                h: (h + 216) % 360,
                s: hsl.s,
                l: hsl.l
              })];
            }
            function _analogous(color, results, slices) {
              results = results || 6;
              slices = slices || 30;
              var hsl = tinycolor2(color).toHsl();
              var part = 360 / slices;
              var ret = [tinycolor2(color)];
              for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
                hsl.h = (hsl.h + part) % 360;
                ret.push(tinycolor2(hsl));
              }
              return ret;
            }
            function _monochromatic(color, results) {
              results = results || 6;
              var hsv = tinycolor2(color).toHsv();
              var h = hsv.h, s = hsv.s, v = hsv.v;
              var ret = [];
              var modification = 1 / results;
              while (results--) {
                ret.push(tinycolor2({
                  h,
                  s,
                  v
                }));
                v = (v + modification) % 1;
              }
              return ret;
            }
            tinycolor2.mix = function(color1, color2, amount) {
              amount = amount === 0 ? 0 : amount || 50;
              var rgb1 = tinycolor2(color1).toRgb();
              var rgb2 = tinycolor2(color2).toRgb();
              var p = amount / 100;
              var rgba = {
                r: (rgb2.r - rgb1.r) * p + rgb1.r,
                g: (rgb2.g - rgb1.g) * p + rgb1.g,
                b: (rgb2.b - rgb1.b) * p + rgb1.b,
                a: (rgb2.a - rgb1.a) * p + rgb1.a
              };
              return tinycolor2(rgba);
            };
            tinycolor2.readability = function(color1, color2) {
              var c1 = tinycolor2(color1);
              var c2 = tinycolor2(color2);
              return (Math2.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math2.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
            };
            tinycolor2.isReadable = function(color1, color2, wcag2) {
              var readability = tinycolor2.readability(color1, color2);
              var wcag2Parms, out;
              out = false;
              wcag2Parms = validateWCAG2Parms(wcag2);
              switch (wcag2Parms.level + wcag2Parms.size) {
                case "AAsmall":
                case "AAAlarge":
                  out = readability >= 4.5;
                  break;
                case "AAlarge":
                  out = readability >= 3;
                  break;
                case "AAAsmall":
                  out = readability >= 7;
                  break;
              }
              return out;
            };
            tinycolor2.mostReadable = function(baseColor, colorList, args) {
              var bestColor = null;
              var bestScore = 0;
              var readability;
              var includeFallbackColors, level, size;
              args = args || {};
              includeFallbackColors = args.includeFallbackColors;
              level = args.level;
              size = args.size;
              for (var i2 = 0; i2 < colorList.length; i2++) {
                readability = tinycolor2.readability(baseColor, colorList[i2]);
                if (readability > bestScore) {
                  bestScore = readability;
                  bestColor = tinycolor2(colorList[i2]);
                }
              }
              if (tinycolor2.isReadable(baseColor, bestColor, {
                "level": level,
                "size": size
              }) || !includeFallbackColors) {
                return bestColor;
              } else {
                args.includeFallbackColors = false;
                return tinycolor2.mostReadable(baseColor, ["#fff", "#000"], args);
              }
            };
            var names = tinycolor2.names = {
              aliceblue: "f0f8ff",
              antiquewhite: "faebd7",
              aqua: "0ff",
              aquamarine: "7fffd4",
              azure: "f0ffff",
              beige: "f5f5dc",
              bisque: "ffe4c4",
              black: "000",
              blanchedalmond: "ffebcd",
              blue: "00f",
              blueviolet: "8a2be2",
              brown: "a52a2a",
              burlywood: "deb887",
              burntsienna: "ea7e5d",
              cadetblue: "5f9ea0",
              chartreuse: "7fff00",
              chocolate: "d2691e",
              coral: "ff7f50",
              cornflowerblue: "6495ed",
              cornsilk: "fff8dc",
              crimson: "dc143c",
              cyan: "0ff",
              darkblue: "00008b",
              darkcyan: "008b8b",
              darkgoldenrod: "b8860b",
              darkgray: "a9a9a9",
              darkgreen: "006400",
              darkgrey: "a9a9a9",
              darkkhaki: "bdb76b",
              darkmagenta: "8b008b",
              darkolivegreen: "556b2f",
              darkorange: "ff8c00",
              darkorchid: "9932cc",
              darkred: "8b0000",
              darksalmon: "e9967a",
              darkseagreen: "8fbc8f",
              darkslateblue: "483d8b",
              darkslategray: "2f4f4f",
              darkslategrey: "2f4f4f",
              darkturquoise: "00ced1",
              darkviolet: "9400d3",
              deeppink: "ff1493",
              deepskyblue: "00bfff",
              dimgray: "696969",
              dimgrey: "696969",
              dodgerblue: "1e90ff",
              firebrick: "b22222",
              floralwhite: "fffaf0",
              forestgreen: "228b22",
              fuchsia: "f0f",
              gainsboro: "dcdcdc",
              ghostwhite: "f8f8ff",
              gold: "ffd700",
              goldenrod: "daa520",
              gray: "808080",
              green: "008000",
              greenyellow: "adff2f",
              grey: "808080",
              honeydew: "f0fff0",
              hotpink: "ff69b4",
              indianred: "cd5c5c",
              indigo: "4b0082",
              ivory: "fffff0",
              khaki: "f0e68c",
              lavender: "e6e6fa",
              lavenderblush: "fff0f5",
              lawngreen: "7cfc00",
              lemonchiffon: "fffacd",
              lightblue: "add8e6",
              lightcoral: "f08080",
              lightcyan: "e0ffff",
              lightgoldenrodyellow: "fafad2",
              lightgray: "d3d3d3",
              lightgreen: "90ee90",
              lightgrey: "d3d3d3",
              lightpink: "ffb6c1",
              lightsalmon: "ffa07a",
              lightseagreen: "20b2aa",
              lightskyblue: "87cefa",
              lightslategray: "789",
              lightslategrey: "789",
              lightsteelblue: "b0c4de",
              lightyellow: "ffffe0",
              lime: "0f0",
              limegreen: "32cd32",
              linen: "faf0e6",
              magenta: "f0f",
              maroon: "800000",
              mediumaquamarine: "66cdaa",
              mediumblue: "0000cd",
              mediumorchid: "ba55d3",
              mediumpurple: "9370db",
              mediumseagreen: "3cb371",
              mediumslateblue: "7b68ee",
              mediumspringgreen: "00fa9a",
              mediumturquoise: "48d1cc",
              mediumvioletred: "c71585",
              midnightblue: "191970",
              mintcream: "f5fffa",
              mistyrose: "ffe4e1",
              moccasin: "ffe4b5",
              navajowhite: "ffdead",
              navy: "000080",
              oldlace: "fdf5e6",
              olive: "808000",
              olivedrab: "6b8e23",
              orange: "ffa500",
              orangered: "ff4500",
              orchid: "da70d6",
              palegoldenrod: "eee8aa",
              palegreen: "98fb98",
              paleturquoise: "afeeee",
              palevioletred: "db7093",
              papayawhip: "ffefd5",
              peachpuff: "ffdab9",
              peru: "cd853f",
              pink: "ffc0cb",
              plum: "dda0dd",
              powderblue: "b0e0e6",
              purple: "800080",
              rebeccapurple: "663399",
              red: "f00",
              rosybrown: "bc8f8f",
              royalblue: "4169e1",
              saddlebrown: "8b4513",
              salmon: "fa8072",
              sandybrown: "f4a460",
              seagreen: "2e8b57",
              seashell: "fff5ee",
              sienna: "a0522d",
              silver: "c0c0c0",
              skyblue: "87ceeb",
              slateblue: "6a5acd",
              slategray: "708090",
              slategrey: "708090",
              snow: "fffafa",
              springgreen: "00ff7f",
              steelblue: "4682b4",
              tan: "d2b48c",
              teal: "008080",
              thistle: "d8bfd8",
              tomato: "ff6347",
              turquoise: "40e0d0",
              violet: "ee82ee",
              wheat: "f5deb3",
              white: "fff",
              whitesmoke: "f5f5f5",
              yellow: "ff0",
              yellowgreen: "9acd32"
            };
            var hexNames = tinycolor2.hexNames = flip2(names);
            function flip2(o) {
              var flipped = {};
              for (var i2 in o) {
                if (o.hasOwnProperty(i2)) {
                  flipped[o[i2]] = i2;
                }
              }
              return flipped;
            }
            function boundAlpha(a) {
              a = parseFloat(a);
              if (isNaN(a) || a < 0 || a > 1) {
                a = 1;
              }
              return a;
            }
            function bound01(n, max2) {
              if (isOnePointZero(n)) {
                n = "100%";
              }
              var processPercent = isPercentage(n);
              n = mathMin(max2, mathMax(0, parseFloat(n)));
              if (processPercent) {
                n = parseInt(n * max2, 10) / 100;
              }
              if (Math2.abs(n - max2) < 1e-6) {
                return 1;
              }
              return n % max2 / parseFloat(max2);
            }
            function clamp01(val) {
              return mathMin(1, mathMax(0, val));
            }
            function parseIntFromHex(val) {
              return parseInt(val, 16);
            }
            function isOnePointZero(n) {
              return typeof n == "string" && n.indexOf(".") != -1 && parseFloat(n) === 1;
            }
            function isPercentage(n) {
              return typeof n === "string" && n.indexOf("%") != -1;
            }
            function pad2(c) {
              return c.length == 1 ? "0" + c : "" + c;
            }
            function convertToPercentage(n) {
              if (n <= 1) {
                n = n * 100 + "%";
              }
              return n;
            }
            function convertDecimalToHex(d) {
              return Math2.round(parseFloat(d) * 255).toString(16);
            }
            function convertHexToDecimal(h) {
              return parseIntFromHex(h) / 255;
            }
            var matchers = function() {
              var CSS_INTEGER = "[-\\+]?\\d+%?";
              var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
              var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
              var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
              var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
              return {
                CSS_UNIT: new RegExp(CSS_UNIT),
                rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
                rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
                hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
                hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
                hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
                hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
                hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
                hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
                hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
                hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
              };
            }();
            function isValidCSSUnit(color) {
              return !!matchers.CSS_UNIT.exec(color);
            }
            function stringInputToObject(color) {
              color = color.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
              var named = false;
              if (names[color]) {
                color = names[color];
                named = true;
              } else if (color == "transparent") {
                return {
                  r: 0,
                  g: 0,
                  b: 0,
                  a: 0,
                  format: "name"
                };
              }
              var match;
              if (match = matchers.rgb.exec(color)) {
                return {
                  r: match[1],
                  g: match[2],
                  b: match[3]
                };
              }
              if (match = matchers.rgba.exec(color)) {
                return {
                  r: match[1],
                  g: match[2],
                  b: match[3],
                  a: match[4]
                };
              }
              if (match = matchers.hsl.exec(color)) {
                return {
                  h: match[1],
                  s: match[2],
                  l: match[3]
                };
              }
              if (match = matchers.hsla.exec(color)) {
                return {
                  h: match[1],
                  s: match[2],
                  l: match[3],
                  a: match[4]
                };
              }
              if (match = matchers.hsv.exec(color)) {
                return {
                  h: match[1],
                  s: match[2],
                  v: match[3]
                };
              }
              if (match = matchers.hsva.exec(color)) {
                return {
                  h: match[1],
                  s: match[2],
                  v: match[3],
                  a: match[4]
                };
              }
              if (match = matchers.hex8.exec(color)) {
                return {
                  r: parseIntFromHex(match[1]),
                  g: parseIntFromHex(match[2]),
                  b: parseIntFromHex(match[3]),
                  a: convertHexToDecimal(match[4]),
                  format: named ? "name" : "hex8"
                };
              }
              if (match = matchers.hex6.exec(color)) {
                return {
                  r: parseIntFromHex(match[1]),
                  g: parseIntFromHex(match[2]),
                  b: parseIntFromHex(match[3]),
                  format: named ? "name" : "hex"
                };
              }
              if (match = matchers.hex4.exec(color)) {
                return {
                  r: parseIntFromHex(match[1] + "" + match[1]),
                  g: parseIntFromHex(match[2] + "" + match[2]),
                  b: parseIntFromHex(match[3] + "" + match[3]),
                  a: convertHexToDecimal(match[4] + "" + match[4]),
                  format: named ? "name" : "hex8"
                };
              }
              if (match = matchers.hex3.exec(color)) {
                return {
                  r: parseIntFromHex(match[1] + "" + match[1]),
                  g: parseIntFromHex(match[2] + "" + match[2]),
                  b: parseIntFromHex(match[3] + "" + match[3]),
                  format: named ? "name" : "hex"
                };
              }
              return false;
            }
            function validateWCAG2Parms(parms) {
              var level, size;
              parms = parms || {
                "level": "AA",
                "size": "small"
              };
              level = (parms.level || "AA").toUpperCase();
              size = (parms.size || "small").toLowerCase();
              if (level !== "AA" && level !== "AAA") {
                level = "AA";
              }
              if (size !== "small" && size !== "large") {
                size = "small";
              }
              return {
                "level": level,
                "size": size
              };
            }
            if (module2.exports) {
              module2.exports = tinycolor2;
            } else {
              window.tinycolor = tinycolor2;
            }
          })(Math);
        })(tinycolor);
        var tinyColor = tinycolor.exports;
        var combineRegExp = function combineRegExp2(regexpList, flags) {
          var source = "";
          for (var i2 = 0; i2 < regexpList.length; i2++) {
            if (typeof regexpList[i2] === "string") {
              source += regexpList[i2];
            } else {
              source += regexpList[i2].source;
            }
          }
          return new RegExp(source, flags);
        };
        var generateRegExp = function generateRegExp2() {
          var searchFlags = "gi";
          var rAngle = /(?:[+-]?\d*\.?\d+)(?:deg|grad|rad|turn)/;
          var rSideCornerCapture = /to\s+((?:(?:left|right|top|bottom)(?:\s+(?:top|bottom|left|right))?))/;
          var rComma = /\s*,\s*/;
          var rColorHex = /#(?:[a-f0-9]{6}|[a-f0-9]{3})/;
          var rDigits3 = /\(\s*(?:\d{1,3}\s*,\s*){2}\d{1,3}\s*\)/;
          var rDigits4 = /\(\s*(?:\d{1,3}\s*,\s*){2}\d{1,3}\s*,\s*\d*\.?\d+\)/;
          var rValue = /(?:[+-]?\d*\.?\d+)(?:%|[a-z]+)?/;
          var rKeyword = /[_a-z-][_a-z0-9-]*/;
          var rColor = combineRegExp(["(?:", rColorHex, "|", "(?:rgb|hsl)", rDigits3, "|", "(?:rgba|hsla)", rDigits4, "|", rKeyword, ")"], "");
          var rColorStop = combineRegExp([rColor, "(?:\\s+", rValue, "(?:\\s+", rValue, ")?)?"], "");
          var rColorStopList = combineRegExp(["(?:", rColorStop, rComma, ")*", rColorStop], "");
          var rLineCapture = combineRegExp(["(?:(", rAngle, ")|", rSideCornerCapture, ")"], "");
          var rGradientSearch = combineRegExp(["(?:(", rLineCapture, ")", rComma, ")?(", rColorStopList, ")"], searchFlags);
          var rColorStopSearch = combineRegExp(["\\s*(", rColor, ")", "(?:\\s+", "(", rValue, "))?", "(?:", rComma, "\\s*)?"], searchFlags);
          return {
            gradientSearch: rGradientSearch,
            colorStopSearch: rColorStopSearch
          };
        };
        var parseGradient = function parseGradient2(regExpLib, input) {
          var result;
          var matchColorStop;
          var stopResult;
          regExpLib.gradientSearch.lastIndex = 0;
          var matchGradient = regExpLib.gradientSearch.exec(input);
          if (matchGradient !== null) {
            result = {
              original: matchGradient[0],
              colorStopList: []
            };
            if (matchGradient[1]) {
              result.line = matchGradient[1];
            }
            if (matchGradient[2]) {
              result.angle = matchGradient[2];
            }
            if (matchGradient[3]) {
              result.sideCorner = matchGradient[3];
            }
            regExpLib.colorStopSearch.lastIndex = 0;
            matchColorStop = regExpLib.colorStopSearch.exec(matchGradient[4]);
            while (matchColorStop !== null) {
              stopResult = {
                color: matchColorStop[1]
              };
              if (matchColorStop[2]) {
                stopResult.position = matchColorStop[2];
              }
              result.colorStopList.push(stopResult);
              matchColorStop = regExpLib.colorStopSearch.exec(matchGradient[4]);
            }
          }
          return result;
        };
        var REGEXP_LIB = generateRegExp();
        var REG_GRADIENT = /.*gradient\s*\(((?:\([^)]*\)|[^)(]*)*)\)/gim;
        var isGradientColor = function isGradientColor2(input) {
          REG_GRADIENT.lastIndex = 0;
          return REG_GRADIENT.exec(input);
        };
        var sideCornerDegreeMap = {
          top: 0,
          right: 90,
          bottom: 180,
          left: 270,
          "top left": 225,
          "left top": 225,
          "top right": 135,
          "right top": 135,
          "bottom left": 315,
          "left bottom": 315,
          "bottom right": 45,
          "right bottom": 45
        };
        var parseGradientString = function parseGradientString2(input) {
          var match = isGradientColor(input);
          if (!match) {
            return false;
          }
          var gradientColors = {
            points: [],
            degree: 0
          };
          var result = parseGradient(REGEXP_LIB, match[1]);
          if (result.original.trim() !== match[1].trim()) {
            return false;
          }
          var points = result.colorStopList.map(function(_ref) {
            var color = _ref.color, position = _ref.position;
            var point = /* @__PURE__ */ Object.create(null);
            point.color = tinyColor(color).toRgbString();
            point.left = parseFloat(position);
            return point;
          });
          gradientColors.points = points;
          var degree = parseInt(result.angle, 10);
          if (Number.isNaN(degree)) {
            degree = sideCornerDegreeMap[result.sideCorner] || 90;
          }
          gradientColors.degree = degree;
          return gradientColors;
        };
        function ownKeys$R(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$Q(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$R(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$R(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var mathRound = Math.round;
        var hsv2rgba = function hsv2rgba2(states) {
          return tinyColor(states).toRgb();
        };
        var hsv2hsva = function hsv2hsva2(states) {
          return tinyColor(states).toHsv();
        };
        var hsv2hsla = function hsv2hsla2(states) {
          return tinyColor(states).toHsl();
        };
        var gradientColors2string = function gradientColors2string2(object) {
          var points = object.points, degree = object.degree;
          var colorsStop = points.sort(function(pA, pB) {
            return pA.left - pB.left;
          }).map(function(p) {
            return "".concat(p.color, " ").concat(Math.round(p.left * 100) / 100, "%");
          });
          return "linear-gradient(".concat(degree, "deg,").concat(colorsStop.join(","), ")");
        };
        var genId = function genId2() {
          return (1 + Math.random() * 4294967295).toString(16);
        };
        var genGradientPoint = function genGradientPoint2(left2, color) {
          return {
            id: genId(),
            left: left2,
            color
          };
        };
        var Color = /* @__PURE__ */ function() {
          function Color2(input) {
            _classCallCheck(this, Color2);
            _defineProperty$3(this, "states", {
              s: 100,
              v: 100,
              h: 100,
              a: 1
            });
            _defineProperty$3(this, "originColor", void 0);
            _defineProperty$3(this, "isGradient", void 0);
            _defineProperty$3(this, "gradientStates", {
              colors: [],
              degree: 0,
              selectedId: null,
              css: ""
            });
            this.update(input);
          }
          _createClass(Color2, [{
            key: "update",
            value: function update(input) {
              if (input === this.originColor) {
                return;
              }
              this.originColor = input;
              this.isGradient = false;
              var gradientColors = parseGradientString(input);
              var colorInput = input;
              if (gradientColors) {
                var _points$, _this$gradientSelecte;
                this.isGradient = true;
                var object = gradientColors;
                var points = object.points.map(function(c) {
                  return genGradientPoint(c.left, c.color);
                });
                this.gradientStates = {
                  colors: points,
                  degree: object.degree,
                  selectedId: ((_points$ = points[0]) === null || _points$ === void 0 ? void 0 : _points$.id) || null
                };
                this.gradientStates.css = this.linearGradient;
                colorInput = (_this$gradientSelecte = this.gradientSelectedPoint) === null || _this$gradientSelecte === void 0 ? void 0 : _this$gradientSelecte.color;
              }
              this.updateStates(colorInput);
            }
          }, {
            key: "saturation",
            get: function get2() {
              return this.states.s;
            },
            set: function set2(value) {
              this.states.s = Math.max(0, Math.min(100, value));
              this.updateCurrentGradientColor();
            }
          }, {
            key: "value",
            get: function get2() {
              return this.states.v;
            },
            set: function set2(value) {
              this.states.v = Math.max(0, Math.min(100, value));
              this.updateCurrentGradientColor();
            }
          }, {
            key: "hue",
            get: function get2() {
              return this.states.h;
            },
            set: function set2(value) {
              this.states.h = Math.max(0, Math.min(360, value));
              this.updateCurrentGradientColor();
            }
          }, {
            key: "alpha",
            get: function get2() {
              return this.states.a;
            },
            set: function set2(value) {
              this.states.a = Math.max(0, Math.min(1, Math.round(value * 100) / 100));
              this.updateCurrentGradientColor();
            }
          }, {
            key: "rgb",
            get: function get2() {
              var _hsv2rgba = hsv2rgba(this.states), r = _hsv2rgba.r, g = _hsv2rgba.g, b2 = _hsv2rgba.b;
              return "rgb(".concat(mathRound(r), ", ").concat(mathRound(g), ", ").concat(mathRound(b2), ")");
            }
          }, {
            key: "rgba",
            get: function get2() {
              var _hsv2rgba2 = hsv2rgba(this.states), r = _hsv2rgba2.r, g = _hsv2rgba2.g, b2 = _hsv2rgba2.b, a = _hsv2rgba2.a;
              return "rgba(".concat(mathRound(r), ", ").concat(mathRound(g), ", ").concat(mathRound(b2), ", ").concat(a, ")");
            }
          }, {
            key: "hsv",
            get: function get2() {
              var _this$getHsva = this.getHsva(), h = _this$getHsva.h, s = _this$getHsva.s, v = _this$getHsva.v;
              return "hsv(".concat(h, ", ").concat(s, "%, ").concat(v, "%)");
            }
          }, {
            key: "hsva",
            get: function get2() {
              var _this$getHsva2 = this.getHsva(), h = _this$getHsva2.h, s = _this$getHsva2.s, v = _this$getHsva2.v, a = _this$getHsva2.a;
              return "hsva(".concat(h, ", ").concat(s, "%, ").concat(v, "%, ").concat(a, ")");
            }
          }, {
            key: "hsl",
            get: function get2() {
              var _this$getHsla = this.getHsla(), h = _this$getHsla.h, s = _this$getHsla.s, l = _this$getHsla.l;
              return "hsl(".concat(h, ", ").concat(s, "%, ").concat(l, "%)");
            }
          }, {
            key: "hsla",
            get: function get2() {
              var _this$getHsla2 = this.getHsla(), h = _this$getHsla2.h, s = _this$getHsla2.s, l = _this$getHsla2.l, a = _this$getHsla2.a;
              return "hsla(".concat(h, ", ").concat(s, "%, ").concat(l, "%, ").concat(a, ")");
            }
          }, {
            key: "hex",
            get: function get2() {
              return tinyColor(this.states).toHexString();
            }
          }, {
            key: "hex8",
            get: function get2() {
              return tinyColor(this.states).toHex8String();
            }
          }, {
            key: "cmyk",
            get: function get2() {
              var _this$getCmyk = this.getCmyk(), c = _this$getCmyk.c, m = _this$getCmyk.m, y = _this$getCmyk.y, k = _this$getCmyk.k;
              return "cmyk(".concat(c, ", ").concat(m, ", ").concat(y, ", ").concat(k, ")");
            }
          }, {
            key: "css",
            get: function get2() {
              if (this.isGradient) {
                return this.linearGradient;
              }
              return this.rgba;
            }
          }, {
            key: "linearGradient",
            get: function get2() {
              var gradientColors = this.gradientColors, gradientDegree = this.gradientDegree;
              return gradientColors2string({
                points: gradientColors,
                degree: gradientDegree
              });
            }
          }, {
            key: "gradientColors",
            get: function get2() {
              return this.gradientStates.colors;
            },
            set: function set2(colors) {
              this.gradientStates.colors = colors;
              this.gradientStates.css = this.linearGradient;
            }
          }, {
            key: "gradientSelectedId",
            get: function get2() {
              return this.gradientStates.selectedId;
            },
            set: function set2(id2) {
              var _this$gradientSelecte2;
              if (id2 === this.gradientSelectedId) {
                return;
              }
              this.gradientStates.selectedId = id2;
              this.updateStates((_this$gradientSelecte2 = this.gradientSelectedPoint) === null || _this$gradientSelecte2 === void 0 ? void 0 : _this$gradientSelecte2.color);
            }
          }, {
            key: "gradientDegree",
            get: function get2() {
              return this.gradientStates.degree;
            },
            set: function set2(degree) {
              this.gradientStates.degree = Math.max(0, Math.min(360, degree));
              this.gradientStates.css = this.linearGradient;
            }
          }, {
            key: "gradientSelectedPoint",
            get: function get2() {
              var gradientColors = this.gradientColors, gradientSelectedId = this.gradientSelectedId;
              return gradientColors.find(function(color) {
                return color.id === gradientSelectedId;
              });
            }
          }, {
            key: "getFormatsColorMap",
            value: function getFormatsColorMap() {
              return {
                HEX: this.hex,
                CMYK: this.cmyk,
                RGB: this.rgb,
                RGBA: this.rgba,
                HSL: this.hsl,
                HSLA: this.hsla,
                HSV: this.hsv,
                HSVA: this.hsva,
                CSS: this.css
              };
            }
          }, {
            key: "updateCurrentGradientColor",
            value: function updateCurrentGradientColor() {
              var isGradient = this.isGradient, gradientColors = this.gradientColors, gradientSelectedId = this.gradientSelectedId;
              var length = gradientColors.length;
              var current = this.gradientSelectedPoint;
              if (!isGradient || length === 0 || !current) {
                return false;
              }
              var index2 = gradientColors.findIndex(function(color) {
                return color.id === gradientSelectedId;
              });
              var newColor = _objectSpread$Q(_objectSpread$Q({}, current), {}, {
                color: this.rgba
              });
              gradientColors.splice(index2, 1, newColor);
              this.gradientColors = gradientColors;
              return this;
            }
          }, {
            key: "updateStates",
            value: function updateStates(input) {
              var color = tinyColor(cmykInputToColor(input));
              var hsva = color.toHsv();
              this.states = hsva;
            }
          }, {
            key: "getRgba",
            value: function getRgba() {
              var _hsv2rgba3 = hsv2rgba(this.states), r = _hsv2rgba3.r, g = _hsv2rgba3.g, b2 = _hsv2rgba3.b, a = _hsv2rgba3.a;
              return {
                r: mathRound(r),
                g: mathRound(g),
                b: mathRound(b2),
                a
              };
            }
          }, {
            key: "getCmyk",
            value: function getCmyk() {
              var _this$getRgba = this.getRgba(), r = _this$getRgba.r, g = _this$getRgba.g, b2 = _this$getRgba.b;
              var _rgb2cmyk = rgb2cmyk(r, g, b2), _rgb2cmyk2 = _slicedToArray(_rgb2cmyk, 4), c = _rgb2cmyk2[0], m = _rgb2cmyk2[1], y = _rgb2cmyk2[2], k = _rgb2cmyk2[3];
              return {
                c: mathRound(c * 100),
                m: mathRound(m * 100),
                y: mathRound(y * 100),
                k: mathRound(k * 100)
              };
            }
          }, {
            key: "getHsva",
            value: function getHsva() {
              var _hsv2hsva = hsv2hsva(this.states), h = _hsv2hsva.h, s = _hsv2hsva.s, v = _hsv2hsva.v, a = _hsv2hsva.a;
              h = mathRound(h);
              s = mathRound(s * 100);
              v = mathRound(v * 100);
              a *= 1;
              return {
                h,
                s,
                v,
                a
              };
            }
          }, {
            key: "getHsla",
            value: function getHsla() {
              var _hsv2hsla = hsv2hsla(this.states), h = _hsv2hsla.h, s = _hsv2hsla.s, l = _hsv2hsla.l, a = _hsv2hsla.a;
              h = mathRound(h);
              s = mathRound(s * 100);
              l = mathRound(l * 100);
              a *= 1;
              return {
                h,
                s,
                l,
                a
              };
            }
          }, {
            key: "equals",
            value: function equals(color) {
              return tinyColor.equals(this.rgba, color);
            }
          }], [{
            key: "isValid",
            value: function isValid(color) {
              if (parseGradientString(color)) {
                return true;
              }
              return tinyColor(color).isValid();
            }
          }, {
            key: "hsva2color",
            value: function hsva2color(h, s, v, a) {
              return tinyColor({
                h,
                s,
                v,
                a
              }).toHsvString();
            }
          }, {
            key: "hsla2color",
            value: function hsla2color(h, s, l, a) {
              return tinyColor({
                h,
                s,
                l,
                a
              }).toHslString();
            }
          }, {
            key: "rgba2color",
            value: function rgba2color(r, g, b2, a) {
              return tinyColor({
                r,
                g,
                b: b2,
                a
              }).toHsvString();
            }
          }, {
            key: "hex2color",
            value: function hex2color(hex, a) {
              var color = tinyColor(hex);
              color.setAlpha(a);
              return color.toHexString();
            }
          }, {
            key: "object2color",
            value: function object2color(object, format2) {
              if (format2 === "CMYK") {
                var c = object.c, m = object.m, y = object.y, k = object.k;
                return "cmyk(".concat(c, ", ").concat(m, ", ").concat(y, ", ").concat(k, ")");
              }
              var color = tinyColor(object, {
                format: format2
              });
              return color.toRgbString();
            }
          }]);
          return Color2;
        }();
        _defineProperty$3(Color, "isGradientColor", function(input) {
          return !!isGradientColor(input);
        });
        _defineProperty$3(Color, "compare", function(color1, color2) {
          var isGradientColor1 = Color.isGradientColor(color1);
          var isGradientColor2 = Color.isGradientColor(color2);
          if (isGradientColor1 && isGradientColor2) {
            var gradientColor1 = gradientColors2string(parseGradientString(color1));
            var gradientColor2 = gradientColors2string(parseGradientString(color2));
            return gradientColor1 === gradientColor2;
          }
          if (!isGradientColor1 && !isGradientColor2) {
            return tinyColor.equals(color1, color2);
          }
          return false;
        });
        var COLOR_OBJECT_OUTPUT_KEYS = ["alpha", "css", "hex", "hex8", "hsl", "hsla", "hsv", "hsva", "rgb", "rgba", "saturation", "value", "isGradient"];
        var getColorObject = function getColorObject2(color) {
          if (!color) {
            return null;
          }
          var colorObject = /* @__PURE__ */ Object.create(null);
          COLOR_OBJECT_OUTPUT_KEYS.forEach(function(key) {
            return colorObject[key] = color[key];
          });
          if (color.isGradient) {
            colorObject.linearGradient = color.linearGradient;
          }
          return colorObject;
        };
        function ownKeys$Q(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$P(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$Q(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Q(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _classPrivateMethodInitSpec(obj, privateSet) {
          _checkPrivateRedeclaration(obj, privateSet);
          privateSet.add(obj);
        }
        function _checkPrivateRedeclaration(obj, privateCollection) {
          if (privateCollection.has(obj)) {
            throw new TypeError("Cannot initialize the same private elements twice on an object");
          }
        }
        function _classPrivateMethodGet(receiver, privateSet, fn) {
          if (!privateSet.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
          }
          return fn;
        }
        var defaultsOptions = {
          start: function start2(coordinate, event) {
          },
          drag: function drag(coordinate, event) {
          },
          end: function end2(coordinate, event) {
          }
        };
        var _dragStart = /* @__PURE__ */ new WeakSet();
        var _drag = /* @__PURE__ */ new WeakSet();
        var _dragEnd = /* @__PURE__ */ new WeakSet();
        var _getCoordinate = /* @__PURE__ */ new WeakSet();
        var Draggable = /* @__PURE__ */ function() {
          function Draggable2(el, options) {
            _classCallCheck(this, Draggable2);
            _classPrivateMethodInitSpec(this, _getCoordinate);
            _classPrivateMethodInitSpec(this, _dragEnd);
            _classPrivateMethodInitSpec(this, _drag);
            _classPrivateMethodInitSpec(this, _dragStart);
            _defineProperty$3(this, "dragging", false);
            _defineProperty$3(this, "$el", void 0);
            _defineProperty$3(this, "props", void 0);
            _defineProperty$3(this, "handles", void 0);
            this.$el = el;
            this.props = _objectSpread$P(_objectSpread$P({}, defaultsOptions), options);
            this.handles = {
              start: _classPrivateMethodGet(this, _dragStart, _dragStart2).bind(this),
              drag: _classPrivateMethodGet(this, _drag, _drag2).bind(this),
              end: _classPrivateMethodGet(this, _dragEnd, _dragEnd2).bind(this)
            };
            this.$el.addEventListener("mousedown", this.handles.start, false);
          }
          _createClass(Draggable2, [{
            key: "destroy",
            value: function destroy() {
              this.$el.removeEventListener("mousedown", this.handles.start, false);
              window.removeEventListener("mousemove", this.handles.drag, false);
              window.removeEventListener("mouseup", this.handles.end, false);
              window.removeEventListener("contextmenu", this.handles.end, false);
            }
          }]);
          return Draggable2;
        }();
        function _dragStart2(event) {
          if (this.dragging) {
            return;
          }
          window.addEventListener("mousemove", this.handles.drag, false);
          window.addEventListener("mouseup", this.handles.end, false);
          window.addEventListener("contextmenu", this.handles.end, false);
          this.dragging = true;
          this.props.start(_classPrivateMethodGet(this, _getCoordinate, _getCoordinate2).call(this, event), event);
        }
        function _drag2(event) {
          if (!this.dragging) {
            return;
          }
          this.props.drag(_classPrivateMethodGet(this, _getCoordinate, _getCoordinate2).call(this, event), event);
        }
        function _dragEnd2(event) {
          var _this = this;
          setTimeout(function() {
            _this.dragging = false;
            _this.props.end(_classPrivateMethodGet(_this, _getCoordinate, _getCoordinate2).call(_this, event), event);
          }, 0);
          window.removeEventListener("mousemove", this.handles.drag, false);
          window.removeEventListener("mouseup", this.handles.end, false);
          window.removeEventListener("contextmenu", this.handles.end, false);
        }
        function _getCoordinate2(event) {
          var rect = this.$el.getBoundingClientRect();
          var mouseEvent = event;
          var left2 = mouseEvent.clientX - rect.left;
          var top2 = mouseEvent.clientY - rect.top;
          return {
            y: Math.min(Math.max(0, top2), rect.height),
            x: Math.min(Math.max(0, left2), rect.width)
          };
        }
        var baseProps = {
          disabled: Boolean,
          color: {
            type: Object
          },
          onChange: {
            type: Function,
            "default": function _default() {
              return function() {
              };
            }
          }
        };
        function ownKeys$P(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$O(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$P(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$P(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var DELETE_KEYS = ["delete", "backspace"];
        var LinearGradient = vue.defineComponent({
          name: "LinearGradient",
          components: {
            TInputNumber: InputNumber
          },
          inheritAttrs: false,
          props: _objectSpread$O({}, baseProps),
          setup: function setup(props2) {
            var baseClassName = useBaseClassName();
            var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
            var statusClassNames = STATUS.value;
            var refSlider = vue.ref(null);
            var sliderRect = vue.reactive({
              left: 0,
              width: GRADIENT_SLIDER_DEFAULT_WIDTH
            });
            var isDragging = vue.ref(false);
            var isMoved = vue.ref(false);
            var degree = vue.ref(props2.color.gradientDegree);
            var selectedId = vue.ref(props2.color.gradientSelectedId);
            var colors = vue.ref(cloneDeep_1(props2.color.gradientColors));
            vue.watch(function() {
              return props2.color.gradientDegree;
            }, function(value) {
              return degree.value = value;
            });
            vue.watch(function() {
              return props2.color.gradientSelectedId;
            }, function(value) {
              return selectedId.value = value;
            });
            vue.watch(function() {
              return props2.color.gradientColors;
            }, function(value) {
              colors.value = cloneDeep_1(value);
            }, {
              deep: true
            });
            var handleChange = function handleChange2(key, payload, addUsedColor) {
              if (props2.disabled) {
                return;
              }
              props2.onChange({
                key,
                payload,
                addUsedColor
              });
            };
            var handleDegreeChange = function handleDegreeChange2(value) {
              if (props2.disabled || value === props2.color.gradientDegree) {
                return;
              }
              degree.value = value;
              handleChange("degree", value, true);
            };
            var handleSelectedIdChange = function handleSelectedIdChange2(value) {
              if (props2.disabled) {
                return;
              }
              selectedId.value = value;
              handleChange("selectedId", value);
            };
            var handleColorsChange = function handleColorsChange2(value, isEnded) {
              if (props2.disabled) {
                return;
              }
              colors.value = value;
              handleChange("colors", value, isEnded);
            };
            var updateActiveThumbLeft = function updateActiveThumbLeft2(left2) {
              var index2 = colors.value.findIndex(function(c) {
                return c.id === selectedId.value;
              });
              if (index2 === -1) {
                return;
              }
              var point = colors.value[index2];
              left2 = Math.max(0, Math.min(sliderRect.width, left2));
              var percentLeft = left2 / sliderRect.width * 100;
              colors.value.splice(index2, 1, {
                color: point.color,
                left: percentLeft,
                id: point.id
              });
              handleColorsChange(colors.value);
            };
            var handleStart = function handleStart2(id2, e) {
              var rect = refSlider.value.getBoundingClientRect();
              sliderRect.left = rect.left;
              sliderRect.width = rect.width || GRADIENT_SLIDER_DEFAULT_WIDTH;
              if (isDragging.value || props2.disabled) {
                return;
              }
              isMoved.value = false;
              isDragging.value = true;
              e.preventDefault();
              e.stopPropagation();
              handleSelectedIdChange(id2);
              refSlider.value.focus();
              window.addEventListener("mousemove", handleMove, false);
              window.addEventListener("mouseup", handleEnd, false);
              window.addEventListener("contextmenu", handleEnd, false);
            };
            var handleMove = function handleMove2(e) {
              if (!isDragging.value || props2.disabled) {
                return;
              }
              var left2 = e.clientX - sliderRect.left;
              isMoved.value = true;
              updateActiveThumbLeft(left2);
            };
            var handleEnd = function handleEnd2() {
              if (!isDragging.value) {
                return;
              }
              setTimeout(function() {
                isDragging.value = false;
              }, 0);
              if (isMoved.value) {
                handleColorsChange(colors.value, true);
                isMoved.value = false;
              }
              window.removeEventListener("mousemove", handleMove, false);
              window.removeEventListener("mouseup", handleEnd2, false);
              window.removeEventListener("contextmenu", handleEnd2, false);
            };
            var handleKeyup = function handleKeyup2(e) {
              if (props2.disabled) {
                return;
              }
              var points = colors.value;
              var pos = points.findIndex(function(c) {
                return c.id === selectedId.value;
              });
              var length = points.length;
              if (DELETE_KEYS.includes(e.key.toLocaleLowerCase()) && length > 2 && pos >= 0 && pos <= length - 1) {
                points.splice(pos, 1);
                if (!points[pos]) {
                  pos = points[pos + 1] ? pos + 1 : points[pos - 1] ? pos - 1 : 0;
                }
                var current = points[pos];
                handleColorsChange(points, true);
                handleSelectedIdChange(current === null || current === void 0 ? void 0 : current.id);
              }
            };
            var handleThumbBarClick = function handleThumbBarClick2(e) {
              if (props2.disabled) {
                return;
              }
              var left2 = e.clientX - sliderRect.left;
              left2 = Math.max(0, Math.min(sliderRect.width, left2));
              var percentLeft = left2 / sliderRect.width * 100;
              var newPoint = genGradientPoint(percentLeft, props2.color.rgba);
              colors.value.push(newPoint);
              handleColorsChange(colors.value, true);
              handleSelectedIdChange(newPoint.id);
            };
            vue.onMounted(function() {
              var rect = refSlider.value.getBoundingClientRect();
              sliderRect.left = rect.left;
              sliderRect.width = rect.width || GRADIENT_SLIDER_DEFAULT_WIDTH;
            });
            vue.onBeforeUnmount(function() {
              window.removeEventListener("mousemove", handleMove, false);
              window.removeEventListener("mouseup", handleEnd, false);
              window.removeEventListener("contextmenu", handleEnd, false);
            });
            return {
              baseClassName,
              statusClassNames,
              refSlider,
              degree,
              selectedId,
              colors,
              handleDegreeChange,
              handleStart,
              handleMove,
              handleEnd,
              handleKeyup,
              handleThumbBarClick
            };
          },
          render: function render() {
            var _this = this;
            var _this$color = this.color, linearGradient = _this$color.linearGradient, gradientColors = _this$color.gradientColors;
            var colors = this.colors, selectedId = this.selectedId, degree = this.degree, disabled = this.disabled, baseClassName = this.baseClassName, statusClassNames = this.statusClassNames;
            var thumbBackground = gradientColors2string({
              points: gradientColors,
              degree: 90
            });
            return vue.createVNode("div", {
              "class": "".concat(baseClassName, "__gradient")
            }, [vue.createVNode("div", {
              "class": "".concat(baseClassName, "__gradient-slider")
            }, [vue.createVNode("div", {
              "class": ["".concat(baseClassName, "__slider"), "".concat(baseClassName, "--bg-alpha")],
              "onKeyup": this.handleKeyup,
              "tabindex": 0,
              "ref": "refSlider"
            }, [vue.createVNode("ul", {
              "class": "gradient-thumbs",
              "onClick": this.handleThumbBarClick,
              "style": {
                background: thumbBackground
              }
            }, [colors.map(function(t) {
              var left2 = "".concat(Math.round(t.left * 100) / 100, "%");
              return vue.createVNode("li", {
                "class": ["".concat(baseClassName, "__thumb"), "gradient-thumbs__item", selectedId === t.id ? statusClassNames.active : ""],
                "key": t.id,
                "title": "".concat(t.color, " ").concat(left2),
                "style": {
                  color: t.color,
                  left: left2
                },
                "onClick": function onClick(e) {
                  return e.stopPropagation();
                },
                "onMousedown": function onMousedown(e) {
                  return _this.handleStart(t.id, e);
                }
              }, [vue.createVNode("span", {
                "class": ["gradient-thumbs__item-inner", "".concat(baseClassName, "--bg-alpha")]
              }, null)]);
            })])])]), vue.createVNode("div", {
              "class": "".concat(baseClassName, "__gradient-degree"),
              "title": "".concat(degree, "deg")
            }, [vue.createVNode(vue.resolveComponent("t-input-number"), {
              "theme": "normal",
              "min": 0,
              "max": 360,
              "step": 1,
              "format": function format2(value) {
                return "".concat(value, "\xB0");
              },
              "modelValue": _this.degree,
              "onUpdate:modelValue": function onUpdateModelValue($event) {
                return _this.degree = $event;
              },
              "onBlur": this.handleDegreeChange,
              "onEnter": this.handleDegreeChange,
              "disabled": disabled
            }, null)]), vue.createVNode("div", {
              "class": ["".concat(baseClassName, "__gradient-preview"), "".concat(baseClassName, "--bg-alpha")]
            }, [vue.createVNode("span", {
              "class": "preview-inner",
              "style": {
                background: linearGradient
              }
            }, null)])]);
          }
        });
        function ownKeys$O(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$N(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$O(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$O(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var SaturationPanel = vue.defineComponent({
          name: "SaturationPanel",
          components: {
            TSelect: Select,
            TOption: Option
          },
          props: _objectSpread$N({}, baseProps),
          setup: function setup(props2) {
            var baseClassName = useBaseClassName();
            var refPanel = vue.ref(null);
            var refThumb = vue.ref(null);
            var dragInstance = vue.ref(null);
            var panelRect = vue.reactive({
              width: SATURATION_PANEL_DEFAULT_WIDTH,
              height: SATURATION_PANEL_DEFAULT_HEIGHT
            });
            var styles = vue.computed(function() {
              var _props$color = props2.color, saturation = _props$color.saturation, value = _props$color.value;
              var width = panelRect.width, height = panelRect.height;
              var top2 = Math.round((1 - value) * height);
              var left2 = Math.round(saturation * width);
              return {
                color: props2.color.rgb,
                left: "".concat(left2, "px"),
                top: "".concat(top2, "px")
              };
            });
            var getSaturationAndValueByCoordinate = function getSaturationAndValueByCoordinate2(coordinate) {
              var width = panelRect.width, height = panelRect.height;
              var x = coordinate.x, y = coordinate.y;
              var saturation = Math.round(x / width * 100);
              var value = Math.round((1 - y / height) * 100);
              return {
                saturation,
                value
              };
            };
            var handleDrag = function handleDrag2(coordinate, isEnded) {
              if (props2.disabled) {
                return;
              }
              var _getSaturationAndValu = getSaturationAndValueByCoordinate(coordinate), saturation = _getSaturationAndValu.saturation, value = _getSaturationAndValu.value;
              props2.onChange({
                saturation: saturation / 100,
                value: value / 100,
                addUsedColor: isEnded
              });
            };
            var handleDragEnd = function handleDragEnd2(coordinate) {
              if (props2.disabled) {
                return;
              }
              vue.nextTick(function() {
                handleDrag(coordinate, true);
              });
            };
            var panelBackground = vue.computed(function() {
              return "hsl(".concat(props2.color.hue, ", 100%, 50%)");
            });
            vue.onMounted(function() {
              panelRect.width = refPanel.value.offsetWidth || SATURATION_PANEL_DEFAULT_WIDTH;
              panelRect.height = refPanel.value.offsetHeight || SATURATION_PANEL_DEFAULT_HEIGHT;
              dragInstance.value = new Draggable(refPanel.value, {
                start: function start2() {
                  panelRect.width = refPanel.value.offsetWidth;
                  panelRect.height = refPanel.value.offsetHeight;
                },
                drag: function drag(coordinate) {
                  handleDrag(coordinate);
                },
                end: handleDragEnd
              });
            });
            vue.onBeforeUnmount(function() {
              dragInstance.value.destroy();
            });
            return {
              baseClassName,
              refThumb,
              refPanel,
              styles,
              panelBackground
            };
          },
          render: function render() {
            var baseClassName = this.baseClassName, styles = this.styles, panelBackground = this.panelBackground;
            return vue.createVNode("div", {
              "class": ["".concat(baseClassName, "__saturation")],
              "ref": "refPanel",
              "style": {
                background: panelBackground
              }
            }, [vue.createVNode("span", {
              "class": ["".concat(baseClassName, "__thumb")],
              "role": "slider",
              "tabindex": 0,
              "ref": "refThumb",
              "style": styles
            }, null)]);
          }
        });
        function ownKeys$N(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$M(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$N(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$N(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var ColorSlider = vue.defineComponent({
          name: "ColorSlider",
          components: {
            TSelect: Select,
            TOption: Option
          },
          props: _objectSpread$M(_objectSpread$M({}, baseProps), {}, {
            className: {
              type: String,
              "default": ""
            },
            value: {
              type: Number,
              "default": 0
            },
            maxValue: {
              type: Number,
              "default": 360
            },
            railStyle: {
              type: Object
            }
          }),
          setup: function setup(props2) {
            var baseClassName = useBaseClassName();
            var refPanel = vue.ref(null);
            var refThumb = vue.ref(null);
            var dragInstance = vue.ref(null);
            var panelRect = vue.reactive({
              width: SLIDER_DEFAULT_WIDTH
            });
            var styles = vue.computed(function() {
              var width = panelRect.width;
              if (!width) {
                return;
              }
              var left2 = Math.round(props2.value / props2.maxValue * width);
              return {
                left: "".concat(left2, "px"),
                color: props2.color.rgb
              };
            });
            var handleDrag = function handleDrag2(coordinate, isEnded) {
              if (props2.disabled) {
                return;
              }
              var width = panelRect.width;
              var x = coordinate.x;
              var value = Math.round(x / width * props2.maxValue * 100) / 100;
              props2.onChange(value, isEnded);
            };
            var handleDragEnd = function handleDragEnd2(coordinate) {
              if (props2.disabled) {
                return;
              }
              handleDrag(coordinate, true);
            };
            vue.onMounted(function() {
              panelRect.width = refPanel.value.offsetWidth || SLIDER_DEFAULT_WIDTH;
              dragInstance.value = new Draggable(refPanel.value, {
                start: function start2() {
                  panelRect.width = refPanel.value.offsetWidth;
                },
                drag: function drag(coordinate) {
                  handleDrag(coordinate);
                },
                end: handleDragEnd
              });
            });
            vue.onBeforeUnmount(function() {
              dragInstance.value.destroy();
            });
            return {
              baseClassName,
              refThumb,
              refPanel,
              styles
            };
          },
          render: function render() {
            var baseClassName = this.baseClassName, className = this.className, railStyle = this.railStyle, styles = this.styles;
            return vue.createVNode("div", {
              "class": ["".concat(baseClassName, "__slider"), className],
              "ref": "refPanel"
            }, [vue.createVNode("div", {
              "class": "".concat(baseClassName, "__rail"),
              "style": railStyle
            }, null), vue.createVNode("span", {
              "class": ["".concat(baseClassName, "__thumb")],
              "role": "slider",
              "tabindex": 0,
              "ref": "refThumb",
              "style": styles
            }, null)]);
          }
        });
        function ownKeys$M(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$L(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$M(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$M(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var HueSlider = vue.defineComponent({
          name: "HueSlider",
          components: {
            ColorSlider
          },
          inheritAttrs: false,
          props: _objectSpread$L({}, baseProps),
          setup: function setup() {
            var baseClassName = useBaseClassName();
            return {
              baseClassName
            };
          },
          render: function render() {
            return vue.createVNode(vue.resolveComponent("color-slider"), {
              "className": "".concat(this.baseClassName, "__hue"),
              "color": this.color,
              "value": this.color.hue,
              "onChange": this.onChange,
              "disabled": this.disabled
            }, null);
          }
        });
        var AlphaSlider = vue.defineComponent({
          name: "AlphaSlider",
          components: {
            ColorSlider
          },
          inheritAttrs: false,
          props: {
            color: {
              type: Object
            },
            disabled: {
              type: Boolean,
              "default": false
            },
            onChange: {
              type: Function,
              "default": function _default() {
                return function() {
                };
              }
            }
          },
          setup: function setup(props2) {
            var baseClassName = useBaseClassName();
            var handleChange = function handleChange2(v, isDragEnd) {
              props2.onChange(v / 100, isDragEnd);
            };
            var railStyle = vue.computed(function() {
              return {
                background: "linear-gradient(to right, rgba(0, 0, 0, 0), ".concat(props2.color.rgb, ")")
              };
            });
            return {
              baseClassName,
              railStyle,
              handleChange
            };
          },
          render: function render() {
            var baseClassName = this.baseClassName;
            return vue.createVNode(vue.resolveComponent("color-slider"), {
              "class": ["".concat(baseClassName, "__alpha"), "".concat(baseClassName, "--bg-alpha")],
              "color": this.color,
              "value": this.color.alpha * 100,
              "onChange": this.handleChange,
              "rail-style": this.railStyle,
              "max-value": 100,
              "disabled": this.disabled
            }, null);
          }
        });
        var createCompounder = _createCompounder;
        var upperCase = createCompounder(function(result, word, index2) {
          return result + (index2 ? " " : "") + word.toUpperCase();
        });
        var upperCase_1 = upperCase;
        var debounce = debounce_1, isObject$1 = isObject_1;
        var FUNC_ERROR_TEXT = "Expected a function";
        function throttle$1(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (isObject$1(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        var throttle_1 = throttle$1;
        var FORMAT_INPUT_CONFIG = {
          RGB: [{
            key: "r",
            min: 0,
            max: 255,
            type: "inputNumber"
          }, {
            key: "g",
            min: 0,
            max: 255,
            type: "inputNumber"
          }, {
            key: "b",
            min: 0,
            max: 255,
            type: "inputNumber"
          }],
          HSV: [{
            key: "h",
            min: 0,
            max: 360,
            type: "inputNumber"
          }, {
            key: "s",
            min: 0,
            max: 100,
            type: "inputNumber"
          }, {
            key: "v",
            min: 0,
            max: 100,
            type: "inputNumber"
          }],
          HSL: [{
            key: "h",
            min: 0,
            max: 360,
            type: "inputNumber"
          }, {
            key: "s",
            min: 0,
            max: 100,
            type: "inputNumber"
          }, {
            key: "l",
            min: 0,
            max: 100,
            type: "inputNumber"
          }],
          CMYK: [{
            key: "c",
            min: 0,
            max: 255,
            type: "inputNumber"
          }, {
            key: "m",
            min: 0,
            max: 255,
            type: "inputNumber"
          }, {
            key: "y",
            min: 0,
            max: 255,
            type: "inputNumber"
          }, {
            key: "k",
            min: 0,
            max: 255,
            type: "inputNumber"
          }],
          CSS: [{
            key: "css",
            type: "input",
            flex: 3
          }],
          HEX: [{
            key: "hex",
            type: "input",
            flex: 3
          }]
        };
        function ownKeys$L(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$K(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$L(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$L(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var FormatInputs = vue.defineComponent({
          name: "FormatInputs",
          components: {
            TSelect: Select,
            TOption: Option,
            TInput: Input,
            TInputNumber: InputNumber
          },
          inheritAttrs: false,
          props: _objectSpread$K(_objectSpread$K({}, props$j), {}, {
            color: {
              type: Object
            },
            onInputChange: {
              type: Function,
              "default": function _default() {
                return function() {
                };
              }
            }
          }),
          setup: function setup(props2) {
            var inputConfigs = vue.computed(function() {
              var configs = _toConsumableArray(FORMAT_INPUT_CONFIG[props2.format]);
              if (props2.enableAlpha) {
                configs.push({
                  type: "inputNumber",
                  key: "a",
                  min: 0,
                  max: 100,
                  format: function format2(value) {
                    return "".concat(value, "%");
                  },
                  flex: 1.15
                });
              }
              return configs;
            });
            var modelValue = vue.reactive({});
            var lastModelValue = vue.reactive({});
            var getFormatColorMap = function getFormatColorMap2(type) {
              var color = props2.color;
              if (type === "encode") {
                return {
                  HSV: color.getHsva(),
                  HSL: color.getHsla(),
                  RGB: color.getRgba(),
                  CMYK: color.getCmyk(),
                  CSS: {
                    css: color.css
                  },
                  HEX: {
                    hex: color.hex
                  }
                };
              }
              return {
                HSV: Color.object2color(modelValue, "HSV"),
                HSL: Color.object2color(modelValue, "HSL"),
                RGB: Color.object2color(modelValue, "RGB"),
                CMYK: Color.object2color(modelValue, "CMYK"),
                CSS: modelValue.css,
                HEX: modelValue.hex
              };
            };
            var updateModelValue = function updateModelValue2() {
              var format2 = props2.format, color = props2.color;
              var values = getFormatColorMap("encode")[format2];
              values.a = Math.round(color.alpha * 100);
              Object.keys(values).forEach(function(key) {
                modelValue[key] = values[key];
                lastModelValue[key] = values[key];
              });
            };
            updateModelValue();
            var throttleUpdate = throttle_1(updateModelValue, 100);
            vue.watch(function() {
              var _props2$color = props2.color, saturation = _props2$color.saturation, hue = _props2$color.hue, value = _props2$color.value, alpha = _props2$color.alpha;
              return [saturation, hue, value, alpha, props2.format];
            }, throttleUpdate);
            var handleChange = function handleChange2(key, v) {
              if (v === lastModelValue[key]) {
                return;
              }
              var value = getFormatColorMap("decode")[props2.format];
              props2.onInputChange(value, modelValue.a / 100, key, v);
            };
            return {
              modelValue,
              inputConfigs,
              handleChange
            };
          },
          render: function render() {
            var _this = this;
            var inputProps = _objectSpread$K({}, this.inputProps || {});
            return vue.createVNode("div", {
              "class": "input-group"
            }, [this.inputConfigs.map(function(config) {
              return vue.createVNode("div", {
                "class": "input-group__item",
                "key": config.key,
                "style": {
                  flex: config.flex || 1
                }
              }, [config.type === "input" ? vue.createVNode(vue.resolveComponent("t-input"), vue.mergeProps(inputProps, {
                "align": "center",
                "disabled": _this.disabled,
                "modelValue": _this.modelValue[config.key],
                "onUpdate:modelValue": function onUpdateModelValue($event) {
                  return _this.modelValue[config.key] = $event;
                },
                "maxlength": _this.format === "HEX" ? 9 : void 0,
                "title": _this.modelValue[config.key],
                "onBlur": function onBlur(v) {
                  return _this.handleChange(config.key, v);
                },
                "onEnter": function onEnter(v) {
                  return _this.handleChange(config.key, v);
                }
              }), null) : vue.createVNode(vue.resolveComponent("t-input-number"), vue.mergeProps(inputProps, {
                "align": "center",
                "disabled": _this.disabled,
                "modelValue": _this.modelValue[config.key],
                "onUpdate:modelValue": function onUpdateModelValue($event) {
                  return _this.modelValue[config.key] = $event;
                },
                "title": _this.modelValue[config.key],
                "min": config.min,
                "max": config.max,
                "step": 1,
                "format": config.format,
                "theme": "normal",
                "onBlur": function onBlur(v) {
                  return _this.handleChange(config.key, v);
                },
                "onEnter": function onEnter(v) {
                  return _this.handleChange(config.key, v);
                }
              }), null)]);
            })]);
          }
        });
        function ownKeys$K(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$J(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$K(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$K(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot$b(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var FormatPanel = vue.defineComponent({
          name: "FormatPanel",
          components: {
            TSelect: Select,
            TInput: Input,
            TOption: Option,
            FormatInputs
          },
          inheritAttrs: false,
          props: _objectSpread$J(_objectSpread$J({}, props$j), {}, {
            color: {
              type: Object
            },
            onModeChange: {
              type: Function,
              "default": function _default() {
                return function() {
                };
              }
            },
            onInputChange: {
              type: Function,
              "default": function _default() {
                return function() {
                };
              }
            }
          }),
          setup: function setup(props2) {
            var baseClassName = useBaseClassName();
            var formatModel = vue.ref(props2.format);
            vue.watch(function() {
              return [props2.format];
            }, function() {
              return formatModel.value = props2.format;
            });
            var handleModeChange = function handleModeChange2(v) {
              formatModel.value = v;
              props2.onModeChange(v);
            };
            return {
              formatModel,
              baseClassName,
              handleModeChange
            };
          },
          render: function render() {
            var _this = this;
            var _slot;
            var formats = _toConsumableArray(FORMATS);
            var baseClassName = this.baseClassName, handleModeChange = this.handleModeChange;
            var newProps = _objectSpread$J(_objectSpread$J({}, this.$props), {}, {
              format: this.formatModel
            });
            var selectInputProps = _objectSpread$J({}, this.selectInputProps || {});
            return vue.createVNode("div", {
              "className": "".concat(baseClassName, "__format")
            }, [vue.createVNode("div", {
              "className": "".concat(baseClassName, "__format--item")
            }, [vue.createVNode(vue.resolveComponent("t-select"), vue.mergeProps(selectInputProps, {
              "popupProps": {
                overlayClassName: "".concat(baseClassName, "__select-options")
              },
              "modelValue": _this.formatModel,
              "onUpdate:modelValue": function onUpdateModelValue($event) {
                return _this.formatModel = $event;
              },
              "onChange": handleModeChange
            }), _isSlot$b(_slot = formats.map(function(item) {
              return vue.createVNode(vue.resolveComponent("t-option"), {
                "key": item,
                "value": item,
                "label": upperCase_1(item),
                "style": {
                  fontSize: "12px"
                }
              }, null);
            })) ? _slot : {
              "default": function _default() {
                return [_slot];
              }
            })]), vue.createVNode("div", {
              "className": "".concat(baseClassName, "__format--item")
            }, [vue.createVNode(vue.resolveComponent("format-inputs"), newProps, null)])]);
          }
        });
        function ownKeys$J(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$I(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$J(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$J(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var SwatchesPanel = vue.defineComponent({
          name: "SwatchesPanel",
          components: {
            TSelect: Select,
            TOption: Option,
            TButton: Button
          },
          props: _objectSpread$I(_objectSpread$I({}, baseProps), {}, {
            colors: {
              type: Array,
              "default": function _default() {
                return [];
              }
            },
            title: {
              type: String,
              "default": "\u7CFB\u7EDF\u8272\u5F69"
            },
            editable: {
              type: Boolean,
              "default": false
            },
            onSetColor: {
              type: Function,
              "default": function _default() {
                return function() {
                };
              }
            },
            handleAddColor: {
              type: Function,
              "default": function _default() {
                return function() {
                };
              }
            }
          }),
          setup: function setup(props2) {
            var baseClassName = useBaseClassName();
            var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
            var statusClassNames = STATUS.value;
            var visiblePopConfirm = vue.ref(false);
            var setVisiblePopConfirm = function setVisiblePopConfirm2(visible) {
              visiblePopConfirm.value = visible;
            };
            var handleClick = function handleClick2(color) {
              return props2.onSetColor(color);
            };
            var isEqualCurrentColor = function isEqualCurrentColor2(color) {
              return Color.compare(color, props2.color.css);
            };
            var selectedColorIndex = vue.computed(function() {
              return props2.colors.findIndex(function(color) {
                return isEqualCurrentColor(color);
              });
            });
            var handleRemoveColor = function handleRemoveColor2() {
              var colors = _toConsumableArray(props2.colors);
              var selectedIndex = selectedColorIndex.value;
              if (selectedIndex > -1) {
                colors.splice(selectedIndex, 1);
              } else {
                colors.length = 0;
              }
              props2.onChange(colors);
              setVisiblePopConfirm(false);
            };
            return {
              baseClassName,
              statusClassNames,
              selectedColorIndex,
              visiblePopConfirm,
              setVisiblePopConfirm,
              handleClick,
              isEqualCurrentColor,
              handleRemoveColor
            };
          },
          render: function render() {
            var _this = this;
            var baseClassName = this.baseClassName, statusClassNames = this.statusClassNames, title = this.title, editable = this.editable;
            var swatchesClass = "".concat(baseClassName, "__swatches");
            var renderActions = function renderActions2() {
              if (!editable) {
                return null;
              }
              return vue.createVNode("div", {
                "class": "".concat(swatchesClass, "--actions")
              }, [vue.createVNode("span", {
                "role": "button",
                "class": "".concat(baseClassName, "__icon"),
                "onClick": function onClick() {
                  return _this.handleAddColor();
                }
              }, [vue.createVNode(add, null, null)]), _this.colors.length > 0 ? vue.createVNode("span", {
                "role": "button",
                "class": "".concat(baseClassName, "__icon"),
                "onClick": function onClick() {
                  return _this.handleRemoveColor();
                }
              }, [vue.createVNode(_delete, null, null)]) : null]);
            };
            return vue.createVNode("div", {
              "class": swatchesClass
            }, [vue.createVNode("h3", {
              "class": "".concat(swatchesClass, "--title")
            }, [vue.createVNode("span", null, [title]), renderActions()]), vue.createVNode("ul", {
              "class": ["".concat(swatchesClass, "--items"), "narrow-scrollbar"]
            }, [this.colors.map(function(color) {
              return vue.createVNode("li", {
                "class": ["".concat(swatchesClass, "--item"), _this.isEqualCurrentColor(color) && editable ? statusClassNames.active : ""],
                "title": color,
                "key": color,
                "onClick": function onClick() {
                  if (_this.disabled) {
                    return;
                  }
                  _this.handleClick(color);
                }
              }, [vue.createVNode("div", {
                "class": ["".concat(swatchesClass, "--color"), "".concat(baseClassName, "--bg-alpha")]
              }, [vue.createVNode("span", {
                "class": "".concat(swatchesClass, "--inner"),
                "style": {
                  background: color
                }
              }, null)])]);
            })])]);
          }
        });
        function ownKeys$I(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$H(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$I(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$I(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var ColorPanel = vue.defineComponent({
          name: "ColorPanel",
          components: {
            PanelHeader,
            LinearGradient,
            SaturationPanel,
            HueSlider,
            AlphaSlider,
            FormatPanel,
            SwatchesPanel
          },
          props: _objectSpread$H(_objectSpread$H({}, props$j), {}, {
            togglePopup: {
              type: Function
            }
          }),
          setup: function setup(props2) {
            var baseClassName = useBaseClassName();
            var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
            var _useConfig = useConfig("colorPicker"), t = _useConfig.t, global2 = _useConfig.global;
            var statusClassNames = STATUS.value;
            var _toRefs = vue.toRefs(props2), inputValue = _toRefs.value, modelValue = _toRefs.modelValue, recentColors = _toRefs.recentColors;
            var _useVModel = useVModel(inputValue, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerValue = _useVModel2[0], setInnerValue = _useVModel2[1];
            var color = vue.ref(new Color(innerValue.value || DEFAULT_COLOR));
            var updateColor = function updateColor2() {
              return color.value.update(innerValue.value || DEFAULT_COLOR);
            };
            var mode = vue.ref(color.value.isGradient ? "linear-gradient" : "monochrome");
            var formatModel = vue.ref(color.value.isGradient ? "CSS" : "RGB");
            var _useDefaultValue = useDefaultValue(recentColors, props2.defaultRecentColors, props2.onRecentColorsChange, "recentColors"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2), recentlyUsedColors = _useDefaultValue2[0], setRecentlyUsedColors = _useDefaultValue2[1];
            if (props2.colorModes.length === 1) {
              var m = props2.colorModes[0];
              mode.value = m;
            }
            var formatValue = function formatValue2() {
              if (mode.value === "linear-gradient") {
                return color.value.linearGradient;
              }
              return color.value.getFormatsColorMap()[props2.format] || color.value.css;
            };
            var addRecentlyUsedColor = function addRecentlyUsedColor2() {
              if (recentlyUsedColors.value === null || recentlyUsedColors.value === false) {
                return;
              }
              var colors = recentlyUsedColors.value || [];
              var currentColor = color.value.isGradient ? color.value.linearGradient : color.value.rgba;
              var index2 = colors.indexOf(currentColor);
              if (index2 > -1) {
                colors.splice(index2, 1);
              }
              colors.unshift(currentColor);
              if (colors.length > TD_COLOR_USED_COLORS_MAX_SIZE) {
                colors.length = TD_COLOR_USED_COLORS_MAX_SIZE;
              }
              handleRecentlyUsedColorsChange(colors);
            };
            var handleRecentlyUsedColorsChange = function handleRecentlyUsedColorsChange2(colors) {
              recentlyUsedColors.value = colors;
              setRecentlyUsedColors(colors);
            };
            var emitColorChange = function emitColorChange2(trigger) {
              setInnerValue(formatValue(), {
                color: getColorObject(color.value),
                trigger: trigger || "palette-saturation-brightness"
              });
            };
            vue.watch(function() {
              return [props2.defaultValue, props2.enableAlpha];
            }, updateColor);
            vue.watch(function() {
              return innerValue.value;
            }, function(newColor) {
              if (newColor !== formatValue()) {
                updateColor();
                mode.value = color.value.isGradient ? "linear-gradient" : "monochrome";
              }
            });
            var handleModeChange = function handleModeChange2(value) {
              mode.value = value;
              if (value === "linear-gradient") {
                color.value.update(color.value.gradientColors.length > 0 ? color.value.linearGradient : DEFAULT_LINEAR_GRADIENT);
                return;
              }
              color.value.update(color.value.rgba);
            };
            var handleFormatModeChange = function handleFormatModeChange2(format2) {
              return formatModel.value = format2;
            };
            var handleSatAndValueChange = function handleSatAndValueChange2(_ref) {
              var saturation = _ref.saturation, value = _ref.value;
              var _color$value = color.value, sat = _color$value.saturation, val = _color$value.value;
              var changeTrigger = "palette-saturation-brightness";
              if (value !== val && saturation !== sat) {
                color.value.saturation = saturation;
                color.value.value = value;
                changeTrigger = "palette-saturation-brightness";
              } else if (saturation !== sat) {
                color.value.saturation = saturation;
                changeTrigger = "palette-saturation";
              } else if (value !== val) {
                color.value.value = value;
                changeTrigger = "palette-brightness";
              } else {
                return;
              }
              emitColorChange(changeTrigger);
            };
            var handleHueChange = function handleHueChange2(hue) {
              var _props2$onPaletteBarC;
              color.value.hue = hue;
              emitColorChange("palette-hue-bar");
              (_props2$onPaletteBarC = props2.onPaletteBarChange) === null || _props2$onPaletteBarC === void 0 ? void 0 : _props2$onPaletteBarC.call(props2, {
                color: getColorObject(color.value)
              });
            };
            var handleAlphaChange = function handleAlphaChange2(alpha) {
              color.value.alpha = alpha;
              emitColorChange("palette-alpha-bar");
            };
            var handleInputChange = function handleInputChange2(input, alpha) {
              color.value.update(input);
              color.value.alpha = alpha;
              emitColorChange("input");
            };
            var handleGradientChange = function handleGradientChange2(_ref2) {
              var key = _ref2.key, payload = _ref2.payload;
              var trigger = "palette-saturation-brightness";
              switch (key) {
                case "degree":
                  color.value.gradientDegree = payload;
                  trigger = "input";
                  break;
                case "selectedId":
                  color.value.gradientSelectedId = payload;
                  break;
                case "colors":
                  color.value.gradientColors = payload;
                  break;
              }
              emitColorChange(trigger);
            };
            var handleSetColor = function handleSetColor2(type, value) {
              var isGradientValue = Color.isGradientColor(value);
              if (isGradientValue) {
                if (props2.colorModes.includes("linear-gradient")) {
                  mode.value = "linear-gradient";
                  color.value.update(value);
                  color.value.updateCurrentGradientColor();
                } else {
                  console.warn("\u8BE5\u6A21\u5F0F\u4E0D\u652F\u6301\u6E10\u53D8\u8272");
                }
              } else if (mode.value === "linear-gradient") {
                color.value.updateStates(value);
                color.value.updateCurrentGradientColor();
              } else {
                color.value.update(value);
              }
              emitColorChange();
            };
            return {
              baseClassName,
              statusClassNames,
              t,
              global: global2,
              color,
              mode,
              formatModel,
              recentlyUsedColors,
              addRecentlyUsedColor,
              handleModeChange,
              handleSatAndValueChange,
              handleHueChange,
              handleAlphaChange,
              handleGradientChange,
              handleSetColor,
              handleFormatModeChange,
              handleInputChange,
              handleRecentlyUsedColorsChange
            };
          },
          render: function render() {
            var _systemColors, _this = this;
            var baseClassName = this.baseClassName, statusClassNames = this.statusClassNames, t = this.t, global2 = this.global, recentColors = this.recentColors;
            this.recentlyUsedColors;
            var swatchColors = this.swatchColors;
            var baseProps2 = {
              color: this.color,
              disabled: this.disabled
            };
            var showUsedColors = recentColors !== null && recentColors !== false;
            var systemColors = swatchColors;
            if (systemColors === void 0) {
              systemColors = _toConsumableArray(DEFAULT_SYSTEM_SWATCH_COLORS);
            }
            var showSystemColors = ((_systemColors = systemColors) === null || _systemColors === void 0 ? void 0 : _systemColors.length) > 0;
            var renderSwatches = function renderSwatches2() {
              if (!showSystemColors && !showUsedColors) {
                return null;
              }
              return vue.createVNode(vue.Fragment, null, [vue.createVNode("div", {
                "class": "".concat(baseClassName, "__swatches-wrap")
              }, [showUsedColors ? vue.createVNode(vue.resolveComponent("swatches-panel"), vue.mergeProps(baseProps2, {
                "title": t(global2.recentColorTitle),
                "editable": true,
                "colors": _this.recentlyUsedColors,
                "handleAddColor": _this.addRecentlyUsedColor,
                "onSetColor": function onSetColor(color) {
                  return _this.handleSetColor("used", color);
                },
                "onChange": _this.handleRecentlyUsedColorsChange
              }), null) : null, showSystemColors ? vue.createVNode(vue.resolveComponent("swatches-panel"), vue.mergeProps(baseProps2, {
                "title": t(global2.swatchColorTitle),
                "colors": systemColors,
                "onSetColor": function onSetColor(color) {
                  return _this.handleSetColor("system", color);
                }
              }), null) : null])]);
            };
            return vue.createVNode("div", {
              "class": ["".concat(baseClassName, "__panel"), this.disabled ? statusClassNames.disabled : false],
              "onClick": function onClick(e) {
                return e.stopPropagation();
              }
            }, [vue.createVNode(vue.resolveComponent("panel-header"), vue.mergeProps(this.$props, {
              "mode": this.mode,
              "onModeChange": this.handleModeChange
            }), null), vue.createVNode("div", {
              "class": ["".concat(baseClassName, "__body")]
            }, [this.mode === "linear-gradient" ? vue.createVNode(vue.resolveComponent("linear-gradient"), vue.mergeProps(baseProps2, {
              "onChange": this.handleGradientChange
            }), null) : null, vue.createVNode(vue.resolveComponent("saturation-panel"), vue.mergeProps(baseProps2, {
              "onChange": this.handleSatAndValueChange
            }), null), vue.createVNode(vue.resolveComponent("hue-slider"), vue.mergeProps(baseProps2, {
              "onChange": this.handleHueChange
            }), null), this.enableAlpha ? vue.createVNode(vue.resolveComponent("alpha-slider"), vue.mergeProps(baseProps2, {
              "onChange": this.handleAlphaChange
            }), null) : null, vue.createVNode(vue.resolveComponent("format-panel"), vue.mergeProps(this.$props, {
              "color": this.color,
              "format": this.formatModel,
              "onModeChange": this.handleFormatModeChange,
              "onInputChange": this.handleInputChange
            }), null), renderSwatches()])]);
          }
        });
        function ownKeys$H(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$G(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$H(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$H(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _ColorPickerPanel = vue.defineComponent({
          name: "TColorPickerPanel",
          props: _objectSpread$G({}, props$j),
          setup: function setup(props2, _ref) {
            var attrs = _ref.attrs;
            var prefix = usePrefixClass();
            return function() {
              return vue.createVNode(ColorPanel, vue.mergeProps(_objectSpread$G(_objectSpread$G({}, props2), attrs), {
                "popupProps": null,
                "close-btn": false,
                "class": "".concat(prefix.value, "-is-inline")
              }), null);
            };
          }
        });
        var DefaultTrigger = vue.defineComponent({
          name: "DefaultTrigger",
          components: {
            TInput: Input,
            TInputNumber: InputNumber
          },
          inheritAttrs: false,
          props: {
            color: {
              type: String,
              "default": ""
            },
            disabled: {
              type: Boolean,
              "default": false
            },
            inputProps: {
              type: Object,
              "default": function _default() {
                return {
                  autoWidth: true
                };
              }
            },
            onTriggerChange: {
              type: Function,
              "default": function _default() {
                return function() {
                };
              }
            }
          },
          setup: function setup(props2) {
            var baseClassName = useBaseClassName();
            var value = vue.ref(props2.color);
            vue.watch(function() {
              return [props2.color];
            }, function() {
              return value.value = props2.color;
            });
            var handleChange = function handleChange2(input) {
              if (input === props2.color) {
                return;
              }
              if (!Color.isValid(input)) {
                value.value = props2.color;
              } else {
                value.value = input;
              }
              props2.onTriggerChange(value.value);
            };
            return {
              baseClassName,
              value,
              handleChange
            };
          },
          render: function render() {
            var _this = this;
            var baseClassName = this.baseClassName;
            var inputSlots = {
              label: function label() {
                return vue.createVNode("div", {
                  "class": ["".concat(baseClassName, "__trigger--default__color"), "".concat(baseClassName, "--bg-alpha")]
                }, [vue.createVNode("span", {
                  "class": ["color-inner"],
                  "style": {
                    background: _this.value
                  }
                }, null)]);
              }
            };
            return vue.createVNode("div", {
              "class": "".concat(baseClassName, "__trigger--default")
            }, [vue.createVNode(vue.resolveComponent("t-input"), vue.mergeProps(this.inputProps, {
              "modelValue": _this.value,
              "onUpdate:modelValue": function onUpdateModelValue($event) {
                return _this.value = $event;
              },
              "disabled": this.disabled,
              "onBlur": this.handleChange
            }), inputSlots)]);
          }
        });
        function ownKeys$G(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$F(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$G(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$G(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _ColorPicker = vue.defineComponent({
          name: "TColorPicker",
          props: _objectSpread$F({}, props$j),
          setup: function setup(props2) {
            var baseClassName = useBaseClassName();
            var visible = vue.ref(false);
            var setVisible = function setVisible2(value) {
              return visible.value = value;
            };
            var _toRefs = vue.toRefs(props2), inputValue = _toRefs.value, modelValue = _toRefs.modelValue;
            var _useVModel = useVModel(inputValue, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), innerValue = _useVModel2[0], setInnerValue = _useVModel2[1];
            var refTrigger = vue.ref();
            var renderPopupContent = function renderPopupContent2() {
              if (props2.disabled) {
                return null;
              }
              var newProps = _objectSpread$F({}, props2);
              delete newProps.onChange;
              return vue.createVNode(ColorPanel, vue.mergeProps(newProps, {
                "disabled": props2.disabled,
                "value": innerValue.value,
                "togglePopup": setVisible,
                "onChange": function onChange(value, context) {
                  return setInnerValue(value, context);
                }
              }), null);
            };
            return {
              baseClassName,
              innerValue,
              visible,
              refTrigger,
              renderPopupContent,
              setVisible,
              setInnerValue
            };
          },
          render: function render() {
            var _this = this;
            var popupProps2 = this.popupProps, disabled = this.disabled, baseClassName = this.baseClassName;
            var popProps = _objectSpread$F(_objectSpread$F({
              placement: "bottom-left"
            }, popupProps2 || {}), {}, {
              trigger: "click",
              attach: "body",
              overlayClassName: [baseClassName],
              visible: this.visible,
              overlayStyle: {
                padding: 0
              },
              onVisibleChange: function onVisibleChange(visible, context) {
                if (context.trigger === "document") {
                  _this.setVisible(false);
                }
              }
            });
            return vue.createVNode(Popup, vue.mergeProps(popProps, {
              "content": this.renderPopupContent
            }), {
              "default": function _default() {
                return [vue.createVNode("div", {
                  "className": "".concat(baseClassName, "__trigger"),
                  "onClick": function onClick() {
                    return _this.setVisible(!_this.visible);
                  },
                  "ref": "refTrigger"
                }, [renderTNodeJSXDefault(_this, "default", vue.createVNode(DefaultTrigger, {
                  "color": _this.innerValue,
                  "disabled": disabled,
                  "input-props": _this.inputProps,
                  "onTriggerChange": _this.setInnerValue
                }, null))])];
              }
            });
          }
        });
        var ColorPickerPanel = withInstall(_ColorPickerPanel);
        var ColorPicker = withInstall(_ColorPicker);
        var props$i = {
          alt: {
            type: String,
            "default": ""
          },
          hideOnLoadFailed: Boolean,
          icon: {
            type: Function
          },
          image: {
            type: String,
            "default": ""
          },
          shape: {
            type: String,
            "default": "circle",
            validator: function validator(val) {
              return ["circle", "round"].includes(val);
            }
          },
          size: {
            type: String,
            "default": ""
          },
          onError: Function
        };
        function ownKeys$F(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$E(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$F(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$F(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _Avatar = vue.defineComponent({
          name: "TAvatar",
          props: props$i,
          setup: function setup(props2) {
            var COMPONENT_NAME2 = usePrefixClass("avatar");
            var renderContent2 = useContent();
            var renderTNodeJSX2 = useTNodeJSX();
            var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE;
            var avatarGroup = vue.inject("avatarGroup", void 0);
            var avatar = vue.ref(null);
            var avatarChild = vue.ref(null);
            var isImgExist = vue.ref(true);
            var gap = vue.ref(4);
            var sizeValue = vue.ref("");
            var scale = vue.ref("");
            var isCustomSize = vue.computed(function() {
              return sizeValue.value && !SIZE.value[sizeValue.value];
            });
            var customAvatarSize = vue.computed(function() {
              return isCustomSize.value ? {
                width: sizeValue.value,
                height: sizeValue.value,
                "font-size": "".concat(Number.parseInt(sizeValue.value, 10) / 2, "px")
              } : {};
            });
            var customImageSize = vue.computed(function() {
              return isCustomSize.value ? {
                height: sizeValue.value,
                width: sizeValue.value
              } : {};
            });
            var customCharacterSize = vue.computed(function() {
              return {
                transform: scale.value
              };
            });
            var handleImgLoadError = function handleImgLoadError2() {
              var _props2$onError;
              var hideOnLoadFailed = props2.hideOnLoadFailed;
              isImgExist.value = !hideOnLoadFailed;
              (_props2$onError = props2.onError) === null || _props2$onError === void 0 ? void 0 : _props2$onError.call(props2);
            };
            var setScaleParams = function setScaleParams2() {
              var $avatar = avatar.value;
              var $avatarChild = avatarChild.value;
              var avatarWidth = $avatar === null || $avatar === void 0 ? void 0 : $avatar.offsetWidth;
              var avatarChildWidth = $avatarChild === null || $avatarChild === void 0 ? void 0 : $avatarChild.offsetWidth;
              if (gap.value * 2 < avatarWidth) {
                scale.value = avatarChildWidth > avatarWidth - gap.value * 2 ? "scale(".concat((avatarWidth - gap.value * 2) / avatarChildWidth, ")") : "scale(1)";
              }
            };
            vue.onMounted(function() {
              sizeValue.value = props2.size || (avatarGroup === null || avatarGroup === void 0 ? void 0 : avatarGroup.size);
              vue.nextTick(function() {
                setScaleParams();
              });
            });
            vue.onUpdated(function() {
              vue.nextTick(function() {
                setScaleParams();
              });
            });
            return function() {
              var _ref;
              var content = renderContent2("default", "content");
              var icon = renderTNodeJSX2("icon");
              var isIconOnly = icon && !content;
              var shape = props2.shape, image = props2.image, alt = props2.alt;
              var avatarClass = ["".concat(COMPONENT_NAME2.value), SIZE[sizeValue.value], (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--circle"), shape === "circle"), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--round"), shape === "round"), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "__icon"), !!isIconOnly), _ref)];
              content = vue.createVNode("span", {
                "ref": avatarChild,
                "style": _objectSpread$E({}, customCharacterSize.value)
              }, [content]);
              if (icon) {
                content = [icon, !isIconOnly ? content : ""];
              }
              if (image && isImgExist.value) {
                content = vue.createVNode("img", {
                  "style": _objectSpread$E({}, customImageSize.value),
                  "src": image,
                  "alt": alt,
                  "onError": handleImgLoadError
                }, null);
              }
              return vue.createVNode("div", {
                "ref": avatar,
                "class": avatarClass,
                "style": _objectSpread$E({}, customAvatarSize.value)
              }, [content]);
            };
          }
        });
        var props$h = {
          cascading: {
            type: String,
            "default": "right-up",
            validator: function validator(val) {
              return ["left-up", "right-up"].includes(val);
            }
          },
          collapseAvatar: {
            type: [String, Function]
          },
          max: {
            type: Number
          },
          placement: {
            type: String,
            validator: function validator(val) {
              return ["left", "top", "bottom", "right"].includes(val);
            }
          },
          popupProps: {
            type: Object
          },
          size: {
            type: String,
            "default": "medium"
          }
        };
        function _isSlot$a(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var _AvatarGroup = vue.defineComponent({
          name: "TAvatarGroup",
          components: {
            Avatar: _Avatar
          },
          props: props$h,
          setup: function setup(props2) {
            vue.provide("avatarGroup", props2);
            var renderContent2 = useContent();
            var renderTNodeJSX2 = useTNodeJSX();
            var AVATAR_NAME = usePrefixClass("avatar");
            var COMPONENT_NAME2 = usePrefixClass("avatar-group");
            var isIcon = function isIcon2() {
              var content = renderTNodeJSX2("collapseAvatar");
              return content;
            };
            var renderIcon = function renderIcon2() {
              return isIcon() && typeof props2.collapseAvatar !== "string" ? props2.collapseAvatar : null;
            };
            var renderEllipsisAvatar = function renderEllipsisAvatar2(children) {
              if ((children === null || children === void 0 ? void 0 : children.length) > props2.max) {
                var content = setEllipsisContent(children);
                var outAvatar = children.slice(0, props2.max);
                outAvatar.push(vue.createVNode(_Avatar, {
                  "size": props2.size,
                  "icon": renderIcon()
                }, _isSlot$a(content) ? content : {
                  "default": function _default() {
                    return [content];
                  }
                }));
                return [outAvatar];
              }
              return [children];
            };
            var setEllipsisContent = function setEllipsisContent2(children) {
              var content = "";
              if (props2.collapseAvatar) {
                if (!isIcon()) {
                  content = renderContent2("collapseAvatar", "content");
                }
              } else {
                content = "+".concat(children.length - props2.max);
              }
              return content;
            };
            return function() {
              var _ref;
              var children = renderTNodeJSX2("default");
              var cascading = props2.cascading, max2 = props2.max;
              var groupClass = ["".concat(COMPONENT_NAME2.value), (_ref = {}, _defineProperty$3(_ref, "".concat(AVATAR_NAME.value, "--offset-right"), cascading === "right-up"), _defineProperty$3(_ref, "".concat(AVATAR_NAME.value, "--offset-left"), cascading === "left-up"), _ref)];
              var content = [children];
              if (max2 && max2 >= 0) {
                content = [renderEllipsisAvatar(children)];
              }
              return vue.createVNode("div", {
                "class": groupClass
              }, [content]);
            };
          }
        });
        var Avatar = withInstall(_Avatar);
        var AvatarGroup = withInstall(_AvatarGroup);
        var props$g = {
          color: {
            type: String,
            "default": ""
          },
          content: {
            type: [String, Function]
          },
          count: {
            type: [String, Number, Function],
            "default": 0
          },
          "default": {
            type: [String, Function]
          },
          dot: Boolean,
          maxCount: {
            type: Number,
            "default": 99
          },
          offset: {
            type: Array
          },
          shape: {
            type: String,
            "default": "circle",
            validator: function validator(val) {
              return ["circle", "round"].includes(val);
            }
          },
          showZero: Boolean,
          size: {
            type: String,
            "default": "medium",
            validator: function validator(val) {
              return ["small", "medium"].includes(val);
            }
          }
        };
        function ownKeys$E(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$D(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$E(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$E(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _Badge = vue.defineComponent({
          name: "TBadge",
          props: _objectSpread$D({}, props$g),
          setup: function setup(props2) {
            var renderTNodeJSX2 = useTNodeJSX();
            var content = vue.computed(function() {
              if (props2.dot)
                return "";
              if (typeof props2.count === "function") {
                return renderTNodeJSX2("count");
              }
              if (Number.isNaN(Number(props2.count))) {
                return props2.count;
              }
              var count = Number(props2.count);
              return count > props2.maxCount ? "".concat(props2.maxCount, "+") : count;
            });
            var renderChildren = function renderChildren2() {
              return renderTNodeJSX2("default");
            };
            var getOffset = function getOffset2() {
              if (!props2.offset)
                return {};
              var _props2$offset = _slicedToArray(props2.offset, 2), xOffset = _props2$offset[0], yOffset = _props2$offset[1];
              xOffset = Number.isNaN(Number(xOffset)) ? xOffset : "".concat(xOffset, "px");
              yOffset = Number.isNaN(Number(yOffset)) ? yOffset : "".concat(yOffset, "px");
              return {
                xOffset,
                yOffset
              };
            };
            var _useConfig = useConfig("classPrefix"), classPrefix2 = _useConfig.classPrefix;
            var name = "".concat(classPrefix2.value, "-badge");
            var isHidden = vue.computed(function() {
              return !props2.showZero && (content.value === 0 || content.value === "0");
            });
            var badgeClassNames = vue.computed(function() {
              var _ref;
              return [(_ref = {}, _defineProperty$3(_ref, "".concat(name, "--dot"), !!props2.dot), _defineProperty$3(_ref, "".concat(name, "--circle"), !props2.dot && props2.shape === "circle"), _defineProperty$3(_ref, "".concat(name, "--round"), props2.shape === "round"), _defineProperty$3(_ref, "t-size-s", props2.size === "small"), _ref)];
            });
            var inlineStyle = vue.computed(function() {
              var _getOffset = getOffset(), xOffset = _getOffset.xOffset, yOffset = _getOffset.yOffset;
              return {
                background: "".concat(props2.color),
                right: xOffset,
                top: yOffset
              };
            });
            return {
              content,
              inlineStyle,
              badgeClassNames,
              isHidden,
              renderChildren,
              name
            };
          },
          render: function render() {
            return vue.createVNode("div", vue.mergeProps({
              "class": this.name
            }, this.$attrs), [this.renderChildren(), this.isHidden ? null : vue.createVNode("sup", {
              "class": this.badgeClassNames,
              "style": this.inlineStyle
            }, [this.content])]);
          }
        });
        var Badge = withInstall(_Badge);
        var props$f = {
          cell: {
            type: [String, Function]
          },
          cellAppend: {
            type: [String, Function]
          },
          controllerConfig: {
            type: [Boolean, Object],
            "default": void 0
          },
          fillWithZero: {
            type: Boolean,
            "default": void 0
          },
          firstDayOfWeek: {
            type: Number,
            validator: function validator(val) {
              if (!val)
                return true;
              return [1, 2, 3, 4, 5, 6, 7].includes(val);
            }
          },
          format: {
            type: String,
            "default": "YYYY-MM-DD"
          },
          head: {
            type: [String, Function]
          },
          isShowWeekendDefault: {
            type: Boolean,
            "default": true
          },
          mode: {
            type: String,
            "default": "month",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["month", "year"].includes(val);
            }
          },
          month: {
            type: [String, Number]
          },
          preventCellContextmenu: Boolean,
          range: {
            type: Array
          },
          theme: {
            type: String,
            "default": "full",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["full", "card"].includes(val);
            }
          },
          value: {
            type: [String, Date]
          },
          week: {
            type: [Array, Function]
          },
          year: {
            type: [String, Number]
          },
          onCellClick: Function,
          onCellDoubleClick: Function,
          onCellRightClick: Function,
          onControllerChange: Function,
          onMonthChange: Function
        };
        var COMPONENT_NAME = "calendar";
        var MIN_YEAR = 1970;
        var FIRST_MONTH_OF_YEAR = 1;
        var LAST_MONTH_OF_YEAR = 12;
        var DEFAULT_YEAR_CELL_NUMINROW = 4;
        var DAY_CN_MAP = {
          1: "\u4E00",
          2: "\u4E8C",
          3: "\u4E09",
          4: "\u56DB",
          5: "\u4E94",
          6: "\u516D",
          7: "\u65E5"
        };
        var getDay = function getDay2(dt) {
          var day = dayjs(dt).day();
          if (day === 0) {
            day = 7;
          }
          return day;
        };
        var getDayCn = function getDayCn2(num) {
          var re = "";
          var numStr = num.toString();
          if (numStr in DAY_CN_MAP) {
            re = DAY_CN_MAP[numStr];
          }
          return re;
        };
        var getCellColIndex = function getCellColIndex2(firstDayOfWeek, dt) {
          var re = 0;
          var day = getDay(dt);
          if (day >= firstDayOfWeek) {
            re = day - firstDayOfWeek;
          } else {
            re = 7 - firstDayOfWeek + day;
          }
          return re;
        };
        var addDate = function addDate2(dt, days) {
          var d = new Date(dt);
          d.setDate(d.getDate() + days);
          return d;
        };
        var createYearCellsData = function createYearCellsData2(year, curDate, format2) {
          var monthsArr = [];
          var isCurYear = curDate.year() === year;
          for (var num = FIRST_MONTH_OF_YEAR; num <= LAST_MONTH_OF_YEAR; num++) {
            var date = new Date(year, num - 1);
            var curDateMon = parseInt(curDate.format("M"), 10);
            var isCurrent = isCurYear && curDateMon === num;
            monthsArr.push({
              mode: "year",
              isCurrent,
              date,
              formattedDate: dayjs(date).format(format2),
              filterDate: null,
              formattedFilterDate: null,
              isShowWeekend: true
            });
          }
          return monthsArr;
        };
        var createMonthCellsData = function createMonthCellsData2(year, month, firstDayOfWeek, curDate, format2) {
          var daysArr = [];
          var begin = dayjs("".concat(year, "-").concat(month)).startOf("month").toDate();
          var end2 = dayjs("".concat(year, "-").concat(month)).endOf("month").toDate();
          var days = end2.getDate();
          var beginDateColIndex = getCellColIndex(firstDayOfWeek, begin);
          var arr = [];
          var num = 1;
          var createCellData = function createCellData2(belongTo, isCurrent, date2, weekOrder) {
            var day = getDay(date2);
            return {
              mode: "month",
              belongTo,
              isCurrent,
              day,
              weekOrder,
              date: date2,
              formattedDate: dayjs(date2).format(format2),
              filterDate: null,
              formattedFilterDate: null,
              isShowWeekend: true
            };
          };
          for (var i2 = 0; i2 < beginDateColIndex; i2++) {
            var date = addDate(begin, i2 - beginDateColIndex);
            arr.push(createCellData(-1, false, date, num));
            if (arr.length === 7) {
              daysArr.push(arr);
              arr = [];
              num += 1;
            }
          }
          for (var _i = 0; _i < days; _i++) {
            var _date = addDate(begin, _i);
            arr.push(createCellData(0, curDate.isSame(dayjs(_date)), _date, num));
            if (arr.length === 7) {
              daysArr.push(arr);
              arr = [];
              num += 1;
            }
          }
          if (arr.length) {
            var nextMonthCellNum = 7 - arr.length;
            for (var _i2 = 0; _i2 < nextMonthCellNum; _i2++) {
              var _date2 = addDate(end2, _i2 + 1);
              arr.push(createCellData(1, false, _date2, num));
            }
            daysArr.push(arr);
          }
          return daysArr;
        };
        var createDefaultCurDate = function createDefaultCurDate2() {
          return dayjs(dayjs().format("YYYY-MM-DD"));
        };
        function useState(props2) {
          var _useConfig = useConfig(COMPONENT_NAME), global2 = _useConfig.global;
          var state = vue.reactive({
            realFirstDayOfWeek: 1,
            curDate: null,
            curSelectedYear: null,
            curSelectedMonth: null,
            curSelectedMode: null,
            isShowWeekend: true,
            controlSize: "medium"
          });
          function toToday() {
            var curDate = createDefaultCurDate();
            state.curSelectedYear = curDate.year();
            state.curSelectedMonth = parseInt(curDate.format("M"), 10);
          }
          function setCurSelectedYear(year) {
            var curSelectedYear = year ? parseInt("".concat(year), 10) : createDefaultCurDate().year();
            if (!isNaN(curSelectedYear) && curSelectedYear > 0) {
              state.curSelectedYear = curSelectedYear;
            }
          }
          function setCurSelectedMonth(month) {
            var curSelectedMonth = month ? parseInt("".concat(month), 10) : parseInt(createDefaultCurDate().format("M"), 10);
            if (!isNaN(curSelectedMonth) && curSelectedMonth > 0 && curSelectedMonth <= 12) {
              state.curSelectedMonth = curSelectedMonth;
            }
          }
          function setCurrentDate(value) {
            state.curDate = value ? dayjs(value) : createDefaultCurDate();
          }
          function checkDayVisibled(day) {
            var re = true;
            if (!state.isShowWeekend) {
              re = day !== 6 && day !== 7;
            }
            return re;
          }
          vue.watch(function() {
            return props2.firstDayOfWeek;
          }, function() {
            var _ref, _props$firstDayOfWeek;
            state.realFirstDayOfWeek = (_ref = (_props$firstDayOfWeek = props2.firstDayOfWeek) !== null && _props$firstDayOfWeek !== void 0 ? _props$firstDayOfWeek : global2.value.firstDayOfWeek) !== null && _ref !== void 0 ? _ref : 1;
          }, {
            immediate: true
          });
          vue.watch(function() {
            return props2.value;
          }, function(v) {
            setCurrentDate(v);
          }, {
            immediate: true
          });
          vue.watch(function() {
            return props2.year;
          }, function(v) {
            setCurSelectedYear(v);
          }, {
            immediate: true
          });
          vue.watch(function() {
            return props2.month;
          }, function(v) {
            setCurSelectedMonth(v);
          }, {
            immediate: true
          });
          vue.watch(function() {
            return props2.isShowWeekendDefault;
          }, function(v) {
            state.isShowWeekend = v;
          }, {
            immediate: true
          });
          vue.watch(function() {
            return props2.mode;
          }, function(v) {
            state.curSelectedMode = v;
          }, {
            immediate: true
          });
          return {
            state,
            toToday,
            checkDayVisibled
          };
        }
        function useCalendarClass(props2, state) {
          var prefixClass = usePrefixClass(COMPONENT_NAME);
          var body = vue.computed(function() {
            return ["".concat(prefixClass.value), "".concat(prefixClass.value, "--").concat(props2.theme)];
          });
          var panel = vue.computed(function() {
            return ["".concat(prefixClass.value, "__panel"), "".concat(prefixClass.value, "__panel--").concat(state.curSelectedMode)];
          });
          var control = vue.computed(function() {
            return ["".concat(prefixClass.value, "__control")];
          });
          var title = vue.computed(function() {
            return ["".concat(prefixClass.value, "__title")];
          });
          var controlSection = vue.computed(function() {
            return ["".concat(prefixClass.value, "__control-section")];
          });
          var controlSectionCell = vue.computed(function() {
            return ["".concat(prefixClass.value, "__control-section-cell")];
          });
          var controlTag = vue.computed(function() {
            return ["".concat(prefixClass.value, "__control-tag")];
          });
          var table2 = vue.computed(function() {
            return ["".concat(prefixClass.value, "__table")];
          });
          var tableHead = vue.computed(function() {
            return ["".concat(prefixClass.value, "__table-head")];
          });
          var tableHeadRow = vue.computed(function() {
            return ["".concat(prefixClass.value, "__table-head-row")];
          });
          var tableHeadCell = vue.computed(function() {
            return ["".concat(prefixClass.value, "__table-head-cell")];
          });
          var tableBody = vue.computed(function() {
            return ["".concat(prefixClass.value, "__table-body")];
          });
          var tableBodyRow = vue.computed(function() {
            return ["".concat(prefixClass.value, "__table-body-row")];
          });
          return {
            body,
            panel,
            control,
            title,
            controlSection,
            controlSectionCell,
            controlTag,
            table: table2,
            tableHead,
            tableHeadRow,
            tableHeadCell,
            tableBody,
            tableBodyRow
          };
        }
        function useCalendarCellClass() {
          var prefixClass = usePrefixClass(COMPONENT_NAME);
          var tableBodyCell = vue.computed(function() {
            return ["".concat(prefixClass.value, "__table-body-cell")];
          });
          var tableBodyCell4Now = vue.computed(function() {
            return "".concat(prefixClass.value, "__table-body-cell--now");
          });
          var tableBodyCellDisplay = vue.computed(function() {
            return ["".concat(prefixClass.value, "__table-body-cell-display")];
          });
          var tableBodyCellCsontent = vue.computed(function() {
            return ["".concat(prefixClass.value, "__table-body-cell-content")];
          });
          return {
            tableBodyCell,
            tableBodyCell4Now,
            tableBodyCellDisplay,
            tableBodyCellCsontent
          };
        }
        function ownKeys$D(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$C(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$D(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$D(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var getDefaultControllerConfigData = function getDefaultControllerConfigData2() {
          var visible = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
          return {
            visible,
            disabled: false,
            mode: {
              visible: true,
              radioGroupProps: {}
            },
            year: {
              visible: true,
              selectProps: {}
            },
            month: {
              visible: true,
              selectProps: {}
            },
            weekend: {
              visible: true,
              showWeekendButtonProps: {},
              hideWeekendButtonProps: {}
            },
            current: {
              visible: true,
              currentDayButtonProps: {},
              currentMonthButtonProps: {}
            }
          };
        };
        function userController(props2, state) {
          var _useConfig = useConfig(COMPONENT_NAME), global2 = _useConfig.global;
          var options = vue.computed(function() {
            var dayJsFilterDate = dayjs("".concat(state.curSelectedYear, "-").concat(state.curSelectedMonth));
            var re = {
              isShowWeekend: state.isShowWeekend,
              filterDate: dayJsFilterDate.toDate(),
              formattedFilterDate: dayJsFilterDate.format(props2.format),
              mode: state.curSelectedMode
            };
            return re;
          });
          var configData = vue.computed(function() {
            var _ref, _props$controllerConf;
            var controllerConfig = (_ref = (_props$controllerConf = props2.controllerConfig) !== null && _props$controllerConf !== void 0 ? _props$controllerConf : global2.value.controllerConfig) !== null && _ref !== void 0 ? _ref : true;
            if (typeof controllerConfig === "boolean") {
              return getDefaultControllerConfigData(controllerConfig);
            }
            return _objectSpread$C(_objectSpread$C({}, getDefaultControllerConfigData()), controllerConfig);
          });
          var visible = vue.computed(function() {
            return !!configData.value && configData.value.visible;
          });
          function checkControllerVisible(name) {
            var re = true;
            var conf = configData.value;
            if (!conf || !conf.visible || conf[name] === false || conf[name] && !conf[name].visible) {
              re = false;
            }
            return re;
          }
          function checkControllerDisabled(name, propsName) {
            var re = false;
            var conf = configData.value;
            if (conf && (conf.disabled || conf[name] && conf[name][propsName] && conf[name][propsName].disabled)) {
              re = true;
            }
            return re;
          }
          function emitControllerChange() {
            vue.nextTick(function() {
              typeof props2.onControllerChange === "function" && props2.onControllerChange(_objectSpread$C({}, options.value));
            });
          }
          return {
            options,
            configData,
            visible,
            checkControllerVisible,
            checkControllerDisabled,
            emitControllerChange
          };
        }
        function useColHeaders(props2, state) {
          var _useConfig = useConfig(COMPONENT_NAME), t = _useConfig.t, global2 = _useConfig.global;
          var weekDipalyText = vue.computed(function() {
            return props2.week || t(global2.value.week).split(",");
          });
          function getWeekDisplay(weekNum) {
            var weekText = weekDipalyText.value;
            return _typeof$2(weekText) === "object" && weekText[weekNum - 1] ? weekText[weekNum - 1] : getDayCn(weekNum);
          }
          var cellColHeaders = vue.computed(function() {
            var re = [];
            var min2 = 1;
            var max2 = 7;
            for (var i2 = state.realFirstDayOfWeek; i2 <= max2; i2++) {
              re.push({
                num: i2,
                display: getWeekDisplay(i2)
              });
            }
            if (state.realFirstDayOfWeek > min2) {
              for (var _i = min2; _i < state.realFirstDayOfWeek; _i++) {
                re.push({
                  num: _i,
                  display: getWeekDisplay(_i)
                });
              }
            }
            return re;
          });
          return {
            cellColHeaders
          };
        }
        function ownKeys$C(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$B(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$C(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$C(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var clickTypeEmitEventMap = {
          click: "click",
          dblclick: "dblclick",
          contextmenu: "rightclick"
        };
        var CalendarCellItem = vue.defineComponent({
          name: "TCalendarCell",
          inheritAttrs: false,
          props: {
            item: {
              type: Object,
              "default": function _default() {
                return null;
              }
            },
            fillWithZero: {
              type: Boolean,
              "default": void 0
            },
            theme: {
              type: String,
              "default": function _default() {
                return null;
              }
            },
            t: Function,
            global: Object,
            cell: [String, Function]
          },
          emits: _toConsumableArray(Object.values(clickTypeEmitEventMap)),
          setup: function setup(props2, _ref) {
            var emit = _ref.emit;
            var renderContent2 = useContent();
            var cls = useCalendarCellClass();
            var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
            var valueDisplay = vue.computed(function() {
              if (props2.item.mode === "month") {
                var _ref2, _props$fillWithZero;
                var dateNum = props2.item.date.getDate();
                var fillZero = dateNum < 10 && ((_ref2 = (_props$fillWithZero = props2.fillWithZero) !== null && _props$fillWithZero !== void 0 ? _props$fillWithZero : props2.global.fillWithZero) !== null && _ref2 !== void 0 ? _ref2 : true);
                return fillZero ? "0".concat(dateNum) : dateNum;
              }
              var map = props2.t(props2.global.cellMonth).split(",");
              return map[props2.item.date.getMonth().toString()];
            });
            var allowSlot = vue.computed(function() {
              return props2.theme === "full";
            });
            var disabled = vue.computed(function() {
              return props2.item.mode === "month" && props2.item.belongTo !== 0;
            });
            var cellCls = vue.computed(function() {
              var _ref3;
              var _props$item = props2.item, mode = _props$item.mode, date = _props$item.date, formattedDate = _props$item.formattedDate, isCurrent = _props$item.isCurrent;
              var isNow = mode === "year" ? new Date().getMonth() === date.getMonth() : formattedDate === dayjs().format("YYYY-MM-DD");
              return [cls.tableBodyCell.value, (_ref3 = {}, _defineProperty$3(_ref3, STATUS.value.disabled, disabled.value), _defineProperty$3(_ref3, STATUS.value.checked, isCurrent), _defineProperty$3(_ref3, cls.tableBodyCell4Now.value, isNow), _ref3)];
            });
            var clickCell = function clickCell2(e) {
              if (disabled.value)
                return;
              var emitName = clickTypeEmitEventMap[e.type];
              emit(emitName, e);
            };
            var renderDefaultNode = function renderDefaultNode2() {
              return vue.createVNode(vue.Fragment, null, [vue.createVNode("div", {
                "class": cls.tableBodyCellDisplay.value
              }, [valueDisplay.value]), vue.createVNode("div", {
                "class": cls.tableBodyCellCsontent.value
              }, [allowSlot.value && renderContent2("cellAppend", void 0, {
                params: _objectSpread$B({}, props2.item)
              })])]);
            };
            return function() {
              return props2.item && vue.createVNode("td", {
                "class": cellCls.value,
                "onClick": clickCell,
                "ondblclick": clickCell,
                "oncontextmenu": clickCell
              }, [typeof props2.cell === "function" ? props2.cell(_objectSpread$B({}, props2.item)) : renderContent2("cell", void 0, {
                defaultNode: renderDefaultNode(),
                params: _objectSpread$B({}, props2.item)
              })]);
            };
          }
        });
        function ownKeys$B(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$A(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$B(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$B(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot$9(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var _Calendar = vue.defineComponent({
          name: "TCalendar",
          props: _objectSpread$A({}, props$f),
          setup: function setup(props2, _ref) {
            var slots = _ref.slots;
            var renderContent2 = useContent();
            var _useConfig = useConfig(COMPONENT_NAME), t = _useConfig.t, global2 = _useConfig.global;
            var _useState = useState(props2), state = _useState.state, toToday = _useState.toToday, checkDayVisibled = _useState.checkDayVisibled;
            var cls = useCalendarClass(props2, state);
            var _useColHeaders = useColHeaders(props2, state), cellColHeaders = _useColHeaders.cellColHeaders;
            var controller = userController(props2, state);
            var rangeFromTo = vue.computed(function() {
              if (!props2.range || props2.range.length < 2) {
                return null;
              }
              var _props2$range = _slicedToArray(props2.range, 2), v1 = _props2$range[0], v2 = _props2$range[1];
              if (dayjs(v1).isBefore(dayjs(v2))) {
                return {
                  from: v1,
                  to: v2
                };
              }
              return {
                from: v2,
                to: v1
              };
            });
            function checkMonthAndYearSelecterDisabled(year, month) {
              var disabled = false;
              if (rangeFromTo.value && rangeFromTo.value.from && rangeFromTo.value.to) {
                var beginYear = dayjs(rangeFromTo.value.from).year();
                var endYear = dayjs(rangeFromTo.value.to).year();
                if (year === beginYear) {
                  var beginMon = parseInt(dayjs(rangeFromTo.value.from).format("M"), 10);
                  disabled = month < beginMon;
                } else if (year === endYear) {
                  var endMon = parseInt(dayjs(rangeFromTo.value.to).format("M"), 10);
                  disabled = month > endMon;
                }
              }
              return disabled;
            }
            vue.watch(function() {
              return {
                year: "".concat(state.curSelectedYear),
                month: "".concat(state.curSelectedMonth)
              };
            }, function(v) {
              typeof props2.onMonthChange === "function" && props2.onMonthChange(_objectSpread$A({}, v));
              controller.emitControllerChange();
            });
            var dateSelect = {
              yearSelectOptionList: vue.computed(function() {
                var re = [];
                var begin = state.curSelectedYear - 10;
                var end2 = state.curSelectedYear + 10;
                if (rangeFromTo.value && rangeFromTo.value.from && rangeFromTo.value.to) {
                  begin = dayjs(rangeFromTo.value.from).year();
                  end2 = dayjs(rangeFromTo.value.to).year();
                }
                if (begin < MIN_YEAR) {
                  begin = MIN_YEAR;
                }
                if (end2 < MIN_YEAR) {
                  end2 = MIN_YEAR;
                }
                for (var i2 = begin; i2 <= end2; i2++) {
                  var disabled = checkMonthAndYearSelecterDisabled(i2, state.curSelectedMonth);
                  re.push({
                    value: i2,
                    label: t(global2.value.yearSelection, {
                      year: i2
                    }),
                    disabled
                  });
                }
                return re;
              }),
              isYearSelectVisible: vue.computed(function() {
                return controller.checkControllerVisible("year");
              }),
              isYearSelectDisabled: vue.computed(function() {
                return controller.checkControllerDisabled("year", "selectProps");
              }),
              monthSelectOptionList: vue.computed(function() {
                var re = [];
                for (var i2 = FIRST_MONTH_OF_YEAR; i2 <= LAST_MONTH_OF_YEAR; i2++) {
                  var disabled = checkMonthAndYearSelecterDisabled(state.curSelectedYear, i2);
                  re.push({
                    value: i2,
                    label: t(global2.value.monthSelection, {
                      month: i2
                    }),
                    disabled
                  });
                }
                return re;
              }),
              isMonthSelectVisible: vue.computed(function() {
                return state.curSelectedMode === "month" && controller.checkControllerVisible("month");
              }),
              isMonthSelectDisabled: vue.computed(function() {
                return controller.checkControllerDisabled("month", "selectProps");
              })
            };
            var modeSelect = {
              optionList: vue.computed(function() {
                return [{
                  value: "month",
                  label: t(global2.value.monthRadio)
                }, {
                  value: "year",
                  label: t(global2.value.yearRadio)
                }];
              }),
              isVisible: vue.computed(function() {
                return controller.checkControllerVisible("mode");
              }),
              isDisabled: vue.computed(function() {
                return controller.checkControllerDisabled("mode", "radioGroupProps");
              })
            };
            var weekendBtn = {
              text: vue.computed(function() {
                return state.isShowWeekend ? t(global2.value.hideWeekend) : t(global2.value.showWeekend);
              }),
              vBind: vue.computed(function() {
                var c = controller.configData.value.weekend;
                return state.isShowWeekend ? c.hideWeekendButtonProps : c.showWeekendButtonProps;
              }),
              isVisible: vue.computed(function() {
                return props2.theme === "full" && controller.checkControllerVisible("current") && controller.checkControllerVisible("weekend");
              }),
              isDisabled: vue.computed(function() {
                var p = state.isShowWeekend ? "hideWeekendButtonProps" : "showWeekendButtonProps";
                return controller.checkControllerDisabled("weekend", p);
              })
            };
            var currentBtn = {
              text: vue.computed(function() {
                return state.curSelectedMode === "month" ? t(global2.value.today) : t(global2.value.thisMonth);
              }),
              vBind: vue.computed(function() {
                var c = controller.configData.value.current;
                return state.curSelectedMode === "month" ? c.currentDayButtonProps : c.currentMonthButtonProps;
              }),
              isVisible: vue.computed(function() {
                return props2.theme === "full" && controller.checkControllerVisible("current");
              }),
              isDisabled: vue.computed(function() {
                var p = state.curSelectedMode === "month" ? "currentDayButtonProps" : "currentMonthButtonProps";
                return controller.checkControllerDisabled("current", p);
              })
            };
            var renderControl = function renderControl2() {
              var _slot, _slot2, _slot3;
              return vue.createVNode("div", {
                "class": cls.control.value
              }, [vue.createVNode("div", {
                "class": cls.title.value
              }, [renderContent2("head", void 0, {
                params: _objectSpread$A({}, controller.options.value)
              })]), vue.createVNode("div", {
                "class": cls.controlSection.value
              }, [dateSelect.isYearSelectVisible.value && vue.createVNode("div", {
                "class": cls.controlSectionCell.value
              }, [vue.createVNode(Select, vue.mergeProps({
                "modelValue": state.curSelectedYear,
                "onUpdate:modelValue": function onUpdateModelValue($event) {
                  return state.curSelectedYear = $event;
                },
                "size": state.controlSize
              }, controller.configData.value.year.selectProps, {
                "disabled": dateSelect.isYearSelectDisabled.value
              }), _isSlot$9(_slot = dateSelect.yearSelectOptionList.value.map(function(item) {
                return vue.createVNode(Option, {
                  "key": item.value,
                  "value": item.value,
                  "label": item.label,
                  "disabled": item.disabled
                }, {
                  "default": function _default() {
                    return [item.label];
                  }
                });
              })) ? _slot : {
                "default": function _default() {
                  return [_slot];
                }
              })]), dateSelect.isMonthSelectVisible.value && vue.createVNode("div", {
                "class": cls.controlSectionCell.value
              }, [vue.createVNode(Select, vue.mergeProps({
                "modelValue": state.curSelectedMonth,
                "onUpdate:modelValue": function onUpdateModelValue($event) {
                  return state.curSelectedMonth = $event;
                },
                "size": state.controlSize
              }, controller.configData.value.month.selectProps, {
                "disabled": dateSelect.isMonthSelectDisabled.value
              }), _isSlot$9(_slot2 = dateSelect.monthSelectOptionList.value.map(function(item) {
                return vue.createVNode(Option, {
                  "key": item.value,
                  "value": item.value,
                  "label": item.label,
                  "disabled": item.disabled
                }, {
                  "default": function _default() {
                    return [item.label];
                  }
                });
              })) ? _slot2 : {
                "default": function _default() {
                  return [_slot2];
                }
              })]), modeSelect.isVisible.value && vue.createVNode("div", {
                "class": cls.controlSectionCell.value,
                "style": "height: auto"
              }, [vue.createVNode(RadioGroup, vue.mergeProps({
                "modelValue": state.curSelectedMode,
                "onUpdate:modelValue": function onUpdateModelValue($event) {
                  return state.curSelectedMode = $event;
                },
                "variant": "default-filled",
                "size": state.controlSize
              }, controller.configData.value.mode.radioGroupProps, {
                "disabled": modeSelect.isDisabled.value,
                "onChange": controller.emitControllerChange
              }), _isSlot$9(_slot3 = modeSelect.optionList.value.map(function(item) {
                return vue.createVNode(RadioButton, {
                  "key": item.value,
                  "value": item.value
                }, {
                  "default": function _default() {
                    return [item.label];
                  }
                });
              })) ? _slot3 : {
                "default": function _default() {
                  return [_slot3];
                }
              })]), weekendBtn.isVisible.value && vue.createVNode("div", {
                "class": cls.controlSectionCell.value
              }, [vue.createVNode(CheckTag, vue.mergeProps({
                "class": cls.controlTag.value,
                "theme": state.isShowWeekend ? "default" : "primary",
                "size": state.controlSize
              }, weekendBtn.vBind.value, {
                "disabled": weekendBtn.isDisabled.value,
                "onClick": function onClick() {
                  state.isShowWeekend = !state.isShowWeekend;
                  controller.emitControllerChange();
                }
              }), {
                "default": function _default() {
                  return [weekendBtn.text.value];
                }
              })]), currentBtn.isVisible.value && vue.createVNode("div", {
                "class": cls.controlSectionCell.value
              }, [vue.createVNode(Button, vue.mergeProps({
                "size": state.controlSize
              }, currentBtn.vBind.value, {
                "disabled": currentBtn.isDisabled.value,
                "onClick": function onClick() {
                  toToday();
                }
              }), {
                "default": function _default() {
                  return [currentBtn.text.value];
                }
              })])])]);
            };
            var cellClickEmit = function cellClickEmit2(eventPropsName, e, cellData) {
              if (typeof props2[eventPropsName] === "function") {
                var options = {
                  cell: _objectSpread$A(_objectSpread$A({}, cellData), controller.options.value),
                  e
                };
                props2[eventPropsName](options);
              }
            };
            var clickCell = function clickCell2(e, cellData) {
              state.curDate = dayjs(cellData.date);
              cellClickEmit("onCellClick", e, cellData);
            };
            var doubleClickCell = function doubleClickCell2(e, cellData) {
              cellClickEmit("onCellDoubleClick", e, cellData);
            };
            var rightClickCell = function rightClickCell2(e, cellData) {
              if (props2.preventCellContextmenu) {
                e.preventDefault();
              }
              cellClickEmit("onCellRightClick", e, cellData);
            };
            var monthCellsData = vue.computed(function() {
              var daysArr = createMonthCellsData(state.curSelectedYear, state.curSelectedMonth, state.realFirstDayOfWeek, state.curDate, props2.format);
              return daysArr;
            });
            var renderMonthBody = function renderMonthBody2() {
              return vue.createVNode("table", {
                "class": cls.table.value
              }, [vue.createVNode("thead", {
                "class": cls.tableHead.value
              }, [vue.createVNode("tr", {
                "class": cls.tableHeadRow.value
              }, [cellColHeaders.value.map(function(item, index2) {
                return checkDayVisibled(item.num) && vue.createVNode("th", {
                  "class": cls.tableHeadCell.value
                }, [Array.isArray(props2.week) ? props2.week[index2] : renderContent2("week", void 0, {
                  defaultNode: vue.createVNode("span", null, [item.display]),
                  params: {
                    day: item.num
                  }
                })]);
              })])]), vue.createVNode("tbody", {
                "class": cls.tableBody.value
              }, [monthCellsData.value.map(function(week, weekIndex) {
                return vue.createVNode("tr", {
                  "class": cls.tableBodyRow.value
                }, [week.map(function(item, itemIndex) {
                  return (state.isShowWeekend || item.day < 6) && vue.createVNode(CalendarCellItem, {
                    "key": "d-".concat(weekIndex, "-").concat(itemIndex),
                    "item": item,
                    "theme": props2.theme,
                    "t": t,
                    "global": global2.value,
                    "cell": props2.cell,
                    "fillWithZero": props2.fillWithZero,
                    "onClick": function onClick(e) {
                      return clickCell(e, item);
                    },
                    "onDblclick": function onDblclick(e) {
                      return doubleClickCell(e, item);
                    },
                    "onRightclick": function onRightclick(e) {
                      return rightClickCell(e, item);
                    }
                  }, _objectSpread$A({}, slots));
                })]);
              })])]);
            };
            var yearCellsData = vue.computed(function() {
              var re = [];
              var monthsArr = createYearCellsData(state.curSelectedYear, state.curDate, props2.format);
              var rowCount = Math.ceil(monthsArr.length / DEFAULT_YEAR_CELL_NUMINROW);
              var index2 = 0;
              for (var i2 = 1; i2 <= rowCount; i2++) {
                var row = [];
                for (var j = 1; j <= DEFAULT_YEAR_CELL_NUMINROW; j++) {
                  row.push(monthsArr[index2]);
                  index2 += 1;
                }
                re.push(row);
              }
              return re;
            });
            var renderYearBody = function renderYearBody2() {
              return vue.createVNode("table", {
                "class": cls.table.value
              }, [vue.createVNode("tbody", {
                "class": cls.tableBody.value
              }, [yearCellsData.value.map(function(cell, cellIndex) {
                return vue.createVNode("tr", {
                  "class": cls.tableBodyRow.value
                }, [cell.map(function(item, itemIndex) {
                  return vue.createVNode(CalendarCellItem, {
                    "key": "m-".concat(cellIndex, "-").concat(itemIndex),
                    "item": item,
                    "theme": props2.theme,
                    "t": t,
                    "global": global2.value,
                    "cell": props2.cell,
                    "fillWithZero": props2.fillWithZero,
                    "onClick": function onClick(e) {
                      return clickCell(e, item);
                    },
                    "onDblclick": function onDblclick(e) {
                      return doubleClickCell(e, item);
                    },
                    "onRightclick": function onRightclick(e) {
                      return rightClickCell(e, item);
                    }
                  }, _objectSpread$A({}, slots));
                })]);
              })])]);
            };
            return function() {
              return vue.createVNode("div", {
                "class": cls.body.value
              }, [controller.visible.value && renderControl(), vue.createVNode("div", {
                "class": cls.panel.value
              }, [state.curSelectedMode === "month" ? renderMonthBody() : renderYearBody()])]);
            };
          }
        });
        var Calendar = withInstall(_Calendar);
        var props$e = {
          actions: {
            type: [String, Function]
          },
          avatar: {
            type: [String, Function]
          },
          bordered: {
            type: Boolean,
            "default": true
          },
          content: {
            type: [String, Function]
          },
          cover: {
            type: [String, Function]
          },
          "default": {
            type: [String, Function]
          },
          description: {
            type: [String, Function]
          },
          footer: {
            type: [String, Function]
          },
          header: {
            type: [String, Function]
          },
          headerBordered: Boolean,
          hoverShadow: Boolean,
          loading: {
            type: [Boolean, Function],
            "default": false
          },
          shadow: Boolean,
          size: {
            type: String,
            "default": "medium",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["medium", "small"].includes(val);
            }
          },
          status: {
            type: String,
            "default": ""
          },
          subtitle: {
            type: [String, Function]
          },
          theme: {
            type: String,
            "default": "normal",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["normal", "poster1", "poster2"].includes(val);
            }
          },
          title: {
            type: [String, Function]
          }
        };
        var _Card = vue.defineComponent({
          name: "TCard",
          props: props$e,
          setup: function setup(props2, _ref) {
            var slots = _ref.slots;
            var renderTNodeJSX2 = useTNodeJSX();
            var COMPONENT_NAME2 = usePrefixClass("card");
            var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE;
            var baseCls = vue.computed(function() {
              var defaultClass = [COMPONENT_NAME2.value];
              if (props2.size === "small")
                defaultClass.push("".concat(SIZE.value[props2.size]));
              if (props2.bordered)
                defaultClass.push("".concat(COMPONENT_NAME2.value, "--bordered"));
              if (props2.shadow)
                defaultClass.push("".concat(COMPONENT_NAME2.value, "--shadow"));
              if (props2.hoverShadow)
                defaultClass.push("".concat(COMPONENT_NAME2.value, "--shadow-hover"));
              return defaultClass;
            });
            var headerCls = vue.computed(function() {
              var defaultClass = ["".concat(COMPONENT_NAME2.value, "__header")];
              return props2.headerBordered ? defaultClass.concat("".concat(COMPONENT_NAME2.value, "__title--bordered")) : ["".concat(COMPONENT_NAME2.value, "__header")];
            });
            var headerWrapperCls = usePrefixClass("card__header-wrapper");
            var headerAvatarCls = usePrefixClass("card__avatar");
            var headerTitleCls = usePrefixClass("card__title");
            var headerSubTitleCls = usePrefixClass("card__subtitle");
            var headerDescriptionCls = usePrefixClass("card__description");
            var actionsCls = usePrefixClass("card__actions");
            var bodyCls = usePrefixClass("card__body");
            var coverCls = usePrefixClass("card__cover");
            var footerCls = usePrefixClass("card__footer");
            var footerWrapperCls = usePrefixClass("card__footer-wrapper");
            var isPoster2 = vue.computed(function() {
              return props2.theme === "poster2";
            });
            var showTitle = vue.computed(function() {
              return props2.title || slots.title;
            });
            var showHeader = vue.computed(function() {
              return props2.header || slots.header;
            });
            var showSubtitle = vue.computed(function() {
              return props2.subtitle || slots.subtitle;
            });
            var showAvatar = vue.computed(function() {
              return props2.avatar || slots.avatar;
            });
            var showDescription = vue.computed(function() {
              return props2.description || slots.description;
            });
            var showStatus = vue.computed(function() {
              return props2.status || slots.status;
            });
            var showActions = vue.computed(function() {
              return props2.actions || slots.actions;
            });
            var showFooter = vue.computed(function() {
              return props2.footer || slots.footer;
            });
            var showCover = vue.computed(function() {
              return props2.cover || slots.cover;
            });
            var showLoading = vue.computed(function() {
              return props2.loading || slots.loading;
            });
            var showContent = vue.computed(function() {
              return props2.content || slots.content || props2["default"] || slots["default"];
            });
            var isHeaderRender = vue.computed(function() {
              return showHeader.value || showTitle.value || showSubtitle.value || showDescription.value || showAvatar.value || showStatus.value && isPoster2.value || showActions.value && !isPoster2.value;
            });
            var isFooterRender = vue.computed(function() {
              return showFooter.value || showActions.value && isPoster2.value;
            });
            if (showLoading.value) {
              return renderTNodeJSX2("loading") || vue.createVNode(Loading, null, {
                "default": function _default() {
                  return [vue.createVNode("div", {
                    "class": baseCls.value
                  }, null)];
                }
              });
            }
            var renderHeader = function renderHeader2() {
              if (showHeader.value)
                return vue.createVNode("div", {
                  "class": headerCls.value
                }, [renderTNodeJSX2("header")]);
              return vue.createVNode("div", {
                "class": headerCls.value
              }, [vue.createVNode("div", {
                "class": headerWrapperCls.value
              }, [showAvatar.value && vue.createVNode("div", {
                "class": headerAvatarCls.value
              }, [renderTNodeJSX2("avatar")]), vue.createVNode("div", null, [showTitle.value && vue.createVNode("span", {
                "class": headerTitleCls.value
              }, [renderTNodeJSX2("title")]), showSubtitle.value && vue.createVNode("span", {
                "class": headerSubTitleCls.value
              }, [renderTNodeJSX2("subtitle")]), showDescription.value && vue.createVNode("p", {
                "class": headerDescriptionCls.value
              }, [renderTNodeJSX2("description")])])]), showActions.value && !isPoster2.value && vue.createVNode("div", {
                "class": actionsCls.value
              }, [renderTNodeJSX2("actions")]), showStatus.value && vue.createVNode("div", {
                "class": actionsCls.value
              }, [renderTNodeJSX2("status")])]);
            };
            var renderCover = function renderCover2() {
              var textCover = typeof props2.cover === "string";
              return vue.createVNode("div", {
                "class": coverCls.value
              }, [textCover ? vue.createVNode("img", {
                "src": props2.cover
              }, null) : renderTNodeJSX2("cover")]);
            };
            return function() {
              return vue.createVNode("div", {
                "class": baseCls.value
              }, [isHeaderRender.value ? renderHeader() : null, showCover.value ? renderCover() : null, showContent.value && vue.createVNode("div", {
                "class": bodyCls.value
              }, [renderTNodeJSX2("default") || renderTNodeJSX2("content")]), isFooterRender.value && vue.createVNode("div", {
                "class": footerCls.value
              }, [vue.createVNode("div", {
                "class": footerWrapperCls.value
              }, [renderTNodeJSX2("footer")]), showActions.value && isPoster2.value && vue.createVNode("div", {
                "class": actionsCls.value
              }, [renderTNodeJSX2("actions")])])]);
            };
          }
        });
        var Card = withInstall(_Card);
        var props$d = {
          actions: {
            type: Array
          },
          author: {
            type: [String, Function]
          },
          avatar: {
            type: [String, Object, Function]
          },
          content: {
            type: [String, Function]
          },
          datetime: {
            type: [String, Function]
          },
          quote: {
            type: [String, Function]
          },
          reply: {
            type: [String, Function]
          }
        };
        var _Comment = vue.defineComponent({
          name: "TComment",
          props: props$d,
          setup: function setup() {
            var COMPONENT_NAME2 = usePrefixClass("comment");
            var renderTNodeJSX2 = useTNodeJSX();
            return function() {
              var reply = renderTNodeJSX2("reply");
              var author = renderTNodeJSX2("author");
              var datetime = renderTNodeJSX2("datetime");
              var quote = renderTNodeJSX2("quote");
              var actions = renderTNodeJSX2("actions");
              var content = renderTNodeJSX2("content");
              var avatar = renderTNodeJSX2("avatar");
              var showAuthorDatetime = vue.computed(function() {
                return author || datetime;
              });
              var replyDom = reply ? vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__reply")
              }, [reply]) : null;
              var quoteDom = quote ? vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__quote")
              }, [quote]) : null;
              var avatarDom = avatar ? vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__avatar")
              }, [typeof avatar === "string" ? vue.createVNode("img", {
                "src": avatar,
                "alt": "",
                "class": "".concat(COMPONENT_NAME2.value, "__avatar-image")
              }, null) : avatar]) : null;
              var authorDatetimeDom = showAuthorDatetime.value && vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__author")
              }, [author && vue.createVNode("span", {
                "class": "".concat(COMPONENT_NAME2.value, "__name")
              }, [author]), datetime && vue.createVNode("span", {
                "class": "".concat(COMPONENT_NAME2.value, "__time")
              }, [datetime])]);
              var renderActions = function renderActions2() {
                if (!actions || !actions.length)
                  return null;
                return vue.createVNode("ul", {
                  "class": "".concat(COMPONENT_NAME2.value, "__actions")
                }, [(Array.isArray(actions) ? actions : [actions]).map(function(action, index2) {
                  return vue.createVNode("li", {
                    "key": "action-".concat(index2)
                  }, [action]);
                })]);
              };
              var contentDom = vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__content")
              }, [authorDatetimeDom, vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__detail")
              }, [content]), quoteDom, renderActions()]);
              return vue.createVNode("div", {
                "class": COMPONENT_NAME2.value
              }, [vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__inner")
              }, [avatarDom, contentDom]), replyDom]);
            };
          }
        });
        var Comment$1 = withInstall(_Comment);
        var props$c = {
          asyncLoading: {
            type: [String, Function]
          },
          footer: {
            type: [String, Function]
          },
          header: {
            type: [String, Function]
          },
          layout: {
            type: String,
            "default": "horizontal",
            validator: function validator(val) {
              return ["horizontal", "vertical"].includes(val);
            }
          },
          size: {
            type: String,
            "default": "medium",
            validator: function validator(val) {
              return ["small", "medium", "large"].includes(val);
            }
          },
          split: Boolean,
          stripe: Boolean,
          onLoadMore: Function,
          onScroll: Function
        };
        var LOAD_MORE = "load-more";
        var LOADING = "loading";
        function ownKeys$A(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$z(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$A(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$A(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _List = vue.defineComponent({
          name: "TList",
          props: _objectSpread$z({}, props$c),
          setup: function setup(props2) {
            var _useConfig = useConfig("list"), global2 = _useConfig.global;
            var COMPONENT_NAME2 = usePrefixClass("list");
            var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE;
            var renderTNodeJSX2 = useTNodeJSX();
            var listClass = vue.computed(function() {
              var _ref;
              return ["".concat(COMPONENT_NAME2.value), SIZE.value[props2.size], (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--split"), props2.split), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--stripe"), props2.stripe), _defineProperty$3(_ref, "".concat(COMPONENT_NAME2.value, "--vertical-action"), props2.layout === "vertical"), _ref)];
            });
            var renderContent2 = function renderContent3() {
              var propsHeaderContent = renderTNodeJSX2("header");
              var propsFooterContent = renderTNodeJSX2("footer");
              return [propsHeaderContent && vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__header")
              }, [propsHeaderContent]), vue.createVNode("ul", {
                "class": "".concat(COMPONENT_NAME2.value, "__inner")
              }, [renderTNodeJSX2("default")]), propsFooterContent && vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__footer")
              }, [propsFooterContent])];
            };
            var handleScroll = function handleScroll2(e) {
              var _props2$onScroll;
              var listElement = e.target;
              var scrollTop = listElement.scrollTop, scrollHeight = listElement.scrollHeight, clientHeight = listElement.clientHeight;
              (_props2$onScroll = props2.onScroll) === null || _props2$onScroll === void 0 ? void 0 : _props2$onScroll.call(props2, {
                e,
                scrollTop,
                scrollBottom: scrollHeight - clientHeight - scrollTop
              });
            };
            var loadingClass = vue.computed(function() {
              return typeof props2.asyncLoading === "string" && ["loading", "load-more"].includes(props2.asyncLoading) ? "".concat(COMPONENT_NAME2.value, "__load ").concat(COMPONENT_NAME2.value, "__load--").concat(props2.asyncLoading) : "".concat(COMPONENT_NAME2.value, "__load");
            });
            var renderLoading = function renderLoading2() {
              if (props2.asyncLoading && typeof props2.asyncLoading === "string") {
                if (props2.asyncLoading === LOADING) {
                  return vue.createVNode("div", null, [vue.createVNode(Loading, null, null), vue.createVNode("span", null, [global2.value.loadingText])]);
                }
                if (props2.asyncLoading === LOAD_MORE) {
                  return vue.createVNode("span", null, [global2.value.loadingMoreText]);
                }
              }
              return renderTNodeJSX2("asyncLoading");
            };
            var handleLoadMore = function handleLoadMore2(e) {
              var _props2$onLoadMore;
              if (typeof props2.asyncLoading === "string" && props2.asyncLoading !== LOAD_MORE)
                return;
              (_props2$onLoadMore = props2.onLoadMore) === null || _props2$onLoadMore === void 0 ? void 0 : _props2$onLoadMore.call(props2, {
                e
              });
            };
            return {
              COMPONENT_NAME: COMPONENT_NAME2,
              listClass,
              loadingClass,
              renderLoading,
              renderContent: renderContent2,
              handleScroll,
              handleLoadMore
            };
          },
          render: function render() {
            var listContent = this.renderContent();
            listContent = [listContent, vue.createVNode("div", {
              "class": this.loadingClass,
              "onClick": this.handleLoadMore
            }, [this.renderLoading()])];
            return vue.createVNode("div", {
              "class": this.listClass,
              "onScroll": this.handleScroll
            }, [listContent]);
          }
        });
        var _ListItem = vue.defineComponent({
          name: "TListItem",
          props: props$c,
          setup: function setup() {
            var COMPONENT_NAME2 = usePrefixClass("list-item");
            var renderTNodeJSX2 = useTNodeJSX();
            return function() {
              var propsContent = renderTNodeJSX2("content");
              var propsDefaultContent = renderTNodeJSX2("default");
              var propsActionContent = renderTNodeJSX2("action");
              return vue.createVNode("li", {
                "class": COMPONENT_NAME2.value
              }, [vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "-main")
              }, [propsDefaultContent || propsContent, propsActionContent && vue.createVNode("li", {
                "class": "".concat(COMPONENT_NAME2.value, "__action")
              }, [propsActionContent])])]);
            };
          }
        });
        var props$b = {
          avatar: {
            type: [String, Function]
          },
          description: {
            type: [String, Function]
          },
          image: {
            type: [String, Function]
          },
          title: {
            type: [String, Function]
          }
        };
        var _ListItemMeta = vue.defineComponent({
          name: "TListItemMeta",
          props: props$b,
          setup: function setup(props2, ctx) {
            var COMPONENT_NAME2 = usePrefixClass("list-item__meta");
            var renderContent2 = useContent();
            var renderTNodeJSX2 = useTNodeJSX();
            var renderAvatar = function renderAvatar2() {
              if (props2.avatar || ctx.slots.avatar) {
                console.warn("`avatar` is going to be deprecated, please use `image` instead");
              }
              var thumbnail = renderContent2("avatar", "image");
              if (!thumbnail)
                return;
              if (typeof thumbnail === "string") {
                return vue.createVNode("div", {
                  "class": "".concat(COMPONENT_NAME2.value, "-avatar")
                }, [vue.createVNode("img", {
                  "src": thumbnail
                }, null)]);
              }
              return vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "-avatar")
              }, [thumbnail]);
            };
            return function() {
              var propsTitleContent = renderTNodeJSX2("title");
              var propsDescriptionContent = renderTNodeJSX2("description");
              var listItemMetaContent = [renderAvatar(), vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "-content")
              }, [propsTitleContent && vue.createVNode("h3", {
                "class": "".concat(COMPONENT_NAME2.value, "-title")
              }, [propsTitleContent]), propsDescriptionContent && vue.createVNode("p", {
                "class": "".concat(COMPONENT_NAME2.value, "-description")
              }, [propsDescriptionContent])])];
              return vue.createVNode("div", {
                "class": COMPONENT_NAME2.value
              }, [listItemMetaContent]);
            };
          }
        });
        var List = withInstall(_List);
        var ListItem = withInstall(_ListItem);
        var ListItemMeta = withInstall(_ListItemMeta);
        var PRO_THEME = {
          LINE: "line",
          PLUMP: "plump",
          CIRCLE: "circle"
        };
        var CIRCLE_SIZE = {
          SMALL: "small",
          MEDIUM: "medium",
          LARGE: "large"
        };
        var CIRCLE_SIZE_PX = {
          SMALL: 72,
          MEDIUM: 112,
          LARGE: 160
        };
        var CIRCLE_FONT_SIZE_RATIO = {
          SMALL: 14 / CIRCLE_SIZE_PX.SMALL,
          MEDIUM: 20 / CIRCLE_SIZE_PX.MEDIUM,
          LARGE: 36 / CIRCLE_SIZE_PX.LARGE
        };
        var STATUS_ICON = ["success", "error", "warning"];
        var props$a = {
          color: {
            type: [String, Object, Array],
            "default": ""
          },
          label: {
            type: [String, Boolean, Function],
            "default": true
          },
          percentage: {
            type: Number,
            "default": 0
          },
          size: {
            type: [String, Number],
            "default": "medium"
          },
          status: {
            type: String,
            validator: function validator(val) {
              return ["success", "error", "warning", "active"].includes(val);
            }
          },
          strokeWidth: {
            type: [String, Number]
          },
          theme: {
            type: String,
            "default": "line",
            validator: function validator(val) {
              return ["line", "plump", "circle"].includes(val);
            }
          },
          trackColor: {
            type: String,
            "default": ""
          }
        };
        var _Progress = vue.defineComponent({
          name: "TProgress",
          props: props$a,
          setup: function setup(props2) {
            var renderTNodeJSX2 = useTNodeJSX();
            var COMPONENT_NAME2 = usePrefixClass("progress");
            var statusStyle = vue.computed(function() {
              if (props2.percentage >= 100) {
                return "success";
              }
              return props2.status || "default";
            });
            var trackBgStyle = vue.computed(function() {
              var style = {};
              if (props2.strokeWidth) {
                var height = typeof props2.strokeWidth === "string" ? props2.strokeWidth : "".concat(props2.strokeWidth, "px");
                style.height = height;
                style.borderRadius = height;
              }
              if (props2.trackColor) {
                style.backgroundColor = props2.trackColor;
              }
              return style;
            });
            var barStyle = vue.computed(function() {
              return {
                width: "".concat(props2.percentage, "%"),
                background: props2.color && getBackgroundColor(props2.color)
              };
            });
            var circlePathStyle = vue.computed(function() {
              var strokeColor = _typeof$2(props2.color) === "object" ? "" : props2.color;
              return {
                stroke: strokeColor
              };
            });
            var diameter = vue.computed(function() {
              var diameter2 = CIRCLE_SIZE_PX.MEDIUM;
              if (!props2.size) {
                return diameter2;
              }
              var SMALL = CIRCLE_SIZE.SMALL, LARGE = CIRCLE_SIZE.LARGE, MEDIUM = CIRCLE_SIZE.MEDIUM;
              switch (props2.size) {
                case SMALL:
                  diameter2 = CIRCLE_SIZE_PX.SMALL;
                  break;
                case MEDIUM:
                  diameter2 = CIRCLE_SIZE_PX.MEDIUM;
                  break;
                case LARGE:
                  diameter2 = CIRCLE_SIZE_PX.LARGE;
                  break;
                default:
                  diameter2 = Number(props2.size);
                  break;
              }
              return diameter2;
            });
            var rPoints = vue.computed(function() {
              return diameter.value / 2;
            });
            var radius = vue.computed(function() {
              return rPoints.value - circleStrokeWidth.value / 2;
            });
            var circleStyle = vue.computed(function() {
              if (props2.theme !== PRO_THEME.CIRCLE) {
                return {};
              }
              var fontSize = diameter.value * CIRCLE_FONT_SIZE_RATIO.MEDIUM;
              if (diameter.value <= CIRCLE_SIZE_PX.SMALL) {
                fontSize = diameter.value * CIRCLE_FONT_SIZE_RATIO.SMALL;
              } else if (diameter.value >= CIRCLE_SIZE_PX.LARGE) {
                fontSize = diameter.value * CIRCLE_FONT_SIZE_RATIO.LARGE;
              }
              return {
                width: "".concat(diameter.value, "px"),
                height: "".concat(diameter.value, "px"),
                fontSize: "".concat(fontSize, "px")
              };
            });
            var circleStrokeWidth = vue.computed(function() {
              var defaultWidth = props2.size === CIRCLE_SIZE.SMALL ? 4 : 6;
              return props2.strokeWidth ? Number(props2.strokeWidth) : defaultWidth;
            });
            var strokeDashArr = vue.computed(function() {
              var radius2 = (diameter.value - circleStrokeWidth.value) / 2;
              var perimeter = Math.PI * 2 * radius2;
              var percent = props2.percentage / 100;
              return "".concat(perimeter * percent, "  ").concat(perimeter * (1 - percent));
            });
            var getIconMap = function getIconMap2() {
              var CIRCLE_ICONS = {
                success: check,
                warning: error,
                error: close
              };
              var NORMAL_ICONS = {
                success: checkCircleFilled,
                warning: errorCircleFilled,
                error: closeCircleFilled
              };
              return props2.theme === PRO_THEME.CIRCLE ? CIRCLE_ICONS : NORMAL_ICONS;
            };
            var getLabelContent = function getLabelContent2() {
              var labelContent = "".concat(props2.percentage, "%");
              var status = props2.status || "";
              if (STATUS_ICON.includes(status) && props2.theme !== PRO_THEME.PLUMP) {
                var components2 = getIconMap();
                var component = components2[status];
                if (component) {
                  labelContent = vue.createVNode(component, {
                    "class": ["".concat(COMPONENT_NAME2.value, "__icon")]
                  }, null);
                }
              }
              return labelContent;
            };
            return function() {
              var labelContent = vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__info")
              }, [renderTNodeJSX2("label", getLabelContent())]);
              var PLUMP_SEPARATE = 10;
              var separateClasses = props2.percentage > PLUMP_SEPARATE ? "".concat(COMPONENT_NAME2.value, "--over-ten") : "".concat(COMPONENT_NAME2.value, "--under-ten");
              return vue.createVNode("div", {
                "class": COMPONENT_NAME2.value
              }, [props2.theme === PRO_THEME.LINE && vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "--thin ").concat(COMPONENT_NAME2.value, "--status--").concat(statusStyle.value)
              }, [vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__bar"),
                "style": trackBgStyle.value
              }, [vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__inner"),
                "style": barStyle.value
              }, null)]), labelContent]), props2.theme === PRO_THEME.PLUMP && vue.createVNode("div", {
                "class": ["".concat(COMPONENT_NAME2.value, "__bar ").concat(COMPONENT_NAME2.value, "--plump ").concat(separateClasses), _defineProperty$3({}, "".concat(COMPONENT_NAME2.value, "--status--").concat(statusStyle.value), statusStyle.value)],
                "style": trackBgStyle.value
              }, [vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__inner"),
                "style": barStyle.value
              }, [props2.percentage > PLUMP_SEPARATE && labelContent]), props2.percentage <= PLUMP_SEPARATE && labelContent]), props2.theme === PRO_THEME.CIRCLE && vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "--circle ").concat(COMPONENT_NAME2.value, "--status--").concat(statusStyle.value),
                "style": circleStyle.value
              }, [labelContent, vue.createVNode("svg", {
                "width": diameter.value,
                "height": diameter.value,
                "viewBox": "0 0 ".concat(diameter.value, " ").concat(diameter.value)
              }, [vue.createVNode("circle", {
                "cx": rPoints.value,
                "cy": rPoints.value,
                "r": radius.value,
                "stroke-width": circleStrokeWidth.value,
                "stroke": props2.trackColor,
                "fill": "none",
                "class": ["".concat(COMPONENT_NAME2.value, "__circle-outer")]
              }, null), props2.percentage > 0 && vue.createVNode("circle", {
                "cx": rPoints.value,
                "cy": rPoints.value,
                "r": radius.value,
                "stroke-width": circleStrokeWidth.value,
                "fill": "none",
                "stroke-linecap": "round",
                "class": ["".concat(COMPONENT_NAME2.value, "__circle-inner")],
                "transform": "matrix(0,-1,1,0,0,".concat(diameter.value, ")"),
                "stroke-dasharray": strokeDashArr.value,
                "style": circlePathStyle.value
              }, null)])])]);
            };
          }
        });
        var Progress = withInstall(_Progress);
        var props$9 = {
          animation: {
            type: String,
            validator: function validator(val) {
              return ["gradient", "flashed"].includes(val);
            }
          },
          loading: {
            type: Boolean,
            "default": true
          },
          rowCol: {
            type: Array
          },
          theme: {
            type: String,
            validator: function validator(val) {
              return ["text", "avatar", "paragraph", "avatar-text", "tab", "article"].includes(val);
            }
          }
        };
        function ownKeys$z(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$y(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$z(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$z(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var ThemeMap = {
          text: [1],
          avatar: [{
            type: "circle",
            size: "56px"
          }],
          paragraph: [1, 1, {
            width: "70%"
          }],
          "avatar-text": [[{
            type: "circle"
          }, {
            type: "text",
            height: "32px"
          }]],
          tab: [{
            height: "30px"
          }, {
            height: "200px"
          }],
          article: [{
            type: "rect",
            height: "30px",
            width: "100%"
          }, {
            type: "rect",
            height: "200px",
            width: "100%"
          }, [{
            type: "text",
            height: "30px"
          }, {
            type: "text",
            height: "30px"
          }, {
            type: "text",
            height: "30px"
          }], [{
            type: "text",
            height: "30px"
          }, {
            type: "text",
            height: "30px"
          }], [{
            type: "text",
            height: "30px"
          }, {
            type: "text",
            height: "30px"
          }], [{
            type: "text",
            height: "30px"
          }, {
            type: "text",
            height: "30px"
          }]]
        };
        var getColItemStyle = function getColItemStyle2(obj) {
          var styleName = ["width", "height", "marginRight", "marginLeft", "margin", "size", "background", "backgroundColor"];
          var style = /* @__PURE__ */ Object.create(null);
          styleName.forEach(function(name) {
            if (name in obj) {
              var px = isNumber_1(obj[name]) ? "".concat(obj[name], "px") : obj[name];
              if (name === "size") {
                var _ref = [px, px];
                style.width = _ref[0];
                style.height = _ref[1];
              } else {
                style[name] = px;
              }
            }
          });
          return style;
        };
        var _Skeleton = vue.defineComponent({
          name: "TSkeleton",
          props: _objectSpread$y({}, props$9),
          setup: function setup(props2, _ref2) {
            var slots = _ref2.slots;
            var COMPONENT_NAME2 = usePrefixClass("skeleton");
            var renderContent2 = useContent();
            var getColItemClass = function getColItemClass2(obj) {
              return ["".concat(COMPONENT_NAME2.value, "__col"), "".concat(COMPONENT_NAME2.value, "--type-").concat(obj.type || "text"), _defineProperty$3({}, "".concat(COMPONENT_NAME2.value, "--animation-").concat(props2.animation), props2.animation)];
            };
            var renderCols = function renderCols2(_cols) {
              var cols = [];
              if (Array.isArray(_cols)) {
                cols = _cols;
              } else if (isNumber_1(_cols)) {
                cols = new Array(_cols).fill({
                  type: "text"
                });
              } else {
                cols = [_cols];
              }
              return cols.map(function(obj) {
                return vue.createVNode("div", {
                  "class": getColItemClass(obj),
                  "style": getColItemStyle(obj)
                }, [isFunction_1(obj.content) ? obj.content(vue.h) : obj.content]);
              });
            };
            var renderRowCol = function renderRowCol2(_rowCol) {
              var rowCol = _rowCol || props2.rowCol;
              var getBlockClass = function getBlockClass2() {
                return ["".concat(COMPONENT_NAME2.value, "__row")];
              };
              return rowCol.map(function(item) {
                return vue.createVNode("div", {
                  "class": getBlockClass()
                }, [renderCols(item)]);
              });
            };
            return function() {
              var content = renderContent2("default", "content");
              if (slots["default"] && !props2.loading) {
                return vue.createVNode("div", null, [content]);
              }
              if (!props2.loading) {
                return;
              }
              var children = [];
              if (props2.theme) {
                children.push(renderRowCol(ThemeMap[props2.theme]));
              }
              if (props2.rowCol) {
                children.push(renderRowCol(props2.rowCol));
              }
              if (!props2.theme && !props2.rowCol) {
                children.push(renderRowCol([1, 1, 1, {
                  width: "70%"
                }]));
              }
              return vue.createVNode("div", {
                "class": COMPONENT_NAME2.value
              }, [children]);
            };
          }
        });
        var Skeleton = withInstall(_Skeleton);
        var props$8 = {
          animation: {
            type: String,
            "default": "slide",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["slide", "fade"].includes(val);
            }
          },
          autoplay: {
            type: Boolean,
            "default": true
          },
          current: {
            type: Number,
            "default": 0
          },
          defaultCurrent: {
            type: Number,
            "default": 0
          },
          direction: {
            type: String,
            "default": "horizontal",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["horizontal", "vertical"].includes(val);
            }
          },
          duration: {
            type: Number,
            "default": 300
          },
          height: {
            type: Number
          },
          interval: {
            type: Number,
            "default": 5e3
          },
          loop: {
            type: Boolean,
            "default": true
          },
          navigation: {
            type: [Object, Function]
          },
          stopOnHover: {
            type: Boolean,
            "default": true
          },
          theme: {
            type: String,
            "default": "light",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["light", "dark"].includes(val);
            }
          },
          trigger: {
            type: String,
            "default": "hover",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["hover", "click"].includes(val);
            }
          },
          type: {
            type: String,
            "default": "default",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["default", "card"].includes(val);
            }
          },
          onChange: Function
        };
        function ownKeys$y(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$x(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$y(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$y(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var swiperItemProps = {
          index: {
            type: Number
          },
          currentIndex: {
            type: Number
          },
          isSwitching: {
            type: Boolean,
            "default": false
          },
          getWrapAttribute: {
            type: Function
          },
          swiperItemLength: {
            type: Number,
            "default": 0
          }
        };
        var CARD_SCALE = 210 / 332;
        var itemWidth = 0.415;
        var _SwiperItem = vue.defineComponent({
          name: "TSwiperItem",
          props: _objectSpread$x(_objectSpread$x({}, props$8), swiperItemProps),
          setup: function setup(props2, _ref) {
            var slots = _ref.slots;
            var prefix = usePrefixClass();
            var active = vue.computed(function() {
              return props2.index === props2.currentIndex;
            });
            var disposeIndex = vue.computed(function() {
              if (props2.type !== "card")
                return 0;
              if (props2.currentIndex === 0 && props2.index === props2.swiperItemLength - 1) {
                return -1;
              }
              if (props2.currentIndex === props2.swiperItemLength - 1 && props2.index === 0) {
                return props2.swiperItemLength;
              }
              if (props2.index < props2.currentIndex - 1 && props2.currentIndex - props2.index >= props2.swiperItemLength / 2) {
                return props2.swiperItemLength + 1;
              }
              if (props2.index > props2.currentIndex + 1 && props2.index - props2.currentIndex >= props2.swiperItemLength / 2) {
                return -2;
              }
              return props2.index;
            });
            var translateX = vue.computed(function() {
              if (props2.type !== "card")
                return 0;
              var wrapWidth = props2.getWrapAttribute("offsetWidth") || 0;
              var translateIndex = !active.value && props2.swiperItemLength > 2 ? disposeIndex.value : props2.index;
              var inStage = Math.abs(translateIndex - props2.currentIndex) <= 1;
              if (inStage) {
                return wrapWidth * ((translateIndex - props2.currentIndex) * (1 - itemWidth * CARD_SCALE) - itemWidth + 1) / 2;
              }
              if (translateIndex < props2.currentIndex) {
                return -itemWidth * (1 + CARD_SCALE) * wrapWidth / 2;
              }
              return (2 + itemWidth * (CARD_SCALE - 1)) * wrapWidth / 2;
            });
            var zIndex = vue.computed(function() {
              if (props2.type !== "card")
                return 0;
              var translateIndex = !active.value && props2.swiperItemLength > 2 ? disposeIndex.value : props2.index;
              var isActivity = translateIndex === props2.currentIndex;
              var inStage = Math.round(Math.abs(translateIndex - props2.currentIndex)) <= 1;
              if (isActivity) {
                return 2;
              }
              if (inStage) {
                return 1;
              }
              return 0;
            });
            var itemStyle = vue.computed(function() {
              if (props2.animation === "fade") {
                return {
                  opacity: active.value ? 1 : 0,
                  transition: props2.isSwitching ? "opacity ".concat(props2.duration / 1e3, "s") : ""
                };
              }
              if (props2.type === "card") {
                var translateIndex = !active.value && props2.swiperItemLength > 2 ? disposeIndex.value : props2.index;
                var isActivity = translateIndex === props2.currentIndex;
                return {
                  transform: "translateX(".concat(translateX.value, "px) scale(").concat(isActivity ? 1 : CARD_SCALE, ")"),
                  transition: "transform ".concat(props2.duration / 1e3, "s ease"),
                  zIndex: zIndex.value
                };
              }
              return {};
            });
            return function() {
              var _ref2, _slots$default;
              return vue.createVNode("div", {
                "class": ["".concat(prefix.value, "-swiper__container__item"), (_ref2 = {}, _defineProperty$3(_ref2, "".concat(prefix.value, "-swiper__card"), props2.type === "card"), _defineProperty$3(_ref2, "".concat(prefix.value, "-is-active"), props2.type === "card" && active.value), _defineProperty$3(_ref2, "".concat(prefix.value, "-swiper__fade"), props2.animation === "fade"), _ref2)],
                "style": itemStyle.value
              }, [((_slots$default = slots["default"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots, {})) || []]);
            };
          }
        });
        function ownKeys$x(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$w(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$x(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$x(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot$8(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var defaultNavigation = {
          placement: "inside",
          showSlideBtn: "always",
          size: "medium",
          type: "bars"
        };
        var _Swiper = vue.defineComponent({
          name: "TSwiper",
          props: _objectSpread$w({}, props$8),
          setup: function setup(props2) {
            var prefix = usePrefixClass();
            var swiperTimer = 0;
            var swiperSwitchingTimer = 0;
            var isBeginToEnd = false;
            var isEndToBegin = false;
            var currentIndex = vue.ref(props2.current || props2.defaultCurrent);
            var isHovering = vue.ref(false);
            var isSwitching = vue.ref(false);
            var showArrow = vue.ref(false);
            var swiperWrap = vue.ref();
            var getChildComponentByName = useChildComponentSlots();
            var swiperItemLength = vue.ref(0);
            var navigationConfig = vue.computed(function() {
              return _objectSpread$w(_objectSpread$w({}, defaultNavigation), vue.isVNode(props2.navigation) ? {} : props2.navigation);
            });
            var isEnd = vue.computed(function() {
              if (props2.type === "card") {
                return !props2.loop && currentIndex.value + 1 >= swiperItemLength.value;
              }
              return !props2.loop && currentIndex.value + 2 >= swiperItemLength.value;
            });
            var propsToUpdateSetTimer = vue.computed(function() {
              return [props2.autoplay, currentIndex.value, props2.duration, props2.interval];
            });
            var swiperWrapClass = vue.computed(function() {
              var _ref;
              return _ref = {}, _defineProperty$3(_ref, "".concat(prefix.value, "-swiper__wrap"), true), _defineProperty$3(_ref, "".concat(prefix.value, "-swiper--inside"), navigationConfig.value.placement === "inside"), _defineProperty$3(_ref, "".concat(prefix.value, "-swiper--outside"), navigationConfig.value.placement === "outside"), _defineProperty$3(_ref, "".concat(prefix.value, "-swiper--vertical"), props2.direction === "vertical"), _defineProperty$3(_ref, "".concat(prefix.value, "-swiper--large"), navigationConfig.value.size === "large"), _defineProperty$3(_ref, "".concat(prefix.value, "-swiper--small"), navigationConfig.value.size === "small"), _ref;
            });
            var containerStyle = vue.computed(function() {
              var offsetHeight = props2.height ? "".concat(props2.height, "px") : "".concat(getWrapAttribute("offsetHeight"), "px");
              if (props2.type === "card" || props2.animation === "fade") {
                return {
                  height: offsetHeight
                };
              }
              if (props2.animation === "slide") {
                var style = {
                  transition: isSwitching.value ? "transform ".concat(props2.duration / 1e3, "s ease") : ""
                };
                var active = currentIndex.value;
                if (swiperItemLength.value > 1) {
                  active += 1;
                  if (isBeginToEnd || isEndToBegin) {
                    style.transition = "";
                  }
                }
                if (props2.direction === "vertical") {
                  style.height = offsetHeight;
                  style.transform = "translate3d(0, -".concat(active * 100, "%, 0px)");
                } else {
                  style.transform = "translate3d(-".concat(active * 100, "%, 0px, 0px)");
                }
                ["msTransform", "WebkitTransform"].forEach(function(key) {
                  style[key] = style.transform;
                });
                return style;
              }
              return {};
            });
            var swiperItems = function swiperItems2() {
              var swiperItemList = getChildComponentByName("TSwiperItem");
              swiperItemLength.value = swiperItemList.length;
              var items = swiperItemList.map(function(swiperItem, index2) {
                var _slot;
                var p = _objectSpread$w(_objectSpread$w({}, props2), swiperItem.props);
                return vue.createVNode(_SwiperItem, vue.mergeProps({
                  "index": index2,
                  "currentIndex": currentIndex.value,
                  "isSwitching": isSwitching.value,
                  "getWrapAttribute": getWrapAttribute,
                  "swiperItemLength": swiperItemLength.value
                }, p), _isSlot$8(_slot = swiperItem.children["default"]()) ? _slot : {
                  "default": function _default() {
                    return [_slot];
                  }
                });
              });
              if (props2.animation === "slide" && items.length > 1) {
                var first = vue.cloneVNode(items[0]);
                var last2 = vue.cloneVNode(items[items.length - 1]);
                items.unshift(last2);
                items.push(first);
              }
              return items;
            };
            var swiperTo = function swiperTo2(index2, context) {
              var _props2$onChange;
              var targetIndex = index2 % swiperItemLength.value;
              (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 ? void 0 : _props2$onChange.call(props2, targetIndex, context);
              isSwitching.value = true;
              if (props2.animation === "slide" && swiperItemLength.value > 1) {
                targetIndex = index2;
                isBeginToEnd = false;
                isEndToBegin = false;
                if (index2 >= swiperItemLength.value) {
                  clearTimer();
                  setTimeout(function() {
                    isEndToBegin = true;
                    currentIndex.value = 0;
                  }, props2.duration);
                }
                if (currentIndex.value === 0) {
                  if (swiperItemLength.value > 2 && index2 !== 1 || swiperItemLength.value === 2 && index2 === 0) {
                    targetIndex = -1;
                    clearTimer();
                    setTimeout(function() {
                      isBeginToEnd = true;
                      currentIndex.value = swiperItemLength.value - 1;
                    }, props2.duration);
                  }
                }
              }
              currentIndex.value = targetIndex;
            };
            var clearTimer = function clearTimer2() {
              if (swiperTimer) {
                clearTimeout(swiperTimer);
                swiperTimer = 0;
              }
            };
            var setTimer = function setTimer2() {
              if (props2.autoplay && props2.interval > 0) {
                clearTimer();
                swiperTimer = setTimeout(function() {
                  swiperTo(currentIndex.value + 1, {
                    source: "autoplay"
                  });
                }, currentIndex.value === 0 ? props2.interval - (props2.duration + 50) : props2.interval);
              }
            };
            var onMouseEnter = function onMouseEnter2() {
              isHovering.value = true;
              if (props2.stopOnHover) {
                clearTimer();
              }
              if (navigationConfig.value.showSlideBtn === "hover") {
                showArrow.value = true;
              }
            };
            var onMouseLeave = function onMouseLeave2() {
              isHovering.value = false;
              if (!isEnd.value) {
                setTimer();
              }
              if (navigationConfig.value.showSlideBtn === "hover") {
                showArrow.value = false;
              }
            };
            var onMouseEnterNavigationItem = function onMouseEnterNavigationItem2(i2) {
              swiperTo(i2, {
                source: "hover"
              });
            };
            var onClickNavigationItem = function onClickNavigationItem2(i2) {
              swiperTo(i2, {
                source: "click"
              });
            };
            var goNext = function goNext2(context) {
              if (isSwitching.value)
                return;
              if (props2.type === "card") {
                return swiperTo(currentIndex.value + 1 >= swiperItemLength.value ? 0 : currentIndex.value + 1, context);
              }
              return swiperTo(currentIndex.value + 1, context);
            };
            var goPrevious = function goPrevious2(context) {
              if (isSwitching.value)
                return;
              if (currentIndex.value - 1 < 0) {
                if (props2.animation === "slide" && swiperItemLength.value === 2) {
                  return swiperTo(0, context);
                }
                return swiperTo(swiperItemLength.value - 1, context);
              }
              return swiperTo(currentIndex.value - 1, context);
            };
            var getWrapAttribute = function getWrapAttribute2(attr) {
              var _swiperWrap$value, _swiperWrap$value$par;
              return (_swiperWrap$value = swiperWrap.value) === null || _swiperWrap$value === void 0 ? void 0 : (_swiperWrap$value$par = _swiperWrap$value.parentNode) === null || _swiperWrap$value$par === void 0 ? void 0 : _swiperWrap$value$par[attr];
            };
            var renderPagination = function renderPagination2() {
              var fractionIndex = currentIndex.value + 1 > swiperItemLength.value ? 1 : currentIndex.value + 1;
              return vue.createVNode("div", {
                "class": "".concat(prefix.value, "-swiper__arrow")
              }, [vue.createVNode("div", {
                "class": "".concat(prefix.value, "-swiper__arrow-left"),
                "onClick": function onClick() {
                  return goPrevious({
                    source: "click"
                  });
                }
              }, [vue.createVNode(chevronLeft, null, null)]), vue.createVNode("div", {
                "class": "".concat(prefix.value, "-swiper__navigation-text-fraction")
              }, [fractionIndex, "/", swiperItemLength.value]), vue.createVNode("div", {
                "class": "".concat(prefix.value, "-swiper__arrow-right"),
                "onClick": function onClick() {
                  return goNext({
                    source: "click"
                  });
                }
              }, [vue.createVNode(chevronRight, null, null)])]);
            };
            var renderArrow = function renderArrow2() {
              if (!showArrow.value)
                return null;
              return vue.createVNode("div", {
                "class": ["".concat(prefix.value, "-swiper__arrow"), "".concat(prefix.value, "-swiper__arrow--default")]
              }, [vue.createVNode("div", {
                "class": "".concat(prefix.value, "-swiper__arrow-left"),
                "onClick": function onClick() {
                  return goPrevious({
                    source: "click"
                  });
                }
              }, [vue.createVNode(chevronLeft, null, null)]), vue.createVNode("div", {
                "class": "".concat(prefix.value, "-swiper__arrow-right"),
                "onClick": function onClick() {
                  return goNext({
                    source: "click"
                  });
                }
              }, [vue.createVNode(chevronRight, null, null)])]);
            };
            var renderNavigation = function renderNavigation2() {
              if (vue.isVNode(props2.navigation))
                return props2.navigation;
              if (navigationConfig.value.type === "fraction") {
                return vue.createVNode("div", {
                  "class": ["".concat(prefix.value, "-swiper__navigation"), "".concat(prefix.value, "-swiper__navigation--fraction")]
                }, [renderPagination()]);
              }
              var swiperItemList = getChildComponentByName("TSwiperItem");
              return vue.createVNode("ul", {
                "class": ["".concat(prefix.value, "-swiper__navigation"), _defineProperty$3({}, "".concat(prefix.value, "-swiper__navigation-bars"), navigationConfig.value.type === "bars")]
              }, [swiperItemList.map(function(_, i2) {
                return vue.createVNode("li", {
                  "key": i2,
                  "class": ["".concat(prefix.value, "-swiper__navigation-item"), _defineProperty$3({}, "".concat(prefix.value, "-is-active"), i2 === currentIndex.value)],
                  "onMouseenter": function onMouseenter() {
                    return onMouseEnterNavigationItem(i2);
                  },
                  "onClick": function onClick() {
                    return onClickNavigationItem(i2);
                  }
                }, [vue.createVNode("span", null, null)]);
              })]);
            };
            var renderSwiperItems = function renderSwiperItems2() {
              return swiperItems();
            };
            vue.watch(function() {
              return propsToUpdateSetTimer.value;
            }, function() {
              setTimer();
            });
            vue.watch(function() {
              return isSwitching.value;
            }, function() {
              if (isSwitching.value) {
                if (swiperSwitchingTimer)
                  clearTimeout(swiperSwitchingTimer);
                swiperSwitchingTimer = setTimeout(function() {
                  isSwitching.value = false;
                  swiperSwitchingTimer = 0;
                  if (isEnd.value) {
                    clearTimer();
                  }
                }, props2.duration + 50);
              }
            });
            vue.watch(function() {
              return props2.current;
            }, function() {
              swiperTo(props2.current, {
                source: "autoplay"
              });
            });
            vue.onMounted(function() {
              setTimer();
              showArrow.value = navigationConfig.value.showSlideBtn === "always";
            });
            return function() {
              var _ref4;
              return vue.createVNode("div", {
                "class": ["".concat(prefix.value, "-swiper")],
                "onMouseenter": onMouseEnter,
                "onMouseLeave": onMouseLeave,
                "ref": swiperWrap
              }, [vue.createVNode("div", {
                "class": swiperWrapClass.value
              }, [vue.createVNode("div", {
                "class": ["".concat(prefix.value, "-swiper__content"), (_ref4 = {}, _defineProperty$3(_ref4, "".concat(prefix.value, "-swiper-fade"), props2.animation === "fade"), _defineProperty$3(_ref4, "".concat(prefix.value, "-swiper-card"), props2.type === "card"), _ref4)]
              }, [vue.createVNode("div", {
                "class": "".concat(prefix.value, "-swiper__container"),
                "style": containerStyle.value
              }, [renderSwiperItems()])]), renderNavigation(), renderArrow()])]);
            };
          }
        });
        var Swiper = withInstall(_Swiper);
        var SwiperItem = withInstall(_SwiperItem);
        var baseTableProps = {
          allowResizeColumnWidth: Boolean,
          bordered: Boolean,
          bottomContent: {
            type: [String, Function]
          },
          columns: {
            type: Array,
            "default": function _default() {
              return [];
            }
          },
          data: {
            type: Array,
            "default": function _default() {
              return [];
            }
          },
          disableDataPage: Boolean,
          empty: {
            type: [String, Function],
            "default": ""
          },
          firstFullRow: {
            type: [String, Function]
          },
          fixedRows: {
            type: Array
          },
          footData: {
            type: Array,
            "default": function _default() {
              return [];
            }
          },
          footerAffixedBottom: Boolean,
          footerAffixProps: {
            type: Object
          },
          headerAffixedTop: Boolean,
          headerAffixProps: {
            type: Object
          },
          height: {
            type: [String, Number]
          },
          hover: Boolean,
          lastFullRow: {
            type: [String, Function]
          },
          loading: {
            type: [Boolean, Function],
            "default": void 0
          },
          loadingProps: {
            type: Object
          },
          maxHeight: {
            type: [String, Number]
          },
          pagination: {
            type: Object
          },
          rowAttributes: {
            type: [Object, Array, Function]
          },
          rowClassName: {
            type: [String, Object, Array, Function]
          },
          rowKey: {
            type: String,
            "default": "id",
            required: true
          },
          rowspanAndColspan: {
            type: Function
          },
          scroll: {
            type: Object
          },
          size: {
            type: String,
            "default": "medium",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["small", "medium", "large"].includes(val);
            }
          },
          stripe: Boolean,
          tableContentWidth: {
            type: String,
            "default": ""
          },
          tableLayout: {
            type: String,
            "default": "fixed",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["auto", "fixed"].includes(val);
            }
          },
          topContent: {
            type: [String, Function]
          },
          verticalAlign: {
            type: String,
            "default": "middle",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["top", "middle", "bottom"].includes(val);
            }
          },
          onCellClick: Function,
          onPageChange: Function,
          onRowClick: Function,
          onRowDblclick: Function,
          onRowMousedown: Function,
          onRowMouseenter: Function,
          onRowMouseleave: Function,
          onRowMouseover: Function,
          onRowMouseup: Function,
          onScroll: Function,
          onScrollX: Function,
          onScrollY: Function
        };
        function getNodeDepth(columns, depthMap) {
          var depth = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
          var maxDepth = depth;
          for (var i2 = 0, len = columns.length; i2 < len; i2++) {
            var _col$children;
            var col = columns[i2];
            depthMap.set(col, depth);
            if (col !== null && col !== void 0 && (_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
              var deep = getNodeDepth(col.children, depthMap, depth + 1);
              if (deep > maxDepth) {
                maxDepth = deep;
              }
            }
          }
          return maxDepth;
        }
        function getChildrenNodeWidth(node) {
          var count = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
          var countNew = count;
          var childrenList = (node === null || node === void 0 ? void 0 : node.children) || [];
          for (var i2 = 0, len = childrenList.length; i2 < len; i2++) {
            var item = childrenList[i2];
            if (item.children) {
              countNew = getChildrenNodeWidth(item, countNew);
            } else {
              countNew += 1;
            }
          }
          return countNew;
        }
        function getThRowspanAndColspan(columns) {
          var depthMap = /* @__PURE__ */ new Map();
          var columnsDepth = getNodeDepth(columns, depthMap);
          var rowspanAndColspanMap = /* @__PURE__ */ new Map();
          var loop = function loop2(nodes, leafColumns2) {
            for (var i2 = 0, len = nodes.length; i2 < len; i2++) {
              var _col$children2;
              var col = nodes[i2];
              var rowspan = col.children ? 1 : columnsDepth - depthMap.get(col) + 1;
              var colspan = col.children ? getChildrenNodeWidth(col) : 1;
              var span = {};
              rowspan > 1 && (span.rowspan = rowspan);
              colspan > 1 && (span.colspan = colspan);
              rowspanAndColspanMap.set(col, span);
              if (col !== null && col !== void 0 && (_col$children2 = col.children) !== null && _col$children2 !== void 0 && _col$children2.length) {
                loop2(col.children, leafColumns2);
              } else {
                leafColumns2.push(col);
              }
            }
          };
          var leafColumns = [];
          loop(columns, leafColumns);
          return {
            rowspanAndColspanMap,
            leafColumns
          };
        }
        function getThList(columns) {
          var loop = function loop2(nodes, thRows) {
            var _children;
            var thRowData = [];
            var children = [];
            for (var i2 = 0, len = nodes.length; i2 < len; i2++) {
              var _node$children;
              var node = nodes[i2];
              var thList = [node];
              thRowData = thRowData.concat(thList);
              if (node !== null && node !== void 0 && (_node$children = node.children) !== null && _node$children !== void 0 && _node$children.length) {
                children = children.concat(node.children);
              }
            }
            if ((_children = children) !== null && _children !== void 0 && _children.length) {
              loop2(children, thRows);
            }
            thRows.push(thRowData);
            return thRowData;
          };
          var list = [];
          loop(columns, list);
          list = list.reverse();
          return list;
        }
        function useClassName() {
          var classPrefix2 = usePrefixClass();
          var classNames = {
            classPrefix: classPrefix2,
            tableBaseClass: {
              table: "".concat(classPrefix2.value, "-table"),
              body: "".concat(classPrefix2.value, "-table__body"),
              overflowVisible: "".concat(classPrefix2.value, "-table--overflow-visible"),
              content: "".concat(classPrefix2.value, "-table__content"),
              topContent: "".concat(classPrefix2.value, "-table__top-content"),
              bottomContent: "".concat(classPrefix2.value, "-table__bottom-content"),
              tdLastRow: "".concat(classPrefix2.value, "-table__td-last-row"),
              tdFirstCol: "".concat(classPrefix2.value, "-table__td-first-col"),
              thCellInner: "".concat(classPrefix2.value, "-table__th-cell-inner"),
              cellEditable: "".concat(classPrefix2.value, "-table__cell--editable"),
              cellEditWrap: "".concat(classPrefix2.value, "-table__cell-wrap"),
              bordered: "".concat(classPrefix2.value, "-table--bordered"),
              striped: "".concat(classPrefix2.value, "-table--striped"),
              hover: "".concat(classPrefix2.value, "-table--hoverable"),
              loading: "".concat(classPrefix2.value, "-table--loading"),
              rowspanAndColspan: "".concat(classPrefix2.value, "-table--rowspan-colspan"),
              empty: "".concat(classPrefix2.value, "-table__empty"),
              emptyRow: "".concat(classPrefix2.value, "-table__empty-row"),
              headerFixed: "".concat(classPrefix2.value, "-table--header-fixed"),
              columnFixed: "".concat(classPrefix2.value, "-table--column-fixed"),
              widthOverflow: "".concat(classPrefix2.value, "-table--width-overflow"),
              multipleHeader: "".concat(classPrefix2.value, "-table--multiple-header"),
              affixedHeader: "".concat(classPrefix2.value, "-table--affixed-header"),
              affixedHeaderElm: "".concat(classPrefix2.value, "-table__affixed-header-elm"),
              scrollbarDivider: "".concat(classPrefix2.value, "-table__scroll-bar-divider"),
              fullHeight: "".concat(classPrefix2.value, "-table--full-height")
            },
            tdAlignClasses: {
              left: "".concat(classPrefix2.value, "-align-left"),
              right: "".concat(classPrefix2.value, "-align-right"),
              center: "".concat(classPrefix2.value, "-align-center")
            },
            tableHeaderClasses: {
              header: "".concat(classPrefix2.value, "-table__header"),
              thBordered: "".concat(classPrefix2.value, "-table__header-th--bordered"),
              fixed: "".concat(classPrefix2.value, "-table__header--fixed"),
              multipleHeader: "".concat(classPrefix2.value, "-table__header--multiple")
            },
            tableFooterClasses: {
              footer: "".concat(classPrefix2.value, "-table__footer"),
              fixed: "".concat(classPrefix2.value, "-table__footer--fixed")
            },
            tableAlignClasses: {
              top: "".concat(classPrefix2.value, "-vertical-align-top"),
              middle: "".concat(classPrefix2.value, "-vertical-align-middle"),
              bottom: "".concat(classPrefix2.value, "-vertical-align-bottom")
            },
            tableRowFixedClasses: {
              top: "".concat(classPrefix2.value, "-table__row--fixed-top"),
              bottom: "".concat(classPrefix2.value, "-table__row--fixed-bottom"),
              firstBottom: "".concat(classPrefix2.value, "-table__row--fixed-bottom-first"),
              withoutBorderBottom: "".concat(classPrefix2.value, "-table__row--without-border-bottom")
            },
            tableColFixedClasses: {
              left: "".concat(classPrefix2.value, "-table__cell--fixed-left"),
              right: "".concat(classPrefix2.value, "-table__cell--fixed-right"),
              lastLeft: "".concat(classPrefix2.value, "-table__cell--fixed-left-last"),
              firstRight: "".concat(classPrefix2.value, "-table__cell--fixed-right-first"),
              leftShadow: "".concat(classPrefix2.value, "-table__content--scrollable-to-left"),
              rightShadow: "".concat(classPrefix2.value, "-table__content--scrollable-to-right")
            },
            tableLayoutClasses: {
              auto: "".concat(classPrefix2.value, "-table--layout-auto"),
              fixed: "".concat(classPrefix2.value, "-table--layout-fixed")
            },
            tdEllipsisClass: "".concat(classPrefix2.value, "-table-td--ellipsis"),
            tableFullRowClasses: {
              base: "".concat(classPrefix2.value, "-table__row--full"),
              innerFullRow: "".concat(classPrefix2.value, "-table__row-full-inner"),
              innerFullElement: "".concat(classPrefix2.value, "-table__row-full-element"),
              firstFullRow: "".concat(classPrefix2.value, "-table__first-full-row"),
              lastFullRow: "".concat(classPrefix2.value, "-table__last-full-row")
            },
            tableExpandClasses: {
              iconBox: "".concat(classPrefix2.value, "-table__expand-box"),
              iconCell: "".concat(classPrefix2.value, "-table__expandable-icon-cell"),
              row: "".concat(classPrefix2.value, "-table__expanded-row"),
              rowInner: "".concat(classPrefix2.value, "-table__expanded-row-inner"),
              expanded: "".concat(classPrefix2.value, "-table__row--expanded"),
              collapsed: "".concat(classPrefix2.value, "-table__row--collapsed")
            },
            tableSortClasses: {
              sortable: "".concat(classPrefix2.value, "-table__cell--sortable"),
              title: "".concat(classPrefix2.value, "-table__cell--title"),
              trigger: "".concat(classPrefix2.value, "-table__cell--sort-trigger"),
              doubleIcon: "".concat(classPrefix2.value, "-table__double-icons"),
              sortIcon: "".concat(classPrefix2.value, "-table__sort-icon"),
              iconDirection: {
                asc: "".concat(classPrefix2.value, "-table-sort-asc"),
                desc: "".concat(classPrefix2.value, "-table-sort-desc")
              },
              iconActive: "".concat(classPrefix2.value, "-table__sort-icon--active"),
              iconDefault: "".concat(classPrefix2.value, "-icon-sort--default")
            },
            tableSelectedClasses: {
              selected: "".concat(classPrefix2.value, "-table__row--selected"),
              disabled: "".concat(classPrefix2.value, "-table__row--disabled")
            },
            tableFilterClasses: {
              filterable: "".concat(classPrefix2.value, "-table__cell--filterable"),
              popup: "".concat(classPrefix2.value, "-table__filter-pop"),
              icon: "".concat(classPrefix2.value, "-table__filter-icon"),
              popupContent: "".concat(classPrefix2.value, "-table__filter-pop-content"),
              result: "".concat(classPrefix2.value, "-table__filter-result"),
              inner: "".concat(classPrefix2.value, "-table__row-filter-inner"),
              bottomButtons: "".concat(classPrefix2.value, "-table__filter--bottom-buttons"),
              contentInner: "".concat(classPrefix2.value, "-table__filter-pop-content-inner"),
              iconWrap: "".concat(classPrefix2.value, "-table__filter-icon-wrap")
            },
            asyncLoadingClass: "".concat(classPrefix2.value, "-table__async-loading"),
            isFocusClass: "".concat(classPrefix2.value, "-is-focus"),
            isLoadingClass: "".concat(classPrefix2.value, "-is-loading"),
            isLoadMoreClass: "".concat(classPrefix2.value, "-is-load-more"),
            tableTreeClasses: {
              col: "".concat(classPrefix2.value, "-table__tree-col"),
              inlineCol: "".concat(classPrefix2.value, "-table__tree-col--inline"),
              icon: "".concat(classPrefix2.value, "-table__tree-op-icon")
            },
            tableDraggableClasses: {
              rowDraggable: "".concat(classPrefix2.value, "-table--row-draggable"),
              rowHandlerDraggable: "".concat(classPrefix2.value, "-table--row-handler-draggable"),
              colDraggable: "".concat(classPrefix2.value, "-table--col-draggable"),
              handle: "".concat(classPrefix2.value, "-table__handle-draggable"),
              ghost: "".concat(classPrefix2.value, "-table__ele--draggable-ghost"),
              chosen: "".concat(classPrefix2.value, "-table__ele--draggable-chosen"),
              dragging: "".concat(classPrefix2.value, "-table__ele--draggable-dragging")
            },
            virtualScrollClasses: {
              cursor: "".concat(classPrefix2.value, "-table__virtual-scroll-cursor"),
              header: "".concat(classPrefix2.value, "-table__virtual-scroll-header")
            },
            positiveRotate90: "".concat(classPrefix2.value, "-positive-rotate-90"),
            negativeRotate180: "".concat(classPrefix2.value, "-negative-rotate-180")
          };
          return classNames;
        }
        function ownKeys$w(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$v(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$w(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$w(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot$7(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var TEllipsis = vue.defineComponent({
          name: "TEllipsis",
          props: {
            content: {
              type: [String, Function]
            },
            "default": {
              type: [String, Function]
            },
            popupContent: {
              type: [String, Number, Function]
            },
            placement: String,
            attach: Function,
            popupProps: Object,
            zIndex: Number
          },
          setup: function setup() {
            var _useConfig = useConfig(), classPrefix2 = _useConfig.classPrefix;
            var root2 = vue.ref();
            var isOverflow = vue.ref(false);
            var ellipsisClasses = vue.computed(function() {
              return ["".concat(classPrefix2.value, "-table__ellipsis"), "".concat(classPrefix2.value, "-text-ellipsis")];
            });
            var onTriggerMouseenter = function onTriggerMouseenter2() {
              if (!root2.value)
                return;
              isOverflow.value = isNodeOverflow(root2.value);
            };
            var onTriggerMouseleave = function onTriggerMouseleave2() {
              isOverflow.value = isNodeOverflow(root2.value);
            };
            var onMouseAround = debounce_1(function(e) {
              e.type === "mouseleave" ? onTriggerMouseleave() : onTriggerMouseenter();
            }, 80);
            return {
              root: root2,
              isOverflow,
              ellipsisClasses,
              onMouseAround
            };
          },
          render: function render() {
            var cellNode = renderContent(this, "default", "content");
            var ellipsisContent = vue.createVNode("div", {
              "ref": "root",
              "class": this.ellipsisClasses,
              "onMouseenter": this.onMouseAround,
              "onMouseleave": this.onMouseAround
            }, [cellNode]);
            var content = null;
            if (this.isOverflow) {
              var rProps = _objectSpread$v({
                content: this.popupContent || function() {
                  return cellNode;
                },
                destroyOnClose: true,
                zIndex: this.zIndex,
                attach: this.attach,
                placement: this.placement
              }, this.popupProps);
              content = vue.createVNode(Popup, rProps, _isSlot$7(ellipsisContent) ? ellipsisContent : {
                "default": function _default() {
                  return [ellipsisContent];
                }
              });
            } else {
              content = ellipsisContent;
            }
            return content;
          }
        });
        function ownKeys$v(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$u(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$v(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$v(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot$6(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        function renderTitle(slots, col, index2) {
          var params = {
            col,
            colIndex: index2
          };
          if (isFunction_1(col.title)) {
            return col.title(vue.h, params);
          }
          if (isString_1(col.title) && slots[col.title]) {
            return slots[col.title](params);
          }
          if (isFunction_1(col.render)) {
            return col.render(vue.h, _objectSpread$u(_objectSpread$u({}, params), {}, {
              type: "title",
              row: {},
              rowIndex: -1
            })) || col.title;
          }
          return col.title;
        }
        function useTableHeader(props2) {
          var _useClassName = useClassName(), tableSortClasses = _useClassName.tableSortClasses, tableFilterClasses = _useClassName.tableFilterClasses;
          var spansAndLeafNodes = vue.computed(function() {
            return getThRowspanAndColspan(props2.columns);
          });
          var thList = vue.computed(function() {
            return getThList(props2.columns);
          });
          var isMultipleHeader = vue.computed(function() {
            return thList.value.length > 1;
          });
          var renderTitleWidthIcon = function renderTitleWidthIcon2(_ref, col, colIndex, ellipsisTitle, attach) {
            var _classes;
            var _ref2 = _slicedToArray(_ref, 3), title = _ref2[0], sortIcon = _ref2[1], filterIcon = _ref2[2];
            var classes = (_classes = {}, _defineProperty$3(_classes, tableSortClasses.sortable, sortIcon), _defineProperty$3(_classes, tableFilterClasses.filterable, filterIcon), _classes);
            var content = isFunction_1(ellipsisTitle) ? ellipsisTitle(vue.h, {
              col,
              colIndex
            }) : void 0;
            return vue.createVNode("div", {
              "class": classes
            }, [vue.createVNode("div", {
              "class": tableSortClasses.title
            }, [col.ellipsis && ellipsisTitle !== false && ellipsisTitle !== null ? vue.createVNode(TEllipsis, {
              "placement": "bottom-right",
              "attach": attach ? function() {
                return attach;
              } : void 0,
              "popupContent": content && function() {
                return content;
              },
              "popupProps": _typeof$2(ellipsisTitle) === "object" ? ellipsisTitle : void 0
            }, _isSlot$6(title) ? title : {
              "default": function _default() {
                return [title];
              }
            }) : vue.createVNode("div", null, [title]), Boolean(sortIcon || filterIcon) && vue.createVNode("div", {
              "class": tableFilterClasses.iconWrap
            }, [sortIcon, filterIcon])])]);
          };
          return {
            thList,
            isMultipleHeader,
            spansAndLeafNodes,
            renderTitleWidthIcon
          };
        }
        function getScrollbarWidth() {
          var defaultScrollbarWidth = 6;
          if (!navigator)
            return defaultScrollbarWidth;
          if (/(Chrome|Safari)/i.test(navigator.userAgent))
            return defaultScrollbarWidth;
          var scrollDiv = document.createElement("div");
          scrollDiv.style.cssText = "width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;";
          document.body.appendChild(scrollDiv);
          var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
          document.body.removeChild(scrollDiv);
          return scrollbarWidth;
        }
        function ownKeys$u(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$t(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$u(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$u(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function getColumnFixedStyles(col, index2, rowAndColFixedPosition, tableColFixedClasses) {
          var _thClasses;
          var fixedPos = rowAndColFixedPosition === null || rowAndColFixedPosition === void 0 ? void 0 : rowAndColFixedPosition.get(col.colKey || index2);
          if (!fixedPos)
            return {};
          var thClasses = (_thClasses = {}, _defineProperty$3(_thClasses, tableColFixedClasses.left, col.fixed === "left"), _defineProperty$3(_thClasses, tableColFixedClasses.right, col.fixed === "right"), _defineProperty$3(_thClasses, tableColFixedClasses.lastLeft, col.fixed === "left" && fixedPos.lastLeftFixedCol), _defineProperty$3(_thClasses, tableColFixedClasses.firstRight, col.fixed === "right" && fixedPos.firstRightFixedCol), _thClasses);
          var thStyles = {
            left: col.fixed === "left" ? "".concat(fixedPos.left, "px") : void 0,
            right: col.fixed === "right" ? "".concat(fixedPos.right, "px") : void 0
          };
          return {
            style: thStyles,
            classes: thClasses
          };
        }
        function getRowFixedStyles(rowId, rowIndex, rowLength, fixedRows, rowAndColFixedPosition, tableRowFixedClasses) {
          var _rowClasses;
          if (!fixedRows || !fixedRows.length)
            return {
              style: void 0,
              classes: void 0
            };
          var fixedTop = rowIndex < fixedRows[0];
          var fixedBottom = rowIndex > rowLength - 1 - fixedRows[1];
          var firstFixedBottomRow = rowLength - fixedRows[1];
          var fixedPos = (rowAndColFixedPosition === null || rowAndColFixedPosition === void 0 ? void 0 : rowAndColFixedPosition.get(rowId)) || {};
          var rowClasses = (_rowClasses = {}, _defineProperty$3(_rowClasses, tableRowFixedClasses.top, fixedTop), _defineProperty$3(_rowClasses, tableRowFixedClasses.bottom, fixedBottom), _defineProperty$3(_rowClasses, tableRowFixedClasses.firstBottom, rowIndex === firstFixedBottomRow), _defineProperty$3(_rowClasses, tableRowFixedClasses.withoutBorderBottom, rowIndex === firstFixedBottomRow - 1), _rowClasses);
          var rowStyles = {
            top: fixedTop ? "".concat(fixedPos.top, "px") : void 0,
            bottom: fixedBottom ? "".concat(fixedPos.bottom, "px") : void 0
          };
          return {
            style: rowStyles,
            classes: rowClasses
          };
        }
        function useFixed(props2, context) {
          var _toRefs = vue.toRefs(props2), data = _toRefs.data, columns = _toRefs.columns, tableLayout = _toRefs.tableLayout, tableContentWidth = _toRefs.tableContentWidth, fixedRows = _toRefs.fixedRows, firstFullRow = _toRefs.firstFullRow, lastFullRow = _toRefs.lastFullRow, maxHeight = _toRefs.maxHeight, headerAffixedTop = _toRefs.headerAffixedTop, bordered = _toRefs.bordered;
          var tableContentRef = vue.ref();
          var isFixedHeader = vue.ref(false);
          var isWidthOverflow = vue.ref(false);
          var affixHeaderRef = vue.ref();
          var showAffixHeader = vue.ref(true);
          var scrollbarWidth = vue.ref(6);
          var rowAndColFixedPosition = vue.ref(/* @__PURE__ */ new Map());
          var showColumnShadow = vue.reactive({
            left: false,
            right: false
          });
          var virtualScrollHeaderPos = vue.ref({
            left: 0,
            top: 0
          });
          var tableWidth = vue.ref(0);
          var thWidthList = vue.ref({});
          var isFixedColumn = vue.ref(false);
          var isFixedRightColumn = vue.ref(false);
          var displayNoneElementRefresh = vue.inject(TDisplayNoneElementRefresh, vue.ref(0));
          var notNeedThWidthList = vue.computed(function() {
            var _props$scroll;
            return !(props2.headerAffixedTop || ((_props$scroll = props2.scroll) === null || _props$scroll === void 0 ? void 0 : _props$scroll.type) === "virtual");
          });
          function getColumnMap(columns2) {
            var map = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : /* @__PURE__ */ new Map();
            var levelNodes = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
            var level = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
            var parent2 = arguments.length > 4 ? arguments[4] : void 0;
            for (var i2 = 0, len = columns2.length; i2 < len; i2++) {
              var _col$children;
              var col = columns2[i2];
              if (["left", "right"].includes(col.fixed)) {
                isFixedColumn.value = true;
              }
              if (col.fixed === "right") {
                isFixedRightColumn.value = true;
              }
              var key = col.colKey || i2;
              var columnInfo = {
                col,
                parent: parent2,
                index: i2
              };
              map.set(key, columnInfo);
              if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
                getColumnMap(col.children, map, levelNodes, level + 1, columnInfo);
              }
              if (levelNodes[level]) {
                levelNodes[level].push(columnInfo);
              } else {
                levelNodes[level] = [columnInfo];
              }
            }
            return {
              newColumnsMap: map,
              levelNodes
            };
          }
          var setFixedLeftPos = function setFixedLeftPos2(columns2, initialColumnMap) {
            var parent2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
            for (var i2 = 0, len = columns2.length; i2 < len; i2++) {
              var _col$children2;
              var col = columns2[i2];
              if (col.fixed === "right")
                return;
              var colInfo = initialColumnMap.get(col.colKey || i2);
              var lastColIndex = i2 - 1;
              while (lastColIndex >= 0 && columns2[lastColIndex].fixed !== "left") {
                lastColIndex -= 1;
              }
              var lastCol = columns2[lastColIndex];
              var defaultWidth = i2 === 0 ? (parent2 === null || parent2 === void 0 ? void 0 : parent2.left) || 0 : 0;
              var lastColInfo = initialColumnMap.get((lastCol === null || lastCol === void 0 ? void 0 : lastCol.colKey) || i2 - 1);
              colInfo.left = ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.left) || defaultWidth) + ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.width) || 0);
              if ((_col$children2 = col.children) !== null && _col$children2 !== void 0 && _col$children2.length) {
                setFixedLeftPos2(col.children, initialColumnMap, colInfo);
              }
            }
          };
          var setFixedRightPos = function setFixedRightPos2(columns2, initialColumnMap) {
            var parent2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
            for (var i2 = columns2.length - 1; i2 >= 0; i2--) {
              var _col$children3;
              var col = columns2[i2];
              if (col.fixed === "left")
                return;
              var colInfo = initialColumnMap.get(col.colKey || i2);
              var lastColIndex = i2 + 1;
              while (lastColIndex < columns2.length && columns2[lastColIndex].fixed !== "right") {
                lastColIndex += 1;
              }
              var lastCol = columns2[lastColIndex];
              var defaultWidth = i2 === columns2.length - 1 ? (parent2 === null || parent2 === void 0 ? void 0 : parent2.right) || 0 : 0;
              var lastColInfo = initialColumnMap.get((lastCol === null || lastCol === void 0 ? void 0 : lastCol.colKey) || i2 + 1);
              colInfo.right = ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.right) || defaultWidth) + ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.width) || 0);
              if ((_col$children3 = col.children) !== null && _col$children3 !== void 0 && _col$children3.length) {
                setFixedRightPos2(col.children, initialColumnMap, colInfo);
              }
            }
          };
          var setFixedColPosition = function setFixedColPosition2(trList, initialColumnMap) {
            if (!trList)
              return;
            for (var i2 = 0, len = trList.length; i2 < len; i2++) {
              var thList = trList[i2].children;
              for (var j = 0, thLen = thList.length; j < thLen; j++) {
                var _obj$col;
                var th = thList[j];
                var colKey = th.dataset.colkey;
                if (!colKey) {
                  log.warn("TDesign Table", "".concat(th.innerText, " missing colKey. colKey is required for fixed column feature."));
                }
                var obj = initialColumnMap.get(colKey || j);
                if (obj !== null && obj !== void 0 && (_obj$col = obj.col) !== null && _obj$col !== void 0 && _obj$col.fixed) {
                  initialColumnMap.set(colKey, _objectSpread$t(_objectSpread$t({}, obj), {}, {
                    width: th.getBoundingClientRect().width
                  }));
                }
              }
            }
            setFixedLeftPos(columns.value, initialColumnMap);
            setFixedRightPos(columns.value, initialColumnMap);
          };
          var setFixedRowPosition = function setFixedRowPosition2(trList, initialColumnMap, thead, tfoot) {
            var _ref = fixedRows.value || [], _ref2 = _slicedToArray(_ref, 2), fixedTopRows = _ref2[0], fixedBottomRows = _ref2[1];
            var data2 = props2.data, _props$rowKey = props2.rowKey, rowKey = _props$rowKey === void 0 ? "id" : _props$rowKey;
            for (var i2 = 0; i2 < fixedTopRows; i2++) {
              var tr = trList[i2];
              var rowId = get_1(data2[i2], rowKey);
              var thisRowInfo = initialColumnMap.get(rowId) || {};
              var lastRowId = get_1(data2[i2 - 1], rowKey);
              var lastRowInfo = initialColumnMap.get(lastRowId) || {};
              var defaultBottom = 0;
              if (i2 === 0) {
                defaultBottom = (thead === null || thead === void 0 ? void 0 : thead.getBoundingClientRect().height) || 0;
              }
              thisRowInfo.top = (lastRowInfo.top || defaultBottom) + (lastRowInfo.height || 0);
              initialColumnMap.set(rowId, _objectSpread$t(_objectSpread$t({}, thisRowInfo), {}, {
                height: tr.getBoundingClientRect().height
              }));
            }
            for (var _i = data2.length - 1; _i >= data2.length - fixedBottomRows; _i--) {
              var _tr = trList[_i];
              var _rowId = get_1(data2[_i], rowKey);
              var _thisRowInfo = initialColumnMap.get(_rowId) || {};
              var _lastRowId = get_1(data2[_i + 1], rowKey);
              var _lastRowInfo = initialColumnMap.get(_lastRowId) || {};
              var _defaultBottom = 0;
              if (_i === data2.length - 1) {
                _defaultBottom = (tfoot === null || tfoot === void 0 ? void 0 : tfoot.getBoundingClientRect().height) || 0;
              }
              _thisRowInfo.bottom = (_lastRowInfo.bottom || _defaultBottom) + (_lastRowInfo.height || 0);
              initialColumnMap.set(_rowId, _objectSpread$t(_objectSpread$t({}, _thisRowInfo), {}, {
                height: _tr.getBoundingClientRect().height
              }));
            }
          };
          var updateRowAndColFixedPosition = function updateRowAndColFixedPosition2(tableContentElm, initialColumnMap) {
            rowAndColFixedPosition.value.clear();
            var thead = tableContentElm === null || tableContentElm === void 0 ? void 0 : tableContentElm.querySelector("thead");
            thead && setFixedColPosition(thead.children, initialColumnMap);
            var tbody = tableContentElm === null || tableContentElm === void 0 ? void 0 : tableContentElm.querySelector("tbody");
            var tfoot = tableContentElm === null || tableContentElm === void 0 ? void 0 : tableContentElm.querySelector("tfoot");
            tbody && setFixedRowPosition(tbody.children, initialColumnMap, thead, tfoot);
            rowAndColFixedPosition.value = initialColumnMap;
          };
          var updateColumnFixedShadow = function updateColumnFixedShadow2(target) {
            if (!isFixedColumn.value)
              return;
            if (!target)
              return;
            var isShowRight = target.clientWidth + target.scrollLeft < target.scrollWidth;
            showColumnShadow.left = target.scrollLeft > 0;
            showColumnShadow.right = isShowRight;
          };
          var lastScrollLeft = -1;
          var updateHeaderScroll = function updateHeaderScroll2(target) {
            if (!target) {
              lastScrollLeft = -1;
            }
            var newTarget = target || tableContentRef.value;
            if (notNeedThWidthList.value || !newTarget)
              return;
            var left2 = newTarget.scrollLeft;
            if (lastScrollLeft === left2)
              return;
            if (affixHeaderRef.value) {
              var left22 = newTarget.scrollLeft;
              lastScrollLeft = left22;
              affixHeaderRef.value.scrollLeft = left22;
            }
          };
          var onTableContentScroll = function onTableContentScroll2(e) {
            var _props$onScrollX, _props$onScrollY, _props$onScroll;
            var target = e.target || e.srcElement;
            updateColumnFixedShadow(target);
            updateHeaderScroll(target);
            (_props$onScrollX = props2.onScrollX) === null || _props$onScrollX === void 0 ? void 0 : _props$onScrollX.call(props2, {
              e
            });
            (_props$onScrollY = props2.onScrollY) === null || _props$onScrollY === void 0 ? void 0 : _props$onScrollY.call(props2, {
              e
            });
            (_props$onScroll = props2.onScroll) === null || _props$onScroll === void 0 ? void 0 : _props$onScroll.call(props2, {
              e
            });
          };
          var setIsLastOrFirstFixedCol = function setIsLastOrFirstFixedCol2(levelNodes) {
            for (var t = 0; t < levelNodes.length; t++) {
              var nodes = levelNodes[t];
              for (var i2 = 0, len = nodes.length; i2 < len; i2++) {
                var colMapInfo = nodes[i2];
                var nextColMapInfo = nodes[i2 + 1];
                var parent2 = colMapInfo.parent;
                var isParentLastLeftFixedCol = !parent2 || (parent2 === null || parent2 === void 0 ? void 0 : parent2.lastLeftFixedCol);
                if (isParentLastLeftFixedCol && colMapInfo.col.fixed === "left" && (nextColMapInfo === null || nextColMapInfo === void 0 ? void 0 : nextColMapInfo.col.fixed) !== "left") {
                  colMapInfo.lastLeftFixedCol = true;
                }
                var lastColMapInfo = nodes[i2 - 1];
                var isParentFirstRightFixedCol = !parent2 || (parent2 === null || parent2 === void 0 ? void 0 : parent2.firstRightFixedCol);
                if (isParentFirstRightFixedCol && colMapInfo.col.fixed === "right" && (lastColMapInfo === null || lastColMapInfo === void 0 ? void 0 : lastColMapInfo.col.fixed) !== "right") {
                  colMapInfo.firstRightFixedCol = true;
                }
              }
            }
          };
          var updateFixedStatus = function updateFixedStatus2() {
            var _getColumnMap = getColumnMap(columns.value), newColumnsMap = _getColumnMap.newColumnsMap, levelNodes = _getColumnMap.levelNodes;
            setIsLastOrFirstFixedCol(levelNodes);
            var timer = setTimeout(function() {
              var _fixedRows$value;
              if (isFixedColumn.value || (_fixedRows$value = fixedRows.value) !== null && _fixedRows$value !== void 0 && _fixedRows$value.length) {
                updateRowAndColFixedPosition(tableContentRef.value, newColumnsMap);
              }
              clearTimeout(timer);
            }, 0);
            return function() {
              clearTimeout(timer);
            };
          };
          var updateFixedHeader = function updateFixedHeader2() {
            var timer = setTimeout(function() {
              if (!tableContentRef.value)
                return;
              isFixedHeader.value = tableContentRef.value.scrollHeight > tableContentRef.value.clientHeight;
              isWidthOverflow.value = tableContentRef.value.scrollWidth > tableContentRef.value.clientWidth;
              var pos = tableContentRef.value.getBoundingClientRect();
              virtualScrollHeaderPos.value = {
                top: pos.top,
                left: pos.left
              };
              clearTimeout(timer);
            }, 0);
          };
          var updateFixedColumnHandler = function updateFixedColumnHandler2() {
            var timer = setTimeout(function() {
              if (isFixedColumn.value) {
                updateColumnFixedShadow(tableContentRef.value);
              }
              clearTimeout(timer);
            }, 0);
          };
          var updateTableWidth = function updateTableWidth2() {
            var _tableContentRef$valu;
            if (isServer$1)
              return;
            var rect = (_tableContentRef$valu = tableContentRef.value) === null || _tableContentRef$valu === void 0 ? void 0 : _tableContentRef$valu.getBoundingClientRect();
            if (!rect)
              return;
            var reduceWidth = isFixedHeader.value ? scrollbarWidth.value : 0;
            var fixedBordered = isFixedRightColumn.value ? 1 : 2;
            tableWidth.value = rect.width - reduceWidth - (props2.bordered ? fixedBordered : 0);
          };
          var updateThWidthList = function updateThWidthList2(trList) {
            var widthMap = {};
            for (var i2 = 0, len = trList.length; i2 < len; i2++) {
              var thList = trList[i2].children;
              for (var j = 0, thLen = thList.length; j < thLen; j++) {
                var th = thList[j];
                var colKey = th.dataset.colkey;
                widthMap[colKey] = th.getBoundingClientRect().width;
              }
            }
            thWidthList.value = widthMap;
            if (affixHeaderRef.value) {
              var left2 = tableContentRef.value.scrollLeft;
              lastScrollLeft = left2;
              affixHeaderRef.value.scrollLeft = left2;
            }
          };
          var updateThWidthListHandler = function updateThWidthListHandler2() {
            if (isServer$1)
              return;
            if (notNeedThWidthList.value)
              return;
            var timer = setTimeout(function() {
              var _tableContentRef$valu2;
              updateTableWidth();
              var thead = (_tableContentRef$valu2 = tableContentRef.value) === null || _tableContentRef$valu2 === void 0 ? void 0 : _tableContentRef$valu2.querySelector("thead");
              if (!thead)
                return;
              updateThWidthList(thead.children);
              clearTimeout(timer);
            }, 0);
          };
          var onDocumentScroll = function onDocumentScroll2() {
            var _affixHeaderRef$value;
            var pos = tableContentRef.value.getBoundingClientRect();
            var r = ((_affixHeaderRef$value = affixHeaderRef.value) === null || _affixHeaderRef$value === void 0 ? void 0 : _affixHeaderRef$value.offsetHeight) - pos.top < pos.height;
            showAffixHeader.value = r;
          };
          vue.watch([data, columns, bordered, tableLayout, tableContentWidth, isFixedHeader, isWidthOverflow, isFixedColumn, fixedRows, firstFullRow, lastFullRow], updateFixedStatus, {
            immediate: true
          });
          vue.watch([isFixedColumn, columns], updateFixedColumnHandler, {
            immediate: true
          });
          vue.watch([maxHeight, data, columns, bordered], updateFixedHeader, {
            immediate: true
          });
          vue.watch([data, columns, bordered, tableLayout, fixedRows, isFixedHeader, headerAffixedTop, tableContentWidth], updateThWidthListHandler, {
            immediate: true
          });
          vue.watch([headerAffixedTop], function() {
            if (headerAffixedTop) {
              on$1(document, "scroll", onDocumentScroll);
            } else {
              off$1(document, "scroll", onDocumentScroll);
            }
          });
          var refreshTable = function refreshTable2() {
            if (isServer$1)
              return;
            updateTableWidth();
            updateFixedHeader();
            if (!notNeedThWidthList.value) {
              updateThWidthListHandler();
            }
            if (isFixedColumn.value || isFixedHeader.value) {
              updateFixedStatus();
              updateFixedColumnHandler();
            }
          };
          var onResize = refreshTable;
          vue.watch([displayNoneElementRefresh], function() {
            if (!displayNoneElementRefresh)
              return;
            requestAnimationFrame ? requestAnimationFrame(refreshTable) : refreshTable();
          });
          vue.onMounted(function() {
            var scrollWidth = getScrollbarWidth();
            scrollbarWidth.value = scrollWidth;
            var timer = setTimeout(function() {
              updateTableWidth();
              clearTimeout(timer);
            });
            if (isFixedColumn.value || isFixedHeader.value || !notNeedThWidthList.value) {
              on$1(window, "resize", onResize);
            }
          });
          vue.onUnmounted(function() {
            if (isFixedColumn.value || isFixedHeader.value || !notNeedThWidthList.value) {
              off$1(window, "resize", onResize);
            }
            if (props2.headerAffixedTop) {
              off$1(document, "scroll", onDocumentScroll);
            }
          });
          return {
            tableWidth,
            thWidthList,
            isFixedHeader,
            isWidthOverflow,
            tableContentRef,
            showAffixHeader,
            isFixedColumn,
            showColumnShadow,
            rowAndColFixedPosition,
            virtualScrollHeaderPos,
            affixHeaderRef,
            scrollbarWidth,
            refreshTable,
            updateThWidthListHandler,
            updateHeaderScroll,
            onTableContentScroll
          };
        }
        function ownKeys$t(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$s(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$t(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$t(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function usePagination(props2) {
          var _toRefs = vue.toRefs(props2), pagination = _toRefs.pagination, data = _toRefs.data, disableDataPage = _toRefs.disableDataPage;
          var _useConfig = useConfig(), classPrefix2 = _useConfig.classPrefix;
          var dataSource = vue.ref([]);
          var isPaginateData = vue.ref(false);
          var updateDataSourceAndPaginate = function updateDataSourceAndPaginate2() {
            var current = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
            var pageSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;
            var data2 = props2.data;
            var t = Boolean(!disableDataPage.value && data2.length > pageSize);
            isPaginateData.value = t;
            if (t) {
              var start2 = (current - 1) * pageSize;
              var end2 = current * pageSize;
              dataSource.value = data2.slice(start2, end2);
            } else {
              dataSource.value = data2;
            }
          };
          vue.watch(function() {
            var _pagination$value, _pagination$value2;
            return [(_pagination$value = pagination.value) === null || _pagination$value === void 0 ? void 0 : _pagination$value.current, (_pagination$value2 = pagination.value) === null || _pagination$value2 === void 0 ? void 0 : _pagination$value2.pageSize, data.value.length, disableDataPage];
          }, function() {
            if (!pagination.value || !pagination.value.current)
              return;
            updateDataSourceAndPaginate(pagination.value.current, pagination.value.pageSize);
          }, {
            immediate: true
          });
          vue.watch([data], function() {
            if (!pagination.value || !pagination.value.defaultCurrent)
              return;
            updateDataSourceAndPaginate(pagination.value.defaultCurrent, pagination.value.defaultPageSize);
          }, {
            immediate: true
          });
          var renderPagination = function renderPagination2() {
            if (!props2.pagination)
              return null;
            var paginationProps = _objectSpread$s({}, props2.pagination);
            delete paginationProps.onChange;
            return vue.createVNode("div", {
              "class": "".concat(classPrefix2.value, "-table__pagination")
            }, [vue.createVNode(Pagination, vue.mergeProps(paginationProps, {
              "onChange": function onChange(pageInfo) {
                var _props$pagination, _props$pagination$onC, _props$onPageChange;
                (_props$pagination = props2.pagination) === null || _props$pagination === void 0 ? void 0 : (_props$pagination$onC = _props$pagination.onChange) === null || _props$pagination$onC === void 0 ? void 0 : _props$pagination$onC.call(_props$pagination, pageInfo);
                (_props$onPageChange = props2.onPageChange) === null || _props$onPageChange === void 0 ? void 0 : _props$onPageChange.call(props2, pageInfo, dataSource.value);
                if (pagination && !pagination.value.current && pagination.value.defaultCurrent) {
                  updateDataSourceAndPaginate(pageInfo.current, pageInfo.pageSize);
                }
              }
            }), null)]);
          };
          return {
            isPaginateData,
            dataSource,
            renderPagination
          };
        }
        function formatRowAttributes(attributes, params) {
          if (!attributes)
            return void 0;
          var attrList = attributes instanceof Array ? attributes : [attributes];
          var result = {};
          for (var i2 = 0; i2 < attrList.length; i2++) {
            var attrItem = attrList[i2];
            if (!attrItem)
              continue;
            var attrProperty = isFunction_1(attrItem) ? attrItem(params) : attrItem;
            result = attrProperty instanceof Array ? formatRowAttributes(attrProperty, params) : Object.assign(result, attrProperty);
          }
          return result;
        }
        function formatRowClassNames(rowClassNames, params, rowKey) {
          var rowClassList = rowClassNames instanceof Array ? rowClassNames : [rowClassNames];
          var row = params.row, rowIndex = params.rowIndex;
          var customClasses = [];
          for (var i2 = 0, len = rowClassList.length; i2 < len; i2++) {
            var rName = rowClassList[i2];
            var tClass = isFunction_1(rName) ? rName(params) : rName;
            if (isObject_1(tClass) && !(tClass instanceof Array)) {
              tClass[rowIndex] && (tClass = tClass[rowIndex]);
              var rowId = get_1(row, rowKey || "id");
              tClass[rowId] && (tClass = tClass[rowId]);
            } else if (tClass instanceof Array) {
              tClass = formatRowClassNames(tClass, params, rowKey);
            }
            customClasses = customClasses.concat(tClass);
          }
          return customClasses;
        }
        function filterDataByIds() {
          var data = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
          var ids = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
          var byId = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "id";
          return data.filter(function() {
            var d = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            return ids.includes(d[byId]);
          });
        }
        function isRowSelectedDisabled(selectColumn, row, rowIndex) {
          var disabled = isFunction_1(selectColumn.disabled) ? selectColumn.disabled({
            row,
            rowIndex
          }) : selectColumn.disabled;
          if (selectColumn.checkProps) {
            if (isFunction_1(selectColumn.checkProps)) {
              disabled = disabled || selectColumn.checkProps({
                row,
                rowIndex
              }).disabled;
            } else if (selectColumn.checkProps === "object") {
              disabled = disabled || selectColumn.checkProps.disabled;
            }
          }
          return !!disabled;
        }
        function getCurrentRowByKey(columns, key) {
          if (!columns || !key)
            return;
          var col = columns === null || columns === void 0 ? void 0 : columns.find(function(t) {
            return t.colKey === key;
          });
          if (col)
            return col;
          for (var i2 = 0, len = columns.length; i2 < len; i2++) {
            var _columns$i, _columns$i$children;
            if ((_columns$i = columns[i2]) !== null && _columns$i !== void 0 && (_columns$i$children = _columns$i.children) !== null && _columns$i$children !== void 0 && _columns$i$children.length) {
              var _columns$i2;
              return getCurrentRowByKey((_columns$i2 = columns[i2]) === null || _columns$i2 === void 0 ? void 0 : _columns$i2.children, key);
            }
          }
        }
        function observe(element2, root2, callback, marginBottom) {
          if (!window || !window.IntersectionObserver) {
            callback();
            return null;
          }
          var io = null;
          try {
            io = new window.IntersectionObserver(function(entries) {
              var entry = entries[0];
              if (entry.isIntersecting) {
                callback();
                io.unobserve(element2);
              }
            }, {
              rootMargin: "0px 0px ".concat(marginBottom, "px 0px"),
              root: root2
            });
            io.observe(element2);
          } catch (e) {
            console.error(e);
            callback();
          }
          return io;
        }
        function useLazyLoad(containerRef, childRef, params) {
          var tRowHeight = vue.computed(function() {
            return Math.max(params.rowHeight || 48, 48);
          });
          var isInit = vue.ref(params.rowIndex === 0);
          var hasLazyLoadHolder = vue.computed(function() {
            return (params === null || params === void 0 ? void 0 : params.type) === "lazy" && !isInit.value;
          });
          var requestAnimationFrame2 = !isServer$1 && window.requestAnimationFrame || function(cb) {
            return setTimeout(cb, 16.6);
          };
          var init = function init2() {
            if (!isInit.value) {
              requestAnimationFrame2(function() {
                isInit.value = true;
              });
            }
          };
          vue.onMounted(function() {
            if ((params === null || params === void 0 ? void 0 : params.type) !== "lazy")
              return;
            vue.nextTick(function() {
              var bufferSize = Math.max(10, params.bufferSize || 10);
              var height = tRowHeight.value * bufferSize;
              observe(childRef.value, containerRef.value, init, height);
            });
          });
          return {
            hasLazyLoadHolder,
            tRowHeight
          };
        }
        function ownKeys$s(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$r(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$s(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$s(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot$5(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var TABLE_PROPS = ["rowKey", "rowClassName", "columns", "fixedRows", "footData", "rowAttributes", "rowspanAndColspan", "scroll", "onCellClick", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup"];
        var ROW_LISTENERS = ["click", "dblclick", "mouseover", "mousedown", "mouseenter", "mouseleave", "mouseup"];
        function renderCell(params, slots) {
          var col = params.col, row = params.row;
          if (isFunction_1(col.cell)) {
            return col.cell(vue.h, params);
          }
          if (slots[col.colKey]) {
            return slots[col.colKey](params);
          }
          if (isString_1(col.cell) && slots[col.cell]) {
            return slots[col.cell](params);
          }
          if (isFunction_1(col.render)) {
            return col.render(vue.h, _objectSpread$r(_objectSpread$r({}, params), {}, {
              type: "cell"
            }));
          }
          return get_1(row, col.colKey);
        }
        var TrElement = vue.defineComponent({
          name: "TR",
          props: _objectSpread$r(_objectSpread$r({
            row: Object,
            rowIndex: Number,
            dataLength: Number,
            rowAndColFixedPosition: Map,
            skipSpansMap: Map,
            onTrRowspanOrColspan: Function
          }, pick_1(baseTableProps, TABLE_PROPS)), {}, {
            scrollType: String,
            rowHeight: Number,
            trs: Map,
            bufferSize: Number,
            isVirtual: Boolean,
            tableElm: {},
            tableContentElm: {}
          }),
          emits: ["row-mounted"],
          setup: function setup(props2, context) {
            var _toRefs = vue.toRefs(props2), tableContentElm = _toRefs.tableContentElm;
            var trRef = vue.ref(null);
            var _useClassName = useClassName(), tdEllipsisClass = _useClassName.tdEllipsisClass, tableBaseClass = _useClassName.tableBaseClass, tableColFixedClasses = _useClassName.tableColFixedClasses, tableRowFixedClasses = _useClassName.tableRowFixedClasses, tdAlignClasses = _useClassName.tdAlignClasses, tableDraggableClasses = _useClassName.tableDraggableClasses;
            var trStyles = vue.computed(function() {
              return getRowFixedStyles(get_1(props2.row, props2.rowKey || "id"), props2.rowIndex, props2.dataLength, props2.fixedRows, props2.rowAndColFixedPosition, tableRowFixedClasses);
            });
            var trAttributes = vue.computed(function() {
              return formatRowAttributes(props2.rowAttributes, {
                row: props2.row,
                rowIndex: props2.rowIndex,
                type: "body"
              }) || {};
            });
            var classes = vue.computed(function() {
              var _trStyles$value;
              var customClasses = formatRowClassNames(props2.rowClassName, {
                row: props2.row,
                rowIndex: props2.rowIndex,
                type: "body"
              }, props2.rowKey || "id");
              return [(_trStyles$value = trStyles.value) === null || _trStyles$value === void 0 ? void 0 : _trStyles$value.classes, customClasses].filter(function(v) {
                return v;
              });
            });
            var _useLazyLoad = useLazyLoad(tableContentElm, trRef, vue.reactive(_objectSpread$r(_objectSpread$r({}, props2.scroll), {}, {
              rowIndex: props2.rowIndex
            }))), hasLazyLoadHolder = _useLazyLoad.hasLazyLoadHolder, tRowHeight = _useLazyLoad.tRowHeight;
            var getTrListeners = function getTrListeners2(row, rowIndex) {
              var trListeners = {};
              ROW_LISTENERS.forEach(function(eventName) {
                trListeners["on".concat(upperFirst_1(eventName))] = function(e) {
                  var _props$;
                  var p = {
                    e,
                    row,
                    index: rowIndex
                  };
                  (_props$ = props2["onRow".concat(upperFirst_1(eventName))]) === null || _props$ === void 0 ? void 0 : _props$.call(props2, p);
                };
              });
              return trListeners;
            };
            vue.onMounted(function() {
              var scrollType = props2.scrollType, isVirtual = props2.isVirtual, rowData = props2.row, trs = props2.trs;
              if (scrollType === "virtual") {
                if (isVirtual) {
                  var $index = rowData.$index;
                  trs.set($index, trRef.value);
                  context.emit("row-mounted");
                }
              }
            });
            vue.onBeforeUnmount(function() {
              if (props2.isVirtual) {
                var trs = props2.trs, row = props2.row;
                var $index = row.$index;
                trs["delete"]($index);
              }
            });
            return {
              trRef,
              tableColFixedClasses,
              tSlots: context.slots,
              tdEllipsisClass,
              tableBaseClass,
              tdAlignClasses,
              tableDraggableClasses,
              trStyles,
              classes,
              trAttributes,
              tRowHeight,
              hasLazyLoadHolder,
              getTrListeners
            };
          },
          methods: {
            renderEllipsisCell: function renderEllipsisCell(cellParams, params) {
              var cellNode = params.cellNode;
              var col = cellParams.col, colIndex = cellParams.colIndex;
              var placement = colIndex < 2 ? "top-left" : "top-right";
              var content = isFunction_1(col.ellipsis) ? col.ellipsis(vue.h, cellParams) : void 0;
              var tableElement = this.tableElm;
              return vue.createVNode(TEllipsis, {
                "placement": placement,
                "attach": tableElement ? function() {
                  return tableElement;
                } : void 0,
                "popupContent": content && function() {
                  return content;
                },
                "popupProps": _typeof$2(col.ellipsis) === "object" ? col.ellipsis : void 0
              }, _isSlot$5(cellNode) ? cellNode : {
                "default": function _default() {
                  return [cellNode];
                }
              });
            },
            renderTd: function renderTd(params, extra) {
              var _ref, _this = this;
              var col = params.col, colIndex = params.colIndex, rowIndex = params.rowIndex;
              var cellSpans = extra.cellSpans, dataLength = extra.dataLength, rowAndColFixedPosition = extra.rowAndColFixedPosition;
              var cellNode = renderCell(params, this.tSlots);
              var tdStyles = getColumnFixedStyles(col, colIndex, rowAndColFixedPosition, this.tableColFixedClasses);
              var customClasses = isFunction_1(col.className) ? col.className(_objectSpread$r(_objectSpread$r({}, params), {}, {
                type: "td"
              })) : col.className;
              var classes = [tdStyles.classes, customClasses, (_ref = {}, _defineProperty$3(_ref, this.tdEllipsisClass, col.ellipsis), _defineProperty$3(_ref, this.tableBaseClass.tdLastRow, rowIndex + cellSpans.rowspan === dataLength), _defineProperty$3(_ref, this.tableBaseClass.tdFirstCol, colIndex === 0 && this.rowspanAndColspan), _defineProperty$3(_ref, this.tdAlignClasses[col.align], col.align && col.align !== "left"), _defineProperty$3(_ref, this.tableDraggableClasses.handle, col.colKey === "drag"), _ref)];
              var onClick = function onClick2(e) {
                var _this$onCellClick;
                var p = _objectSpread$r(_objectSpread$r({}, params), {}, {
                  e
                });
                (_this$onCellClick = _this.onCellClick) === null || _this$onCellClick === void 0 ? void 0 : _this$onCellClick.call(_this, p);
              };
              var attrs = _objectSpread$r(_objectSpread$r({}, col.attrs), cellSpans);
              return vue.createVNode("td", vue.mergeProps({
                "key": "".concat(col.colKey, "_").concat(colIndex),
                "class": classes,
                "style": tdStyles.style
              }, attrs, {
                "onClick": onClick
              }), [col.ellipsis ? this.renderEllipsisCell(params, {
                cellNode
              }) : cellNode]);
            }
          },
          render: function render() {
            var _this$columns, _this2 = this, _this$trStyles;
            var row = this.row, rowIndex = this.rowIndex, dataLength = this.dataLength, rowAndColFixedPosition = this.rowAndColFixedPosition;
            var columVNodeList = (_this$columns = this.columns) === null || _this$columns === void 0 ? void 0 : _this$columns.map(function(col, colIndex) {
              var _this2$skipSpansMap;
              var cellSpans = {};
              var params = {
                row,
                col,
                rowIndex,
                colIndex
              };
              if (isFunction_1(_this2.rowspanAndColspan)) {
                var _this2$onTrRowspanOrC;
                var o = _this2.rowspanAndColspan(params);
                (o === null || o === void 0 ? void 0 : o.rowspan) > 1 && (cellSpans.rowspan = o.rowspan);
                (o === null || o === void 0 ? void 0 : o.colspan) > 1 && (cellSpans.colspan = o.colspan);
                (_this2$onTrRowspanOrC = _this2.onTrRowspanOrColspan) === null || _this2$onTrRowspanOrC === void 0 ? void 0 : _this2$onTrRowspanOrC.call(_this2, params, cellSpans);
              }
              var skipped = (_this2$skipSpansMap = _this2.skipSpansMap) === null || _this2$skipSpansMap === void 0 ? void 0 : _this2$skipSpansMap.get([rowIndex, colIndex].join());
              if (skipped)
                return null;
              return _this2.renderTd(params, {
                dataLength,
                rowAndColFixedPosition,
                columnLength: _this2.columns.length,
                cellSpans
              });
            });
            return vue.createVNode("tr", vue.mergeProps({
              "ref": "trRef"
            }, this.trAttributes, {
              "style": (_this$trStyles = this.trStyles) === null || _this$trStyles === void 0 ? void 0 : _this$trStyles.style,
              "class": this.classes
            }, this.getTrListeners(row, rowIndex)), [this.hasLazyLoadHolder ? [vue.createVNode("td", {
              "style": {
                height: "".concat(this.tRowHeight, "px"),
                border: "none"
              }
            }, null)] : columVNodeList]);
          }
        });
        function ownKeys$r(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$q(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$r(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$r(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var extendTableProps = ["rowKey", "rowClassName", "rowAttributes", "loading", "empty", "fixedRows", "firstFullRow", "lastFullRow", "rowspanAndColspan", "scroll", "onCellClick", "onPageChange", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup", "onScroll", "onScrollX", "onScrollY"];
        var TBody = vue.defineComponent({
          name: "TBody",
          props: _objectSpread$q({
            data: Array,
            columns: Array,
            rowAndColFixedPosition: Map,
            showColumnShadow: Object,
            tableElm: {},
            tableWidth: Number,
            isWidthOverflow: Boolean,
            translateY: Number,
            scrollType: String,
            isVirtual: Boolean,
            rowHeight: Number,
            trs: Map,
            bufferSize: Number,
            tableContentElm: {},
            handleRowMounted: Function,
            renderExpandedRow: Function,
            firstFullRow: [String, Function],
            lastFullRow: [String, Function]
          }, pick_1(baseTableProps, extendTableProps)),
          setup: function setup(props2, _ref) {
            _ref.emit;
            var renderTNode = useTNodeJSX();
            var _useConfig = useConfig("table"), t = _useConfig.t, global2 = _useConfig.global;
            var _useClassName = useClassName(), tableFullRowClasses = _useClassName.tableFullRowClasses, tableBaseClass = _useClassName.tableBaseClass;
            var tbodyClasses = vue.computed(function() {
              return [tableBaseClass.body];
            });
            return {
              t,
              global: global2,
              renderTNode,
              tableFullRowClasses,
              tbodyClasses,
              tableBaseClass
            };
          },
          render: function render() {
            var _this = this, _this$data, _this$data2;
            var renderEmpty = function renderEmpty2(columns) {
              return vue.createVNode("tr", {
                "class": [_this.tableBaseClass.emptyRow, _defineProperty$3({}, _this.tableFullRowClasses.base, _this.isWidthOverflow)]
              }, [vue.createVNode("td", {
                "colspan": columns.length
              }, [vue.createVNode("div", {
                "class": [_this.tableBaseClass.empty, _defineProperty$3({}, _this.tableFullRowClasses.innerFullRow, _this.isWidthOverflow)],
                "style": _this.isWidthOverflow ? {
                  width: "".concat(_this.tableWidth, "px")
                } : {}
              }, [_this.renderTNode("empty") || _this.t(_this.global.empty)])])]);
            };
            var getFullRow = function getFullRow2(columnLength2, type) {
              var tType = camelCase_1(type);
              var fullRowNode = _this.renderTNode(tType);
              if (["", null, void 0, false].includes(fullRowNode))
                return null;
              var isFixedToLeft = _this.isWidthOverflow && _this.columns.find(function(col) {
                return col.fixed === "left";
              });
              var classes = [_this.tableFullRowClasses.base, _this.tableFullRowClasses[tType]];
              return vue.createVNode("tr", {
                "class": classes,
                "key": "key-full-row-".concat(type)
              }, [vue.createVNode("td", {
                "colspan": columnLength2
              }, [vue.createVNode("div", {
                "class": _defineProperty$3({}, _this.tableFullRowClasses.innerFullRow, isFixedToLeft),
                "style": isFixedToLeft ? {
                  width: "".concat(_this.tableWidth, "px")
                } : {}
              }, [vue.createVNode("div", {
                "class": _this.tableFullRowClasses.innerFullElement
              }, [fullRowNode])])])]);
            };
            var skipSpansMap = /* @__PURE__ */ new Map();
            var onTrRowspanOrColspan = function onTrRowspanOrColspan2(params, cellSpans) {
              var rowIndex = params.rowIndex, colIndex = params.colIndex;
              if (!cellSpans.rowspan && !cellSpans.colspan)
                return;
              var maxRowIndex = rowIndex + (cellSpans.rowspan || 1);
              var maxColIndex = colIndex + (cellSpans.colspan || 1);
              for (var i2 = rowIndex; i2 < maxRowIndex; i2++) {
                for (var j = colIndex; j < maxColIndex; j++) {
                  if (i2 !== rowIndex || j !== colIndex) {
                    skipSpansMap.set([i2, j].join(), true);
                  }
                }
              }
            };
            var columnLength = this.columns.length;
            var dataLength = this.data.length;
            var trNodeList = [];
            skipSpansMap = /* @__PURE__ */ new Map();
            var properties = ["rowAndColFixedPosition", "scroll", "tableElm", "tableContentElm", "trs", "bufferSize", "isVirtual", "rowHeight", "scrollType"];
            (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.forEach(function(row, rowIndex) {
              var trProps = _objectSpread$q(_objectSpread$q(_objectSpread$q({}, pick_1(_this.$props, TABLE_PROPS)), {}, {
                rowKey: _this.rowKey || "id",
                row,
                columns: _this.columns,
                rowIndex,
                dataLength,
                skipSpansMap
              }, pick_1(_this.$props, properties)), {}, {
                onTrRowspanOrColspan
              });
              if (_this.onCellClick) {
                trProps.onCellClick = _this.onCellClick;
              }
              var trNode = vue.createVNode(TrElement, vue.mergeProps({
                "key": "".concat(get_1(row, _this.rowKey || "id"), "__").concat(rowIndex)
              }, trProps, {
                "onRowMounted": _this.handleRowMounted
              }), _this.$slots);
              trNodeList.push(trNode);
              if (_this.renderExpandedRow) {
                var p = {
                  row,
                  index: rowIndex,
                  columns: _this.columns,
                  tableWidth: _this.tableWidth,
                  isWidthOverflow: _this.isWidthOverflow
                };
                var expandedContent = _this.renderExpandedRow(p);
                expandedContent && trNodeList.push(expandedContent);
              }
            });
            var list = [getFullRow(columnLength, "first-full-row")].concat(trNodeList, [getFullRow(columnLength, "last-full-row")]);
            var isEmpty2 = !((_this$data2 = this.data) !== null && _this$data2 !== void 0 && _this$data2.length) && !this.loading;
            var translate = "translate(0, ".concat(this.translateY, "px)");
            var posStyle = {
              transform: translate,
              "-ms-transform": translate,
              "-moz-transform": translate,
              "-webkit-transform": translate
            };
            return vue.createVNode("tbody", {
              "class": this.tbodyClasses,
              "style": this.isVirtual && _objectSpread$q({}, posStyle)
            }, [isEmpty2 ? renderEmpty(this.columns) : list]);
          }
        });
        function formatCSSUnit(unit) {
          if (!unit)
            return unit;
          return isNaN(Number(unit)) ? unit : "".concat(unit, "px");
        }
        function useStyle(props2) {
          var _toRefs = vue.toRefs(props2), size = _toRefs.size, bordered = _toRefs.bordered, stripe = _toRefs.stripe, hover = _toRefs.hover, verticalAlign = _toRefs.verticalAlign, height = _toRefs.height, maxHeight = _toRefs.maxHeight, tableContentWidth = _toRefs.tableContentWidth;
          var _useClassName = useClassName(), tableBaseClass = _useClassName.tableBaseClass, tableAlignClasses = _useClassName.tableAlignClasses;
          var _useCommonClassName = useCommonClassName(), sizeClassNames = _useCommonClassName.sizeClassNames;
          var tableClasses = vue.computed(function() {
            var _ref;
            return [tableBaseClass.table, (_ref = {}, _defineProperty$3(_ref, sizeClassNames[size.value], size.value !== "medium"), _defineProperty$3(_ref, tableBaseClass.bordered, bordered.value), _defineProperty$3(_ref, tableBaseClass.striped, stripe.value), _defineProperty$3(_ref, tableBaseClass.hover, hover.value), _defineProperty$3(_ref, tableBaseClass.loading, props2.loading), _defineProperty$3(_ref, tableBaseClass.affixedHeader, props2.headerAffixedTop), _defineProperty$3(_ref, tableBaseClass.rowspanAndColspan, props2.rowspanAndColspan), _defineProperty$3(_ref, tableAlignClasses[verticalAlign.value], verticalAlign.value !== "middle"), _ref)];
          });
          var tableContentStyles = vue.computed(function() {
            return {
              height: formatCSSUnit(height.value),
              maxHeight: formatCSSUnit(maxHeight.value)
            };
          });
          var tableElementStyles = vue.computed(function() {
            return {
              width: formatCSSUnit(tableContentWidth.value)
            };
          });
          return {
            tableClasses,
            tableElementStyles,
            tableContentStyles
          };
        }
        function ownKeys$q(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$p(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$q(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$q(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot$4(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var THead = vue.defineComponent({
          name: "THead",
          props: {
            isFixedHeader: Boolean,
            rowAndColFixedPosition: Map,
            thWidthList: Object,
            bordered: Boolean,
            isMultipleHeader: Boolean,
            spansAndLeafNodes: Object,
            thList: Array
          },
          setup: function setup(props2, _ref) {
            var slots = _ref.slots;
            var theadRef = vue.ref();
            var classnames = useClassName();
            var tableHeaderClasses = classnames.tableHeaderClasses, tableBaseClass = classnames.tableBaseClass;
            var _useConfig = useConfig(), classPrefix2 = _useConfig.classPrefix;
            var theadClasses = vue.computed(function() {
              var _ref2;
              return [tableHeaderClasses.header, (_ref2 = {}, _defineProperty$3(_ref2, tableHeaderClasses.fixed, props2.isFixedHeader), _defineProperty$3(_ref2, tableBaseClass.bordered, props2.bordered && props2.isMultipleHeader), _defineProperty$3(_ref2, tableHeaderClasses.multipleHeader, props2.isMultipleHeader), _ref2)];
            });
            return _objectSpread$p(_objectSpread$p({}, classnames), {}, {
              theadClasses,
              classPrefix: classPrefix2,
              theadRef,
              slots
            });
          },
          render: function render() {
            var _this = this;
            var renderThNodeList = function renderThNodeList2(rowAndColFixedPosition, thWidthList) {
              var thBorderMap = /* @__PURE__ */ new Map();
              var thRowspanAndColspan = _this.spansAndLeafNodes.rowspanAndColspanMap;
              return _this.thList.map(function(row, rowIndex) {
                var thRow = row.map(function(col, index2) {
                  var _ref3, _col$children;
                  var rowspanAndColspan = thRowspanAndColspan.get(col);
                  if (index2 === 0 && rowspanAndColspan.rowspan > 1) {
                    for (var j = rowIndex + 1; j < rowIndex + rowspanAndColspan.rowspan; j++) {
                      thBorderMap.set(_this.thList[j][0], true);
                    }
                  }
                  var thStyles = getColumnFixedStyles(col, index2, rowAndColFixedPosition, _this.tableColFixedClasses);
                  var colParams = {
                    col,
                    colIndex: index2,
                    row: {},
                    rowIndex: -1
                  };
                  var customClasses = isFunction_1(col.className) ? col.className(_objectSpread$p(_objectSpread$p({}, colParams), {}, {
                    type: "th"
                  })) : col.className;
                  var thClasses = [thStyles.classes, customClasses, (_ref3 = {}, _defineProperty$3(_ref3, _this.tableHeaderClasses.thBordered, thBorderMap.get(col)), _defineProperty$3(_ref3, "".concat(_this.classPrefix, "-table__th-").concat(col.colKey), col.colKey), _defineProperty$3(_ref3, _this.tdAlignClasses[col.align], col.align && col.align !== "left"), _ref3)];
                  var withoutChildren = !((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length);
                  var width = withoutChildren && thWidthList !== null && thWidthList !== void 0 && thWidthList[col.colKey] ? "".concat(thWidthList === null || thWidthList === void 0 ? void 0 : thWidthList[col.colKey], "px") : void 0;
                  var styles = _objectSpread$p(_objectSpread$p({}, thStyles.style || {}), {}, {
                    width
                  });
                  var innerTh = renderTitle(_this.slots, col, index2);
                  var content = isFunction_1(col.ellipsisTitle) ? col.ellipsisTitle(vue.h, {
                    col,
                    colIndex: index2
                  }) : void 0;
                  return vue.createVNode("th", vue.mergeProps({
                    "key": col.colKey,
                    "data-colkey": col.colKey,
                    "class": thClasses,
                    "style": styles
                  }, rowspanAndColspan), [vue.createVNode("div", {
                    "class": _this.tableBaseClass.thCellInner
                  }, [col.ellipsis && col.ellipsisTitle !== false && col.ellipsisTitle !== null ? vue.createVNode(TEllipsis, {
                    "placement": "bottom",
                    "attach": _this.theadRef ? function() {
                      return _this.theadRef;
                    } : void 0,
                    "popupContent": content && function() {
                      return content;
                    },
                    "popupProps": _typeof$2(col.ellipsisTitle) === "object" ? col.ellipsisTitle : void 0
                  }, _isSlot$4(innerTh) ? innerTh : {
                    "default": function _default() {
                      return [innerTh];
                    }
                  }) : innerTh])]);
                });
                return vue.createVNode("tr", {
                  "key": rowIndex
                }, [thRow]);
              });
            };
            return vue.createVNode("thead", {
              "ref": "theadRef",
              "class": this.theadClasses
            }, [renderThNodeList(this.rowAndColFixedPosition, this.thWidthList)]);
          }
        });
        function ownKeys$p(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$o(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$p(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$p(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var TFoot = vue.defineComponent({
          name: "TFoot",
          props: {
            rowKey: String,
            isFixedHeader: Boolean,
            rowAndColFixedPosition: Map,
            footData: Array,
            columns: Array,
            rowAttributes: [Array, Object, Function],
            rowClassName: [Array, String, Object, Function]
          },
          setup: function setup(props2, context) {
            var classnames = useClassName();
            var renderTFootCell = function renderTFootCell2(p) {
              var col = p.col, row = p.row;
              if (isFunction_1(col.foot)) {
                return col.foot(vue.h, p);
              }
              if (isString_1(col.foot) && context.slots[col.foot]) {
                return context.slots[col.foot](p) || col.foot;
              }
              return col.foot || get_1(row, col.colKey);
            };
            return _objectSpread$o(_objectSpread$o({}, classnames), {}, {
              renderTFootCell
            });
          },
          render: function render() {
            var _this = this;
            if (!this.footData || !this.footData.length || !this.columns)
              return null;
            var theadClasses = [this.tableFooterClasses.footer, _defineProperty$3({}, this.tableFooterClasses.fixed, this.isFixedHeader)];
            return vue.createVNode("tfoot", {
              "ref": "tfooterRef",
              "class": theadClasses
            }, [this.footData.map(function(row, rowIndex) {
              var trAttributes = formatRowAttributes(_this.rowAttributes, {
                row,
                rowIndex,
                type: "foot"
              });
              var customClasses = formatRowClassNames(_this.rowClassName, {
                row,
                rowIndex,
                type: "foot"
              }, _this.rowKey || "id");
              return vue.createVNode("tr", vue.mergeProps({
                "key": rowIndex
              }, trAttributes, {
                "class": customClasses
              }), [_this.columns.map(function(col, colIndex) {
                var tdStyles = getColumnFixedStyles(col, colIndex, _this.rowAndColFixedPosition, _this.tableColFixedClasses);
                return vue.createVNode("td", {
                  "key": col.colKey,
                  "class": tdStyles.classes,
                  "style": tdStyles.style
                }, [_this.renderTFootCell({
                  row,
                  rowIndex,
                  col,
                  colIndex
                })]);
              })]);
            })]);
          }
        });
        function ownKeys$o(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$n(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$o(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$o(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot$3(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var _BaseTable = vue.defineComponent({
          name: "TBaseTable",
          props: _objectSpread$n(_objectSpread$n({}, baseTableProps), {}, {
            renderExpandedRow: Function
          }),
          setup: function setup(props2, context) {
            var _props2$scroll2;
            var renderTNode = useTNodeJSX();
            var tableRef = vue.ref();
            var tableElmRef = vue.ref();
            var _useClassName = useClassName(), virtualScrollClasses = _useClassName.virtualScrollClasses, tableLayoutClasses = _useClassName.tableLayoutClasses, tableBaseClass = _useClassName.tableBaseClass, tableColFixedClasses = _useClassName.tableColFixedClasses;
            var _useCommonClassName = useCommonClassName(), statusClassNames = _useCommonClassName.statusClassNames;
            var _useStyle = useStyle(props2), tableClasses = _useStyle.tableClasses, tableContentStyles = _useStyle.tableContentStyles, tableElementStyles = _useStyle.tableElementStyles;
            var _useConfig = useConfig("table"), global2 = _useConfig.global;
            var _useFixed = useFixed(props2), affixHeaderRef = _useFixed.affixHeaderRef, scrollbarWidth = _useFixed.scrollbarWidth, virtualScrollHeaderPos = _useFixed.virtualScrollHeaderPos, tableWidth = _useFixed.tableWidth, tableContentRef = _useFixed.tableContentRef, isFixedHeader = _useFixed.isFixedHeader, isWidthOverflow = _useFixed.isWidthOverflow, isFixedColumn = _useFixed.isFixedColumn, thWidthList = _useFixed.thWidthList, showColumnShadow = _useFixed.showColumnShadow, showAffixHeader = _useFixed.showAffixHeader, rowAndColFixedPosition = _useFixed.rowAndColFixedPosition, refreshTable = _useFixed.refreshTable, onTableContentScroll = _useFixed.onTableContentScroll, updateHeaderScroll = _useFixed.updateHeaderScroll;
            var _useTableHeader = useTableHeader(props2), isMultipleHeader = _useTableHeader.isMultipleHeader, spansAndLeafNodes = _useTableHeader.spansAndLeafNodes, thList = _useTableHeader.thList;
            var _usePagination = usePagination(props2), dataSource = _usePagination.dataSource, isPaginateData = _usePagination.isPaginateData, renderPagination = _usePagination.renderPagination;
            var dynamicBaseTableClasses = vue.computed(function() {
              var _ref;
              return [tableClasses.value, (_ref = {}, _defineProperty$3(_ref, tableBaseClass.headerFixed, isFixedHeader.value), _defineProperty$3(_ref, tableBaseClass.columnFixed, isFixedColumn.value), _defineProperty$3(_ref, tableBaseClass.widthOverflow, isWidthOverflow.value), _defineProperty$3(_ref, tableBaseClass.multipleHeader, isMultipleHeader.value), _defineProperty$3(_ref, tableColFixedClasses.leftShadow, showColumnShadow.left), _defineProperty$3(_ref, tableColFixedClasses.rightShadow, showColumnShadow.right), _ref)];
            });
            var tableElmClasses = vue.computed(function() {
              return [[tableLayoutClasses[props2.tableLayout]], _defineProperty$3({}, tableBaseClass.fullHeight, props2.height)];
            });
            var isVirtual = vue.computed(function() {
              var _props2$data, _props2$scroll;
              return type === "virtual" && ((_props2$data = props2.data) === null || _props2$data === void 0 ? void 0 : _props2$data.length) > (((_props2$scroll = props2.scroll) === null || _props2$scroll === void 0 ? void 0 : _props2$scroll.threshold) || 100);
            });
            var showRightDivider = vue.computed(function() {
              return props2.bordered && isFixedHeader.value && (isMultipleHeader.value && isWidthOverflow.value || !isMultipleHeader.value);
            });
            var onFixedChange = function onFixedChange2() {
              vue.nextTick(function() {
                updateHeaderScroll();
              });
            };
            var _ref3 = props2.scroll || {}, type = _ref3.type, rowHeight = _ref3.rowHeight, _ref3$bufferSize = _ref3.bufferSize, bufferSize = _ref3$bufferSize === void 0 ? 20 : _ref3$bufferSize, _ref3$isFixedRowHeigh = _ref3.isFixedRowHeight, isFixedRowHeight = _ref3$isFixedRowHeigh === void 0 ? false : _ref3$isFixedRowHeigh;
            var _toRefs = vue.toRefs(props2), data = _toRefs.data;
            var _ref4 = type === "virtual" ? useVirtualScroll({
              container: tableContentRef,
              data,
              fixedHeight: isFixedRowHeight,
              lineHeight: rowHeight,
              bufferSize,
              threshold: (_props2$scroll2 = props2.scroll) === null || _props2$scroll2 === void 0 ? void 0 : _props2$scroll2.threshold
            }) : {}, _ref4$trs = _ref4.trs, trs = _ref4$trs === void 0 ? null : _ref4$trs, _ref4$scrollHeight = _ref4.scrollHeight, scrollHeight = _ref4$scrollHeight === void 0 ? null : _ref4$scrollHeight, _ref4$visibleData = _ref4.visibleData, visibleData = _ref4$visibleData === void 0 ? null : _ref4$visibleData, _ref4$translateY = _ref4.translateY, translateY = _ref4$translateY === void 0 ? null : _ref4$translateY, _ref4$handleScroll = _ref4.handleScroll, handleVirtualScroll = _ref4$handleScroll === void 0 ? null : _ref4$handleScroll, _ref4$handleRowMounte = _ref4.handleRowMounted, handleRowMounted = _ref4$handleRowMounte === void 0 ? null : _ref4$handleRowMounte;
            vue.provide("tableContentRef", tableContentRef);
            vue.provide("rowHeightRef", vue.ref(rowHeight));
            var lastScrollY = -1;
            var onInnerScroll = type === "virtual" ? function(e) {
              onTableContentScroll(e);
              var target = e.target || e.srcElement;
              var top2 = target.scrollTop;
              if (Math.abs(lastScrollY - top2) > 5) {
                handleVirtualScroll();
                lastScrollY = top2;
              } else {
                lastScrollY = -1;
              }
            } : onTableContentScroll;
            return {
              thList,
              isVirtual,
              global: global2,
              virtualScrollHeaderPos,
              tableWidth,
              tableRef,
              tableElmRef,
              tableBaseClass,
              spansAndLeafNodes,
              dynamicBaseTableClasses,
              tableContentStyles,
              tableElementStyles,
              virtualScrollClasses,
              tableLayoutClasses,
              tableElmClasses,
              tableContentRef,
              isFixedHeader,
              isWidthOverflow,
              isFixedColumn,
              rowAndColFixedPosition,
              showColumnShadow,
              thWidthList,
              isPaginateData,
              dataSource,
              scrollType: type,
              rowHeight,
              trs,
              bufferSize,
              scrollHeight,
              visibleData,
              translateY,
              affixHeaderRef,
              showAffixHeader,
              statusClassNames,
              scrollbarWidth,
              isMultipleHeader,
              showRightDivider,
              refreshTable,
              onTableContentScroll,
              renderPagination,
              renderTNode,
              handleRowMounted,
              onFixedChange,
              updateHeaderScroll,
              onInnerScroll
            };
          },
          render: function render() {
            var _this$spansAndLeafNod, _this$spansAndLeafNod2, _this = this, _this$tableContentRef;
            var rowAndColFixedPosition = this.rowAndColFixedPosition;
            var data = this.isPaginateData ? this.dataSource : this.data;
            var defaultColWidth = this.tableLayout === "fixed" && this.isWidthOverflow ? "100px" : void 0;
            var affixedHeader = Boolean((this.headerAffixedTop || this.isVirtual) && this.tableWidth) && vue.createVNode("div", {
              "ref": "affixHeaderRef",
              "style": {
                width: "".concat(this.tableWidth, "px"),
                opacity: Number(this.showAffixHeader)
              },
              "class": _defineProperty$3({}, this.tableBaseClass.affixedHeaderElm, this.headerAffixedTop || this.isVirtual)
            }, [vue.createVNode("table", {
              "class": this.tableElmClasses,
              "style": _objectSpread$n(_objectSpread$n({}, this.tableElementStyles), {}, {
                width: "".concat(this.tableWidth, "px")
              })
            }, [vue.createVNode("colgroup", null, [(((_this$spansAndLeafNod = this.spansAndLeafNodes) === null || _this$spansAndLeafNod === void 0 ? void 0 : _this$spansAndLeafNod.leafColumns) || this.columns).map(function(col) {
              return vue.createVNode("col", {
                "key": col.colKey,
                "style": {
                  width: formatCSSUnit(col.width) || defaultColWidth
                }
              }, null);
            })]), vue.createVNode(THead, {
              "isFixedHeader": this.isFixedHeader,
              "rowAndColFixedPosition": this.rowAndColFixedPosition,
              "isMultipleHeader": this.isMultipleHeader,
              "bordered": this.bordered,
              "spansAndLeafNodes": this.spansAndLeafNodes,
              "thList": this.thList,
              "thWidthList": this.thWidthList
            }, this.$slots)])]);
            var translate = "translate(0, ".concat(this.scrollHeight, "px)");
            var virtualStyle = {
              transform: translate,
              "-ms-transform": translate,
              "-moz-transform": translate,
              "-webkit-transform": translate
            };
            var tableBodyProps = _objectSpread$n({
              rowAndColFixedPosition,
              showColumnShadow: this.showColumnShadow,
              data: this.isVirtual ? this.visibleData : data,
              columns: this.spansAndLeafNodes.leafColumns,
              tableElm: this.tableRef,
              tableWidth: this.tableWidth,
              isWidthOverflow: this.isWidthOverflow,
              isVirtual: this.isVirtual,
              translateY: this.translateY,
              scrollType: this.scrollType,
              rowHeight: this.rowHeight,
              trs: this.trs,
              bufferSize: this.bufferSize,
              scroll: this.scroll,
              tableContentElm: this.tableContentRef,
              handleRowMounted: this.handleRowMounted,
              renderExpandedRow: this.renderExpandedRow
            }, pick_1(this.$props, extendTableProps));
            var tableContent = vue.createVNode("div", {
              "ref": "tableContentRef",
              "class": this.tableBaseClass.content,
              "style": this.tableContentStyles,
              "onScroll": this.onInnerScroll
            }, [this.isVirtual && vue.createVNode("div", {
              "class": this.virtualScrollClasses.cursor,
              "style": virtualStyle
            }, null), vue.createVNode("table", {
              "ref": "tableElmRef",
              "class": this.tableElmClasses,
              "style": this.tableElementStyles
            }, [vue.createVNode("colgroup", null, [(((_this$spansAndLeafNod2 = this.spansAndLeafNodes) === null || _this$spansAndLeafNod2 === void 0 ? void 0 : _this$spansAndLeafNod2.leafColumns) || this.columns).map(function(col) {
              return vue.createVNode("col", {
                "key": col.colKey,
                "style": {
                  width: formatCSSUnit(col.width) || defaultColWidth
                }
              }, null);
            })]), vue.createVNode(THead, {
              "isFixedHeader": this.isFixedHeader,
              "rowAndColFixedPosition": this.rowAndColFixedPosition,
              "isMultipleHeader": this.isMultipleHeader,
              "bordered": this.bordered,
              "spansAndLeafNodes": this.spansAndLeafNodes,
              "thList": this.thList
            }, this.$slots), vue.createVNode(TBody, tableBodyProps, this.$slots), vue.createVNode(TFoot, {
              "rowKey": this.rowKey,
              "isFixedHeader": this.isFixedHeader,
              "rowAndColFixedPosition": rowAndColFixedPosition,
              "footData": this.footData,
              "columns": this.columns,
              "rowAttributes": this.rowAttributes,
              "rowClassName": this.rowClassName
            }, this.$slots)])]);
            var customLoadingText = this.renderTNode("loading");
            var loadingContent = this.loading !== void 0 && vue.createVNode(Loading, vue.mergeProps({
              "loading": !!this.loading,
              "text": customLoadingText ? function() {
                return customLoadingText;
              } : void 0,
              "attach": this.tableRef ? function() {
                return _this.tableRef;
              } : void 0,
              "showOverlay": true
            }, this.loadingProps), null);
            var topContent = this.renderTNode("topContent");
            var bottomContent = this.renderTNode("bottomContent");
            return vue.createVNode("div", {
              "ref": "tableRef",
              "class": this.dynamicBaseTableClasses,
              "style": "position: relative"
            }, [!!topContent && vue.createVNode("div", {
              "class": this.tableBaseClass.topContent
            }, [topContent]), !!(this.isVirtual || this.headerAffixedTop) && (this.headerAffixedTop ? vue.createVNode(Affix, vue.mergeProps({
              "offsetTop": 0
            }, this.headerAffixProps, {
              "onFixedChange": this.onFixedChange
            }), _isSlot$3(affixedHeader) ? affixedHeader : {
              "default": function _default() {
                return [affixedHeader];
              }
            }) : this.isFixedHeader && affixedHeader), tableContent, loadingContent, this.showRightDivider && vue.createVNode("div", {
              "class": this.tableBaseClass.scrollbarDivider,
              "style": {
                right: "".concat(this.scrollbarWidth, "px"),
                height: "".concat((_this$tableContentRef = this.tableContentRef) === null || _this$tableContentRef === void 0 ? void 0 : _this$tableContentRef.offsetHeight, "px")
              }
            }, null), !!bottomContent && vue.createVNode("div", {
              "class": this.tableBaseClass.bottomContent
            }, [bottomContent]), this.renderPagination()]);
          }
        });
        function last$1(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : void 0;
        }
        var last_1 = last$1;
        var baseGet$1 = _baseGet, baseSlice = _baseSlice;
        function parent$1(object, path6) {
          return path6.length < 2 ? object : baseGet$1(object, baseSlice(path6, 0, -1));
        }
        var _parent = parent$1;
        var castPath$1 = _castPath, last = last_1, parent = _parent, toKey$2 = _toKey;
        function baseUnset$1(object, path6) {
          path6 = castPath$1(path6, object);
          object = parent(object, path6);
          return object == null || delete object[toKey$2(last(path6))];
        }
        var _baseUnset = baseUnset$1;
        var isPlainObject = isPlainObject_1;
        function customOmitClone$1(value) {
          return isPlainObject(value) ? void 0 : value;
        }
        var _customOmitClone = customOmitClone$1;
        var arrayMap = _arrayMap, baseClone = _baseClone, baseUnset = _baseUnset, castPath = _castPath, copyObject = _copyObject, customOmitClone = _customOmitClone, flatRest = _flatRest, getAllKeysIn = _getAllKeysIn;
        var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
        var omit = flatRest(function(object, paths) {
          var result = {};
          if (object == null) {
            return result;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path6) {
            path6 = castPath(path6, object);
            isDeep || (isDeep = path6.length > 1);
            return path6;
          });
          copyObject(object, getAllKeysIn(object), result);
          if (isDeep) {
            result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result, paths[length]);
          }
          return result;
        });
        var omit_1 = omit;
        var primaryTableProps = {
          asyncLoading: {
            type: [String, Function]
          },
          columnController: {
            type: Object
          },
          columnControllerVisible: {
            type: Boolean,
            "default": void 0
          },
          defaultColumnControllerVisible: {
            type: Boolean,
            "default": void 0
          },
          columns: {
            type: Array,
            "default": function _default() {
              return [];
            }
          },
          displayColumns: {
            type: Array,
            "default": void 0
          },
          defaultDisplayColumns: {
            type: Array
          },
          dragSort: {
            type: String,
            validator: function validator(val) {
              if (!val)
                return true;
              return ["row", "row-handler", "col", "drag-col"].includes(val);
            }
          },
          dragSortOptions: {
            type: Object
          },
          expandedRow: {
            type: [String, Function]
          },
          expandedRowKeys: {
            type: Array,
            "default": void 0
          },
          defaultExpandedRowKeys: {
            type: Array,
            "default": function _default() {
              return [];
            }
          },
          expandIcon: {
            type: [Boolean, Function],
            "default": true
          },
          expandOnRowClick: Boolean,
          filterIcon: {
            type: Function
          },
          filterRow: {
            type: [String, Function]
          },
          filterValue: {
            type: Object,
            "default": void 0
          },
          defaultFilterValue: {
            type: Object
          },
          hideSortTips: Boolean,
          multipleSort: Boolean,
          selectedRowKeys: {
            type: Array,
            "default": void 0
          },
          defaultSelectedRowKeys: {
            type: Array
          },
          sort: {
            type: [Object, Array],
            "default": void 0
          },
          defaultSort: {
            type: [Object, Array]
          },
          sortIcon: {
            type: Function
          },
          sortOnRowDraggable: Boolean,
          onAsyncLoadingClick: Function,
          onCellClick: Function,
          onChange: Function,
          onColumnChange: Function,
          onColumnControllerVisibleChange: Function,
          onDataChange: Function,
          onDisplayColumnsChange: Function,
          onDragSort: Function,
          onExpandChange: Function,
          onFilterChange: Function,
          onSelectChange: Function,
          onSortChange: Function
        };
        var props$7 = {
          attach: {
            type: [String, Function],
            "default": ""
          },
          body: {
            type: [String, Function],
            "default": ""
          },
          cancelBtn: {
            type: [String, Object, Function],
            "default": ""
          },
          closeBtn: {
            type: [String, Boolean, Function],
            "default": true
          },
          closeOnEscKeydown: {
            type: Boolean,
            "default": true
          },
          closeOnOverlayClick: {
            type: Boolean,
            "default": true
          },
          confirmBtn: {
            type: [String, Object, Function],
            "default": ""
          },
          "default": {
            type: [String, Function]
          },
          destroyOnClose: Boolean,
          draggable: Boolean,
          footer: {
            type: [Boolean, Function],
            "default": true
          },
          header: {
            type: [String, Boolean, Function],
            "default": true
          },
          mode: {
            type: String,
            "default": "modal",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["modal", "modeless", "normal"].includes(val);
            }
          },
          placement: {
            type: String,
            "default": "top",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["top", "center"].includes(val);
            }
          },
          preventScrollThrough: {
            type: Boolean,
            "default": true
          },
          showInAttachedElement: Boolean,
          showOverlay: {
            type: Boolean,
            "default": true
          },
          theme: {
            type: String,
            "default": "default",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["default", "info", "warning", "danger", "success"].includes(val);
            }
          },
          top: {
            type: [String, Number]
          },
          visible: Boolean,
          defaultVisible: Boolean,
          width: {
            type: [String, Number]
          },
          zIndex: {
            type: Number
          },
          onCancel: Function,
          onClose: Function,
          onCloseBtnClick: Function,
          onClosed: Function,
          onConfirm: Function,
          onEscKeydown: Function,
          onOpened: Function,
          onOverlayClick: Function
        };
        function ownKeys$n(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$m(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$n(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$n(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function useAction(action) {
          var instance = vue.getCurrentInstance();
          var renderTNodeJSX2 = useTNodeJSX();
          var getDefaultConfirmBtnProps = function getDefaultConfirmBtnProps2(options) {
            var globalConfirm = options.globalConfirm, theme = options.theme, globalConfirmBtnTheme = options.globalConfirmBtnTheme;
            var defaultTheme = (globalConfirmBtnTheme === null || globalConfirmBtnTheme === void 0 ? void 0 : globalConfirmBtnTheme[theme]) || "primary";
            var props2 = {
              theme: defaultTheme,
              size: options.size,
              onClick: function onClick(e) {
                action.confirmBtnAction(e);
              }
            };
            if (isString_1(globalConfirm)) {
              props2.content = globalConfirm;
            } else if (isObject_1(globalConfirm)) {
              props2 = _objectSpread$m(_objectSpread$m({}, props2), globalConfirm);
            }
            return props2;
          };
          var getDefaultCancelBtnProps = function getDefaultCancelBtnProps2(options) {
            var globalCancel = options.globalCancel;
            var props2 = {
              theme: "default",
              size: options.size,
              onClick: function onClick(e) {
                action.cancelBtnAction(e);
              }
            };
            if (isString_1(globalCancel)) {
              props2.content = globalCancel;
            } else if (isObject_1(globalCancel)) {
              props2 = _objectSpread$m(_objectSpread$m({}, props2), globalCancel);
            }
            return props2;
          };
          var getButtonByProps = function getButtonByProps2(button, defaultButton, className) {
            var newOptions = defaultButton;
            if (isString_1(button)) {
              newOptions.content = button;
            } else if (isObject_1(button)) {
              newOptions = _objectSpread$m(_objectSpread$m({}, newOptions), button);
            }
            return vue.createVNode(Button, vue.mergeProps({
              "class": className
            }, newOptions), null);
          };
          var getConfirmBtn = function getConfirmBtn2(options) {
            var confirmBtn = options.confirmBtn, className = options.className;
            if (confirmBtn === null)
              return null;
            if (confirmBtn && instance.slots.confirmBtn) {
              console.warn("Both $props.confirmBtn and $scopedSlots.confirmBtn exist, $props.confirmBtn is preferred.");
            }
            var defaultButtonProps = getDefaultConfirmBtnProps(options);
            if (!confirmBtn && !instance.slots.confirmBtn) {
              return vue.createVNode(Button, vue.mergeProps({
                "class": className
              }, defaultButtonProps), null);
            }
            if (confirmBtn && ["string", "object"].includes(_typeof$2(confirmBtn))) {
              return getButtonByProps(confirmBtn, defaultButtonProps, className);
            }
            return renderTNodeJSX2("confirmBtn");
          };
          var getCancelBtn = function getCancelBtn2(options) {
            var cancelBtn = options.cancelBtn, className = options.className;
            if (cancelBtn === null)
              return null;
            if (cancelBtn && instance.slots.cancelBtn) {
              console.warn("Both $props.cancelBtn and $scopedSlots.cancelBtn exist, $props.cancelBtn is preferred.");
            }
            var defaultButtonProps = getDefaultCancelBtnProps(options);
            if (!cancelBtn && !instance.slots.cancelBtn) {
              return vue.createVNode(Button, vue.mergeProps({
                "class": className
              }, defaultButtonProps), null);
            }
            if (cancelBtn && ["string", "object"].includes(_typeof$2(cancelBtn))) {
              return getButtonByProps(cancelBtn, defaultButtonProps);
            }
            return renderTNodeJSX2("cancelBtn");
          };
          return {
            getConfirmBtn,
            getCancelBtn
          };
        }
        function ownKeys$m(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$l(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$m(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$m(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function GetCSSValue(v) {
          return Number.isNaN(Number(v)) ? v : "".concat(Number(v), "px");
        }
        var mousePosition;
        var getClickPosition = function getClickPosition2(e) {
          mousePosition = {
            x: e.clientX,
            y: e.clientY
          };
          setTimeout(function() {
            mousePosition = null;
          }, 100);
        };
        if (typeof window !== "undefined" && window.document && window.document.documentElement) {
          document.documentElement.addEventListener("click", getClickPosition, true);
        }
        function InitDragEvent(dragBox) {
          var target = dragBox;
          target.addEventListener("mousedown", function(targetEvent) {
            var disX = targetEvent.clientX - target.offsetLeft;
            var disY = targetEvent.clientY - target.offsetTop;
            function mouseMoverHandler(documentEvent) {
              var left2 = documentEvent.clientX - disX;
              var top2 = documentEvent.clientY - disY;
              target.style.left = "".concat(left2, "px");
              target.style.top = "".concat(top2, "px");
            }
            function mouseUpHandler() {
              document.removeEventListener("mousemove", mouseMoverHandler);
              document.removeEventListener("mouseup", mouseUpHandler);
            }
            document.addEventListener("mousemove", mouseMoverHandler);
            document.addEventListener("mouseup", mouseUpHandler);
            document.addEventListener("dragend", mouseUpHandler);
          });
        }
        var _Dialog = vue.defineComponent({
          name: "TDialog",
          components: {
            CloseIcon: close,
            InfoCircleFilledIcon: infoCircleFilled,
            CheckCircleFilledIcon: checkCircleFilled,
            ErrorCircleFilledIcon: errorCircleFilled,
            TButton: Button,
            Transition: vue.Transition
          },
          directives: {
            TransferDom,
            draggable: function draggable(el, binding) {
              if (el && binding && binding.value) {
                InitDragEvent(el);
              }
            }
          },
          props: props$7,
          emits: ["update:visible"],
          setup: function setup(props2, context) {
            var _this = this;
            var COMPONENT_NAME2 = usePrefixClass("dialog");
            var LOCK_CLASS = usePrefixClass("dialog--lock");
            var classPrefix2 = usePrefixClass();
            var renderContent2 = useContent();
            var renderTNodeJSX2 = useTNodeJSX();
            var dialogEle = vue.ref(null);
            var _useConfig = useConfig("dialog"), global2 = _useConfig.global;
            var confirmBtnAction = function confirmBtnAction2(e) {
              var _props2$onConfirm;
              (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 ? void 0 : _props2$onConfirm.call(props2, {
                e
              });
            };
            var cancelBtnAction = function cancelBtnAction2(e) {
              var _props2$onCancel;
              (_props2$onCancel = props2.onCancel) === null || _props2$onCancel === void 0 ? void 0 : _props2$onCancel.call(props2, {
                e
              });
              emitCloseEvent({
                trigger: "cancel",
                e
              });
            };
            var _useAction = useAction({
              confirmBtnAction,
              cancelBtnAction
            }), getConfirmBtn = _useAction.getConfirmBtn, getCancelBtn = _useAction.getCancelBtn;
            useDestroyOnClose();
            var scrollWidth = vue.ref(0);
            var isModal = vue.computed(function() {
              return props2.mode === "modal";
            });
            var isModeless = vue.computed(function() {
              return props2.mode === "modeless";
            });
            var maskClass = vue.computed(function() {
              return ["".concat(COMPONENT_NAME2.value, "__mask"), !props2.showOverlay && "".concat(classPrefix2.value, "-is-hidden")];
            });
            var dialogClass = vue.computed(function() {
              var dialogClass2 = ["".concat(COMPONENT_NAME2.value), "".concat(COMPONENT_NAME2.value, "--default"), "".concat(COMPONENT_NAME2.value, "--").concat(props2.placement), "".concat(COMPONENT_NAME2.value, "__modal-").concat(props2.theme)];
              if (["modeless", "modal"].includes(props2.mode)) {
                dialogClass2.push("".concat(COMPONENT_NAME2.value, "--fixed"));
                if (isModal.value && props2.showInAttachedElement) {
                  dialogClass2.push("".concat(COMPONENT_NAME2.value, "--absolute"));
                }
              }
              return dialogClass2;
            });
            var dialogStyle = vue.computed(function() {
              var top2 = props2.top, placement = props2.placement;
              var topStyle = {};
              if (top2) {
                var topValue = GetCSSValue(top2);
                topStyle = {
                  top: topValue,
                  transform: "translate(-50%, 0)",
                  maxHeight: "calc(100% - ".concat(topValue, ")")
                };
              } else if (placement === "top") {
                topStyle = {
                  maxHeight: "calc(100% - 20%)"
                };
              }
              return _objectSpread$l({
                width: GetCSSValue(props2.width)
              }, topStyle);
            });
            vue.watch(function() {
              return props2.visible;
            }, function(value) {
              if (value) {
                if (isModal.value && !props2.showInAttachedElement) {
                  if (scrollWidth.value > 0) {
                    var bodyCssText = "position: relative;width: calc(100% - ".concat(scrollWidth.value, "px);");
                    document.body.style.cssText = bodyCssText;
                  }
                  !isModeless.value && addClass(document.body, LOCK_CLASS.value);
                  vue.nextTick(function() {
                    if (mousePosition && dialogEle.value) {
                      dialogEle.value.style.transformOrigin = "".concat(mousePosition.x - dialogEle.value.offsetLeft, "px ").concat(mousePosition.y - dialogEle.value.offsetTop, "px");
                    }
                  });
                }
              } else {
                document.body.style.cssText = "";
                removeClass(document.body, LOCK_CLASS.value);
              }
              addKeyboardEvent(value);
            });
            var addKeyboardEvent = function addKeyboardEvent2(status) {
              if (status) {
                document.addEventListener("keydown", keyboardEvent);
              } else {
                document.removeEventListener("keydown", keyboardEvent);
              }
            };
            var keyboardEvent = function keyboardEvent2(e) {
              if (e.code === "Escape") {
                var _props2$onEscKeydown;
                (_props2$onEscKeydown = props2.onEscKeydown) === null || _props2$onEscKeydown === void 0 ? void 0 : _props2$onEscKeydown.call(props2, {
                  e
                });
                if (props2.closeOnEscKeydown) {
                  emitCloseEvent({
                    trigger: "esc",
                    e
                  });
                }
              }
            };
            var overlayAction = function overlayAction2(e) {
              var _props2$onOverlayClic;
              (_props2$onOverlayClic = props2.onOverlayClick) === null || _props2$onOverlayClic === void 0 ? void 0 : _props2$onOverlayClic.call(props2, {
                e
              });
              if (props2.closeOnOverlayClick) {
                emitCloseEvent({
                  trigger: "overlay",
                  e
                });
              }
            };
            var closeBtnAction = function closeBtnAction2(e) {
              var _props2$onCloseBtnCli;
              (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 ? void 0 : _props2$onCloseBtnCli.call(props2, {
                e
              });
              emitCloseEvent({
                trigger: "close-btn",
                e
              });
            };
            var afterEnter = function afterEnter2() {
              var _props2$onOpened;
              (_props2$onOpened = props2.onOpened) === null || _props2$onOpened === void 0 ? void 0 : _props2$onOpened.call(props2);
            };
            var afterLeave = function afterLeave2() {
              var _props2$onClosed;
              (_props2$onClosed = props2.onClosed) === null || _props2$onClosed === void 0 ? void 0 : _props2$onClosed.call(props2);
            };
            var emitCloseEvent = function emitCloseEvent2(ctx) {
              var _props2$onClose;
              (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 ? void 0 : _props2$onClose.call(props2, ctx);
              context.emit("update:visible", false);
            };
            var hasEventOn = function hasEventOn2(name) {
              var _this$_events;
              var eventFuncs = (_this$_events = _this["_events"]) === null || _this$_events === void 0 ? void 0 : _this$_events[name];
              return !!(eventFuncs !== null && eventFuncs !== void 0 && eventFuncs.length);
            };
            var getIcon = function getIcon2() {
              var icon = {
                info: vue.createVNode(infoCircleFilled, {
                  "class": "t-is-info"
                }, null),
                warning: vue.createVNode(errorCircleFilled, {
                  "class": "t-is-warning"
                }, null),
                danger: vue.createVNode(errorCircleFilled, {
                  "class": "t-is-error"
                }, null),
                success: vue.createVNode(checkCircleFilled, {
                  "class": "t-is-success"
                }, null)
              };
              return icon[props2.theme];
            };
            var renderDialog = function renderDialog2() {
              var defaultHeader = vue.createVNode("h5", {
                "class": "title"
              }, null);
              var defaultCloseBtn = vue.createVNode(close, null, null);
              var body = renderContent2("default", "body");
              var defaultFooter = vue.createVNode("div", null, [getCancelBtn({
                cancelBtn: props2.cancelBtn,
                globalCancel: global2.value.cancel,
                className: "".concat(COMPONENT_NAME2.value, "__cancel")
              }), getConfirmBtn({
                theme: props2.theme,
                confirmBtn: props2.confirmBtn,
                globalConfirm: global2.value.confirm,
                globalConfirmBtnTheme: global2.value.confirmBtnTheme,
                className: "".concat(COMPONENT_NAME2.value, "__confirm")
              })]);
              var bodyClassName = props2.theme === "default" ? "".concat(COMPONENT_NAME2.value, "__body") : "".concat(COMPONENT_NAME2.value, "__body__icon");
              return vue.withDirectives(vue.createVNode("div", {
                "key": "dialog",
                "class": dialogClass.value,
                "style": dialogStyle.value,
                "ref": "dialogEle"
              }, [vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__header")
              }, [getIcon(), renderTNodeJSX2("header", defaultHeader)]), props2.closeBtn ? vue.createVNode("span", {
                "class": "".concat(COMPONENT_NAME2.value, "__close"),
                "onClick": closeBtnAction
              }, [renderTNodeJSX2("closeBtn", defaultCloseBtn)]) : null, vue.createVNode("div", {
                "class": bodyClassName
              }, [body]), vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__footer")
              }, [renderTNodeJSX2("footer", defaultFooter)])]), [[vue.resolveDirective("draggable"), isModeless.value && props2.draggable]]);
            };
            vue.onMounted(function() {
              scrollWidth.value = window.innerWidth - document.body.offsetWidth;
            });
            vue.onBeforeUnmount(function() {
              addKeyboardEvent(false);
            });
            return {
              COMPONENT_NAME: COMPONENT_NAME2,
              scrollWidth,
              isModal,
              isModeless,
              maskClass,
              dialogClass,
              dialogStyle,
              dialogEle,
              afterEnter,
              afterLeave,
              hasEventOn,
              renderDialog,
              overlayAction
            };
          },
          render: function render() {
            var _this2 = this;
            var COMPONENT_NAME2 = this.COMPONENT_NAME;
            var maskView = this.isModal && vue.createVNode("div", {
              "key": "mask",
              "class": this.maskClass,
              "onClick": this.overlayAction
            }, null);
            var dialogView = this.renderDialog();
            var view = [maskView, dialogView];
            var ctxStyle = {
              zIndex: this.zIndex
            };
            var ctxClass = ["".concat(COMPONENT_NAME2, "__ctx"), _defineProperty$3({
              "t-dialog__ctx--fixed": this.mode === "modal"
            }, "".concat(COMPONENT_NAME2, "__ctx--absolute"), this.isModal && this.showInAttachedElement)];
            return vue.createVNode(vue.resolveComponent("transition"), {
              "duration": 300,
              "name": "".concat(COMPONENT_NAME2, "-zoom__vue"),
              "onAfterEnter": this.afterEnter,
              "onAfterLeave": this.afterLeave
            }, {
              "default": function _default() {
                return [(!_this2.destroyOnClose || _this2.visible) && vue.withDirectives(vue.createVNode("div", {
                  "class": ctxClass,
                  "style": ctxStyle
                }, [view]), [[vue.vShow, _this2.visible], [vue.resolveDirective("transfer-dom"), _this2.attach]])];
              }
            });
          }
        });
        function ownKeys$l(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$k(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$l(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$l(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var createDialog = function createDialog2(props2) {
          var options = _objectSpread$k({}, props2);
          var wrapper = document.createElement("div");
          var visible = vue.ref(false);
          var className = options.className;
          var component = vue.defineComponent({
            setup: function setup() {
              var dialogOptions = vue.ref(options);
              vue.onMounted(function() {
                visible.value = true;
                document.activeElement.blur();
              });
              return {
                dialogOptions
              };
            },
            render: function render() {
              var onClose = options.onClose || function() {
                visible.value = false;
              };
              delete options.className;
              return vue.h(_Dialog, _objectSpread$k({
                onClose,
                visible: visible.value
              }, this.dialogOptions));
            }
          });
          var dialog = vue.createApp(component).mount(wrapper);
          if (className) {
            className.split(" ").forEach(function(name) {
              dialog.$el.classList.add(name.trim());
            });
          }
          if (options.style) {
            dialog.$el.style.cssText += options.style;
          }
          var container = getAttach(options.attach);
          if (container) {
            container.appendChild(wrapper);
          } else {
            console.error("attach is not exist");
          }
          var dialogNode = {
            show: function show() {
              visible.value = true;
            },
            hide: function hide2() {
              visible.value = false;
            },
            update: function update(options2) {
              Object.assign(dialog, {
                dialogOptions: options2
              });
            },
            destroy: function destroy() {
              visible.value = false;
            }
          };
          return dialogNode;
        };
        var confirm2 = function confirm3(props2) {
          return createDialog(props2);
        };
        var alert2 = function alert3(props2) {
          var options = _objectSpread$k({}, props2);
          options.cancelBtn = null;
          return createDialog(options);
        };
        var extraApi$1 = {
          confirm: confirm2,
          alert: alert2
        };
        var DialogPlugin = createDialog;
        DialogPlugin.install = function(app2) {
          app2.config.globalProperties.$dialog = createDialog;
          Object.keys(extraApi$1).forEach(function(funcName) {
            app2.config.globalProperties.$dialog[funcName] = extraApi$1[funcName];
          });
        };
        Object.keys(extraApi$1).forEach(function(funcName) {
          DialogPlugin[funcName] = extraApi$1[funcName];
        });
        function ownKeys$k(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$j(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$k(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$k(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function getColumnKeys(columns) {
          var keys2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : /* @__PURE__ */ new Set();
          for (var i2 = 0, len = columns.length; i2 < len; i2++) {
            var _col$children;
            var col = columns[i2];
            col.colKey && keys2.add(col.colKey);
            if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
              getColumnKeys(col.children, keys2);
            }
          }
          return keys2;
        }
        function useColumnController(props2, context) {
          var _useConfig = useConfig("table"), classPrefix2 = _useConfig.classPrefix, global2 = _useConfig.global;
          var _toRefs = vue.toRefs(props2), columns = _toRefs.columns, columnController = _toRefs.columnController, displayColumns = _toRefs.displayColumns, columnControllerVisible = _toRefs.columnControllerVisible;
          var dialogInstance = vue.ref(null);
          var enabledColKeys = vue.computed(function() {
            var _columnController$val;
            var arr = (((_columnController$val = columnController.value) === null || _columnController$val === void 0 ? void 0 : _columnController$val.fields) || _toConsumableArray(getColumnKeys(columns.value))).filter(function(v) {
              return v;
            });
            return new Set(arr);
          });
          var keys2 = _toConsumableArray(getColumnKeys(columns.value));
          var _useDefaultValue = useDefaultValue(displayColumns, props2.defaultDisplayColumns || keys2, props2.onDisplayColumnsChange, "displayColumns"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2), tDisplayColumns = _useDefaultValue2[0], setTDisplayColumns = _useDefaultValue2[1];
          var columnCheckboxKeys = vue.ref(displayColumns.value || props2.defaultDisplayColumns || keys2);
          var checkboxOptions = vue.computed(function() {
            return getCheckboxOptions(columns.value);
          });
          var intersectionChecked = vue.computed(function() {
            return intersection_1(columnCheckboxKeys.value, _toConsumableArray(enabledColKeys.value));
          });
          vue.watch([displayColumns], function(_ref) {
            var _ref2 = _slicedToArray(_ref, 1), val = _ref2[0];
            columnCheckboxKeys.value = val || props2.defaultDisplayColumns || keys2;
          });
          function getCheckboxOptions(columns2) {
            var arr = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
            var _loop = function _loop2(i3, len2) {
              var _item$children;
              var item = columns2[i3];
              if (item.colKey) {
                arr.push({
                  label: function label() {
                    return renderTitle(context.slots, item, i3);
                  },
                  value: item.colKey,
                  disabled: !enabledColKeys.value.has(item.colKey)
                });
              }
              if ((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
                getCheckboxOptions(item.children, arr);
              }
            };
            for (var i2 = 0, len = columns2.length; i2 < len; i2++) {
              _loop(i2);
            }
            return arr;
          }
          var handleCheckChange = function handleCheckChange2(val, ctx) {
            var _props$onColumnChange;
            columnCheckboxKeys.value = val;
            var params = {
              columns: val,
              type: ctx.type,
              currentColumn: getCurrentRowByKey(columns.value, String(ctx.current)),
              e: ctx.e
            };
            (_props$onColumnChange = props2.onColumnChange) === null || _props$onColumnChange === void 0 ? void 0 : _props$onColumnChange.call(props2, params);
          };
          var handleClickAllShowColumns = function handleClickAllShowColumns2(checked, ctx) {
            if (checked) {
              var _columns$value, _props$onColumnChange2;
              var newData = ((_columns$value = columns.value) === null || _columns$value === void 0 ? void 0 : _columns$value.map(function(t) {
                return t.colKey;
              })) || [];
              columnCheckboxKeys.value = newData;
              (_props$onColumnChange2 = props2.onColumnChange) === null || _props$onColumnChange2 === void 0 ? void 0 : _props$onColumnChange2.call(props2, {
                type: "check",
                columns: newData,
                e: ctx.e
              });
            } else {
              var _props$onColumnChange3;
              var disabledColKeys = checkboxOptions.value.filter(function(t) {
                return t.disabled;
              }).map(function(t) {
                return t.value;
              });
              columnCheckboxKeys.value = disabledColKeys;
              (_props$onColumnChange3 = props2.onColumnChange) === null || _props$onColumnChange3 === void 0 ? void 0 : _props$onColumnChange3.call(props2, {
                type: "uncheck",
                columns: disabledColKeys,
                e: ctx.e
              });
            }
          };
          var handleToggleColumnController = function handleToggleColumnController2() {
            var _columnController$val4;
            dialogInstance.value = DialogPlugin.confirm(_objectSpread$j({
              header: global2.value.columnConfigTitleText,
              body: function body() {
                var _columnController$val2, _columnController$val3;
                var widthMode = ((_columnController$val2 = columnController.value) === null || _columnController$val2 === void 0 ? void 0 : _columnController$val2.displayType) === "fixed-width" ? "fixed" : "auto";
                var checkedLength = intersectionChecked.value.length;
                var isCheckedAll = checkedLength === enabledColKeys.value.size;
                var isIndeterminate = checkedLength > 0 && checkedLength < enabledColKeys.value.size;
                var defaultNode = vue.createVNode("div", {
                  "class": ["".concat(classPrefix2.value, "-table__column-controller"), "".concat(classPrefix2.value, "-table__column-controller--").concat(widthMode)]
                }, [vue.createVNode("div", {
                  "class": "".concat(classPrefix2.value, "-table__column-controller-body")
                }, [vue.createVNode("p", {
                  "class": "".concat(classPrefix2.value, "-table__column-controller-desc")
                }, [global2.value.columnConfigDescriptionText]), vue.createVNode("div", {
                  "class": "".concat(classPrefix2.value, "-table__column-controller-block")
                }, [vue.createVNode(Checkbox, {
                  "indeterminate": isIndeterminate,
                  "checked": isCheckedAll,
                  "onChange": handleClickAllShowColumns
                }, {
                  "default": function _default() {
                    return [global2.value.selectAllText];
                  }
                })]), vue.createVNode("div", {
                  "class": "".concat(classPrefix2.value, "-table__column-controller-block")
                }, [vue.createVNode(CheckboxGroup, vue.mergeProps({
                  "options": checkboxOptions.value
                }, ((_columnController$val3 = columnController.value) === null || _columnController$val3 === void 0 ? void 0 : _columnController$val3.checkboxProps) || {}, {
                  "value": columnCheckboxKeys.value,
                  "onChange": handleCheckChange
                }), null)])])]);
                return defaultNode;
              },
              confirmBtn: global2.value.confirmText,
              cancelBtn: global2.value.cancelText,
              width: 612,
              onConfirm: function onConfirm() {
                setTDisplayColumns(_toConsumableArray(columnCheckboxKeys.value));
                if (columnControllerVisible.value === void 0) {
                  dialogInstance.value.hide();
                } else {
                  var _props$onColumnContro;
                  (_props$onColumnContro = props2.onColumnControllerVisibleChange) === null || _props$onColumnContro === void 0 ? void 0 : _props$onColumnContro.call(props2, false, {
                    trigger: "cancel"
                  });
                  context.emit("update:columnControllerVisible", false);
                }
              },
              onClose: function onClose() {
                if (columnControllerVisible.value === void 0) {
                  dialogInstance.value.hide();
                } else {
                  var _props$onColumnContro2;
                  (_props$onColumnContro2 = props2.onColumnControllerVisibleChange) === null || _props$onColumnContro2 === void 0 ? void 0 : _props$onColumnContro2.call(props2, false, {
                    trigger: "confirm"
                  });
                  context.emit("update:columnControllerVisible", false);
                }
              }
            }, ((_columnController$val4 = columnController.value) === null || _columnController$val4 === void 0 ? void 0 : _columnController$val4.dialogProps) || {}));
          };
          vue.watch([columnControllerVisible], function(_ref3) {
            var _ref4 = _slicedToArray(_ref3, 1), visible = _ref4[0];
            if (visible === void 0)
              return;
            if (dialogInstance.value) {
              visible ? dialogInstance.value.show() : dialogInstance.value.hide();
            } else {
              visible && handleToggleColumnController();
            }
          }, {
            immediate: true
          });
          var renderColumnController = function renderColumnController2() {
            var _props$columnControll;
            var isColumnController = !!(columnController.value && Object.keys(columnController.value).length);
            var placement = isColumnController ? columnController.value.placement || "top-right" : "";
            if (isColumnController && columnController.value.hideTriggerButton)
              return null;
            var classes = ["".concat(classPrefix2.value, "-table__column-controller-trigger"), _defineProperty$3({}, "".concat(classPrefix2.value, "-align-").concat(placement), !!placement)];
            return vue.createVNode("div", {
              "class": classes
            }, [vue.createVNode(Button, vue.mergeProps({
              "theme": "default",
              "variant": "outline",
              "onClick": handleToggleColumnController,
              "content": global2.value.columnConfigButtonText
            }, (_props$columnControll = props2.columnController) === null || _props$columnControll === void 0 ? void 0 : _props$columnControll.buttonProps), {
              icon: function icon() {
                return vue.createVNode(setting, null, null);
              }
            })]);
          };
          return {
            tDisplayColumns,
            columnCheckboxKeys,
            checkboxOptions,
            renderColumnController
          };
        }
        function useRowExpand(props2, context) {
          var _toRefs = vue.toRefs(props2), expandedRowKeys = _toRefs.expandedRowKeys;
          var renderTNode = useTNodeJSX();
          var _useConfig = useConfig("table"), t = _useConfig.t, global2 = _useConfig.global;
          var _useClassName = useClassName(), tableExpandClasses = _useClassName.tableExpandClasses, positiveRotate90 = _useClassName.positiveRotate90, tableFullRowClasses = _useClassName.tableFullRowClasses;
          var _useDefaultValue = useDefaultValue(expandedRowKeys, props2.defaultExpandedRowKeys, props2.onExpandChange, "expandedRowKeys"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2), tExpandedRowKeys = _useDefaultValue2[0], setTExpandedRowKeys = _useDefaultValue2[1];
          var showExpandedRow = vue.computed(function() {
            return Boolean(props2.expandedRow || context.slots.expandedRow || context.slots["expanded-row"]);
          });
          var showExpandIconColumn = vue.computed(function() {
            return props2.expandIcon !== false && showExpandedRow.value;
          });
          var isFirstColumnFixed = vue.computed(function() {
            var _props$columns, _props$columns$;
            return ((_props$columns = props2.columns) === null || _props$columns === void 0 ? void 0 : (_props$columns$ = _props$columns[0]) === null || _props$columns$ === void 0 ? void 0 : _props$columns$.fixed) === "left";
          });
          var onToggleExpand = function onToggleExpand2(e, row) {
            props2.expandOnRowClick && e.stopPropagation();
            var currentId = get_1(row, props2.rowKey || "id");
            var index2 = tExpandedRowKeys.value.indexOf(currentId);
            var newKeys = _toConsumableArray(tExpandedRowKeys.value);
            index2 !== -1 ? newKeys.splice(index2, 1) : newKeys.push(currentId);
            setTExpandedRowKeys(newKeys, {
              expandedRowData: props2.data.filter(function(t2) {
                return newKeys.includes(get_1(t2, props2.rowKey || "id"));
              })
            });
          };
          var renderExpandIcon = function renderExpandIcon2(_, p) {
            var row = p.row, rowIndex = p.rowIndex;
            var currentId = get_1(row, props2.rowKey || "id");
            var expanded = tExpandedRowKeys.value.includes(currentId);
            var icon = renderTNode("expandIcon", {
              defaultNode: t(global2.value.expandIcon) || vue.createVNode(chevronRightCircle, null, null),
              params: {
                row,
                index: rowIndex
              }
            });
            if (!icon)
              return null;
            var classes = [tableExpandClasses.iconBox, tableExpandClasses[expanded ? "expanded" : "collapsed"], _defineProperty$3({}, positiveRotate90, expanded)];
            return vue.createVNode("span", {
              "class": classes,
              "onClick": function onClick(e) {
                return onToggleExpand(e, row);
              }
            }, [icon]);
          };
          var getExpandColumn = function getExpandColumn2() {
            var expandCol = {
              colKey: "__EXPAND_ROW_ICON_COLUMN__",
              width: 64,
              className: tableExpandClasses.iconCell,
              fixed: isFirstColumnFixed.value ? "left" : void 0,
              cell: renderExpandIcon
            };
            return expandCol;
          };
          var renderExpandedRow = function renderExpandedRow2(p) {
            var rowId = get_1(p.row, props2.rowKey || "id");
            if (!tExpandedRowKeys.value.includes(rowId))
              return null;
            var isFixedLeft = p.isWidthOverflow && props2.columns.find(function(item) {
              return item.fixed === "left";
            });
            return vue.createVNode("tr", {
              "key": "expand_".concat(rowId),
              "class": [tableExpandClasses.row, _defineProperty$3({}, tableFullRowClasses.base, isFixedLeft)]
            }, [vue.createVNode("td", {
              "colspan": p.columns.length
            }, [vue.createVNode("div", {
              "class": [tableExpandClasses.rowInner, _defineProperty$3({}, tableFullRowClasses.innerFullRow, isFixedLeft)],
              "style": isFixedLeft ? {
                width: "".concat(p.tableWidth, "px")
              } : {}
            }, [vue.createVNode("div", {
              "class": tableFullRowClasses.innerFullElement
            }, [renderTNode("expandedRow", {
              params: p
            })])])])]);
          };
          var onInnerExpandRowClick = function onInnerExpandRowClick2(p) {
            onToggleExpand(p.e, p.row);
          };
          return {
            showExpandedRow,
            showExpandIconColumn,
            getExpandColumn,
            renderExpandedRow,
            onInnerExpandRowClick
          };
        }
        function ownKeys$j(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$i(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$j(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$j(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function useRowSelect(props2) {
          var _toRefs = vue.toRefs(props2), selectedRowKeys = _toRefs.selectedRowKeys, columns = _toRefs.columns, data = _toRefs.data, rowKey = _toRefs.rowKey;
          var _useClassName = useClassName(), tableSelectedClasses = _useClassName.tableSelectedClasses;
          var selectedRowClassNames = vue.ref();
          var _useDefaultValue = useDefaultValue(selectedRowKeys, props2.defaultSelectedRowKeys || [], props2.onSelectChange, "selectedRowKeys"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2), tSelectedRowKeys = _useDefaultValue2[0], setTSelectedRowKeys = _useDefaultValue2[1];
          var selectColumn = vue.computed(function() {
            return props2.columns.find(function(_ref) {
              var type = _ref.type;
              return ["multiple", "single"].includes(type);
            });
          });
          var canSelectedRows = vue.computed(function() {
            return props2.data.filter(function(row, rowIndex) {
              return !isDisabled(row, rowIndex);
            });
          });
          var intersectionKeys = vue.computed(function() {
            return intersection_1(tSelectedRowKeys.value, canSelectedRows.value.map(function(t) {
              return get_1(t, props2.rowKey || "id");
            }));
          });
          vue.watch([data, columns, tSelectedRowKeys, selectColumn, rowKey], function() {
            var _selectColumn$value;
            var disabledRowFunc = function disabledRowFunc2(p) {
              return selectColumn.value.disabled(p) ? tableSelectedClasses.disabled : "";
            };
            var disabledRowClass = (_selectColumn$value = selectColumn.value) !== null && _selectColumn$value !== void 0 && _selectColumn$value.disabled ? disabledRowFunc : void 0;
            var selected = new Set(tSelectedRowKeys.value);
            var selectedRowClassFunc = function selectedRowClassFunc2(_ref2) {
              var row = _ref2.row;
              var rowId = get_1(row, props2.rowKey || "id");
              return selected.has(rowId) ? tableSelectedClasses.selected : "";
            };
            var selectedRowClass = selected.size ? selectedRowClassFunc : void 0;
            selectedRowClassNames.value = [disabledRowClass, selectedRowClass];
          }, {
            immediate: true
          });
          function isDisabled(row, rowIndex) {
            return isRowSelectedDisabled(selectColumn.value, row, rowIndex);
          }
          function getSelectedHeader() {
            var isIndeterminate = intersectionKeys.value.length > 0 && intersectionKeys.value.length < canSelectedRows.value.length;
            return function() {
              return vue.createVNode(Checkbox, {
                "checked": intersectionKeys.value.length === canSelectedRows.value.length,
                "indeterminate": isIndeterminate,
                "disabled": !canSelectedRows.value.length,
                "onChange": handleSelectAll
              }, null);
            };
          }
          function renderSelectCell(p) {
            var column = p.col, _p$row = p.row, row = _p$row === void 0 ? {} : _p$row, rowIndex = p.rowIndex;
            var checked = tSelectedRowKeys.value.includes(get_1(row, props2.rowKey || "id"));
            var disabled = typeof column.disabled === "function" ? column.disabled({
              row,
              rowIndex
            }) : column.disabled;
            var checkProps = isFunction_1(column.checkProps) ? column.checkProps({
              row,
              rowIndex
            }) : column.checkProps;
            var selectBoxProps = _objectSpread$i(_objectSpread$i({
              checked,
              disabled
            }, checkProps), {}, {
              onClick: function onClick(e) {
                if (_typeof$2(e) === "object" && "e" in e) {
                  var _e$e;
                  (_e$e = e.e) === null || _e$e === void 0 ? void 0 : _e$e.stopPropagation();
                } else {
                  e === null || e === void 0 ? void 0 : e.stopPropagation();
                }
              },
              onChange: function onChange() {
                return handleSelectChange(row);
              }
            });
            if (column.type === "single")
              return vue.createVNode(Radio, selectBoxProps, null);
            if (column.type === "multiple")
              return vue.createVNode(Checkbox, selectBoxProps, null);
            return null;
          }
          function handleSelectChange() {
            var row = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            var selectedRowKeys2 = _toConsumableArray(tSelectedRowKeys.value);
            var reRowKey = props2.rowKey || "id";
            var id2 = get_1(row, reRowKey);
            var selectedRowIndex = selectedRowKeys2.indexOf(id2);
            var isExisted = selectedRowIndex !== -1;
            if (selectColumn.value.type === "multiple") {
              isExisted ? selectedRowKeys2.splice(selectedRowIndex, 1) : selectedRowKeys2.push(id2);
            } else if (selectColumn.value.type === "single") {
              selectedRowKeys2 = !isExisted ? [id2] : [];
            } else {
              log.warn("Table", "`column.type` must be one of `multiple` and `single`");
              return;
            }
            setTSelectedRowKeys(selectedRowKeys2, {
              selectedRowData: filterDataByIds(props2.data, selectedRowKeys2, reRowKey),
              currentRowKey: id2,
              currentRowData: row,
              type: isExisted ? "uncheck" : "check"
            });
          }
          function handleSelectAll(checked) {
            var _selectedRowKeys$valu;
            var reRowKey = props2.rowKey || "id";
            var canSelectedRowKeys = canSelectedRows.value.map(function(record) {
              return get_1(record, reRowKey);
            });
            var disabledSelectedRowKeys = ((_selectedRowKeys$valu = selectedRowKeys.value) === null || _selectedRowKeys$valu === void 0 ? void 0 : _selectedRowKeys$valu.filter(function(id2) {
              return !canSelectedRowKeys.includes(id2);
            })) || [];
            var allIds = checked ? [].concat(_toConsumableArray(disabledSelectedRowKeys), _toConsumableArray(canSelectedRowKeys)) : _toConsumableArray(disabledSelectedRowKeys);
            setTSelectedRowKeys(allIds, {
              selectedRowData: filterDataByIds(props2.data, allIds, reRowKey),
              type: checked ? "check" : "uncheck",
              currentRowKey: "CHECK_ALL_BOX"
            });
          }
          function formatToRowSelectColumn(col) {
            var isSelection = ["multiple", "single"].includes(col.type);
            if (!isSelection)
              return col;
            return _objectSpread$i(_objectSpread$i({}, col), {}, {
              width: col.width || 64,
              cell: function cell(_, p) {
                return renderSelectCell(p);
              },
              title: col.type === "multiple" ? getSelectedHeader() : ""
            });
          }
          return {
            selectedRowClassNames,
            formatToRowSelectColumn
          };
        }
        function _isSlot$2(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var SorterButton = vue.defineComponent({
          name: "TSorterButton",
          props: {
            sortType: {
              type: String,
              "default": "all"
            },
            sortOrder: {
              type: String,
              "default": function _default() {
                return "";
              }
            },
            sortIcon: Function,
            tooltipProps: Object,
            hideSortTips: Boolean
          },
          emits: ["sort-icon-click"],
          setup: function setup(props2, context) {
            var _useClassName = useClassName(), tableSortClasses = _useClassName.tableSortClasses, negativeRotate180 = _useClassName.negativeRotate180;
            var renderTNode = useTNodeDefault();
            var _useConfig = useConfig("table"), t = _useConfig.t, global2 = _useConfig.global;
            var allowSortTypes = vue.computed(function() {
              return props2.sortType === "all" ? ["asc", "desc"] : [props2.sortType];
            });
            var onSortIconClick = function onSortIconClick2(e, direction) {
              context.emit("sort-icon-click", e, {
                descending: direction === "desc"
              });
            };
            return {
              t,
              global: global2,
              tableSortClasses,
              negativeRotate180,
              allowSortTypes,
              onSortIconClick,
              renderTNode
            };
          },
          methods: {
            getSortIcon: function getSortIcon(direction, activeClass) {
              var _this = this;
              var defaultIcon = this.t(this.global.sortIcon) || vue.createVNode(chevronDown, null, null);
              var icon = this.renderTNode("sortIcon", defaultIcon);
              var sortClassName = [activeClass, this.tableSortClasses.sortIcon, this.tableSortClasses.iconDirection[direction], _defineProperty$3({}, this.negativeRotate180, direction === "asc")];
              return vue.createVNode("span", {
                "class": sortClassName,
                "onClick": function onClick(e) {
                  return _this.onSortIconClick(e, direction);
                }
              }, [icon]);
            }
          },
          render: function render() {
            var _this2 = this;
            var tableSortClasses = this.tableSortClasses;
            var classes = [tableSortClasses.trigger, _defineProperty$3({}, tableSortClasses.doubleIcon, this.allowSortTypes.length > 1)];
            var tooltips = {
              asc: this.global.sortAscendingOperationText,
              desc: this.global.sortDescendingOperationText
            };
            var sortButton = this.allowSortTypes.map(function(direction) {
              var _slot;
              var _this2$hideSortTips;
              var activeClass = direction === _this2.sortOrder ? tableSortClasses.iconActive : tableSortClasses.iconDefault;
              var cancelTips = _this2.global.sortCancelOperationText;
              var tips = direction === _this2.sortOrder ? cancelTips : tooltips[direction];
              if ((_this2$hideSortTips = _this2.hideSortTips) !== null && _this2$hideSortTips !== void 0 ? _this2$hideSortTips : _this2.global.hideSortTips)
                return _this2.getSortIcon(direction, activeClass);
              return vue.createVNode(Tooltip, vue.mergeProps({
                "content": tips,
                "placement": "right"
              }, _this2.tooltipProps, {
                "showArrow": false,
                "class": _this2.tableSortClasses.iconDirection[direction]
              }), _isSlot$2(_slot = _this2.getSortIcon(direction, activeClass)) ? _slot : {
                "default": function _default() {
                  return [_slot];
                }
              });
            });
            return vue.createVNode("div", {
              "class": classes
            }, [sortButton]);
          }
        });
        function ownKeys$i(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$h(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$i(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$i(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function useSorter(props2, _ref) {
          _ref.emit;
          var slots = _ref.slots;
          var _toRefs = vue.toRefs(props2), sort = _toRefs.sort, data = _toRefs.data;
          var originalData = vue.ref();
          var _useDefaultValue = useDefaultValue(sort, props2.defaultSort, props2.onSortChange, "sort"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2), tSortInfo = _useDefaultValue2[0], setTSortInfo = _useDefaultValue2[1];
          var _useDefaultValue3 = useDefaultValue(data, [], props2.onDataChange, "data"), _useDefaultValue4 = _slicedToArray(_useDefaultValue3, 2), tData = _useDefaultValue4[0], setTData = _useDefaultValue4[1];
          var sorterFuncMap = vue.computed(function() {
            return getSorterFuncMap(props2.columns);
          });
          var sortArray = vue.computed(function() {
            var sort2 = tSortInfo.value;
            if (!sort2)
              return [];
            return Array.isArray(sort2) ? sort2 : [sort2];
          });
          var sortMap = vue.computed(function() {
            var sortMap2 = {};
            sortArray.value.forEach(function(info, index2) {
              var sortBy = info.sortBy;
              sortMap2[sortBy] = _objectSpread$h({
                index: index2
              }, info);
            });
            return sortMap2;
          });
          function getSorterFuncMap(columns) {
            var map = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            for (var i2 = 0, len = columns.length; i2 < len; i2++) {
              var _col$children;
              var col = columns[i2];
              if (isFunction_1(col.sorter)) {
                map[col.colKey] = col.sorter;
              }
              if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
                getSorterFuncMap(col.children, map);
              }
            }
            return map;
          }
          function handleDataSort(sortInfo) {
            var sort2 = sortInfo;
            if (!Object.keys(sorterFuncMap.value).length)
              return;
            if (!originalData.value) {
              originalData.value = tData.value;
            }
            var isEmptyArraySort = !sort2 || sort2 instanceof Array && !sort2.length;
            var isEmptyObjectSort = !(sort2 instanceof Array) && !(sort2 !== null && sort2 !== void 0 && sort2.sortBy);
            if (isEmptyArraySort || isEmptyObjectSort) {
              setTData(originalData.value, {
                trigger: "sort"
              });
              return originalData.value;
            }
            var formatedSort = sort2 instanceof Array ? sort2 : [sort2];
            var newData = tData.value.slice().sort(function(a, b2) {
              var sortResult = 0;
              for (var i2 = 0, len = formatedSort.length; i2 < len; i2++) {
                var item = formatedSort[i2];
                var sortFunc = sorterFuncMap.value[item.sortBy];
                if (sortResult === 0 && sortFunc) {
                  sortResult = item.descending ? sortFunc(b2, a) : sortFunc(a, b2);
                } else {
                  break;
                }
              }
              return sortResult;
            });
            if (JSON.stringify(newData) === JSON.stringify(tData.value))
              return;
            setTData(newData, {
              trigger: "sort"
            });
            return newData;
          }
          function handleSortHeaderClick(col, p) {
            var _props$onChange;
            var sortInfo;
            if (props2.multipleSort) {
              sortInfo = getMultipleNextSort(col, p);
            } else {
              var sort2 = tSortInfo.value instanceof Array ? tSortInfo.value[0] : tSortInfo.value;
              sortInfo = getSingleNextSort(col, sort2, p);
            }
            var newData = handleDataSort(sortInfo);
            var currentData = newData || tData.value;
            var currentDataSource = currentData;
            setTSortInfo(sortInfo, {
              currentDataSource,
              col
            });
            (_props$onChange = props2.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props2, {
              sorter: sortInfo
            }, {
              currentData,
              trigger: "sorter"
            });
          }
          function getSortOrder(descending) {
            if (descending === void 0)
              return;
            return descending ? "desc" : "asc";
          }
          function getSingleNextSort(col, sortInfo, p) {
            if (sortInfo && sortInfo.sortBy === col.colKey && sortInfo.descending === p.descending) {
              return void 0;
            }
            return {
              sortBy: col.colKey,
              descending: p.descending
            };
          }
          function getMultipleNextSort(col, p) {
            var sort2 = tSortInfo.value;
            if (!(sort2 instanceof Array))
              return;
            var colKey = col.colKey;
            var result = _toConsumableArray(sort2);
            for (var i2 = 0, len = sort2.length; i2 < len; i2++) {
              if (sort2[i2].sortBy === colKey) {
                var next = getSingleNextSort(col, sort2[i2], p);
                next ? result[i2] = next : result.splice(i2, 1);
                return result;
              }
            }
            result.push({
              sortBy: colKey,
              descending: p.descending
            });
            return result;
          }
          function renderSortIcon(_ref2) {
            var _sortMap$value$col$co;
            var col = _ref2.col;
            if (!col.sorter)
              return null;
            var sorterButtonsProps = {
              sortType: col.sortType,
              sortOrder: getSortOrder((_sortMap$value$col$co = sortMap.value[col.colKey]) === null || _sortMap$value$col$co === void 0 ? void 0 : _sortMap$value$col$co.descending),
              sortIcon: props2.sortIcon,
              hideSortTips: props2.hideSortTips
            };
            return vue.createVNode(SorterButton, vue.mergeProps(sorterButtonsProps, {
              "onSortIconClick": function onSortIconClick(_, p) {
                return handleSortHeaderClick(col, p);
              }
            }), {
              sortIcon: slots.sortIcon
            });
          }
          return {
            renderSortIcon
          };
        }
        function ownKeys$h(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$g(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$h(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$h(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var TableFilterController = vue.defineComponent({
          name: "TableFilterController",
          props: {
            column: Object,
            tFilterValue: Object,
            innerFilterValue: Object,
            tableFilterClasses: Object,
            isFocusClass: String,
            primaryTableElement: {},
            onVisibleChange: Function
          },
          emits: ["inner-filter-change", "reset", "confirm"],
          setup: function setup(props2) {
            var triggerElementRef = vue.ref(null);
            var renderTNode = useTNodeDefault();
            var _useConfig = useConfig("table"), t = _useConfig.t, global2 = _useConfig.global;
            var filterPopupVisible = vue.ref(false);
            var onFilterPopupVisibleChange = function onFilterPopupVisibleChange2(visible) {
              var _props$onVisibleChang;
              filterPopupVisible.value = visible;
              (_props$onVisibleChang = props2.onVisibleChange) === null || _props$onVisibleChang === void 0 ? void 0 : _props$onVisibleChang.call(props2, visible);
            };
            return {
              t,
              global: global2,
              filterPopupVisible,
              triggerElementRef,
              renderTNode,
              onFilterPopupVisibleChange
            };
          },
          render: function render() {
            var _this = this, _this$tFilterValue;
            var getFilterContent = function getFilterContent2(column2) {
              var _column2$filter, _column2$filter2, _column2$filter3, _column2$filter4, _column2$filter5, _this$innerFilterValu, _column2$filter6, _column2$filter7, _this$innerFilterValu2;
              var types = ["single", "multiple", "input"];
              if (column2.type && !types.includes(column2.filter.type)) {
                console.error("TDesign Table Error: column.filter.type must be the following: ".concat(JSON.stringify(types)));
                return;
              }
              if (column2 !== null && column2 !== void 0 && (_column2$filter = column2.filter) !== null && _column2$filter !== void 0 && _column2$filter.component && typeof (column2 === null || column2 === void 0 ? void 0 : (_column2$filter2 = column2.filter) === null || _column2$filter2 === void 0 ? void 0 : _column2$filter2.component) !== "function") {
                console.error("TDesign Table Error: column.filter.component must be a function");
                return;
              }
              var component = {
                single: RadioGroup,
                multiple: CheckboxGroup,
                input: Input
              }[column2.filter.type];
              if (!component && !(column2 !== null && column2 !== void 0 && (_column2$filter3 = column2.filter) !== null && _column2$filter3 !== void 0 && _column2$filter3.component))
                return;
              var filterComponentProps = _objectSpread$g(_objectSpread$g({
                options: ["single", "multiple"].includes(column2.filter.type) ? (_column2$filter4 = column2.filter) === null || _column2$filter4 === void 0 ? void 0 : _column2$filter4.list : void 0
              }, ((_column2$filter5 = column2.filter) === null || _column2$filter5 === void 0 ? void 0 : _column2$filter5.props) || {}), {}, {
                value: (_this$innerFilterValu = _this.innerFilterValue) === null || _this$innerFilterValu === void 0 ? void 0 : _this$innerFilterValu[column2.colKey],
                onChange: function onChange(val) {
                  _this.$emit("inner-filter-change", val, column2);
                }
              });
              return vue.createVNode("div", {
                "class": _this.tableFilterClasses.contentInner
              }, [column2 !== null && column2 !== void 0 && (_column2$filter6 = column2.filter) !== null && _column2$filter6 !== void 0 && _column2$filter6.component ? column2 === null || column2 === void 0 ? void 0 : (_column2$filter7 = column2.filter) === null || _column2$filter7 === void 0 ? void 0 : _column2$filter7.component(function(v, b2) {
                var tProps = _typeof$2(b2) === "object" && "attrs" in b2 ? b2.attrs : {};
                return vue.h(v, {
                  props: _objectSpread$g(_objectSpread$g({}, filterComponentProps), tProps)
                });
              }) : vue.createVNode(component, vue.mergeProps({
                "value": (_this$innerFilterValu2 = _this.innerFilterValue) === null || _this$innerFilterValu2 === void 0 ? void 0 : _this$innerFilterValu2[column2.colKey]
              }, filterComponentProps), null)]);
            };
            var getBottomButtons = function getBottomButtons2(column2) {
              if (!column2.filter.showConfirmAndReset)
                return;
              return vue.createVNode("div", {
                "class": _this.tableFilterClasses.bottomButtons
              }, [vue.createVNode(Button, {
                "theme": "default",
                "size": "small",
                "onClick": function onClick() {
                  _this.$emit("reset", column2);
                  _this.filterPopupVisible = false;
                }
              }, {
                "default": function _default() {
                  return [_this.global.resetText];
                }
              }), vue.createVNode(Button, {
                "theme": "primary",
                "size": "small",
                "onClick": function onClick() {
                  _this.$emit("confirm", column2);
                  _this.filterPopupVisible = false;
                }
              }, {
                "default": function _default() {
                  return [_this.global.confirmText];
                }
              })]);
            };
            var column = this.column;
            if (!column.filter || column.filter && !Object.keys(column.filter).length)
              return null;
            var defaultFilterIcon = this.t(this.global.filterIcon) || vue.createVNode(filter, null, null);
            return vue.createVNode(Popup, {
              "attach": this.primaryTableElement ? function() {
                return _this.primaryTableElement;
              } : void 0,
              "visible": this.filterPopupVisible,
              "destroyOnClose": true,
              "trigger": "click",
              "placement": "bottom-right",
              "showArrow": true,
              "overlayClassName": this.tableFilterClasses.popup,
              "onVisibleChange": function onVisibleChange(val) {
                return _this.onFilterPopupVisibleChange(val);
              },
              "class": [this.tableFilterClasses.icon, _defineProperty$3({}, this.isFocusClass, !isEmpty_1((_this$tFilterValue = this.tFilterValue) === null || _this$tFilterValue === void 0 ? void 0 : _this$tFilterValue[column.colKey]))],
              "content": function content() {
                return vue.createVNode("div", {
                  "class": _this.tableFilterClasses.popupContent
                }, [getFilterContent(column), getBottomButtons(column)]);
              }
            }, {
              "default": function _default() {
                return [vue.createVNode("div", {
                  "ref": "triggerElementRef"
                }, [_this.renderTNode("filterIcon", defaultFilterIcon)])];
              }
            });
          }
        });
        function ownKeys$g(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$f(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$g(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$g(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function filterEmptyData(data) {
          var newFilterValue = {};
          Object.keys(data).forEach(function(key) {
            var item = data[key];
            var isArrayTrue = item instanceof Array && item.length;
            var isObject2 = _typeof$2(item) === "object" && !(item instanceof Array);
            var isObjectTrue = isObject2 && Object.keys(item).length;
            if (isArrayTrue || isObjectTrue || !["null", "", "undefined"].includes(String(item))) {
              newFilterValue[key] = item;
            }
          });
          return newFilterValue;
        }
        function useFilter(props2, context) {
          var primaryTableRef = vue.ref(null);
          var _useConfig = useConfig("table"), t = _useConfig.t, global2 = _useConfig.global;
          var renderTNode = useTNodeDefault();
          var _toRefs = vue.toRefs(props2), filterValue = _toRefs.filterValue;
          var _useClassName = useClassName(), tableFilterClasses = _useClassName.tableFilterClasses, isFocusClass = _useClassName.isFocusClass;
          var isTableOverflowHidden = vue.ref();
          var _useDefaultValue = useDefaultValue(filterValue, props2.defaultFilterValue, props2.onFilterChange, "filterValue"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2), tFilterValue = _useDefaultValue2[0], setTFilterValue = _useDefaultValue2[1];
          var innerFilterValue = vue.ref(tFilterValue.value);
          var hasEmptyCondition = vue.computed(function() {
            var filterEmpty2 = filterEmptyData(tFilterValue.value || {});
            return !tFilterValue.value || !Object.keys(filterEmpty2).length;
          });
          vue.watch([tFilterValue], function(_ref) {
            var _ref2 = _slicedToArray(_ref, 1), val = _ref2[0];
            innerFilterValue.value = val;
          });
          function renderFirstFilterRow() {
            var _props$pagination, _props$data;
            if (hasEmptyCondition.value)
              return null;
            var defaultNode = vue.createVNode("div", {
              "class": tableFilterClasses.result
            }, [vue.createVNode("span", null, [t(global2.value.searchResultText, {
              result: getFilterResultContent(),
              count: ((_props$pagination = props2.pagination) === null || _props$pagination === void 0 ? void 0 : _props$pagination.total) || ((_props$data = props2.data) === null || _props$data === void 0 ? void 0 : _props$data.length)
            })]), vue.createVNode(Button, {
              "theme": "primary",
              "variant": "text",
              "onClick": onResetAll
            }, {
              "default": function _default() {
                return [global2.value.clearFilterResultButtonText];
              }
            })]);
            var filterContent = renderTNode("filterRow");
            if (props2.filterRow && !filterContent)
              return null;
            return vue.createVNode("div", {
              "class": tableFilterClasses.inner
            }, [filterContent || defaultNode]);
          }
          function getFilterResultContent() {
            var arr = [];
            props2.columns.filter(function(col) {
              return col.filter;
            }).forEach(function(col) {
              var value = tFilterValue.value[col.colKey];
              if (col.filter.list && !["null", "", "undefined"].includes(String(value))) {
                var formattedValue = value instanceof Array ? value : [value];
                var label = [];
                col.filter.list.forEach(function(option) {
                  if (formattedValue.includes(option.value)) {
                    label.push(option.label);
                  }
                });
                value = label.join();
              }
              if (value) {
                arr.push("".concat(col.title, "\uFF1A").concat(value));
              }
            });
            return arr.join("\uFF1B");
          }
          function onInnerFilterChange(val, column) {
            var filterValue2 = _objectSpread$f(_objectSpread$f({}, innerFilterValue.value), {}, _defineProperty$3({}, column.colKey, val));
            innerFilterValue.value = filterValue2;
            if (!column.filter.showConfirmAndReset) {
              emitFilterChange(filterValue2, column);
            }
          }
          function emitFilterChange(filterValue2, column) {
            var _props$onChange;
            setTFilterValue(filterValue2, {
              col: column
            });
            (_props$onChange = props2.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props2, {
              filter: filterValue2
            }, {
              trigger: "filter"
            });
          }
          function onReset(column) {
            var filterValue2 = _objectSpread$f(_objectSpread$f({}, tFilterValue.value), {}, _defineProperty$3({}, column.colKey, {
              single: "",
              multiple: [],
              input: ""
            }[column.filter.type] || column.filter.resetValue || ""));
            emitFilterChange(filterValue2, column);
          }
          function onResetAll() {
            emitFilterChange({}, void 0);
          }
          function onConfirm(column) {
            emitFilterChange(innerFilterValue.value, column);
          }
          function renderFilterIcon(_ref3) {
            var _primaryTableRef$valu;
            var col = _ref3.col;
            return vue.createVNode(TableFilterController, {
              "column": col,
              "filterIcon": props2.filterIcon,
              "tFilterValue": tFilterValue.value,
              "innerFilterValue": innerFilterValue.value,
              "tableFilterClasses": tableFilterClasses,
              "isFocusClass": isFocusClass,
              "onReset": onReset,
              "onConfirm": onConfirm,
              "onInnerFilterChange": onInnerFilterChange,
              "primaryTableElement": (_primaryTableRef$valu = primaryTableRef.value) === null || _primaryTableRef$valu === void 0 ? void 0 : _primaryTableRef$valu.$el,
              "onVisibleChange": onPopupVisibleChange
            }, {
              filterIcon: context.slots.filterIcon
            });
          }
          function setFilterPrimaryTableRef(primaryTableElement) {
            primaryTableRef.value = primaryTableElement;
          }
          function onPopupVisibleChange(visible) {
            if (visible && !isTableOverflowHidden.value) {
              isTableOverflowHidden.value = !visible;
            }
          }
          return {
            hasEmptyCondition,
            isTableOverflowHidden,
            renderFilterIcon,
            renderFirstFilterRow,
            setFilterPrimaryTableRef
          };
        }
        function ownKeys$f(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly) {
              symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            }
            keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread2(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = arguments[i2] != null ? arguments[i2] : {};
            if (i2 % 2) {
              ownKeys$f(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys$f(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }
          return target;
        }
        function _typeof(obj) {
          "@babel/helpers - typeof";
          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof2(obj2) {
              return typeof obj2;
            };
          } else {
            _typeof = function _typeof2(obj2) {
              return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
            };
          }
          return _typeof(obj);
        }
        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function _extends() {
          _extends = Object.assign || function(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
              var source = arguments[i2];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key];
                }
              }
            }
            return target;
          };
          return _extends.apply(this, arguments);
        }
        function _objectWithoutPropertiesLoose(source, excluded) {
          if (source == null)
            return {};
          var target = {};
          var sourceKeys = Object.keys(source);
          var key, i2;
          for (i2 = 0; i2 < sourceKeys.length; i2++) {
            key = sourceKeys[i2];
            if (excluded.indexOf(key) >= 0)
              continue;
            target[key] = source[key];
          }
          return target;
        }
        function _objectWithoutProperties(source, excluded) {
          if (source == null)
            return {};
          var target = _objectWithoutPropertiesLoose(source, excluded);
          var key, i2;
          if (Object.getOwnPropertySymbols) {
            var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
            for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
              key = sourceSymbolKeys[i2];
              if (excluded.indexOf(key) >= 0)
                continue;
              if (!Object.prototype.propertyIsEnumerable.call(source, key))
                continue;
              target[key] = source[key];
            }
          }
          return target;
        }
        var version2 = "1.15.0";
        function userAgent(pattern) {
          if (typeof window !== "undefined" && window.navigator) {
            return !!/* @__PURE__ */ navigator.userAgent.match(pattern);
          }
        }
        var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
        var Edge = userAgent(/Edge/i);
        var FireFox = userAgent(/firefox/i);
        var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
        var IOS = userAgent(/iP(ad|od|hone)/i);
        var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);
        var captureMode = {
          capture: false,
          passive: false
        };
        function on(el, event, fn) {
          el.addEventListener(event, fn, !IE11OrLess && captureMode);
        }
        function off(el, event, fn) {
          el.removeEventListener(event, fn, !IE11OrLess && captureMode);
        }
        function matches(el, selector) {
          if (!selector)
            return;
          selector[0] === ">" && (selector = selector.substring(1));
          if (el) {
            try {
              if (el.matches) {
                return el.matches(selector);
              } else if (el.msMatchesSelector) {
                return el.msMatchesSelector(selector);
              } else if (el.webkitMatchesSelector) {
                return el.webkitMatchesSelector(selector);
              }
            } catch (_) {
              return false;
            }
          }
          return false;
        }
        function getParentOrHost(el) {
          return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
        }
        function closest(el, selector, ctx, includeCTX) {
          if (el) {
            ctx = ctx || document;
            do {
              if (selector != null && (selector[0] === ">" ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
                return el;
              }
              if (el === ctx)
                break;
            } while (el = getParentOrHost(el));
          }
          return null;
        }
        var R_SPACE = /\s+/g;
        function toggleClass(el, name, state) {
          if (el && name) {
            if (el.classList) {
              el.classList[state ? "add" : "remove"](name);
            } else {
              var className = (" " + el.className + " ").replace(R_SPACE, " ").replace(" " + name + " ", " ");
              el.className = (className + (state ? " " + name : "")).replace(R_SPACE, " ");
            }
          }
        }
        function css(el, prop, val) {
          var style = el && el.style;
          if (style) {
            if (val === void 0) {
              if (document.defaultView && document.defaultView.getComputedStyle) {
                val = document.defaultView.getComputedStyle(el, "");
              } else if (el.currentStyle) {
                val = el.currentStyle;
              }
              return prop === void 0 ? val : val[prop];
            } else {
              if (!(prop in style) && prop.indexOf("webkit") === -1) {
                prop = "-webkit-" + prop;
              }
              style[prop] = val + (typeof val === "string" ? "" : "px");
            }
          }
        }
        function matrix(el, selfOnly) {
          var appliedTransforms = "";
          if (typeof el === "string") {
            appliedTransforms = el;
          } else {
            do {
              var transform = css(el, "transform");
              if (transform && transform !== "none") {
                appliedTransforms = transform + " " + appliedTransforms;
              }
            } while (!selfOnly && (el = el.parentNode));
          }
          var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
          return matrixFn && new matrixFn(appliedTransforms);
        }
        function find2(ctx, tagName, iterator) {
          if (ctx) {
            var list = ctx.getElementsByTagName(tagName), i2 = 0, n = list.length;
            if (iterator) {
              for (; i2 < n; i2++) {
                iterator(list[i2], i2);
              }
            }
            return list;
          }
          return [];
        }
        function getWindowScrollingElement() {
          var scrollingElement = document.scrollingElement;
          if (scrollingElement) {
            return scrollingElement;
          } else {
            return document.documentElement;
          }
        }
        function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
          if (!el.getBoundingClientRect && el !== window)
            return;
          var elRect, top2, left2, bottom2, right2, height, width;
          if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {
            elRect = el.getBoundingClientRect();
            top2 = elRect.top;
            left2 = elRect.left;
            bottom2 = elRect.bottom;
            right2 = elRect.right;
            height = elRect.height;
            width = elRect.width;
          } else {
            top2 = 0;
            left2 = 0;
            bottom2 = window.innerHeight;
            right2 = window.innerWidth;
            height = window.innerHeight;
            width = window.innerWidth;
          }
          if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
            container = container || el.parentNode;
            if (!IE11OrLess) {
              do {
                if (container && container.getBoundingClientRect && (css(container, "transform") !== "none" || relativeToNonStaticParent && css(container, "position") !== "static")) {
                  var containerRect = container.getBoundingClientRect();
                  top2 -= containerRect.top + parseInt(css(container, "border-top-width"));
                  left2 -= containerRect.left + parseInt(css(container, "border-left-width"));
                  bottom2 = top2 + elRect.height;
                  right2 = left2 + elRect.width;
                  break;
                }
              } while (container = container.parentNode);
            }
          }
          if (undoScale && el !== window) {
            var elMatrix = matrix(container || el), scaleX = elMatrix && elMatrix.a, scaleY = elMatrix && elMatrix.d;
            if (elMatrix) {
              top2 /= scaleY;
              left2 /= scaleX;
              width /= scaleX;
              height /= scaleY;
              bottom2 = top2 + height;
              right2 = left2 + width;
            }
          }
          return {
            top: top2,
            left: left2,
            bottom: bottom2,
            right: right2,
            width,
            height
          };
        }
        function isScrolledPast(el, elSide, parentSide) {
          var parent2 = getParentAutoScrollElement(el, true), elSideVal = getRect(el)[elSide];
          while (parent2) {
            var parentSideVal = getRect(parent2)[parentSide], visible = void 0;
            if (parentSide === "top" || parentSide === "left") {
              visible = elSideVal >= parentSideVal;
            } else {
              visible = elSideVal <= parentSideVal;
            }
            if (!visible)
              return parent2;
            if (parent2 === getWindowScrollingElement())
              break;
            parent2 = getParentAutoScrollElement(parent2, false);
          }
          return false;
        }
        function getChild(el, childNum, options, includeDragEl) {
          var currentChild = 0, i2 = 0, children = el.children;
          while (i2 < children.length) {
            if (children[i2].style.display !== "none" && children[i2] !== Sortable.ghost && (includeDragEl || children[i2] !== Sortable.dragged) && closest(children[i2], options.draggable, el, false)) {
              if (currentChild === childNum) {
                return children[i2];
              }
              currentChild++;
            }
            i2++;
          }
          return null;
        }
        function lastChild(el, selector) {
          var last2 = el.lastElementChild;
          while (last2 && (last2 === Sortable.ghost || css(last2, "display") === "none" || selector && !matches(last2, selector))) {
            last2 = last2.previousElementSibling;
          }
          return last2 || null;
        }
        function index(el, selector) {
          var index2 = 0;
          if (!el || !el.parentNode) {
            return -1;
          }
          while (el = el.previousElementSibling) {
            if (el.nodeName.toUpperCase() !== "TEMPLATE" && el !== Sortable.clone && (!selector || matches(el, selector))) {
              index2++;
            }
          }
          return index2;
        }
        function getRelativeScrollOffset(el) {
          var offsetLeft = 0, offsetTop = 0, winScroller = getWindowScrollingElement();
          if (el) {
            do {
              var elMatrix = matrix(el), scaleX = elMatrix.a, scaleY = elMatrix.d;
              offsetLeft += el.scrollLeft * scaleX;
              offsetTop += el.scrollTop * scaleY;
            } while (el !== winScroller && (el = el.parentNode));
          }
          return [offsetLeft, offsetTop];
        }
        function indexOfObject(arr, obj) {
          for (var i2 in arr) {
            if (!arr.hasOwnProperty(i2))
              continue;
            for (var key in obj) {
              if (obj.hasOwnProperty(key) && obj[key] === arr[i2][key])
                return Number(i2);
            }
          }
          return -1;
        }
        function getParentAutoScrollElement(el, includeSelf) {
          if (!el || !el.getBoundingClientRect)
            return getWindowScrollingElement();
          var elem = el;
          var gotSelf = false;
          do {
            if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
              var elemCSS = css(elem);
              if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == "auto" || elemCSS.overflowX == "scroll") || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == "auto" || elemCSS.overflowY == "scroll")) {
                if (!elem.getBoundingClientRect || elem === document.body)
                  return getWindowScrollingElement();
                if (gotSelf || includeSelf)
                  return elem;
                gotSelf = true;
              }
            }
          } while (elem = elem.parentNode);
          return getWindowScrollingElement();
        }
        function extend(dst, src) {
          if (dst && src) {
            for (var key in src) {
              if (src.hasOwnProperty(key)) {
                dst[key] = src[key];
              }
            }
          }
          return dst;
        }
        function isRectEqual(rect1, rect2) {
          return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
        }
        var _throttleTimeout;
        function throttle(callback, ms) {
          return function() {
            if (!_throttleTimeout) {
              var args = arguments, _this = this;
              if (args.length === 1) {
                callback.call(_this, args[0]);
              } else {
                callback.apply(_this, args);
              }
              _throttleTimeout = setTimeout(function() {
                _throttleTimeout = void 0;
              }, ms);
            }
          };
        }
        function cancelThrottle() {
          clearTimeout(_throttleTimeout);
          _throttleTimeout = void 0;
        }
        function scrollBy(el, x, y) {
          el.scrollLeft += x;
          el.scrollTop += y;
        }
        function clone(el) {
          var Polymer = window.Polymer;
          var $ = window.jQuery || window.Zepto;
          if (Polymer && Polymer.dom) {
            return Polymer.dom(el).cloneNode(true);
          } else if ($) {
            return $(el).clone(true)[0];
          } else {
            return el.cloneNode(true);
          }
        }
        var expando = "Sortable" + new Date().getTime();
        function AnimationStateManager() {
          var animationStates = [], animationCallbackId;
          return {
            captureAnimationState: function captureAnimationState() {
              animationStates = [];
              if (!this.options.animation)
                return;
              var children = [].slice.call(this.el.children);
              children.forEach(function(child) {
                if (css(child, "display") === "none" || child === Sortable.ghost)
                  return;
                animationStates.push({
                  target: child,
                  rect: getRect(child)
                });
                var fromRect = _objectSpread2({}, animationStates[animationStates.length - 1].rect);
                if (child.thisAnimationDuration) {
                  var childMatrix = matrix(child, true);
                  if (childMatrix) {
                    fromRect.top -= childMatrix.f;
                    fromRect.left -= childMatrix.e;
                  }
                }
                child.fromRect = fromRect;
              });
            },
            addAnimationState: function addAnimationState(state) {
              animationStates.push(state);
            },
            removeAnimationState: function removeAnimationState(target) {
              animationStates.splice(indexOfObject(animationStates, {
                target
              }), 1);
            },
            animateAll: function animateAll(callback) {
              var _this = this;
              if (!this.options.animation) {
                clearTimeout(animationCallbackId);
                if (typeof callback === "function")
                  callback();
                return;
              }
              var animating = false, animationTime = 0;
              animationStates.forEach(function(state) {
                var time2 = 0, target = state.target, fromRect = target.fromRect, toRect = getRect(target), prevFromRect = target.prevFromRect, prevToRect = target.prevToRect, animatingRect = state.rect, targetMatrix = matrix(target, true);
                if (targetMatrix) {
                  toRect.top -= targetMatrix.f;
                  toRect.left -= targetMatrix.e;
                }
                target.toRect = toRect;
                if (target.thisAnimationDuration) {
                  if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) && (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
                    time2 = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
                  }
                }
                if (!isRectEqual(toRect, fromRect)) {
                  target.prevFromRect = fromRect;
                  target.prevToRect = toRect;
                  if (!time2) {
                    time2 = _this.options.animation;
                  }
                  _this.animate(target, animatingRect, toRect, time2);
                }
                if (time2) {
                  animating = true;
                  animationTime = Math.max(animationTime, time2);
                  clearTimeout(target.animationResetTimer);
                  target.animationResetTimer = setTimeout(function() {
                    target.animationTime = 0;
                    target.prevFromRect = null;
                    target.fromRect = null;
                    target.prevToRect = null;
                    target.thisAnimationDuration = null;
                  }, time2);
                  target.thisAnimationDuration = time2;
                }
              });
              clearTimeout(animationCallbackId);
              if (!animating) {
                if (typeof callback === "function")
                  callback();
              } else {
                animationCallbackId = setTimeout(function() {
                  if (typeof callback === "function")
                    callback();
                }, animationTime);
              }
              animationStates = [];
            },
            animate: function animate(target, currentRect, toRect, duration) {
              if (duration) {
                css(target, "transition", "");
                css(target, "transform", "");
                var elMatrix = matrix(this.el), scaleX = elMatrix && elMatrix.a, scaleY = elMatrix && elMatrix.d, translateX = (currentRect.left - toRect.left) / (scaleX || 1), translateY = (currentRect.top - toRect.top) / (scaleY || 1);
                target.animatingX = !!translateX;
                target.animatingY = !!translateY;
                css(target, "transform", "translate3d(" + translateX + "px," + translateY + "px,0)");
                this.forRepaintDummy = repaint(target);
                css(target, "transition", "transform " + duration + "ms" + (this.options.easing ? " " + this.options.easing : ""));
                css(target, "transform", "translate3d(0,0,0)");
                typeof target.animated === "number" && clearTimeout(target.animated);
                target.animated = setTimeout(function() {
                  css(target, "transition", "");
                  css(target, "transform", "");
                  target.animated = false;
                  target.animatingX = false;
                  target.animatingY = false;
                }, duration);
              }
            }
          };
        }
        function repaint(target) {
          return target.offsetWidth;
        }
        function calculateRealTime(animatingRect, fromRect, toRect, options) {
          return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
        }
        var plugins = [];
        var defaults = {
          initializeByDefault: true
        };
        var PluginManager = {
          mount: function mount(plugin) {
            for (var option in defaults) {
              if (defaults.hasOwnProperty(option) && !(option in plugin)) {
                plugin[option] = defaults[option];
              }
            }
            plugins.forEach(function(p) {
              if (p.pluginName === plugin.pluginName) {
                throw "Sortable: Cannot mount plugin ".concat(plugin.pluginName, " more than once");
              }
            });
            plugins.push(plugin);
          },
          pluginEvent: function pluginEvent2(eventName, sortable, evt) {
            var _this = this;
            this.eventCanceled = false;
            evt.cancel = function() {
              _this.eventCanceled = true;
            };
            var eventNameGlobal = eventName + "Global";
            plugins.forEach(function(plugin) {
              if (!sortable[plugin.pluginName])
                return;
              if (sortable[plugin.pluginName][eventNameGlobal]) {
                sortable[plugin.pluginName][eventNameGlobal](_objectSpread2({
                  sortable
                }, evt));
              }
              if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
                sortable[plugin.pluginName][eventName](_objectSpread2({
                  sortable
                }, evt));
              }
            });
          },
          initializePlugins: function initializePlugins(sortable, el, defaults2, options) {
            plugins.forEach(function(plugin) {
              var pluginName = plugin.pluginName;
              if (!sortable.options[pluginName] && !plugin.initializeByDefault)
                return;
              var initialized = new plugin(sortable, el, sortable.options);
              initialized.sortable = sortable;
              initialized.options = sortable.options;
              sortable[pluginName] = initialized;
              _extends(defaults2, initialized.defaults);
            });
            for (var option in sortable.options) {
              if (!sortable.options.hasOwnProperty(option))
                continue;
              var modified = this.modifyOption(sortable, option, sortable.options[option]);
              if (typeof modified !== "undefined") {
                sortable.options[option] = modified;
              }
            }
          },
          getEventProperties: function getEventProperties(name, sortable) {
            var eventProperties = {};
            plugins.forEach(function(plugin) {
              if (typeof plugin.eventProperties !== "function")
                return;
              _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));
            });
            return eventProperties;
          },
          modifyOption: function modifyOption(sortable, name, value) {
            var modifiedValue;
            plugins.forEach(function(plugin) {
              if (!sortable[plugin.pluginName])
                return;
              if (plugin.optionListeners && typeof plugin.optionListeners[name] === "function") {
                modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);
              }
            });
            return modifiedValue;
          }
        };
        function dispatchEvent(_ref) {
          var sortable = _ref.sortable, rootEl2 = _ref.rootEl, name = _ref.name, targetEl = _ref.targetEl, cloneEl2 = _ref.cloneEl, toEl = _ref.toEl, fromEl = _ref.fromEl, oldIndex2 = _ref.oldIndex, newIndex2 = _ref.newIndex, oldDraggableIndex2 = _ref.oldDraggableIndex, newDraggableIndex2 = _ref.newDraggableIndex, originalEvent = _ref.originalEvent, putSortable2 = _ref.putSortable, extraEventProperties = _ref.extraEventProperties;
          sortable = sortable || rootEl2 && rootEl2[expando];
          if (!sortable)
            return;
          var evt, options = sortable.options, onName = "on" + name.charAt(0).toUpperCase() + name.substr(1);
          if (window.CustomEvent && !IE11OrLess && !Edge) {
            evt = new CustomEvent(name, {
              bubbles: true,
              cancelable: true
            });
          } else {
            evt = document.createEvent("Event");
            evt.initEvent(name, true, true);
          }
          evt.to = toEl || rootEl2;
          evt.from = fromEl || rootEl2;
          evt.item = targetEl || rootEl2;
          evt.clone = cloneEl2;
          evt.oldIndex = oldIndex2;
          evt.newIndex = newIndex2;
          evt.oldDraggableIndex = oldDraggableIndex2;
          evt.newDraggableIndex = newDraggableIndex2;
          evt.originalEvent = originalEvent;
          evt.pullMode = putSortable2 ? putSortable2.lastPutMode : void 0;
          var allEventProperties = _objectSpread2(_objectSpread2({}, extraEventProperties), PluginManager.getEventProperties(name, sortable));
          for (var option in allEventProperties) {
            evt[option] = allEventProperties[option];
          }
          if (rootEl2) {
            rootEl2.dispatchEvent(evt);
          }
          if (options[onName]) {
            options[onName].call(sortable, evt);
          }
        }
        var _excluded$1 = ["evt"];
        var pluginEvent = function pluginEvent2(eventName, sortable) {
          var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, originalEvent = _ref.evt, data = _objectWithoutProperties(_ref, _excluded$1);
          PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread2({
            dragEl,
            parentEl,
            ghostEl,
            rootEl,
            nextEl,
            lastDownEl,
            cloneEl,
            cloneHidden,
            dragStarted: moved,
            putSortable,
            activeSortable: Sortable.active,
            originalEvent,
            oldIndex,
            oldDraggableIndex,
            newIndex,
            newDraggableIndex,
            hideGhostForTarget: _hideGhostForTarget,
            unhideGhostForTarget: _unhideGhostForTarget,
            cloneNowHidden: function cloneNowHidden() {
              cloneHidden = true;
            },
            cloneNowShown: function cloneNowShown() {
              cloneHidden = false;
            },
            dispatchSortableEvent: function dispatchSortableEvent(name) {
              _dispatchEvent({
                sortable,
                name,
                originalEvent
              });
            }
          }, data));
        };
        function _dispatchEvent(info) {
          dispatchEvent(_objectSpread2({
            putSortable,
            cloneEl,
            targetEl: dragEl,
            rootEl,
            oldIndex,
            oldDraggableIndex,
            newIndex,
            newDraggableIndex
          }, info));
        }
        var dragEl, parentEl, ghostEl, rootEl, nextEl, lastDownEl, cloneEl, cloneHidden, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, activeGroup, putSortable, awaitingDragStarted = false, ignoreNextClick = false, sortables = [], tapEvt, touchEvt, lastDx, lastDy, tapDistanceLeft, tapDistanceTop, moved, lastTarget, lastDirection, pastFirstInvertThresh = false, isCircumstantialInvert = false, targetMoveDistance, ghostRelativeParent, ghostRelativeParentInitialScroll = [], _silent = false, savedInputChecked = [];
        var documentExists = typeof document !== "undefined", PositionGhostAbsolutely = IOS, CSSFloatProperty = Edge || IE11OrLess ? "cssFloat" : "float", supportDraggable = documentExists && !ChromeForAndroid && !IOS && "draggable" in document.createElement("div"), supportCssPointerEvents = function() {
          if (!documentExists)
            return;
          if (IE11OrLess) {
            return false;
          }
          var el = document.createElement("x");
          el.style.cssText = "pointer-events:auto";
          return el.style.pointerEvents === "auto";
        }(), _detectDirection = function _detectDirection2(el, options) {
          var elCSS = css(el), elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth), child1 = getChild(el, 0, options), child2 = getChild(el, 1, options), firstChildCSS = child1 && css(child1), secondChildCSS = child2 && css(child2), firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width, secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;
          if (elCSS.display === "flex") {
            return elCSS.flexDirection === "column" || elCSS.flexDirection === "column-reverse" ? "vertical" : "horizontal";
          }
          if (elCSS.display === "grid") {
            return elCSS.gridTemplateColumns.split(" ").length <= 1 ? "vertical" : "horizontal";
          }
          if (child1 && firstChildCSS["float"] && firstChildCSS["float"] !== "none") {
            var touchingSideChild2 = firstChildCSS["float"] === "left" ? "left" : "right";
            return child2 && (secondChildCSS.clear === "both" || secondChildCSS.clear === touchingSideChild2) ? "vertical" : "horizontal";
          }
          return child1 && (firstChildCSS.display === "block" || firstChildCSS.display === "flex" || firstChildCSS.display === "table" || firstChildCSS.display === "grid" || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === "none" || child2 && elCSS[CSSFloatProperty] === "none" && firstChildWidth + secondChildWidth > elWidth) ? "vertical" : "horizontal";
        }, _dragElInRowColumn = function _dragElInRowColumn2(dragRect, targetRect, vertical) {
          var dragElS1Opp = vertical ? dragRect.left : dragRect.top, dragElS2Opp = vertical ? dragRect.right : dragRect.bottom, dragElOppLength = vertical ? dragRect.width : dragRect.height, targetS1Opp = vertical ? targetRect.left : targetRect.top, targetS2Opp = vertical ? targetRect.right : targetRect.bottom, targetOppLength = vertical ? targetRect.width : targetRect.height;
          return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
        }, _detectNearestEmptySortable = function _detectNearestEmptySortable2(x, y) {
          var ret;
          sortables.some(function(sortable) {
            var threshold = sortable[expando].options.emptyInsertThreshold;
            if (!threshold || lastChild(sortable))
              return;
            var rect = getRect(sortable), insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold, insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;
            if (insideHorizontally && insideVertically) {
              return ret = sortable;
            }
          });
          return ret;
        }, _prepareGroup = function _prepareGroup2(options) {
          function toFn(value, pull) {
            return function(to, from, dragEl2, evt) {
              var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;
              if (value == null && (pull || sameGroup)) {
                return true;
              } else if (value == null || value === false) {
                return false;
              } else if (pull && value === "clone") {
                return value;
              } else if (typeof value === "function") {
                return toFn(value(to, from, dragEl2, evt), pull)(to, from, dragEl2, evt);
              } else {
                var otherGroup = (pull ? to : from).options.group.name;
                return value === true || typeof value === "string" && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;
              }
            };
          }
          var group = {};
          var originalGroup = options.group;
          if (!originalGroup || _typeof(originalGroup) != "object") {
            originalGroup = {
              name: originalGroup
            };
          }
          group.name = originalGroup.name;
          group.checkPull = toFn(originalGroup.pull, true);
          group.checkPut = toFn(originalGroup.put);
          group.revertClone = originalGroup.revertClone;
          options.group = group;
        }, _hideGhostForTarget = function _hideGhostForTarget2() {
          if (!supportCssPointerEvents && ghostEl) {
            css(ghostEl, "display", "none");
          }
        }, _unhideGhostForTarget = function _unhideGhostForTarget2() {
          if (!supportCssPointerEvents && ghostEl) {
            css(ghostEl, "display", "");
          }
        };
        if (documentExists && !ChromeForAndroid) {
          document.addEventListener("click", function(evt) {
            if (ignoreNextClick) {
              evt.preventDefault();
              evt.stopPropagation && evt.stopPropagation();
              evt.stopImmediatePropagation && evt.stopImmediatePropagation();
              ignoreNextClick = false;
              return false;
            }
          }, true);
        }
        var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent2(evt) {
          if (dragEl) {
            evt = evt.touches ? evt.touches[0] : evt;
            var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);
            if (nearest) {
              var event = {};
              for (var i2 in evt) {
                if (evt.hasOwnProperty(i2)) {
                  event[i2] = evt[i2];
                }
              }
              event.target = event.rootEl = nearest;
              event.preventDefault = void 0;
              event.stopPropagation = void 0;
              nearest[expando]._onDragOver(event);
            }
          }
        };
        var _checkOutsideTargetEl = function _checkOutsideTargetEl2(evt) {
          if (dragEl) {
            dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
          }
        };
        function Sortable(el, options) {
          if (!(el && el.nodeType && el.nodeType === 1)) {
            throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
          }
          this.el = el;
          this.options = options = _extends({}, options);
          el[expando] = this;
          var defaults2 = {
            group: null,
            sort: true,
            disabled: false,
            store: null,
            handle: null,
            draggable: /^[uo]l$/i.test(el.nodeName) ? ">li" : ">*",
            swapThreshold: 1,
            invertSwap: false,
            invertedSwapThreshold: null,
            removeCloneOnHide: true,
            direction: function direction() {
              return _detectDirection(el, this.options);
            },
            ghostClass: "sortable-ghost",
            chosenClass: "sortable-chosen",
            dragClass: "sortable-drag",
            ignore: "a, img",
            filter: null,
            preventOnFilter: true,
            animation: 0,
            easing: null,
            setData: function setData(dataTransfer, dragEl2) {
              dataTransfer.setData("Text", dragEl2.textContent);
            },
            dropBubble: false,
            dragoverBubble: false,
            dataIdAttr: "data-id",
            delay: 0,
            delayOnTouchOnly: false,
            touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
            forceFallback: false,
            fallbackClass: "sortable-fallback",
            fallbackOnBody: false,
            fallbackTolerance: 0,
            fallbackOffset: {
              x: 0,
              y: 0
            },
            supportPointer: Sortable.supportPointer !== false && "PointerEvent" in window && !Safari,
            emptyInsertThreshold: 5
          };
          PluginManager.initializePlugins(this, el, defaults2);
          for (var name in defaults2) {
            !(name in options) && (options[name] = defaults2[name]);
          }
          _prepareGroup(options);
          for (var fn in this) {
            if (fn.charAt(0) === "_" && typeof this[fn] === "function") {
              this[fn] = this[fn].bind(this);
            }
          }
          this.nativeDraggable = options.forceFallback ? false : supportDraggable;
          if (this.nativeDraggable) {
            this.options.touchStartThreshold = 1;
          }
          if (options.supportPointer) {
            on(el, "pointerdown", this._onTapStart);
          } else {
            on(el, "mousedown", this._onTapStart);
            on(el, "touchstart", this._onTapStart);
          }
          if (this.nativeDraggable) {
            on(el, "dragover", this);
            on(el, "dragenter", this);
          }
          sortables.push(this.el);
          options.store && options.store.get && this.sort(options.store.get(this) || []);
          _extends(this, AnimationStateManager());
        }
        Sortable.prototype = {
          constructor: Sortable,
          _isOutsideThisEl: function _isOutsideThisEl(target) {
            if (!this.el.contains(target) && target !== this.el) {
              lastTarget = null;
            }
          },
          _getDirection: function _getDirection(evt, target) {
            return typeof this.options.direction === "function" ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
          },
          _onTapStart: function _onTapStart(evt) {
            if (!evt.cancelable)
              return;
            var _this = this, el = this.el, options = this.options, preventOnFilter = options.preventOnFilter, type = evt.type, touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === "touch" && evt, target = (touch || evt).target, originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target, filter2 = options.filter;
            _saveInputCheckedState(el);
            if (dragEl) {
              return;
            }
            if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
              return;
            }
            if (originalTarget.isContentEditable) {
              return;
            }
            if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === "SELECT") {
              return;
            }
            target = closest(target, options.draggable, el, false);
            if (target && target.animated) {
              return;
            }
            if (lastDownEl === target) {
              return;
            }
            oldIndex = index(target);
            oldDraggableIndex = index(target, options.draggable);
            if (typeof filter2 === "function") {
              if (filter2.call(this, evt, target, this)) {
                _dispatchEvent({
                  sortable: _this,
                  rootEl: originalTarget,
                  name: "filter",
                  targetEl: target,
                  toEl: el,
                  fromEl: el
                });
                pluginEvent("filter", _this, {
                  evt
                });
                preventOnFilter && evt.cancelable && evt.preventDefault();
                return;
              }
            } else if (filter2) {
              filter2 = filter2.split(",").some(function(criteria) {
                criteria = closest(originalTarget, criteria.trim(), el, false);
                if (criteria) {
                  _dispatchEvent({
                    sortable: _this,
                    rootEl: criteria,
                    name: "filter",
                    targetEl: target,
                    fromEl: el,
                    toEl: el
                  });
                  pluginEvent("filter", _this, {
                    evt
                  });
                  return true;
                }
              });
              if (filter2) {
                preventOnFilter && evt.cancelable && evt.preventDefault();
                return;
              }
            }
            if (options.handle && !closest(originalTarget, options.handle, el, false)) {
              return;
            }
            this._prepareDragStart(evt, touch, target);
          },
          _prepareDragStart: function _prepareDragStart(evt, touch, target) {
            var _this = this, el = _this.el, options = _this.options, ownerDocument = el.ownerDocument, dragStartFn;
            if (target && !dragEl && target.parentNode === el) {
              var dragRect = getRect(target);
              rootEl = el;
              dragEl = target;
              parentEl = dragEl.parentNode;
              nextEl = dragEl.nextSibling;
              lastDownEl = target;
              activeGroup = options.group;
              Sortable.dragged = dragEl;
              tapEvt = {
                target: dragEl,
                clientX: (touch || evt).clientX,
                clientY: (touch || evt).clientY
              };
              tapDistanceLeft = tapEvt.clientX - dragRect.left;
              tapDistanceTop = tapEvt.clientY - dragRect.top;
              this._lastX = (touch || evt).clientX;
              this._lastY = (touch || evt).clientY;
              dragEl.style["will-change"] = "all";
              dragStartFn = function dragStartFn2() {
                pluginEvent("delayEnded", _this, {
                  evt
                });
                if (Sortable.eventCanceled) {
                  _this._onDrop();
                  return;
                }
                _this._disableDelayedDragEvents();
                if (!FireFox && _this.nativeDraggable) {
                  dragEl.draggable = true;
                }
                _this._triggerDragStart(evt, touch);
                _dispatchEvent({
                  sortable: _this,
                  name: "choose",
                  originalEvent: evt
                });
                toggleClass(dragEl, options.chosenClass, true);
              };
              options.ignore.split(",").forEach(function(criteria) {
                find2(dragEl, criteria.trim(), _disableDraggable);
              });
              on(ownerDocument, "dragover", nearestEmptyInsertDetectEvent);
              on(ownerDocument, "mousemove", nearestEmptyInsertDetectEvent);
              on(ownerDocument, "touchmove", nearestEmptyInsertDetectEvent);
              on(ownerDocument, "mouseup", _this._onDrop);
              on(ownerDocument, "touchend", _this._onDrop);
              on(ownerDocument, "touchcancel", _this._onDrop);
              if (FireFox && this.nativeDraggable) {
                this.options.touchStartThreshold = 4;
                dragEl.draggable = true;
              }
              pluginEvent("delayStart", this, {
                evt
              });
              if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
                if (Sortable.eventCanceled) {
                  this._onDrop();
                  return;
                }
                on(ownerDocument, "mouseup", _this._disableDelayedDrag);
                on(ownerDocument, "touchend", _this._disableDelayedDrag);
                on(ownerDocument, "touchcancel", _this._disableDelayedDrag);
                on(ownerDocument, "mousemove", _this._delayedDragTouchMoveHandler);
                on(ownerDocument, "touchmove", _this._delayedDragTouchMoveHandler);
                options.supportPointer && on(ownerDocument, "pointermove", _this._delayedDragTouchMoveHandler);
                _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
              } else {
                dragStartFn();
              }
            }
          },
          _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(e) {
            var touch = e.touches ? e.touches[0] : e;
            if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
              this._disableDelayedDrag();
            }
          },
          _disableDelayedDrag: function _disableDelayedDrag() {
            dragEl && _disableDraggable(dragEl);
            clearTimeout(this._dragStartTimer);
            this._disableDelayedDragEvents();
          },
          _disableDelayedDragEvents: function _disableDelayedDragEvents() {
            var ownerDocument = this.el.ownerDocument;
            off(ownerDocument, "mouseup", this._disableDelayedDrag);
            off(ownerDocument, "touchend", this._disableDelayedDrag);
            off(ownerDocument, "touchcancel", this._disableDelayedDrag);
            off(ownerDocument, "mousemove", this._delayedDragTouchMoveHandler);
            off(ownerDocument, "touchmove", this._delayedDragTouchMoveHandler);
            off(ownerDocument, "pointermove", this._delayedDragTouchMoveHandler);
          },
          _triggerDragStart: function _triggerDragStart(evt, touch) {
            touch = touch || evt.pointerType == "touch" && evt;
            if (!this.nativeDraggable || touch) {
              if (this.options.supportPointer) {
                on(document, "pointermove", this._onTouchMove);
              } else if (touch) {
                on(document, "touchmove", this._onTouchMove);
              } else {
                on(document, "mousemove", this._onTouchMove);
              }
            } else {
              on(dragEl, "dragend", this);
              on(rootEl, "dragstart", this._onDragStart);
            }
            try {
              if (document.selection) {
                _nextTick(function() {
                  document.selection.empty();
                });
              } else {
                window.getSelection().removeAllRanges();
              }
            } catch (err) {
            }
          },
          _dragStarted: function _dragStarted(fallback, evt) {
            awaitingDragStarted = false;
            if (rootEl && dragEl) {
              pluginEvent("dragStarted", this, {
                evt
              });
              if (this.nativeDraggable) {
                on(document, "dragover", _checkOutsideTargetEl);
              }
              var options = this.options;
              !fallback && toggleClass(dragEl, options.dragClass, false);
              toggleClass(dragEl, options.ghostClass, true);
              Sortable.active = this;
              fallback && this._appendGhost();
              _dispatchEvent({
                sortable: this,
                name: "start",
                originalEvent: evt
              });
            } else {
              this._nulling();
            }
          },
          _emulateDragOver: function _emulateDragOver() {
            if (touchEvt) {
              this._lastX = touchEvt.clientX;
              this._lastY = touchEvt.clientY;
              _hideGhostForTarget();
              var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
              var parent2 = target;
              while (target && target.shadowRoot) {
                target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
                if (target === parent2)
                  break;
                parent2 = target;
              }
              dragEl.parentNode[expando]._isOutsideThisEl(target);
              if (parent2) {
                do {
                  if (parent2[expando]) {
                    var inserted = void 0;
                    inserted = parent2[expando]._onDragOver({
                      clientX: touchEvt.clientX,
                      clientY: touchEvt.clientY,
                      target,
                      rootEl: parent2
                    });
                    if (inserted && !this.options.dragoverBubble) {
                      break;
                    }
                  }
                  target = parent2;
                } while (parent2 = parent2.parentNode);
              }
              _unhideGhostForTarget();
            }
          },
          _onTouchMove: function _onTouchMove(evt) {
            if (tapEvt) {
              var options = this.options, fallbackTolerance = options.fallbackTolerance, fallbackOffset = options.fallbackOffset, touch = evt.touches ? evt.touches[0] : evt, ghostMatrix = ghostEl && matrix(ghostEl, true), scaleX = ghostEl && ghostMatrix && ghostMatrix.a, scaleY = ghostEl && ghostMatrix && ghostMatrix.d, relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent), dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1), dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1);
              if (!Sortable.active && !awaitingDragStarted) {
                if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
                  return;
                }
                this._onDragStart(evt, true);
              }
              if (ghostEl) {
                if (ghostMatrix) {
                  ghostMatrix.e += dx - (lastDx || 0);
                  ghostMatrix.f += dy - (lastDy || 0);
                } else {
                  ghostMatrix = {
                    a: 1,
                    b: 0,
                    c: 0,
                    d: 1,
                    e: dx,
                    f: dy
                  };
                }
                var cssMatrix = "matrix(".concat(ghostMatrix.a, ",").concat(ghostMatrix.b, ",").concat(ghostMatrix.c, ",").concat(ghostMatrix.d, ",").concat(ghostMatrix.e, ",").concat(ghostMatrix.f, ")");
                css(ghostEl, "webkitTransform", cssMatrix);
                css(ghostEl, "mozTransform", cssMatrix);
                css(ghostEl, "msTransform", cssMatrix);
                css(ghostEl, "transform", cssMatrix);
                lastDx = dx;
                lastDy = dy;
                touchEvt = touch;
              }
              evt.cancelable && evt.preventDefault();
            }
          },
          _appendGhost: function _appendGhost() {
            if (!ghostEl) {
              var container = this.options.fallbackOnBody ? document.body : rootEl, rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container), options = this.options;
              if (PositionGhostAbsolutely) {
                ghostRelativeParent = container;
                while (css(ghostRelativeParent, "position") === "static" && css(ghostRelativeParent, "transform") === "none" && ghostRelativeParent !== document) {
                  ghostRelativeParent = ghostRelativeParent.parentNode;
                }
                if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
                  if (ghostRelativeParent === document)
                    ghostRelativeParent = getWindowScrollingElement();
                  rect.top += ghostRelativeParent.scrollTop;
                  rect.left += ghostRelativeParent.scrollLeft;
                } else {
                  ghostRelativeParent = getWindowScrollingElement();
                }
                ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
              }
              ghostEl = dragEl.cloneNode(true);
              toggleClass(ghostEl, options.ghostClass, false);
              toggleClass(ghostEl, options.fallbackClass, true);
              toggleClass(ghostEl, options.dragClass, true);
              css(ghostEl, "transition", "");
              css(ghostEl, "transform", "");
              css(ghostEl, "box-sizing", "border-box");
              css(ghostEl, "margin", 0);
              css(ghostEl, "top", rect.top);
              css(ghostEl, "left", rect.left);
              css(ghostEl, "width", rect.width);
              css(ghostEl, "height", rect.height);
              css(ghostEl, "opacity", "0.8");
              css(ghostEl, "position", PositionGhostAbsolutely ? "absolute" : "fixed");
              css(ghostEl, "zIndex", "100000");
              css(ghostEl, "pointerEvents", "none");
              Sortable.ghost = ghostEl;
              container.appendChild(ghostEl);
              css(ghostEl, "transform-origin", tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + "% " + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + "%");
            }
          },
          _onDragStart: function _onDragStart(evt, fallback) {
            var _this = this;
            var dataTransfer = evt.dataTransfer;
            var options = _this.options;
            pluginEvent("dragStart", this, {
              evt
            });
            if (Sortable.eventCanceled) {
              this._onDrop();
              return;
            }
            pluginEvent("setupClone", this);
            if (!Sortable.eventCanceled) {
              cloneEl = clone(dragEl);
              cloneEl.removeAttribute("id");
              cloneEl.draggable = false;
              cloneEl.style["will-change"] = "";
              this._hideClone();
              toggleClass(cloneEl, this.options.chosenClass, false);
              Sortable.clone = cloneEl;
            }
            _this.cloneId = _nextTick(function() {
              pluginEvent("clone", _this);
              if (Sortable.eventCanceled)
                return;
              if (!_this.options.removeCloneOnHide) {
                rootEl.insertBefore(cloneEl, dragEl);
              }
              _this._hideClone();
              _dispatchEvent({
                sortable: _this,
                name: "clone"
              });
            });
            !fallback && toggleClass(dragEl, options.dragClass, true);
            if (fallback) {
              ignoreNextClick = true;
              _this._loopId = setInterval(_this._emulateDragOver, 50);
            } else {
              off(document, "mouseup", _this._onDrop);
              off(document, "touchend", _this._onDrop);
              off(document, "touchcancel", _this._onDrop);
              if (dataTransfer) {
                dataTransfer.effectAllowed = "move";
                options.setData && options.setData.call(_this, dataTransfer, dragEl);
              }
              on(document, "drop", _this);
              css(dragEl, "transform", "translateZ(0)");
            }
            awaitingDragStarted = true;
            _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
            on(document, "selectstart", _this);
            moved = true;
            if (Safari) {
              css(document.body, "user-select", "none");
            }
          },
          _onDragOver: function _onDragOver(evt) {
            var el = this.el, target = evt.target, dragRect, targetRect, revert, options = this.options, group = options.group, activeSortable = Sortable.active, isOwner = activeGroup === group, canSort = options.sort, fromSortable = putSortable || activeSortable, vertical, _this = this, completedFired = false;
            if (_silent)
              return;
            function dragOverEvent(name, extra) {
              pluginEvent(name, _this, _objectSpread2({
                evt,
                isOwner,
                axis: vertical ? "vertical" : "horizontal",
                revert,
                dragRect,
                targetRect,
                canSort,
                fromSortable,
                target,
                completed,
                onMove: function onMove(target2, after2) {
                  return _onMove(rootEl, el, dragEl, dragRect, target2, getRect(target2), evt, after2);
                },
                changed
              }, extra));
            }
            function capture() {
              dragOverEvent("dragOverAnimationCapture");
              _this.captureAnimationState();
              if (_this !== fromSortable) {
                fromSortable.captureAnimationState();
              }
            }
            function completed(insertion) {
              dragOverEvent("dragOverCompleted", {
                insertion
              });
              if (insertion) {
                if (isOwner) {
                  activeSortable._hideClone();
                } else {
                  activeSortable._showClone(_this);
                }
                if (_this !== fromSortable) {
                  toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
                  toggleClass(dragEl, options.ghostClass, true);
                }
                if (putSortable !== _this && _this !== Sortable.active) {
                  putSortable = _this;
                } else if (_this === Sortable.active && putSortable) {
                  putSortable = null;
                }
                if (fromSortable === _this) {
                  _this._ignoreWhileAnimating = target;
                }
                _this.animateAll(function() {
                  dragOverEvent("dragOverAnimationComplete");
                  _this._ignoreWhileAnimating = null;
                });
                if (_this !== fromSortable) {
                  fromSortable.animateAll();
                  fromSortable._ignoreWhileAnimating = null;
                }
              }
              if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
                lastTarget = null;
              }
              if (!options.dragoverBubble && !evt.rootEl && target !== document) {
                dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
                !insertion && nearestEmptyInsertDetectEvent(evt);
              }
              !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
              return completedFired = true;
            }
            function changed() {
              newIndex = index(dragEl);
              newDraggableIndex = index(dragEl, options.draggable);
              _dispatchEvent({
                sortable: _this,
                name: "change",
                toEl: el,
                newIndex,
                newDraggableIndex,
                originalEvent: evt
              });
            }
            if (evt.preventDefault !== void 0) {
              evt.cancelable && evt.preventDefault();
            }
            target = closest(target, options.draggable, el, true);
            dragOverEvent("dragOver");
            if (Sortable.eventCanceled)
              return completedFired;
            if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
              return completed(false);
            }
            ignoreNextClick = false;
            if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = parentEl !== rootEl) : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
              vertical = this._getDirection(evt, target) === "vertical";
              dragRect = getRect(dragEl);
              dragOverEvent("dragOverValid");
              if (Sortable.eventCanceled)
                return completedFired;
              if (revert) {
                parentEl = rootEl;
                capture();
                this._hideClone();
                dragOverEvent("revert");
                if (!Sortable.eventCanceled) {
                  if (nextEl) {
                    rootEl.insertBefore(dragEl, nextEl);
                  } else {
                    rootEl.appendChild(dragEl);
                  }
                }
                return completed(true);
              }
              var elLastChild = lastChild(el, options.draggable);
              if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
                if (elLastChild === dragEl) {
                  return completed(false);
                }
                if (elLastChild && el === evt.target) {
                  target = elLastChild;
                }
                if (target) {
                  targetRect = getRect(target);
                }
                if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
                  capture();
                  if (elLastChild && elLastChild.nextSibling) {
                    el.insertBefore(dragEl, elLastChild.nextSibling);
                  } else {
                    el.appendChild(dragEl);
                  }
                  parentEl = el;
                  changed();
                  return completed(true);
                }
              } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {
                var firstChild = getChild(el, 0, options, true);
                if (firstChild === dragEl) {
                  return completed(false);
                }
                target = firstChild;
                targetRect = getRect(target);
                if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {
                  capture();
                  el.insertBefore(dragEl, firstChild);
                  parentEl = el;
                  changed();
                  return completed(true);
                }
              } else if (target.parentNode === el) {
                targetRect = getRect(target);
                var direction = 0, targetBeforeFirstSwap, differentLevel = dragEl.parentNode !== el, differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical), side1 = vertical ? "top" : "left", scrolledPastTop = isScrolledPast(target, "top", "top") || isScrolledPast(dragEl, "top", "top"), scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;
                if (lastTarget !== target) {
                  targetBeforeFirstSwap = targetRect[side1];
                  pastFirstInvertThresh = false;
                  isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
                }
                direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
                var sibling;
                if (direction !== 0) {
                  var dragIndex = index(dragEl);
                  do {
                    dragIndex -= direction;
                    sibling = parentEl.children[dragIndex];
                  } while (sibling && (css(sibling, "display") === "none" || sibling === ghostEl));
                }
                if (direction === 0 || sibling === target) {
                  return completed(false);
                }
                lastTarget = target;
                lastDirection = direction;
                var nextSibling = target.nextElementSibling, after = false;
                after = direction === 1;
                var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);
                if (moveVector !== false) {
                  if (moveVector === 1 || moveVector === -1) {
                    after = moveVector === 1;
                  }
                  _silent = true;
                  setTimeout(_unsilent, 30);
                  capture();
                  if (after && !nextSibling) {
                    el.appendChild(dragEl);
                  } else {
                    target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
                  }
                  if (scrolledPastTop) {
                    scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
                  }
                  parentEl = dragEl.parentNode;
                  if (targetBeforeFirstSwap !== void 0 && !isCircumstantialInvert) {
                    targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
                  }
                  changed();
                  return completed(true);
                }
              }
              if (el.contains(dragEl)) {
                return completed(false);
              }
            }
            return false;
          },
          _ignoreWhileAnimating: null,
          _offMoveEvents: function _offMoveEvents() {
            off(document, "mousemove", this._onTouchMove);
            off(document, "touchmove", this._onTouchMove);
            off(document, "pointermove", this._onTouchMove);
            off(document, "dragover", nearestEmptyInsertDetectEvent);
            off(document, "mousemove", nearestEmptyInsertDetectEvent);
            off(document, "touchmove", nearestEmptyInsertDetectEvent);
          },
          _offUpEvents: function _offUpEvents() {
            var ownerDocument = this.el.ownerDocument;
            off(ownerDocument, "mouseup", this._onDrop);
            off(ownerDocument, "touchend", this._onDrop);
            off(ownerDocument, "pointerup", this._onDrop);
            off(ownerDocument, "touchcancel", this._onDrop);
            off(document, "selectstart", this);
          },
          _onDrop: function _onDrop(evt) {
            var el = this.el, options = this.options;
            newIndex = index(dragEl);
            newDraggableIndex = index(dragEl, options.draggable);
            pluginEvent("drop", this, {
              evt
            });
            parentEl = dragEl && dragEl.parentNode;
            newIndex = index(dragEl);
            newDraggableIndex = index(dragEl, options.draggable);
            if (Sortable.eventCanceled) {
              this._nulling();
              return;
            }
            awaitingDragStarted = false;
            isCircumstantialInvert = false;
            pastFirstInvertThresh = false;
            clearInterval(this._loopId);
            clearTimeout(this._dragStartTimer);
            _cancelNextTick(this.cloneId);
            _cancelNextTick(this._dragStartId);
            if (this.nativeDraggable) {
              off(document, "drop", this);
              off(el, "dragstart", this._onDragStart);
            }
            this._offMoveEvents();
            this._offUpEvents();
            if (Safari) {
              css(document.body, "user-select", "");
            }
            css(dragEl, "transform", "");
            if (evt) {
              if (moved) {
                evt.cancelable && evt.preventDefault();
                !options.dropBubble && evt.stopPropagation();
              }
              ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);
              if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== "clone") {
                cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
              }
              if (dragEl) {
                if (this.nativeDraggable) {
                  off(dragEl, "dragend", this);
                }
                _disableDraggable(dragEl);
                dragEl.style["will-change"] = "";
                if (moved && !awaitingDragStarted) {
                  toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
                }
                toggleClass(dragEl, this.options.chosenClass, false);
                _dispatchEvent({
                  sortable: this,
                  name: "unchoose",
                  toEl: parentEl,
                  newIndex: null,
                  newDraggableIndex: null,
                  originalEvent: evt
                });
                if (rootEl !== parentEl) {
                  if (newIndex >= 0) {
                    _dispatchEvent({
                      rootEl: parentEl,
                      name: "add",
                      toEl: parentEl,
                      fromEl: rootEl,
                      originalEvent: evt
                    });
                    _dispatchEvent({
                      sortable: this,
                      name: "remove",
                      toEl: parentEl,
                      originalEvent: evt
                    });
                    _dispatchEvent({
                      rootEl: parentEl,
                      name: "sort",
                      toEl: parentEl,
                      fromEl: rootEl,
                      originalEvent: evt
                    });
                    _dispatchEvent({
                      sortable: this,
                      name: "sort",
                      toEl: parentEl,
                      originalEvent: evt
                    });
                  }
                  putSortable && putSortable.save();
                } else {
                  if (newIndex !== oldIndex) {
                    if (newIndex >= 0) {
                      _dispatchEvent({
                        sortable: this,
                        name: "update",
                        toEl: parentEl,
                        originalEvent: evt
                      });
                      _dispatchEvent({
                        sortable: this,
                        name: "sort",
                        toEl: parentEl,
                        originalEvent: evt
                      });
                    }
                  }
                }
                if (Sortable.active) {
                  if (newIndex == null || newIndex === -1) {
                    newIndex = oldIndex;
                    newDraggableIndex = oldDraggableIndex;
                  }
                  _dispatchEvent({
                    sortable: this,
                    name: "end",
                    toEl: parentEl,
                    originalEvent: evt
                  });
                  this.save();
                }
              }
            }
            this._nulling();
          },
          _nulling: function _nulling() {
            pluginEvent("nulling", this);
            rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
            savedInputChecked.forEach(function(el) {
              el.checked = true;
            });
            savedInputChecked.length = lastDx = lastDy = 0;
          },
          handleEvent: function handleEvent(evt) {
            switch (evt.type) {
              case "drop":
              case "dragend":
                this._onDrop(evt);
                break;
              case "dragenter":
              case "dragover":
                if (dragEl) {
                  this._onDragOver(evt);
                  _globalDragOver(evt);
                }
                break;
              case "selectstart":
                evt.preventDefault();
                break;
            }
          },
          toArray: function toArray() {
            var order2 = [], el, children = this.el.children, i2 = 0, n = children.length, options = this.options;
            for (; i2 < n; i2++) {
              el = children[i2];
              if (closest(el, options.draggable, this.el, false)) {
                order2.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
              }
            }
            return order2;
          },
          sort: function sort(order2, useAnimation) {
            var items = {}, rootEl2 = this.el;
            this.toArray().forEach(function(id2, i2) {
              var el = rootEl2.children[i2];
              if (closest(el, this.options.draggable, rootEl2, false)) {
                items[id2] = el;
              }
            }, this);
            useAnimation && this.captureAnimationState();
            order2.forEach(function(id2) {
              if (items[id2]) {
                rootEl2.removeChild(items[id2]);
                rootEl2.appendChild(items[id2]);
              }
            });
            useAnimation && this.animateAll();
          },
          save: function save() {
            var store = this.options.store;
            store && store.set && store.set(this);
          },
          closest: function closest$1(el, selector) {
            return closest(el, selector || this.options.draggable, this.el, false);
          },
          option: function option(name, value) {
            var options = this.options;
            if (value === void 0) {
              return options[name];
            } else {
              var modifiedValue = PluginManager.modifyOption(this, name, value);
              if (typeof modifiedValue !== "undefined") {
                options[name] = modifiedValue;
              } else {
                options[name] = value;
              }
              if (name === "group") {
                _prepareGroup(options);
              }
            }
          },
          destroy: function destroy() {
            pluginEvent("destroy", this);
            var el = this.el;
            el[expando] = null;
            off(el, "mousedown", this._onTapStart);
            off(el, "touchstart", this._onTapStart);
            off(el, "pointerdown", this._onTapStart);
            if (this.nativeDraggable) {
              off(el, "dragover", this);
              off(el, "dragenter", this);
            }
            Array.prototype.forEach.call(el.querySelectorAll("[draggable]"), function(el2) {
              el2.removeAttribute("draggable");
            });
            this._onDrop();
            this._disableDelayedDragEvents();
            sortables.splice(sortables.indexOf(this.el), 1);
            this.el = el = null;
          },
          _hideClone: function _hideClone() {
            if (!cloneHidden) {
              pluginEvent("hideClone", this);
              if (Sortable.eventCanceled)
                return;
              css(cloneEl, "display", "none");
              if (this.options.removeCloneOnHide && cloneEl.parentNode) {
                cloneEl.parentNode.removeChild(cloneEl);
              }
              cloneHidden = true;
            }
          },
          _showClone: function _showClone(putSortable2) {
            if (putSortable2.lastPutMode !== "clone") {
              this._hideClone();
              return;
            }
            if (cloneHidden) {
              pluginEvent("showClone", this);
              if (Sortable.eventCanceled)
                return;
              if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {
                rootEl.insertBefore(cloneEl, dragEl);
              } else if (nextEl) {
                rootEl.insertBefore(cloneEl, nextEl);
              } else {
                rootEl.appendChild(cloneEl);
              }
              if (this.options.group.revertClone) {
                this.animate(dragEl, cloneEl);
              }
              css(cloneEl, "display", "");
              cloneHidden = false;
            }
          }
        };
        function _globalDragOver(evt) {
          if (evt.dataTransfer) {
            evt.dataTransfer.dropEffect = "move";
          }
          evt.cancelable && evt.preventDefault();
        }
        function _onMove(fromEl, toEl, dragEl2, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
          var evt, sortable = fromEl[expando], onMoveFn = sortable.options.onMove, retVal;
          if (window.CustomEvent && !IE11OrLess && !Edge) {
            evt = new CustomEvent("move", {
              bubbles: true,
              cancelable: true
            });
          } else {
            evt = document.createEvent("Event");
            evt.initEvent("move", true, true);
          }
          evt.to = toEl;
          evt.from = fromEl;
          evt.dragged = dragEl2;
          evt.draggedRect = dragRect;
          evt.related = targetEl || toEl;
          evt.relatedRect = targetRect || getRect(toEl);
          evt.willInsertAfter = willInsertAfter;
          evt.originalEvent = originalEvent;
          fromEl.dispatchEvent(evt);
          if (onMoveFn) {
            retVal = onMoveFn.call(sortable, evt, originalEvent);
          }
          return retVal;
        }
        function _disableDraggable(el) {
          el.draggable = false;
        }
        function _unsilent() {
          _silent = false;
        }
        function _ghostIsFirst(evt, vertical, sortable) {
          var rect = getRect(getChild(sortable.el, 0, sortable.options, true));
          var spacer = 10;
          return vertical ? evt.clientX < rect.left - spacer || evt.clientY < rect.top && evt.clientX < rect.right : evt.clientY < rect.top - spacer || evt.clientY < rect.bottom && evt.clientX < rect.left;
        }
        function _ghostIsLast(evt, vertical, sortable) {
          var rect = getRect(lastChild(sortable.el, sortable.options.draggable));
          var spacer = 10;
          return vertical ? evt.clientX > rect.right + spacer || evt.clientX <= rect.right && evt.clientY > rect.bottom && evt.clientX >= rect.left : evt.clientX > rect.right && evt.clientY > rect.top || evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer;
        }
        function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
          var mouseOnAxis = vertical ? evt.clientY : evt.clientX, targetLength = vertical ? targetRect.height : targetRect.width, targetS1 = vertical ? targetRect.top : targetRect.left, targetS2 = vertical ? targetRect.bottom : targetRect.right, invert = false;
          if (!invertSwap) {
            if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
              if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
                pastFirstInvertThresh = true;
              }
              if (!pastFirstInvertThresh) {
                if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance : mouseOnAxis > targetS2 - targetMoveDistance) {
                  return -lastDirection;
                }
              } else {
                invert = true;
              }
            } else {
              if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
                return _getInsertDirection(target);
              }
            }
          }
          invert = invert || invertSwap;
          if (invert) {
            if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
              return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
            }
          }
          return 0;
        }
        function _getInsertDirection(target) {
          if (index(dragEl) < index(target)) {
            return 1;
          } else {
            return -1;
          }
        }
        function _generateId(el) {
          var str = el.tagName + el.className + el.src + el.href + el.textContent, i2 = str.length, sum = 0;
          while (i2--) {
            sum += str.charCodeAt(i2);
          }
          return sum.toString(36);
        }
        function _saveInputCheckedState(root2) {
          savedInputChecked.length = 0;
          var inputs = root2.getElementsByTagName("input");
          var idx = inputs.length;
          while (idx--) {
            var el = inputs[idx];
            el.checked && savedInputChecked.push(el);
          }
        }
        function _nextTick(fn) {
          return setTimeout(fn, 0);
        }
        function _cancelNextTick(id2) {
          return clearTimeout(id2);
        }
        if (documentExists) {
          on(document, "touchmove", function(evt) {
            if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
              evt.preventDefault();
            }
          });
        }
        Sortable.utils = {
          on,
          off,
          css,
          find: find2,
          is: function is(el, selector) {
            return !!closest(el, selector, el, false);
          },
          extend,
          throttle,
          closest,
          toggleClass,
          clone,
          index,
          nextTick: _nextTick,
          cancelNextTick: _cancelNextTick,
          detectDirection: _detectDirection,
          getChild
        };
        Sortable.get = function(element2) {
          return element2[expando];
        };
        Sortable.mount = function() {
          for (var _len = arguments.length, plugins2 = new Array(_len), _key = 0; _key < _len; _key++) {
            plugins2[_key] = arguments[_key];
          }
          if (plugins2[0].constructor === Array)
            plugins2 = plugins2[0];
          plugins2.forEach(function(plugin) {
            if (!plugin.prototype || !plugin.prototype.constructor) {
              throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(plugin));
            }
            if (plugin.utils)
              Sortable.utils = _objectSpread2(_objectSpread2({}, Sortable.utils), plugin.utils);
            PluginManager.mount(plugin);
          });
        };
        Sortable.create = function(el, options) {
          return new Sortable(el, options);
        };
        Sortable.version = version2;
        var autoScrolls = [], scrollEl, scrollRootEl, scrolling = false, lastAutoScrollX, lastAutoScrollY, touchEvt$1, pointerElemChangedInterval;
        function AutoScrollPlugin() {
          function AutoScroll() {
            this.defaults = {
              scroll: true,
              forceAutoScrollFallback: false,
              scrollSensitivity: 30,
              scrollSpeed: 10,
              bubbleScroll: true
            };
            for (var fn in this) {
              if (fn.charAt(0) === "_" && typeof this[fn] === "function") {
                this[fn] = this[fn].bind(this);
              }
            }
          }
          AutoScroll.prototype = {
            dragStarted: function dragStarted(_ref) {
              var originalEvent = _ref.originalEvent;
              if (this.sortable.nativeDraggable) {
                on(document, "dragover", this._handleAutoScroll);
              } else {
                if (this.options.supportPointer) {
                  on(document, "pointermove", this._handleFallbackAutoScroll);
                } else if (originalEvent.touches) {
                  on(document, "touchmove", this._handleFallbackAutoScroll);
                } else {
                  on(document, "mousemove", this._handleFallbackAutoScroll);
                }
              }
            },
            dragOverCompleted: function dragOverCompleted(_ref2) {
              var originalEvent = _ref2.originalEvent;
              if (!this.options.dragOverBubble && !originalEvent.rootEl) {
                this._handleAutoScroll(originalEvent);
              }
            },
            drop: function drop2() {
              if (this.sortable.nativeDraggable) {
                off(document, "dragover", this._handleAutoScroll);
              } else {
                off(document, "pointermove", this._handleFallbackAutoScroll);
                off(document, "touchmove", this._handleFallbackAutoScroll);
                off(document, "mousemove", this._handleFallbackAutoScroll);
              }
              clearPointerElemChangedInterval();
              clearAutoScrolls();
              cancelThrottle();
            },
            nulling: function nulling() {
              touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
              autoScrolls.length = 0;
            },
            _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
              this._handleAutoScroll(evt, true);
            },
            _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
              var _this = this;
              var x = (evt.touches ? evt.touches[0] : evt).clientX, y = (evt.touches ? evt.touches[0] : evt).clientY, elem = document.elementFromPoint(x, y);
              touchEvt$1 = evt;
              if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {
                autoScroll(evt, this.options, elem, fallback);
                var ogElemScroller = getParentAutoScrollElement(elem, true);
                if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
                  pointerElemChangedInterval && clearPointerElemChangedInterval();
                  pointerElemChangedInterval = setInterval(function() {
                    var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);
                    if (newElem !== ogElemScroller) {
                      ogElemScroller = newElem;
                      clearAutoScrolls();
                    }
                    autoScroll(evt, _this.options, newElem, fallback);
                  }, 10);
                  lastAutoScrollX = x;
                  lastAutoScrollY = y;
                }
              } else {
                if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
                  clearAutoScrolls();
                  return;
                }
                autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
              }
            }
          };
          return _extends(AutoScroll, {
            pluginName: "scroll",
            initializeByDefault: true
          });
        }
        function clearAutoScrolls() {
          autoScrolls.forEach(function(autoScroll2) {
            clearInterval(autoScroll2.pid);
          });
          autoScrolls = [];
        }
        function clearPointerElemChangedInterval() {
          clearInterval(pointerElemChangedInterval);
        }
        var autoScroll = throttle(function(evt, options, rootEl2, isFallback) {
          if (!options.scroll)
            return;
          var x = (evt.touches ? evt.touches[0] : evt).clientX, y = (evt.touches ? evt.touches[0] : evt).clientY, sens = options.scrollSensitivity, speed = options.scrollSpeed, winScroller = getWindowScrollingElement();
          var scrollThisInstance = false, scrollCustomFn;
          if (scrollRootEl !== rootEl2) {
            scrollRootEl = rootEl2;
            clearAutoScrolls();
            scrollEl = options.scroll;
            scrollCustomFn = options.scrollFn;
            if (scrollEl === true) {
              scrollEl = getParentAutoScrollElement(rootEl2, true);
            }
          }
          var layersOut = 0;
          var currentParent = scrollEl;
          do {
            var el = currentParent, rect = getRect(el), top2 = rect.top, bottom2 = rect.bottom, left2 = rect.left, right2 = rect.right, width = rect.width, height = rect.height, canScrollX = void 0, canScrollY = void 0, scrollWidth = el.scrollWidth, scrollHeight = el.scrollHeight, elCSS = css(el), scrollPosX = el.scrollLeft, scrollPosY = el.scrollTop;
            if (el === winScroller) {
              canScrollX = width < scrollWidth && (elCSS.overflowX === "auto" || elCSS.overflowX === "scroll" || elCSS.overflowX === "visible");
              canScrollY = height < scrollHeight && (elCSS.overflowY === "auto" || elCSS.overflowY === "scroll" || elCSS.overflowY === "visible");
            } else {
              canScrollX = width < scrollWidth && (elCSS.overflowX === "auto" || elCSS.overflowX === "scroll");
              canScrollY = height < scrollHeight && (elCSS.overflowY === "auto" || elCSS.overflowY === "scroll");
            }
            var vx = canScrollX && (Math.abs(right2 - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left2 - x) <= sens && !!scrollPosX);
            var vy = canScrollY && (Math.abs(bottom2 - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top2 - y) <= sens && !!scrollPosY);
            if (!autoScrolls[layersOut]) {
              for (var i2 = 0; i2 <= layersOut; i2++) {
                if (!autoScrolls[i2]) {
                  autoScrolls[i2] = {};
                }
              }
            }
            if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
              autoScrolls[layersOut].el = el;
              autoScrolls[layersOut].vx = vx;
              autoScrolls[layersOut].vy = vy;
              clearInterval(autoScrolls[layersOut].pid);
              if (vx != 0 || vy != 0) {
                scrollThisInstance = true;
                autoScrolls[layersOut].pid = setInterval(function() {
                  if (isFallback && this.layer === 0) {
                    Sortable.active._onTouchMove(touchEvt$1);
                  }
                  var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
                  var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;
                  if (typeof scrollCustomFn === "function") {
                    if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== "continue") {
                      return;
                    }
                  }
                  scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
                }.bind({
                  layer: layersOut
                }), 24);
              }
            }
            layersOut++;
          } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));
          scrolling = scrollThisInstance;
        }, 30);
        var drop = function drop2(_ref) {
          var originalEvent = _ref.originalEvent, putSortable2 = _ref.putSortable, dragEl2 = _ref.dragEl, activeSortable = _ref.activeSortable, dispatchSortableEvent = _ref.dispatchSortableEvent, hideGhostForTarget = _ref.hideGhostForTarget, unhideGhostForTarget = _ref.unhideGhostForTarget;
          if (!originalEvent)
            return;
          var toSortable = putSortable2 || activeSortable;
          hideGhostForTarget();
          var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;
          var target = document.elementFromPoint(touch.clientX, touch.clientY);
          unhideGhostForTarget();
          if (toSortable && !toSortable.el.contains(target)) {
            dispatchSortableEvent("spill");
            this.onSpill({
              dragEl: dragEl2,
              putSortable: putSortable2
            });
          }
        };
        function Revert() {
        }
        Revert.prototype = {
          startIndex: null,
          dragStart: function dragStart(_ref2) {
            var oldDraggableIndex2 = _ref2.oldDraggableIndex;
            this.startIndex = oldDraggableIndex2;
          },
          onSpill: function onSpill(_ref3) {
            var dragEl2 = _ref3.dragEl, putSortable2 = _ref3.putSortable;
            this.sortable.captureAnimationState();
            if (putSortable2) {
              putSortable2.captureAnimationState();
            }
            var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);
            if (nextSibling) {
              this.sortable.el.insertBefore(dragEl2, nextSibling);
            } else {
              this.sortable.el.appendChild(dragEl2);
            }
            this.sortable.animateAll();
            if (putSortable2) {
              putSortable2.animateAll();
            }
          },
          drop
        };
        _extends(Revert, {
          pluginName: "revertOnSpill"
        });
        function Remove() {
        }
        Remove.prototype = {
          onSpill: function onSpill(_ref4) {
            var dragEl2 = _ref4.dragEl, putSortable2 = _ref4.putSortable;
            var parentSortable = putSortable2 || this.sortable;
            parentSortable.captureAnimationState();
            dragEl2.parentNode && dragEl2.parentNode.removeChild(dragEl2);
            parentSortable.animateAll();
          },
          drop
        };
        _extends(Remove, {
          pluginName: "removeOnSpill"
        });
        Sortable.mount(new AutoScrollPlugin());
        Sortable.mount(Remove, Revert);
        function swapDragArrayElement(data, currentIndex, targetIndex) {
          var newData = _toConsumableArray(data);
          if (targetIndex - currentIndex > 0) {
            newData.splice(targetIndex + 1, 0, newData[currentIndex]);
            newData.splice(currentIndex, 1);
          } else {
            newData.splice(targetIndex, 0, newData[currentIndex]);
            newData.splice(currentIndex + 1, 1);
          }
          return newData;
        }
        function ownKeys$e(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$e(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$e(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$e(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function useDragSort(props2) {
          var _toRefs = vue.toRefs(props2), sortOnRowDraggable = _toRefs.sortOnRowDraggable, dragSort = _toRefs.dragSort, columns = _toRefs.columns, data = _toRefs.data, rowKey = _toRefs.rowKey;
          var _useClassName = useClassName(), tableDraggableClasses = _useClassName.tableDraggableClasses, tableBaseClass = _useClassName.tableBaseClass;
          var primaryTableRef = vue.ref(null);
          var dragCol = vue.computed(function() {
            return columns.value.find(function(item) {
              return item.colKey === "drag";
            });
          });
          var isRowDraggable = vue.computed(function() {
            return sortOnRowDraggable.value || dragSort.value === "row";
          });
          var isRowHandlerDraggable = vue.computed(function() {
            return dragSort.value === "row-handler" && !!dragCol.value;
          });
          var isColDraggable = vue.computed(function() {
            return dragSort.value === "col";
          });
          var lastRowList = vue.ref([]);
          var lastColList = vue.ref([]);
          if (props2.sortOnRowDraggable) {
            log.error("Table", "`sortOnRowDraggable` is going to be deprecated, use dragSort='row' instead.");
          }
          vue.watch([data], function(_ref) {
            var _ref2 = _slicedToArray(_ref, 1), data2 = _ref2[0];
            lastRowList.value = (data2 === null || data2 === void 0 ? void 0 : data2.map(function(item) {
              return get_1(item, rowKey.value);
            })) || [];
          }, {
            immediate: true
          });
          vue.watch(columns, function(columns2) {
            lastColList.value = columns2 || [];
          }, {
            immediate: true
          });
          var registerRowDragEvent = function registerRowDragEvent2(element2) {
            if (!isRowHandlerDraggable.value && !isRowDraggable.value)
              return;
            var dragContainer = element2 === null || element2 === void 0 ? void 0 : element2.querySelector("tbody");
            if (!dragContainer) {
              console.error("tbody does not exist.");
              return null;
            }
            var dragInstanceTmp = null;
            var baseOptions = _objectSpread$e(_objectSpread$e({
              animation: 150
            }, props2.dragSortOptions), {}, {
              ghostClass: tableDraggableClasses.ghost,
              chosenClass: tableDraggableClasses.chosen,
              dragClass: tableDraggableClasses.dragging,
              onEnd: function onEnd(evt) {
                var _dragInstanceTmp, _props$onDragSort;
                (_dragInstanceTmp = dragInstanceTmp) === null || _dragInstanceTmp === void 0 ? void 0 : _dragInstanceTmp.sort(lastRowList.value);
                var currentIndex = evt.oldIndex, targetIndex = evt.newIndex;
                var params = {
                  currentIndex,
                  current: data.value[currentIndex],
                  targetIndex,
                  target: data.value[targetIndex],
                  currentData: swapDragArrayElement(props2.data, currentIndex, targetIndex),
                  e: evt,
                  sort: "row"
                };
                (_props$onDragSort = props2.onDragSort) === null || _props$onDragSort === void 0 ? void 0 : _props$onDragSort.call(props2, params);
              }
            });
            if (isRowDraggable.value) {
              dragInstanceTmp = new Sortable(dragContainer, _objectSpread$e({}, baseOptions));
            } else {
              dragInstanceTmp = new Sortable(dragContainer, _objectSpread$e(_objectSpread$e({}, baseOptions), {}, {
                handle: ".".concat(tableDraggableClasses.handle)
              }));
            }
            lastRowList.value = dragInstanceTmp.toArray();
          };
          var registerColDragEvent = function registerColDragEvent2(tableElement) {
            var _dragInstanceTmp3;
            if (!isColDraggable.value || !tableElement)
              return;
            var dragInstanceTmp = null;
            var options = _objectSpread$e(_objectSpread$e({
              animation: 150
            }, props2.dragSortOptions), {}, {
              dataIdAttr: "data-colkey",
              direction: "vertical",
              ghostClass: tableDraggableClasses.ghost,
              chosenClass: tableDraggableClasses.chosen,
              dragClass: tableDraggableClasses.dragging,
              handle: ".".concat(tableBaseClass.thCellInner),
              onEnd: function onEnd(evt) {
                var _dragInstanceTmp2, _props$onDragSort2;
                (_dragInstanceTmp2 = dragInstanceTmp) === null || _dragInstanceTmp2 === void 0 ? void 0 : _dragInstanceTmp2.sort(_toConsumableArray(lastColList.value));
                var currentIndex = evt.oldIndex, targetIndex = evt.newIndex;
                var params = {
                  currentIndex,
                  current: columns.value[currentIndex],
                  targetIndex,
                  target: columns.value[targetIndex],
                  currentData: swapDragArrayElement(columns.value, currentIndex, targetIndex),
                  e: evt,
                  sort: "col"
                };
                (_props$onDragSort2 = props2.onDragSort) === null || _props$onDragSort2 === void 0 ? void 0 : _props$onDragSort2.call(props2, params);
              }
            });
            var container = tableElement.querySelector("thead > tr");
            dragInstanceTmp = new Sortable(container, options);
            lastColList.value = (_dragInstanceTmp3 = dragInstanceTmp) === null || _dragInstanceTmp3 === void 0 ? void 0 : _dragInstanceTmp3.toArray();
          };
          function setDragSortPrimaryTableRef(primaryTableElement) {
            primaryTableRef.value = primaryTableElement;
          }
          vue.watch([primaryTableRef], function(_ref3) {
            var _ref4 = _slicedToArray(_ref3, 1), val = _ref4[0];
            (val === null || val === void 0 ? void 0 : val.$el) && registerRowDragEvent(val === null || val === void 0 ? void 0 : val.$el);
            (val === null || val === void 0 ? void 0 : val.$el) && registerColDragEvent(val === null || val === void 0 ? void 0 : val.$el);
          });
          return {
            isRowDraggable,
            isRowHandlerDraggable,
            isColDraggable,
            setDragSortPrimaryTableRef
          };
        }
        function useAsyncLoading(props2, context) {
          var renderTNode = useTNodeJSX();
          var _useConfig = useConfig("table"), global2 = _useConfig.global;
          var _useClassName = useClassName(), isLoadingClass = _useClassName.isLoadingClass, isLoadMoreClass = _useClassName.isLoadMoreClass, asyncLoadingClass = _useClassName.asyncLoadingClass;
          var classes = vue.computed(function() {
            var _ref;
            return [asyncLoadingClass, (_ref = {}, _defineProperty$3(_ref, isLoadingClass, props2.asyncLoading === "loading"), _defineProperty$3(_ref, isLoadMoreClass, props2.asyncLoading === "load-more"), _ref)];
          });
          function onLoadClick() {
            var _props$onAsyncLoading;
            if (typeof props2.asyncLoading !== "string")
              return;
            (_props$onAsyncLoading = props2.onAsyncLoadingClick) === null || _props$onAsyncLoading === void 0 ? void 0 : _props$onAsyncLoading.call(props2, {
              status: props2.asyncLoading
            });
          }
          function renderAsyncLoading() {
            var asyncLoadingNode = renderTNode("asyncLoading");
            if (isString_1(asyncLoadingNode)) {
              var asyncLoading = props2.asyncLoading;
              var loadingText = {
                "load-more": global2.value.loadingMoreText,
                loading: global2.value.loadingText
              }[String(asyncLoading)];
              return vue.createVNode("div", {
                "class": classes.value,
                "onClick": onLoadClick
              }, [vue.createVNode(Loading, {
                "loading": asyncLoading === "loading",
                "text": loadingText
              }, null)]);
            }
            if (![null, false, void 0].includes(asyncLoadingNode)) {
              return vue.createVNode("div", {
                "class": classes.value,
                "onClick": onLoadClick
              }, [asyncLoadingNode]);
            }
            return null;
          }
          return {
            renderAsyncLoading
          };
        }
        function ownKeys$d(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$d(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$d(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$d(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var EditableCell = vue.defineComponent({
          name: "TableEditableCell",
          props: {
            row: Object,
            rowIndex: Number,
            col: Object,
            colIndex: Number,
            oldCell: [Function, String]
          },
          setup: function setup(props2, context) {
            var _toRefs = vue.toRefs(props2), row = _toRefs.row, col = _toRefs.col;
            var _useClassName = useClassName(), tableBaseClass = _useClassName.tableBaseClass;
            var tableEditableCellRef = vue.ref(null);
            var isEdit = vue.ref(false);
            var editValue = vue.ref();
            var errorList = vue.ref();
            var currentRow = vue.computed(function() {
              var newRow = _objectSpread$d({}, row.value);
              set_1(newRow, col.value.colKey, editValue.value);
              return newRow;
            });
            var cellNode = vue.computed(function() {
              var node = renderCell({
                row: currentRow.value,
                col: _objectSpread$d(_objectSpread$d({}, col.value), {}, {
                  cell: props2.oldCell
                }),
                rowIndex: props2.rowIndex,
                colIndex: props2.colIndex
              }, context.slots);
              return node;
            });
            var componentProps = vue.computed(function() {
              var _edit$abortEditOnEven;
              var edit = col.value.edit;
              if (!edit)
                return {};
              var editProps = _objectSpread$d({}, edit.props);
              delete editProps.onChange;
              delete editProps.value;
              (_edit$abortEditOnEven = edit.abortEditOnEvent) === null || _edit$abortEditOnEven === void 0 ? void 0 : _edit$abortEditOnEven.forEach(function(item) {
                delete editProps[item];
              });
              return editProps;
            });
            var isAbortEditOnChange = vue.computed(function() {
              var _edit$abortEditOnEven2;
              var edit = col.value.edit;
              if (!edit)
                return false;
              return Boolean((_edit$abortEditOnEven2 = edit.abortEditOnEvent) === null || _edit$abortEditOnEven2 === void 0 ? void 0 : _edit$abortEditOnEven2.includes("onChange"));
            });
            var validateEdit = function validateEdit2() {
              return new Promise(function(resolve) {
                var _col$value$edit, _col$value$edit2;
                if (!((_col$value$edit = col.value.edit) !== null && _col$value$edit !== void 0 && _col$value$edit.rules)) {
                  resolve(true);
                  return;
                }
                validate(editValue.value, (_col$value$edit2 = col.value.edit) === null || _col$value$edit2 === void 0 ? void 0 : _col$value$edit2.rules).then(function(result) {
                  errorList.value = result === null || result === void 0 ? void 0 : result.filter(function(t) {
                    return !t.result;
                  });
                  if (!errorList.value || !errorList.value.length) {
                    resolve(true);
                  } else {
                    resolve(errorList);
                  }
                });
              });
            };
            var isSame2 = function isSame3(a, b2) {
              if (_typeof$2(a) === "object" && _typeof$2(b2) === "object") {
                return JSON.stringify(a) === JSON.stringify(b2);
              }
              return a === b2;
            };
            var updateAndSaveAbort = function updateAndSaveAbort2(outsideAbortEvent) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              validateEdit().then(function(result) {
                if (result !== true)
                  return;
                if (!isSame2(editValue.value, get_1(row.value, col.value.colKey))) {
                  outsideAbortEvent === null || outsideAbortEvent === void 0 ? void 0 : outsideAbortEvent.apply(void 0, args);
                }
                var timer = setTimeout(function() {
                  isEdit.value = false;
                  clearTimeout(timer);
                }, 0);
              });
            };
            var listeners = vue.computed(function() {
              var _edit$abortEditOnEven3;
              var edit = col.value.edit;
              if (!isEdit.value)
                return;
              if (!(edit !== null && edit !== void 0 && (_edit$abortEditOnEven3 = edit.abortEditOnEvent) !== null && _edit$abortEditOnEven3 !== void 0 && _edit$abortEditOnEven3.length))
                return {};
              var tListeners = {};
              edit.abortEditOnEvent.forEach(function(itemEvent) {
                if (itemEvent === "onChange")
                  return;
                var outsideAbortEvent = edit.props[itemEvent];
                tListeners[itemEvent] = function() {
                  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = arguments[_key2];
                  }
                  updateAndSaveAbort.apply(void 0, [outsideAbortEvent, {
                    trigger: itemEvent,
                    newRowData: currentRow.value,
                    rowIndex: props2.rowIndex
                  }].concat(args));
                };
              });
              return tListeners;
            });
            var onEditChange = function onEditChange2(val) {
              editValue.value = val;
              if (isAbortEditOnChange.value) {
                var _col$value$edit3;
                var outsideAbortEvent = (_col$value$edit3 = col.value.edit) === null || _col$value$edit3 === void 0 ? void 0 : _col$value$edit3.onEdited;
                for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
                  args[_key3 - 1] = arguments[_key3];
                }
                updateAndSaveAbort.apply(void 0, [outsideAbortEvent, {
                  trigger: "onChange",
                  newRowData: currentRow.value,
                  rowIndex: props2.rowIndex
                }].concat(args));
              }
            };
            var documentClickHandler = function documentClickHandler2(e) {
              var _tableEditableCellRef, _e$path, _tableEditableCellRef2;
              if (!col.value.edit || !col.value.edit.component)
                return;
              if (!isEdit.value || !((_tableEditableCellRef = tableEditableCellRef.value) !== null && _tableEditableCellRef !== void 0 && _tableEditableCellRef.$el))
                return;
              if ((_e$path = e.path) !== null && _e$path !== void 0 && _e$path.includes((_tableEditableCellRef2 = tableEditableCellRef.value) === null || _tableEditableCellRef2 === void 0 ? void 0 : _tableEditableCellRef2.$el))
                return;
              var outsideAbortEvent = col.value.edit.onEdited;
              updateAndSaveAbort(outsideAbortEvent, {
                trigger: "document",
                newRowData: currentRow.value,
                rowIndex: props2.rowIndex
              });
            };
            vue.watch(row, function(row2) {
              var val = get_1(row2, col.value.colKey);
              if (_typeof$2(val) === "object") {
                val = val instanceof Array ? _toConsumableArray(val) : _objectSpread$d({}, val);
              }
              editValue.value = val;
            }, {
              immediate: true
            });
            vue.watch(isEdit, function(isEdit2) {
              if (!col.value.edit || !col.value.edit.component)
                return;
              if (isEdit2) {
                document.addEventListener("click", documentClickHandler);
              } else {
                document.removeEventListener("click", documentClickHandler);
              }
            });
            return {
              editValue,
              isEdit,
              tableBaseClass,
              cellNode,
              isAbortEditOnChange,
              listeners,
              componentProps,
              tableEditableCellRef,
              errorList,
              onEditChange
            };
          },
          render: function render() {
            var _this = this, _this$col$edit, _this$errorList, _this$errorList$, _this$errorList2, _this$errorList2$;
            if (!this.isEdit) {
              return vue.createVNode("div", {
                "class": this.tableBaseClass.cellEditable,
                "onClick": function onClick(e) {
                  _this.isEdit = true;
                  e.stopPropagation();
                }
              }, [this.cellNode, vue.createVNode(edit1, {
                "size": "12px"
              }, null)]);
            }
            var component = (_this$col$edit = this.col.edit) === null || _this$col$edit === void 0 ? void 0 : _this$col$edit.component;
            if (!component) {
              log.error("Table", "edit.component is required.");
              return null;
            }
            var errorMessage = (_this$errorList = this.errorList) === null || _this$errorList === void 0 ? void 0 : (_this$errorList$ = _this$errorList[0]) === null || _this$errorList$ === void 0 ? void 0 : _this$errorList$.message;
            return vue.createVNode("div", {
              "class": this.tableBaseClass.cellEditWrap
            }, [vue.createVNode(component, vue.mergeProps({
              "ref": "tableEditableCellRef",
              "status": errorMessage ? ((_this$errorList2 = this.errorList) === null || _this$errorList2 === void 0 ? void 0 : (_this$errorList2$ = _this$errorList2[0]) === null || _this$errorList2$ === void 0 ? void 0 : _this$errorList2$.type) || "error" : void 0,
              "tips": errorMessage
            }, this.componentProps, this.listeners, {
              "value": this.editValue,
              "onChange": this.onEditChange
            }), null)]);
          }
        });
        function ownKeys$c(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$c(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$c(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$c(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var OMIT_PROPS = ["hideSortTips", "dragSort", "defaultExpandedRowKeys", "columnController", "filterRow", "sortOnRowDraggable", "expandOnRowClick", "multipleSort", "expandIcon", "onChange", "onAsyncLoadingClick", "onColumnChange", "onColumnControllerVisibleChange", "onDataChange", "onDisplayColumnsChange", "onDragSort", "onExpandChange", "onFilterChange", "onSelectChange", "onSortChange"];
        var _PrimaryTable = vue.defineComponent({
          name: "TPrimaryTable",
          props: _objectSpread$c(_objectSpread$c({}, baseTableProps), primaryTableProps),
          setup: function setup(props2, context) {
            var renderTNode = useTNodeJSX();
            var _toRefs = vue.toRefs(props2), columns = _toRefs.columns, columnController = _toRefs.columnController;
            var primaryTableRef = vue.ref(null);
            var _useClassName = useClassName(), tableDraggableClasses = _useClassName.tableDraggableClasses, tableBaseClass = _useClassName.tableBaseClass;
            var _useColumnController = useColumnController(props2, context), tDisplayColumns = _useColumnController.tDisplayColumns, renderColumnController = _useColumnController.renderColumnController;
            var _useRowExpand = useRowExpand(props2, context), showExpandedRow = _useRowExpand.showExpandedRow, showExpandIconColumn = _useRowExpand.showExpandIconColumn, getExpandColumn = _useRowExpand.getExpandColumn, renderExpandedRow = _useRowExpand.renderExpandedRow, onInnerExpandRowClick = _useRowExpand.onInnerExpandRowClick;
            var _useSorter = useSorter(props2, context), renderSortIcon = _useSorter.renderSortIcon;
            var _useRowSelect = useRowSelect(props2), formatToRowSelectColumn = _useRowSelect.formatToRowSelectColumn, selectedRowClassNames = _useRowSelect.selectedRowClassNames;
            var _useFilter = useFilter(props2, context), hasEmptyCondition = _useFilter.hasEmptyCondition, isTableOverflowHidden = _useFilter.isTableOverflowHidden, renderFilterIcon = _useFilter.renderFilterIcon, renderFirstFilterRow = _useFilter.renderFirstFilterRow, setFilterPrimaryTableRef = _useFilter.setFilterPrimaryTableRef;
            var _useDragSort = useDragSort(props2), isRowHandlerDraggable = _useDragSort.isRowHandlerDraggable, isRowDraggable = _useDragSort.isRowDraggable, isColDraggable = _useDragSort.isColDraggable, setDragSortPrimaryTableRef = _useDragSort.setDragSortPrimaryTableRef;
            var _useTableHeader = useTableHeader(props2), renderTitleWidthIcon = _useTableHeader.renderTitleWidthIcon;
            var _useAsyncLoading = useAsyncLoading(props2), renderAsyncLoading = _useAsyncLoading.renderAsyncLoading;
            var primaryTableClasses = vue.computed(function() {
              var _ref;
              return _ref = {}, _defineProperty$3(_ref, tableDraggableClasses.colDraggable, isColDraggable.value), _defineProperty$3(_ref, tableDraggableClasses.rowHandlerDraggable, isRowHandlerDraggable.value), _defineProperty$3(_ref, tableDraggableClasses.rowDraggable, isRowDraggable.value), _defineProperty$3(_ref, tableBaseClass.overflowVisible, isTableOverflowHidden.value === false), _ref;
            });
            var tRowClassNames = vue.computed(function() {
              var tClassNames = [props2.rowClassName, selectedRowClassNames.value];
              return tClassNames.filter(function(v) {
                return v;
              });
            });
            var tRowAttributes = vue.computed(function() {
              var tAttributes = [props2.rowAttributes];
              if (isRowHandlerDraggable.value || isRowDraggable.value) {
                tAttributes.push(function(_ref2) {
                  var row = _ref2.row;
                  return {
                    "data-id": get_1(row, props2.rowKey || "id")
                  };
                });
              }
              return tAttributes.filter(function(v) {
                return v;
              });
            });
            vue.onMounted(function() {
              setFilterPrimaryTableRef(primaryTableRef.value);
              setDragSortPrimaryTableRef(primaryTableRef.value);
            });
            var getColumns = function getColumns2(columns2) {
              var arr = [];
              var _loop = function _loop2(i3, len2) {
                var _item$children, _tDisplayColumns$valu, _item$edit, _item$children2, _item$children3;
                var item = _objectSpread$c({}, columns2[i3]);
                var isDisplayColumn = ((_item$children = item.children) === null || _item$children === void 0 ? void 0 : _item$children.length) || ((_tDisplayColumns$valu = tDisplayColumns.value) === null || _tDisplayColumns$valu === void 0 ? void 0 : _tDisplayColumns$valu.includes(item.colKey));
                if (!isDisplayColumn && props2.columnController)
                  return "continue";
                item = formatToRowSelectColumn(item);
                if (item.sorter || item.filter) {
                  var titleContent = renderTitle(context.slots, item, i3);
                  var _item = item, ellipsisTitle = _item.ellipsisTitle;
                  item.title = function(h2, p) {
                    var _primaryTableRef$valu;
                    var sortIcon = item.sorter ? renderSortIcon(p) : null;
                    var filterIcon = item.filter ? renderFilterIcon(p) : null;
                    var attach = (_primaryTableRef$valu = primaryTableRef.value) === null || _primaryTableRef$valu === void 0 ? void 0 : _primaryTableRef$valu.tableContentRef;
                    return renderTitleWidthIcon([titleContent, sortIcon, filterIcon], p.col, p.colIndex, ellipsisTitle, attach);
                  };
                  item.ellipsisTitle = false;
                }
                if ((_item$edit = item.edit) !== null && _item$edit !== void 0 && _item$edit.component) {
                  var oldCell = item.cell;
                  item.cell = function(h2, p) {
                    return vue.createVNode(EditableCell, vue.mergeProps(p, {
                      "oldCell": oldCell
                    }), context.slots);
                  };
                }
                if ((_item$children2 = item.children) !== null && _item$children2 !== void 0 && _item$children2.length) {
                  item.children = getColumns2(item.children);
                }
                if (!item.children || (_item$children3 = item.children) !== null && _item$children3 !== void 0 && _item$children3.length) {
                  arr.push(item);
                }
              };
              for (var i2 = 0, len = columns2.length; i2 < len; i2++) {
                var _ret = _loop(i2);
                if (_ret === "continue")
                  continue;
              }
              return arr;
            };
            var tColumns = vue.computed(function() {
              var cols = getColumns(columns.value);
              if (showExpandIconColumn.value) {
                cols.unshift(getExpandColumn());
              }
              return cols;
            });
            var onInnerPageChange = function onInnerPageChange2(pageInfo, newData) {
              var _props$onPageChange, _props$onChange;
              (_props$onPageChange = props2.onPageChange) === null || _props$onPageChange === void 0 ? void 0 : _props$onPageChange.call(props2, pageInfo, newData);
              var changeParams = [{
                pagination: pageInfo
              }, {
                trigger: "pagination",
                currentData: newData
              }];
              (_props$onChange = props2.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call.apply(_props$onChange, [props2].concat(changeParams));
            };
            return function() {
              var formatNode = function formatNode2(api, renderInnerNode, condition, extra) {
                if (!condition)
                  return props2[api];
                var innerNode = renderInnerNode(vue.h);
                var propsNode = renderTNode(api);
                if (innerNode && !propsNode)
                  return function() {
                    return innerNode;
                  };
                if (propsNode && !innerNode)
                  return function() {
                    return propsNode;
                  };
                if (innerNode && propsNode) {
                  return function() {
                    return extra !== null && extra !== void 0 && extra.reverse ? vue.createVNode("div", null, [innerNode, propsNode]) : vue.createVNode("div", null, [propsNode, innerNode]);
                  };
                }
                return null;
              };
              var isColumnController = !!(columnController.value && Object.keys(columnController.value).length);
              var placement = isColumnController ? columnController.value.placement || "top-right" : "";
              var isBottomController = isColumnController && (placement === null || placement === void 0 ? void 0 : placement.indexOf("bottom")) !== -1;
              var topContent = formatNode("topContent", renderColumnController, isColumnController && !isBottomController);
              var bottomContent = formatNode("bottomContent", renderColumnController, isBottomController, {
                reverse: true
              });
              var firstFullRow = formatNode("firstFullRow", renderFirstFilterRow, !hasEmptyCondition.value);
              var lastFullRow = formatNode("lastFullRow", renderAsyncLoading, !!props2.asyncLoading);
              var baseTableProps2 = _objectSpread$c(_objectSpread$c({}, omit_1(props2, OMIT_PROPS)), {}, {
                rowClassName: tRowClassNames.value,
                rowAttributes: tRowAttributes.value,
                columns: tColumns.value,
                topContent,
                bottomContent,
                firstFullRow,
                lastFullRow,
                onPageChange: onInnerPageChange,
                renderExpandedRow: showExpandedRow.value ? renderExpandedRow : void 0
              });
              if (props2.expandOnRowClick) {
                baseTableProps2.onRowClick = onInnerExpandRowClick;
              }
              return vue.createVNode(_BaseTable, vue.mergeProps({
                "ref": primaryTableRef
              }, baseTableProps2, {
                "class": primaryTableClasses.value
              }), context.slots);
            };
          }
        });
        var enhancedTableProps = {
          beforeDragSort: {
            type: Function
          },
          tree: {
            type: Object
          },
          treeExpandAndFoldIcon: {
            type: Function
          },
          onAbnormalDragSort: Function,
          onTreeExpandChange: Function
        };
        function ownKeys$b(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$b(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$b(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$b(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL = {
          code: 1001,
          reason: "The same level of rows can not be swapped."
        };
        var TableTreeStore = /* @__PURE__ */ function() {
          function TableTreeStore2() {
            _classCallCheck(this, TableTreeStore2);
            _defineProperty$3(this, "treeDataMap", /* @__PURE__ */ new Map());
            _defineProperty$3(this, "expandAllRowIndex", void 0);
            this.treeDataMap = /* @__PURE__ */ new Map();
          }
          _createClass(TableTreeStore2, [{
            key: "initialTreeStore",
            value: function initialTreeStore(dataSource, columns, keys2) {
              var _this$treeDataMap;
              (_this$treeDataMap = this.treeDataMap) === null || _this$treeDataMap === void 0 ? void 0 : _this$treeDataMap.clear();
              this.initialTreeDataMap(this.treeDataMap, dataSource, columns[0], keys2);
            }
          }, {
            key: "toggleExpandData",
            value: function toggleExpandData(p, dataSource, keys2) {
              if (!p) {
                log.error("EnhancedTable", "the node you want to toggleExpand doest not exist in `data`");
                return dataSource;
              }
              var rowValue = get_1(p.row, keys2.rowKey);
              if (rowValue === void 0) {
                log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
                return [];
              }
              var r = this.treeDataMap.get(rowValue);
              r.rowIndex = p.rowIndex;
              r.expanded = !r.expanded;
              this.treeDataMap.set(rowValue, r);
              return this.updateExpandRow(r, dataSource, keys2);
            }
          }, {
            key: "updateExpandRow",
            value: function updateExpandRow(changeRow, dataSource, keys2) {
              var row = changeRow.row, rowIndex = changeRow.rowIndex, expanded = changeRow.expanded;
              var treeDataMap = this.treeDataMap;
              var childrenNodes = get_1(row, keys2.childrenKey);
              if (!row || !childrenNodes)
                return;
              if (expanded) {
                updateChildrenRowState(treeDataMap, changeRow, expanded, keys2);
                updateRowExpandLength(treeDataMap, row, childrenNodes.length, "expand", keys2);
                dataSource.splice.apply(dataSource, [rowIndex + 1, 0].concat(childrenNodes));
              } else {
                updateChildrenRowState(treeDataMap, changeRow, expanded, keys2);
                var len = changeRow.expandChildrenLength || childrenNodes.length;
                updateRowExpandLength(treeDataMap, row, -1 * len, "fold", keys2);
                dataSource.splice(rowIndex + 1, len);
              }
              updateRowIndex(treeDataMap, dataSource, {
                rowKey: keys2.rowKey,
                minRowIndex: rowIndex + 1
              });
              return dataSource;
            }
          }, {
            key: "getData",
            value: function getData(key) {
              return this.treeDataMap.get(key);
            }
          }, {
            key: "updateData",
            value: function updateData(rowValue, newRowData, dataSource, keys2) {
              var newRowValue = get_1(newRowData, keys2.rowKey);
              var rowState = this.treeDataMap.get(rowValue);
              if (!rowState || rowState.rowIndex === -1) {
                updateRowData(dataSource, rowValue, newRowData, {
                  rowKey: keys2.rowKey,
                  childrenKey: keys2.childrenKey
                });
                return;
              }
              var currentRowIndex = rowState.rowIndex;
              rowState.row = newRowData;
              rowState.id = newRowValue;
              if (rowState.parent) {
                var siblings = get_1(rowState.parent.row, keys2.childrenKey);
                var index2 = siblings.findIndex(function(item) {
                  return get_1(item, keys2.rowKey) === rowValue;
                });
                siblings[index2] = newRowData;
              }
              this.treeDataMap.set(newRowValue, rowState);
              if (rowValue !== newRowValue) {
                this.treeDataMap["delete"](rowValue);
              }
              return currentRowIndex;
            }
          }, {
            key: "remove",
            value: function remove2(key, dataSource, keys2) {
              var r = this.treeDataMap.get(key);
              if (r && r.rowIndex >= 0) {
                var removeNumber = (r.expandChildrenLength || 0) + 1;
                dataSource.splice(r.rowIndex, removeNumber);
                if (r.parent) {
                  var siblings = get_1(r.parent.row, keys2.childrenKey);
                  var index2 = siblings.findIndex(function(item) {
                    return get_1(item, keys2.rowKey) === key;
                  });
                  siblings.splice(index2, 1);
                  updateRowExpandLength(this.treeDataMap, r.parent.row, -1 * removeNumber, "delete", keys2);
                }
                this.treeDataMap["delete"](key);
                updateRowIndex(this.treeDataMap, dataSource, {
                  minRowIndex: r.rowIndex,
                  rowKey: keys2.rowKey,
                  type: "remove"
                });
              } else {
                console.warn("TDesign Table Warn: Do not remove this node, which is not appeared.");
              }
              return dataSource;
            }
          }, {
            key: "appendTo",
            value: function appendTo(rowValue, newData, dataSource, keys2) {
              var state = this.treeDataMap.get(rowValue);
              if (!this.validateDataExist(state, rowValue))
                return dataSource;
              var newRowValue = get_1(newData, keys2.rowKey);
              var mapState = this.treeDataMap.get(newRowValue);
              if (!this.validateDataDoubleExist(mapState, newRowValue))
                return dataSource;
              var children = get_1(state.row, keys2.childrenKey);
              var isShowNewNode = state.expanded || !(children !== null && children !== void 0 && children.length);
              var rowIndex = isShowNewNode ? state.rowIndex + (state.expandChildrenLength || 0) + 1 : -1;
              var newState = {
                id: newRowValue,
                row: newData,
                rowIndex,
                level: state.level + 1,
                expanded: false,
                expandChildrenLength: 0,
                disabled: false,
                path: _toConsumableArray(state.path),
                parent: state
              };
              newState.path = newState.path.concat(newState);
              if (children !== null && children !== void 0 && children.length) {
                state.row[keys2.childrenKey].push(newData);
              } else {
                state.row[keys2.childrenKey] = [newData];
                state.expanded = true;
              }
              this.treeDataMap.set(newRowValue, newState);
              if (isShowNewNode) {
                dataSource.splice(newState.rowIndex, 0, newData);
                updateRowExpandLength(this.treeDataMap, state.row, 1, "insert", {
                  rowKey: keys2.rowKey,
                  childrenKey: keys2.childrenKey
                });
                updateRowIndex(this.treeDataMap, dataSource, {
                  minRowIndex: newState.rowIndex,
                  rowKey: keys2.rowKey,
                  type: "add"
                });
              }
              return dataSource;
            }
          }, {
            key: "appendToRoot",
            value: function appendToRoot(newData, dataSource, keys2) {
              var rowValue = get_1(newData, keys2.rowKey);
              if (!rowValue) {
                log.error("Table", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
                return;
              }
              dataSource.push(newData);
              var state = {
                id: rowValue,
                row: newData,
                rowIndex: dataSource.length - 1,
                level: 0,
                expanded: false,
                expandChildrenLength: 0,
                disabled: false
              };
              state.path = [state];
              this.treeDataMap.set(rowValue, state);
              return dataSource;
            }
          }, {
            key: "insertAfter",
            value: function insertAfter(rowValue, newData, dataSource, keys2) {
              return this.insert(rowValue, newData, dataSource, keys2, "after");
            }
          }, {
            key: "insertBefore",
            value: function insertBefore(rowValue, newData, dataSource, keys2) {
              return this.insert(rowValue, newData, dataSource, keys2, "before");
            }
          }, {
            key: "insert",
            value: function insert(rowValue, newData, dataSource, keys2, type) {
              var state = this.treeDataMap.get(rowValue);
              if (!this.validateDataExist(state, rowValue))
                return dataSource;
              var newRowValue = get_1(newData, keys2.rowKey);
              var mapState = this.treeDataMap.get(newRowValue);
              if (!this.validateDataDoubleExist(mapState, newRowValue))
                return dataSource;
              var rowIndex = type === "after" ? state.rowIndex + 1 : state.rowIndex;
              var newState = {
                id: newRowValue,
                row: newData,
                rowIndex,
                level: state.level,
                expanded: false,
                expandChildrenLength: 0,
                disabled: false,
                path: state.path.slice(0, -1),
                parent: state.parent
              };
              newState.path = newState.path.concat(newState);
              var dataIndex = type === "after" ? state.rowIndex + (state.expandChildrenLength + 1) : state.rowIndex;
              dataSource.splice(dataIndex, 0, newData);
              var distance = type === "after" ? 1 : 0;
              if (state.parent) {
                var childrenIndex = state.parent.row[keys2.childrenKey].findIndex(function(t) {
                  return rowValue === get_1(t, keys2.rowKey);
                });
                state.parent.row[keys2.childrenKey].splice(childrenIndex + distance, 0, newData);
                updateRowExpandLength(this.treeDataMap, state.parent.row, 1, "insert", keys2);
              }
              this.treeDataMap.set(newRowValue, newState);
              updateRowIndex(this.treeDataMap, dataSource, {
                rowKey: keys2.rowKey,
                minRowIndex: state.rowIndex + 1,
                type: "add"
              });
              return dataSource;
            }
          }, {
            key: "swapData",
            value: function swapData(dataSource, params, keys2) {
              var startIndex = params.currentIndex;
              var endIndex = params.targetIndex;
              if (startIndex === endIndex)
                return {
                  dataSource,
                  result: true
                };
              var startRowValue = get_1(params.current, keys2.rowKey);
              var endRowValue = get_1(params.target, keys2.rowKey);
              var startState = this.treeDataMap.get(startRowValue);
              var endState = this.treeDataMap.get(endRowValue);
              if (startState.level !== endState.level) {
                return {
                  dataSource,
                  result: false,
                  code: TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL.code,
                  reason: TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL.reason
                };
              }
              var startLastIndex = startIndex + startState.expandChildrenLength + 1;
              var endLastIndex = endIndex + endState.expandChildrenLength + 1;
              var startRowList = dataSource.slice(startIndex, startLastIndex);
              var endRowList = dataSource.slice(endIndex, endLastIndex);
              if (startIndex > endIndex) {
                var middleRowList = dataSource.slice(endLastIndex, startIndex);
                var allSwapList = startRowList.concat(endRowList, middleRowList);
                dataSource.splice(endIndex, allSwapList.length);
                dataSource.splice.apply(dataSource, [endIndex, 0].concat(_toConsumableArray(allSwapList)));
                updateRowIndex(this.treeDataMap, dataSource, {
                  rowKey: keys2.rowKey,
                  minRowIndex: endIndex,
                  maxRowIndex: startLastIndex
                });
              } else {
                var _middleRowList = dataSource.slice(startLastIndex, endIndex);
                var _allSwapList = _middleRowList.concat(endRowList, startRowList);
                dataSource.splice(startIndex, _allSwapList.length);
                dataSource.splice.apply(dataSource, [startIndex, 0].concat(_toConsumableArray(_allSwapList)));
                updateRowIndex(this.treeDataMap, dataSource, {
                  rowKey: keys2.rowKey,
                  minRowIndex: startIndex,
                  maxRowIndex: endLastIndex
                });
              }
              if (startState.parent) {
                var children = startState.parent.row[keys2.childrenKey];
                var count = 0;
                for (var i2 = 0, len = children.length; i2 < len; i2++) {
                  if (get_1(children[i2], keys2.rowKey) === startRowValue) {
                    children[i2] = params.target;
                    count += 1;
                  }
                  if (get_1(children[i2], keys2.rowKey) === endRowValue) {
                    children[i2] = params.current;
                    count += 1;
                  }
                  if (count >= 2)
                    break;
                }
              }
              return {
                dataSource,
                result: true
              };
            }
          }, {
            key: "expandAll",
            value: function expandAll(dataSource, keys2) {
              var _this = this;
              this.expandAllRowIndex = 0;
              var expandLoop = function expandLoop2(dataSource2, keys22) {
                var newData = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
                var parentExpanded = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
                var parent2 = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
                for (var i2 = 0, len = dataSource2.length; i2 < len; i2++) {
                  var item = dataSource2[i2];
                  var rowValue = get_1(item, keys22.rowKey);
                  var state = _this.treeDataMap.get(rowValue);
                  var children = get_1(item, keys22.childrenKey);
                  var originalExpanded = state.expanded;
                  state.rowIndex = _this.expandAllRowIndex;
                  state.expanded = true;
                  state.expandChildrenLength = (children === null || children === void 0 ? void 0 : children.length) || 0;
                  _this.expandAllRowIndex += 1;
                  if (!parentExpanded) {
                    newData.push(item);
                  }
                  _this.treeDataMap.set(rowValue, state);
                  if (children !== null && children !== void 0 && children.length && !originalExpanded) {
                    var tmpParent = parent2;
                    while ((_tmpParent = tmpParent) !== null && _tmpParent !== void 0 && _tmpParent.row) {
                      var _tmpParent;
                      tmpParent.expandChildrenLength += children.length;
                      _this.treeDataMap.set(tmpParent.id, tmpParent);
                      tmpParent = tmpParent.parent;
                    }
                    expandLoop2(children, keys22, newData, originalExpanded, state);
                  }
                }
                return newData;
              };
              return expandLoop(dataSource, keys2);
            }
          }, {
            key: "foldAll",
            value: function foldAll(dataSource, keys2) {
              var newData = [];
              for (var i2 = 0, len = dataSource.length; i2 < len; i2++) {
                var item = dataSource[i2];
                var rowValue = get_1(item, keys2.rowKey);
                var state = this.treeDataMap.get(rowValue);
                state.rowIndex = state.level === 0 ? i2 : -1;
                state.expanded = false;
                state.expandChildrenLength = 0;
                if (state.level === 0) {
                  newData.push(item);
                }
                var children = get_1(item, keys2.childrenKey);
                if (children !== null && children !== void 0 && children.length) {
                  this.foldAll(children, keys2);
                }
              }
              return newData;
            }
          }, {
            key: "getTreeNode",
            value: function getTreeNode(dataSource, keys2) {
              var treeData = [];
              for (var i2 = 0, len = dataSource.length; i2 < len; i2++) {
                var item = dataSource[i2];
                var rowValue = get_1(item, keys2.rowKey);
                var state = this.treeDataMap.get(rowValue);
                if (state.level === 0) {
                  treeData.push(item);
                }
              }
              return treeData;
            }
          }, {
            key: "initialTreeDataMap",
            value: function initialTreeDataMap(treeDataMap, dataSource, column, keys2) {
              var level = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
              var parent2 = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
              for (var i2 = 0, len = dataSource.length; i2 < len; i2++) {
                var item = dataSource[i2];
                var rowValue = get_1(item, keys2.rowKey);
                if (rowValue === void 0) {
                  log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
                  return;
                }
                var children = get_1(item, keys2.childrenKey);
                var state = {
                  id: rowValue,
                  row: item,
                  rowIndex: level === 0 ? i2 : -1,
                  level,
                  expanded: false,
                  expandChildrenLength: 0,
                  disabled: isRowSelectedDisabled(column, item, i2),
                  parent: parent2
                };
                state.path = parent2 ? parent2.path.concat(state) : [state];
                treeDataMap.set(rowValue, state);
                if (children !== null && children !== void 0 && children.length) {
                  this.initialTreeDataMap(treeDataMap, children, column, keys2, level + 1, state);
                }
              }
            }
          }, {
            key: "updateDisabledState",
            value: function updateDisabledState(dataSource, column, keys2) {
              for (var i2 = 0, len = dataSource.length; i2 < len; i2++) {
                var item = dataSource[i2];
                var rowValue = get_1(item, keys2.rowKey);
                if (rowValue === void 0) {
                  log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
                  return;
                }
                var state = this.treeDataMap.get(rowValue);
                state.disabled = isRowSelectedDisabled(column, item, i2);
                this.treeDataMap.set(rowValue, state);
                var children = get_1(item, keys2.childrenKey);
                if (children !== null && children !== void 0 && children.length) {
                  this.updateDisabledState(children, column, keys2);
                }
              }
            }
          }, {
            key: "validateDataExist",
            value: function validateDataExist(state, rowValue) {
              if (!state) {
                console.warn("TDesign Table Warn: ".concat(rowValue, " does not exist."));
                return false;
              }
              return true;
            }
          }, {
            key: "validateDataDoubleExist",
            value: function validateDataDoubleExist(state, rowValue) {
              if (state) {
                console.warn("TDesign Table Warn: Duplicated Key. ".concat(rowValue, " already exists."));
                return false;
              }
              return true;
            }
          }]);
          return TableTreeStore2;
        }();
        function updateRowExpandLength(treeDataMap, row, distance, type, keys2) {
          var tmp = row;
          while (tmp) {
            var _state$parent;
            var state = treeDataMap.get(get_1(tmp, keys2.rowKey));
            var expandLen = (state.expandChildrenLength || 0) + distance;
            state.expandChildrenLength = Math.max(0, expandLen);
            tmp = state === null || state === void 0 ? void 0 : (_state$parent = state.parent) === null || _state$parent === void 0 ? void 0 : _state$parent.row;
          }
          if (type === "fold") {
            clearRowExpandLength(treeDataMap, row, keys2);
          }
        }
        function clearRowExpandLength(treeDataMap, row, keys2) {
          var children = get_1(row, keys2.childrenKey);
          if (children !== null && children !== void 0 && children.length) {
            children.forEach(function(item) {
              var state = treeDataMap.get(get_1(item, keys2.rowKey));
              if (!state)
                return;
              state.expandChildrenLength = 0;
              clearRowExpandLength(treeDataMap, state.row, keys2);
            });
          }
        }
        function updateChildrenRowState(treeDataMap, rowState, expanded, keys2) {
          var row = rowState.row, rowIndex = rowState.rowIndex;
          var childrenNodes = get_1(row, keys2.childrenKey);
          childrenNodes.forEach(function(item, kidRowIndex) {
            var rowValue = get_1(item, keys2.rowKey);
            var index2 = expanded ? rowIndex + 1 + kidRowIndex : -1;
            var curState = treeDataMap.get(rowValue);
            var newState = _objectSpread$b(_objectSpread$b({}, curState), {}, {
              row: item,
              rowIndex: index2,
              expanded: false,
              parent: rowState
            });
            treeDataMap.set(rowValue, newState);
            if (!expanded) {
              var children = get_1(item, keys2.childrenKey);
              if (children !== null && children !== void 0 && children.length) {
                updateChildrenRowState(treeDataMap, _objectSpread$b(_objectSpread$b({}, newState), {}, {
                  rowIndex: -1,
                  expanded: false
                }), expanded, keys2);
              }
            }
          });
        }
        function updateRowData(data, key, newData, keys2) {
          for (var i2 = 0, len = data.length; i2 < len; i2++) {
            var item = data[i2];
            if (get_1(item, keys2.rowKey) === key) {
              data[i2] = newData;
              return;
            }
            var children = get_1(item, keys2.childrenKey) || [];
            if (children !== null && children !== void 0 && children.length) {
              updateRowData(children, key, newData, keys2);
            }
          }
        }
        function updateRowIndex(treeDataMap, dataSource, extra) {
          var start2 = extra.minRowIndex || 0;
          var end2 = extra.maxRowIndex || dataSource.length;
          for (var rowIndex = start2; rowIndex < end2; rowIndex++) {
            var item = dataSource[rowIndex];
            var state = treeDataMap.get(get_1(item, extra.rowKey));
            if (!state) {
              log.warn("Table", "tree map went wrong");
            }
            state.rowIndex = rowIndex;
          }
        }
        function ownKeys$a(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$a(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$a(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$a(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function useTreeData(props2, context) {
          var _toRefs = vue.toRefs(props2), data = _toRefs.data, columns = _toRefs.columns;
          var _useConfig = useConfig("table"), t = _useConfig.t, global2 = _useConfig.global;
          var store = vue.ref(new TableTreeStore());
          var treeNodeCol = vue.ref();
          var dataSource = vue.ref([]);
          var _useClassName = useClassName(), tableTreeClasses = _useClassName.tableTreeClasses;
          var renderTNode = useTNodeDefault();
          var rowDataKeys = vue.computed(function() {
            var _props$tree;
            return {
              rowKey: props2.rowKey || "id",
              childrenKey: ((_props$tree = props2.tree) === null || _props$tree === void 0 ? void 0 : _props$tree.childrenKey) || "children"
            };
          });
          var checkedColumn = vue.computed(function() {
            return columns.value.find(function(col) {
              return col.colKey === "row-select";
            });
          });
          vue.watch(checkedColumn, function(column) {
            if (!store.value)
              return;
            store.value.updateDisabledState(dataSource.value, column, rowDataKeys.value);
          });
          var foldIcon = vue.computed(function() {
            var params = {
              type: "fold"
            };
            var defaultFoldIcon = t(global2.value.treeExpandAndFoldIcon, vue.h, params) || vue.createVNode(minusRectangle, null, null);
            return renderTNode("treeExpandAndFoldIcon", {
              defaultNode: defaultFoldIcon,
              params
            });
          });
          var expandIcon = vue.computed(function() {
            var params = {
              type: "expand"
            };
            var defaultExpandIcon = t(global2.value.treeExpandAndFoldIcon, vue.h, params) || vue.createVNode(addRectangle, null, null);
            return renderTNode("treeExpandAndFoldIcon", {
              defaultNode: defaultExpandIcon,
              params
            });
          });
          vue.watch([data], function(_ref) {
            var _props$tree2;
            var _ref2 = _slicedToArray(_ref, 1), data2 = _ref2[0];
            if (!data2)
              return;
            if (!props2.tree || !Object.keys(props2.tree).length) {
              dataSource.value = data2;
              return;
            }
            var newVal = cloneDeep_1(data2);
            store.value.initialTreeStore(newVal, props2.columns, rowDataKeys.value);
            if ((_props$tree2 = props2.tree) !== null && _props$tree2 !== void 0 && _props$tree2.defaultExpandAll) {
              newVal = store.value.expandAll(newVal, rowDataKeys.value);
            }
            dataSource.value = newVal;
          }, {
            immediate: true
          });
          vue.onUnmounted(function() {
            var _store$value$treeData;
            if (!props2.tree || !Object.keys(props2.tree).length)
              return;
            (_store$value$treeData = store.value.treeDataMap) === null || _store$value$treeData === void 0 ? void 0 : _store$value$treeData.clear();
            store.value = null;
          });
          vue.watch([columns], function() {
            treeNodeCol.value = getTreeNodeColumnCol();
          }, {
            immediate: true
          });
          function getTreeNodeStyle(level) {
            var _props$tree3;
            if (level === void 0)
              return;
            var indent = ((_props$tree3 = props2.tree) === null || _props$tree3 === void 0 ? void 0 : _props$tree3.indent) || 24;
            return {
              paddingLeft: "".concat(level * indent || 1, "px")
            };
          }
          function toggleExpandData(p, trigger) {
            var _store$value, _store$value$treeData2, _props$onTreeExpandCh;
            dataSource.value = _toConsumableArray(store.value.toggleExpandData(p, dataSource.value, rowDataKeys.value));
            var rowValue = get_1(p.row, rowDataKeys.value.rowKey);
            var rowState = (_store$value = store.value) === null || _store$value === void 0 ? void 0 : (_store$value$treeData2 = _store$value.treeDataMap) === null || _store$value$treeData2 === void 0 ? void 0 : _store$value$treeData2.get(rowValue);
            (_props$onTreeExpandCh = props2.onTreeExpandChange) === null || _props$onTreeExpandCh === void 0 ? void 0 : _props$onTreeExpandCh.call(props2, {
              row: p.row,
              rowIndex: p.rowIndex,
              rowState,
              trigger
            });
          }
          function getTreeNodeColumnCol() {
            var _props$tree4;
            var columns2 = props2.columns;
            var treeNodeColumnIndex = ((_props$tree4 = props2.tree) === null || _props$tree4 === void 0 ? void 0 : _props$tree4.treeNodeColumnIndex) || 0;
            while ((_columns2$treeNodeCol = columns2[treeNodeColumnIndex]) !== null && _columns2$treeNodeCol !== void 0 && _columns2$treeNodeCol.type || ((_columns2$treeNodeCol2 = columns2[treeNodeColumnIndex]) === null || _columns2$treeNodeCol2 === void 0 ? void 0 : _columns2$treeNodeCol2.colKey) === "__EXPAND_ROW_ICON_COLUMN__") {
              var _columns2$treeNodeCol, _columns2$treeNodeCol2;
              treeNodeColumnIndex += 1;
            }
            return columns2[treeNodeColumnIndex];
          }
          function formatTreeColumn(col) {
            if (!props2.tree || !Object.keys(props2.tree).length || col.colKey !== treeNodeCol.value.colKey)
              return col;
            var newCol = _objectSpread$a({}, treeNodeCol.value);
            newCol.cell = function(h2, p) {
              var cellInfo = renderCell(_objectSpread$a(_objectSpread$a({}, p), {}, {
                col: _objectSpread$a({}, treeNodeCol.value)
              }), context.slots);
              var currentState = store.value.treeDataMap.get(get_1(p.row, rowDataKeys.value.rowKey));
              var colStyle = getTreeNodeStyle(currentState === null || currentState === void 0 ? void 0 : currentState.level);
              var classes = _defineProperty$3({}, tableTreeClasses.inlineCol, !!col.ellipsis);
              var childrenNodes = get_1(p.row, rowDataKeys.value.childrenKey);
              if (childrenNodes && childrenNodes instanceof Array) {
                var _store$value$treeData3;
                var iconNode = (_store$value$treeData3 = store.value.treeDataMap.get(get_1(p.row, rowDataKeys.value.rowKey))) !== null && _store$value$treeData3 !== void 0 && _store$value$treeData3.expanded ? foldIcon.value : expandIcon.value;
                return vue.createVNode("div", {
                  "class": [tableTreeClasses.col, classes],
                  "style": colStyle
                }, [!!childrenNodes.length && vue.createVNode("span", {
                  "class": tableTreeClasses.icon,
                  "onClick": function onClick() {
                    return toggleExpandData(p, "expand-fold-icon");
                  }
                }, [iconNode]), cellInfo]);
              }
              return vue.createVNode("div", {
                "style": colStyle,
                "class": classes
              }, [cellInfo]);
            };
            if (newCol.ellipsis === true) {
              newCol.ellipsis = function(h2, p) {
                return renderCell(_objectSpread$a(_objectSpread$a({}, p), {}, {
                  col: _objectSpread$a({}, treeNodeCol.value)
                }), context.slots);
              };
            }
            return newCol;
          }
          function setData(key, newRowData) {
            var rowIndex = store.value.updateData(key, newRowData, dataSource.value, rowDataKeys.value);
            var newData = _toConsumableArray(dataSource.value);
            newData[rowIndex] = newRowData;
            dataSource.value = newData;
          }
          function getData(key) {
            return store.value.getData(key);
          }
          function remove2(key) {
            dataSource.value = _toConsumableArray(store.value.remove(key, dataSource.value, rowDataKeys.value));
          }
          function appendTo() {
            var key = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
            var newData = arguments.length > 1 ? arguments[1] : void 0;
            if (!key) {
              dataSource.value = store.value.appendToRoot(newData, dataSource.value, rowDataKeys.value);
              return;
            }
            dataSource.value = _toConsumableArray(store.value.appendTo(key, newData, dataSource.value, rowDataKeys.value));
          }
          function insertAfter(rowValue, newData) {
            dataSource.value = _toConsumableArray(store.value.insertAfter(rowValue, newData, dataSource.value, rowDataKeys.value));
          }
          function insertBefore(rowValue, newData) {
            dataSource.value = _toConsumableArray(store.value.insertBefore(rowValue, newData, dataSource.value, rowDataKeys.value));
          }
          function expandAll() {
            dataSource.value = _toConsumableArray(store.value.expandAll(dataSource.value, rowDataKeys.value));
          }
          function foldAll() {
            dataSource.value = _toConsumableArray(store.value.foldAll(dataSource.value, rowDataKeys.value));
          }
          function swapData(params) {
            var r = store.value.swapData(dataSource.value, params, rowDataKeys.value);
            if (r.result) {
              dataSource.value = _toConsumableArray(r.dataSource);
            } else {
              var _props$onAbnormalDrag;
              var params2 = {
                code: r.code,
                reason: r.reason
              };
              (_props$onAbnormalDrag = props2.onAbnormalDragSort) === null || _props$onAbnormalDrag === void 0 ? void 0 : _props$onAbnormalDrag.call(props2, params2);
            }
          }
          function getTreeNode() {
            return store.value.getTreeNode(dataSource.value, rowDataKeys.value);
          }
          return {
            store,
            rowDataKeys,
            dataSource,
            swapData,
            setData,
            getData,
            remove: remove2,
            appendTo,
            insertAfter,
            insertBefore,
            formatTreeColumn,
            toggleExpandData,
            expandAll,
            foldAll,
            getTreeNode
          };
        }
        function ownKeys$9(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$9(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$9(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$9(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var childrenMap = /* @__PURE__ */ new Map();
        function getChildrenData(treeDataMap, data, childrenKey, rowKey, r) {
          if (childrenMap.get(data))
            return childrenMap.get(data);
          var result = r || {
            allChildren: [],
            allChildrenKeys: []
          };
          var children = get_1(data, childrenKey);
          if (!children || !children.length)
            return result;
          var selectableChildren = children.filter(function(item) {
            var _treeDataMap$get;
            return !((_treeDataMap$get = treeDataMap.get(get_1(item, rowKey))) !== null && _treeDataMap$get !== void 0 && _treeDataMap$get.disabled);
          });
          result.allChildren = result.allChildren.concat(selectableChildren);
          var childrenKeys = selectableChildren.map(function(item) {
            return get_1(item, rowKey);
          });
          result.allChildrenKeys = result.allChildrenKeys.concat(childrenKeys);
          for (var i2 = 0, len = children.length; i2 < len; i2++) {
            var tItem = children[i2];
            var c = get_1(tItem, childrenKey);
            if (c !== null && c !== void 0 && c.length) {
              var nextLevelData = getChildrenData(treeDataMap, tItem, childrenKey, rowKey, result);
              result.allChildren = result.allChildren.concat(nextLevelData.allChildren);
              result.allChildrenKeys = result.allChildrenKeys.concat(nextLevelData.allChildrenKeys);
            }
          }
          return result;
        }
        function removeChildrenKeys(p, r) {
          var selectedRowKeys = p.selectedRowKeys, removeKeys = p.removeKeys;
          var result = r || {
            data: [],
            keys: []
          };
          for (var i2 = 0, len = selectedRowKeys.length; i2 < len; i2++) {
            var key = selectedRowKeys[i2];
            if (!removeKeys.includes(key)) {
              result.keys.push(key);
            }
          }
          return result;
        }
        function getRowDataByKeys(p) {
          var treeDataMap = p.treeDataMap, selectedRowKeys = p.selectedRowKeys;
          var result = [];
          for (var i2 = 0, len = selectedRowKeys.length; i2 < len; i2++) {
            var key = selectedRowKeys[i2];
            result.push(treeDataMap.get(key));
          }
          return result;
        }
        function useTreeSelect(props2, treeDataMap) {
          var _toRefs = vue.toRefs(props2), selectedRowKeys = _toRefs.selectedRowKeys;
          var _useDefaultValue = useDefaultValue(selectedRowKeys, props2.defaultSelectedRowKeys, props2.onSelectChange, "selectedRowKeys"), _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2);
          _useDefaultValue2[0];
          var setTSelectedRowKeys = _useDefaultValue2[1];
          var rowDataKeys = vue.computed(function() {
            var _props$tree;
            return {
              rowKey: props2.rowKey || "id",
              childrenKey: ((_props$tree = props2.tree) === null || _props$tree === void 0 ? void 0 : _props$tree.childrenKey) || "children"
            };
          });
          function onInnerSelectChange(rowKeys, extraData) {
            if (extraData.currentRowKey === "CHECK_ALL_BOX") {
              handleSelectAll(extraData);
            } else {
              handleSelect(rowKeys, extraData);
            }
          }
          function handleSelectAll(extraData) {
            var newRowKeys = [];
            var newRowData = [];
            if (extraData.type === "check") {
              var arr = _toConsumableArray(treeDataMap.value.values());
              for (var i2 = 0, len = arr.length; i2 < len; i2++) {
                var item = arr[i2];
                if (!item.disabled) {
                  newRowData.push(item.row);
                  newRowKeys.push(get_1(item.row, rowDataKeys.value.rowKey));
                }
              }
            }
            var newExtraData = _objectSpread$9(_objectSpread$9({}, extraData), {}, {
              selectedRowData: newRowData || []
            });
            setTSelectedRowKeys(newRowKeys, newExtraData);
          }
          function handleSelect(rowKeys, extraData) {
            var newRowKeys = _toConsumableArray(rowKeys);
            if ((props2 === null || props2 === void 0 ? void 0 : props2.tree.checkStrictly) === false) {
              if ((extraData === null || extraData === void 0 ? void 0 : extraData.type) === "check") {
                var result = getChildrenData(treeDataMap.value, extraData.currentRowData, rowDataKeys.value.childrenKey, rowDataKeys.value.rowKey);
                var allChildrenKeys = result.allChildrenKeys;
                childrenMap.set(extraData.currentRowData, result);
                newRowKeys = _toConsumableArray(new Set(newRowKeys.concat(allChildrenKeys)));
              } else if ((extraData === null || extraData === void 0 ? void 0 : extraData.type) === "uncheck") {
                var children = getChildrenData(treeDataMap.value, extraData.currentRowData, rowDataKeys.value.childrenKey, rowDataKeys.value.rowKey);
                var _result = removeChildrenKeys({
                  selectedRowKeys: rowKeys,
                  removeKeys: children.allChildrenKeys
                });
                newRowKeys = _result.keys;
              }
            }
            var newRowData = getRowDataByKeys({
              treeDataMap: treeDataMap.value,
              selectedRowKeys: newRowKeys
            });
            var newExtraData = _objectSpread$9(_objectSpread$9({}, extraData), {}, {
              selectedRowData: newRowData
            });
            setTSelectedRowKeys(newRowKeys, newExtraData);
          }
          return {
            onInnerSelectChange
          };
        }
        var _excluded = ["store", "dataSource", "formatTreeColumn", "swapData"];
        function ownKeys$8(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$8(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$8(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$8(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _EnhancedTable = vue.defineComponent({
          name: "TEnhancedTable",
          props: _objectSpread$8(_objectSpread$8(_objectSpread$8({}, baseTableProps), primaryTableProps), enhancedTableProps),
          setup: function setup(props2, context) {
            var _useTreeData = useTreeData(props2, context), store = _useTreeData.store, dataSource = _useTreeData.dataSource, formatTreeColumn = _useTreeData.formatTreeColumn, swapData = _useTreeData.swapData, treeInstanceFunctions = _objectWithoutProperties$1(_useTreeData, _excluded);
            var treeDataMap = vue.ref(store.value.treeDataMap);
            var _useTreeSelect = useTreeSelect(props2, treeDataMap), onInnerSelectChange = _useTreeSelect.onInnerSelectChange;
            var getColumns = function getColumns2(columns) {
              var arr = [];
              for (var i2 = 0, len = columns.length; i2 < len; i2++) {
                var _item$children, _item$children2;
                var item = _objectSpread$8({}, columns[i2]);
                item = formatTreeColumn(item);
                if ((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
                  item.children = getColumns2(item.children);
                }
                if (!item.children || (_item$children2 = item.children) !== null && _item$children2 !== void 0 && _item$children2.length) {
                  arr.push(item);
                }
              }
              return arr;
            };
            var tColumns = vue.computed(function() {
              var isTreeData = !props2.tree || !Object.keys(props2.tree).length;
              return isTreeData ? props2.columns : getColumns(props2.columns);
            });
            var onDragSortChange = function onDragSortChange2(params) {
              var _props$onDragSort;
              if (props2.beforeDragSort && !props2.beforeDragSort(params))
                return;
              swapData({
                current: params.current,
                target: params.target,
                currentIndex: params.currentIndex,
                targetIndex: params.targetIndex
              });
              (_props$onDragSort = props2.onDragSort) === null || _props$onDragSort === void 0 ? void 0 : _props$onDragSort.call(props2, params);
            };
            return _objectSpread$8({
              store,
              dataSource,
              tColumns,
              onDragSortChange,
              onInnerSelectChange
            }, treeInstanceFunctions);
          },
          render: function render() {
            var props2 = _objectSpread$8(_objectSpread$8({}, this.$props), {}, {
              data: this.dataSource,
              columns: this.tColumns,
              disableDataPage: Boolean(this.tree && Object.keys(this.tree).length),
              onSelectChange: this.onInnerSelectChange,
              onDragSort: this.onDragSortChange
            });
            return vue.createVNode(_PrimaryTable, vue.mergeProps(props2, this.$attrs), this.$slots);
          }
        });
        var BaseTable = withInstall(_BaseTable);
        var PrimaryTable = withInstall(_PrimaryTable);
        var EnhancedTable = withInstall(_EnhancedTable);
        var table = cloneDeep_1(_PrimaryTable);
        var Table = withInstall(table, "TTable");
        var props$6 = {
          borderless: Boolean,
          defaultExpandAll: Boolean,
          disabled: Boolean,
          expandIcon: {
            type: [Boolean, Function],
            "default": true
          },
          expandIconPlacement: {
            type: String,
            "default": "left",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["left", "right"].includes(val);
            }
          },
          expandMutex: Boolean,
          expandOnRowClick: {
            type: Boolean,
            "default": true
          },
          value: {
            type: Array,
            "default": void 0
          },
          modelValue: {
            type: Array,
            "default": void 0
          },
          defaultValue: {
            type: Array
          },
          onChange: Function
        };
        var _Collapse = vue.defineComponent({
          name: "TCollapse",
          props: props$6,
          setup: function setup(props2, context) {
            var componentName = usePrefixClass("collapse");
            var borderlessClass = usePrefixClass("-border-less");
            var renderTNodeJSX2 = useTNodeJSX();
            var _toRefs = vue.toRefs(props2), value = _toRefs.value, expandMutex = _toRefs.expandMutex, borderless = _toRefs.borderless, modelValue = _toRefs.modelValue;
            var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange), _useVModel2 = _slicedToArray(_useVModel, 2), collapseValue = _useVModel2[0], setCollapseValue = _useVModel2[1];
            var updateCollapseValue = function updateCollapseValue2(value2) {
              var newValue = [].concat(collapseValue.value || []);
              var index2 = newValue.indexOf(value2);
              if (index2 >= 0) {
                newValue.splice(index2, 1);
              } else if (expandMutex.value) {
                newValue = [value2];
              } else {
                newValue.push(value2);
              }
              setCollapseValue(newValue);
            };
            var classes = vue.computed(function() {
              return [componentName.value, _defineProperty$3({}, borderlessClass.value, !!borderless.value)];
            });
            var getUniqId = function() {
              var index2 = 0;
              return function() {
                return index2++;
              };
            }();
            vue.provide("collapseValue", collapseValue);
            vue.provide("updateCollapseValue", updateCollapseValue);
            vue.provide("collapseProps", vue.toRefs(props2));
            vue.provide("getUniqId", getUniqId);
            return function() {
              var nodes = renderTNodeJSX2("default");
              return vue.createVNode("div", {
                "class": classes.value
              }, [nodes]);
            };
          }
        });
        var props$5 = {
          content: {
            type: [String, Function]
          },
          "default": {
            type: [String, Function]
          },
          destroyOnCollapse: Boolean,
          disabled: {
            type: Boolean,
            "default": void 0
          },
          expandIcon: {
            type: [Boolean, Function],
            "default": void 0
          },
          header: {
            type: [String, Function]
          },
          headerRightContent: {
            type: [String, Function]
          },
          value: {
            type: [String, Number]
          }
        };
        function useCollapseAnimation() {
          var beforeEnter = function beforeEnter2(el) {
            el.dataset.oldPaddingTop = el.style.paddingTop;
            el.dataset.oldPaddingBottom = el.style.paddingBottom;
            el.style.height = "0";
            el.style.paddingTop = "0";
            el.style.paddingBottom = "0";
          };
          var enter = function enter2(el) {
            el.dataset.oldOverflow = el.style.overflow;
            el.style.height = "".concat(el.scrollHeight, "px");
            el.style.paddingTop = el.dataset.oldPaddingTop;
            el.style.paddingBottom = el.dataset.oldPaddingBottom;
            el.style.overflow = "hidden";
          };
          var afterEnter = function afterEnter2(el) {
            el.style.height = "";
            el.style.overflow = el.dataset.oldOverflow;
          };
          var beforeLeave = function beforeLeave2(el) {
            el.dataset.oldPaddingTop = el.style.paddingTop;
            el.dataset.oldPaddingBottom = el.style.paddingBottom;
            el.dataset.oldOverflow = el.style.overflow;
            el.style.height = "".concat(el.scrollHeight, "px");
            el.style.overflow = "hidden";
          };
          var leave = function leave2(el) {
            if (el.scrollHeight !== 0) {
              el.style.height = "0";
              el.style.paddingTop = "0";
              el.style.paddingBottom = "0";
            }
          };
          var afterLeave = function afterLeave2(el) {
            el.style.height = "";
            el.style.overflow = el.dataset.oldOverflow;
            el.style.paddingTop = el.dataset.oldPaddingTop;
            el.style.paddingBottom = el.dataset.oldPaddingBottom;
          };
          return {
            beforeEnter,
            enter,
            afterEnter,
            beforeLeave,
            leave,
            afterLeave
          };
        }
        function _isSlot$1(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var _CollapsePanel = vue.defineComponent({
          name: "TCollapsePanel",
          props: props$5,
          setup: function setup(props2, context) {
            var renderTNodeJSX2 = useTNodeJSX();
            var componentName = usePrefixClass("collapse-panel");
            var disableClass = usePrefixClass("is-disabled");
            var clickableClass = usePrefixClass("is-clickable");
            var transitionClass = usePrefixClass("slide-down");
            var _toRefs = vue.toRefs(props2), value = _toRefs.value, disabled = _toRefs.disabled, destroyOnCollapse = _toRefs.destroyOnCollapse, expandIcon = _toRefs.expandIcon;
            var collapseValue = vue.inject("collapseValue");
            var updateCollapseValue = vue.inject("updateCollapseValue");
            var getUniqId = vue.inject("getUniqId", function() {
              return void 0;
            }, false);
            var _inject = vue.inject("collapseProps"), defaultExpandAll = _inject.defaultExpandAll, disableAll = _inject.disabled, expandIconPlacement = _inject.expandIconPlacement, expandOnRowClick = _inject.expandOnRowClick, expandIconAll = _inject.expandIcon;
            var innerValue = value.value || getUniqId();
            var showExpandIcon = vue.computed(function() {
              return expandIcon.value === void 0 ? expandIconAll.value : expandIcon.value;
            });
            if (defaultExpandAll.value) {
              updateCollapseValue(innerValue);
            }
            var _useCollapseAnimation = useCollapseAnimation(), beforeEnter = _useCollapseAnimation.beforeEnter, enter = _useCollapseAnimation.enter, afterEnter = _useCollapseAnimation.afterEnter, beforeLeave = _useCollapseAnimation.beforeLeave, leave = _useCollapseAnimation.leave, afterLeave = _useCollapseAnimation.afterLeave;
            var headRef = vue.ref();
            var isDisabled = vue.computed(function() {
              return disabled.value || disableAll.value;
            });
            var isActive = vue.computed(function() {
              return collapseValue.value instanceof Array ? collapseValue.value.includes(innerValue) : collapseValue.value === innerValue;
            });
            var classes = vue.computed(function() {
              return [componentName.value, _defineProperty$3({}, disableClass.value, isDisabled.value)];
            });
            var handleClick = function handleClick2(e) {
              var canExpand = expandOnRowClick.value && e.target === headRef.value || e.target.getAttribute("name") === "arrow";
              if (canExpand && !isDisabled.value) {
                updateCollapseValue(innerValue);
              }
            };
            var renderIcon = function renderIcon2(direction) {
              return vue.createVNode(FakeArrow, {
                "name": "arrow",
                "isActive": isActive.value,
                "overlayClassName": "".concat(componentName.value, "__icon ").concat(componentName.value, "__icon--").concat(direction)
              }, null);
            };
            var renderBlank = function renderBlank2() {
              return vue.createVNode("div", {
                "class": "".concat(componentName.value, "__header--blank")
              }, null);
            };
            var renderHeader = function renderHeader2() {
              var cls = ["".concat(componentName.value, "__header"), _defineProperty$3({}, clickableClass.value, expandOnRowClick.value && !isDisabled.value)];
              return vue.createVNode("div", {
                "ref": headRef,
                "class": cls,
                "onClick": handleClick
              }, [showExpandIcon.value && expandIconPlacement.value === "left" ? renderIcon(expandIconPlacement.value) : null, renderTNodeJSX2("header"), renderBlank(), renderTNodeJSX2("headerRightContent"), showExpandIcon.value && expandIconPlacement.value === "right" ? renderIcon(expandIconPlacement.value) : null]);
            };
            var renderBodyByNormal = function renderBodyByNormal2() {
              return vue.withDirectives(vue.createVNode("div", {
                "class": "".concat(componentName.value, "__body")
              }, [vue.createVNode("div", {
                "class": "".concat(componentName.value, "__content")
              }, [renderTNodeJSX2("default")])]), [[vue.vShow, isActive.value]]);
            };
            var renderBodyDestroyOnCollapse = function renderBodyDestroyOnCollapse2() {
              return isActive.value ? vue.createVNode("div", {
                "class": "".concat(componentName.value, "__body")
              }, [vue.createVNode("div", {
                "class": "".concat(componentName.value, "__content")
              }, [renderTNodeJSX2("default")])]) : null;
            };
            var renderBody = function renderBody2() {
              return destroyOnCollapse.value ? renderBodyDestroyOnCollapse() : renderBodyByNormal();
            };
            return function() {
              var _slot;
              return vue.createVNode("div", {
                "class": classes.value
              }, [vue.createVNode("div", {
                "class": "".concat(componentName.value, "__wrapper")
              }, [renderHeader(), vue.createVNode(vue.Transition, {
                "name": transitionClass.value,
                "onBeforeEnter": beforeEnter,
                "onEnter": enter,
                "onAfterEnter": afterEnter,
                "onBeforeLeave": beforeLeave,
                "onLeave": leave,
                "onAfterLeave": afterLeave
              }, _isSlot$1(_slot = renderBody()) ? _slot : {
                "default": function _default() {
                  return [_slot];
                }
              })])]);
            };
          }
        });
        var Collapse = withInstall(_Collapse);
        var CollapsePanel = withInstall(_CollapsePanel);
        var props$4 = {
          close: {
            type: [String, Boolean, Function],
            "default": false
          },
          "default": {
            type: [String, Function]
          },
          icon: {
            type: Function
          },
          maxLine: {
            type: Number,
            "default": 0
          },
          message: {
            type: [String, Function]
          },
          operation: {
            type: Function
          },
          theme: {
            type: String,
            "default": "info",
            validator: function validator(val) {
              return ["success", "info", "warning", "error"].includes(val);
            }
          },
          title: {
            type: [String, Function]
          },
          onClose: Function,
          onClosed: Function
        };
        var _Alert = vue.defineComponent({
          name: "TAlert",
          props: props$4,
          setup: function setup(props2) {
            var _useConfig = useConfig("alert"), global2 = _useConfig.global, classPrefix2 = _useConfig.classPrefix;
            var COMPONENT_NAME2 = usePrefixClass("alert");
            var renderTNodeJSX2 = useTNodeJSX();
            var renderIconTNode = useIcon();
            var ele = vue.ref(null);
            var description = vue.ref(null);
            var descHeight = vue.ref(0);
            var visible = vue.ref(true);
            var collapsed = vue.ref(true);
            var renderIcon = function renderIcon2() {
              var Component = {
                info: infoCircleFilled,
                success: checkCircleFilled,
                warning: errorCircleFilled,
                error: errorCircleFilled,
                question: helpCircleFilled
              };
              var iconContent = renderIconTNode("icon", Component);
              return iconContent ? vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__icon")
              }, [iconContent]) : null;
            };
            var renderClose = function renderClose2() {
              var close$1 = props2.close;
              var closeContent = null;
              if (close$1 === true || close$1 === "") {
                closeContent = vue.createVNode(close, null, null);
              } else if (typeof close$1 === "string") {
                closeContent = close$1;
              } else {
                closeContent = renderIconTNode("close");
              }
              return closeContent ? vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__close"),
                "onClick": handleClose
              }, [closeContent]) : null;
            };
            var renderTitle2 = function renderTitle3(context) {
              var titleContent = renderTNodeJSX2("title");
              return titleContent ? vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__title")
              }, [" ", titleContent]) : null;
            };
            var renderMessage = function renderMessage2(context) {
              var operationContent = renderTNodeJSX2("operation");
              return vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__message")
              }, [renderDescription(context), operationContent ? vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__operation")
              }, [operationContent]) : null]);
            };
            var renderDescription = function renderDescription2(context) {
              var _description$value, _description$value$ch;
              var messageContent;
              messageContent = renderTNodeJSX2("default");
              if (!messageContent) {
                messageContent = renderTNodeJSX2("message");
              }
              var contentLength = Array.isArray(messageContent) ? messageContent.length : 1;
              var hasCollapse = props2.maxLine > 0 && props2.maxLine < contentLength;
              var height = (_description$value = description.value) === null || _description$value === void 0 ? void 0 : (_description$value$ch = _description$value.children[0]) === null || _description$value$ch === void 0 ? void 0 : _description$value$ch.offsetHeight;
              if (hasCollapse && collapsed.value) {
                messageContent = messageContent.slice(0, props2.maxLine);
                height && (description.value.style.height = "".concat(descHeight.value, "px"));
              } else if (hasCollapse) {
                height && (description.value.style.height = "".concat(height * (contentLength - props2.maxLine) + descHeight.value, "px"));
              }
              return vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__description"),
                "ref": "description"
              }, [hasCollapse ? messageContent.map(function(content) {
                return vue.createVNode("div", null, [content]);
              }) : messageContent, hasCollapse ? vue.createVNode("div", {
                "class": "t-alert__collapse",
                "onClick": function onClick() {
                  collapsed.value = !collapsed.value;
                }
              }, [collapsed.value ? global2.value.expandText : global2.value.collapseText]) : null]);
            };
            var renderContent2 = function renderContent3(context) {
              return vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__content")
              }, [renderTitle2(context), renderMessage(context)]);
            };
            var handleClose = function handleClose2(e) {
              var _props2$onClose;
              (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 ? void 0 : _props2$onClose.call(props2, {
                e
              });
              addClass(ele.value, "".concat(COMPONENT_NAME2.value, "--closing"));
            };
            var handleCloseEnd = function handleCloseEnd2(e) {
              if (e.propertyName === "opacity") {
                var _props2$onClosed;
                visible.value = false;
                (_props2$onClosed = props2.onClosed) === null || _props2$onClosed === void 0 ? void 0 : _props2$onClosed.call(props2, {
                  e
                });
              }
            };
            vue.onMounted(function() {
              on$1(ele.value, "transitionend", handleCloseEnd);
              descHeight.value = description.value.offsetHeight;
            });
            vue.onBeforeUnmount(function() {
              off$1(ele.value, "transitionend", handleCloseEnd);
            });
            return {
              COMPONENT_NAME: COMPONENT_NAME2,
              classPrefix: classPrefix2,
              ele,
              description,
              visible,
              collapsed,
              renderIcon,
              renderTitle: renderTitle2,
              renderMessage,
              renderDescription,
              renderContent: renderContent2,
              renderClose,
              handleClose,
              handleCloseEnd
            };
          },
          render: function render() {
            var theme = this.theme, visible = this.visible, $attrs = this.$attrs, renderIcon = this.renderIcon, renderContent2 = this.renderContent, renderClose = this.renderClose, classPrefix2 = this.classPrefix;
            var CLASS = ["".concat(this.COMPONENT_NAME), "".concat(this.COMPONENT_NAME, "--").concat(theme), _defineProperty$3({}, "".concat(classPrefix2, "-is-hidden"), !visible)];
            return vue.createVNode("div", vue.mergeProps({
              "class": CLASS
            }, $attrs, {
              "ref": "ele"
            }), [renderIcon(), renderContent2(this), renderClose()]);
          }
        });
        var Alert = withInstall(_Alert);
        var Dialog = withInstall(_Dialog);
        var props$3 = {
          attach: {
            type: [String, Function],
            "default": ""
          },
          body: {
            type: [String, Function]
          },
          cancelBtn: {
            type: [String, Object, Function],
            "default": ""
          },
          closeBtn: {
            type: [String, Boolean, Function],
            "default": void 0
          },
          closeOnEscKeydown: {
            type: Boolean,
            "default": true
          },
          closeOnOverlayClick: {
            type: Boolean,
            "default": true
          },
          confirmBtn: {
            type: [String, Object, Function],
            "default": ""
          },
          "default": {
            type: [String, Function]
          },
          destroyOnClose: Boolean,
          footer: {
            type: [Boolean, Function],
            "default": true
          },
          header: {
            type: [String, Boolean, Function],
            "default": void 0
          },
          mode: {
            type: String,
            "default": "overlay",
            validator: function validator(val) {
              return ["overlay", "push"].includes(val);
            }
          },
          placement: {
            type: String,
            "default": "right",
            validator: function validator(val) {
              return ["left", "right", "top", "bottom"].includes(val);
            }
          },
          preventScrollThrough: {
            type: Boolean,
            "default": true
          },
          showInAttachedElement: Boolean,
          showOverlay: {
            type: Boolean,
            "default": true
          },
          size: {
            type: String,
            "default": "small"
          },
          sizeDraggable: Boolean,
          visible: Boolean,
          zIndex: {
            type: Number
          },
          onCancel: Function,
          onClose: Function,
          onCloseBtnClick: Function,
          onConfirm: Function,
          onEscKeydown: Function,
          onOverlayClick: Function
        };
        var _Drawer = vue.defineComponent({
          name: "TDrawer",
          directives: {
            TransferDom
          },
          props: props$3,
          emits: ["update:visible"],
          setup: function setup(props2, context) {
            var _useConfig = useConfig("drawer"), global2 = _useConfig.global;
            var renderTNodeJSX2 = useTNodeJSX();
            var renderContent2 = useContent();
            var COMPONENT_NAME2 = usePrefixClass("drawer");
            var LOCK_CLASS = usePrefixClass("drawer--lock");
            var confirmBtnAction = function confirmBtnAction2(e) {
              var _props2$onConfirm;
              (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 ? void 0 : _props2$onConfirm.call(props2, {
                e
              });
            };
            var cancelBtnAction = function cancelBtnAction2(e) {
              var _props2$onCancel;
              (_props2$onCancel = props2.onCancel) === null || _props2$onCancel === void 0 ? void 0 : _props2$onCancel.call(props2, {
                e
              });
              closeDrawer({
                trigger: "cancel",
                e
              });
            };
            var _useAction = useAction({
              confirmBtnAction,
              cancelBtnAction
            }), getConfirmBtn = _useAction.getConfirmBtn, getCancelBtn = _useAction.getCancelBtn;
            var drawerEle = vue.ref(null);
            var drawerClasses = vue.computed(function() {
              return ["t-drawer", "t-drawer--".concat(props2.placement), {
                "t-drawer--open": props2.visible,
                "t-drawer--attach": props2.showInAttachedElement,
                "t-drawer--without-mask": !props2.showOverlay
              }];
            });
            var sizeValue = vue.computed(function() {
              var defaultSize = isNaN(Number(props2.size)) ? props2.size : "".concat(props2.size, "px");
              return {
                small: "300px",
                medium: "500px",
                large: "760px"
              }[props2.size] || defaultSize;
            });
            var wrapperStyles = vue.computed(function() {
              return {
                transform: props2.visible ? "translateX(0)" : void 0,
                width: ["left", "right"].includes(props2.placement) ? sizeValue.value : "",
                height: ["top", "bottom"].includes(props2.placement) ? sizeValue.value : ""
              };
            });
            var wrapperClasses = vue.computed(function() {
              return ["t-drawer__content-wrapper", "t-drawer__content-wrapper--".concat(props2.placement)];
            });
            var parentNode = vue.computed(function() {
              return drawerEle.value && drawerEle.value.parentNode;
            });
            var modeAndPlacement = vue.computed(function() {
              return [props2.mode, props2.placement].join();
            });
            var footerStyle = vue.computed(function() {
              return {
                display: "flex",
                justifyContent: props2.placement === "right" ? "flex-start" : "flex-end"
              };
            });
            var handlePushMode = function handlePushMode2() {
              if (props2.mode !== "push")
                return;
              vue.nextTick(function() {
                if (!parentNode.value)
                  return;
                parentNode.value.style.cssText = "transition: margin 300ms cubic-bezier(0.7, 0.3, 0.1, 1) 0s;";
              });
            };
            var updatePushMode = function updatePushMode2() {
              if (!parentNode.value)
                return;
              if (props2.mode !== "push" || !parentNode.value)
                return;
              var marginStr = {
                left: "margin: 0 0 0 ".concat(sizeValue.value),
                right: "margin: 0 0 0 -".concat(sizeValue.value),
                top: "margin: ".concat(sizeValue.value, " 0 0 0"),
                bottom: "margin: -".concat(sizeValue.value, " 0 0 0")
              }[props2.placement];
              if (props2.visible) {
                parentNode.value.style.cssText += marginStr;
              } else {
                parentNode.value.style.cssText = parentNode.value.style.cssText.replace(/margin:.+;/, "");
              }
            };
            var getDefaultBtn = function getDefaultBtn2(btnType, btnApi) {
              var isCancel = btnType === "cancel";
              var clickAction = isCancel ? cancelBtnAction : confirmBtnAction;
              var theme = isCancel ? "default" : "primary";
              var isApiObject = _typeof$2(btnApi) === "object";
              return vue.createVNode(Button, {
                "theme": theme,
                "onClick": clickAction,
                "props": isApiObject ? btnApi : {},
                "class": "".concat(COMPONENT_NAME2.value, "-").concat(btnType)
              }, {
                "default": function _default() {
                  return [btnApi && _typeof$2(btnApi) === "object" ? btnApi.content : btnApi];
                }
              });
            };
            var isUseDefault = function isUseDefault2(btnApi) {
              var baseTypes = ["string", "object"];
              return Boolean(btnApi && baseTypes.includes(_typeof$2(btnApi)));
            };
            var getDefaultFooter = function getDefaultFooter2() {
              var confirmBtn = getConfirmBtn({
                confirmBtn: props2.confirmBtn,
                globalConfirm: global2.value.confirm,
                className: "".concat(COMPONENT_NAME2.value, "__confirm")
              });
              var cancelBtn = getCancelBtn({
                cancelBtn: props2.cancelBtn,
                globalCancel: global2.value.cancel,
                className: "".concat(COMPONENT_NAME2.value, "__cancel")
              });
              return vue.createVNode("div", {
                "style": footerStyle.value
              }, [props2.placement === "right" ? confirmBtn : null, cancelBtn, props2.placement !== "right" ? confirmBtn : null]);
            };
            vue.watch(modeAndPlacement, function() {
              handlePushMode();
            }, {
              immediate: true
            });
            vue.watch(function() {
              return props2.visible;
            }, function(value) {
              if (isServer$1)
                return;
              if (value && !props2.showInAttachedElement) {
                props2.preventScrollThrough && addClass(document.body, LOCK_CLASS.value);
              } else {
                props2.preventScrollThrough && removeClass(document.body, LOCK_CLASS.value);
              }
            }, {
              immediate: true
            });
            var handleCloseBtnClick = function handleCloseBtnClick2(e) {
              var _props2$onCloseBtnCli;
              (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 ? void 0 : _props2$onCloseBtnCli.call(props2, {
                e
              });
              closeDrawer({
                trigger: "close-btn",
                e
              });
            };
            var handleWrapperClick = function handleWrapperClick2(e) {
              var _props2$onOverlayClic;
              (_props2$onOverlayClic = props2.onOverlayClick) === null || _props2$onOverlayClic === void 0 ? void 0 : _props2$onOverlayClic.call(props2, {
                e
              });
              if (props2.closeOnOverlayClick) {
                closeDrawer({
                  trigger: "overlay",
                  e
                });
              }
            };
            var onKeyDown = function onKeyDown2(e) {
              if (props2.closeOnEscKeydown && e.key === "Escape") {
                var _props2$onEscKeydown;
                (_props2$onEscKeydown = props2.onEscKeydown) === null || _props2$onEscKeydown === void 0 ? void 0 : _props2$onEscKeydown.call(props2, {
                  e
                });
                closeDrawer({
                  trigger: "esc",
                  e
                });
              }
            };
            var closeDrawer = function closeDrawer2(params) {
              var _props2$onClose;
              (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 ? void 0 : _props2$onClose.call(props2, params);
              context.emit("update:visible", false);
            };
            vue.onUpdated(function() {
              updatePushMode();
            });
            return {
              COMPONENT_NAME: COMPONENT_NAME2,
              renderTNodeJSX: renderTNodeJSX2,
              renderContent: renderContent2,
              drawerEle,
              drawerClasses,
              wrapperStyles,
              modeAndPlacement,
              wrapperClasses,
              handlePushMode,
              updatePushMode,
              getDefaultBtn,
              isUseDefault,
              getDefaultFooter,
              handleCloseBtnClick,
              handleWrapperClick,
              onKeyDown,
              confirmBtnAction,
              cancelBtnAction,
              closeDrawer
            };
          },
          render: function render() {
            var COMPONENT_NAME2 = this.COMPONENT_NAME, renderContent2 = this.renderContent, renderTNodeJSX2 = this.renderTNodeJSX;
            if (this.destroyOnClose && !this.visible)
              return;
            var defaultCloseBtn = vue.createVNode(close, {
              "class": "t-submenu-icon"
            }, null);
            var body = renderContent2("body", "default");
            var headerContent = renderTNodeJSX2("header");
            var defaultFooter = this.getDefaultFooter();
            return vue.withDirectives(vue.createVNode("div", vue.mergeProps({
              "ref": "drawerEle",
              "class": this.drawerClasses,
              "style": {
                zIndex: this.zIndex
              },
              "onKeydown": this.onKeyDown
            }, this.$attrs, {
              "tabindex": 0
            }), [this.showOverlay && vue.createVNode("div", {
              "class": "".concat(COMPONENT_NAME2, "__mask"),
              "onClick": this.handleWrapperClick
            }, null), vue.createVNode("div", {
              "class": this.wrapperClasses,
              "style": this.wrapperStyles
            }, [headerContent && vue.createVNode("div", {
              "class": "".concat(COMPONENT_NAME2, "__header")
            }, [headerContent]), this.closeBtn && vue.createVNode("div", {
              "class": "".concat(COMPONENT_NAME2, "__close-btn"),
              "onClick": this.handleCloseBtnClick
            }, [renderTNodeJSX2("closeBtn", defaultCloseBtn)]), vue.createVNode("div", {
              "class": ["".concat(COMPONENT_NAME2, "__body"), "narrow-scrollbar"]
            }, [body]), this.footer && vue.createVNode("div", {
              "class": "".concat(COMPONENT_NAME2, "__footer")
            }, [renderTNodeJSX2("footer", defaultFooter)])])]), [[vue.resolveDirective("transfer-dom"), this.attach]]);
          }
        });
        var Drawer = withInstall(_Drawer);
        var Message = withInstall(_Message);
        var props$2 = {
          closeBtn: {
            type: [String, Boolean, Function],
            "default": void 0
          },
          content: {
            type: [String, Function]
          },
          "default": {
            type: [String, Function]
          },
          duration: {
            type: Number,
            "default": 3e3
          },
          footer: {
            type: [String, Function]
          },
          icon: {
            type: [Boolean, Function],
            "default": true
          },
          theme: {
            type: String,
            "default": "info",
            validator: function validator(val) {
              return ["info", "success", "warning", "error"].includes(val);
            }
          },
          title: {
            type: [String, Function]
          },
          onCloseBtnClick: Function,
          onDurationEnd: Function
        };
        var DEFAULT_Z_INDEX = 6e3;
        var DISTANCE = "16px";
        var PLACEMENT_OFFSET = {
          "top-left": {
            left: DISTANCE,
            top: DISTANCE
          },
          "top-right": {
            right: DISTANCE,
            top: DISTANCE
          },
          "bottom-right": {
            right: DISTANCE,
            bottom: DISTANCE
          },
          "bottom-left": {
            left: DISTANCE,
            bottom: DISTANCE
          }
        };
        var PLACEMENT_LIST = Object.keys(PLACEMENT_OFFSET);
        var ANIMATION_OPTION = {
          duration: 200,
          easing: "linear"
        };
        var fadeIn = function fadeIn2(dom, placement) {
          if (!dom)
            return;
          var offsetHeight = (dom === null || dom === void 0 ? void 0 : dom.offsetHeight) || 0;
          var offsetWidth = (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
          var keyframes = getFadeInKeyframes(placement, offsetWidth, offsetHeight);
          if (!keyframes)
            return;
          dom.animate && dom.animate(keyframes, ANIMATION_OPTION);
        };
        var fadeOut = function fadeOut2(dom, placement, onFinish) {
          if (!dom)
            return;
          var offsetHeight = (dom === null || dom === void 0 ? void 0 : dom.offsetHeight) || 0;
          var offsetWidth = (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
          var keyframes = getFadeOutKeyframes(placement, offsetWidth, offsetHeight);
          if (!keyframes)
            return onFinish();
          var animate = dom.animate && dom.animate(keyframes, ANIMATION_OPTION);
          if (animate) {
            animate.onfinish = function() {
              onFinish();
            };
          } else {
            dom.style.display = "none";
            onFinish();
          }
        };
        var getFadeInKeyframes = function getFadeInKeyframes2(placement, offsetWidth, offsetHeight) {
          if (!PLACEMENT_LIST.includes(placement))
            return null;
          if (placement === "top-right") {
            return [{
              opacity: 0,
              transform: "translateX(".concat(offsetWidth, "px)")
            }, {
              opacity: 1,
              transform: "translateX(0px)"
            }];
          }
          if (placement === "bottom-right") {
            return [{
              opacity: 0,
              transform: "translateX(".concat(offsetWidth, "px)"),
              marginBottom: "-".concat(offsetHeight, "px")
            }, {
              opacity: 1,
              transform: "translateX(0px)"
            }];
          }
          if (placement === "top-left") {
            return [{
              opacity: 0,
              transform: "translateX(-".concat(offsetWidth, "px)")
            }, {
              opacity: 1,
              transform: "translateX(0px)"
            }];
          }
          if (placement === "bottom-left") {
            return [{
              opacity: 0,
              transform: "translateX(-".concat(offsetWidth, "px)"),
              marginBottom: "-".concat(offsetHeight, "px")
            }, {
              opacity: 1,
              transform: "translateX(0px)"
            }];
          }
        };
        var getFadeOutKeyframes = function getFadeOutKeyframes2(placement, offsetWidth, offsetHeight) {
          if (!PLACEMENT_LIST.includes(placement))
            return null;
          if (placement === "top-right") {
            return [{
              opacity: 1,
              transform: "translateX(0px)"
            }, {
              opacity: 0,
              transform: "translateX(".concat(offsetWidth, "px)"),
              marginBottom: "-".concat(offsetHeight, "px")
            }];
          }
          if (placement === "bottom-right") {
            return [{
              opacity: 1,
              transform: "translateX(0px)"
            }, {
              opacity: 0,
              transform: "translateX(".concat(offsetWidth, "px)")
            }];
          }
          if (placement === "top-left") {
            return [{
              opacity: 1,
              transform: "translateX(0px)"
            }, {
              opacity: 0,
              transform: "translateX(-".concat(offsetWidth, "px)"),
              marginBottom: "-".concat(offsetHeight, "px")
            }];
          }
          if (placement === "bottom-left") {
            return [{
              opacity: 1,
              transform: "translateX(0px)"
            }, {
              opacity: 0,
              transform: "translateX(-".concat(offsetWidth, "px)")
            }];
          }
        };
        function ownKeys$7(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$7(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$7(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _Notification = vue.defineComponent({
          name: "TNotification",
          props: _objectSpread$7(_objectSpread$7({}, props$2), {}, {
            placement: String
          }),
          setup: function setup(props2, _ref) {
            var slots = _ref.slots, expose = _ref.expose;
            var COMPONENT_NAME2 = usePrefixClass("notification");
            var _useConfig = useConfig("classPrefix"), classPrefix2 = _useConfig.classPrefix;
            var renderTNode = useTNodeJSX();
            var renderContent2 = useContent();
            var timer = vue.ref(null);
            var notificationRef = vue.ref(null);
            var close$1 = function close2(e) {
              var dom = notificationRef.value;
              fadeOut(dom, props2.placement, function() {
                var _props2$onCloseBtnCli;
                (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 ? void 0 : _props2$onCloseBtnCli.call(props2, {
                  e
                });
              });
            };
            var renderIcon = function renderIcon2() {
              var iconContent;
              if (props2.icon === false)
                return null;
              if (isFunction_1(props2.icon)) {
                iconContent = props2.icon(vue.h);
              } else if (slots.icon) {
                iconContent = slots.icon(null);
              } else if (props2.theme) {
                var iconType = props2.theme === "success" ? vue.createVNode(checkCircleFilled, {
                  "class": "t-is-".concat(props2.theme)
                }, null) : vue.createVNode(infoCircleFilled, {
                  "class": "t-is-".concat(props2.theme)
                }, null);
                iconContent = vue.createVNode("div", {
                  "class": "t-notification__icon"
                }, [iconType]);
              }
              return iconContent;
            };
            var renderClose = function renderClose2() {
              var defaultClose = vue.createVNode(close, null, null);
              return vue.createVNode("span", {
                "class": "".concat(classPrefix2.value, "-message__close"),
                "onClick": close$1
              }, [renderTNode("closeBtn", defaultClose)]);
            };
            var renderMainContent = function renderMainContent2() {
              return vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__content")
              }, [renderContent2("default", "content")]);
            };
            var clearTimer = function clearTimer2() {
              props2.duration && clearTimeout(timer.value);
            };
            var setTimer = function setTimer2() {
              if (!props2.duration) {
                return;
              }
              timer.value = Number(setTimeout(function() {
                clearTimer();
                var dom = notificationRef.value;
                fadeOut(dom, props2.placement, function() {
                  var _props2$onDurationEnd;
                  (_props2$onDurationEnd = props2.onDurationEnd) === null || _props2$onDurationEnd === void 0 ? void 0 : _props2$onDurationEnd.call(props2);
                });
              }, props2.duration));
            };
            vue.onBeforeMount(function() {
              props2.duration && setTimer();
            });
            vue.onMounted(function() {
              var dom = notificationRef.value;
              fadeIn(dom, props2.placement);
            });
            expose({
              close: close$1
            });
            return function() {
              return vue.createVNode("div", {
                "ref": notificationRef,
                "class": "".concat(COMPONENT_NAME2.value),
                "onMouseenter": clearTimer,
                "onMouseleave": setTimer
              }, [renderIcon(), vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__main")
              }, [vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__title__wrap")
              }, [vue.createVNode("span", {
                "class": "".concat(COMPONENT_NAME2.value, "__title")
              }, [renderTNode("title")]), renderClose()]), renderMainContent(), renderTNode("footer")])]);
            };
          }
        });
        function ownKeys$6(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$6(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$6(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var NotificationList = vue.defineComponent({
          props: {
            placement: {
              type: String,
              "default": "top-right",
              validator: function validator(v) {
                return ["top-left", "top-right", "bottom-left", "bottom-right"].indexOf(v) > -1;
              }
            }
          },
          setup: function setup(props2, _ref) {
            var expose = _ref.expose;
            var COMPONENT_NAME2 = usePrefixClass("notification-list");
            var placement = props2.placement;
            var list = vue.ref([]);
            var notificationList = vue.ref([]);
            var styles = vue.computed(function() {
              return _objectSpread$6({
                zIndex: DEFAULT_Z_INDEX
              }, PLACEMENT_OFFSET[placement]);
            });
            var add2 = function add3(options) {
              list.value.push(options);
              return list.value.length - 1;
            };
            var remove2 = function remove3(index2) {
              list.value.splice(index2, 1);
            };
            var removeAll = function removeAll2() {
              list.value = [];
            };
            var getOffset = function getOffset2(val) {
              if (!val)
                return;
              return isNaN(Number(val)) ? val : "".concat(val, "px");
            };
            var notificationStyles = function notificationStyles2(item) {
              var styles2 = {
                marginBottom: DISTANCE
              };
              if (item.offset) {
                styles2.position = "relative";
                styles2.left = getOffset(item.offset[0]);
                styles2.top = getOffset(item.offset[1]);
              }
              if (item.zIndex)
                styles2["z-index"] = item.zIndex;
              return styles2;
            };
            var getProps = function getProps2(index2, item) {
              return _objectSpread$6(_objectSpread$6({}, item), {}, {
                onCloseBtnClick: function onCloseBtnClick(e) {
                  if (item.onCloseBtnClick) {
                    item.onCloseBtnClick(e);
                  }
                  return remove2(index2);
                },
                onDurationEnd: function onDurationEnd() {
                  if (item.onDurationEnd) {
                    item.onDurationEnd();
                  }
                  return remove2(index2);
                }
              });
            };
            var addChild = function addChild2(el) {
              if (el) {
                notificationList.value.push(el);
              }
            };
            expose({
              add: add2,
              remove: remove2,
              removeAll,
              list,
              notificationList
            });
            return function() {
              if (!list.value.length)
                return;
              return vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__show"),
                "style": styles.value
              }, [list.value.map(function(item, index2) {
                return vue.createVNode(_Notification, vue.mergeProps({
                  "ref": addChild,
                  "key": item.id,
                  "style": notificationStyles(item)
                }, getProps(index2, item)), null);
              })]);
            };
          }
        });
        function ownKeys$5(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$5(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$5(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var seed = 0;
        var instanceMap = /* @__PURE__ */ new Map();
        var NotificationFunction = function NotificationFunction2(options) {
          seed += 1;
          var hackOptions = _objectSpread$5({
            placement: "top-right",
            zIndex: 6e3,
            attach: "body",
            id: seed
          }, options);
          hackOptions.content = options.content ? options.content : "";
          var attachEl = getAttach(hackOptions.attach);
          if (!instanceMap.get(attachEl)) {
            instanceMap.set(attachEl, {});
          }
          var tmpInstance = instanceMap.get(attachEl)[hackOptions.placement];
          if (!tmpInstance) {
            var wrapper = document.createElement("div");
            var instance = vue.createApp(NotificationList, {
              placement: hackOptions.placement
            }).mount(wrapper);
            instance.add(hackOptions);
            instanceMap.get(attachEl)[hackOptions.placement] = instance;
            tmpInstance = instance;
            attachEl.appendChild(instance.$el);
          } else {
            tmpInstance.add(hackOptions);
          }
          return new Promise(function(resolve) {
            var ins = instanceMap.get(attachEl)[hackOptions.placement];
            vue.nextTick(function() {
              var notificationList = ins.notificationList;
              resolve(notificationList[notificationList.length - 1]);
            });
          });
        };
        var showThemeNotification = function showThemeNotification2(theme, options) {
          var hackOptions = _objectSpread$5(_objectSpread$5({}, options), {}, {
            theme
          });
          return NotificationFunction(hackOptions);
        };
        var extraApi = {
          info: function info(options) {
            return showThemeNotification("info", options);
          },
          success: function success(options) {
            return showThemeNotification("success", options);
          },
          warning: function warning(options) {
            return showThemeNotification("warning", options);
          },
          error: function error2(options) {
            return showThemeNotification("error", options);
          },
          close: function close2(promise) {
            promise.then(function(instance) {
              return instance.close();
            });
          },
          closeAll: function closeAll() {
            instanceMap.forEach(function(attach) {
              Object.keys(attach).forEach(function(placement) {
                attach[placement].removeAll();
              });
            });
          }
        };
        var NotificationPlugin = showThemeNotification;
        NotificationPlugin.install = function(app2) {
          app2.config.globalProperties.$notify = showThemeNotification;
          Object.keys(extraApi).forEach(function(funcName) {
            app2.config.globalProperties.$notify[funcName] = extraApi[funcName];
          });
        };
        Object.keys(extraApi).forEach(function(funcName) {
          NotificationPlugin[funcName] = extraApi[funcName];
        });
        var Notification = withInstall(_Notification);
        var props$1 = {
          cancelBtn: {
            type: [String, Object, Function],
            "default": ""
          },
          confirmBtn: {
            type: [String, Object, Function],
            "default": ""
          },
          content: {
            type: [String, Function]
          },
          "default": {
            type: [String, Function]
          },
          destroyOnClose: {
            type: Boolean,
            "default": true
          },
          icon: {
            type: Function
          },
          placement: {
            type: String,
            "default": "top",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["top", "left", "right", "bottom", "top-left", "top-right", "bottom-left", "bottom-right", "left-top", "left-bottom", "right-top", "right-bottom"].includes(val);
            }
          },
          popupProps: {
            type: Object
          },
          showArrow: {
            type: Boolean,
            "default": true
          },
          theme: {
            type: String,
            "default": "default",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["default", "warning", "danger"].includes(val);
            }
          },
          triggerElement: {
            type: [String, Function]
          },
          visible: {
            type: Boolean,
            "default": void 0
          },
          modelValue: {
            type: Boolean,
            "default": void 0
          },
          defaultVisible: Boolean,
          onCancel: Function,
          onConfirm: Function,
          onVisibleChange: Function
        };
        function ownKeys$4(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$4(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$4(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var _Popconfirm = vue.defineComponent({
          name: "TPopconfirm",
          props: props$1,
          setup: function setup(props2) {
            var _useConfig = useConfig("popconfirm"), global2 = _useConfig.global;
            var COMPONENT_NAME2 = usePrefixClass("popconfirm");
            var _toRefs = vue.toRefs(props2), visible = _toRefs.visible, modelValue = _toRefs.modelValue;
            var _useVModel = useVModel(visible, modelValue, props2.defaultVisible, props2.onVisibleChange, "visible"), _useVModel2 = _slicedToArray(_useVModel, 2), innerVisible = _useVModel2[0], setInnerVisible = _useVModel2[1];
            var confirmBtnAction = function confirmBtnAction2(e) {
              var _props2$onConfirm;
              (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 ? void 0 : _props2$onConfirm.call(props2, {
                e
              });
              setInnerVisible(false, {
                e
              });
            };
            var cancelBtnAction = function cancelBtnAction2(e) {
              var _props2$onCancel;
              (_props2$onCancel = props2.onCancel) === null || _props2$onCancel === void 0 ? void 0 : _props2$onCancel.call(props2, {
                e
              });
              setInnerVisible(false, {
                e
              });
            };
            var _useAction = useAction({
              confirmBtnAction,
              cancelBtnAction
            }), getConfirmBtn = _useAction.getConfirmBtn, getCancelBtn = _useAction.getCancelBtn;
            var renderTNodeJSX2 = useTNodeJSX();
            var innerPopupProps = vue.computed(function() {
              return _objectSpread$4({
                showArrow: props2.showArrow,
                overlayClassName: COMPONENT_NAME2.value,
                trigger: "click",
                destroyOnClose: props2.destroyOnClose,
                placement: props2.placement
              }, props2.popupProps);
            });
            var renderTNodeDefault = useTNodeDefault();
            var renderContent2 = function renderContent3() {
              var cancelBtn = getCancelBtn({
                cancelBtn: props2.cancelBtn,
                globalCancel: global2.value.cancel,
                className: "".concat(COMPONENT_NAME2.value, "__cancel"),
                size: "small"
              });
              var confirmBtn = getConfirmBtn({
                theme: props2.theme,
                confirmBtn: props2.confirmBtn,
                globalConfirm: global2.value.confirm,
                globalConfirmBtnTheme: global2.value.confirmBtnTheme,
                className: "".concat(COMPONENT_NAME2.value, "__confirm"),
                size: "small"
              });
              var renderIcon = function renderIcon2() {
                var Icon2 = {
                  "default": infoCircleFilled,
                  warning: errorCircleFilled,
                  danger: errorCircleFilled
                }[props2.theme];
                var theme = props2.theme || "default";
                return renderTNodeDefault("icon", vue.createVNode(Icon2, {
                  "class": "".concat(COMPONENT_NAME2.value, "__icon--").concat(theme)
                }, null));
              };
              return vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__content")
              }, [vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__body")
              }, [renderIcon(), vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__inner")
              }, [renderTNodeJSX2("content")])]), Boolean(cancelBtn || confirmBtn) && vue.createVNode("div", {
                "class": "".concat(COMPONENT_NAME2.value, "__buttons")
              }, [cancelBtn, confirmBtn])]);
            };
            var onPopupVisibleChange = function onPopupVisibleChange2(val, context) {
              setInnerVisible(val, context);
            };
            var renderTNodeContent = useContent();
            return function() {
              return vue.createVNode(Popup, vue.mergeProps({
                "visible": innerVisible.value
              }, innerPopupProps.value, {
                "onVisibleChange": onPopupVisibleChange
              }), {
                "default": function _default() {
                  return [renderTNodeContent("default", "triggerElement")];
                },
                content: renderContent2
              });
            };
          }
        });
        var Popconfirm = withInstall(_Popconfirm);
        var props = {
          accept: {
            type: String,
            "default": ""
          },
          action: {
            type: String,
            "default": ""
          },
          autoUpload: {
            type: Boolean,
            "default": true
          },
          beforeUpload: {
            type: Function
          },
          data: {
            type: Object
          },
          "default": {
            type: [String, Function]
          },
          disabled: Boolean,
          draggable: Boolean,
          fileListDisplay: {
            type: Function
          },
          files: {
            type: Array,
            "default": void 0
          },
          modelValue: {
            type: Array,
            "default": void 0
          },
          defaultFiles: {
            type: Array
          },
          format: {
            type: Function
          },
          formatResponse: {
            type: Function
          },
          headers: {
            type: Object
          },
          isBatchUpload: Boolean,
          max: {
            type: Number,
            "default": 0
          },
          method: {
            type: String,
            "default": "POST",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["POST", "GET", "PUT", "OPTION"].includes(val);
            }
          },
          multiple: Boolean,
          name: {
            type: String,
            "default": "file"
          },
          placeholder: {
            type: String,
            "default": ""
          },
          requestMethod: {
            type: Function
          },
          showUploadProgress: {
            type: Boolean,
            "default": true
          },
          sizeLimit: {
            type: [Number, Object]
          },
          theme: {
            type: String,
            "default": "file",
            validator: function validator(val) {
              if (!val)
                return true;
              return ["custom", "file", "file-input", "file-flow", "image", "image-flow"].includes(val);
            }
          },
          tips: {
            type: String,
            "default": ""
          },
          trigger: {
            type: [String, Function]
          },
          uploadAllFilesInOneRequest: Boolean,
          useMockProgress: {
            type: Boolean,
            "default": true
          },
          withCredentials: Boolean,
          onCancelUpload: Function,
          onChange: Function,
          onDragenter: Function,
          onDragleave: Function,
          onFail: Function,
          onPreview: Function,
          onProgress: Function,
          onRemove: Function,
          onSelectChange: Function,
          onSuccess: Function
        };
        function returnFileSize(number) {
          if (number < 1024) {
            return "".concat(number, " Bytes");
          }
          if (number >= 1024 && number < 1048576) {
            return "".concat((number / 1024).toFixed(1), " KB");
          }
          if (number >= 1048576) {
            return "".concat((number / 1048576).toFixed(1), " MB");
          }
        }
        function getCurrentDate() {
          var d = new Date();
          var month = d.getMonth() + 1;
          month = month < 10 ? "0".concat(month) : month;
          return "".concat(d.getFullYear(), "-").concat(month, "-").concat(d.getDate(), " ").concat(d.getHours(), ":").concat(d.getMinutes(), ":").concat(d.getSeconds());
        }
        function abridgeName(inputName) {
          var leftCount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 5;
          var rightcount = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 7;
          var name = inputName;
          var leftLength = 0;
          var rightLength = 0;
          for (var i2 = 0; i2 < name.length; i2++) {
            var w = name[i2];
            var isCn = escape(w).indexOf("%u") === 0;
            if (i2 < leftCount * 2 && leftLength < leftCount) {
              isCn ? leftLength += 1 : leftLength += 2;
            } else if (i2 > i2 - rightcount && rightLength < rightcount) {
              isCn ? rightLength += 1 : rightLength += 2;
            }
          }
          return name.replace(new RegExp("^(.{".concat(leftLength, "})(.+)(.{").concat(rightLength, "})$")), "$1\u2026$3");
        }
        var SIZE_MAP = {
          B: 1024,
          KB: 1,
          MB: 1048576,
          GB: 1073741824
        };
        function isOverSizeLimit(fileSize, sizeLimit, unit) {
          var units = ["B", "KB", "MB", "GB"];
          var KB_INDEX = 1;
          var index2 = units.indexOf(unit);
          if (index2 === -1) {
            console.warn("TDesign Upload Warn: `sizeLimit.unit` can only be one of ".concat(units.join()));
            index2 = KB_INDEX;
          }
          var num = SIZE_MAP[unit];
          var limit = index2 < KB_INDEX ? sizeLimit / num : sizeLimit * num;
          return fileSize <= limit;
        }
        function ownKeys$3(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$3(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$3(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var Dragger = vue.defineComponent({
          name: "TUploadDragger",
          props: {
            file: {
              type: Object,
              "default": function _default() {
                return null;
              }
            },
            loadingFile: {
              type: Object,
              "default": function _default() {
                return null;
              }
            },
            autoUpload: props.autoUpload,
            theme: props.theme,
            onCancel: Function,
            onClick: Function,
            onRemove: Function,
            onUpload: Function,
            onChange: Function,
            onDragleave: Function,
            onDragenter: Function
          },
          setup: function setup(props2) {
            var renderTNodeJSX2 = useTNodeJSX();
            var target = vue.ref(null);
            var dragActive = vue.ref(false);
            var _useConfig = useConfig("upload"), global2 = _useConfig.global;
            var UPLOAD_NAME = usePrefixClass("upload");
            var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE;
            var imageUrl = vue.computed(function() {
              return props2.loadingFile && props2.loadingFile.url || props2.file && props2.file.url;
            });
            var inputName = vue.computed(function() {
              return props2.loadingFile && props2.loadingFile.name || props2.file && props2.file.name || "";
            });
            var classes = vue.computed(function() {
              return ["".concat(UPLOAD_NAME.value, "__dragger"), _defineProperty$3({}, "".concat(UPLOAD_NAME.value, "__dragger-center"), !props2.loadingFile && !props2.file), _defineProperty$3({}, "".concat(UPLOAD_NAME.value, "__dragger-error"), props2.loadingFile && props2.loadingFile.status === "fail")];
            });
            var size = vue.computed(function() {
              return props2.loadingFile && props2.loadingFile.size || props2.file && props2.file.size;
            });
            var showResultOperate = vue.computed(function() {
              var _props2$file, _props2$loadingFile;
              return Boolean(!props2.loadingFile && ((_props2$file = props2.file) === null || _props2$file === void 0 ? void 0 : _props2$file.name)) || ["success", "fail"].includes((_props2$loadingFile = props2.loadingFile) === null || _props2$loadingFile === void 0 ? void 0 : _props2$loadingFile.status);
            });
            var handleDrop = function handleDrop2(event) {
              var _props2$onChange, _props2$onDragleave;
              event.preventDefault();
              (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 ? void 0 : _props2$onChange.call(props2, event.dataTransfer.files);
              (_props2$onDragleave = props2.onDragleave) === null || _props2$onDragleave === void 0 ? void 0 : _props2$onDragleave.call(props2, event);
              dragActive.value = false;
            };
            var handleDragenter = function handleDragenter2(event) {
              var _props2$onDragenter;
              event.preventDefault();
              target.value = event.target;
              (_props2$onDragenter = props2.onDragenter) === null || _props2$onDragenter === void 0 ? void 0 : _props2$onDragenter.call(props2, event);
              dragActive.value = true;
            };
            var handleDragleave = function handleDragleave2(event) {
              var _props2$onDragleave2;
              if (target.value !== event.target)
                return;
              event.preventDefault();
              (_props2$onDragleave2 = props2.onDragleave) === null || _props2$onDragleave2 === void 0 ? void 0 : _props2$onDragleave2.call(props2, event);
              dragActive.value = false;
            };
            var renderImage = function renderImage2() {
              return vue.createVNode("div", {
                "class": "".concat(UPLOAD_NAME.value, "__dragger-img-wrap")
              }, [imageUrl.value && vue.createVNode("img", {
                "src": imageUrl.value
              }, null)]);
            };
            var renderUploading = function renderUploading2() {
              if (props2.loadingFile.status === "fail")
                return vue.createVNode(errorCircleFilled, null, null);
              if (props2.loadingFile.status === "progress") {
                return vue.createVNode("div", {
                  "class": "".concat(UPLOAD_NAME.value, "__single-progress")
                }, [vue.createVNode(Loading, null, null), vue.createVNode("span", {
                  "class": "".concat(UPLOAD_NAME.value, "__single-percent")
                }, [Math.min(props2.loadingFile.percent, 99), "%"])]);
              }
            };
            var renderProgress = function renderProgress2() {
              var _props2$loadingFile2, _props2$loadingFile3;
              return vue.createVNode("div", {
                "class": "".concat(UPLOAD_NAME.value, "__dragger-progress")
              }, [props2.theme === "image" && renderImage(), vue.createVNode("div", {
                "class": "".concat(UPLOAD_NAME.value, "__dragger-progress-info")
              }, [vue.createVNode("div", {
                "class": "".concat(UPLOAD_NAME.value, "__dragger-text")
              }, [vue.createVNode("span", {
                "class": "".concat(UPLOAD_NAME.value, "__single-name")
              }, [abridgeName(inputName.value)]), props2.loadingFile && renderUploading(), !props2.loadingFile && !!props2.file && vue.createVNode(checkCircleFilled, null, null)]), vue.createVNode("small", {
                "class": "".concat(SIZE.value.small)
              }, [global2.value.file.fileSizeText, "\uFF1A", returnFileSize(size.value)]), vue.createVNode("small", {
                "class": "".concat(SIZE.value.small)
              }, [global2.value.file.fileOperationDateText, "\uFF1A", getCurrentDate()]), vue.createVNode("div", {
                "class": "".concat(UPLOAD_NAME.value, "__dragger-btns")
              }, [["progress", "waiting"].includes((_props2$loadingFile2 = props2.loadingFile) === null || _props2$loadingFile2 === void 0 ? void 0 : _props2$loadingFile2.status) && vue.createVNode(Button, {
                "theme": "primary",
                "variant": "text",
                "class": "".concat(UPLOAD_NAME.value, "__dragger-progress-cancel"),
                "onClick": props2.onCancel
              }, {
                "default": function _default() {
                  return [global2.value.cancelUploadText];
                }
              }), !props2.autoUpload && ((_props2$loadingFile3 = props2.loadingFile) === null || _props2$loadingFile3 === void 0 ? void 0 : _props2$loadingFile3.status) === "waiting" && vue.createVNode(Button, {
                "variant": "text",
                "theme": "primary",
                "onClick": function onClick(e) {
                  return props2.onUpload(_objectSpread$3({}, props2.loadingFile), e);
                }
              }, {
                "default": function _default() {
                  return [global2.value.triggerUploadText.normal];
                }
              })]), showResultOperate.value && vue.createVNode("div", {
                "class": "".concat(UPLOAD_NAME.value, "__dragger-btns")
              }, [vue.createVNode(Button, {
                "theme": "primary",
                "variant": "text",
                "class": "".concat(UPLOAD_NAME.value, "__dragger-progress-cancel"),
                "onClick": function onClick(e) {
                  props2.onRemove(e);
                  props2.onClick(e);
                }
              }, {
                "default": function _default() {
                  return [global2.value.triggerUploadText.reupload];
                }
              }), vue.createVNode(Button, {
                "theme": "danger",
                "variant": "text",
                "onClick": props2.onRemove
              }, {
                "default": function _default() {
                  return [global2.value.triggerUploadText["delete"]];
                }
              })])])]);
            };
            var renderDefaultDragElement = function renderDefaultDragElement2() {
              var unActiveElement = vue.createVNode("div", null, [vue.createVNode("span", {
                "class": "".concat(UPLOAD_NAME.value, "--highlight")
              }, [global2.value.triggerUploadText.normal]), vue.createVNode("span", null, ["\xA0\xA0/\xA0\xA0", global2.value.dragger.draggingText])]);
              var activeElement = vue.createVNode("div", null, [global2.value.dragger.dragDropText]);
              return dragActive.value ? activeElement : unActiveElement;
            };
            return function() {
              var content = null;
              if ((props2.loadingFile || props2.file) && props2.theme !== "custom") {
                content = renderProgress();
              } else {
                content = vue.createVNode("div", {
                  "class": "".concat(UPLOAD_NAME.value, "__trigger"),
                  "onClick": props2.onClick
                }, [renderTNodeJSX2("default") || renderDefaultDragElement()]);
              }
              return vue.createVNode("div", {
                "class": classes.value,
                "onDrop": handleDrop,
                "onDragenter": handleDragenter,
                "onDragleave": handleDragleave,
                "onDragover": function onDragover(event) {
                  event.preventDefault();
                }
              }, [content]);
            };
          }
        });
        var ImageCard = vue.defineComponent({
          name: "TImageUpload",
          props: {
            files: props.files,
            loadingFile: {
              type: Object,
              "default": function _default() {
                return null;
              }
            },
            showUploadProgress: props.showUploadProgress,
            placeholder: props.placeholder,
            multiple: props.multiple,
            max: props.max,
            disabled: props.disabled,
            onClick: Function,
            onRemove: Function,
            onImgPreview: Function
          },
          setup: function setup(props2) {
            var disabled = useFormDisabled();
            var _useConfig = useConfig("upload"), prefix = _useConfig.classPrefix, global2 = _useConfig.global;
            var UPLOAD_NAME = usePrefixClass("upload");
            var _useCommonClassName = useCommonClassName$2(), STATUS = _useCommonClassName.STATUS;
            var showTrigger = vue.computed(function() {
              var multiple = props2.multiple, max2 = props2.max, files = props2.files;
              if (multiple) {
                return !max2 || files && files.length < max2;
              }
              return !(files && files[0]);
            });
            var onMaskClick = function onMaskClick2(e) {
              !showTrigger.value && props2.onClick(e);
            };
            var renderCardItem = function renderCardItem2(file, index2) {
              return vue.createVNode("li", {
                "class": "".concat(UPLOAD_NAME.value, "__card-item ").concat(prefix.value, "-is--background")
              }, [vue.createVNode("div", {
                "class": "".concat(UPLOAD_NAME.value, "__card-content ").concat(UPLOAD_NAME.value, "__card-box")
              }, [vue.createVNode("img", {
                "class": "".concat(UPLOAD_NAME.value, "__card-image"),
                "src": file.url
              }, null), vue.createVNode("div", {
                "class": "".concat(UPLOAD_NAME.value, "__card-mask"),
                "onClick": onMaskClick
              }, [vue.createVNode("span", {
                "class": "".concat(UPLOAD_NAME.value, "__card-mask-item")
              }, [vue.createVNode(browse, {
                "onClick": function onClick(_ref) {
                  var e = _ref.e;
                  e.stopPropagation();
                  props2.onImgPreview(e, file);
                }
              }, null)]), !disabled.value && [vue.createVNode("span", {
                "class": "".concat(UPLOAD_NAME.value, "__card-mask-item-divider"),
                "key": "divider"
              }, null), vue.createVNode("span", {
                "class": "".concat(UPLOAD_NAME.value, "__card-mask-item"),
                "key": "delete-icon"
              }, [vue.createVNode(_delete, {
                "onClick": function onClick(_ref2) {
                  var e = _ref2.e;
                  e.stopPropagation();
                  props2.onRemove({
                    e,
                    file,
                    index: index2
                  });
                }
              }, null)])]])])]);
            };
            var renderTrigger = function renderTrigger2() {
              return vue.createVNode("li", {
                "class": ["".concat(UPLOAD_NAME.value, "__card-item ").concat(prefix.value, "-is--background"), _defineProperty$3({}, STATUS.value.disabled, disabled.value)],
                "onClick": props2.onClick
              }, [props2.showUploadProgress && props2.loadingFile && props2.loadingFile.status === "progress" ? vue.createVNode("div", {
                "class": "".concat(UPLOAD_NAME.value, "__card-container ").concat(UPLOAD_NAME.value, "__card-box")
              }, [vue.createVNode(Loading, null, null), vue.createVNode("p", null, [global2.value.progress.uploadingText, " ", Math.min(props2.loadingFile.percent, 99), "%"])]) : vue.createVNode("div", {
                "class": "".concat(UPLOAD_NAME.value, "__card-container ").concat(UPLOAD_NAME.value, "__card-box")
              }, [vue.createVNode(add, null, null), vue.createVNode("p", {
                "class": "".concat(prefix.value, "-size-s")
              }, [props2.placeholder || global2.value.triggerUploadText.image])])]);
            };
            return function() {
              return vue.createVNode("ul", {
                "class": "".concat(UPLOAD_NAME.value, "__card")
              }, [props2.files && props2.files.map(function(file, index2) {
                return renderCardItem(file, index2);
              }), showTrigger.value && renderTrigger()]);
            };
          }
        });
        var FlowList = vue.defineComponent({
          name: "TUploadFlowList",
          props: {
            showUploadProgress: props.showUploadProgress,
            placeholder: props.placeholder,
            autoUpload: props.autoUpload,
            disabled: props.disabled,
            theme: props.theme,
            batchUpload: props.isBatchUpload,
            files: props.files,
            toUploadFiles: Array,
            onRemove: Function,
            onUpload: Function,
            onCancel: Function,
            onChange: Function,
            onDragleave: Function,
            onDragenter: Function,
            onImgPreview: Function
          },
          setup: function setup(props2) {
            var target = vue.ref(null);
            var dragActive = vue.ref(false);
            var renderTNodeJSX2 = useTNodeJSX();
            var disabled = useFormDisabled();
            var _useConfig = useConfig("upload"), prefix = _useConfig.classPrefix, global2 = _useConfig.global;
            var UPLOAD_NAME = usePrefixClass("upload");
            var _useCommonClassName = useCommonClassName$2(), SIZE = _useCommonClassName.SIZE;
            var waitingUploadFiles = vue.computed(function() {
              var list = [];
              props2.toUploadFiles.forEach(function(item) {
                var r = props2.files.filter(function(t) {
                  return t.name === item.name;
                });
                if (!r.length) {
                  list.push(item);
                }
              });
              return list;
            });
            var showInitial = vue.computed(function() {
              var isWaitingEmpty = !waitingUploadFiles.value || !waitingUploadFiles.value.length;
              return (!props2.files || !props2.files.length) && isWaitingEmpty;
            });
            var listFiles = vue.computed(function() {
              if (!props2.files || !props2.files.length)
                return props2.toUploadFiles;
              return props2.files.concat(waitingUploadFiles.value);
            });
            var failedList = vue.computed(function() {
              return props2.toUploadFiles.filter(function(file) {
                return file.status === "fail";
              });
            });
            var processList = vue.computed(function() {
              return props2.toUploadFiles.filter(function(file) {
                return file.status === "progress";
              });
            });
            var isUploading = vue.computed(function() {
              return !!processList.value.length;
            });
            var allowUpload = vue.computed(function() {
              return Boolean(waitingUploadFiles.value && waitingUploadFiles.value.length) && !isUploading.value;
            });
            var uploadText = vue.computed(function() {
              if (isUploading.value)
                return "".concat(global2.value.progress.uploadingText, "...");
              return failedList.value && failedList.value.length ? global2.value.triggerUploadText.reupload : global2.value.triggerUploadText.normal;
            });
            var handleDrop = function handleDrop2(event) {
              event.preventDefault();
              props2.onChange(event.dataTransfer.files);
              props2.onDragleave(event);
              dragActive.value = false;
            };
            var handleDragenter = function handleDragenter2(event) {
              target.value = event.target;
              event.preventDefault();
              props2.onDragenter(event);
              dragActive.value = true;
            };
            var handleDragleave = function handleDragleave2(event) {
              if (target.value !== event.target)
                return;
              event.preventDefault();
              props2.onDragleave(event);
              dragActive.value = false;
            };
            var handleDragover = function handleDragover2(event) {
              event.preventDefault();
            };
            var renderDragger = function renderDragger2() {
              return vue.createVNode("div", {
                "class": "".concat(UPLOAD_NAME.value, "__flow-empty"),
                "onDrop": handleDrop,
                "onDragenter": handleDragenter,
                "onDragover": handleDragover,
                "onDragleave": handleDragleave
              }, [dragActive.value ? global2.value.dragger.dragDropText : global2.value.dragger.clickAndDragText]);
            };
            var getStatusMap = function getStatusMap2(file) {
              var iconMap = {
                success: vue.createVNode(checkCircleFilled, null, null),
                fail: vue.createVNode(errorCircleFilled, null, null),
                progress: vue.createVNode(Loading, null, null),
                waiting: vue.createVNode(timeFilled, null, null)
              };
              var textMap = {
                success: global2.value.progress.successText,
                fail: global2.value.progress.failText,
                progress: "".concat(global2.value.progress.uploadingText, " ").concat(Math.min(file.percent, 99), "%"),
                waiting: global2.value.progress.waitingText
              };
              return {
                iconMap,
                textMap
              };
            };
            var renderStatus = function renderStatus2(file) {
              if (!props2.showUploadProgress)
                return;
              var _getStatusMap = getStatusMap(file), iconMap = _getStatusMap.iconMap, textMap = _getStatusMap.textMap;
              return vue.createVNode("div", {
                "class": "".concat(UPLOAD_NAME.value, "__flow-status")
              }, [iconMap[file.status], vue.createVNode("span", null, [textMap[file.status]])]);
            };
            var renderNormalActionCol = function renderNormalActionCol2(file, index2) {
              return vue.createVNode("td", null, [vue.createVNode("span", {
                "class": "".concat(UPLOAD_NAME.value, "__flow-button"),
                "onClick": function onClick(e) {
                  return props2.onRemove({
                    e,
                    index: index2,
                    file
                  });
                }
              }, [global2.value.triggerUploadText["delete"]])]);
            };
            var renderBatchActionCol = function renderBatchActionCol2(index2) {
              return index2 === 0 ? vue.createVNode("td", {
                "rowspan": listFiles.value.length,
                "class": "".concat(UPLOAD_NAME.value, "__flow-table__batch-row")
              }, [vue.createVNode("span", {
                "class": "".concat(UPLOAD_NAME.value, "__flow-button"),
                "onClick": function onClick(e) {
                  return props2.onRemove({
                    e,
                    index: -1,
                    file: null
                  });
                }
              }, [global2.value.triggerUploadText["delete"]])]) : "";
            };
            var renderFileList = function renderFileList2() {
              return props2.theme === "file-flow" && vue.createVNode("table", {
                "class": "".concat(UPLOAD_NAME.value, "__flow-table")
              }, [vue.createVNode("tr", null, [vue.createVNode("th", null, [global2.value.file.fileNameText]), vue.createVNode("th", null, [global2.value.file.fileSizeText]), vue.createVNode("th", null, [global2.value.file.fileStatusText]), vue.createVNode("th", null, [global2.value.file.fileOperationText])]), showInitial.value && vue.createVNode("tr", null, [vue.createVNode("td", {
                "colspan": 4
              }, [renderDragger()])]), listFiles.value.map(function(file, index2) {
                var showBatchUploadAction = props2.batchUpload && props2.toUploadFiles.length === 0;
                return vue.createVNode("tr", null, [vue.createVNode("td", null, [abridgeName(file.name, 7, 10)]), vue.createVNode("td", null, [returnFileSize(file.size)]), vue.createVNode("td", null, [renderStatus(file)]), showBatchUploadAction ? renderBatchActionCol(index2) : renderNormalActionCol(file, index2)]);
              })]);
            };
            var renderImgItem = function renderImgItem2(file, index2) {
              var _getStatusMap2 = getStatusMap(file), iconMap = _getStatusMap2.iconMap, textMap = _getStatusMap2.textMap;
              return vue.createVNode("li", {
                "class": "".concat(UPLOAD_NAME.value, "__card-item")
              }, [vue.createVNode("div", {
                "class": ["".concat(UPLOAD_NAME.value, "__card-content"), _defineProperty$3({}, "".concat(prefix.value, "-is-bordered"), file.status !== "waiting")]
              }, [["fail", "progress"].includes(file.status) && vue.createVNode("div", {
                "class": "".concat(UPLOAD_NAME.value, "__card-status-wrap")
              }, [iconMap[file.status], vue.createVNode("p", null, [textMap[file.status]])]), (["waiting", "success"].includes(file.status) || !file.status && file.url) && vue.createVNode("img", {
                "class": "".concat(UPLOAD_NAME.value, "__card-image"),
                "src": file.url || "//tdesign.gtimg.com/tdesign-default-img.png"
              }, null), vue.createVNode("div", {
                "class": "".concat(UPLOAD_NAME.value, "__card-mask")
              }, [file.url && vue.createVNode("span", {
                "class": "".concat(UPLOAD_NAME.value, "__card-mask-item")
              }, [vue.createVNode(browse, {
                "onClick": function onClick(_ref2) {
                  var e = _ref2.e;
                  return props2.onImgPreview(e, file);
                }
              }, null), vue.createVNode("span", {
                "class": "".concat(UPLOAD_NAME.value, "__card-mask-item-divider")
              }, null)]), !disabled.value && vue.createVNode("span", {
                "class": "".concat(UPLOAD_NAME.value, "__card-mask-item"),
                "onClick": function onClick(e) {
                  return props2.onRemove({
                    e,
                    index: index2,
                    file
                  });
                }
              }, [vue.createVNode(_delete, null, null)])])]), vue.createVNode("p", {
                "class": "".concat(UPLOAD_NAME.value, "__card-name")
              }, [abridgeName(file.name)])]);
            };
            var renderImgList = function renderImgList2() {
              return props2.theme === "image-flow" && vue.createVNode("div", {
                "class": "".concat(UPLOAD_NAME.value, "__flow-card-area")
              }, [showInitial.value && renderDragger(), !!listFiles.value.length && vue.createVNode("ul", {
                "class": "".concat(UPLOAD_NAME.value, "__card clearfix")
              }, [listFiles.value.map(function(file, index2) {
                return renderImgItem(file, index2);
              })])]);
            };
            var renderFooter = function renderFooter2() {
              return !props2.autoUpload && vue.createVNode("div", {
                "class": "".concat(UPLOAD_NAME.value, "__flow-bottom")
              }, [vue.createVNode(Button, {
                "theme": "default",
                "onClick": props2.onCancel,
                "disabled": !allowUpload.value
              }, {
                "default": function _default() {
                  return [global2.value.cancelUploadText];
                }
              }), vue.createVNode(Button, {
                "disabled": !allowUpload.value,
                "theme": "primary",
                "onClick": function onClick(e) {
                  return props2.onUpload(waitingUploadFiles.value, e);
                }
              }, {
                "default": function _default() {
                  return [uploadText.value];
                }
              })]);
            };
            return function() {
              return vue.createVNode("div", {
                "class": ["".concat(UPLOAD_NAME.value, "__flow"), "".concat(UPLOAD_NAME.value, "__flow-").concat(props2.theme)]
              }, [vue.createVNode("div", {
                "class": "".concat(UPLOAD_NAME.value, "__flow-op")
              }, [renderTNodeJSX2("default"), vue.createVNode("small", {
                "class": "".concat(SIZE.value.small, " ").concat(UPLOAD_NAME.value, "__flow-placeholder")
              }, [props2.placeholder])]), renderFileList(), renderImgList(), renderFooter()]);
            };
          }
        });
        var SingleFileProps = {
          file: {
            type: Object,
            "default": function _default() {
              return null;
            }
          },
          loadingFile: {
            type: Object,
            "default": function _default() {
              return null;
            }
          },
          showUploadProgress: props.showUploadProgress,
          theme: props.theme,
          placeholder: props.placeholder,
          onRemove: Function
        };
        var SingleFile = vue.defineComponent({
          name: "TUploadSingleFile",
          props: SingleFileProps,
          setup: function setup(props2) {
            var renderTNodeJSX2 = useTNodeJSX();
            var _useConfig = useConfig("upload"), prefix = _useConfig.classPrefix;
            var UPLOAD_NAME = usePrefixClass("upload");
            var showProgress = vue.computed(function() {
              return !!(props2.loadingFile && props2.loadingFile.status === "progress");
            });
            var inputName = vue.computed(function() {
              var fileName = props2.file && props2.file.name;
              var loadingName = props2.loadingFile && props2.loadingFile.name;
              return showProgress.value ? loadingName : fileName;
            });
            var inputText = vue.computed(function() {
              return inputName.value || props2.placeholder;
            });
            var inputTextClass = vue.computed(function() {
              return ["".concat(prefix.value, "-input__inner"), _defineProperty$3({}, "".concat(UPLOAD_NAME.value, "__placeholder"), !inputName.value)];
            });
            var classes = vue.computed(function() {
              return ["".concat(UPLOAD_NAME.value, "__single"), "".concat(UPLOAD_NAME.value, "__single-").concat(props2.theme)];
            });
            var renderProgress = function renderProgress2() {
              if (props2.loadingFile.status === "fail") {
                return vue.createVNode(errorCircleFilled, null, null);
              }
              if (props2.showUploadProgress) {
                return vue.createVNode("div", {
                  "class": "".concat(UPLOAD_NAME.value, "__single-progress")
                }, [vue.createVNode(Loading, null, null), vue.createVNode("span", {
                  "class": "".concat(UPLOAD_NAME.value, "__single-percent")
                }, [Math.min(props2.loadingFile.percent, 99), "%"])]);
              }
            };
            var renderFilePreviewAsText = function renderFilePreviewAsText2() {
              if (!inputName.value || props2.theme !== "file")
                return;
              return vue.createVNode("div", {
                "class": "".concat(UPLOAD_NAME.value, "__single-display-text ").concat(UPLOAD_NAME.value, "__display-text--margin")
              }, [vue.createVNode("span", {
                "class": "".concat(UPLOAD_NAME.value, "__single-name")
              }, [inputName.value]), showProgress.value ? renderProgress() : vue.createVNode(closeCircleFilled, {
                "class": "".concat(UPLOAD_NAME.value, "__icon-delete"),
                "onClick": function onClick(_ref2) {
                  var e = _ref2.e;
                  return props2.onRemove(e);
                }
              }, null)]);
            };
            var renderFilePreviewAsInput = function renderFilePreviewAsInput2() {
              if (props2.theme !== "file-input")
                return;
              var renderResult = function renderResult2() {
                if (!!props2.loadingFile && props2.loadingFile.status === "fail") {
                  return vue.createVNode(errorCircleFilled, null, null);
                }
                if (props2.file && props2.file.name && !props2.loadingFile) {
                  return vue.createVNode(checkCircleFilled, null, null);
                }
                return "";
              };
              return vue.createVNode("div", {
                "class": "".concat(UPLOAD_NAME.value, "__single-input-preview ").concat(prefix.value, "-input")
              }, [vue.createVNode("div", {
                "class": inputTextClass.value
              }, [vue.createVNode("span", {
                "class": "".concat(UPLOAD_NAME.value, "__single-input-text")
              }, [abridgeName(inputText.value, 4, 6)]), showProgress.value && renderProgress(), renderResult()])]);
            };
            return function() {
              return vue.createVNode("div", {
                "class": classes.value
              }, [renderFilePreviewAsInput(), renderTNodeJSX2("default"), renderFilePreviewAsText()]);
            };
          }
        });
        var Stack = _Stack, baseIsEqual$1 = _baseIsEqual;
        var COMPARE_PARTIAL_FLAG$1 = 1, COMPARE_UNORDERED_FLAG$1 = 2;
        function baseIsMatch$1(object, source, matchData, customizer) {
          var index2 = matchData.length, length = index2, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object(object);
          while (index2--) {
            var data = matchData[index2];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index2 < length) {
            data = matchData[index2];
            var key = data[0], objValue = object[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === void 0 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result === void 0 ? baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {
                return false;
              }
            }
          }
          return true;
        }
        var _baseIsMatch = baseIsMatch$1;
        var isObject = isObject_1;
        function isStrictComparable$2(value) {
          return value === value && !isObject(value);
        }
        var _isStrictComparable = isStrictComparable$2;
        var isStrictComparable$1 = _isStrictComparable, keys = keys_1;
        function getMatchData$1(object) {
          var result = keys(object), length = result.length;
          while (length--) {
            var key = result[length], value = object[key];
            result[length] = [key, value, isStrictComparable$1(value)];
          }
          return result;
        }
        var _getMatchData = getMatchData$1;
        function matchesStrictComparable$2(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
          };
        }
        var _matchesStrictComparable = matchesStrictComparable$2;
        var baseIsMatch = _baseIsMatch, getMatchData = _getMatchData, matchesStrictComparable$1 = _matchesStrictComparable;
        function baseMatches$1(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        var _baseMatches = baseMatches$1;
        var baseIsEqual = _baseIsEqual, get = get_1, hasIn = hasIn_1, isKey$1 = _isKey, isStrictComparable = _isStrictComparable, matchesStrictComparable = _matchesStrictComparable, toKey$1 = _toKey;
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        function baseMatchesProperty$1(path6, srcValue) {
          if (isKey$1(path6) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey$1(path6), srcValue);
          }
          return function(object) {
            var objValue = get(object, path6);
            return objValue === void 0 && objValue === srcValue ? hasIn(object, path6) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        var _baseMatchesProperty = baseMatchesProperty$1;
        function baseProperty$1(key) {
          return function(object) {
            return object == null ? void 0 : object[key];
          };
        }
        var _baseProperty = baseProperty$1;
        var baseGet = _baseGet;
        function basePropertyDeep$1(path6) {
          return function(object) {
            return baseGet(object, path6);
          };
        }
        var _basePropertyDeep = basePropertyDeep$1;
        var baseProperty = _baseProperty, basePropertyDeep = _basePropertyDeep, isKey = _isKey, toKey = _toKey;
        function property$1(path6) {
          return isKey(path6) ? baseProperty(toKey(path6)) : basePropertyDeep(path6);
        }
        var property_1 = property$1;
        var baseMatches = _baseMatches, baseMatchesProperty = _baseMatchesProperty, identity = identity_1, isArray = isArray_1, property = property_1;
        function baseIteratee$1(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (_typeof$2(value) == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        var _baseIteratee = baseIteratee$1;
        var baseFindIndex = _baseFindIndex, baseIteratee = _baseIteratee, toInteger = toInteger_1;
        var nativeMax = Math.max;
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index2 = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index2 < 0) {
            index2 = nativeMax(length + index2, 0);
          }
          return baseFindIndex(array, baseIteratee(predicate), index2);
        }
        var findIndex_1 = findIndex;
        var baseDifference = _baseDifference, baseRest = _baseRest, isArrayLikeObject = isArrayLikeObject_1;
        var without = baseRest(function(array, values) {
          return isArrayLikeObject(array) ? baseDifference(array, values) : [];
        });
        var without_1 = without;
        function xhr(_ref) {
          var _ref$method = _ref.method, method = _ref$method === void 0 ? "POST" : _ref$method, action = _ref.action, _ref$withCredentials = _ref.withCredentials, withCredentials = _ref$withCredentials === void 0 ? false : _ref$withCredentials, _ref$headers = _ref.headers, headers = _ref$headers === void 0 ? {} : _ref$headers, _ref$data = _ref.data, data = _ref$data === void 0 ? {} : _ref$data, file = _ref.file, files = _ref.files, _ref$name = _ref.name, name = _ref$name === void 0 ? "file" : _ref$name, onError = _ref.onError, onProgress = _ref.onProgress, onSuccess = _ref.onSuccess;
          var innerFiles = files || [];
          var xhr2 = new XMLHttpRequest();
          if (withCredentials) {
            xhr2.withCredentials = true;
          }
          var formData = new FormData();
          var sendData = typeof data === "function" ? data(file) : data;
          Object.keys(sendData).forEach(function(key) {
            formData.append(key, data[key]);
          });
          innerFiles.forEach(function(f) {
            formData.append(name, f && f.raw);
          });
          xhr2.open(method, action, true);
          Object.keys(headers).forEach(function(key) {
            xhr2.setRequestHeader(key, headers[key]);
          });
          xhr2.onerror = function(event) {
            return onError({
              event,
              file,
              files: innerFiles
            });
          };
          if (xhr2.upload) {
            xhr2.upload.onprogress = function(event) {
              var percent = 0;
              if (event.total > 0) {
                percent = Math.round(event.loaded / event.total * 100);
              }
              onProgress({
                event,
                percent,
                file,
                files: innerFiles
              });
            };
          }
          xhr2.onload = function(event) {
            var response;
            var isFail = xhr2.status < 200 || xhr2.status >= 300;
            if (isFail) {
              return onError({
                event,
                file,
                files: innerFiles,
                response
              });
            }
            var text = xhr2.responseText || xhr2.response;
            try {
              response = JSON.parse(text);
            } catch (e) {
              response = text;
            }
            onSuccess({
              event,
              file,
              files: innerFiles,
              response
            });
          };
          xhr2.send(formData);
          return xhr2;
        }
        function ownKeys$2(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$2(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$2(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var useUploadProgress = function useUploadProgress2(props2, uploadCtx) {
          var handleProgress = function handleProgress2(_ref) {
            var _props$onProgress;
            var event = _ref.event, file = _ref.file, currentFiles = _ref.files, percent = _ref.percent, _ref$type = _ref.type, type = _ref$type === void 0 ? "real" : _ref$type;
            var innerFiles = Array.isArray(currentFiles) ? currentFiles : [file];
            if ((innerFiles === null || innerFiles === void 0 ? void 0 : innerFiles.length) <= 0)
              return log.error("Uploader", "Progress Error files");
            innerFiles.forEach(function(file2) {
              file2.percent = Math.min(percent, 100);
              uploadCtx.loadingFile = file2;
            });
            var progressCtx = {
              percent,
              e: event,
              file,
              type,
              currentFiles: innerFiles
            };
            (_props$onProgress = props2.onProgress) === null || _props$onProgress === void 0 ? void 0 : _props$onProgress.call(props2, progressCtx);
          };
          var onError = function onError2(options) {
            var _res, _props$onFail;
            var event = options.event, file = options.file, files = options.files, response = options.response, resFormatted = options.resFormatted;
            var innerFiles = Array.isArray(files) ? files : [file];
            innerFiles.forEach(function(file2) {
              file2.status = "fail";
              uploadCtx.loadingFile = file2;
            });
            var res = response;
            if (!resFormatted && typeof props2.formatResponse === "function") {
              res = props2.formatResponse(response, {
                file,
                currentFiles: files
              });
            }
            uploadCtx.errorMsg = (_res = res) === null || _res === void 0 ? void 0 : _res.error;
            var context = {
              e: event,
              file: uploadCtx.uploadInOneRequest ? null : innerFiles[0],
              currentFiles: innerFiles
            };
            (_props$onFail = props2.onFail) === null || _props$onFail === void 0 ? void 0 : _props$onFail.call(props2, context);
            uploadCtx.loadingFile = null;
          };
          var handleSuccess = function handleSuccess2(_ref2) {
            var _res2, _props$onSuccess;
            var event = _ref2.event, file = _ref2.file, currentFiles = _ref2.files, response = _ref2.response;
            var innerFiles = Array.isArray(currentFiles) ? currentFiles : [file];
            if ((innerFiles === null || innerFiles === void 0 ? void 0 : innerFiles.length) <= 0)
              return log.error("Uploader", "success no files");
            innerFiles.forEach(function(file2) {
              file2.status = "success";
            });
            var res = response;
            if (typeof props2.formatResponse === "function") {
              res = props2.formatResponse(response, {
                file: uploadCtx.uploadInOneRequest ? null : innerFiles[0],
                currentFiles: innerFiles
              });
            }
            if ((_res2 = res) !== null && _res2 !== void 0 && _res2.error) {
              onError({
                event,
                file: uploadCtx.uploadInOneRequest ? null : innerFiles[0],
                files: innerFiles,
                response: res,
                resFormatted: true
              });
              return;
            }
            if (!uploadCtx.uploadInOneRequest) {
              innerFiles[0].url = res.url || innerFiles[0].url;
            }
            uploadCtx.toUploadFiles = without_1.apply(void 0, [uploadCtx.toUploadFiles].concat(_toConsumableArray(innerFiles)));
            var newFiles = innerFiles.map(function(file2) {
              return _objectSpread$2(_objectSpread$2({}, file2), {}, {
                response: res
              });
            });
            var uploadedFiles = props2.multiple ? uploadCtx.uploadValue.concat(newFiles) : newFiles;
            var context = {
              e: event,
              response: res,
              trigger: "upload-success"
            };
            uploadCtx.setUploadValue(uploadedFiles, context);
            var sContext = {
              file: uploadCtx.uploadInOneRequest ? null : newFiles[0],
              fileList: uploadedFiles,
              currentFiles: newFiles,
              e: event,
              response: res
            };
            (_props$onSuccess = props2.onSuccess) === null || _props$onSuccess === void 0 ? void 0 : _props$onSuccess.call(props2, sContext);
            uploadCtx.loadingFile = null;
          };
          var handleMockProgress = function handleMockProgress2(files) {
            var timer = setInterval(function() {
              files.forEach(function(file) {
                if (file.status === "success" || file.percent >= 99) {
                  clearInterval(timer);
                  return;
                }
                file.percent += 1;
              });
              var percent = files[0].percent;
              handleProgress({
                files,
                percent,
                type: "mock"
              });
            }, 10);
          };
          return {
            handleProgress,
            handleMockProgress,
            handleSuccess,
            onError
          };
        };
        var useUpload = function useUpload2(props2, uploadCtx) {
          var xhrReq = vue.ref(null);
          var _useConfig = useConfig("upload"), global2 = _useConfig.global, t = _useConfig.t;
          var _useUploadProgress = useUploadProgress(props2, uploadCtx), handleProgress = _useUploadProgress.handleProgress, handleMockProgress = _useUploadProgress.handleMockProgress, handleSuccess = _useUploadProgress.handleSuccess, onError = _useUploadProgress.onError;
          var handleSizeLimit = function handleSizeLimit2(fileSize) {
            var sizeLimit = typeof props2.sizeLimit === "number" ? {
              size: props2.sizeLimit,
              unit: "KB"
            } : props2.sizeLimit;
            var rSize = isOverSizeLimit(fileSize / 1024, sizeLimit.size, sizeLimit.unit);
            if (!rSize) {
              uploadCtx.errorMsg = sizeLimit.message ? t(sizeLimit.message, {
                sizeLimit: sizeLimit.size
              }) : "".concat(t(global2.value.sizeLimitMessage, {
                sizeLimit: sizeLimit.size
              }), " ").concat(sizeLimit.unit);
            }
            return rSize;
          };
          var handleBeforeUpload = function handleBeforeUpload2(file) {
            if (typeof props2.beforeUpload === "function") {
              var r = props2.beforeUpload(file);
              if (r instanceof Promise)
                return r;
              return new Promise(function(resolve) {
                return resolve(r);
              });
            }
            return new Promise(function(resolve) {
              if (props2.sizeLimit) {
                resolve(handleSizeLimit(file.size));
              }
              resolve(true);
            });
          };
          var handleRequestMethodResponse = function handleRequestMethodResponse2(res) {
            if (!res) {
              log.error("Upload", "`requestMethodResponse` is required.");
              return false;
            }
            if (!res.status) {
              log.error("Upload", "`requestMethodResponse.status` is missing, which value is `success` or `fail`");
              return false;
            }
            if (!["success", "fail"].includes(res.status)) {
              log.error("Upload", "`requestMethodResponse.status` must be `success` or `fail`");
              return false;
            }
            if (res.status === "success" && (!res.response || !res.response.url)) {
              log.warn("Upload", "`requestMethodResponse.response.url` is required, when `status` is `success`");
            }
            return true;
          };
          var handleRequestMethod = function handleRequestMethod2(files) {
            if (!isFunction_1(props2.requestMethod)) {
              log.warn("Upload", "`requestMethod` must be a function.");
              return;
            }
            var requestMethodParam = uploadCtx.uploadInOneRequest ? files : files[0];
            props2.requestMethod(requestMethodParam).then(function(res) {
              if (!handleRequestMethodResponse(res))
                return;
              if (res.status === "success") {
                handleSuccess({
                  files,
                  response: res.response
                });
              } else if (res.status === "fail") {
                var r = res.response || {};
                onError({
                  event: null,
                  file: uploadCtx.uploadInOneRequest ? null : files[0],
                  files,
                  response: _objectSpread$2(_objectSpread$2({}, r), {}, {
                    error: res.error
                  })
                });
              }
            });
          };
          var upload2 = /* @__PURE__ */ function() {
            var _ref3 = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee(currentFiles) {
              var innerFiles, request;
              return regenerator.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      innerFiles = Array.isArray(currentFiles) ? currentFiles : [currentFiles];
                      if (!(!props2.action && !props2.requestMethod)) {
                        _context.next = 4;
                        break;
                      }
                      log.error("Upload", "one of action and requestMethod must be exist.");
                      return _context.abrupt("return");
                    case 4:
                      innerFiles.forEach(function(file) {
                        file.status = "progress";
                        uploadCtx.loadingFile = file;
                      });
                      if (props2.requestMethod) {
                        handleRequestMethod(innerFiles);
                      } else {
                        if (props2.useMockProgress) {
                          handleMockProgress(innerFiles);
                        }
                        request = xhr;
                        xhrReq.value = request({
                          action: props2.action,
                          data: props2.data,
                          files: innerFiles,
                          name: props2.name,
                          headers: props2.headers,
                          withCredentials: props2.withCredentials,
                          onError,
                          onProgress: handleProgress,
                          onSuccess: handleSuccess,
                          method: props2.method
                        });
                      }
                    case 6:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            }));
            return function upload3(_x) {
              return _ref3.apply(this, arguments);
            };
          }();
          var uploadFiles = function uploadFiles2(files) {
            var _uploadCtx$uploadValu;
            if (uploadCtx.canBatchUpload && ((_uploadCtx$uploadValu = uploadCtx.uploadValue) === null || _uploadCtx$uploadValu === void 0 ? void 0 : _uploadCtx$uploadValu.length) > 0) {
              var context = {
                trigger: "batch-clear"
              };
              uploadCtx.setUploadValue([], context);
            }
            var tmpFiles = _toConsumableArray(files);
            if (props2.max) {
              tmpFiles = tmpFiles.slice(0, props2.max - uploadCtx.uploadValue.length);
              if (tmpFiles.length !== files.length) {
                console.warn("TDesign Upload Warn: you can only upload ".concat(props2.max, " files"));
              }
            }
            tmpFiles.forEach(function(fileRaw) {
              var file = fileRaw;
              if (typeof props2.format === "function") {
                file = props2.format(fileRaw);
              }
              var uploadFile = _objectSpread$2({
                raw: fileRaw,
                lastModified: fileRaw.lastModified,
                name: fileRaw.name,
                size: fileRaw.size,
                type: fileRaw.type,
                percent: 0,
                status: "waiting"
              }, file);
              var reader = new FileReader();
              reader.readAsDataURL(fileRaw);
              reader.onload = function(event) {
                uploadFile.url = event.target.result;
              };
              handleBeforeUpload(file).then(function(canUpload) {
                if (!canUpload)
                  return;
                var newFiles = uploadCtx.toUploadFiles.concat();
                newFiles.push(uploadFile);
                uploadCtx.toUploadFiles = _toConsumableArray(new Set(newFiles));
                uploadCtx.loadingFile = uploadFile;
                if (props2.autoUpload) {
                  upload2(uploadFile);
                }
              });
            });
          };
          return {
            uploadFiles,
            upload: upload2,
            xhrReq
          };
        };
        function ownKeys$1(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread$1(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys$1(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        var useComponentsStatus = function useComponentsStatus2(props2, uploadCtx) {
          var showUploadList = vue.computed(function() {
            return props2.multiple && ["file-flow", "image-flow"].includes(props2.theme);
          });
          var showTips = vue.computed(function() {
            if (props2.theme === "file") {
              var hasNoFile = (!uploadCtx.uploadValue || !uploadCtx.uploadValue.length) && !uploadCtx.loadingFile;
              return props2.tips && hasNoFile;
            }
            return Boolean(props2.tips);
          });
          var showErrorMsg = vue.computed(function() {
            return !showUploadList.value && !!uploadCtx.errorMsg;
          });
          var singleDraggable = vue.computed(function() {
            return !props2.multiple && props2.draggable && ["file", "file-input", "image"].includes(props2.theme);
          });
          return {
            showUploadList,
            showTips,
            showErrorMsg,
            singleDraggable
          };
        };
        var useImgPreview = function useImgPreview2(props2) {
          var showImageViewUrl = vue.ref("");
          var showImageViewDialog = vue.ref(false);
          var handlePreviewImg = function handlePreviewImg2(event, file) {
            var _props$onPreview;
            if (!file || !file.url)
              return log.error("Uploader", "Preview Error file");
            showImageViewUrl.value = file.url;
            showImageViewDialog.value = true;
            var previewCtx = {
              file,
              e: event
            };
            (_props$onPreview = props2.onPreview) === null || _props$onPreview === void 0 ? void 0 : _props$onPreview.call(props2, previewCtx);
          };
          var cancelPreviewImgDialog = function cancelPreviewImgDialog2() {
            showImageViewDialog.value = false;
            var timer = setTimeout(function() {
              showImageViewUrl.value = null;
              clearTimeout(timer);
              timer = null;
            }, 500);
          };
          return {
            showImageViewUrl,
            showImageViewDialog,
            handlePreviewImg,
            cancelPreviewImgDialog
          };
        };
        var useDragger = function useDragger2(props2, disabled) {
          var dragActive = vue.ref(false);
          var handleDragenter = function handleDragenter2(e) {
            var _props$onDragenter;
            if (disabled.value)
              return;
            dragActive.value = true;
            (_props$onDragenter = props2.onDragenter) === null || _props$onDragenter === void 0 ? void 0 : _props$onDragenter.call(props2, {
              e
            });
          };
          var handleDragleave = function handleDragleave2(e) {
            var _props$onDragleave;
            if (disabled.value)
              return;
            dragActive.value = false;
            (_props$onDragleave = props2.onDragleave) === null || _props$onDragleave === void 0 ? void 0 : _props$onDragleave.call(props2, {
              e
            });
          };
          return {
            handleDragenter,
            handleDragleave,
            dragActive
          };
        };
        var useRemove = function useRemove2(props2, uploadCtx) {
          var handleSingleRemove = function handleSingleRemove2(e) {
            var _props$onRemove;
            var changeCtx = {
              trigger: "remove"
            };
            if (uploadCtx.loadingFile)
              uploadCtx.loadingFile = null;
            uploadCtx.errorMsg = "";
            uploadCtx.setUploadValue([], changeCtx);
            (_props$onRemove = props2.onRemove) === null || _props$onRemove === void 0 ? void 0 : _props$onRemove.call(props2, {
              e
            });
          };
          var handleFileInputRemove = function handleFileInputRemove2(e) {
            e === null || e === void 0 ? void 0 : e.stopPropagation();
            handleSingleRemove(e);
          };
          var handleMultipleRemove = function handleMultipleRemove2(options) {
            var _props$onRemove2;
            var files = [];
            if (!uploadCtx.canBatchUpload) {
              files = uploadCtx.uploadValue.concat();
              files.splice(options.index, 1);
            } else {
              files = [];
              options.files = uploadCtx.uploadValue.concat();
            }
            var changeCtx = _objectSpread$1({
              trigger: "remove"
            }, options);
            uploadCtx.setUploadValue(files, changeCtx);
            (_props$onRemove2 = props2.onRemove) === null || _props$onRemove2 === void 0 ? void 0 : _props$onRemove2.call(props2, options);
          };
          var handleListRemove = function handleListRemove2(context) {
            var file = context.file;
            var index2 = findIndex_1(uploadCtx.toUploadFiles, function(o) {
              return o.name === (file === null || file === void 0 ? void 0 : file.name);
            });
            if (index2 >= 0) {
              uploadCtx.toUploadFiles.splice(index2, 1);
            } else {
              var index22 = findIndex_1(uploadCtx.uploadValue, function(o) {
                return o.name === (file === null || file === void 0 ? void 0 : file.name);
              });
              handleMultipleRemove({
                e: context.e,
                index: index22
              });
            }
          };
          return {
            handleFileInputRemove,
            handleSingleRemove,
            handleMultipleRemove,
            handleListRemove
          };
        };
        var useActions = function useActions2(props2, uploadCtx, disabled) {
          var _useUpload = useUpload(props2, uploadCtx), uploadFiles = _useUpload.uploadFiles, upload2 = _useUpload.upload, xhrReq = _useUpload.xhrReq;
          var inputRef = vue.ref(null);
          var handleChange = function handleChange2(event) {
            var files = event.target.files;
            if (disabled.value)
              return;
            uploadFiles(files);
            inputRef.value.value = "";
          };
          var multipleUpload = function multipleUpload2(currentFiles) {
            if (props2.uploadAllFilesInOneRequest) {
              upload2(currentFiles);
            } else {
              currentFiles.forEach(function(file) {
                upload2(file);
              });
            }
          };
          var triggerUpload = function triggerUpload2() {
            if (disabled.value)
              return;
            inputRef.value.click();
          };
          var cancelUpload = function cancelUpload2() {
            if (uploadCtx.loadingFile) {
              var _props$onCancelUpload;
              if (!props2.requestMethod) {
                xhrReq.value && xhrReq.value.abort();
                uploadCtx.toUploadFiles = [];
              }
              (_props$onCancelUpload = props2.onCancelUpload) === null || _props$onCancelUpload === void 0 ? void 0 : _props$onCancelUpload.call(props2);
              uploadCtx.loadingFile = null;
            }
            inputRef.value.value = "";
          };
          var handleDragChange = function handleDragChange2(files) {
            if (disabled.value)
              return;
            uploadFiles(files);
          };
          return {
            handleChange,
            multipleUpload,
            triggerUpload,
            cancelUpload,
            handleDragChange,
            upload: upload2,
            inputRef
          };
        };
        var useBatchUpload = function useBatchUpload2(props2) {
          var uploadInOneRequest = vue.computed(function() {
            return props2.multiple && props2.uploadAllFilesInOneRequest;
          });
          var canBatchUpload = vue.computed(function() {
            return uploadInOneRequest.value && props2.isBatchUpload;
          });
          return {
            uploadInOneRequest,
            canBatchUpload
          };
        };
        function ownKeys(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            enumerableOnly && (symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            })), keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source = null != arguments[i2] ? arguments[i2] : {};
            i2 % 2 ? ownKeys(Object(source), true).forEach(function(key) {
              _defineProperty$3(target, key, source[key]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
          return target;
        }
        function _isSlot(s) {
          return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
        }
        var _Upload = vue.defineComponent({
          name: "TUpload",
          props,
          setup: function setup(props2, _ref) {
            var expose = _ref.expose;
            var renderTNodeContent = useContent();
            var _useConfig = useConfig("upload"), prefix = _useConfig.classPrefix, global2 = _useConfig.global;
            var UPLOAD_NAME = usePrefixClass("upload");
            var _toRefs = vue.toRefs(props2), files = _toRefs.files, modelValue = _toRefs.modelValue;
            var _useBatchUpload = useBatchUpload(props2), canBatchUpload = _useBatchUpload.canBatchUpload, uploadInOneRequest = _useBatchUpload.uploadInOneRequest;
            var _useVModel = useVModel(files, modelValue, props2.defaultFiles || [], props2.onChange, "files"), _useVModel2 = _slicedToArray(_useVModel, 2), uploadValue = _useVModel2[0], setUploadValue = _useVModel2[1];
            var uploadCtx = vue.reactive({
              uploadValue,
              setUploadValue,
              uploadInOneRequest,
              canBatchUpload,
              loadingFile: null,
              toUploadFiles: [],
              errorMsg: ""
            });
            var disabled = useFormDisabled();
            var _useComponentsStatus = useComponentsStatus(props2, uploadCtx), showUploadList = _useComponentsStatus.showUploadList, showTips = _useComponentsStatus.showTips, showErrorMsg = _useComponentsStatus.showErrorMsg, singleDraggable = _useComponentsStatus.singleDraggable;
            var _useImgPreview = useImgPreview(props2), showImageViewUrl = _useImgPreview.showImageViewUrl, showImageViewDialog = _useImgPreview.showImageViewDialog, handlePreviewImg = _useImgPreview.handlePreviewImg, cancelPreviewImgDialog = _useImgPreview.cancelPreviewImgDialog;
            var _useDragger = useDragger(props2, disabled), handleDragenter = _useDragger.handleDragenter, handleDragleave = _useDragger.handleDragleave, dragActive = _useDragger.dragActive;
            var _useRemove = useRemove(props2, uploadCtx), handleFileInputRemove = _useRemove.handleFileInputRemove, handleSingleRemove = _useRemove.handleSingleRemove, handleMultipleRemove = _useRemove.handleMultipleRemove, handleListRemove = _useRemove.handleListRemove;
            var _useActions = useActions(props2, uploadCtx, disabled), handleChange = _useActions.handleChange, multipleUpload = _useActions.multipleUpload, triggerUpload = _useActions.triggerUpload, cancelUpload = _useActions.cancelUpload, handleDragChange = _useActions.handleDragChange, upload$1 = _useActions.upload, inputRef = _useActions.inputRef;
            expose({
              triggerUpload
            });
            var renderInput = function renderInput2() {
              return vue.createVNode("input", {
                "ref": inputRef,
                "type": "file",
                "disabled": disabled.value,
                "onChange": handleChange,
                "multiple": props2.multiple,
                "accept": props2.accept,
                "hidden": true
              }, null);
            };
            var renderSingleDisplay = function renderSingleDisplay2(triggerElement) {
              var _uploadValue$value;
              return !props2.draggable && ["file", "file-input"].includes(props2.theme) && vue.createVNode(SingleFile, {
                "file": uploadValue.value && uploadValue.value[0],
                "loadingFile": uploadCtx.loadingFile,
                "theme": props2.theme,
                "onRemove": handleSingleRemove,
                "showUploadProgress": props2.showUploadProgress,
                "placeholder": props2.placeholder
              }, {
                "default": function _default() {
                  return [vue.createVNode("div", {
                    "class": "".concat(prefix.value, "-upload__trigger"),
                    "onclick": triggerUpload
                  }, [triggerElement, !!(props2.theme === "file-input" && (_uploadValue$value = uploadValue.value) !== null && _uploadValue$value !== void 0 && _uploadValue$value.length) && vue.createVNode(Button, {
                    "theme": "primary",
                    "variant": "text",
                    "onClick": handleFileInputRemove
                  }, {
                    "default": function _default2() {
                      return ["\u5220\u9664"];
                    }
                  })])];
                }
              });
            };
            var renderDraggerTrigger = function renderDraggerTrigger2() {
              var params = {
                dragActive: dragActive.value,
                uploadingFile: props2.multiple ? uploadCtx.toUploadFiles : uploadCtx.loadingFile
              };
              var triggerElement = renderTNodeContent("default", "trigger", {
                params
              });
              if (!Array.isArray(triggerElement)) {
                triggerElement = {};
              }
              return vue.createVNode(Dragger, {
                "showUploadProgress": props2.showUploadProgress,
                "loadingFile": uploadCtx.loadingFile,
                "file": uploadValue.value && uploadValue.value[0],
                "theme": props2.theme,
                "autoUpload": props2.autoUpload,
                "onChange": handleDragChange,
                "onDragenter": handleDragenter,
                "onDragleave": handleDragleave,
                "onCancel": cancelUpload,
                "onClick": triggerUpload,
                "onRemove": handleSingleRemove,
                "onUpload": upload$1
              }, _isSlot(triggerElement) ? triggerElement : {
                "default": function _default() {
                  return [triggerElement];
                }
              });
            };
            var uploadListTriggerText = vue.computed(function() {
              var _uploadCtx$toUploadFi, _uploadCtx$uploadValu;
              var uploadText = global2.value.triggerUploadText.fileInput;
              if (((_uploadCtx$toUploadFi = uploadCtx.toUploadFiles) === null || _uploadCtx$toUploadFi === void 0 ? void 0 : _uploadCtx$toUploadFi.length) > 0 || ((_uploadCtx$uploadValu = uploadCtx.uploadValue) === null || _uploadCtx$uploadValu === void 0 ? void 0 : _uploadCtx$uploadValu.length) > 0) {
                var _uploadCtx$uploadValu2;
                if (props2.theme === "file-input" || ((_uploadCtx$uploadValu2 = uploadCtx.uploadValue) === null || _uploadCtx$uploadValu2 === void 0 ? void 0 : _uploadCtx$uploadValu2.length) > 0 && canBatchUpload.value) {
                  uploadText = global2.value.triggerUploadText.reupload;
                } else {
                  uploadText = global2.value.triggerUploadText.continueUpload;
                }
              }
              return uploadText;
            });
            var renderTrigger = function renderTrigger2() {
              var getDefaultTrigger = function getDefaultTrigger2() {
                if (props2.theme === "file-input" || showUploadList.value) {
                  return vue.createVNode(vue.resolveComponent("t-button"), {
                    "variant": "outline"
                  }, {
                    "default": function _default() {
                      return [global2.value.triggerUploadText.fileInput];
                    }
                  });
                }
                var iconSlot = {
                  icon: function icon() {
                    return vue.createVNode(upload, null, null);
                  }
                };
                return vue.createVNode(Button, {
                  "variant": "outline"
                }, _objectSpread({
                  "default": function _default() {
                    return [uploadListTriggerText.value];
                  }
                }, iconSlot));
              };
              var defaultNode = getDefaultTrigger();
              return renderTNodeContent("default", "trigger", defaultNode);
            };
            var renderCustom = function renderCustom2(triggerElement) {
              if (props2.theme !== "custom")
                return;
              return props2.draggable ? renderDraggerTrigger() : vue.createVNode("div", {
                "class": "".concat(UPLOAD_NAME.value, "__trigger"),
                "onclick": triggerUpload
              }, [triggerElement]);
            };
            var renderImgCard = function renderImgCard2() {
              return !props2.draggable && props2.theme === "image" && vue.createVNode(ImageCard, {
                "files": uploadValue.value,
                "loadingFile": uploadCtx.loadingFile,
                "showUploadProgress": props2.showUploadProgress,
                "placeholder": props2.placeholder,
                "multiple": props2.multiple,
                "max": props2.max,
                "disabled": disabled.value,
                "onClick": triggerUpload,
                "onRemove": handleMultipleRemove,
                "onImgPreview": handlePreviewImg
              }, null);
            };
            var renderFlowList = function renderFlowList2(triggerElement) {
              return showUploadList.value && vue.createVNode(FlowList, {
                "files": uploadValue.value,
                "placeholder": props2.placeholder,
                "autoUpload": props2.autoUpload,
                "toUploadFiles": uploadCtx.toUploadFiles,
                "theme": props2.theme,
                "batchUpload": uploadCtx.canBatchUpload,
                "showUploadProgress": props2.showUploadProgress,
                "onRemove": handleListRemove,
                "onUpload": multipleUpload,
                "onCancel": cancelUpload,
                "onImgPreview": handlePreviewImg,
                "onChange": handleDragChange,
                "onDragenter": handleDragenter,
                "onDragleave": handleDragleave
              }, {
                "default": function _default() {
                  return [vue.createVNode("div", {
                    "class": "".concat(UPLOAD_NAME.value, "__trigger"),
                    "onclick": triggerUpload
                  }, [triggerElement])];
                }
              });
            };
            var renderDialog = function renderDialog2() {
              return ["image", "image-flow", "custom"].includes(props2.theme) && vue.createVNode(Dialog, {
                "visible": showImageViewDialog.value,
                "showOverlay": true,
                "width": "auto",
                "top": "10%",
                "class": "".concat(UPLOAD_NAME.value, "__dialog"),
                "footer": false,
                "header": false,
                "onClose": cancelPreviewImgDialog
              }, {
                "default": function _default() {
                  return [vue.createVNode("div", {
                    "class": "".concat(prefix.value, "__dialog-body-img-box")
                  }, [vue.createVNode("img", {
                    "src": showImageViewUrl.value,
                    "alt": ""
                  }, null)])];
                }
              });
            };
            var tipsClasses = vue.computed(function() {
              return ["".concat(UPLOAD_NAME.value, "__tips ").concat(prefix.value, "-size-s")];
            });
            var errorClasses = vue.computed(function() {
              return tipsClasses.value.concat("".concat(UPLOAD_NAME.value, "__tips-error"));
            });
            return function() {
              var triggerElement = renderTrigger();
              return vue.createVNode("div", {
                "class": "".concat(UPLOAD_NAME.value)
              }, [renderInput(), renderCustom(triggerElement), renderSingleDisplay(triggerElement), singleDraggable.value && renderDraggerTrigger(), renderImgCard(), renderFlowList(triggerElement), renderDialog(), !uploadCtx.errorMsg && showTips.value && vue.createVNode("small", {
                "class": tipsClasses.value
              }, [props2.tips]), showErrorMsg.value && vue.createVNode("small", {
                "class": errorClasses.value
              }, [uploadCtx.errorMsg])]);
            };
          }
        });
        var Upload = withInstall(_Upload);
        var _ConfigProvider = vue.defineComponent({
          name: "TConfigProvider",
          props: {
            globalConfig: Object
          },
          setup: function setup(props2) {
            vue.provide("globalConfig", vue.computed(function() {
              return props2.globalConfig;
            }));
            var renderTNodeJSX2 = useTNodeJSX();
            return function() {
              var defaultNode = renderTNodeJSX2("default");
              if (defaultNode.length === 1) {
                return defaultNode[0];
              }
              return vue.createVNode("div", null, [defaultNode]);
            };
          }
        });
        var ConfigProvider = withInstall(_ConfigProvider);
        var components = /* @__PURE__ */ Object.freeze({
          __proto__: null,
          Button,
          Divider,
          Icon,
          Row,
          Col,
          Aside,
          Layout,
          Header,
          Footer,
          Content: Content$1,
          Affix,
          Anchor,
          AnchorItem,
          AnchorTarget,
          Breadcrumb,
          BreadcrumbItem,
          Dropdown,
          DropdownItem,
          DropdownMenu,
          Menu,
          HeadMenu,
          Submenu,
          MenuItem,
          MenuGroup,
          Pagination,
          Steps,
          StepItem,
          Tabs,
          TabPanel,
          Cascader,
          Checkbox,
          CheckboxGroup,
          DatePicker,
          Form,
          FormItem,
          Addon,
          Input,
          InputGroup,
          InputNumber,
          Radio,
          RadioGroup,
          RadioButton,
          Select,
          Option,
          OptionGroup,
          Slider,
          SliderButton,
          Switch,
          TagInput,
          SelectInput,
          Textarea,
          Transfer,
          TimePicker,
          TimeRangePicker,
          TreeSelect,
          ColorPickerPanel,
          ColorPicker,
          Avatar,
          AvatarGroup,
          Badge,
          Calendar,
          Card,
          Comment: Comment$1,
          List,
          ListItem,
          ListItemMeta,
          Progress,
          Skeleton,
          Swiper,
          SwiperItem,
          BaseTable,
          PrimaryTable,
          EnhancedTable,
          Table,
          Tag,
          CheckTag,
          Tooltip,
          Tree,
          Collapse,
          CollapsePanel,
          Alert,
          DialogPlugin,
          Dialog,
          Drawer,
          LoadingPlugin,
          Loading,
          MessagePlugin,
          Message,
          NotifyPlugin: NotificationPlugin,
          Notification,
          Popconfirm,
          Popup,
          Upload,
          ConfigProvider
        });
        function install(app2, config) {
          Object.keys(components).forEach(function(key) {
            /plugin/i.test(key) ? app2.use(components[key]) : app2.use(components[key], config);
          });
        }
        var tdesign = {
          install,
          version: "0.15.4"
        };
        if (typeof console !== "undefined" && console.warn && typeof window !== "undefined") {
          console.warn("You are using a whole package of TDesign!");
        }
        exports2.Addon = Addon;
        exports2.Affix = Affix;
        exports2.Alert = Alert;
        exports2.Anchor = Anchor;
        exports2.AnchorItem = AnchorItem;
        exports2.AnchorTarget = AnchorTarget;
        exports2.Aside = Aside;
        exports2.Avatar = Avatar;
        exports2.AvatarGroup = AvatarGroup;
        exports2.Badge = Badge;
        exports2.BaseTable = BaseTable;
        exports2.Breadcrumb = Breadcrumb;
        exports2.BreadcrumbItem = BreadcrumbItem;
        exports2.Button = Button;
        exports2.Calendar = Calendar;
        exports2.Card = Card;
        exports2.Cascader = Cascader;
        exports2.CheckTag = CheckTag;
        exports2.Checkbox = Checkbox;
        exports2.CheckboxGroup = CheckboxGroup;
        exports2.Col = Col;
        exports2.Collapse = Collapse;
        exports2.CollapsePanel = CollapsePanel;
        exports2.ColorPicker = ColorPicker;
        exports2.ColorPickerPanel = ColorPickerPanel;
        exports2.Comment = Comment$1;
        exports2.ConfigProvider = ConfigProvider;
        exports2.Content = Content$1;
        exports2.DatePicker = DatePicker;
        exports2.Dialog = Dialog;
        exports2.DialogPlugin = DialogPlugin;
        exports2.Divider = Divider;
        exports2.Drawer = Drawer;
        exports2.Dropdown = Dropdown;
        exports2.DropdownItem = DropdownItem;
        exports2.DropdownMenu = DropdownMenu;
        exports2.EnhancedTable = EnhancedTable;
        exports2.Footer = Footer;
        exports2.Form = Form;
        exports2.FormItem = FormItem;
        exports2.HeadMenu = HeadMenu;
        exports2.Header = Header;
        exports2.Icon = Icon;
        exports2.Input = Input;
        exports2.InputGroup = InputGroup;
        exports2.InputNumber = InputNumber;
        exports2.Layout = Layout;
        exports2.List = List;
        exports2.ListItem = ListItem;
        exports2.ListItemMeta = ListItemMeta;
        exports2.Loading = Loading;
        exports2.LoadingPlugin = LoadingPlugin;
        exports2.Menu = Menu;
        exports2.MenuGroup = MenuGroup;
        exports2.MenuItem = MenuItem;
        exports2.Message = Message;
        exports2.MessagePlugin = MessagePlugin;
        exports2.Notification = Notification;
        exports2.NotifyPlugin = NotificationPlugin;
        exports2.Option = Option;
        exports2.OptionGroup = OptionGroup;
        exports2.Pagination = Pagination;
        exports2.Popconfirm = Popconfirm;
        exports2.Popup = Popup;
        exports2.PrimaryTable = PrimaryTable;
        exports2.Progress = Progress;
        exports2.Radio = Radio;
        exports2.RadioButton = RadioButton;
        exports2.RadioGroup = RadioGroup;
        exports2.Row = Row;
        exports2.Select = Select;
        exports2.SelectInput = SelectInput;
        exports2.Skeleton = Skeleton;
        exports2.Slider = Slider;
        exports2.SliderButton = SliderButton;
        exports2.StepItem = StepItem;
        exports2.Steps = Steps;
        exports2.Submenu = Submenu;
        exports2.Swiper = Swiper;
        exports2.SwiperItem = SwiperItem;
        exports2.Switch = Switch;
        exports2.TabPanel = TabPanel;
        exports2.Table = Table;
        exports2.Tabs = Tabs;
        exports2.Tag = Tag;
        exports2.TagInput = TagInput;
        exports2.Textarea = Textarea;
        exports2.TimePicker = TimePicker;
        exports2.TimeRangePicker = TimeRangePicker;
        exports2.Tooltip = Tooltip;
        exports2.Transfer = Transfer;
        exports2.Tree = Tree;
        exports2.TreeSelect = TreeSelect;
        exports2.Upload = Upload;
        exports2["default"] = tdesign;
        exports2.install = install;
        Object.defineProperty(exports2, "__esModule", { value: true });
      });
    }
  });

  // ../modules/_NapiModules/robotjs/index.js
  var require_robotjs = __commonJS({
    "../modules/_NapiModules/robotjs/index.js"(exports, module) {
      "use strict";
      var path6 = __require("path");
      var robotjs2 = __require(path6.join(process.resourcesPath, "bin", "robotjs.node"));
      module.exports = robotjs2;
      module.exports.screen = {};
      function bitmap(width, height, byteWidth, bitsPerPixel, bytesPerPixel, image) {
        this.width = width;
        this.height = height;
        this.byteWidth = byteWidth;
        this.bitsPerPixel = bitsPerPixel;
        this.bytesPerPixel = bytesPerPixel;
        this.image = image;
        this.colorAt = function(x, y) {
          return robotjs2.getColor(this, x, y);
        };
      }
      module.exports.screen.capture = function(x, y, width, height) {
        if (typeof x !== "undefined" && typeof y !== "undefined" && typeof width !== "undefined" && typeof height !== "undefined") {
          b = robotjs2.captureScreen(x, y, width, height);
        } else {
          b = robotjs2.captureScreen();
        }
        return new bitmap(b.width, b.height, b.byteWidth, b.bitsPerPixel, b.bytesPerPixel, b.image);
      };
    }
  });

  // ../node_modules/is-docker/index.js
  var require_is_docker = __commonJS({
    "../node_modules/is-docker/index.js"(exports, module) {
      "use strict";
      var fs4 = __require("fs");
      var isDocker;
      function hasDockerEnv() {
        try {
          fs4.statSync("/.dockerenv");
          return true;
        } catch (_) {
          return false;
        }
      }
      function hasDockerCGroup() {
        try {
          return fs4.readFileSync("/proc/self/cgroup", "utf8").includes("docker");
        } catch (_) {
          return false;
        }
      }
      module.exports = () => {
        if (isDocker === void 0) {
          isDocker = hasDockerEnv() || hasDockerCGroup();
        }
        return isDocker;
      };
    }
  });

  // ../node_modules/is-wsl/index.js
  var require_is_wsl = __commonJS({
    "../node_modules/is-wsl/index.js"(exports, module) {
      "use strict";
      var os = __require("os");
      var fs4 = __require("fs");
      var isDocker = require_is_docker();
      var isWsl = () => {
        if (process.platform !== "linux") {
          return false;
        }
        if (os.release().toLowerCase().includes("microsoft")) {
          if (isDocker()) {
            return false;
          }
          return true;
        }
        try {
          return fs4.readFileSync("/proc/version", "utf8").toLowerCase().includes("microsoft") ? !isDocker() : false;
        } catch (_) {
          return false;
        }
      };
      if (process.env.__IS_WSL_TEST__) {
        module.exports = isWsl;
      } else {
        module.exports = isWsl();
      }
    }
  });

  // ../node_modules/define-lazy-prop/index.js
  var require_define_lazy_prop = __commonJS({
    "../node_modules/define-lazy-prop/index.js"(exports, module) {
      "use strict";
      module.exports = (object, propertyName, fn) => {
        const define = (value) => Object.defineProperty(object, propertyName, { value, enumerable: true, writable: true });
        Object.defineProperty(object, propertyName, {
          configurable: true,
          enumerable: true,
          get() {
            const result = fn();
            define(result);
            return result;
          },
          set(value) {
            define(value);
          }
        });
        return object;
      };
    }
  });

  // ../node_modules/open/index.js
  var require_open = __commonJS({
    "../node_modules/open/index.js"(exports, module) {
      var path6 = __require("path");
      var childProcess = __require("child_process");
      var { promises: fs4, constants: fsConstants } = __require("fs");
      var isWsl = require_is_wsl();
      var isDocker = require_is_docker();
      var defineLazyProperty = require_define_lazy_prop();
      var localXdgOpenPath = path6.join(__dirname, "xdg-open");
      var { platform, arch } = process;
      var getWslDrivesMountPoint = (() => {
        const defaultMountPoint = "/mnt/";
        let mountPoint;
        return async function() {
          if (mountPoint) {
            return mountPoint;
          }
          const configFilePath = "/etc/wsl.conf";
          let isConfigFileExists = false;
          try {
            await fs4.access(configFilePath, fsConstants.F_OK);
            isConfigFileExists = true;
          } catch {
          }
          if (!isConfigFileExists) {
            return defaultMountPoint;
          }
          const configContent = await fs4.readFile(configFilePath, { encoding: "utf8" });
          const configMountPoint = /(?<!#.*)root\s*=\s*(?<mountPoint>.*)/g.exec(configContent);
          if (!configMountPoint) {
            return defaultMountPoint;
          }
          mountPoint = configMountPoint.groups.mountPoint.trim();
          mountPoint = mountPoint.endsWith("/") ? mountPoint : `${mountPoint}/`;
          return mountPoint;
        };
      })();
      var pTryEach = async (array, mapper) => {
        let latestError;
        for (const item of array) {
          try {
            return await mapper(item);
          } catch (error) {
            latestError = error;
          }
        }
        throw latestError;
      };
      var baseOpen = async (options) => {
        options = {
          wait: false,
          background: false,
          newInstance: false,
          allowNonzeroExitCode: false,
          ...options
        };
        if (Array.isArray(options.app)) {
          return pTryEach(options.app, (singleApp) => baseOpen({
            ...options,
            app: singleApp
          }));
        }
        let { name: app2, arguments: appArguments = [] } = options.app || {};
        appArguments = [...appArguments];
        if (Array.isArray(app2)) {
          return pTryEach(app2, (appName) => baseOpen({
            ...options,
            app: {
              name: appName,
              arguments: appArguments
            }
          }));
        }
        let command;
        const cliArguments = [];
        const childProcessOptions = {};
        if (platform === "darwin") {
          command = "open";
          if (options.wait) {
            cliArguments.push("--wait-apps");
          }
          if (options.background) {
            cliArguments.push("--background");
          }
          if (options.newInstance) {
            cliArguments.push("--new");
          }
          if (app2) {
            cliArguments.push("-a", app2);
          }
        } else if (platform === "win32" || isWsl && !isDocker()) {
          const mountPoint = await getWslDrivesMountPoint();
          command = isWsl ? `${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` : `${process.env.SYSTEMROOT}\\System32\\WindowsPowerShell\\v1.0\\powershell`;
          cliArguments.push(
            "-NoProfile",
            "-NonInteractive",
            "\u2013ExecutionPolicy",
            "Bypass",
            "-EncodedCommand"
          );
          if (!isWsl) {
            childProcessOptions.windowsVerbatimArguments = true;
          }
          const encodedArguments = ["Start"];
          if (options.wait) {
            encodedArguments.push("-Wait");
          }
          if (app2) {
            encodedArguments.push(`"\`"${app2}\`""`, "-ArgumentList");
            if (options.target) {
              appArguments.unshift(options.target);
            }
          } else if (options.target) {
            encodedArguments.push(`"${options.target}"`);
          }
          if (appArguments.length > 0) {
            appArguments = appArguments.map((arg) => `"\`"${arg}\`""`);
            encodedArguments.push(appArguments.join(","));
          }
          options.target = Buffer.from(encodedArguments.join(" "), "utf16le").toString("base64");
        } else {
          if (app2) {
            command = app2;
          } else {
            const isBundled = !__dirname || __dirname === "/";
            let exeLocalXdgOpen = false;
            try {
              await fs4.access(localXdgOpenPath, fsConstants.X_OK);
              exeLocalXdgOpen = true;
            } catch {
            }
            const useSystemXdgOpen = process.versions.electron || platform === "android" || isBundled || !exeLocalXdgOpen;
            command = useSystemXdgOpen ? "xdg-open" : localXdgOpenPath;
          }
          if (appArguments.length > 0) {
            cliArguments.push(...appArguments);
          }
          if (!options.wait) {
            childProcessOptions.stdio = "ignore";
            childProcessOptions.detached = true;
          }
        }
        if (options.target) {
          cliArguments.push(options.target);
        }
        if (platform === "darwin" && appArguments.length > 0) {
          cliArguments.push("--args", ...appArguments);
        }
        const subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);
        if (options.wait) {
          return new Promise((resolve, reject) => {
            subprocess.once("error", reject);
            subprocess.once("close", (exitCode) => {
              if (options.allowNonzeroExitCode && exitCode > 0) {
                reject(new Error(`Exited with code ${exitCode}`));
                return;
              }
              resolve(subprocess);
            });
          });
        }
        subprocess.unref();
        return subprocess;
      };
      var open2 = (target, options) => {
        if (typeof target !== "string") {
          throw new TypeError("Expected a `target`");
        }
        return baseOpen({
          ...options,
          target
        });
      };
      var openApp = (name, options) => {
        if (typeof name !== "string") {
          throw new TypeError("Expected a `name`");
        }
        const { arguments: appArguments = [] } = options || {};
        if (appArguments !== void 0 && appArguments !== null && !Array.isArray(appArguments)) {
          throw new TypeError("Expected `appArguments` as Array type");
        }
        return baseOpen({
          ...options,
          app: {
            name,
            arguments: appArguments
          }
        });
      };
      function detectArchBinary(binary) {
        if (typeof binary === "string" || Array.isArray(binary)) {
          return binary;
        }
        const { [arch]: archBinary } = binary;
        if (!archBinary) {
          throw new Error(`${arch} is not supported`);
        }
        return archBinary;
      }
      function detectPlatformBinary({ [platform]: platformBinary }, { wsl }) {
        if (wsl && isWsl) {
          return detectArchBinary(wsl);
        }
        if (!platformBinary) {
          throw new Error(`${platform} is not supported`);
        }
        return detectArchBinary(platformBinary);
      }
      var apps = {};
      defineLazyProperty(apps, "chrome", () => detectPlatformBinary({
        darwin: "google chrome",
        win32: "chrome",
        linux: ["google-chrome", "google-chrome-stable", "chromium"]
      }, {
        wsl: {
          ia32: "/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe",
          x64: ["/mnt/c/Program Files/Google/Chrome/Application/chrome.exe", "/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe"]
        }
      }));
      defineLazyProperty(apps, "firefox", () => detectPlatformBinary({
        darwin: "firefox",
        win32: "C:\\Program Files\\Mozilla Firefox\\firefox.exe",
        linux: "firefox"
      }, {
        wsl: "/mnt/c/Program Files/Mozilla Firefox/firefox.exe"
      }));
      defineLazyProperty(apps, "edge", () => detectPlatformBinary({
        darwin: "microsoft edge",
        win32: "msedge",
        linux: ["microsoft-edge", "microsoft-edge-dev"]
      }, {
        wsl: "/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe"
      }));
      open2.apps = apps;
      open2.openApp = openApp;
      module.exports = open2;
    }
  });

  // ../node_modules/safer-buffer/safer.js
  var require_safer = __commonJS({
    "../node_modules/safer-buffer/safer.js"(exports, module) {
      "use strict";
      var buffer = __require("buffer");
      var Buffer2 = buffer.Buffer;
      var safer = {};
      var key;
      for (key in buffer) {
        if (!buffer.hasOwnProperty(key))
          continue;
        if (key === "SlowBuffer" || key === "Buffer")
          continue;
        safer[key] = buffer[key];
      }
      var Safer = safer.Buffer = {};
      for (key in Buffer2) {
        if (!Buffer2.hasOwnProperty(key))
          continue;
        if (key === "allocUnsafe" || key === "allocUnsafeSlow")
          continue;
        Safer[key] = Buffer2[key];
      }
      safer.Buffer.prototype = Buffer2.prototype;
      if (!Safer.from || Safer.from === Uint8Array.from) {
        Safer.from = function(value, encodingOrOffset, length) {
          if (typeof value === "number") {
            throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
          }
          if (value && typeof value.length === "undefined") {
            throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
          }
          return Buffer2(value, encodingOrOffset, length);
        };
      }
      if (!Safer.alloc) {
        Safer.alloc = function(size, fill, encoding) {
          if (typeof size !== "number") {
            throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
          }
          if (size < 0 || size >= 2 * (1 << 30)) {
            throw new RangeError('The value "' + size + '" is invalid for option "size"');
          }
          var buf = Buffer2(size);
          if (!fill || fill.length === 0) {
            buf.fill(0);
          } else if (typeof encoding === "string") {
            buf.fill(fill, encoding);
          } else {
            buf.fill(fill);
          }
          return buf;
        };
      }
      if (!safer.kStringMaxLength) {
        try {
          safer.kStringMaxLength = process.binding("buffer").kStringMaxLength;
        } catch (e) {
        }
      }
      if (!safer.constants) {
        safer.constants = {
          MAX_LENGTH: safer.kMaxLength
        };
        if (safer.kStringMaxLength) {
          safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
        }
      }
      module.exports = safer;
    }
  });

  // ../modules/cmd/node_modules/iconv-lite/lib/bom-handling.js
  var require_bom_handling = __commonJS({
    "../modules/cmd/node_modules/iconv-lite/lib/bom-handling.js"(exports) {
      "use strict";
      var BOMChar = "\uFEFF";
      exports.PrependBOM = PrependBOMWrapper;
      function PrependBOMWrapper(encoder, options) {
        this.encoder = encoder;
        this.addBOM = true;
      }
      PrependBOMWrapper.prototype.write = function(str) {
        if (this.addBOM) {
          str = BOMChar + str;
          this.addBOM = false;
        }
        return this.encoder.write(str);
      };
      PrependBOMWrapper.prototype.end = function() {
        return this.encoder.end();
      };
      exports.StripBOM = StripBOMWrapper;
      function StripBOMWrapper(decoder, options) {
        this.decoder = decoder;
        this.pass = false;
        this.options = options || {};
      }
      StripBOMWrapper.prototype.write = function(buf) {
        var res = this.decoder.write(buf);
        if (this.pass || !res)
          return res;
        if (res[0] === BOMChar) {
          res = res.slice(1);
          if (typeof this.options.stripBOM === "function")
            this.options.stripBOM();
        }
        this.pass = true;
        return res;
      };
      StripBOMWrapper.prototype.end = function() {
        return this.decoder.end();
      };
    }
  });

  // ../modules/cmd/node_modules/iconv-lite/encodings/internal.js
  var require_internal = __commonJS({
    "../modules/cmd/node_modules/iconv-lite/encodings/internal.js"(exports, module) {
      "use strict";
      var Buffer2 = require_safer().Buffer;
      module.exports = {
        utf8: { type: "_internal", bomAware: true },
        cesu8: { type: "_internal", bomAware: true },
        unicode11utf8: "utf8",
        ucs2: { type: "_internal", bomAware: true },
        utf16le: "ucs2",
        binary: { type: "_internal" },
        base64: { type: "_internal" },
        hex: { type: "_internal" },
        _internal: InternalCodec
      };
      function InternalCodec(codecOptions, iconv2) {
        this.enc = codecOptions.encodingName;
        this.bomAware = codecOptions.bomAware;
        if (this.enc === "base64")
          this.encoder = InternalEncoderBase64;
        else if (this.enc === "cesu8") {
          this.enc = "utf8";
          this.encoder = InternalEncoderCesu8;
          if (Buffer2.from("eda0bdedb2a9", "hex").toString() !== "\u{1F4A9}") {
            this.decoder = InternalDecoderCesu8;
            this.defaultCharUnicode = iconv2.defaultCharUnicode;
          }
        }
      }
      InternalCodec.prototype.encoder = InternalEncoder;
      InternalCodec.prototype.decoder = InternalDecoder;
      var StringDecoder = __require("string_decoder").StringDecoder;
      if (!StringDecoder.prototype.end)
        StringDecoder.prototype.end = function() {
        };
      function InternalDecoder(options, codec) {
        this.decoder = new StringDecoder(codec.enc);
      }
      InternalDecoder.prototype.write = function(buf) {
        if (!Buffer2.isBuffer(buf)) {
          buf = Buffer2.from(buf);
        }
        return this.decoder.write(buf);
      };
      InternalDecoder.prototype.end = function() {
        return this.decoder.end();
      };
      function InternalEncoder(options, codec) {
        this.enc = codec.enc;
      }
      InternalEncoder.prototype.write = function(str) {
        return Buffer2.from(str, this.enc);
      };
      InternalEncoder.prototype.end = function() {
      };
      function InternalEncoderBase64(options, codec) {
        this.prevStr = "";
      }
      InternalEncoderBase64.prototype.write = function(str) {
        str = this.prevStr + str;
        var completeQuads = str.length - str.length % 4;
        this.prevStr = str.slice(completeQuads);
        str = str.slice(0, completeQuads);
        return Buffer2.from(str, "base64");
      };
      InternalEncoderBase64.prototype.end = function() {
        return Buffer2.from(this.prevStr, "base64");
      };
      function InternalEncoderCesu8(options, codec) {
      }
      InternalEncoderCesu8.prototype.write = function(str) {
        var buf = Buffer2.alloc(str.length * 3), bufIdx = 0;
        for (var i = 0; i < str.length; i++) {
          var charCode = str.charCodeAt(i);
          if (charCode < 128)
            buf[bufIdx++] = charCode;
          else if (charCode < 2048) {
            buf[bufIdx++] = 192 + (charCode >>> 6);
            buf[bufIdx++] = 128 + (charCode & 63);
          } else {
            buf[bufIdx++] = 224 + (charCode >>> 12);
            buf[bufIdx++] = 128 + (charCode >>> 6 & 63);
            buf[bufIdx++] = 128 + (charCode & 63);
          }
        }
        return buf.slice(0, bufIdx);
      };
      InternalEncoderCesu8.prototype.end = function() {
      };
      function InternalDecoderCesu8(options, codec) {
        this.acc = 0;
        this.contBytes = 0;
        this.accBytes = 0;
        this.defaultCharUnicode = codec.defaultCharUnicode;
      }
      InternalDecoderCesu8.prototype.write = function(buf) {
        var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, res = "";
        for (var i = 0; i < buf.length; i++) {
          var curByte = buf[i];
          if ((curByte & 192) !== 128) {
            if (contBytes > 0) {
              res += this.defaultCharUnicode;
              contBytes = 0;
            }
            if (curByte < 128) {
              res += String.fromCharCode(curByte);
            } else if (curByte < 224) {
              acc = curByte & 31;
              contBytes = 1;
              accBytes = 1;
            } else if (curByte < 240) {
              acc = curByte & 15;
              contBytes = 2;
              accBytes = 1;
            } else {
              res += this.defaultCharUnicode;
            }
          } else {
            if (contBytes > 0) {
              acc = acc << 6 | curByte & 63;
              contBytes--;
              accBytes++;
              if (contBytes === 0) {
                if (accBytes === 2 && acc < 128 && acc > 0)
                  res += this.defaultCharUnicode;
                else if (accBytes === 3 && acc < 2048)
                  res += this.defaultCharUnicode;
                else
                  res += String.fromCharCode(acc);
              }
            } else {
              res += this.defaultCharUnicode;
            }
          }
        }
        this.acc = acc;
        this.contBytes = contBytes;
        this.accBytes = accBytes;
        return res;
      };
      InternalDecoderCesu8.prototype.end = function() {
        var res = 0;
        if (this.contBytes > 0)
          res += this.defaultCharUnicode;
        return res;
      };
    }
  });

  // ../modules/cmd/node_modules/iconv-lite/encodings/utf32.js
  var require_utf32 = __commonJS({
    "../modules/cmd/node_modules/iconv-lite/encodings/utf32.js"(exports) {
      "use strict";
      var Buffer2 = require_safer().Buffer;
      exports._utf32 = Utf32Codec;
      function Utf32Codec(codecOptions, iconv2) {
        this.iconv = iconv2;
        this.bomAware = true;
        this.isLE = codecOptions.isLE;
      }
      exports.utf32le = { type: "_utf32", isLE: true };
      exports.utf32be = { type: "_utf32", isLE: false };
      exports.ucs4le = "utf32le";
      exports.ucs4be = "utf32be";
      Utf32Codec.prototype.encoder = Utf32Encoder;
      Utf32Codec.prototype.decoder = Utf32Decoder;
      function Utf32Encoder(options, codec) {
        this.isLE = codec.isLE;
        this.highSurrogate = 0;
      }
      Utf32Encoder.prototype.write = function(str) {
        var src = Buffer2.from(str, "ucs2");
        var dst = Buffer2.alloc(src.length * 2);
        var write32 = this.isLE ? dst.writeUInt32LE : dst.writeUInt32BE;
        var offset = 0;
        for (var i = 0; i < src.length; i += 2) {
          var code = src.readUInt16LE(i);
          var isHighSurrogate = 55296 <= code && code < 56320;
          var isLowSurrogate = 56320 <= code && code < 57344;
          if (this.highSurrogate) {
            if (isHighSurrogate || !isLowSurrogate) {
              write32.call(dst, this.highSurrogate, offset);
              offset += 4;
            } else {
              var codepoint = (this.highSurrogate - 55296 << 10 | code - 56320) + 65536;
              write32.call(dst, codepoint, offset);
              offset += 4;
              this.highSurrogate = 0;
              continue;
            }
          }
          if (isHighSurrogate)
            this.highSurrogate = code;
          else {
            write32.call(dst, code, offset);
            offset += 4;
            this.highSurrogate = 0;
          }
        }
        if (offset < dst.length)
          dst = dst.slice(0, offset);
        return dst;
      };
      Utf32Encoder.prototype.end = function() {
        if (!this.highSurrogate)
          return;
        var buf = Buffer2.alloc(4);
        if (this.isLE)
          buf.writeUInt32LE(this.highSurrogate, 0);
        else
          buf.writeUInt32BE(this.highSurrogate, 0);
        this.highSurrogate = 0;
        return buf;
      };
      function Utf32Decoder(options, codec) {
        this.isLE = codec.isLE;
        this.badChar = codec.iconv.defaultCharUnicode.charCodeAt(0);
        this.overflow = [];
      }
      Utf32Decoder.prototype.write = function(src) {
        if (src.length === 0)
          return "";
        var i = 0;
        var codepoint = 0;
        var dst = Buffer2.alloc(src.length + 4);
        var offset = 0;
        var isLE = this.isLE;
        var overflow = this.overflow;
        var badChar = this.badChar;
        if (overflow.length > 0) {
          for (; i < src.length && overflow.length < 4; i++)
            overflow.push(src[i]);
          if (overflow.length === 4) {
            if (isLE) {
              codepoint = overflow[i] | overflow[i + 1] << 8 | overflow[i + 2] << 16 | overflow[i + 3] << 24;
            } else {
              codepoint = overflow[i + 3] | overflow[i + 2] << 8 | overflow[i + 1] << 16 | overflow[i] << 24;
            }
            overflow.length = 0;
            offset = _writeCodepoint(dst, offset, codepoint, badChar);
          }
        }
        for (; i < src.length - 3; i += 4) {
          if (isLE) {
            codepoint = src[i] | src[i + 1] << 8 | src[i + 2] << 16 | src[i + 3] << 24;
          } else {
            codepoint = src[i + 3] | src[i + 2] << 8 | src[i + 1] << 16 | src[i] << 24;
          }
          offset = _writeCodepoint(dst, offset, codepoint, badChar);
        }
        for (; i < src.length; i++) {
          overflow.push(src[i]);
        }
        return dst.slice(0, offset).toString("ucs2");
      };
      function _writeCodepoint(dst, offset, codepoint, badChar) {
        if (codepoint < 0 || codepoint > 1114111) {
          codepoint = badChar;
        }
        if (codepoint >= 65536) {
          codepoint -= 65536;
          var high = 55296 | codepoint >> 10;
          dst[offset++] = high & 255;
          dst[offset++] = high >> 8;
          var codepoint = 56320 | codepoint & 1023;
        }
        dst[offset++] = codepoint & 255;
        dst[offset++] = codepoint >> 8;
        return offset;
      }
      Utf32Decoder.prototype.end = function() {
        this.overflow.length = 0;
      };
      exports.utf32 = Utf32AutoCodec;
      exports.ucs4 = "utf32";
      function Utf32AutoCodec(options, iconv2) {
        this.iconv = iconv2;
      }
      Utf32AutoCodec.prototype.encoder = Utf32AutoEncoder;
      Utf32AutoCodec.prototype.decoder = Utf32AutoDecoder;
      function Utf32AutoEncoder(options, codec) {
        options = options || {};
        if (options.addBOM === void 0)
          options.addBOM = true;
        this.encoder = codec.iconv.getEncoder(options.defaultEncoding || "utf-32le", options);
      }
      Utf32AutoEncoder.prototype.write = function(str) {
        return this.encoder.write(str);
      };
      Utf32AutoEncoder.prototype.end = function() {
        return this.encoder.end();
      };
      function Utf32AutoDecoder(options, codec) {
        this.decoder = null;
        this.initialBufs = [];
        this.initialBufsLen = 0;
        this.options = options || {};
        this.iconv = codec.iconv;
      }
      Utf32AutoDecoder.prototype.write = function(buf) {
        if (!this.decoder) {
          this.initialBufs.push(buf);
          this.initialBufsLen += buf.length;
          if (this.initialBufsLen < 32)
            return "";
          var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
          this.decoder = this.iconv.getDecoder(encoding, this.options);
          var resStr = "";
          for (var i = 0; i < this.initialBufs.length; i++)
            resStr += this.decoder.write(this.initialBufs[i]);
          this.initialBufs.length = this.initialBufsLen = 0;
          return resStr;
        }
        return this.decoder.write(buf);
      };
      Utf32AutoDecoder.prototype.end = function() {
        if (!this.decoder) {
          var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
          this.decoder = this.iconv.getDecoder(encoding, this.options);
          var resStr = "";
          for (var i = 0; i < this.initialBufs.length; i++)
            resStr += this.decoder.write(this.initialBufs[i]);
          var trail = this.decoder.end();
          if (trail)
            resStr += trail;
          this.initialBufs.length = this.initialBufsLen = 0;
          return resStr;
        }
        return this.decoder.end();
      };
      function detectEncoding(bufs, defaultEncoding) {
        var b2 = [];
        var charsProcessed = 0;
        var invalidLE = 0, invalidBE = 0;
        var bmpCharsLE = 0, bmpCharsBE = 0;
        outer_loop:
          for (var i = 0; i < bufs.length; i++) {
            var buf = bufs[i];
            for (var j = 0; j < buf.length; j++) {
              b2.push(buf[j]);
              if (b2.length === 4) {
                if (charsProcessed === 0) {
                  if (b2[0] === 255 && b2[1] === 254 && b2[2] === 0 && b2[3] === 0) {
                    return "utf-32le";
                  }
                  if (b2[0] === 0 && b2[1] === 0 && b2[2] === 254 && b2[3] === 255) {
                    return "utf-32be";
                  }
                }
                if (b2[0] !== 0 || b2[1] > 16)
                  invalidBE++;
                if (b2[3] !== 0 || b2[2] > 16)
                  invalidLE++;
                if (b2[0] === 0 && b2[1] === 0 && (b2[2] !== 0 || b2[3] !== 0))
                  bmpCharsBE++;
                if ((b2[0] !== 0 || b2[1] !== 0) && b2[2] === 0 && b2[3] === 0)
                  bmpCharsLE++;
                b2.length = 0;
                charsProcessed++;
                if (charsProcessed >= 100) {
                  break outer_loop;
                }
              }
            }
          }
        if (bmpCharsBE - invalidBE > bmpCharsLE - invalidLE)
          return "utf-32be";
        if (bmpCharsBE - invalidBE < bmpCharsLE - invalidLE)
          return "utf-32le";
        return defaultEncoding || "utf-32le";
      }
    }
  });

  // ../modules/cmd/node_modules/iconv-lite/encodings/utf16.js
  var require_utf16 = __commonJS({
    "../modules/cmd/node_modules/iconv-lite/encodings/utf16.js"(exports) {
      "use strict";
      var Buffer2 = require_safer().Buffer;
      exports.utf16be = Utf16BECodec;
      function Utf16BECodec() {
      }
      Utf16BECodec.prototype.encoder = Utf16BEEncoder;
      Utf16BECodec.prototype.decoder = Utf16BEDecoder;
      Utf16BECodec.prototype.bomAware = true;
      function Utf16BEEncoder() {
      }
      Utf16BEEncoder.prototype.write = function(str) {
        var buf = Buffer2.from(str, "ucs2");
        for (var i = 0; i < buf.length; i += 2) {
          var tmp = buf[i];
          buf[i] = buf[i + 1];
          buf[i + 1] = tmp;
        }
        return buf;
      };
      Utf16BEEncoder.prototype.end = function() {
      };
      function Utf16BEDecoder() {
        this.overflowByte = -1;
      }
      Utf16BEDecoder.prototype.write = function(buf) {
        if (buf.length == 0)
          return "";
        var buf2 = Buffer2.alloc(buf.length + 1), i = 0, j = 0;
        if (this.overflowByte !== -1) {
          buf2[0] = buf[0];
          buf2[1] = this.overflowByte;
          i = 1;
          j = 2;
        }
        for (; i < buf.length - 1; i += 2, j += 2) {
          buf2[j] = buf[i + 1];
          buf2[j + 1] = buf[i];
        }
        this.overflowByte = i == buf.length - 1 ? buf[buf.length - 1] : -1;
        return buf2.slice(0, j).toString("ucs2");
      };
      Utf16BEDecoder.prototype.end = function() {
        this.overflowByte = -1;
      };
      exports.utf16 = Utf16Codec;
      function Utf16Codec(codecOptions, iconv2) {
        this.iconv = iconv2;
      }
      Utf16Codec.prototype.encoder = Utf16Encoder;
      Utf16Codec.prototype.decoder = Utf16Decoder;
      function Utf16Encoder(options, codec) {
        options = options || {};
        if (options.addBOM === void 0)
          options.addBOM = true;
        this.encoder = codec.iconv.getEncoder("utf-16le", options);
      }
      Utf16Encoder.prototype.write = function(str) {
        return this.encoder.write(str);
      };
      Utf16Encoder.prototype.end = function() {
        return this.encoder.end();
      };
      function Utf16Decoder(options, codec) {
        this.decoder = null;
        this.initialBufs = [];
        this.initialBufsLen = 0;
        this.options = options || {};
        this.iconv = codec.iconv;
      }
      Utf16Decoder.prototype.write = function(buf) {
        if (!this.decoder) {
          this.initialBufs.push(buf);
          this.initialBufsLen += buf.length;
          if (this.initialBufsLen < 16)
            return "";
          var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
          this.decoder = this.iconv.getDecoder(encoding, this.options);
          var resStr = "";
          for (var i = 0; i < this.initialBufs.length; i++)
            resStr += this.decoder.write(this.initialBufs[i]);
          this.initialBufs.length = this.initialBufsLen = 0;
          return resStr;
        }
        return this.decoder.write(buf);
      };
      Utf16Decoder.prototype.end = function() {
        if (!this.decoder) {
          var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);
          this.decoder = this.iconv.getDecoder(encoding, this.options);
          var resStr = "";
          for (var i = 0; i < this.initialBufs.length; i++)
            resStr += this.decoder.write(this.initialBufs[i]);
          var trail = this.decoder.end();
          if (trail)
            resStr += trail;
          this.initialBufs.length = this.initialBufsLen = 0;
          return resStr;
        }
        return this.decoder.end();
      };
      function detectEncoding(bufs, defaultEncoding) {
        var b2 = [];
        var charsProcessed = 0;
        var asciiCharsLE = 0, asciiCharsBE = 0;
        outer_loop:
          for (var i = 0; i < bufs.length; i++) {
            var buf = bufs[i];
            for (var j = 0; j < buf.length; j++) {
              b2.push(buf[j]);
              if (b2.length === 2) {
                if (charsProcessed === 0) {
                  if (b2[0] === 255 && b2[1] === 254)
                    return "utf-16le";
                  if (b2[0] === 254 && b2[1] === 255)
                    return "utf-16be";
                }
                if (b2[0] === 0 && b2[1] !== 0)
                  asciiCharsBE++;
                if (b2[0] !== 0 && b2[1] === 0)
                  asciiCharsLE++;
                b2.length = 0;
                charsProcessed++;
                if (charsProcessed >= 100) {
                  break outer_loop;
                }
              }
            }
          }
        if (asciiCharsBE > asciiCharsLE)
          return "utf-16be";
        if (asciiCharsBE < asciiCharsLE)
          return "utf-16le";
        return defaultEncoding || "utf-16le";
      }
    }
  });

  // ../modules/cmd/node_modules/iconv-lite/encodings/utf7.js
  var require_utf7 = __commonJS({
    "../modules/cmd/node_modules/iconv-lite/encodings/utf7.js"(exports) {
      "use strict";
      var Buffer2 = require_safer().Buffer;
      exports.utf7 = Utf7Codec;
      exports.unicode11utf7 = "utf7";
      function Utf7Codec(codecOptions, iconv2) {
        this.iconv = iconv2;
      }
      Utf7Codec.prototype.encoder = Utf7Encoder;
      Utf7Codec.prototype.decoder = Utf7Decoder;
      Utf7Codec.prototype.bomAware = true;
      var nonDirectChars = /[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;
      function Utf7Encoder(options, codec) {
        this.iconv = codec.iconv;
      }
      Utf7Encoder.prototype.write = function(str) {
        return Buffer2.from(str.replace(nonDirectChars, function(chunk) {
          return "+" + (chunk === "+" ? "" : this.iconv.encode(chunk, "utf16-be").toString("base64").replace(/=+$/, "")) + "-";
        }.bind(this)));
      };
      Utf7Encoder.prototype.end = function() {
      };
      function Utf7Decoder(options, codec) {
        this.iconv = codec.iconv;
        this.inBase64 = false;
        this.base64Accum = "";
      }
      var base64Regex = /[A-Za-z0-9\/+]/;
      var base64Chars = [];
      for (i = 0; i < 256; i++)
        base64Chars[i] = base64Regex.test(String.fromCharCode(i));
      var i;
      var plusChar = "+".charCodeAt(0);
      var minusChar = "-".charCodeAt(0);
      var andChar = "&".charCodeAt(0);
      Utf7Decoder.prototype.write = function(buf) {
        var res = "", lastI = 0, inBase64 = this.inBase64, base64Accum = this.base64Accum;
        for (var i2 = 0; i2 < buf.length; i2++) {
          if (!inBase64) {
            if (buf[i2] == plusChar) {
              res += this.iconv.decode(buf.slice(lastI, i2), "ascii");
              lastI = i2 + 1;
              inBase64 = true;
            }
          } else {
            if (!base64Chars[buf[i2]]) {
              if (i2 == lastI && buf[i2] == minusChar) {
                res += "+";
              } else {
                var b64str = base64Accum + this.iconv.decode(buf.slice(lastI, i2), "ascii");
                res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
              }
              if (buf[i2] != minusChar)
                i2--;
              lastI = i2 + 1;
              inBase64 = false;
              base64Accum = "";
            }
          }
        }
        if (!inBase64) {
          res += this.iconv.decode(buf.slice(lastI), "ascii");
        } else {
          var b64str = base64Accum + this.iconv.decode(buf.slice(lastI), "ascii");
          var canBeDecoded = b64str.length - b64str.length % 8;
          base64Accum = b64str.slice(canBeDecoded);
          b64str = b64str.slice(0, canBeDecoded);
          res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
        }
        this.inBase64 = inBase64;
        this.base64Accum = base64Accum;
        return res;
      };
      Utf7Decoder.prototype.end = function() {
        var res = "";
        if (this.inBase64 && this.base64Accum.length > 0)
          res = this.iconv.decode(Buffer2.from(this.base64Accum, "base64"), "utf16-be");
        this.inBase64 = false;
        this.base64Accum = "";
        return res;
      };
      exports.utf7imap = Utf7IMAPCodec;
      function Utf7IMAPCodec(codecOptions, iconv2) {
        this.iconv = iconv2;
      }
      Utf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;
      Utf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;
      Utf7IMAPCodec.prototype.bomAware = true;
      function Utf7IMAPEncoder(options, codec) {
        this.iconv = codec.iconv;
        this.inBase64 = false;
        this.base64Accum = Buffer2.alloc(6);
        this.base64AccumIdx = 0;
      }
      Utf7IMAPEncoder.prototype.write = function(str) {
        var inBase64 = this.inBase64, base64Accum = this.base64Accum, base64AccumIdx = this.base64AccumIdx, buf = Buffer2.alloc(str.length * 5 + 10), bufIdx = 0;
        for (var i2 = 0; i2 < str.length; i2++) {
          var uChar = str.charCodeAt(i2);
          if (32 <= uChar && uChar <= 126) {
            if (inBase64) {
              if (base64AccumIdx > 0) {
                bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString("base64").replace(/\//g, ",").replace(/=+$/, ""), bufIdx);
                base64AccumIdx = 0;
              }
              buf[bufIdx++] = minusChar;
              inBase64 = false;
            }
            if (!inBase64) {
              buf[bufIdx++] = uChar;
              if (uChar === andChar)
                buf[bufIdx++] = minusChar;
            }
          } else {
            if (!inBase64) {
              buf[bufIdx++] = andChar;
              inBase64 = true;
            }
            if (inBase64) {
              base64Accum[base64AccumIdx++] = uChar >> 8;
              base64Accum[base64AccumIdx++] = uChar & 255;
              if (base64AccumIdx == base64Accum.length) {
                bufIdx += buf.write(base64Accum.toString("base64").replace(/\//g, ","), bufIdx);
                base64AccumIdx = 0;
              }
            }
          }
        }
        this.inBase64 = inBase64;
        this.base64AccumIdx = base64AccumIdx;
        return buf.slice(0, bufIdx);
      };
      Utf7IMAPEncoder.prototype.end = function() {
        var buf = Buffer2.alloc(10), bufIdx = 0;
        if (this.inBase64) {
          if (this.base64AccumIdx > 0) {
            bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString("base64").replace(/\//g, ",").replace(/=+$/, ""), bufIdx);
            this.base64AccumIdx = 0;
          }
          buf[bufIdx++] = minusChar;
          this.inBase64 = false;
        }
        return buf.slice(0, bufIdx);
      };
      function Utf7IMAPDecoder(options, codec) {
        this.iconv = codec.iconv;
        this.inBase64 = false;
        this.base64Accum = "";
      }
      var base64IMAPChars = base64Chars.slice();
      base64IMAPChars[",".charCodeAt(0)] = true;
      Utf7IMAPDecoder.prototype.write = function(buf) {
        var res = "", lastI = 0, inBase64 = this.inBase64, base64Accum = this.base64Accum;
        for (var i2 = 0; i2 < buf.length; i2++) {
          if (!inBase64) {
            if (buf[i2] == andChar) {
              res += this.iconv.decode(buf.slice(lastI, i2), "ascii");
              lastI = i2 + 1;
              inBase64 = true;
            }
          } else {
            if (!base64IMAPChars[buf[i2]]) {
              if (i2 == lastI && buf[i2] == minusChar) {
                res += "&";
              } else {
                var b64str = base64Accum + this.iconv.decode(buf.slice(lastI, i2), "ascii").replace(/,/g, "/");
                res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
              }
              if (buf[i2] != minusChar)
                i2--;
              lastI = i2 + 1;
              inBase64 = false;
              base64Accum = "";
            }
          }
        }
        if (!inBase64) {
          res += this.iconv.decode(buf.slice(lastI), "ascii");
        } else {
          var b64str = base64Accum + this.iconv.decode(buf.slice(lastI), "ascii").replace(/,/g, "/");
          var canBeDecoded = b64str.length - b64str.length % 8;
          base64Accum = b64str.slice(canBeDecoded);
          b64str = b64str.slice(0, canBeDecoded);
          res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
        }
        this.inBase64 = inBase64;
        this.base64Accum = base64Accum;
        return res;
      };
      Utf7IMAPDecoder.prototype.end = function() {
        var res = "";
        if (this.inBase64 && this.base64Accum.length > 0)
          res = this.iconv.decode(Buffer2.from(this.base64Accum, "base64"), "utf16-be");
        this.inBase64 = false;
        this.base64Accum = "";
        return res;
      };
    }
  });

  // ../modules/cmd/node_modules/iconv-lite/encodings/sbcs-codec.js
  var require_sbcs_codec = __commonJS({
    "../modules/cmd/node_modules/iconv-lite/encodings/sbcs-codec.js"(exports) {
      "use strict";
      var Buffer2 = require_safer().Buffer;
      exports._sbcs = SBCSCodec;
      function SBCSCodec(codecOptions, iconv2) {
        if (!codecOptions)
          throw new Error("SBCS codec is called without the data.");
        if (!codecOptions.chars || codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256)
          throw new Error("Encoding '" + codecOptions.type + "' has incorrect 'chars' (must be of len 128 or 256)");
        if (codecOptions.chars.length === 128) {
          var asciiString = "";
          for (var i = 0; i < 128; i++)
            asciiString += String.fromCharCode(i);
          codecOptions.chars = asciiString + codecOptions.chars;
        }
        this.decodeBuf = Buffer2.from(codecOptions.chars, "ucs2");
        var encodeBuf = Buffer2.alloc(65536, iconv2.defaultCharSingleByte.charCodeAt(0));
        for (var i = 0; i < codecOptions.chars.length; i++)
          encodeBuf[codecOptions.chars.charCodeAt(i)] = i;
        this.encodeBuf = encodeBuf;
      }
      SBCSCodec.prototype.encoder = SBCSEncoder;
      SBCSCodec.prototype.decoder = SBCSDecoder;
      function SBCSEncoder(options, codec) {
        this.encodeBuf = codec.encodeBuf;
      }
      SBCSEncoder.prototype.write = function(str) {
        var buf = Buffer2.alloc(str.length);
        for (var i = 0; i < str.length; i++)
          buf[i] = this.encodeBuf[str.charCodeAt(i)];
        return buf;
      };
      SBCSEncoder.prototype.end = function() {
      };
      function SBCSDecoder(options, codec) {
        this.decodeBuf = codec.decodeBuf;
      }
      SBCSDecoder.prototype.write = function(buf) {
        var decodeBuf = this.decodeBuf;
        var newBuf = Buffer2.alloc(buf.length * 2);
        var idx1 = 0, idx2 = 0;
        for (var i = 0; i < buf.length; i++) {
          idx1 = buf[i] * 2;
          idx2 = i * 2;
          newBuf[idx2] = decodeBuf[idx1];
          newBuf[idx2 + 1] = decodeBuf[idx1 + 1];
        }
        return newBuf.toString("ucs2");
      };
      SBCSDecoder.prototype.end = function() {
      };
    }
  });

  // ../modules/cmd/node_modules/iconv-lite/encodings/sbcs-data.js
  var require_sbcs_data = __commonJS({
    "../modules/cmd/node_modules/iconv-lite/encodings/sbcs-data.js"(exports, module) {
      "use strict";
      module.exports = {
        "10029": "maccenteuro",
        "maccenteuro": {
          "type": "_sbcs",
          "chars": "\xC4\u0100\u0101\xC9\u0104\xD6\xDC\xE1\u0105\u010C\xE4\u010D\u0106\u0107\xE9\u0179\u017A\u010E\xED\u010F\u0112\u0113\u0116\xF3\u0117\xF4\xF6\xF5\xFA\u011A\u011B\xFC\u2020\xB0\u0118\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\u0119\xA8\u2260\u0123\u012E\u012F\u012A\u2264\u2265\u012B\u0136\u2202\u2211\u0142\u013B\u013C\u013D\u013E\u0139\u013A\u0145\u0146\u0143\xAC\u221A\u0144\u0147\u2206\xAB\xBB\u2026\xA0\u0148\u0150\xD5\u0151\u014C\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\u014D\u0154\u0155\u0158\u2039\u203A\u0159\u0156\u0157\u0160\u201A\u201E\u0161\u015A\u015B\xC1\u0164\u0165\xCD\u017D\u017E\u016A\xD3\xD4\u016B\u016E\xDA\u016F\u0170\u0171\u0172\u0173\xDD\xFD\u0137\u017B\u0141\u017C\u0122\u02C7"
        },
        "808": "cp808",
        "ibm808": "cp808",
        "cp808": {
          "type": "_sbcs",
          "chars": "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0401\u0451\u0404\u0454\u0407\u0457\u040E\u045E\xB0\u2219\xB7\u221A\u2116\u20AC\u25A0\xA0"
        },
        "mik": {
          "type": "_sbcs",
          "chars": "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u2514\u2534\u252C\u251C\u2500\u253C\u2563\u2551\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2510\u2591\u2592\u2593\u2502\u2524\u2116\xA7\u2557\u255D\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
        },
        "cp720": {
          "type": "_sbcs",
          "chars": "\x80\x81\xE9\xE2\x84\xE0\x86\xE7\xEA\xEB\xE8\xEF\xEE\x8D\x8E\x8F\x90\u0651\u0652\xF4\xA4\u0640\xFB\xF9\u0621\u0622\u0623\u0624\xA3\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u0636\u0637\u0638\u0639\u063A\u0641\xB5\u0642\u0643\u0644\u0645\u0646\u0647\u0648\u0649\u064A\u2261\u064B\u064C\u064D\u064E\u064F\u0650\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
        },
        "ascii8bit": "ascii",
        "usascii": "ascii",
        "ansix34": "ascii",
        "ansix341968": "ascii",
        "ansix341986": "ascii",
        "csascii": "ascii",
        "cp367": "ascii",
        "ibm367": "ascii",
        "isoir6": "ascii",
        "iso646us": "ascii",
        "iso646irv": "ascii",
        "us": "ascii",
        "latin1": "iso88591",
        "latin2": "iso88592",
        "latin3": "iso88593",
        "latin4": "iso88594",
        "latin5": "iso88599",
        "latin6": "iso885910",
        "latin7": "iso885913",
        "latin8": "iso885914",
        "latin9": "iso885915",
        "latin10": "iso885916",
        "csisolatin1": "iso88591",
        "csisolatin2": "iso88592",
        "csisolatin3": "iso88593",
        "csisolatin4": "iso88594",
        "csisolatincyrillic": "iso88595",
        "csisolatinarabic": "iso88596",
        "csisolatingreek": "iso88597",
        "csisolatinhebrew": "iso88598",
        "csisolatin5": "iso88599",
        "csisolatin6": "iso885910",
        "l1": "iso88591",
        "l2": "iso88592",
        "l3": "iso88593",
        "l4": "iso88594",
        "l5": "iso88599",
        "l6": "iso885910",
        "l7": "iso885913",
        "l8": "iso885914",
        "l9": "iso885915",
        "l10": "iso885916",
        "isoir14": "iso646jp",
        "isoir57": "iso646cn",
        "isoir100": "iso88591",
        "isoir101": "iso88592",
        "isoir109": "iso88593",
        "isoir110": "iso88594",
        "isoir144": "iso88595",
        "isoir127": "iso88596",
        "isoir126": "iso88597",
        "isoir138": "iso88598",
        "isoir148": "iso88599",
        "isoir157": "iso885910",
        "isoir166": "tis620",
        "isoir179": "iso885913",
        "isoir199": "iso885914",
        "isoir203": "iso885915",
        "isoir226": "iso885916",
        "cp819": "iso88591",
        "ibm819": "iso88591",
        "cyrillic": "iso88595",
        "arabic": "iso88596",
        "arabic8": "iso88596",
        "ecma114": "iso88596",
        "asmo708": "iso88596",
        "greek": "iso88597",
        "greek8": "iso88597",
        "ecma118": "iso88597",
        "elot928": "iso88597",
        "hebrew": "iso88598",
        "hebrew8": "iso88598",
        "turkish": "iso88599",
        "turkish8": "iso88599",
        "thai": "iso885911",
        "thai8": "iso885911",
        "celtic": "iso885914",
        "celtic8": "iso885914",
        "isoceltic": "iso885914",
        "tis6200": "tis620",
        "tis62025291": "tis620",
        "tis62025330": "tis620",
        "10000": "macroman",
        "10006": "macgreek",
        "10007": "maccyrillic",
        "10079": "maciceland",
        "10081": "macturkish",
        "cspc8codepage437": "cp437",
        "cspc775baltic": "cp775",
        "cspc850multilingual": "cp850",
        "cspcp852": "cp852",
        "cspc862latinhebrew": "cp862",
        "cpgr": "cp869",
        "msee": "cp1250",
        "mscyrl": "cp1251",
        "msansi": "cp1252",
        "msgreek": "cp1253",
        "msturk": "cp1254",
        "mshebr": "cp1255",
        "msarab": "cp1256",
        "winbaltrim": "cp1257",
        "cp20866": "koi8r",
        "20866": "koi8r",
        "ibm878": "koi8r",
        "cskoi8r": "koi8r",
        "cp21866": "koi8u",
        "21866": "koi8u",
        "ibm1168": "koi8u",
        "strk10482002": "rk1048",
        "tcvn5712": "tcvn",
        "tcvn57121": "tcvn",
        "gb198880": "iso646cn",
        "cn": "iso646cn",
        "csiso14jisc6220ro": "iso646jp",
        "jisc62201969ro": "iso646jp",
        "jp": "iso646jp",
        "cshproman8": "hproman8",
        "r8": "hproman8",
        "roman8": "hproman8",
        "xroman8": "hproman8",
        "ibm1051": "hproman8",
        "mac": "macintosh",
        "csmacintosh": "macintosh"
      };
    }
  });

  // ../modules/cmd/node_modules/iconv-lite/encodings/sbcs-data-generated.js
  var require_sbcs_data_generated = __commonJS({
    "../modules/cmd/node_modules/iconv-lite/encodings/sbcs-data-generated.js"(exports, module) {
      "use strict";
      module.exports = {
        "437": "cp437",
        "737": "cp737",
        "775": "cp775",
        "850": "cp850",
        "852": "cp852",
        "855": "cp855",
        "856": "cp856",
        "857": "cp857",
        "858": "cp858",
        "860": "cp860",
        "861": "cp861",
        "862": "cp862",
        "863": "cp863",
        "864": "cp864",
        "865": "cp865",
        "866": "cp866",
        "869": "cp869",
        "874": "windows874",
        "922": "cp922",
        "1046": "cp1046",
        "1124": "cp1124",
        "1125": "cp1125",
        "1129": "cp1129",
        "1133": "cp1133",
        "1161": "cp1161",
        "1162": "cp1162",
        "1163": "cp1163",
        "1250": "windows1250",
        "1251": "windows1251",
        "1252": "windows1252",
        "1253": "windows1253",
        "1254": "windows1254",
        "1255": "windows1255",
        "1256": "windows1256",
        "1257": "windows1257",
        "1258": "windows1258",
        "28591": "iso88591",
        "28592": "iso88592",
        "28593": "iso88593",
        "28594": "iso88594",
        "28595": "iso88595",
        "28596": "iso88596",
        "28597": "iso88597",
        "28598": "iso88598",
        "28599": "iso88599",
        "28600": "iso885910",
        "28601": "iso885911",
        "28603": "iso885913",
        "28604": "iso885914",
        "28605": "iso885915",
        "28606": "iso885916",
        "windows874": {
          "type": "_sbcs",
          "chars": "\u20AC\uFFFD\uFFFD\uFFFD\uFFFD\u2026\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD"
        },
        "win874": "windows874",
        "cp874": "windows874",
        "windows1250": {
          "type": "_sbcs",
          "chars": "\u20AC\uFFFD\u201A\uFFFD\u201E\u2026\u2020\u2021\uFFFD\u2030\u0160\u2039\u015A\u0164\u017D\u0179\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0161\u203A\u015B\u0165\u017E\u017A\xA0\u02C7\u02D8\u0141\xA4\u0104\xA6\xA7\xA8\xA9\u015E\xAB\xAC\xAD\xAE\u017B\xB0\xB1\u02DB\u0142\xB4\xB5\xB6\xB7\xB8\u0105\u015F\xBB\u013D\u02DD\u013E\u017C\u0154\xC1\xC2\u0102\xC4\u0139\u0106\xC7\u010C\xC9\u0118\xCB\u011A\xCD\xCE\u010E\u0110\u0143\u0147\xD3\xD4\u0150\xD6\xD7\u0158\u016E\xDA\u0170\xDC\xDD\u0162\xDF\u0155\xE1\xE2\u0103\xE4\u013A\u0107\xE7\u010D\xE9\u0119\xEB\u011B\xED\xEE\u010F\u0111\u0144\u0148\xF3\xF4\u0151\xF6\xF7\u0159\u016F\xFA\u0171\xFC\xFD\u0163\u02D9"
        },
        "win1250": "windows1250",
        "cp1250": "windows1250",
        "windows1251": {
          "type": "_sbcs",
          "chars": "\u0402\u0403\u201A\u0453\u201E\u2026\u2020\u2021\u20AC\u2030\u0409\u2039\u040A\u040C\u040B\u040F\u0452\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0459\u203A\u045A\u045C\u045B\u045F\xA0\u040E\u045E\u0408\xA4\u0490\xA6\xA7\u0401\xA9\u0404\xAB\xAC\xAD\xAE\u0407\xB0\xB1\u0406\u0456\u0491\xB5\xB6\xB7\u0451\u2116\u0454\xBB\u0458\u0405\u0455\u0457\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F"
        },
        "win1251": "windows1251",
        "cp1251": "windows1251",
        "windows1252": {
          "type": "_sbcs",
          "chars": "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\uFFFD\u017D\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\uFFFD\u017E\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
        },
        "win1252": "windows1252",
        "cp1252": "windows1252",
        "windows1253": {
          "type": "_sbcs",
          "chars": "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\uFFFD\u2030\uFFFD\u2039\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\xA0\u0385\u0386\xA3\xA4\xA5\xA6\xA7\xA8\xA9\uFFFD\xAB\xAC\xAD\xAE\u2015\xB0\xB1\xB2\xB3\u0384\xB5\xB6\xB7\u0388\u0389\u038A\xBB\u038C\xBD\u038E\u038F\u0390\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\uFFFD\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03AA\u03AB\u03AC\u03AD\u03AE\u03AF\u03B0\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C2\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\u03CA\u03CB\u03CC\u03CD\u03CE\uFFFD"
        },
        "win1253": "windows1253",
        "cp1253": "windows1253",
        "windows1254": {
          "type": "_sbcs",
          "chars": "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\uFFFD\uFFFD\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u011E\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u0130\u015E\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u011F\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u0131\u015F\xFF"
        },
        "win1254": "windows1254",
        "cp1254": "windows1254",
        "windows1255": {
          "type": "_sbcs",
          "chars": "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\uFFFD\u2039\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\xA0\xA1\xA2\xA3\u20AA\xA5\xA6\xA7\xA8\xA9\xD7\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xF7\xBB\xBC\xBD\xBE\xBF\u05B0\u05B1\u05B2\u05B3\u05B4\u05B5\u05B6\u05B7\u05B8\u05B9\u05BA\u05BB\u05BC\u05BD\u05BE\u05BF\u05C0\u05C1\u05C2\u05C3\u05F0\u05F1\u05F2\u05F3\u05F4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\uFFFD\uFFFD\u200E\u200F\uFFFD"
        },
        "win1255": "windows1255",
        "cp1255": "windows1255",
        "windows1256": {
          "type": "_sbcs",
          "chars": "\u20AC\u067E\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0679\u2039\u0152\u0686\u0698\u0688\u06AF\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u06A9\u2122\u0691\u203A\u0153\u200C\u200D\u06BA\xA0\u060C\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\u06BE\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\u061B\xBB\xBC\xBD\xBE\u061F\u06C1\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\xD7\u0637\u0638\u0639\u063A\u0640\u0641\u0642\u0643\xE0\u0644\xE2\u0645\u0646\u0647\u0648\xE7\xE8\xE9\xEA\xEB\u0649\u064A\xEE\xEF\u064B\u064C\u064D\u064E\xF4\u064F\u0650\xF7\u0651\xF9\u0652\xFB\xFC\u200E\u200F\u06D2"
        },
        "win1256": "windows1256",
        "cp1256": "windows1256",
        "windows1257": {
          "type": "_sbcs",
          "chars": "\u20AC\uFFFD\u201A\uFFFD\u201E\u2026\u2020\u2021\uFFFD\u2030\uFFFD\u2039\uFFFD\xA8\u02C7\xB8\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\xAF\u02DB\uFFFD\xA0\uFFFD\xA2\xA3\xA4\uFFFD\xA6\xA7\xD8\xA9\u0156\xAB\xAC\xAD\xAE\xC6\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xF8\xB9\u0157\xBB\xBC\xBD\xBE\xE6\u0104\u012E\u0100\u0106\xC4\xC5\u0118\u0112\u010C\xC9\u0179\u0116\u0122\u0136\u012A\u013B\u0160\u0143\u0145\xD3\u014C\xD5\xD6\xD7\u0172\u0141\u015A\u016A\xDC\u017B\u017D\xDF\u0105\u012F\u0101\u0107\xE4\xE5\u0119\u0113\u010D\xE9\u017A\u0117\u0123\u0137\u012B\u013C\u0161\u0144\u0146\xF3\u014D\xF5\xF6\xF7\u0173\u0142\u015B\u016B\xFC\u017C\u017E\u02D9"
        },
        "win1257": "windows1257",
        "cp1257": "windows1257",
        "windows1258": {
          "type": "_sbcs",
          "chars": "\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\uFFFD\u2039\u0152\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\uFFFD\u203A\u0153\uFFFD\uFFFD\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\u0102\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\u0300\xCD\xCE\xCF\u0110\xD1\u0309\xD3\xD4\u01A0\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u01AF\u0303\xDF\xE0\xE1\xE2\u0103\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\u0301\xED\xEE\xEF\u0111\xF1\u0323\xF3\xF4\u01A1\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u01B0\u20AB\xFF"
        },
        "win1258": "windows1258",
        "cp1258": "windows1258",
        "iso88591": {
          "type": "_sbcs",
          "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
        },
        "cp28591": "iso88591",
        "iso88592": {
          "type": "_sbcs",
          "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0104\u02D8\u0141\xA4\u013D\u015A\xA7\xA8\u0160\u015E\u0164\u0179\xAD\u017D\u017B\xB0\u0105\u02DB\u0142\xB4\u013E\u015B\u02C7\xB8\u0161\u015F\u0165\u017A\u02DD\u017E\u017C\u0154\xC1\xC2\u0102\xC4\u0139\u0106\xC7\u010C\xC9\u0118\xCB\u011A\xCD\xCE\u010E\u0110\u0143\u0147\xD3\xD4\u0150\xD6\xD7\u0158\u016E\xDA\u0170\xDC\xDD\u0162\xDF\u0155\xE1\xE2\u0103\xE4\u013A\u0107\xE7\u010D\xE9\u0119\xEB\u011B\xED\xEE\u010F\u0111\u0144\u0148\xF3\xF4\u0151\xF6\xF7\u0159\u016F\xFA\u0171\xFC\xFD\u0163\u02D9"
        },
        "cp28592": "iso88592",
        "iso88593": {
          "type": "_sbcs",
          "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0126\u02D8\xA3\xA4\uFFFD\u0124\xA7\xA8\u0130\u015E\u011E\u0134\xAD\uFFFD\u017B\xB0\u0127\xB2\xB3\xB4\xB5\u0125\xB7\xB8\u0131\u015F\u011F\u0135\xBD\uFFFD\u017C\xC0\xC1\xC2\uFFFD\xC4\u010A\u0108\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\uFFFD\xD1\xD2\xD3\xD4\u0120\xD6\xD7\u011C\xD9\xDA\xDB\xDC\u016C\u015C\xDF\xE0\xE1\xE2\uFFFD\xE4\u010B\u0109\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\uFFFD\xF1\xF2\xF3\xF4\u0121\xF6\xF7\u011D\xF9\xFA\xFB\xFC\u016D\u015D\u02D9"
        },
        "cp28593": "iso88593",
        "iso88594": {
          "type": "_sbcs",
          "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0104\u0138\u0156\xA4\u0128\u013B\xA7\xA8\u0160\u0112\u0122\u0166\xAD\u017D\xAF\xB0\u0105\u02DB\u0157\xB4\u0129\u013C\u02C7\xB8\u0161\u0113\u0123\u0167\u014A\u017E\u014B\u0100\xC1\xC2\xC3\xC4\xC5\xC6\u012E\u010C\xC9\u0118\xCB\u0116\xCD\xCE\u012A\u0110\u0145\u014C\u0136\xD4\xD5\xD6\xD7\xD8\u0172\xDA\xDB\xDC\u0168\u016A\xDF\u0101\xE1\xE2\xE3\xE4\xE5\xE6\u012F\u010D\xE9\u0119\xEB\u0117\xED\xEE\u012B\u0111\u0146\u014D\u0137\xF4\xF5\xF6\xF7\xF8\u0173\xFA\xFB\xFC\u0169\u016B\u02D9"
        },
        "cp28594": "iso88594",
        "iso88595": {
          "type": "_sbcs",
          "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0401\u0402\u0403\u0404\u0405\u0406\u0407\u0408\u0409\u040A\u040B\u040C\xAD\u040E\u040F\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u2116\u0451\u0452\u0453\u0454\u0455\u0456\u0457\u0458\u0459\u045A\u045B\u045C\xA7\u045E\u045F"
        },
        "cp28595": "iso88595",
        "iso88596": {
          "type": "_sbcs",
          "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\uFFFD\uFFFD\uFFFD\xA4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u060C\xAD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u061B\uFFFD\uFFFD\uFFFD\u061F\uFFFD\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\u0637\u0638\u0639\u063A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0640\u0641\u0642\u0643\u0644\u0645\u0646\u0647\u0648\u0649\u064A\u064B\u064C\u064D\u064E\u064F\u0650\u0651\u0652\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"
        },
        "cp28596": "iso88596",
        "iso88597": {
          "type": "_sbcs",
          "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u2018\u2019\xA3\u20AC\u20AF\xA6\xA7\xA8\xA9\u037A\xAB\xAC\xAD\uFFFD\u2015\xB0\xB1\xB2\xB3\u0384\u0385\u0386\xB7\u0388\u0389\u038A\xBB\u038C\xBD\u038E\u038F\u0390\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\uFFFD\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03AA\u03AB\u03AC\u03AD\u03AE\u03AF\u03B0\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C2\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\u03CA\u03CB\u03CC\u03CD\u03CE\uFFFD"
        },
        "cp28597": "iso88597",
        "iso88598": {
          "type": "_sbcs",
          "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\uFFFD\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xD7\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xF7\xBB\xBC\xBD\xBE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2017\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\uFFFD\uFFFD\u200E\u200F\uFFFD"
        },
        "cp28598": "iso88598",
        "iso88599": {
          "type": "_sbcs",
          "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u011E\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u0130\u015E\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u011F\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u0131\u015F\xFF"
        },
        "cp28599": "iso88599",
        "iso885910": {
          "type": "_sbcs",
          "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0104\u0112\u0122\u012A\u0128\u0136\xA7\u013B\u0110\u0160\u0166\u017D\xAD\u016A\u014A\xB0\u0105\u0113\u0123\u012B\u0129\u0137\xB7\u013C\u0111\u0161\u0167\u017E\u2015\u016B\u014B\u0100\xC1\xC2\xC3\xC4\xC5\xC6\u012E\u010C\xC9\u0118\xCB\u0116\xCD\xCE\xCF\xD0\u0145\u014C\xD3\xD4\xD5\xD6\u0168\xD8\u0172\xDA\xDB\xDC\xDD\xDE\xDF\u0101\xE1\xE2\xE3\xE4\xE5\xE6\u012F\u010D\xE9\u0119\xEB\u0117\xED\xEE\xEF\xF0\u0146\u014D\xF3\xF4\xF5\xF6\u0169\xF8\u0173\xFA\xFB\xFC\xFD\xFE\u0138"
        },
        "cp28600": "iso885910",
        "iso885911": {
          "type": "_sbcs",
          "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD"
        },
        "cp28601": "iso885911",
        "iso885913": {
          "type": "_sbcs",
          "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u201D\xA2\xA3\xA4\u201E\xA6\xA7\xD8\xA9\u0156\xAB\xAC\xAD\xAE\xC6\xB0\xB1\xB2\xB3\u201C\xB5\xB6\xB7\xF8\xB9\u0157\xBB\xBC\xBD\xBE\xE6\u0104\u012E\u0100\u0106\xC4\xC5\u0118\u0112\u010C\xC9\u0179\u0116\u0122\u0136\u012A\u013B\u0160\u0143\u0145\xD3\u014C\xD5\xD6\xD7\u0172\u0141\u015A\u016A\xDC\u017B\u017D\xDF\u0105\u012F\u0101\u0107\xE4\xE5\u0119\u0113\u010D\xE9\u017A\u0117\u0123\u0137\u012B\u013C\u0161\u0144\u0146\xF3\u014D\xF5\xF6\xF7\u0173\u0142\u015B\u016B\xFC\u017C\u017E\u2019"
        },
        "cp28603": "iso885913",
        "iso885914": {
          "type": "_sbcs",
          "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u1E02\u1E03\xA3\u010A\u010B\u1E0A\xA7\u1E80\xA9\u1E82\u1E0B\u1EF2\xAD\xAE\u0178\u1E1E\u1E1F\u0120\u0121\u1E40\u1E41\xB6\u1E56\u1E81\u1E57\u1E83\u1E60\u1EF3\u1E84\u1E85\u1E61\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u0174\xD1\xD2\xD3\xD4\xD5\xD6\u1E6A\xD8\xD9\xDA\xDB\xDC\xDD\u0176\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u0175\xF1\xF2\xF3\xF4\xF5\xF6\u1E6B\xF8\xF9\xFA\xFB\xFC\xFD\u0177\xFF"
        },
        "cp28604": "iso885914",
        "iso885915": {
          "type": "_sbcs",
          "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\u20AC\xA5\u0160\xA7\u0161\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\u017D\xB5\xB6\xB7\u017E\xB9\xBA\xBB\u0152\u0153\u0178\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
        },
        "cp28605": "iso885915",
        "iso885916": {
          "type": "_sbcs",
          "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0104\u0105\u0141\u20AC\u201E\u0160\xA7\u0161\xA9\u0218\xAB\u0179\xAD\u017A\u017B\xB0\xB1\u010C\u0142\u017D\u201D\xB6\xB7\u017E\u010D\u0219\xBB\u0152\u0153\u0178\u017C\xC0\xC1\xC2\u0102\xC4\u0106\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u0110\u0143\xD2\xD3\xD4\u0150\xD6\u015A\u0170\xD9\xDA\xDB\xDC\u0118\u021A\xDF\xE0\xE1\xE2\u0103\xE4\u0107\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u0111\u0144\xF2\xF3\xF4\u0151\xF6\u015B\u0171\xF9\xFA\xFB\xFC\u0119\u021B\xFF"
        },
        "cp28606": "iso885916",
        "cp437": {
          "type": "_sbcs",
          "chars": "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xA2\xA3\xA5\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
        },
        "ibm437": "cp437",
        "csibm437": "cp437",
        "cp737": {
          "type": "_sbcs",
          "chars": "\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C2\u03C4\u03C5\u03C6\u03C7\u03C8\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03C9\u03AC\u03AD\u03AE\u03CA\u03AF\u03CC\u03CD\u03CB\u03CE\u0386\u0388\u0389\u038A\u038C\u038E\u038F\xB1\u2265\u2264\u03AA\u03AB\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
        },
        "ibm737": "cp737",
        "csibm737": "cp737",
        "cp775": {
          "type": "_sbcs",
          "chars": "\u0106\xFC\xE9\u0101\xE4\u0123\xE5\u0107\u0142\u0113\u0156\u0157\u012B\u0179\xC4\xC5\xC9\xE6\xC6\u014D\xF6\u0122\xA2\u015A\u015B\xD6\xDC\xF8\xA3\xD8\xD7\xA4\u0100\u012A\xF3\u017B\u017C\u017A\u201D\xA6\xA9\xAE\xAC\xBD\xBC\u0141\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u0104\u010C\u0118\u0116\u2563\u2551\u2557\u255D\u012E\u0160\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u0172\u016A\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u017D\u0105\u010D\u0119\u0117\u012F\u0161\u0173\u016B\u017E\u2518\u250C\u2588\u2584\u258C\u2590\u2580\xD3\xDF\u014C\u0143\xF5\xD5\xB5\u0144\u0136\u0137\u013B\u013C\u0146\u0112\u0145\u2019\xAD\xB1\u201C\xBE\xB6\xA7\xF7\u201E\xB0\u2219\xB7\xB9\xB3\xB2\u25A0\xA0"
        },
        "ibm775": "cp775",
        "csibm775": "cp775",
        "cp850": {
          "type": "_sbcs",
          "chars": "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\xD7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xF0\xD0\xCA\xCB\xC8\u0131\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\xFE\xDE\xDA\xDB\xD9\xFD\xDD\xAF\xB4\xAD\xB1\u2017\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0"
        },
        "ibm850": "cp850",
        "csibm850": "cp850",
        "cp852": {
          "type": "_sbcs",
          "chars": "\xC7\xFC\xE9\xE2\xE4\u016F\u0107\xE7\u0142\xEB\u0150\u0151\xEE\u0179\xC4\u0106\xC9\u0139\u013A\xF4\xF6\u013D\u013E\u015A\u015B\xD6\xDC\u0164\u0165\u0141\xD7\u010D\xE1\xED\xF3\xFA\u0104\u0105\u017D\u017E\u0118\u0119\xAC\u017A\u010C\u015F\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\u011A\u015E\u2563\u2551\u2557\u255D\u017B\u017C\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u0102\u0103\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\u0111\u0110\u010E\xCB\u010F\u0147\xCD\xCE\u011B\u2518\u250C\u2588\u2584\u0162\u016E\u2580\xD3\xDF\xD4\u0143\u0144\u0148\u0160\u0161\u0154\xDA\u0155\u0170\xFD\xDD\u0163\xB4\xAD\u02DD\u02DB\u02C7\u02D8\xA7\xF7\xB8\xB0\xA8\u02D9\u0171\u0158\u0159\u25A0\xA0"
        },
        "ibm852": "cp852",
        "csibm852": "cp852",
        "cp855": {
          "type": "_sbcs",
          "chars": "\u0452\u0402\u0453\u0403\u0451\u0401\u0454\u0404\u0455\u0405\u0456\u0406\u0457\u0407\u0458\u0408\u0459\u0409\u045A\u040A\u045B\u040B\u045C\u040C\u045E\u040E\u045F\u040F\u044E\u042E\u044A\u042A\u0430\u0410\u0431\u0411\u0446\u0426\u0434\u0414\u0435\u0415\u0444\u0424\u0433\u0413\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u0445\u0425\u0438\u0418\u2563\u2551\u2557\u255D\u0439\u0419\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u043A\u041A\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\u043B\u041B\u043C\u041C\u043D\u041D\u043E\u041E\u043F\u2518\u250C\u2588\u2584\u041F\u044F\u2580\u042F\u0440\u0420\u0441\u0421\u0442\u0422\u0443\u0423\u0436\u0416\u0432\u0412\u044C\u042C\u2116\xAD\u044B\u042B\u0437\u0417\u0448\u0428\u044D\u042D\u0449\u0429\u0447\u0427\xA7\u25A0\xA0"
        },
        "ibm855": "cp855",
        "csibm855": "cp855",
        "cp856": {
          "type": "_sbcs",
          "chars": "\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\uFFFD\xA3\uFFFD\xD7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xAE\xAC\xBD\xBC\uFFFD\xAB\xBB\u2591\u2592\u2593\u2502\u2524\uFFFD\uFFFD\uFFFD\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\uFFFD\uFFFD\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2518\u250C\u2588\u2584\xA6\uFFFD\u2580\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xB5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xAF\xB4\xAD\xB1\u2017\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0"
        },
        "ibm856": "cp856",
        "csibm856": "cp856",
        "cp857": {
          "type": "_sbcs",
          "chars": "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\u0131\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\u0130\xD6\xDC\xF8\xA3\xD8\u015E\u015F\xE1\xED\xF3\xFA\xF1\xD1\u011E\u011F\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xBA\xAA\xCA\xCB\xC8\uFFFD\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\uFFFD\xD7\xDA\xDB\xD9\xEC\xFF\xAF\xB4\xAD\xB1\uFFFD\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0"
        },
        "ibm857": "cp857",
        "csibm857": "cp857",
        "cp858": {
          "type": "_sbcs",
          "chars": "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\xD7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xF0\xD0\xCA\xCB\xC8\u20AC\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\xFE\xDE\xDA\xDB\xD9\xFD\xDD\xAF\xB4\xAD\xB1\u2017\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0"
        },
        "ibm858": "cp858",
        "csibm858": "cp858",
        "cp860": {
          "type": "_sbcs",
          "chars": "\xC7\xFC\xE9\xE2\xE3\xE0\xC1\xE7\xEA\xCA\xE8\xCD\xD4\xEC\xC3\xC2\xC9\xC0\xC8\xF4\xF5\xF2\xDA\xF9\xCC\xD5\xDC\xA2\xA3\xD9\u20A7\xD3\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\xD2\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
        },
        "ibm860": "cp860",
        "csibm860": "cp860",
        "cp861": {
          "type": "_sbcs",
          "chars": "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xD0\xF0\xDE\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xFE\xFB\xDD\xFD\xD6\xDC\xF8\xA3\xD8\u20A7\u0192\xE1\xED\xF3\xFA\xC1\xCD\xD3\xDA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
        },
        "ibm861": "cp861",
        "csibm861": "cp861",
        "cp862": {
          "type": "_sbcs",
          "chars": "\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\xA2\xA3\xA5\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
        },
        "ibm862": "cp862",
        "csibm862": "cp862",
        "cp863": {
          "type": "_sbcs",
          "chars": "\xC7\xFC\xE9\xE2\xC2\xE0\xB6\xE7\xEA\xEB\xE8\xEF\xEE\u2017\xC0\xA7\xC9\xC8\xCA\xF4\xCB\xCF\xFB\xF9\xA4\xD4\xDC\xA2\xA3\xD9\xDB\u0192\xA6\xB4\xF3\xFA\xA8\xB8\xB3\xAF\xCE\u2310\xAC\xBD\xBC\xBE\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
        },
        "ibm863": "cp863",
        "csibm863": "cp863",
        "cp864": {
          "type": "_sbcs",
          "chars": "\0\x07\b	\n\v\f\r\x1B !\"#$\u066A&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xB0\xB7\u2219\u221A\u2592\u2500\u2502\u253C\u2524\u252C\u251C\u2534\u2510\u250C\u2514\u2518\u03B2\u221E\u03C6\xB1\xBD\xBC\u2248\xAB\xBB\uFEF7\uFEF8\uFFFD\uFFFD\uFEFB\uFEFC\uFFFD\xA0\xAD\uFE82\xA3\xA4\uFE84\uFFFD\uFFFD\uFE8E\uFE8F\uFE95\uFE99\u060C\uFE9D\uFEA1\uFEA5\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\uFED1\u061B\uFEB1\uFEB5\uFEB9\u061F\xA2\uFE80\uFE81\uFE83\uFE85\uFECA\uFE8B\uFE8D\uFE91\uFE93\uFE97\uFE9B\uFE9F\uFEA3\uFEA7\uFEA9\uFEAB\uFEAD\uFEAF\uFEB3\uFEB7\uFEBB\uFEBF\uFEC1\uFEC5\uFECB\uFECF\xA6\xAC\xF7\xD7\uFEC9\u0640\uFED3\uFED7\uFEDB\uFEDF\uFEE3\uFEE7\uFEEB\uFEED\uFEEF\uFEF3\uFEBD\uFECC\uFECE\uFECD\uFEE1\uFE7D\u0651\uFEE5\uFEE9\uFEEC\uFEF0\uFEF2\uFED0\uFED5\uFEF5\uFEF6\uFEDD\uFED9\uFEF1\u25A0\uFFFD"
        },
        "ibm864": "cp864",
        "csibm864": "cp864",
        "cp865": {
          "type": "_sbcs",
          "chars": "\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xA4\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0"
        },
        "ibm865": "cp865",
        "csibm865": "cp865",
        "cp866": {
          "type": "_sbcs",
          "chars": "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0401\u0451\u0404\u0454\u0407\u0457\u040E\u045E\xB0\u2219\xB7\u221A\u2116\xA4\u25A0\xA0"
        },
        "ibm866": "cp866",
        "csibm866": "cp866",
        "cp869": {
          "type": "_sbcs",
          "chars": "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0386\uFFFD\xB7\xAC\xA6\u2018\u2019\u0388\u2015\u0389\u038A\u03AA\u038C\uFFFD\uFFFD\u038E\u03AB\xA9\u038F\xB2\xB3\u03AC\xA3\u03AD\u03AE\u03AF\u03CA\u0390\u03CC\u03CD\u0391\u0392\u0393\u0394\u0395\u0396\u0397\xBD\u0398\u0399\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u039A\u039B\u039C\u039D\u2563\u2551\u2557\u255D\u039E\u039F\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u03A0\u03A1\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03B1\u03B2\u03B3\u2518\u250C\u2588\u2584\u03B4\u03B5\u2580\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C2\u03C4\u0384\xAD\xB1\u03C5\u03C6\u03C7\xA7\u03C8\u0385\xB0\xA8\u03C9\u03CB\u03B0\u03CE\u25A0\xA0"
        },
        "ibm869": "cp869",
        "csibm869": "cp869",
        "cp922": {
          "type": "_sbcs",
          "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\u203E\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u0160\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\u017D\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u0161\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\u017E\xFF"
        },
        "ibm922": "cp922",
        "csibm922": "cp922",
        "cp1046": {
          "type": "_sbcs",
          "chars": "\uFE88\xD7\xF7\uF8F6\uF8F5\uF8F4\uF8F7\uFE71\x88\u25A0\u2502\u2500\u2510\u250C\u2514\u2518\uFE79\uFE7B\uFE7D\uFE7F\uFE77\uFE8A\uFEF0\uFEF3\uFEF2\uFECE\uFECF\uFED0\uFEF6\uFEF8\uFEFA\uFEFC\xA0\uF8FA\uF8F9\uF8F8\xA4\uF8FB\uFE8B\uFE91\uFE97\uFE9B\uFE9F\uFEA3\u060C\xAD\uFEA7\uFEB3\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\uFEB7\u061B\uFEBB\uFEBF\uFECA\u061F\uFECB\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\u0637\uFEC7\u0639\u063A\uFECC\uFE82\uFE84\uFE8E\uFED3\u0640\u0641\u0642\u0643\u0644\u0645\u0646\u0647\u0648\u0649\u064A\u064B\u064C\u064D\u064E\u064F\u0650\u0651\u0652\uFED7\uFEDB\uFEDF\uF8FC\uFEF5\uFEF7\uFEF9\uFEFB\uFEE3\uFEE7\uFEEC\uFEE9\uFFFD"
        },
        "ibm1046": "cp1046",
        "csibm1046": "cp1046",
        "cp1124": {
          "type": "_sbcs",
          "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0401\u0402\u0490\u0404\u0405\u0406\u0407\u0408\u0409\u040A\u040B\u040C\xAD\u040E\u040F\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u2116\u0451\u0452\u0491\u0454\u0455\u0456\u0457\u0458\u0459\u045A\u045B\u045C\xA7\u045E\u045F"
        },
        "ibm1124": "cp1124",
        "csibm1124": "cp1124",
        "cp1125": {
          "type": "_sbcs",
          "chars": "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0401\u0451\u0490\u0491\u0404\u0454\u0406\u0456\u0407\u0457\xB7\u221A\u2116\xA4\u25A0\xA0"
        },
        "ibm1125": "cp1125",
        "csibm1125": "cp1125",
        "cp1129": {
          "type": "_sbcs",
          "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\u0153\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\u0178\xB5\xB6\xB7\u0152\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\u0102\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\u0300\xCD\xCE\xCF\u0110\xD1\u0309\xD3\xD4\u01A0\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u01AF\u0303\xDF\xE0\xE1\xE2\u0103\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\u0301\xED\xEE\xEF\u0111\xF1\u0323\xF3\xF4\u01A1\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u01B0\u20AB\xFF"
        },
        "ibm1129": "cp1129",
        "csibm1129": "cp1129",
        "cp1133": {
          "type": "_sbcs",
          "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0E81\u0E82\u0E84\u0E87\u0E88\u0EAA\u0E8A\u0E8D\u0E94\u0E95\u0E96\u0E97\u0E99\u0E9A\u0E9B\u0E9C\u0E9D\u0E9E\u0E9F\u0EA1\u0EA2\u0EA3\u0EA5\u0EA7\u0EAB\u0EAD\u0EAE\uFFFD\uFFFD\uFFFD\u0EAF\u0EB0\u0EB2\u0EB3\u0EB4\u0EB5\u0EB6\u0EB7\u0EB8\u0EB9\u0EBC\u0EB1\u0EBB\u0EBD\uFFFD\uFFFD\uFFFD\u0EC0\u0EC1\u0EC2\u0EC3\u0EC4\u0EC8\u0EC9\u0ECA\u0ECB\u0ECC\u0ECD\u0EC6\uFFFD\u0EDC\u0EDD\u20AD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0ED0\u0ED1\u0ED2\u0ED3\u0ED4\u0ED5\u0ED6\u0ED7\u0ED8\u0ED9\uFFFD\uFFFD\xA2\xAC\xA6\uFFFD"
        },
        "ibm1133": "cp1133",
        "csibm1133": "cp1133",
        "cp1161": {
          "type": "_sbcs",
          "chars": "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0E48\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\u0E49\u0E4A\u0E4B\u20AC\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\xA2\xAC\xA6\xA0"
        },
        "ibm1161": "cp1161",
        "csibm1161": "cp1161",
        "cp1162": {
          "type": "_sbcs",
          "chars": "\u20AC\x81\x82\x83\x84\u2026\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\u2018\u2019\u201C\u201D\u2022\u2013\u2014\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD"
        },
        "ibm1162": "cp1162",
        "csibm1162": "cp1162",
        "cp1163": {
          "type": "_sbcs",
          "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\u20AC\xA5\xA6\xA7\u0153\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\u0178\xB5\xB6\xB7\u0152\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\u0102\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\u0300\xCD\xCE\xCF\u0110\xD1\u0309\xD3\xD4\u01A0\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u01AF\u0303\xDF\xE0\xE1\xE2\u0103\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\u0301\xED\xEE\xEF\u0111\xF1\u0323\xF3\xF4\u01A1\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u01B0\u20AB\xFF"
        },
        "ibm1163": "cp1163",
        "csibm1163": "cp1163",
        "maccroatian": {
          "type": "_sbcs",
          "chars": "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\u0160\u2122\xB4\xA8\u2260\u017D\xD8\u221E\xB1\u2264\u2265\u2206\xB5\u2202\u2211\u220F\u0161\u222B\xAA\xBA\u2126\u017E\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u0106\xAB\u010C\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u0110\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\uFFFD\xA9\u2044\xA4\u2039\u203A\xC6\xBB\u2013\xB7\u201A\u201E\u2030\xC2\u0107\xC1\u010D\xC8\xCD\xCE\xCF\xCC\xD3\xD4\u0111\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u03C0\xCB\u02DA\xB8\xCA\xE6\u02C7"
        },
        "maccyrillic": {
          "type": "_sbcs",
          "chars": "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u2020\xB0\xA2\xA3\xA7\u2022\xB6\u0406\xAE\xA9\u2122\u0402\u0452\u2260\u0403\u0453\u221E\xB1\u2264\u2265\u0456\xB5\u2202\u0408\u0404\u0454\u0407\u0457\u0409\u0459\u040A\u045A\u0458\u0405\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\u040B\u045B\u040C\u045C\u0455\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u201E\u040E\u045E\u040F\u045F\u2116\u0401\u0451\u044F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\xA4"
        },
        "macgreek": {
          "type": "_sbcs",
          "chars": "\xC4\xB9\xB2\xC9\xB3\xD6\xDC\u0385\xE0\xE2\xE4\u0384\xA8\xE7\xE9\xE8\xEA\xEB\xA3\u2122\xEE\xEF\u2022\xBD\u2030\xF4\xF6\xA6\xAD\xF9\xFB\xFC\u2020\u0393\u0394\u0398\u039B\u039E\u03A0\xDF\xAE\xA9\u03A3\u03AA\xA7\u2260\xB0\u0387\u0391\xB1\u2264\u2265\xA5\u0392\u0395\u0396\u0397\u0399\u039A\u039C\u03A6\u03AB\u03A8\u03A9\u03AC\u039D\xAC\u039F\u03A1\u2248\u03A4\xAB\xBB\u2026\xA0\u03A5\u03A7\u0386\u0388\u0153\u2013\u2015\u201C\u201D\u2018\u2019\xF7\u0389\u038A\u038C\u038E\u03AD\u03AE\u03AF\u03CC\u038F\u03CD\u03B1\u03B2\u03C8\u03B4\u03B5\u03C6\u03B3\u03B7\u03B9\u03BE\u03BA\u03BB\u03BC\u03BD\u03BF\u03C0\u03CE\u03C1\u03C3\u03C4\u03B8\u03C9\u03C2\u03C7\u03C5\u03B6\u03CA\u03CB\u0390\u03B0\uFFFD"
        },
        "maciceland": {
          "type": "_sbcs",
          "chars": "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\xDD\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\xD0\xF0\xDE\xFE\xFD\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
        },
        "macroman": {
          "type": "_sbcs",
          "chars": "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\u2039\u203A\uFB01\uFB02\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
        },
        "macromania": {
          "type": "_sbcs",
          "chars": "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\u0102\u015E\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\u0103\u015F\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\u2039\u203A\u0162\u0163\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
        },
        "macthai": {
          "type": "_sbcs",
          "chars": "\xAB\xBB\u2026\uF88C\uF88F\uF892\uF895\uF898\uF88B\uF88E\uF891\uF894\uF897\u201C\u201D\uF899\uFFFD\u2022\uF884\uF889\uF885\uF886\uF887\uF888\uF88A\uF88D\uF890\uF893\uF896\u2018\u2019\uFFFD\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFEFF\u200B\u2013\u2014\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u2122\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\xAE\xA9\uFFFD\uFFFD\uFFFD\uFFFD"
        },
        "macturkish": {
          "type": "_sbcs",
          "chars": "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u011E\u011F\u0130\u0131\u015E\u015F\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\uFFFD\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
        },
        "macukraine": {
          "type": "_sbcs",
          "chars": "\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u2020\xB0\u0490\xA3\xA7\u2022\xB6\u0406\xAE\xA9\u2122\u0402\u0452\u2260\u0403\u0453\u221E\xB1\u2264\u2265\u0456\xB5\u0491\u0408\u0404\u0454\u0407\u0457\u0409\u0459\u040A\u045A\u0458\u0405\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\u040B\u045B\u040C\u045C\u0455\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u201E\u040E\u045E\u040F\u045F\u2116\u0401\u0451\u044F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\xA4"
        },
        "koi8r": {
          "type": "_sbcs",
          "chars": "\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2580\u2584\u2588\u258C\u2590\u2591\u2592\u2593\u2320\u25A0\u2219\u221A\u2248\u2264\u2265\xA0\u2321\xB0\xB2\xB7\xF7\u2550\u2551\u2552\u0451\u2553\u2554\u2555\u2556\u2557\u2558\u2559\u255A\u255B\u255C\u255D\u255E\u255F\u2560\u2561\u0401\u2562\u2563\u2564\u2565\u2566\u2567\u2568\u2569\u256A\u256B\u256C\xA9\u044E\u0430\u0431\u0446\u0434\u0435\u0444\u0433\u0445\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u044F\u0440\u0441\u0442\u0443\u0436\u0432\u044C\u044B\u0437\u0448\u044D\u0449\u0447\u044A\u042E\u0410\u0411\u0426\u0414\u0415\u0424\u0413\u0425\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u042F\u0420\u0421\u0422\u0423\u0416\u0412\u042C\u042B\u0417\u0428\u042D\u0429\u0427\u042A"
        },
        "koi8u": {
          "type": "_sbcs",
          "chars": "\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2580\u2584\u2588\u258C\u2590\u2591\u2592\u2593\u2320\u25A0\u2219\u221A\u2248\u2264\u2265\xA0\u2321\xB0\xB2\xB7\xF7\u2550\u2551\u2552\u0451\u0454\u2554\u0456\u0457\u2557\u2558\u2559\u255A\u255B\u0491\u255D\u255E\u255F\u2560\u2561\u0401\u0404\u2563\u0406\u0407\u2566\u2567\u2568\u2569\u256A\u0490\u256C\xA9\u044E\u0430\u0431\u0446\u0434\u0435\u0444\u0433\u0445\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u044F\u0440\u0441\u0442\u0443\u0436\u0432\u044C\u044B\u0437\u0448\u044D\u0449\u0447\u044A\u042E\u0410\u0411\u0426\u0414\u0415\u0424\u0413\u0425\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u042F\u0420\u0421\u0422\u0423\u0416\u0412\u042C\u042B\u0417\u0428\u042D\u0429\u0427\u042A"
        },
        "koi8ru": {
          "type": "_sbcs",
          "chars": "\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2580\u2584\u2588\u258C\u2590\u2591\u2592\u2593\u2320\u25A0\u2219\u221A\u2248\u2264\u2265\xA0\u2321\xB0\xB2\xB7\xF7\u2550\u2551\u2552\u0451\u0454\u2554\u0456\u0457\u2557\u2558\u2559\u255A\u255B\u0491\u045E\u255E\u255F\u2560\u2561\u0401\u0404\u2563\u0406\u0407\u2566\u2567\u2568\u2569\u256A\u0490\u040E\xA9\u044E\u0430\u0431\u0446\u0434\u0435\u0444\u0433\u0445\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u044F\u0440\u0441\u0442\u0443\u0436\u0432\u044C\u044B\u0437\u0448\u044D\u0449\u0447\u044A\u042E\u0410\u0411\u0426\u0414\u0415\u0424\u0413\u0425\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u042F\u0420\u0421\u0422\u0423\u0416\u0412\u042C\u042B\u0417\u0428\u042D\u0429\u0427\u042A"
        },
        "koi8t": {
          "type": "_sbcs",
          "chars": "\u049B\u0493\u201A\u0492\u201E\u2026\u2020\u2021\uFFFD\u2030\u04B3\u2039\u04B2\u04B7\u04B6\uFFFD\u049A\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u04EF\u04EE\u0451\xA4\u04E3\xA6\xA7\uFFFD\uFFFD\uFFFD\xAB\xAC\xAD\xAE\uFFFD\xB0\xB1\xB2\u0401\uFFFD\u04E2\xB6\xB7\uFFFD\u2116\uFFFD\xBB\uFFFD\uFFFD\uFFFD\xA9\u044E\u0430\u0431\u0446\u0434\u0435\u0444\u0433\u0445\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u044F\u0440\u0441\u0442\u0443\u0436\u0432\u044C\u044B\u0437\u0448\u044D\u0449\u0447\u044A\u042E\u0410\u0411\u0426\u0414\u0415\u0424\u0413\u0425\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u042F\u0420\u0421\u0422\u0423\u0416\u0412\u042C\u042B\u0417\u0428\u042D\u0429\u0427\u042A"
        },
        "armscii8": {
          "type": "_sbcs",
          "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\uFFFD\u0587\u0589)(\xBB\xAB\u2014.\u055D,-\u058A\u2026\u055C\u055B\u055E\u0531\u0561\u0532\u0562\u0533\u0563\u0534\u0564\u0535\u0565\u0536\u0566\u0537\u0567\u0538\u0568\u0539\u0569\u053A\u056A\u053B\u056B\u053C\u056C\u053D\u056D\u053E\u056E\u053F\u056F\u0540\u0570\u0541\u0571\u0542\u0572\u0543\u0573\u0544\u0574\u0545\u0575\u0546\u0576\u0547\u0577\u0548\u0578\u0549\u0579\u054A\u057A\u054B\u057B\u054C\u057C\u054D\u057D\u054E\u057E\u054F\u057F\u0550\u0580\u0551\u0581\u0552\u0582\u0553\u0583\u0554\u0584\u0555\u0585\u0556\u0586\u055A\uFFFD"
        },
        "rk1048": {
          "type": "_sbcs",
          "chars": "\u0402\u0403\u201A\u0453\u201E\u2026\u2020\u2021\u20AC\u2030\u0409\u2039\u040A\u049A\u04BA\u040F\u0452\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0459\u203A\u045A\u049B\u04BB\u045F\xA0\u04B0\u04B1\u04D8\xA4\u04E8\xA6\xA7\u0401\xA9\u0492\xAB\xAC\xAD\xAE\u04AE\xB0\xB1\u0406\u0456\u04E9\xB5\xB6\xB7\u0451\u2116\u0493\xBB\u04D9\u04A2\u04A3\u04AF\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F"
        },
        "tcvn": {
          "type": "_sbcs",
          "chars": "\0\xDA\u1EE4\u1EEA\u1EEC\u1EEE\x07\b	\n\v\f\r\u1EE8\u1EF0\u1EF2\u1EF6\u1EF8\xDD\u1EF4\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC0\u1EA2\xC3\xC1\u1EA0\u1EB6\u1EAC\xC8\u1EBA\u1EBC\xC9\u1EB8\u1EC6\xCC\u1EC8\u0128\xCD\u1ECA\xD2\u1ECE\xD5\xD3\u1ECC\u1ED8\u1EDC\u1EDE\u1EE0\u1EDA\u1EE2\xD9\u1EE6\u0168\xA0\u0102\xC2\xCA\xD4\u01A0\u01AF\u0110\u0103\xE2\xEA\xF4\u01A1\u01B0\u0111\u1EB0\u0300\u0309\u0303\u0301\u0323\xE0\u1EA3\xE3\xE1\u1EA1\u1EB2\u1EB1\u1EB3\u1EB5\u1EAF\u1EB4\u1EAE\u1EA6\u1EA8\u1EAA\u1EA4\u1EC0\u1EB7\u1EA7\u1EA9\u1EAB\u1EA5\u1EAD\xE8\u1EC2\u1EBB\u1EBD\xE9\u1EB9\u1EC1\u1EC3\u1EC5\u1EBF\u1EC7\xEC\u1EC9\u1EC4\u1EBE\u1ED2\u0129\xED\u1ECB\xF2\u1ED4\u1ECF\xF5\xF3\u1ECD\u1ED3\u1ED5\u1ED7\u1ED1\u1ED9\u1EDD\u1EDF\u1EE1\u1EDB\u1EE3\xF9\u1ED6\u1EE7\u0169\xFA\u1EE5\u1EEB\u1EED\u1EEF\u1EE9\u1EF1\u1EF3\u1EF7\u1EF9\xFD\u1EF5\u1ED0"
        },
        "georgianacademy": {
          "type": "_sbcs",
          "chars": "\x80\x81\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\x8D\x8E\x8F\x90\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\x9D\x9E\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\u10D0\u10D1\u10D2\u10D3\u10D4\u10D5\u10D6\u10D7\u10D8\u10D9\u10DA\u10DB\u10DC\u10DD\u10DE\u10DF\u10E0\u10E1\u10E2\u10E3\u10E4\u10E5\u10E6\u10E7\u10E8\u10E9\u10EA\u10EB\u10EC\u10ED\u10EE\u10EF\u10F0\u10F1\u10F2\u10F3\u10F4\u10F5\u10F6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
        },
        "georgianps": {
          "type": "_sbcs",
          "chars": "\x80\x81\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\x8D\x8E\x8F\x90\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\x9D\x9E\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\u10D0\u10D1\u10D2\u10D3\u10D4\u10D5\u10D6\u10F1\u10D7\u10D8\u10D9\u10DA\u10DB\u10DC\u10F2\u10DD\u10DE\u10DF\u10E0\u10E1\u10E2\u10F3\u10E3\u10E4\u10E5\u10E6\u10E7\u10E8\u10E9\u10EA\u10EB\u10EC\u10ED\u10EE\u10F4\u10EF\u10F0\u10F5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
        },
        "pt154": {
          "type": "_sbcs",
          "chars": "\u0496\u0492\u04EE\u0493\u201E\u2026\u04B6\u04AE\u04B2\u04AF\u04A0\u04E2\u04A2\u049A\u04BA\u04B8\u0497\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u04B3\u04B7\u04A1\u04E3\u04A3\u049B\u04BB\u04B9\xA0\u040E\u045E\u0408\u04E8\u0498\u04B0\xA7\u0401\xA9\u04D8\xAB\xAC\u04EF\xAE\u049C\xB0\u04B1\u0406\u0456\u0499\u04E9\xB6\xB7\u0451\u2116\u04D9\xBB\u0458\u04AA\u04AB\u049D\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F"
        },
        "viscii": {
          "type": "_sbcs",
          "chars": "\0\u1EB2\u1EB4\u1EAA\x07\b	\n\v\f\r\u1EF6\u1EF8\x1B\u1EF4 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u1EA0\u1EAE\u1EB0\u1EB6\u1EA4\u1EA6\u1EA8\u1EAC\u1EBC\u1EB8\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EE2\u1EDA\u1EDC\u1EDE\u1ECA\u1ECE\u1ECC\u1EC8\u1EE6\u0168\u1EE4\u1EF2\xD5\u1EAF\u1EB1\u1EB7\u1EA5\u1EA7\u1EA9\u1EAD\u1EBD\u1EB9\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1ED1\u1ED3\u1ED5\u1ED7\u1EE0\u01A0\u1ED9\u1EDD\u1EDF\u1ECB\u1EF0\u1EE8\u1EEA\u1EEC\u01A1\u1EDB\u01AF\xC0\xC1\xC2\xC3\u1EA2\u0102\u1EB3\u1EB5\xC8\xC9\xCA\u1EBA\xCC\xCD\u0128\u1EF3\u0110\u1EE9\xD2\xD3\xD4\u1EA1\u1EF7\u1EEB\u1EED\xD9\xDA\u1EF9\u1EF5\xDD\u1EE1\u01B0\xE0\xE1\xE2\xE3\u1EA3\u0103\u1EEF\u1EAB\xE8\xE9\xEA\u1EBB\xEC\xED\u0129\u1EC9\u0111\u1EF1\xF2\xF3\xF4\xF5\u1ECF\u1ECD\u1EE5\xF9\xFA\u0169\u1EE7\xFD\u1EE3\u1EEE"
        },
        "iso646cn": {
          "type": "_sbcs",
          "chars": "\0\x07\b	\n\v\f\r\x1B !\"#\xA5%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}\u203E\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"
        },
        "iso646jp": {
          "type": "_sbcs",
          "chars": "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\xA5]^_`abcdefghijklmnopqrstuvwxyz{|}\u203E\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"
        },
        "hproman8": {
          "type": "_sbcs",
          "chars": "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xC0\xC2\xC8\xCA\xCB\xCE\xCF\xB4\u02CB\u02C6\xA8\u02DC\xD9\xDB\u20A4\xAF\xDD\xFD\xB0\xC7\xE7\xD1\xF1\xA1\xBF\xA4\xA3\xA5\xA7\u0192\xA2\xE2\xEA\xF4\xFB\xE1\xE9\xF3\xFA\xE0\xE8\xF2\xF9\xE4\xEB\xF6\xFC\xC5\xEE\xD8\xC6\xE5\xED\xF8\xE6\xC4\xEC\xD6\xDC\xC9\xEF\xDF\xD4\xC1\xC3\xE3\xD0\xF0\xCD\xCC\xD3\xD2\xD5\xF5\u0160\u0161\xDA\u0178\xFF\xDE\xFE\xB7\xB5\xB6\xBE\u2014\xBC\xBD\xAA\xBA\xAB\u25A0\xBB\xB1\uFFFD"
        },
        "macintosh": {
          "type": "_sbcs",
          "chars": "\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\u2039\u203A\uFB01\uFB02\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7"
        },
        "ascii": {
          "type": "_sbcs",
          "chars": "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"
        },
        "tis620": {
          "type": "_sbcs",
          "chars": "\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD"
        }
      };
    }
  });

  // ../modules/cmd/node_modules/iconv-lite/encodings/dbcs-codec.js
  var require_dbcs_codec = __commonJS({
    "../modules/cmd/node_modules/iconv-lite/encodings/dbcs-codec.js"(exports) {
      "use strict";
      var Buffer2 = require_safer().Buffer;
      exports._dbcs = DBCSCodec;
      var UNASSIGNED = -1;
      var GB18030_CODE = -2;
      var SEQ_START = -10;
      var NODE_START = -1e3;
      var UNASSIGNED_NODE = new Array(256);
      var DEF_CHAR = -1;
      for (i = 0; i < 256; i++)
        UNASSIGNED_NODE[i] = UNASSIGNED;
      var i;
      function DBCSCodec(codecOptions, iconv2) {
        this.encodingName = codecOptions.encodingName;
        if (!codecOptions)
          throw new Error("DBCS codec is called without the data.");
        if (!codecOptions.table)
          throw new Error("Encoding '" + this.encodingName + "' has no data.");
        var mappingTable = codecOptions.table();
        this.decodeTables = [];
        this.decodeTables[0] = UNASSIGNED_NODE.slice(0);
        this.decodeTableSeq = [];
        for (var i2 = 0; i2 < mappingTable.length; i2++)
          this._addDecodeChunk(mappingTable[i2]);
        if (typeof codecOptions.gb18030 === "function") {
          this.gb18030 = codecOptions.gb18030();
          var commonThirdByteNodeIdx = this.decodeTables.length;
          this.decodeTables.push(UNASSIGNED_NODE.slice(0));
          var commonFourthByteNodeIdx = this.decodeTables.length;
          this.decodeTables.push(UNASSIGNED_NODE.slice(0));
          var firstByteNode = this.decodeTables[0];
          for (var i2 = 129; i2 <= 254; i2++) {
            var secondByteNode = this.decodeTables[NODE_START - firstByteNode[i2]];
            for (var j = 48; j <= 57; j++) {
              if (secondByteNode[j] === UNASSIGNED) {
                secondByteNode[j] = NODE_START - commonThirdByteNodeIdx;
              } else if (secondByteNode[j] > NODE_START) {
                throw new Error("gb18030 decode tables conflict at byte 2");
              }
              var thirdByteNode = this.decodeTables[NODE_START - secondByteNode[j]];
              for (var k = 129; k <= 254; k++) {
                if (thirdByteNode[k] === UNASSIGNED) {
                  thirdByteNode[k] = NODE_START - commonFourthByteNodeIdx;
                } else if (thirdByteNode[k] === NODE_START - commonFourthByteNodeIdx) {
                  continue;
                } else if (thirdByteNode[k] > NODE_START) {
                  throw new Error("gb18030 decode tables conflict at byte 3");
                }
                var fourthByteNode = this.decodeTables[NODE_START - thirdByteNode[k]];
                for (var l = 48; l <= 57; l++) {
                  if (fourthByteNode[l] === UNASSIGNED)
                    fourthByteNode[l] = GB18030_CODE;
                }
              }
            }
          }
        }
        this.defaultCharUnicode = iconv2.defaultCharUnicode;
        this.encodeTable = [];
        this.encodeTableSeq = [];
        var skipEncodeChars = {};
        if (codecOptions.encodeSkipVals)
          for (var i2 = 0; i2 < codecOptions.encodeSkipVals.length; i2++) {
            var val = codecOptions.encodeSkipVals[i2];
            if (typeof val === "number")
              skipEncodeChars[val] = true;
            else
              for (var j = val.from; j <= val.to; j++)
                skipEncodeChars[j] = true;
          }
        this._fillEncodeTable(0, 0, skipEncodeChars);
        if (codecOptions.encodeAdd) {
          for (var uChar in codecOptions.encodeAdd)
            if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))
              this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);
        }
        this.defCharSB = this.encodeTable[0][iconv2.defaultCharSingleByte.charCodeAt(0)];
        if (this.defCharSB === UNASSIGNED)
          this.defCharSB = this.encodeTable[0]["?"];
        if (this.defCharSB === UNASSIGNED)
          this.defCharSB = "?".charCodeAt(0);
      }
      DBCSCodec.prototype.encoder = DBCSEncoder;
      DBCSCodec.prototype.decoder = DBCSDecoder;
      DBCSCodec.prototype._getDecodeTrieNode = function(addr) {
        var bytes = [];
        for (; addr > 0; addr >>>= 8)
          bytes.push(addr & 255);
        if (bytes.length == 0)
          bytes.push(0);
        var node = this.decodeTables[0];
        for (var i2 = bytes.length - 1; i2 > 0; i2--) {
          var val = node[bytes[i2]];
          if (val == UNASSIGNED) {
            node[bytes[i2]] = NODE_START - this.decodeTables.length;
            this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));
          } else if (val <= NODE_START) {
            node = this.decodeTables[NODE_START - val];
          } else
            throw new Error("Overwrite byte in " + this.encodingName + ", addr: " + addr.toString(16));
        }
        return node;
      };
      DBCSCodec.prototype._addDecodeChunk = function(chunk) {
        var curAddr = parseInt(chunk[0], 16);
        var writeTable = this._getDecodeTrieNode(curAddr);
        curAddr = curAddr & 255;
        for (var k = 1; k < chunk.length; k++) {
          var part = chunk[k];
          if (typeof part === "string") {
            for (var l = 0; l < part.length; ) {
              var code = part.charCodeAt(l++);
              if (55296 <= code && code < 56320) {
                var codeTrail = part.charCodeAt(l++);
                if (56320 <= codeTrail && codeTrail < 57344)
                  writeTable[curAddr++] = 65536 + (code - 55296) * 1024 + (codeTrail - 56320);
                else
                  throw new Error("Incorrect surrogate pair in " + this.encodingName + " at chunk " + chunk[0]);
              } else if (4080 < code && code <= 4095) {
                var len = 4095 - code + 2;
                var seq = [];
                for (var m = 0; m < len; m++)
                  seq.push(part.charCodeAt(l++));
                writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;
                this.decodeTableSeq.push(seq);
              } else
                writeTable[curAddr++] = code;
            }
          } else if (typeof part === "number") {
            var charCode = writeTable[curAddr - 1] + 1;
            for (var l = 0; l < part; l++)
              writeTable[curAddr++] = charCode++;
          } else
            throw new Error("Incorrect type '" + typeof part + "' given in " + this.encodingName + " at chunk " + chunk[0]);
        }
        if (curAddr > 255)
          throw new Error("Incorrect chunk in " + this.encodingName + " at addr " + chunk[0] + ": too long" + curAddr);
      };
      DBCSCodec.prototype._getEncodeBucket = function(uCode) {
        var high = uCode >> 8;
        if (this.encodeTable[high] === void 0)
          this.encodeTable[high] = UNASSIGNED_NODE.slice(0);
        return this.encodeTable[high];
      };
      DBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {
        var bucket = this._getEncodeBucket(uCode);
        var low = uCode & 255;
        if (bucket[low] <= SEQ_START)
          this.encodeTableSeq[SEQ_START - bucket[low]][DEF_CHAR] = dbcsCode;
        else if (bucket[low] == UNASSIGNED)
          bucket[low] = dbcsCode;
      };
      DBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {
        var uCode = seq[0];
        var bucket = this._getEncodeBucket(uCode);
        var low = uCode & 255;
        var node;
        if (bucket[low] <= SEQ_START) {
          node = this.encodeTableSeq[SEQ_START - bucket[low]];
        } else {
          node = {};
          if (bucket[low] !== UNASSIGNED)
            node[DEF_CHAR] = bucket[low];
          bucket[low] = SEQ_START - this.encodeTableSeq.length;
          this.encodeTableSeq.push(node);
        }
        for (var j = 1; j < seq.length - 1; j++) {
          var oldVal = node[uCode];
          if (typeof oldVal === "object")
            node = oldVal;
          else {
            node = node[uCode] = {};
            if (oldVal !== void 0)
              node[DEF_CHAR] = oldVal;
          }
        }
        uCode = seq[seq.length - 1];
        node[uCode] = dbcsCode;
      };
      DBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {
        var node = this.decodeTables[nodeIdx];
        var hasValues = false;
        var subNodeEmpty = {};
        for (var i2 = 0; i2 < 256; i2++) {
          var uCode = node[i2];
          var mbCode = prefix + i2;
          if (skipEncodeChars[mbCode])
            continue;
          if (uCode >= 0) {
            this._setEncodeChar(uCode, mbCode);
            hasValues = true;
          } else if (uCode <= NODE_START) {
            var subNodeIdx = NODE_START - uCode;
            if (!subNodeEmpty[subNodeIdx]) {
              var newPrefix = mbCode << 8 >>> 0;
              if (this._fillEncodeTable(subNodeIdx, newPrefix, skipEncodeChars))
                hasValues = true;
              else
                subNodeEmpty[subNodeIdx] = true;
            }
          } else if (uCode <= SEQ_START) {
            this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);
            hasValues = true;
          }
        }
        return hasValues;
      };
      function DBCSEncoder(options, codec) {
        this.leadSurrogate = -1;
        this.seqObj = void 0;
        this.encodeTable = codec.encodeTable;
        this.encodeTableSeq = codec.encodeTableSeq;
        this.defaultCharSingleByte = codec.defCharSB;
        this.gb18030 = codec.gb18030;
      }
      DBCSEncoder.prototype.write = function(str) {
        var newBuf = Buffer2.alloc(str.length * (this.gb18030 ? 4 : 3)), leadSurrogate = this.leadSurrogate, seqObj = this.seqObj, nextChar = -1, i2 = 0, j = 0;
        while (true) {
          if (nextChar === -1) {
            if (i2 == str.length)
              break;
            var uCode = str.charCodeAt(i2++);
          } else {
            var uCode = nextChar;
            nextChar = -1;
          }
          if (55296 <= uCode && uCode < 57344) {
            if (uCode < 56320) {
              if (leadSurrogate === -1) {
                leadSurrogate = uCode;
                continue;
              } else {
                leadSurrogate = uCode;
                uCode = UNASSIGNED;
              }
            } else {
              if (leadSurrogate !== -1) {
                uCode = 65536 + (leadSurrogate - 55296) * 1024 + (uCode - 56320);
                leadSurrogate = -1;
              } else {
                uCode = UNASSIGNED;
              }
            }
          } else if (leadSurrogate !== -1) {
            nextChar = uCode;
            uCode = UNASSIGNED;
            leadSurrogate = -1;
          }
          var dbcsCode = UNASSIGNED;
          if (seqObj !== void 0 && uCode != UNASSIGNED) {
            var resCode = seqObj[uCode];
            if (typeof resCode === "object") {
              seqObj = resCode;
              continue;
            } else if (typeof resCode == "number") {
              dbcsCode = resCode;
            } else if (resCode == void 0) {
              resCode = seqObj[DEF_CHAR];
              if (resCode !== void 0) {
                dbcsCode = resCode;
                nextChar = uCode;
              } else {
              }
            }
            seqObj = void 0;
          } else if (uCode >= 0) {
            var subtable = this.encodeTable[uCode >> 8];
            if (subtable !== void 0)
              dbcsCode = subtable[uCode & 255];
            if (dbcsCode <= SEQ_START) {
              seqObj = this.encodeTableSeq[SEQ_START - dbcsCode];
              continue;
            }
            if (dbcsCode == UNASSIGNED && this.gb18030) {
              var idx = findIdx(this.gb18030.uChars, uCode);
              if (idx != -1) {
                var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);
                newBuf[j++] = 129 + Math.floor(dbcsCode / 12600);
                dbcsCode = dbcsCode % 12600;
                newBuf[j++] = 48 + Math.floor(dbcsCode / 1260);
                dbcsCode = dbcsCode % 1260;
                newBuf[j++] = 129 + Math.floor(dbcsCode / 10);
                dbcsCode = dbcsCode % 10;
                newBuf[j++] = 48 + dbcsCode;
                continue;
              }
            }
          }
          if (dbcsCode === UNASSIGNED)
            dbcsCode = this.defaultCharSingleByte;
          if (dbcsCode < 256) {
            newBuf[j++] = dbcsCode;
          } else if (dbcsCode < 65536) {
            newBuf[j++] = dbcsCode >> 8;
            newBuf[j++] = dbcsCode & 255;
          } else if (dbcsCode < 16777216) {
            newBuf[j++] = dbcsCode >> 16;
            newBuf[j++] = dbcsCode >> 8 & 255;
            newBuf[j++] = dbcsCode & 255;
          } else {
            newBuf[j++] = dbcsCode >>> 24;
            newBuf[j++] = dbcsCode >>> 16 & 255;
            newBuf[j++] = dbcsCode >>> 8 & 255;
            newBuf[j++] = dbcsCode & 255;
          }
        }
        this.seqObj = seqObj;
        this.leadSurrogate = leadSurrogate;
        return newBuf.slice(0, j);
      };
      DBCSEncoder.prototype.end = function() {
        if (this.leadSurrogate === -1 && this.seqObj === void 0)
          return;
        var newBuf = Buffer2.alloc(10), j = 0;
        if (this.seqObj) {
          var dbcsCode = this.seqObj[DEF_CHAR];
          if (dbcsCode !== void 0) {
            if (dbcsCode < 256) {
              newBuf[j++] = dbcsCode;
            } else {
              newBuf[j++] = dbcsCode >> 8;
              newBuf[j++] = dbcsCode & 255;
            }
          } else {
          }
          this.seqObj = void 0;
        }
        if (this.leadSurrogate !== -1) {
          newBuf[j++] = this.defaultCharSingleByte;
          this.leadSurrogate = -1;
        }
        return newBuf.slice(0, j);
      };
      DBCSEncoder.prototype.findIdx = findIdx;
      function DBCSDecoder(options, codec) {
        this.nodeIdx = 0;
        this.prevBytes = [];
        this.decodeTables = codec.decodeTables;
        this.decodeTableSeq = codec.decodeTableSeq;
        this.defaultCharUnicode = codec.defaultCharUnicode;
        this.gb18030 = codec.gb18030;
      }
      DBCSDecoder.prototype.write = function(buf) {
        var newBuf = Buffer2.alloc(buf.length * 2), nodeIdx = this.nodeIdx, prevBytes = this.prevBytes, prevOffset = this.prevBytes.length, seqStart = -this.prevBytes.length, uCode;
        for (var i2 = 0, j = 0; i2 < buf.length; i2++) {
          var curByte = i2 >= 0 ? buf[i2] : prevBytes[i2 + prevOffset];
          var uCode = this.decodeTables[nodeIdx][curByte];
          if (uCode >= 0) {
          } else if (uCode === UNASSIGNED) {
            uCode = this.defaultCharUnicode.charCodeAt(0);
            i2 = seqStart;
          } else if (uCode === GB18030_CODE) {
            if (i2 >= 3) {
              var ptr = (buf[i2 - 3] - 129) * 12600 + (buf[i2 - 2] - 48) * 1260 + (buf[i2 - 1] - 129) * 10 + (curByte - 48);
            } else {
              var ptr = (prevBytes[i2 - 3 + prevOffset] - 129) * 12600 + ((i2 - 2 >= 0 ? buf[i2 - 2] : prevBytes[i2 - 2 + prevOffset]) - 48) * 1260 + ((i2 - 1 >= 0 ? buf[i2 - 1] : prevBytes[i2 - 1 + prevOffset]) - 129) * 10 + (curByte - 48);
            }
            var idx = findIdx(this.gb18030.gbChars, ptr);
            uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];
          } else if (uCode <= NODE_START) {
            nodeIdx = NODE_START - uCode;
            continue;
          } else if (uCode <= SEQ_START) {
            var seq = this.decodeTableSeq[SEQ_START - uCode];
            for (var k = 0; k < seq.length - 1; k++) {
              uCode = seq[k];
              newBuf[j++] = uCode & 255;
              newBuf[j++] = uCode >> 8;
            }
            uCode = seq[seq.length - 1];
          } else
            throw new Error("iconv-lite internal error: invalid decoding table value " + uCode + " at " + nodeIdx + "/" + curByte);
          if (uCode >= 65536) {
            uCode -= 65536;
            var uCodeLead = 55296 | uCode >> 10;
            newBuf[j++] = uCodeLead & 255;
            newBuf[j++] = uCodeLead >> 8;
            uCode = 56320 | uCode & 1023;
          }
          newBuf[j++] = uCode & 255;
          newBuf[j++] = uCode >> 8;
          nodeIdx = 0;
          seqStart = i2 + 1;
        }
        this.nodeIdx = nodeIdx;
        this.prevBytes = seqStart >= 0 ? Array.prototype.slice.call(buf, seqStart) : prevBytes.slice(seqStart + prevOffset).concat(Array.prototype.slice.call(buf));
        return newBuf.slice(0, j).toString("ucs2");
      };
      DBCSDecoder.prototype.end = function() {
        var ret = "";
        while (this.prevBytes.length > 0) {
          ret += this.defaultCharUnicode;
          var bytesArr = this.prevBytes.slice(1);
          this.prevBytes = [];
          this.nodeIdx = 0;
          if (bytesArr.length > 0)
            ret += this.write(bytesArr);
        }
        this.prevBytes = [];
        this.nodeIdx = 0;
        return ret;
      };
      function findIdx(table, val) {
        if (table[0] > val)
          return -1;
        var l = 0, r = table.length;
        while (l < r - 1) {
          var mid = l + (r - l + 1 >> 1);
          if (table[mid] <= val)
            l = mid;
          else
            r = mid;
        }
        return l;
      }
    }
  });

  // ../modules/cmd/node_modules/iconv-lite/encodings/tables/shiftjis.json
  var require_shiftjis = __commonJS({
    "../modules/cmd/node_modules/iconv-lite/encodings/tables/shiftjis.json"(exports, module) {
      module.exports = [
        ["0", "\0", 128],
        ["a1", "\uFF61", 62],
        ["8140", "\u3000\u3001\u3002\uFF0C\uFF0E\u30FB\uFF1A\uFF1B\uFF1F\uFF01\u309B\u309C\xB4\uFF40\xA8\uFF3E\uFFE3\uFF3F\u30FD\u30FE\u309D\u309E\u3003\u4EDD\u3005\u3006\u3007\u30FC\u2015\u2010\uFF0F\uFF3C\uFF5E\u2225\uFF5C\u2026\u2025\u2018\u2019\u201C\u201D\uFF08\uFF09\u3014\u3015\uFF3B\uFF3D\uFF5B\uFF5D\u3008", 9, "\uFF0B\uFF0D\xB1\xD7"],
        ["8180", "\xF7\uFF1D\u2260\uFF1C\uFF1E\u2266\u2267\u221E\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFFE5\uFF04\uFFE0\uFFE1\uFF05\uFF03\uFF06\uFF0A\uFF20\xA7\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u25BD\u25BC\u203B\u3012\u2192\u2190\u2191\u2193\u3013"],
        ["81b8", "\u2208\u220B\u2286\u2287\u2282\u2283\u222A\u2229"],
        ["81c8", "\u2227\u2228\uFFE2\u21D2\u21D4\u2200\u2203"],
        ["81da", "\u2220\u22A5\u2312\u2202\u2207\u2261\u2252\u226A\u226B\u221A\u223D\u221D\u2235\u222B\u222C"],
        ["81f0", "\u212B\u2030\u266F\u266D\u266A\u2020\u2021\xB6"],
        ["81fc", "\u25EF"],
        ["824f", "\uFF10", 9],
        ["8260", "\uFF21", 25],
        ["8281", "\uFF41", 25],
        ["829f", "\u3041", 82],
        ["8340", "\u30A1", 62],
        ["8380", "\u30E0", 22],
        ["839f", "\u0391", 16, "\u03A3", 6],
        ["83bf", "\u03B1", 16, "\u03C3", 6],
        ["8440", "\u0410", 5, "\u0401\u0416", 25],
        ["8470", "\u0430", 5, "\u0451\u0436", 7],
        ["8480", "\u043E", 17],
        ["849f", "\u2500\u2502\u250C\u2510\u2518\u2514\u251C\u252C\u2524\u2534\u253C\u2501\u2503\u250F\u2513\u251B\u2517\u2523\u2533\u252B\u253B\u254B\u2520\u252F\u2528\u2537\u253F\u251D\u2530\u2525\u2538\u2542"],
        ["8740", "\u2460", 19, "\u2160", 9],
        ["875f", "\u3349\u3314\u3322\u334D\u3318\u3327\u3303\u3336\u3351\u3357\u330D\u3326\u3323\u332B\u334A\u333B\u339C\u339D\u339E\u338E\u338F\u33C4\u33A1"],
        ["877e", "\u337B"],
        ["8780", "\u301D\u301F\u2116\u33CD\u2121\u32A4", 4, "\u3231\u3232\u3239\u337E\u337D\u337C\u2252\u2261\u222B\u222E\u2211\u221A\u22A5\u2220\u221F\u22BF\u2235\u2229\u222A"],
        ["889f", "\u4E9C\u5516\u5A03\u963F\u54C0\u611B\u6328\u59F6\u9022\u8475\u831C\u7A50\u60AA\u63E1\u6E25\u65ED\u8466\u82A6\u9BF5\u6893\u5727\u65A1\u6271\u5B9B\u59D0\u867B\u98F4\u7D62\u7DBE\u9B8E\u6216\u7C9F\u88B7\u5B89\u5EB5\u6309\u6697\u6848\u95C7\u978D\u674F\u4EE5\u4F0A\u4F4D\u4F9D\u5049\u56F2\u5937\u59D4\u5A01\u5C09\u60DF\u610F\u6170\u6613\u6905\u70BA\u754F\u7570\u79FB\u7DAD\u7DEF\u80C3\u840E\u8863\u8B02\u9055\u907A\u533B\u4E95\u4EA5\u57DF\u80B2\u90C1\u78EF\u4E00\u58F1\u6EA2\u9038\u7A32\u8328\u828B\u9C2F\u5141\u5370\u54BD\u54E1\u56E0\u59FB\u5F15\u98F2\u6DEB\u80E4\u852D"],
        ["8940", "\u9662\u9670\u96A0\u97FB\u540B\u53F3\u5B87\u70CF\u7FBD\u8FC2\u96E8\u536F\u9D5C\u7ABA\u4E11\u7893\u81FC\u6E26\u5618\u5504\u6B1D\u851A\u9C3B\u59E5\u53A9\u6D66\u74DC\u958F\u5642\u4E91\u904B\u96F2\u834F\u990C\u53E1\u55B6\u5B30\u5F71\u6620\u66F3\u6804\u6C38\u6CF3\u6D29\u745B\u76C8\u7A4E\u9834\u82F1\u885B\u8A60\u92ED\u6DB2\u75AB\u76CA\u99C5\u60A6\u8B01\u8D8A\u95B2\u698E\u53AD\u5186"],
        ["8980", "\u5712\u5830\u5944\u5BB4\u5EF6\u6028\u63A9\u63F4\u6CBF\u6F14\u708E\u7114\u7159\u71D5\u733F\u7E01\u8276\u82D1\u8597\u9060\u925B\u9D1B\u5869\u65BC\u6C5A\u7525\u51F9\u592E\u5965\u5F80\u5FDC\u62BC\u65FA\u6A2A\u6B27\u6BB4\u738B\u7FC1\u8956\u9D2C\u9D0E\u9EC4\u5CA1\u6C96\u837B\u5104\u5C4B\u61B6\u81C6\u6876\u7261\u4E59\u4FFA\u5378\u6069\u6E29\u7A4F\u97F3\u4E0B\u5316\u4EEE\u4F55\u4F3D\u4FA1\u4F73\u52A0\u53EF\u5609\u590F\u5AC1\u5BB6\u5BE1\u79D1\u6687\u679C\u67B6\u6B4C\u6CB3\u706B\u73C2\u798D\u79BE\u7A3C\u7B87\u82B1\u82DB\u8304\u8377\u83EF\u83D3\u8766\u8AB2\u5629\u8CA8\u8FE6\u904E\u971E\u868A\u4FC4\u5CE8\u6211\u7259\u753B\u81E5\u82BD\u86FE\u8CC0\u96C5\u9913\u99D5\u4ECB\u4F1A\u89E3\u56DE\u584A\u58CA\u5EFB\u5FEB\u602A\u6094\u6062\u61D0\u6212\u62D0\u6539"],
        ["8a40", "\u9B41\u6666\u68B0\u6D77\u7070\u754C\u7686\u7D75\u82A5\u87F9\u958B\u968E\u8C9D\u51F1\u52BE\u5916\u54B3\u5BB3\u5D16\u6168\u6982\u6DAF\u788D\u84CB\u8857\u8A72\u93A7\u9AB8\u6D6C\u99A8\u86D9\u57A3\u67FF\u86CE\u920E\u5283\u5687\u5404\u5ED3\u62E1\u64B9\u683C\u6838\u6BBB\u7372\u78BA\u7A6B\u899A\u89D2\u8D6B\u8F03\u90ED\u95A3\u9694\u9769\u5B66\u5CB3\u697D\u984D\u984E\u639B\u7B20\u6A2B"],
        ["8a80", "\u6A7F\u68B6\u9C0D\u6F5F\u5272\u559D\u6070\u62EC\u6D3B\u6E07\u6ED1\u845B\u8910\u8F44\u4E14\u9C39\u53F6\u691B\u6A3A\u9784\u682A\u515C\u7AC3\u84B2\u91DC\u938C\u565B\u9D28\u6822\u8305\u8431\u7CA5\u5208\u82C5\u74E6\u4E7E\u4F83\u51A0\u5BD2\u520A\u52D8\u52E7\u5DFB\u559A\u582A\u59E6\u5B8C\u5B98\u5BDB\u5E72\u5E79\u60A3\u611F\u6163\u61BE\u63DB\u6562\u67D1\u6853\u68FA\u6B3E\u6B53\u6C57\u6F22\u6F97\u6F45\u74B0\u7518\u76E3\u770B\u7AFF\u7BA1\u7C21\u7DE9\u7F36\u7FF0\u809D\u8266\u839E\u89B3\u8ACC\u8CAB\u9084\u9451\u9593\u9591\u95A2\u9665\u97D3\u9928\u8218\u4E38\u542B\u5CB8\u5DCC\u73A9\u764C\u773C\u5CA9\u7FEB\u8D0B\u96C1\u9811\u9854\u9858\u4F01\u4F0E\u5371\u559C\u5668\u57FA\u5947\u5B09\u5BC4\u5C90\u5E0C\u5E7E\u5FCC\u63EE\u673A\u65D7\u65E2\u671F\u68CB\u68C4"],
        ["8b40", "\u6A5F\u5E30\u6BC5\u6C17\u6C7D\u757F\u7948\u5B63\u7A00\u7D00\u5FBD\u898F\u8A18\u8CB4\u8D77\u8ECC\u8F1D\u98E2\u9A0E\u9B3C\u4E80\u507D\u5100\u5993\u5B9C\u622F\u6280\u64EC\u6B3A\u72A0\u7591\u7947\u7FA9\u87FB\u8ABC\u8B70\u63AC\u83CA\u97A0\u5409\u5403\u55AB\u6854\u6A58\u8A70\u7827\u6775\u9ECD\u5374\u5BA2\u811A\u8650\u9006\u4E18\u4E45\u4EC7\u4F11\u53CA\u5438\u5BAE\u5F13\u6025\u6551"],
        ["8b80", "\u673D\u6C42\u6C72\u6CE3\u7078\u7403\u7A76\u7AAE\u7B08\u7D1A\u7CFE\u7D66\u65E7\u725B\u53BB\u5C45\u5DE8\u62D2\u62E0\u6319\u6E20\u865A\u8A31\u8DDD\u92F8\u6F01\u79A6\u9B5A\u4EA8\u4EAB\u4EAC\u4F9B\u4FA0\u50D1\u5147\u7AF6\u5171\u51F6\u5354\u5321\u537F\u53EB\u55AC\u5883\u5CE1\u5F37\u5F4A\u602F\u6050\u606D\u631F\u6559\u6A4B\u6CC1\u72C2\u72ED\u77EF\u80F8\u8105\u8208\u854E\u90F7\u93E1\u97FF\u9957\u9A5A\u4EF0\u51DD\u5C2D\u6681\u696D\u5C40\u66F2\u6975\u7389\u6850\u7C81\u50C5\u52E4\u5747\u5DFE\u9326\u65A4\u6B23\u6B3D\u7434\u7981\u79BD\u7B4B\u7DCA\u82B9\u83CC\u887F\u895F\u8B39\u8FD1\u91D1\u541F\u9280\u4E5D\u5036\u53E5\u533A\u72D7\u7396\u77E9\u82E6\u8EAF\u99C6\u99C8\u99D2\u5177\u611A\u865E\u55B0\u7A7A\u5076\u5BD3\u9047\u9685\u4E32\u6ADB\u91E7\u5C51\u5C48"],
        ["8c40", "\u6398\u7A9F\u6C93\u9774\u8F61\u7AAA\u718A\u9688\u7C82\u6817\u7E70\u6851\u936C\u52F2\u541B\u85AB\u8A13\u7FA4\u8ECD\u90E1\u5366\u8888\u7941\u4FC2\u50BE\u5211\u5144\u5553\u572D\u73EA\u578B\u5951\u5F62\u5F84\u6075\u6176\u6167\u61A9\u63B2\u643A\u656C\u666F\u6842\u6E13\u7566\u7A3D\u7CFB\u7D4C\u7D99\u7E4B\u7F6B\u830E\u834A\u86CD\u8A08\u8A63\u8B66\u8EFD\u981A\u9D8F\u82B8\u8FCE\u9BE8"],
        ["8c80", "\u5287\u621F\u6483\u6FC0\u9699\u6841\u5091\u6B20\u6C7A\u6F54\u7A74\u7D50\u8840\u8A23\u6708\u4EF6\u5039\u5026\u5065\u517C\u5238\u5263\u55A7\u570F\u5805\u5ACC\u5EFA\u61B2\u61F8\u62F3\u6372\u691C\u6A29\u727D\u72AC\u732E\u7814\u786F\u7D79\u770C\u80A9\u898B\u8B19\u8CE2\u8ED2\u9063\u9375\u967A\u9855\u9A13\u9E78\u5143\u539F\u53B3\u5E7B\u5F26\u6E1B\u6E90\u7384\u73FE\u7D43\u8237\u8A00\u8AFA\u9650\u4E4E\u500B\u53E4\u547C\u56FA\u59D1\u5B64\u5DF1\u5EAB\u5F27\u6238\u6545\u67AF\u6E56\u72D0\u7CCA\u88B4\u80A1\u80E1\u83F0\u864E\u8A87\u8DE8\u9237\u96C7\u9867\u9F13\u4E94\u4E92\u4F0D\u5348\u5449\u543E\u5A2F\u5F8C\u5FA1\u609F\u68A7\u6A8E\u745A\u7881\u8A9E\u8AA4\u8B77\u9190\u4E5E\u9BC9\u4EA4\u4F7C\u4FAF\u5019\u5016\u5149\u516C\u529F\u52B9\u52FE\u539A\u53E3\u5411"],
        ["8d40", "\u540E\u5589\u5751\u57A2\u597D\u5B54\u5B5D\u5B8F\u5DE5\u5DE7\u5DF7\u5E78\u5E83\u5E9A\u5EB7\u5F18\u6052\u614C\u6297\u62D8\u63A7\u653B\u6602\u6643\u66F4\u676D\u6821\u6897\u69CB\u6C5F\u6D2A\u6D69\u6E2F\u6E9D\u7532\u7687\u786C\u7A3F\u7CE0\u7D05\u7D18\u7D5E\u7DB1\u8015\u8003\u80AF\u80B1\u8154\u818F\u822A\u8352\u884C\u8861\u8B1B\u8CA2\u8CFC\u90CA\u9175\u9271\u783F\u92FC\u95A4\u964D"],
        ["8d80", "\u9805\u9999\u9AD8\u9D3B\u525B\u52AB\u53F7\u5408\u58D5\u62F7\u6FE0\u8C6A\u8F5F\u9EB9\u514B\u523B\u544A\u56FD\u7A40\u9177\u9D60\u9ED2\u7344\u6F09\u8170\u7511\u5FFD\u60DA\u9AA8\u72DB\u8FBC\u6B64\u9803\u4ECA\u56F0\u5764\u58BE\u5A5A\u6068\u61C7\u660F\u6606\u6839\u68B1\u6DF7\u75D5\u7D3A\u826E\u9B42\u4E9B\u4F50\u53C9\u5506\u5D6F\u5DE6\u5DEE\u67FB\u6C99\u7473\u7802\u8A50\u9396\u88DF\u5750\u5EA7\u632B\u50B5\u50AC\u518D\u6700\u54C9\u585E\u59BB\u5BB0\u5F69\u624D\u63A1\u683D\u6B73\u6E08\u707D\u91C7\u7280\u7815\u7826\u796D\u658E\u7D30\u83DC\u88C1\u8F09\u969B\u5264\u5728\u6750\u7F6A\u8CA1\u51B4\u5742\u962A\u583A\u698A\u80B4\u54B2\u5D0E\u57FC\u7895\u9DFA\u4F5C\u524A\u548B\u643E\u6628\u6714\u67F5\u7A84\u7B56\u7D22\u932F\u685C\u9BAD\u7B39\u5319\u518A\u5237"],
        ["8e40", "\u5BDF\u62F6\u64AE\u64E6\u672D\u6BBA\u85A9\u96D1\u7690\u9BD6\u634C\u9306\u9BAB\u76BF\u6652\u4E09\u5098\u53C2\u5C71\u60E8\u6492\u6563\u685F\u71E6\u73CA\u7523\u7B97\u7E82\u8695\u8B83\u8CDB\u9178\u9910\u65AC\u66AB\u6B8B\u4ED5\u4ED4\u4F3A\u4F7F\u523A\u53F8\u53F2\u55E3\u56DB\u58EB\u59CB\u59C9\u59FF\u5B50\u5C4D\u5E02\u5E2B\u5FD7\u601D\u6307\u652F\u5B5C\u65AF\u65BD\u65E8\u679D\u6B62"],
        ["8e80", "\u6B7B\u6C0F\u7345\u7949\u79C1\u7CF8\u7D19\u7D2B\u80A2\u8102\u81F3\u8996\u8A5E\u8A69\u8A66\u8A8C\u8AEE\u8CC7\u8CDC\u96CC\u98FC\u6B6F\u4E8B\u4F3C\u4F8D\u5150\u5B57\u5BFA\u6148\u6301\u6642\u6B21\u6ECB\u6CBB\u723E\u74BD\u75D4\u78C1\u793A\u800C\u8033\u81EA\u8494\u8F9E\u6C50\u9E7F\u5F0F\u8B58\u9D2B\u7AFA\u8EF8\u5B8D\u96EB\u4E03\u53F1\u57F7\u5931\u5AC9\u5BA4\u6089\u6E7F\u6F06\u75BE\u8CEA\u5B9F\u8500\u7BE0\u5072\u67F4\u829D\u5C61\u854A\u7E1E\u820E\u5199\u5C04\u6368\u8D66\u659C\u716E\u793E\u7D17\u8005\u8B1D\u8ECA\u906E\u86C7\u90AA\u501F\u52FA\u5C3A\u6753\u707C\u7235\u914C\u91C8\u932B\u82E5\u5BC2\u5F31\u60F9\u4E3B\u53D6\u5B88\u624B\u6731\u6B8A\u72E9\u73E0\u7A2E\u816B\u8DA3\u9152\u9996\u5112\u53D7\u546A\u5BFF\u6388\u6A39\u7DAC\u9700\u56DA\u53CE\u5468"],
        ["8f40", "\u5B97\u5C31\u5DDE\u4FEE\u6101\u62FE\u6D32\u79C0\u79CB\u7D42\u7E4D\u7FD2\u81ED\u821F\u8490\u8846\u8972\u8B90\u8E74\u8F2F\u9031\u914B\u916C\u96C6\u919C\u4EC0\u4F4F\u5145\u5341\u5F93\u620E\u67D4\u6C41\u6E0B\u7363\u7E26\u91CD\u9283\u53D4\u5919\u5BBF\u6DD1\u795D\u7E2E\u7C9B\u587E\u719F\u51FA\u8853\u8FF0\u4FCA\u5CFB\u6625\u77AC\u7AE3\u821C\u99FF\u51C6\u5FAA\u65EC\u696F\u6B89\u6DF3"],
        ["8f80", "\u6E96\u6F64\u76FE\u7D14\u5DE1\u9075\u9187\u9806\u51E6\u521D\u6240\u6691\u66D9\u6E1A\u5EB6\u7DD2\u7F72\u66F8\u85AF\u85F7\u8AF8\u52A9\u53D9\u5973\u5E8F\u5F90\u6055\u92E4\u9664\u50B7\u511F\u52DD\u5320\u5347\u53EC\u54E8\u5546\u5531\u5617\u5968\u59BE\u5A3C\u5BB5\u5C06\u5C0F\u5C11\u5C1A\u5E84\u5E8A\u5EE0\u5F70\u627F\u6284\u62DB\u638C\u6377\u6607\u660C\u662D\u6676\u677E\u68A2\u6A1F\u6A35\u6CBC\u6D88\u6E09\u6E58\u713C\u7126\u7167\u75C7\u7701\u785D\u7901\u7965\u79F0\u7AE0\u7B11\u7CA7\u7D39\u8096\u83D6\u848B\u8549\u885D\u88F3\u8A1F\u8A3C\u8A54\u8A73\u8C61\u8CDE\u91A4\u9266\u937E\u9418\u969C\u9798\u4E0A\u4E08\u4E1E\u4E57\u5197\u5270\u57CE\u5834\u58CC\u5B22\u5E38\u60C5\u64FE\u6761\u6756\u6D44\u72B6\u7573\u7A63\u84B8\u8B72\u91B8\u9320\u5631\u57F4\u98FE"],
        ["9040", "\u62ED\u690D\u6B96\u71ED\u7E54\u8077\u8272\u89E6\u98DF\u8755\u8FB1\u5C3B\u4F38\u4FE1\u4FB5\u5507\u5A20\u5BDD\u5BE9\u5FC3\u614E\u632F\u65B0\u664B\u68EE\u699B\u6D78\u6DF1\u7533\u75B9\u771F\u795E\u79E6\u7D33\u81E3\u82AF\u85AA\u89AA\u8A3A\u8EAB\u8F9B\u9032\u91DD\u9707\u4EBA\u4EC1\u5203\u5875\u58EC\u5C0B\u751A\u5C3D\u814E\u8A0A\u8FC5\u9663\u976D\u7B25\u8ACF\u9808\u9162\u56F3\u53A8"],
        ["9080", "\u9017\u5439\u5782\u5E25\u63A8\u6C34\u708A\u7761\u7C8B\u7FE0\u8870\u9042\u9154\u9310\u9318\u968F\u745E\u9AC4\u5D07\u5D69\u6570\u67A2\u8DA8\u96DB\u636E\u6749\u6919\u83C5\u9817\u96C0\u88FE\u6F84\u647A\u5BF8\u4E16\u702C\u755D\u662F\u51C4\u5236\u52E2\u59D3\u5F81\u6027\u6210\u653F\u6574\u661F\u6674\u68F2\u6816\u6B63\u6E05\u7272\u751F\u76DB\u7CBE\u8056\u58F0\u88FD\u897F\u8AA0\u8A93\u8ACB\u901D\u9192\u9752\u9759\u6589\u7A0E\u8106\u96BB\u5E2D\u60DC\u621A\u65A5\u6614\u6790\u77F3\u7A4D\u7C4D\u7E3E\u810A\u8CAC\u8D64\u8DE1\u8E5F\u78A9\u5207\u62D9\u63A5\u6442\u6298\u8A2D\u7A83\u7BC0\u8AAC\u96EA\u7D76\u820C\u8749\u4ED9\u5148\u5343\u5360\u5BA3\u5C02\u5C16\u5DDD\u6226\u6247\u64B0\u6813\u6834\u6CC9\u6D45\u6D17\u67D3\u6F5C\u714E\u717D\u65CB\u7A7F\u7BAD\u7DDA"],
        ["9140", "\u7E4A\u7FA8\u817A\u821B\u8239\u85A6\u8A6E\u8CCE\u8DF5\u9078\u9077\u92AD\u9291\u9583\u9BAE\u524D\u5584\u6F38\u7136\u5168\u7985\u7E55\u81B3\u7CCE\u564C\u5851\u5CA8\u63AA\u66FE\u66FD\u695A\u72D9\u758F\u758E\u790E\u7956\u79DF\u7C97\u7D20\u7D44\u8607\u8A34\u963B\u9061\u9F20\u50E7\u5275\u53CC\u53E2\u5009\u55AA\u58EE\u594F\u723D\u5B8B\u5C64\u531D\u60E3\u60F3\u635C\u6383\u633F\u63BB"],
        ["9180", "\u64CD\u65E9\u66F9\u5DE3\u69CD\u69FD\u6F15\u71E5\u4E89\u75E9\u76F8\u7A93\u7CDF\u7DCF\u7D9C\u8061\u8349\u8358\u846C\u84BC\u85FB\u88C5\u8D70\u9001\u906D\u9397\u971C\u9A12\u50CF\u5897\u618E\u81D3\u8535\u8D08\u9020\u4FC3\u5074\u5247\u5373\u606F\u6349\u675F\u6E2C\u8DB3\u901F\u4FD7\u5C5E\u8CCA\u65CF\u7D9A\u5352\u8896\u5176\u63C3\u5B58\u5B6B\u5C0A\u640D\u6751\u905C\u4ED6\u591A\u592A\u6C70\u8A51\u553E\u5815\u59A5\u60F0\u6253\u67C1\u8235\u6955\u9640\u99C4\u9A28\u4F53\u5806\u5BFE\u8010\u5CB1\u5E2F\u5F85\u6020\u614B\u6234\u66FF\u6CF0\u6EDE\u80CE\u817F\u82D4\u888B\u8CB8\u9000\u902E\u968A\u9EDB\u9BDB\u4EE3\u53F0\u5927\u7B2C\u918D\u984C\u9DF9\u6EDD\u7027\u5353\u5544\u5B85\u6258\u629E\u62D3\u6CA2\u6FEF\u7422\u8A17\u9438\u6FC1\u8AFE\u8338\u51E7\u86F8\u53EA"],
        ["9240", "\u53E9\u4F46\u9054\u8FB0\u596A\u8131\u5DFD\u7AEA\u8FBF\u68DA\u8C37\u72F8\u9C48\u6A3D\u8AB0\u4E39\u5358\u5606\u5766\u62C5\u63A2\u65E6\u6B4E\u6DE1\u6E5B\u70AD\u77ED\u7AEF\u7BAA\u7DBB\u803D\u80C6\u86CB\u8A95\u935B\u56E3\u58C7\u5F3E\u65AD\u6696\u6A80\u6BB5\u7537\u8AC7\u5024\u77E5\u5730\u5F1B\u6065\u667A\u6C60\u75F4\u7A1A\u7F6E\u81F4\u8718\u9045\u99B3\u7BC9\u755C\u7AF9\u7B51\u84C4"],
        ["9280", "\u9010\u79E9\u7A92\u8336\u5AE1\u7740\u4E2D\u4EF2\u5B99\u5FE0\u62BD\u663C\u67F1\u6CE8\u866B\u8877\u8A3B\u914E\u92F3\u99D0\u6A17\u7026\u732A\u82E7\u8457\u8CAF\u4E01\u5146\u51CB\u558B\u5BF5\u5E16\u5E33\u5E81\u5F14\u5F35\u5F6B\u5FB4\u61F2\u6311\u66A2\u671D\u6F6E\u7252\u753A\u773A\u8074\u8139\u8178\u8776\u8ABF\u8ADC\u8D85\u8DF3\u929A\u9577\u9802\u9CE5\u52C5\u6357\u76F4\u6715\u6C88\u73CD\u8CC3\u93AE\u9673\u6D25\u589C\u690E\u69CC\u8FFD\u939A\u75DB\u901A\u585A\u6802\u63B4\u69FB\u4F43\u6F2C\u67D8\u8FBB\u8526\u7DB4\u9354\u693F\u6F70\u576A\u58F7\u5B2C\u7D2C\u722A\u540A\u91E3\u9DB4\u4EAD\u4F4E\u505C\u5075\u5243\u8C9E\u5448\u5824\u5B9A\u5E1D\u5E95\u5EAD\u5EF7\u5F1F\u608C\u62B5\u633A\u63D0\u68AF\u6C40\u7887\u798E\u7A0B\u7DE0\u8247\u8A02\u8AE6\u8E44\u9013"],
        ["9340", "\u90B8\u912D\u91D8\u9F0E\u6CE5\u6458\u64E2\u6575\u6EF4\u7684\u7B1B\u9069\u93D1\u6EBA\u54F2\u5FB9\u64A4\u8F4D\u8FED\u9244\u5178\u586B\u5929\u5C55\u5E97\u6DFB\u7E8F\u751C\u8CBC\u8EE2\u985B\u70B9\u4F1D\u6BBF\u6FB1\u7530\u96FB\u514E\u5410\u5835\u5857\u59AC\u5C60\u5F92\u6597\u675C\u6E21\u767B\u83DF\u8CED\u9014\u90FD\u934D\u7825\u783A\u52AA\u5EA6\u571F\u5974\u6012\u5012\u515A\u51AC"],
        ["9380", "\u51CD\u5200\u5510\u5854\u5858\u5957\u5B95\u5CF6\u5D8B\u60BC\u6295\u642D\u6771\u6843\u68BC\u68DF\u76D7\u6DD8\u6E6F\u6D9B\u706F\u71C8\u5F53\u75D8\u7977\u7B49\u7B54\u7B52\u7CD6\u7D71\u5230\u8463\u8569\u85E4\u8A0E\u8B04\u8C46\u8E0F\u9003\u900F\u9419\u9676\u982D\u9A30\u95D8\u50CD\u52D5\u540C\u5802\u5C0E\u61A7\u649E\u6D1E\u77B3\u7AE5\u80F4\u8404\u9053\u9285\u5CE0\u9D07\u533F\u5F97\u5FB3\u6D9C\u7279\u7763\u79BF\u7BE4\u6BD2\u72EC\u8AAD\u6803\u6A61\u51F8\u7A81\u6934\u5C4A\u9CF6\u82EB\u5BC5\u9149\u701E\u5678\u5C6F\u60C7\u6566\u6C8C\u8C5A\u9041\u9813\u5451\u66C7\u920D\u5948\u90A3\u5185\u4E4D\u51EA\u8599\u8B0E\u7058\u637A\u934B\u6962\u99B4\u7E04\u7577\u5357\u6960\u8EDF\u96E3\u6C5D\u4E8C\u5C3C\u5F10\u8FE9\u5302\u8CD1\u8089\u8679\u5EFF\u65E5\u4E73\u5165"],
        ["9440", "\u5982\u5C3F\u97EE\u4EFB\u598A\u5FCD\u8A8D\u6FE1\u79B0\u7962\u5BE7\u8471\u732B\u71B1\u5E74\u5FF5\u637B\u649A\u71C3\u7C98\u4E43\u5EFC\u4E4B\u57DC\u56A2\u60A9\u6FC3\u7D0D\u80FD\u8133\u81BF\u8FB2\u8997\u86A4\u5DF4\u628A\u64AD\u8987\u6777\u6CE2\u6D3E\u7436\u7834\u5A46\u7F75\u82AD\u99AC\u4FF3\u5EC3\u62DD\u6392\u6557\u676F\u76C3\u724C\u80CC\u80BA\u8F29\u914D\u500D\u57F9\u5A92\u6885"],
        ["9480", "\u6973\u7164\u72FD\u8CB7\u58F2\u8CE0\u966A\u9019\u877F\u79E4\u77E7\u8429\u4F2F\u5265\u535A\u62CD\u67CF\u6CCA\u767D\u7B94\u7C95\u8236\u8584\u8FEB\u66DD\u6F20\u7206\u7E1B\u83AB\u99C1\u9EA6\u51FD\u7BB1\u7872\u7BB8\u8087\u7B48\u6AE8\u5E61\u808C\u7551\u7560\u516B\u9262\u6E8C\u767A\u9197\u9AEA\u4F10\u7F70\u629C\u7B4F\u95A5\u9CE9\u567A\u5859\u86E4\u96BC\u4F34\u5224\u534A\u53CD\u53DB\u5E06\u642C\u6591\u677F\u6C3E\u6C4E\u7248\u72AF\u73ED\u7554\u7E41\u822C\u85E9\u8CA9\u7BC4\u91C6\u7169\u9812\u98EF\u633D\u6669\u756A\u76E4\u78D0\u8543\u86EE\u532A\u5351\u5426\u5983\u5E87\u5F7C\u60B2\u6249\u6279\u62AB\u6590\u6BD4\u6CCC\u75B2\u76AE\u7891\u79D8\u7DCB\u7F77\u80A5\u88AB\u8AB9\u8CBB\u907F\u975E\u98DB\u6A0B\u7C38\u5099\u5C3E\u5FAE\u6787\u6BD8\u7435\u7709\u7F8E"],
        ["9540", "\u9F3B\u67CA\u7A17\u5339\u758B\u9AED\u5F66\u819D\u83F1\u8098\u5F3C\u5FC5\u7562\u7B46\u903C\u6867\u59EB\u5A9B\u7D10\u767E\u8B2C\u4FF5\u5F6A\u6A19\u6C37\u6F02\u74E2\u7968\u8868\u8A55\u8C79\u5EDF\u63CF\u75C5\u79D2\u82D7\u9328\u92F2\u849C\u86ED\u9C2D\u54C1\u5F6C\u658C\u6D5C\u7015\u8CA7\u8CD3\u983B\u654F\u74F6\u4E0D\u4ED8\u57E0\u592B\u5A66\u5BCC\u51A8\u5E03\u5E9C\u6016\u6276\u6577"],
        ["9580", "\u65A7\u666E\u6D6E\u7236\u7B26\u8150\u819A\u8299\u8B5C\u8CA0\u8CE6\u8D74\u961C\u9644\u4FAE\u64AB\u6B66\u821E\u8461\u856A\u90E8\u5C01\u6953\u98A8\u847A\u8557\u4F0F\u526F\u5FA9\u5E45\u670D\u798F\u8179\u8907\u8986\u6DF5\u5F17\u6255\u6CB8\u4ECF\u7269\u9B92\u5206\u543B\u5674\u58B3\u61A4\u626E\u711A\u596E\u7C89\u7CDE\u7D1B\u96F0\u6587\u805E\u4E19\u4F75\u5175\u5840\u5E63\u5E73\u5F0A\u67C4\u4E26\u853D\u9589\u965B\u7C73\u9801\u50FB\u58C1\u7656\u78A7\u5225\u77A5\u8511\u7B86\u504F\u5909\u7247\u7BC7\u7DE8\u8FBA\u8FD4\u904D\u4FBF\u52C9\u5A29\u5F01\u97AD\u4FDD\u8217\u92EA\u5703\u6355\u6B69\u752B\u88DC\u8F14\u7A42\u52DF\u5893\u6155\u620A\u66AE\u6BCD\u7C3F\u83E9\u5023\u4FF8\u5305\u5446\u5831\u5949\u5B9D\u5CF0\u5CEF\u5D29\u5E96\u62B1\u6367\u653E\u65B9\u670B"],
        ["9640", "\u6CD5\u6CE1\u70F9\u7832\u7E2B\u80DE\u82B3\u840C\u84EC\u8702\u8912\u8A2A\u8C4A\u90A6\u92D2\u98FD\u9CF3\u9D6C\u4E4F\u4EA1\u508D\u5256\u574A\u59A8\u5E3D\u5FD8\u5FD9\u623F\u66B4\u671B\u67D0\u68D2\u5192\u7D21\u80AA\u81A8\u8B00\u8C8C\u8CBF\u927E\u9632\u5420\u982C\u5317\u50D5\u535C\u58A8\u64B2\u6734\u7267\u7766\u7A46\u91E6\u52C3\u6CA1\u6B86\u5800\u5E4C\u5954\u672C\u7FFB\u51E1\u76C6"],
        ["9680", "\u6469\u78E8\u9B54\u9EBB\u57CB\u59B9\u6627\u679A\u6BCE\u54E9\u69D9\u5E55\u819C\u6795\u9BAA\u67FE\u9C52\u685D\u4EA6\u4FE3\u53C8\u62B9\u672B\u6CAB\u8FC4\u4FAD\u7E6D\u9EBF\u4E07\u6162\u6E80\u6F2B\u8513\u5473\u672A\u9B45\u5DF3\u7B95\u5CAC\u5BC6\u871C\u6E4A\u84D1\u7A14\u8108\u5999\u7C8D\u6C11\u7720\u52D9\u5922\u7121\u725F\u77DB\u9727\u9D61\u690B\u5A7F\u5A18\u51A5\u540D\u547D\u660E\u76DF\u8FF7\u9298\u9CF4\u59EA\u725D\u6EC5\u514D\u68C9\u7DBF\u7DEC\u9762\u9EBA\u6478\u6A21\u8302\u5984\u5B5F\u6BDB\u731B\u76F2\u7DB2\u8017\u8499\u5132\u6728\u9ED9\u76EE\u6762\u52FF\u9905\u5C24\u623B\u7C7E\u8CB0\u554F\u60B6\u7D0B\u9580\u5301\u4E5F\u51B6\u591C\u723A\u8036\u91CE\u5F25\u77E2\u5384\u5F79\u7D04\u85AC\u8A33\u8E8D\u9756\u67F3\u85AE\u9453\u6109\u6108\u6CB9\u7652"],
        ["9740", "\u8AED\u8F38\u552F\u4F51\u512A\u52C7\u53CB\u5BA5\u5E7D\u60A0\u6182\u63D6\u6709\u67DA\u6E67\u6D8C\u7336\u7337\u7531\u7950\u88D5\u8A98\u904A\u9091\u90F5\u96C4\u878D\u5915\u4E88\u4F59\u4E0E\u8A89\u8F3F\u9810\u50AD\u5E7C\u5996\u5BB9\u5EB8\u63DA\u63FA\u64C1\u66DC\u694A\u69D8\u6D0B\u6EB6\u7194\u7528\u7AAF\u7F8A\u8000\u8449\u84C9\u8981\u8B21\u8E0A\u9065\u967D\u990A\u617E\u6291\u6B32"],
        ["9780", "\u6C83\u6D74\u7FCC\u7FFC\u6DC0\u7F85\u87BA\u88F8\u6765\u83B1\u983C\u96F7\u6D1B\u7D61\u843D\u916A\u4E71\u5375\u5D50\u6B04\u6FEB\u85CD\u862D\u89A7\u5229\u540F\u5C65\u674E\u68A8\u7406\u7483\u75E2\u88CF\u88E1\u91CC\u96E2\u9678\u5F8B\u7387\u7ACB\u844E\u63A0\u7565\u5289\u6D41\u6E9C\u7409\u7559\u786B\u7C92\u9686\u7ADC\u9F8D\u4FB6\u616E\u65C5\u865C\u4E86\u4EAE\u50DA\u4E21\u51CC\u5BEE\u6599\u6881\u6DBC\u731F\u7642\u77AD\u7A1C\u7CE7\u826F\u8AD2\u907C\u91CF\u9675\u9818\u529B\u7DD1\u502B\u5398\u6797\u6DCB\u71D0\u7433\u81E8\u8F2A\u96A3\u9C57\u9E9F\u7460\u5841\u6D99\u7D2F\u985E\u4EE4\u4F36\u4F8B\u51B7\u52B1\u5DBA\u601C\u73B2\u793C\u82D3\u9234\u96B7\u96F6\u970A\u9E97\u9F62\u66A6\u6B74\u5217\u52A3\u70C8\u88C2\u5EC9\u604B\u6190\u6F23\u7149\u7C3E\u7DF4\u806F"],
        ["9840", "\u84EE\u9023\u932C\u5442\u9B6F\u6AD3\u7089\u8CC2\u8DEF\u9732\u52B4\u5A41\u5ECA\u5F04\u6717\u697C\u6994\u6D6A\u6F0F\u7262\u72FC\u7BED\u8001\u807E\u874B\u90CE\u516D\u9E93\u7984\u808B\u9332\u8AD6\u502D\u548C\u8A71\u6B6A\u8CC4\u8107\u60D1\u67A0\u9DF2\u4E99\u4E98\u9C10\u8A6B\u85C1\u8568\u6900\u6E7E\u7897\u8155"],
        ["989f", "\u5F0C\u4E10\u4E15\u4E2A\u4E31\u4E36\u4E3C\u4E3F\u4E42\u4E56\u4E58\u4E82\u4E85\u8C6B\u4E8A\u8212\u5F0D\u4E8E\u4E9E\u4E9F\u4EA0\u4EA2\u4EB0\u4EB3\u4EB6\u4ECE\u4ECD\u4EC4\u4EC6\u4EC2\u4ED7\u4EDE\u4EED\u4EDF\u4EF7\u4F09\u4F5A\u4F30\u4F5B\u4F5D\u4F57\u4F47\u4F76\u4F88\u4F8F\u4F98\u4F7B\u4F69\u4F70\u4F91\u4F6F\u4F86\u4F96\u5118\u4FD4\u4FDF\u4FCE\u4FD8\u4FDB\u4FD1\u4FDA\u4FD0\u4FE4\u4FE5\u501A\u5028\u5014\u502A\u5025\u5005\u4F1C\u4FF6\u5021\u5029\u502C\u4FFE\u4FEF\u5011\u5006\u5043\u5047\u6703\u5055\u5050\u5048\u505A\u5056\u506C\u5078\u5080\u509A\u5085\u50B4\u50B2"],
        ["9940", "\u50C9\u50CA\u50B3\u50C2\u50D6\u50DE\u50E5\u50ED\u50E3\u50EE\u50F9\u50F5\u5109\u5101\u5102\u5116\u5115\u5114\u511A\u5121\u513A\u5137\u513C\u513B\u513F\u5140\u5152\u514C\u5154\u5162\u7AF8\u5169\u516A\u516E\u5180\u5182\u56D8\u518C\u5189\u518F\u5191\u5193\u5195\u5196\u51A4\u51A6\u51A2\u51A9\u51AA\u51AB\u51B3\u51B1\u51B2\u51B0\u51B5\u51BD\u51C5\u51C9\u51DB\u51E0\u8655\u51E9\u51ED"],
        ["9980", "\u51F0\u51F5\u51FE\u5204\u520B\u5214\u520E\u5227\u522A\u522E\u5233\u5239\u524F\u5244\u524B\u524C\u525E\u5254\u526A\u5274\u5269\u5273\u527F\u527D\u528D\u5294\u5292\u5271\u5288\u5291\u8FA8\u8FA7\u52AC\u52AD\u52BC\u52B5\u52C1\u52CD\u52D7\u52DE\u52E3\u52E6\u98ED\u52E0\u52F3\u52F5\u52F8\u52F9\u5306\u5308\u7538\u530D\u5310\u530F\u5315\u531A\u5323\u532F\u5331\u5333\u5338\u5340\u5346\u5345\u4E17\u5349\u534D\u51D6\u535E\u5369\u536E\u5918\u537B\u5377\u5382\u5396\u53A0\u53A6\u53A5\u53AE\u53B0\u53B6\u53C3\u7C12\u96D9\u53DF\u66FC\u71EE\u53EE\u53E8\u53ED\u53FA\u5401\u543D\u5440\u542C\u542D\u543C\u542E\u5436\u5429\u541D\u544E\u548F\u5475\u548E\u545F\u5471\u5477\u5470\u5492\u547B\u5480\u5476\u5484\u5490\u5486\u54C7\u54A2\u54B8\u54A5\u54AC\u54C4\u54C8\u54A8"],
        ["9a40", "\u54AB\u54C2\u54A4\u54BE\u54BC\u54D8\u54E5\u54E6\u550F\u5514\u54FD\u54EE\u54ED\u54FA\u54E2\u5539\u5540\u5563\u554C\u552E\u555C\u5545\u5556\u5557\u5538\u5533\u555D\u5599\u5580\u54AF\u558A\u559F\u557B\u557E\u5598\u559E\u55AE\u557C\u5583\u55A9\u5587\u55A8\u55DA\u55C5\u55DF\u55C4\u55DC\u55E4\u55D4\u5614\u55F7\u5616\u55FE\u55FD\u561B\u55F9\u564E\u5650\u71DF\u5634\u5636\u5632\u5638"],
        ["9a80", "\u566B\u5664\u562F\u566C\u566A\u5686\u5680\u568A\u56A0\u5694\u568F\u56A5\u56AE\u56B6\u56B4\u56C2\u56BC\u56C1\u56C3\u56C0\u56C8\u56CE\u56D1\u56D3\u56D7\u56EE\u56F9\u5700\u56FF\u5704\u5709\u5708\u570B\u570D\u5713\u5718\u5716\u55C7\u571C\u5726\u5737\u5738\u574E\u573B\u5740\u574F\u5769\u57C0\u5788\u5761\u577F\u5789\u5793\u57A0\u57B3\u57A4\u57AA\u57B0\u57C3\u57C6\u57D4\u57D2\u57D3\u580A\u57D6\u57E3\u580B\u5819\u581D\u5872\u5821\u5862\u584B\u5870\u6BC0\u5852\u583D\u5879\u5885\u58B9\u589F\u58AB\u58BA\u58DE\u58BB\u58B8\u58AE\u58C5\u58D3\u58D1\u58D7\u58D9\u58D8\u58E5\u58DC\u58E4\u58DF\u58EF\u58FA\u58F9\u58FB\u58FC\u58FD\u5902\u590A\u5910\u591B\u68A6\u5925\u592C\u592D\u5932\u5938\u593E\u7AD2\u5955\u5950\u594E\u595A\u5958\u5962\u5960\u5967\u596C\u5969"],
        ["9b40", "\u5978\u5981\u599D\u4F5E\u4FAB\u59A3\u59B2\u59C6\u59E8\u59DC\u598D\u59D9\u59DA\u5A25\u5A1F\u5A11\u5A1C\u5A09\u5A1A\u5A40\u5A6C\u5A49\u5A35\u5A36\u5A62\u5A6A\u5A9A\u5ABC\u5ABE\u5ACB\u5AC2\u5ABD\u5AE3\u5AD7\u5AE6\u5AE9\u5AD6\u5AFA\u5AFB\u5B0C\u5B0B\u5B16\u5B32\u5AD0\u5B2A\u5B36\u5B3E\u5B43\u5B45\u5B40\u5B51\u5B55\u5B5A\u5B5B\u5B65\u5B69\u5B70\u5B73\u5B75\u5B78\u6588\u5B7A\u5B80"],
        ["9b80", "\u5B83\u5BA6\u5BB8\u5BC3\u5BC7\u5BC9\u5BD4\u5BD0\u5BE4\u5BE6\u5BE2\u5BDE\u5BE5\u5BEB\u5BF0\u5BF6\u5BF3\u5C05\u5C07\u5C08\u5C0D\u5C13\u5C20\u5C22\u5C28\u5C38\u5C39\u5C41\u5C46\u5C4E\u5C53\u5C50\u5C4F\u5B71\u5C6C\u5C6E\u4E62\u5C76\u5C79\u5C8C\u5C91\u5C94\u599B\u5CAB\u5CBB\u5CB6\u5CBC\u5CB7\u5CC5\u5CBE\u5CC7\u5CD9\u5CE9\u5CFD\u5CFA\u5CED\u5D8C\u5CEA\u5D0B\u5D15\u5D17\u5D5C\u5D1F\u5D1B\u5D11\u5D14\u5D22\u5D1A\u5D19\u5D18\u5D4C\u5D52\u5D4E\u5D4B\u5D6C\u5D73\u5D76\u5D87\u5D84\u5D82\u5DA2\u5D9D\u5DAC\u5DAE\u5DBD\u5D90\u5DB7\u5DBC\u5DC9\u5DCD\u5DD3\u5DD2\u5DD6\u5DDB\u5DEB\u5DF2\u5DF5\u5E0B\u5E1A\u5E19\u5E11\u5E1B\u5E36\u5E37\u5E44\u5E43\u5E40\u5E4E\u5E57\u5E54\u5E5F\u5E62\u5E64\u5E47\u5E75\u5E76\u5E7A\u9EBC\u5E7F\u5EA0\u5EC1\u5EC2\u5EC8\u5ED0\u5ECF"],
        ["9c40", "\u5ED6\u5EE3\u5EDD\u5EDA\u5EDB\u5EE2\u5EE1\u5EE8\u5EE9\u5EEC\u5EF1\u5EF3\u5EF0\u5EF4\u5EF8\u5EFE\u5F03\u5F09\u5F5D\u5F5C\u5F0B\u5F11\u5F16\u5F29\u5F2D\u5F38\u5F41\u5F48\u5F4C\u5F4E\u5F2F\u5F51\u5F56\u5F57\u5F59\u5F61\u5F6D\u5F73\u5F77\u5F83\u5F82\u5F7F\u5F8A\u5F88\u5F91\u5F87\u5F9E\u5F99\u5F98\u5FA0\u5FA8\u5FAD\u5FBC\u5FD6\u5FFB\u5FE4\u5FF8\u5FF1\u5FDD\u60B3\u5FFF\u6021\u6060"],
        ["9c80", "\u6019\u6010\u6029\u600E\u6031\u601B\u6015\u602B\u6026\u600F\u603A\u605A\u6041\u606A\u6077\u605F\u604A\u6046\u604D\u6063\u6043\u6064\u6042\u606C\u606B\u6059\u6081\u608D\u60E7\u6083\u609A\u6084\u609B\u6096\u6097\u6092\u60A7\u608B\u60E1\u60B8\u60E0\u60D3\u60B4\u5FF0\u60BD\u60C6\u60B5\u60D8\u614D\u6115\u6106\u60F6\u60F7\u6100\u60F4\u60FA\u6103\u6121\u60FB\u60F1\u610D\u610E\u6147\u613E\u6128\u6127\u614A\u613F\u613C\u612C\u6134\u613D\u6142\u6144\u6173\u6177\u6158\u6159\u615A\u616B\u6174\u616F\u6165\u6171\u615F\u615D\u6153\u6175\u6199\u6196\u6187\u61AC\u6194\u619A\u618A\u6191\u61AB\u61AE\u61CC\u61CA\u61C9\u61F7\u61C8\u61C3\u61C6\u61BA\u61CB\u7F79\u61CD\u61E6\u61E3\u61F6\u61FA\u61F4\u61FF\u61FD\u61FC\u61FE\u6200\u6208\u6209\u620D\u620C\u6214\u621B"],
        ["9d40", "\u621E\u6221\u622A\u622E\u6230\u6232\u6233\u6241\u624E\u625E\u6263\u625B\u6260\u6268\u627C\u6282\u6289\u627E\u6292\u6293\u6296\u62D4\u6283\u6294\u62D7\u62D1\u62BB\u62CF\u62FF\u62C6\u64D4\u62C8\u62DC\u62CC\u62CA\u62C2\u62C7\u629B\u62C9\u630C\u62EE\u62F1\u6327\u6302\u6308\u62EF\u62F5\u6350\u633E\u634D\u641C\u634F\u6396\u638E\u6380\u63AB\u6376\u63A3\u638F\u6389\u639F\u63B5\u636B"],
        ["9d80", "\u6369\u63BE\u63E9\u63C0\u63C6\u63E3\u63C9\u63D2\u63F6\u63C4\u6416\u6434\u6406\u6413\u6426\u6436\u651D\u6417\u6428\u640F\u6467\u646F\u6476\u644E\u652A\u6495\u6493\u64A5\u64A9\u6488\u64BC\u64DA\u64D2\u64C5\u64C7\u64BB\u64D8\u64C2\u64F1\u64E7\u8209\u64E0\u64E1\u62AC\u64E3\u64EF\u652C\u64F6\u64F4\u64F2\u64FA\u6500\u64FD\u6518\u651C\u6505\u6524\u6523\u652B\u6534\u6535\u6537\u6536\u6538\u754B\u6548\u6556\u6555\u654D\u6558\u655E\u655D\u6572\u6578\u6582\u6583\u8B8A\u659B\u659F\u65AB\u65B7\u65C3\u65C6\u65C1\u65C4\u65CC\u65D2\u65DB\u65D9\u65E0\u65E1\u65F1\u6772\u660A\u6603\u65FB\u6773\u6635\u6636\u6634\u661C\u664F\u6644\u6649\u6641\u665E\u665D\u6664\u6667\u6668\u665F\u6662\u6670\u6683\u6688\u668E\u6689\u6684\u6698\u669D\u66C1\u66B9\u66C9\u66BE\u66BC"],
        ["9e40", "\u66C4\u66B8\u66D6\u66DA\u66E0\u663F\u66E6\u66E9\u66F0\u66F5\u66F7\u670F\u6716\u671E\u6726\u6727\u9738\u672E\u673F\u6736\u6741\u6738\u6737\u6746\u675E\u6760\u6759\u6763\u6764\u6789\u6770\u67A9\u677C\u676A\u678C\u678B\u67A6\u67A1\u6785\u67B7\u67EF\u67B4\u67EC\u67B3\u67E9\u67B8\u67E4\u67DE\u67DD\u67E2\u67EE\u67B9\u67CE\u67C6\u67E7\u6A9C\u681E\u6846\u6829\u6840\u684D\u6832\u684E"],
        ["9e80", "\u68B3\u682B\u6859\u6863\u6877\u687F\u689F\u688F\u68AD\u6894\u689D\u689B\u6883\u6AAE\u68B9\u6874\u68B5\u68A0\u68BA\u690F\u688D\u687E\u6901\u68CA\u6908\u68D8\u6922\u6926\u68E1\u690C\u68CD\u68D4\u68E7\u68D5\u6936\u6912\u6904\u68D7\u68E3\u6925\u68F9\u68E0\u68EF\u6928\u692A\u691A\u6923\u6921\u68C6\u6979\u6977\u695C\u6978\u696B\u6954\u697E\u696E\u6939\u6974\u693D\u6959\u6930\u6961\u695E\u695D\u6981\u696A\u69B2\u69AE\u69D0\u69BF\u69C1\u69D3\u69BE\u69CE\u5BE8\u69CA\u69DD\u69BB\u69C3\u69A7\u6A2E\u6991\u69A0\u699C\u6995\u69B4\u69DE\u69E8\u6A02\u6A1B\u69FF\u6B0A\u69F9\u69F2\u69E7\u6A05\u69B1\u6A1E\u69ED\u6A14\u69EB\u6A0A\u6A12\u6AC1\u6A23\u6A13\u6A44\u6A0C\u6A72\u6A36\u6A78\u6A47\u6A62\u6A59\u6A66\u6A48\u6A38\u6A22\u6A90\u6A8D\u6AA0\u6A84\u6AA2\u6AA3"],
        ["9f40", "\u6A97\u8617\u6ABB\u6AC3\u6AC2\u6AB8\u6AB3\u6AAC\u6ADE\u6AD1\u6ADF\u6AAA\u6ADA\u6AEA\u6AFB\u6B05\u8616\u6AFA\u6B12\u6B16\u9B31\u6B1F\u6B38\u6B37\u76DC\u6B39\u98EE\u6B47\u6B43\u6B49\u6B50\u6B59\u6B54\u6B5B\u6B5F\u6B61\u6B78\u6B79\u6B7F\u6B80\u6B84\u6B83\u6B8D\u6B98\u6B95\u6B9E\u6BA4\u6BAA\u6BAB\u6BAF\u6BB2\u6BB1\u6BB3\u6BB7\u6BBC\u6BC6\u6BCB\u6BD3\u6BDF\u6BEC\u6BEB\u6BF3\u6BEF"],
        ["9f80", "\u9EBE\u6C08\u6C13\u6C14\u6C1B\u6C24\u6C23\u6C5E\u6C55\u6C62\u6C6A\u6C82\u6C8D\u6C9A\u6C81\u6C9B\u6C7E\u6C68\u6C73\u6C92\u6C90\u6CC4\u6CF1\u6CD3\u6CBD\u6CD7\u6CC5\u6CDD\u6CAE\u6CB1\u6CBE\u6CBA\u6CDB\u6CEF\u6CD9\u6CEA\u6D1F\u884D\u6D36\u6D2B\u6D3D\u6D38\u6D19\u6D35\u6D33\u6D12\u6D0C\u6D63\u6D93\u6D64\u6D5A\u6D79\u6D59\u6D8E\u6D95\u6FE4\u6D85\u6DF9\u6E15\u6E0A\u6DB5\u6DC7\u6DE6\u6DB8\u6DC6\u6DEC\u6DDE\u6DCC\u6DE8\u6DD2\u6DC5\u6DFA\u6DD9\u6DE4\u6DD5\u6DEA\u6DEE\u6E2D\u6E6E\u6E2E\u6E19\u6E72\u6E5F\u6E3E\u6E23\u6E6B\u6E2B\u6E76\u6E4D\u6E1F\u6E43\u6E3A\u6E4E\u6E24\u6EFF\u6E1D\u6E38\u6E82\u6EAA\u6E98\u6EC9\u6EB7\u6ED3\u6EBD\u6EAF\u6EC4\u6EB2\u6ED4\u6ED5\u6E8F\u6EA5\u6EC2\u6E9F\u6F41\u6F11\u704C\u6EEC\u6EF8\u6EFE\u6F3F\u6EF2\u6F31\u6EEF\u6F32\u6ECC"],
        ["e040", "\u6F3E\u6F13\u6EF7\u6F86\u6F7A\u6F78\u6F81\u6F80\u6F6F\u6F5B\u6FF3\u6F6D\u6F82\u6F7C\u6F58\u6F8E\u6F91\u6FC2\u6F66\u6FB3\u6FA3\u6FA1\u6FA4\u6FB9\u6FC6\u6FAA\u6FDF\u6FD5\u6FEC\u6FD4\u6FD8\u6FF1\u6FEE\u6FDB\u7009\u700B\u6FFA\u7011\u7001\u700F\u6FFE\u701B\u701A\u6F74\u701D\u7018\u701F\u7030\u703E\u7032\u7051\u7063\u7099\u7092\u70AF\u70F1\u70AC\u70B8\u70B3\u70AE\u70DF\u70CB\u70DD"],
        ["e080", "\u70D9\u7109\u70FD\u711C\u7119\u7165\u7155\u7188\u7166\u7162\u714C\u7156\u716C\u718F\u71FB\u7184\u7195\u71A8\u71AC\u71D7\u71B9\u71BE\u71D2\u71C9\u71D4\u71CE\u71E0\u71EC\u71E7\u71F5\u71FC\u71F9\u71FF\u720D\u7210\u721B\u7228\u722D\u722C\u7230\u7232\u723B\u723C\u723F\u7240\u7246\u724B\u7258\u7274\u727E\u7282\u7281\u7287\u7292\u7296\u72A2\u72A7\u72B9\u72B2\u72C3\u72C6\u72C4\u72CE\u72D2\u72E2\u72E0\u72E1\u72F9\u72F7\u500F\u7317\u730A\u731C\u7316\u731D\u7334\u732F\u7329\u7325\u733E\u734E\u734F\u9ED8\u7357\u736A\u7368\u7370\u7378\u7375\u737B\u737A\u73C8\u73B3\u73CE\u73BB\u73C0\u73E5\u73EE\u73DE\u74A2\u7405\u746F\u7425\u73F8\u7432\u743A\u7455\u743F\u745F\u7459\u7441\u745C\u7469\u7470\u7463\u746A\u7476\u747E\u748B\u749E\u74A7\u74CA\u74CF\u74D4\u73F1"],
        ["e140", "\u74E0\u74E3\u74E7\u74E9\u74EE\u74F2\u74F0\u74F1\u74F8\u74F7\u7504\u7503\u7505\u750C\u750E\u750D\u7515\u7513\u751E\u7526\u752C\u753C\u7544\u754D\u754A\u7549\u755B\u7546\u755A\u7569\u7564\u7567\u756B\u756D\u7578\u7576\u7586\u7587\u7574\u758A\u7589\u7582\u7594\u759A\u759D\u75A5\u75A3\u75C2\u75B3\u75C3\u75B5\u75BD\u75B8\u75BC\u75B1\u75CD\u75CA\u75D2\u75D9\u75E3\u75DE\u75FE\u75FF"],
        ["e180", "\u75FC\u7601\u75F0\u75FA\u75F2\u75F3\u760B\u760D\u7609\u761F\u7627\u7620\u7621\u7622\u7624\u7634\u7630\u763B\u7647\u7648\u7646\u765C\u7658\u7661\u7662\u7668\u7669\u766A\u7667\u766C\u7670\u7672\u7676\u7678\u767C\u7680\u7683\u7688\u768B\u768E\u7696\u7693\u7699\u769A\u76B0\u76B4\u76B8\u76B9\u76BA\u76C2\u76CD\u76D6\u76D2\u76DE\u76E1\u76E5\u76E7\u76EA\u862F\u76FB\u7708\u7707\u7704\u7729\u7724\u771E\u7725\u7726\u771B\u7737\u7738\u7747\u775A\u7768\u776B\u775B\u7765\u777F\u777E\u7779\u778E\u778B\u7791\u77A0\u779E\u77B0\u77B6\u77B9\u77BF\u77BC\u77BD\u77BB\u77C7\u77CD\u77D7\u77DA\u77DC\u77E3\u77EE\u77FC\u780C\u7812\u7926\u7820\u792A\u7845\u788E\u7874\u7886\u787C\u789A\u788C\u78A3\u78B5\u78AA\u78AF\u78D1\u78C6\u78CB\u78D4\u78BE\u78BC\u78C5\u78CA\u78EC"],
        ["e240", "\u78E7\u78DA\u78FD\u78F4\u7907\u7912\u7911\u7919\u792C\u792B\u7940\u7960\u7957\u795F\u795A\u7955\u7953\u797A\u797F\u798A\u799D\u79A7\u9F4B\u79AA\u79AE\u79B3\u79B9\u79BA\u79C9\u79D5\u79E7\u79EC\u79E1\u79E3\u7A08\u7A0D\u7A18\u7A19\u7A20\u7A1F\u7980\u7A31\u7A3B\u7A3E\u7A37\u7A43\u7A57\u7A49\u7A61\u7A62\u7A69\u9F9D\u7A70\u7A79\u7A7D\u7A88\u7A97\u7A95\u7A98\u7A96\u7AA9\u7AC8\u7AB0"],
        ["e280", "\u7AB6\u7AC5\u7AC4\u7ABF\u9083\u7AC7\u7ACA\u7ACD\u7ACF\u7AD5\u7AD3\u7AD9\u7ADA\u7ADD\u7AE1\u7AE2\u7AE6\u7AED\u7AF0\u7B02\u7B0F\u7B0A\u7B06\u7B33\u7B18\u7B19\u7B1E\u7B35\u7B28\u7B36\u7B50\u7B7A\u7B04\u7B4D\u7B0B\u7B4C\u7B45\u7B75\u7B65\u7B74\u7B67\u7B70\u7B71\u7B6C\u7B6E\u7B9D\u7B98\u7B9F\u7B8D\u7B9C\u7B9A\u7B8B\u7B92\u7B8F\u7B5D\u7B99\u7BCB\u7BC1\u7BCC\u7BCF\u7BB4\u7BC6\u7BDD\u7BE9\u7C11\u7C14\u7BE6\u7BE5\u7C60\u7C00\u7C07\u7C13\u7BF3\u7BF7\u7C17\u7C0D\u7BF6\u7C23\u7C27\u7C2A\u7C1F\u7C37\u7C2B\u7C3D\u7C4C\u7C43\u7C54\u7C4F\u7C40\u7C50\u7C58\u7C5F\u7C64\u7C56\u7C65\u7C6C\u7C75\u7C83\u7C90\u7CA4\u7CAD\u7CA2\u7CAB\u7CA1\u7CA8\u7CB3\u7CB2\u7CB1\u7CAE\u7CB9\u7CBD\u7CC0\u7CC5\u7CC2\u7CD8\u7CD2\u7CDC\u7CE2\u9B3B\u7CEF\u7CF2\u7CF4\u7CF6\u7CFA\u7D06"],
        ["e340", "\u7D02\u7D1C\u7D15\u7D0A\u7D45\u7D4B\u7D2E\u7D32\u7D3F\u7D35\u7D46\u7D73\u7D56\u7D4E\u7D72\u7D68\u7D6E\u7D4F\u7D63\u7D93\u7D89\u7D5B\u7D8F\u7D7D\u7D9B\u7DBA\u7DAE\u7DA3\u7DB5\u7DC7\u7DBD\u7DAB\u7E3D\u7DA2\u7DAF\u7DDC\u7DB8\u7D9F\u7DB0\u7DD8\u7DDD\u7DE4\u7DDE\u7DFB\u7DF2\u7DE1\u7E05\u7E0A\u7E23\u7E21\u7E12\u7E31\u7E1F\u7E09\u7E0B\u7E22\u7E46\u7E66\u7E3B\u7E35\u7E39\u7E43\u7E37"],
        ["e380", "\u7E32\u7E3A\u7E67\u7E5D\u7E56\u7E5E\u7E59\u7E5A\u7E79\u7E6A\u7E69\u7E7C\u7E7B\u7E83\u7DD5\u7E7D\u8FAE\u7E7F\u7E88\u7E89\u7E8C\u7E92\u7E90\u7E93\u7E94\u7E96\u7E8E\u7E9B\u7E9C\u7F38\u7F3A\u7F45\u7F4C\u7F4D\u7F4E\u7F50\u7F51\u7F55\u7F54\u7F58\u7F5F\u7F60\u7F68\u7F69\u7F67\u7F78\u7F82\u7F86\u7F83\u7F88\u7F87\u7F8C\u7F94\u7F9E\u7F9D\u7F9A\u7FA3\u7FAF\u7FB2\u7FB9\u7FAE\u7FB6\u7FB8\u8B71\u7FC5\u7FC6\u7FCA\u7FD5\u7FD4\u7FE1\u7FE6\u7FE9\u7FF3\u7FF9\u98DC\u8006\u8004\u800B\u8012\u8018\u8019\u801C\u8021\u8028\u803F\u803B\u804A\u8046\u8052\u8058\u805A\u805F\u8062\u8068\u8073\u8072\u8070\u8076\u8079\u807D\u807F\u8084\u8086\u8085\u809B\u8093\u809A\u80AD\u5190\u80AC\u80DB\u80E5\u80D9\u80DD\u80C4\u80DA\u80D6\u8109\u80EF\u80F1\u811B\u8129\u8123\u812F\u814B"],
        ["e440", "\u968B\u8146\u813E\u8153\u8151\u80FC\u8171\u816E\u8165\u8166\u8174\u8183\u8188\u818A\u8180\u8182\u81A0\u8195\u81A4\u81A3\u815F\u8193\u81A9\u81B0\u81B5\u81BE\u81B8\u81BD\u81C0\u81C2\u81BA\u81C9\u81CD\u81D1\u81D9\u81D8\u81C8\u81DA\u81DF\u81E0\u81E7\u81FA\u81FB\u81FE\u8201\u8202\u8205\u8207\u820A\u820D\u8210\u8216\u8229\u822B\u8238\u8233\u8240\u8259\u8258\u825D\u825A\u825F\u8264"],
        ["e480", "\u8262\u8268\u826A\u826B\u822E\u8271\u8277\u8278\u827E\u828D\u8292\u82AB\u829F\u82BB\u82AC\u82E1\u82E3\u82DF\u82D2\u82F4\u82F3\u82FA\u8393\u8303\u82FB\u82F9\u82DE\u8306\u82DC\u8309\u82D9\u8335\u8334\u8316\u8332\u8331\u8340\u8339\u8350\u8345\u832F\u832B\u8317\u8318\u8385\u839A\u83AA\u839F\u83A2\u8396\u8323\u838E\u8387\u838A\u837C\u83B5\u8373\u8375\u83A0\u8389\u83A8\u83F4\u8413\u83EB\u83CE\u83FD\u8403\u83D8\u840B\u83C1\u83F7\u8407\u83E0\u83F2\u840D\u8422\u8420\u83BD\u8438\u8506\u83FB\u846D\u842A\u843C\u855A\u8484\u8477\u846B\u84AD\u846E\u8482\u8469\u8446\u842C\u846F\u8479\u8435\u84CA\u8462\u84B9\u84BF\u849F\u84D9\u84CD\u84BB\u84DA\u84D0\u84C1\u84C6\u84D6\u84A1\u8521\u84FF\u84F4\u8517\u8518\u852C\u851F\u8515\u8514\u84FC\u8540\u8563\u8558\u8548"],
        ["e540", "\u8541\u8602\u854B\u8555\u8580\u85A4\u8588\u8591\u858A\u85A8\u856D\u8594\u859B\u85EA\u8587\u859C\u8577\u857E\u8590\u85C9\u85BA\u85CF\u85B9\u85D0\u85D5\u85DD\u85E5\u85DC\u85F9\u860A\u8613\u860B\u85FE\u85FA\u8606\u8622\u861A\u8630\u863F\u864D\u4E55\u8654\u865F\u8667\u8671\u8693\u86A3\u86A9\u86AA\u868B\u868C\u86B6\u86AF\u86C4\u86C6\u86B0\u86C9\u8823\u86AB\u86D4\u86DE\u86E9\u86EC"],
        ["e580", "\u86DF\u86DB\u86EF\u8712\u8706\u8708\u8700\u8703\u86FB\u8711\u8709\u870D\u86F9\u870A\u8734\u873F\u8737\u873B\u8725\u8729\u871A\u8760\u875F\u8778\u874C\u874E\u8774\u8757\u8768\u876E\u8759\u8753\u8763\u876A\u8805\u87A2\u879F\u8782\u87AF\u87CB\u87BD\u87C0\u87D0\u96D6\u87AB\u87C4\u87B3\u87C7\u87C6\u87BB\u87EF\u87F2\u87E0\u880F\u880D\u87FE\u87F6\u87F7\u880E\u87D2\u8811\u8816\u8815\u8822\u8821\u8831\u8836\u8839\u8827\u883B\u8844\u8842\u8852\u8859\u885E\u8862\u886B\u8881\u887E\u889E\u8875\u887D\u88B5\u8872\u8882\u8897\u8892\u88AE\u8899\u88A2\u888D\u88A4\u88B0\u88BF\u88B1\u88C3\u88C4\u88D4\u88D8\u88D9\u88DD\u88F9\u8902\u88FC\u88F4\u88E8\u88F2\u8904\u890C\u890A\u8913\u8943\u891E\u8925\u892A\u892B\u8941\u8944\u893B\u8936\u8938\u894C\u891D\u8960\u895E"],
        ["e640", "\u8966\u8964\u896D\u896A\u896F\u8974\u8977\u897E\u8983\u8988\u898A\u8993\u8998\u89A1\u89A9\u89A6\u89AC\u89AF\u89B2\u89BA\u89BD\u89BF\u89C0\u89DA\u89DC\u89DD\u89E7\u89F4\u89F8\u8A03\u8A16\u8A10\u8A0C\u8A1B\u8A1D\u8A25\u8A36\u8A41\u8A5B\u8A52\u8A46\u8A48\u8A7C\u8A6D\u8A6C\u8A62\u8A85\u8A82\u8A84\u8AA8\u8AA1\u8A91\u8AA5\u8AA6\u8A9A\u8AA3\u8AC4\u8ACD\u8AC2\u8ADA\u8AEB\u8AF3\u8AE7"],
        ["e680", "\u8AE4\u8AF1\u8B14\u8AE0\u8AE2\u8AF7\u8ADE\u8ADB\u8B0C\u8B07\u8B1A\u8AE1\u8B16\u8B10\u8B17\u8B20\u8B33\u97AB\u8B26\u8B2B\u8B3E\u8B28\u8B41\u8B4C\u8B4F\u8B4E\u8B49\u8B56\u8B5B\u8B5A\u8B6B\u8B5F\u8B6C\u8B6F\u8B74\u8B7D\u8B80\u8B8C\u8B8E\u8B92\u8B93\u8B96\u8B99\u8B9A\u8C3A\u8C41\u8C3F\u8C48\u8C4C\u8C4E\u8C50\u8C55\u8C62\u8C6C\u8C78\u8C7A\u8C82\u8C89\u8C85\u8C8A\u8C8D\u8C8E\u8C94\u8C7C\u8C98\u621D\u8CAD\u8CAA\u8CBD\u8CB2\u8CB3\u8CAE\u8CB6\u8CC8\u8CC1\u8CE4\u8CE3\u8CDA\u8CFD\u8CFA\u8CFB\u8D04\u8D05\u8D0A\u8D07\u8D0F\u8D0D\u8D10\u9F4E\u8D13\u8CCD\u8D14\u8D16\u8D67\u8D6D\u8D71\u8D73\u8D81\u8D99\u8DC2\u8DBE\u8DBA\u8DCF\u8DDA\u8DD6\u8DCC\u8DDB\u8DCB\u8DEA\u8DEB\u8DDF\u8DE3\u8DFC\u8E08\u8E09\u8DFF\u8E1D\u8E1E\u8E10\u8E1F\u8E42\u8E35\u8E30\u8E34\u8E4A"],
        ["e740", "\u8E47\u8E49\u8E4C\u8E50\u8E48\u8E59\u8E64\u8E60\u8E2A\u8E63\u8E55\u8E76\u8E72\u8E7C\u8E81\u8E87\u8E85\u8E84\u8E8B\u8E8A\u8E93\u8E91\u8E94\u8E99\u8EAA\u8EA1\u8EAC\u8EB0\u8EC6\u8EB1\u8EBE\u8EC5\u8EC8\u8ECB\u8EDB\u8EE3\u8EFC\u8EFB\u8EEB\u8EFE\u8F0A\u8F05\u8F15\u8F12\u8F19\u8F13\u8F1C\u8F1F\u8F1B\u8F0C\u8F26\u8F33\u8F3B\u8F39\u8F45\u8F42\u8F3E\u8F4C\u8F49\u8F46\u8F4E\u8F57\u8F5C"],
        ["e780", "\u8F62\u8F63\u8F64\u8F9C\u8F9F\u8FA3\u8FAD\u8FAF\u8FB7\u8FDA\u8FE5\u8FE2\u8FEA\u8FEF\u9087\u8FF4\u9005\u8FF9\u8FFA\u9011\u9015\u9021\u900D\u901E\u9016\u900B\u9027\u9036\u9035\u9039\u8FF8\u904F\u9050\u9051\u9052\u900E\u9049\u903E\u9056\u9058\u905E\u9068\u906F\u9076\u96A8\u9072\u9082\u907D\u9081\u9080\u908A\u9089\u908F\u90A8\u90AF\u90B1\u90B5\u90E2\u90E4\u6248\u90DB\u9102\u9112\u9119\u9132\u9130\u914A\u9156\u9158\u9163\u9165\u9169\u9173\u9172\u918B\u9189\u9182\u91A2\u91AB\u91AF\u91AA\u91B5\u91B4\u91BA\u91C0\u91C1\u91C9\u91CB\u91D0\u91D6\u91DF\u91E1\u91DB\u91FC\u91F5\u91F6\u921E\u91FF\u9214\u922C\u9215\u9211\u925E\u9257\u9245\u9249\u9264\u9248\u9295\u923F\u924B\u9250\u929C\u9296\u9293\u929B\u925A\u92CF\u92B9\u92B7\u92E9\u930F\u92FA\u9344\u932E"],
        ["e840", "\u9319\u9322\u931A\u9323\u933A\u9335\u933B\u935C\u9360\u937C\u936E\u9356\u93B0\u93AC\u93AD\u9394\u93B9\u93D6\u93D7\u93E8\u93E5\u93D8\u93C3\u93DD\u93D0\u93C8\u93E4\u941A\u9414\u9413\u9403\u9407\u9410\u9436\u942B\u9435\u9421\u943A\u9441\u9452\u9444\u945B\u9460\u9462\u945E\u946A\u9229\u9470\u9475\u9477\u947D\u945A\u947C\u947E\u9481\u947F\u9582\u9587\u958A\u9594\u9596\u9598\u9599"],
        ["e880", "\u95A0\u95A8\u95A7\u95AD\u95BC\u95BB\u95B9\u95BE\u95CA\u6FF6\u95C3\u95CD\u95CC\u95D5\u95D4\u95D6\u95DC\u95E1\u95E5\u95E2\u9621\u9628\u962E\u962F\u9642\u964C\u964F\u964B\u9677\u965C\u965E\u965D\u965F\u9666\u9672\u966C\u968D\u9698\u9695\u9697\u96AA\u96A7\u96B1\u96B2\u96B0\u96B4\u96B6\u96B8\u96B9\u96CE\u96CB\u96C9\u96CD\u894D\u96DC\u970D\u96D5\u96F9\u9704\u9706\u9708\u9713\u970E\u9711\u970F\u9716\u9719\u9724\u972A\u9730\u9739\u973D\u973E\u9744\u9746\u9748\u9742\u9749\u975C\u9760\u9764\u9766\u9768\u52D2\u976B\u9771\u9779\u9785\u977C\u9781\u977A\u9786\u978B\u978F\u9790\u979C\u97A8\u97A6\u97A3\u97B3\u97B4\u97C3\u97C6\u97C8\u97CB\u97DC\u97ED\u9F4F\u97F2\u7ADF\u97F6\u97F5\u980F\u980C\u9838\u9824\u9821\u9837\u983D\u9846\u984F\u984B\u986B\u986F\u9870"],
        ["e940", "\u9871\u9874\u9873\u98AA\u98AF\u98B1\u98B6\u98C4\u98C3\u98C6\u98E9\u98EB\u9903\u9909\u9912\u9914\u9918\u9921\u991D\u991E\u9924\u9920\u992C\u992E\u993D\u993E\u9942\u9949\u9945\u9950\u994B\u9951\u9952\u994C\u9955\u9997\u9998\u99A5\u99AD\u99AE\u99BC\u99DF\u99DB\u99DD\u99D8\u99D1\u99ED\u99EE\u99F1\u99F2\u99FB\u99F8\u9A01\u9A0F\u9A05\u99E2\u9A19\u9A2B\u9A37\u9A45\u9A42\u9A40\u9A43"],
        ["e980", "\u9A3E\u9A55\u9A4D\u9A5B\u9A57\u9A5F\u9A62\u9A65\u9A64\u9A69\u9A6B\u9A6A\u9AAD\u9AB0\u9ABC\u9AC0\u9ACF\u9AD1\u9AD3\u9AD4\u9ADE\u9ADF\u9AE2\u9AE3\u9AE6\u9AEF\u9AEB\u9AEE\u9AF4\u9AF1\u9AF7\u9AFB\u9B06\u9B18\u9B1A\u9B1F\u9B22\u9B23\u9B25\u9B27\u9B28\u9B29\u9B2A\u9B2E\u9B2F\u9B32\u9B44\u9B43\u9B4F\u9B4D\u9B4E\u9B51\u9B58\u9B74\u9B93\u9B83\u9B91\u9B96\u9B97\u9B9F\u9BA0\u9BA8\u9BB4\u9BC0\u9BCA\u9BB9\u9BC6\u9BCF\u9BD1\u9BD2\u9BE3\u9BE2\u9BE4\u9BD4\u9BE1\u9C3A\u9BF2\u9BF1\u9BF0\u9C15\u9C14\u9C09\u9C13\u9C0C\u9C06\u9C08\u9C12\u9C0A\u9C04\u9C2E\u9C1B\u9C25\u9C24\u9C21\u9C30\u9C47\u9C32\u9C46\u9C3E\u9C5A\u9C60\u9C67\u9C76\u9C78\u9CE7\u9CEC\u9CF0\u9D09\u9D08\u9CEB\u9D03\u9D06\u9D2A\u9D26\u9DAF\u9D23\u9D1F\u9D44\u9D15\u9D12\u9D41\u9D3F\u9D3E\u9D46\u9D48"],
        ["ea40", "\u9D5D\u9D5E\u9D64\u9D51\u9D50\u9D59\u9D72\u9D89\u9D87\u9DAB\u9D6F\u9D7A\u9D9A\u9DA4\u9DA9\u9DB2\u9DC4\u9DC1\u9DBB\u9DB8\u9DBA\u9DC6\u9DCF\u9DC2\u9DD9\u9DD3\u9DF8\u9DE6\u9DED\u9DEF\u9DFD\u9E1A\u9E1B\u9E1E\u9E75\u9E79\u9E7D\u9E81\u9E88\u9E8B\u9E8C\u9E92\u9E95\u9E91\u9E9D\u9EA5\u9EA9\u9EB8\u9EAA\u9EAD\u9761\u9ECC\u9ECE\u9ECF\u9ED0\u9ED4\u9EDC\u9EDE\u9EDD\u9EE0\u9EE5\u9EE8\u9EEF"],
        ["ea80", "\u9EF4\u9EF6\u9EF7\u9EF9\u9EFB\u9EFC\u9EFD\u9F07\u9F08\u76B7\u9F15\u9F21\u9F2C\u9F3E\u9F4A\u9F52\u9F54\u9F63\u9F5F\u9F60\u9F61\u9F66\u9F67\u9F6C\u9F6A\u9F77\u9F72\u9F76\u9F95\u9F9C\u9FA0\u582F\u69C7\u9059\u7464\u51DC\u7199"],
        ["ed40", "\u7E8A\u891C\u9348\u9288\u84DC\u4FC9\u70BB\u6631\u68C8\u92F9\u66FB\u5F45\u4E28\u4EE1\u4EFC\u4F00\u4F03\u4F39\u4F56\u4F92\u4F8A\u4F9A\u4F94\u4FCD\u5040\u5022\u4FFF\u501E\u5046\u5070\u5042\u5094\u50F4\u50D8\u514A\u5164\u519D\u51BE\u51EC\u5215\u529C\u52A6\u52C0\u52DB\u5300\u5307\u5324\u5372\u5393\u53B2\u53DD\uFA0E\u549C\u548A\u54A9\u54FF\u5586\u5759\u5765\u57AC\u57C8\u57C7\uFA0F"],
        ["ed80", "\uFA10\u589E\u58B2\u590B\u5953\u595B\u595D\u5963\u59A4\u59BA\u5B56\u5BC0\u752F\u5BD8\u5BEC\u5C1E\u5CA6\u5CBA\u5CF5\u5D27\u5D53\uFA11\u5D42\u5D6D\u5DB8\u5DB9\u5DD0\u5F21\u5F34\u5F67\u5FB7\u5FDE\u605D\u6085\u608A\u60DE\u60D5\u6120\u60F2\u6111\u6137\u6130\u6198\u6213\u62A6\u63F5\u6460\u649D\u64CE\u654E\u6600\u6615\u663B\u6609\u662E\u661E\u6624\u6665\u6657\u6659\uFA12\u6673\u6699\u66A0\u66B2\u66BF\u66FA\u670E\uF929\u6766\u67BB\u6852\u67C0\u6801\u6844\u68CF\uFA13\u6968\uFA14\u6998\u69E2\u6A30\u6A6B\u6A46\u6A73\u6A7E\u6AE2\u6AE4\u6BD6\u6C3F\u6C5C\u6C86\u6C6F\u6CDA\u6D04\u6D87\u6D6F\u6D96\u6DAC\u6DCF\u6DF8\u6DF2\u6DFC\u6E39\u6E5C\u6E27\u6E3C\u6EBF\u6F88\u6FB5\u6FF5\u7005\u7007\u7028\u7085\u70AB\u710F\u7104\u715C\u7146\u7147\uFA15\u71C1\u71FE\u72B1"],
        ["ee40", "\u72BE\u7324\uFA16\u7377\u73BD\u73C9\u73D6\u73E3\u73D2\u7407\u73F5\u7426\u742A\u7429\u742E\u7462\u7489\u749F\u7501\u756F\u7682\u769C\u769E\u769B\u76A6\uFA17\u7746\u52AF\u7821\u784E\u7864\u787A\u7930\uFA18\uFA19\uFA1A\u7994\uFA1B\u799B\u7AD1\u7AE7\uFA1C\u7AEB\u7B9E\uFA1D\u7D48\u7D5C\u7DB7\u7DA0\u7DD6\u7E52\u7F47\u7FA1\uFA1E\u8301\u8362\u837F\u83C7\u83F6\u8448\u84B4\u8553\u8559"],
        ["ee80", "\u856B\uFA1F\u85B0\uFA20\uFA21\u8807\u88F5\u8A12\u8A37\u8A79\u8AA7\u8ABE\u8ADF\uFA22\u8AF6\u8B53\u8B7F\u8CF0\u8CF4\u8D12\u8D76\uFA23\u8ECF\uFA24\uFA25\u9067\u90DE\uFA26\u9115\u9127\u91DA\u91D7\u91DE\u91ED\u91EE\u91E4\u91E5\u9206\u9210\u920A\u923A\u9240\u923C\u924E\u9259\u9251\u9239\u9267\u92A7\u9277\u9278\u92E7\u92D7\u92D9\u92D0\uFA27\u92D5\u92E0\u92D3\u9325\u9321\u92FB\uFA28\u931E\u92FF\u931D\u9302\u9370\u9357\u93A4\u93C6\u93DE\u93F8\u9431\u9445\u9448\u9592\uF9DC\uFA29\u969D\u96AF\u9733\u973B\u9743\u974D\u974F\u9751\u9755\u9857\u9865\uFA2A\uFA2B\u9927\uFA2C\u999E\u9A4E\u9AD9\u9ADC\u9B75\u9B72\u9B8F\u9BB1\u9BBB\u9C00\u9D70\u9D6B\uFA2D\u9E19\u9ED1"],
        ["eeef", "\u2170", 9, "\uFFE2\uFFE4\uFF07\uFF02"],
        ["f040", "\uE000", 62],
        ["f080", "\uE03F", 124],
        ["f140", "\uE0BC", 62],
        ["f180", "\uE0FB", 124],
        ["f240", "\uE178", 62],
        ["f280", "\uE1B7", 124],
        ["f340", "\uE234", 62],
        ["f380", "\uE273", 124],
        ["f440", "\uE2F0", 62],
        ["f480", "\uE32F", 124],
        ["f540", "\uE3AC", 62],
        ["f580", "\uE3EB", 124],
        ["f640", "\uE468", 62],
        ["f680", "\uE4A7", 124],
        ["f740", "\uE524", 62],
        ["f780", "\uE563", 124],
        ["f840", "\uE5E0", 62],
        ["f880", "\uE61F", 124],
        ["f940", "\uE69C"],
        ["fa40", "\u2170", 9, "\u2160", 9, "\uFFE2\uFFE4\uFF07\uFF02\u3231\u2116\u2121\u2235\u7E8A\u891C\u9348\u9288\u84DC\u4FC9\u70BB\u6631\u68C8\u92F9\u66FB\u5F45\u4E28\u4EE1\u4EFC\u4F00\u4F03\u4F39\u4F56\u4F92\u4F8A\u4F9A\u4F94\u4FCD\u5040\u5022\u4FFF\u501E\u5046\u5070\u5042\u5094\u50F4\u50D8\u514A"],
        ["fa80", "\u5164\u519D\u51BE\u51EC\u5215\u529C\u52A6\u52C0\u52DB\u5300\u5307\u5324\u5372\u5393\u53B2\u53DD\uFA0E\u549C\u548A\u54A9\u54FF\u5586\u5759\u5765\u57AC\u57C8\u57C7\uFA0F\uFA10\u589E\u58B2\u590B\u5953\u595B\u595D\u5963\u59A4\u59BA\u5B56\u5BC0\u752F\u5BD8\u5BEC\u5C1E\u5CA6\u5CBA\u5CF5\u5D27\u5D53\uFA11\u5D42\u5D6D\u5DB8\u5DB9\u5DD0\u5F21\u5F34\u5F67\u5FB7\u5FDE\u605D\u6085\u608A\u60DE\u60D5\u6120\u60F2\u6111\u6137\u6130\u6198\u6213\u62A6\u63F5\u6460\u649D\u64CE\u654E\u6600\u6615\u663B\u6609\u662E\u661E\u6624\u6665\u6657\u6659\uFA12\u6673\u6699\u66A0\u66B2\u66BF\u66FA\u670E\uF929\u6766\u67BB\u6852\u67C0\u6801\u6844\u68CF\uFA13\u6968\uFA14\u6998\u69E2\u6A30\u6A6B\u6A46\u6A73\u6A7E\u6AE2\u6AE4\u6BD6\u6C3F\u6C5C\u6C86\u6C6F\u6CDA\u6D04\u6D87\u6D6F"],
        ["fb40", "\u6D96\u6DAC\u6DCF\u6DF8\u6DF2\u6DFC\u6E39\u6E5C\u6E27\u6E3C\u6EBF\u6F88\u6FB5\u6FF5\u7005\u7007\u7028\u7085\u70AB\u710F\u7104\u715C\u7146\u7147\uFA15\u71C1\u71FE\u72B1\u72BE\u7324\uFA16\u7377\u73BD\u73C9\u73D6\u73E3\u73D2\u7407\u73F5\u7426\u742A\u7429\u742E\u7462\u7489\u749F\u7501\u756F\u7682\u769C\u769E\u769B\u76A6\uFA17\u7746\u52AF\u7821\u784E\u7864\u787A\u7930\uFA18\uFA19"],
        ["fb80", "\uFA1A\u7994\uFA1B\u799B\u7AD1\u7AE7\uFA1C\u7AEB\u7B9E\uFA1D\u7D48\u7D5C\u7DB7\u7DA0\u7DD6\u7E52\u7F47\u7FA1\uFA1E\u8301\u8362\u837F\u83C7\u83F6\u8448\u84B4\u8553\u8559\u856B\uFA1F\u85B0\uFA20\uFA21\u8807\u88F5\u8A12\u8A37\u8A79\u8AA7\u8ABE\u8ADF\uFA22\u8AF6\u8B53\u8B7F\u8CF0\u8CF4\u8D12\u8D76\uFA23\u8ECF\uFA24\uFA25\u9067\u90DE\uFA26\u9115\u9127\u91DA\u91D7\u91DE\u91ED\u91EE\u91E4\u91E5\u9206\u9210\u920A\u923A\u9240\u923C\u924E\u9259\u9251\u9239\u9267\u92A7\u9277\u9278\u92E7\u92D7\u92D9\u92D0\uFA27\u92D5\u92E0\u92D3\u9325\u9321\u92FB\uFA28\u931E\u92FF\u931D\u9302\u9370\u9357\u93A4\u93C6\u93DE\u93F8\u9431\u9445\u9448\u9592\uF9DC\uFA29\u969D\u96AF\u9733\u973B\u9743\u974D\u974F\u9751\u9755\u9857\u9865\uFA2A\uFA2B\u9927\uFA2C\u999E\u9A4E\u9AD9"],
        ["fc40", "\u9ADC\u9B75\u9B72\u9B8F\u9BB1\u9BBB\u9C00\u9D70\u9D6B\uFA2D\u9E19\u9ED1"]
      ];
    }
  });

  // ../modules/cmd/node_modules/iconv-lite/encodings/tables/eucjp.json
  var require_eucjp = __commonJS({
    "../modules/cmd/node_modules/iconv-lite/encodings/tables/eucjp.json"(exports, module) {
      module.exports = [
        ["0", "\0", 127],
        ["8ea1", "\uFF61", 62],
        ["a1a1", "\u3000\u3001\u3002\uFF0C\uFF0E\u30FB\uFF1A\uFF1B\uFF1F\uFF01\u309B\u309C\xB4\uFF40\xA8\uFF3E\uFFE3\uFF3F\u30FD\u30FE\u309D\u309E\u3003\u4EDD\u3005\u3006\u3007\u30FC\u2015\u2010\uFF0F\uFF3C\uFF5E\u2225\uFF5C\u2026\u2025\u2018\u2019\u201C\u201D\uFF08\uFF09\u3014\u3015\uFF3B\uFF3D\uFF5B\uFF5D\u3008", 9, "\uFF0B\uFF0D\xB1\xD7\xF7\uFF1D\u2260\uFF1C\uFF1E\u2266\u2267\u221E\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFFE5\uFF04\uFFE0\uFFE1\uFF05\uFF03\uFF06\uFF0A\uFF20\xA7\u2606\u2605\u25CB\u25CF\u25CE\u25C7"],
        ["a2a1", "\u25C6\u25A1\u25A0\u25B3\u25B2\u25BD\u25BC\u203B\u3012\u2192\u2190\u2191\u2193\u3013"],
        ["a2ba", "\u2208\u220B\u2286\u2287\u2282\u2283\u222A\u2229"],
        ["a2ca", "\u2227\u2228\uFFE2\u21D2\u21D4\u2200\u2203"],
        ["a2dc", "\u2220\u22A5\u2312\u2202\u2207\u2261\u2252\u226A\u226B\u221A\u223D\u221D\u2235\u222B\u222C"],
        ["a2f2", "\u212B\u2030\u266F\u266D\u266A\u2020\u2021\xB6"],
        ["a2fe", "\u25EF"],
        ["a3b0", "\uFF10", 9],
        ["a3c1", "\uFF21", 25],
        ["a3e1", "\uFF41", 25],
        ["a4a1", "\u3041", 82],
        ["a5a1", "\u30A1", 85],
        ["a6a1", "\u0391", 16, "\u03A3", 6],
        ["a6c1", "\u03B1", 16, "\u03C3", 6],
        ["a7a1", "\u0410", 5, "\u0401\u0416", 25],
        ["a7d1", "\u0430", 5, "\u0451\u0436", 25],
        ["a8a1", "\u2500\u2502\u250C\u2510\u2518\u2514\u251C\u252C\u2524\u2534\u253C\u2501\u2503\u250F\u2513\u251B\u2517\u2523\u2533\u252B\u253B\u254B\u2520\u252F\u2528\u2537\u253F\u251D\u2530\u2525\u2538\u2542"],
        ["ada1", "\u2460", 19, "\u2160", 9],
        ["adc0", "\u3349\u3314\u3322\u334D\u3318\u3327\u3303\u3336\u3351\u3357\u330D\u3326\u3323\u332B\u334A\u333B\u339C\u339D\u339E\u338E\u338F\u33C4\u33A1"],
        ["addf", "\u337B\u301D\u301F\u2116\u33CD\u2121\u32A4", 4, "\u3231\u3232\u3239\u337E\u337D\u337C\u2252\u2261\u222B\u222E\u2211\u221A\u22A5\u2220\u221F\u22BF\u2235\u2229\u222A"],
        ["b0a1", "\u4E9C\u5516\u5A03\u963F\u54C0\u611B\u6328\u59F6\u9022\u8475\u831C\u7A50\u60AA\u63E1\u6E25\u65ED\u8466\u82A6\u9BF5\u6893\u5727\u65A1\u6271\u5B9B\u59D0\u867B\u98F4\u7D62\u7DBE\u9B8E\u6216\u7C9F\u88B7\u5B89\u5EB5\u6309\u6697\u6848\u95C7\u978D\u674F\u4EE5\u4F0A\u4F4D\u4F9D\u5049\u56F2\u5937\u59D4\u5A01\u5C09\u60DF\u610F\u6170\u6613\u6905\u70BA\u754F\u7570\u79FB\u7DAD\u7DEF\u80C3\u840E\u8863\u8B02\u9055\u907A\u533B\u4E95\u4EA5\u57DF\u80B2\u90C1\u78EF\u4E00\u58F1\u6EA2\u9038\u7A32\u8328\u828B\u9C2F\u5141\u5370\u54BD\u54E1\u56E0\u59FB\u5F15\u98F2\u6DEB\u80E4\u852D"],
        ["b1a1", "\u9662\u9670\u96A0\u97FB\u540B\u53F3\u5B87\u70CF\u7FBD\u8FC2\u96E8\u536F\u9D5C\u7ABA\u4E11\u7893\u81FC\u6E26\u5618\u5504\u6B1D\u851A\u9C3B\u59E5\u53A9\u6D66\u74DC\u958F\u5642\u4E91\u904B\u96F2\u834F\u990C\u53E1\u55B6\u5B30\u5F71\u6620\u66F3\u6804\u6C38\u6CF3\u6D29\u745B\u76C8\u7A4E\u9834\u82F1\u885B\u8A60\u92ED\u6DB2\u75AB\u76CA\u99C5\u60A6\u8B01\u8D8A\u95B2\u698E\u53AD\u5186\u5712\u5830\u5944\u5BB4\u5EF6\u6028\u63A9\u63F4\u6CBF\u6F14\u708E\u7114\u7159\u71D5\u733F\u7E01\u8276\u82D1\u8597\u9060\u925B\u9D1B\u5869\u65BC\u6C5A\u7525\u51F9\u592E\u5965\u5F80\u5FDC"],
        ["b2a1", "\u62BC\u65FA\u6A2A\u6B27\u6BB4\u738B\u7FC1\u8956\u9D2C\u9D0E\u9EC4\u5CA1\u6C96\u837B\u5104\u5C4B\u61B6\u81C6\u6876\u7261\u4E59\u4FFA\u5378\u6069\u6E29\u7A4F\u97F3\u4E0B\u5316\u4EEE\u4F55\u4F3D\u4FA1\u4F73\u52A0\u53EF\u5609\u590F\u5AC1\u5BB6\u5BE1\u79D1\u6687\u679C\u67B6\u6B4C\u6CB3\u706B\u73C2\u798D\u79BE\u7A3C\u7B87\u82B1\u82DB\u8304\u8377\u83EF\u83D3\u8766\u8AB2\u5629\u8CA8\u8FE6\u904E\u971E\u868A\u4FC4\u5CE8\u6211\u7259\u753B\u81E5\u82BD\u86FE\u8CC0\u96C5\u9913\u99D5\u4ECB\u4F1A\u89E3\u56DE\u584A\u58CA\u5EFB\u5FEB\u602A\u6094\u6062\u61D0\u6212\u62D0\u6539"],
        ["b3a1", "\u9B41\u6666\u68B0\u6D77\u7070\u754C\u7686\u7D75\u82A5\u87F9\u958B\u968E\u8C9D\u51F1\u52BE\u5916\u54B3\u5BB3\u5D16\u6168\u6982\u6DAF\u788D\u84CB\u8857\u8A72\u93A7\u9AB8\u6D6C\u99A8\u86D9\u57A3\u67FF\u86CE\u920E\u5283\u5687\u5404\u5ED3\u62E1\u64B9\u683C\u6838\u6BBB\u7372\u78BA\u7A6B\u899A\u89D2\u8D6B\u8F03\u90ED\u95A3\u9694\u9769\u5B66\u5CB3\u697D\u984D\u984E\u639B\u7B20\u6A2B\u6A7F\u68B6\u9C0D\u6F5F\u5272\u559D\u6070\u62EC\u6D3B\u6E07\u6ED1\u845B\u8910\u8F44\u4E14\u9C39\u53F6\u691B\u6A3A\u9784\u682A\u515C\u7AC3\u84B2\u91DC\u938C\u565B\u9D28\u6822\u8305\u8431"],
        ["b4a1", "\u7CA5\u5208\u82C5\u74E6\u4E7E\u4F83\u51A0\u5BD2\u520A\u52D8\u52E7\u5DFB\u559A\u582A\u59E6\u5B8C\u5B98\u5BDB\u5E72\u5E79\u60A3\u611F\u6163\u61BE\u63DB\u6562\u67D1\u6853\u68FA\u6B3E\u6B53\u6C57\u6F22\u6F97\u6F45\u74B0\u7518\u76E3\u770B\u7AFF\u7BA1\u7C21\u7DE9\u7F36\u7FF0\u809D\u8266\u839E\u89B3\u8ACC\u8CAB\u9084\u9451\u9593\u9591\u95A2\u9665\u97D3\u9928\u8218\u4E38\u542B\u5CB8\u5DCC\u73A9\u764C\u773C\u5CA9\u7FEB\u8D0B\u96C1\u9811\u9854\u9858\u4F01\u4F0E\u5371\u559C\u5668\u57FA\u5947\u5B09\u5BC4\u5C90\u5E0C\u5E7E\u5FCC\u63EE\u673A\u65D7\u65E2\u671F\u68CB\u68C4"],
        ["b5a1", "\u6A5F\u5E30\u6BC5\u6C17\u6C7D\u757F\u7948\u5B63\u7A00\u7D00\u5FBD\u898F\u8A18\u8CB4\u8D77\u8ECC\u8F1D\u98E2\u9A0E\u9B3C\u4E80\u507D\u5100\u5993\u5B9C\u622F\u6280\u64EC\u6B3A\u72A0\u7591\u7947\u7FA9\u87FB\u8ABC\u8B70\u63AC\u83CA\u97A0\u5409\u5403\u55AB\u6854\u6A58\u8A70\u7827\u6775\u9ECD\u5374\u5BA2\u811A\u8650\u9006\u4E18\u4E45\u4EC7\u4F11\u53CA\u5438\u5BAE\u5F13\u6025\u6551\u673D\u6C42\u6C72\u6CE3\u7078\u7403\u7A76\u7AAE\u7B08\u7D1A\u7CFE\u7D66\u65E7\u725B\u53BB\u5C45\u5DE8\u62D2\u62E0\u6319\u6E20\u865A\u8A31\u8DDD\u92F8\u6F01\u79A6\u9B5A\u4EA8\u4EAB\u4EAC"],
        ["b6a1", "\u4F9B\u4FA0\u50D1\u5147\u7AF6\u5171\u51F6\u5354\u5321\u537F\u53EB\u55AC\u5883\u5CE1\u5F37\u5F4A\u602F\u6050\u606D\u631F\u6559\u6A4B\u6CC1\u72C2\u72ED\u77EF\u80F8\u8105\u8208\u854E\u90F7\u93E1\u97FF\u9957\u9A5A\u4EF0\u51DD\u5C2D\u6681\u696D\u5C40\u66F2\u6975\u7389\u6850\u7C81\u50C5\u52E4\u5747\u5DFE\u9326\u65A4\u6B23\u6B3D\u7434\u7981\u79BD\u7B4B\u7DCA\u82B9\u83CC\u887F\u895F\u8B39\u8FD1\u91D1\u541F\u9280\u4E5D\u5036\u53E5\u533A\u72D7\u7396\u77E9\u82E6\u8EAF\u99C6\u99C8\u99D2\u5177\u611A\u865E\u55B0\u7A7A\u5076\u5BD3\u9047\u9685\u4E32\u6ADB\u91E7\u5C51\u5C48"],
        ["b7a1", "\u6398\u7A9F\u6C93\u9774\u8F61\u7AAA\u718A\u9688\u7C82\u6817\u7E70\u6851\u936C\u52F2\u541B\u85AB\u8A13\u7FA4\u8ECD\u90E1\u5366\u8888\u7941\u4FC2\u50BE\u5211\u5144\u5553\u572D\u73EA\u578B\u5951\u5F62\u5F84\u6075\u6176\u6167\u61A9\u63B2\u643A\u656C\u666F\u6842\u6E13\u7566\u7A3D\u7CFB\u7D4C\u7D99\u7E4B\u7F6B\u830E\u834A\u86CD\u8A08\u8A63\u8B66\u8EFD\u981A\u9D8F\u82B8\u8FCE\u9BE8\u5287\u621F\u6483\u6FC0\u9699\u6841\u5091\u6B20\u6C7A\u6F54\u7A74\u7D50\u8840\u8A23\u6708\u4EF6\u5039\u5026\u5065\u517C\u5238\u5263\u55A7\u570F\u5805\u5ACC\u5EFA\u61B2\u61F8\u62F3\u6372"],
        ["b8a1", "\u691C\u6A29\u727D\u72AC\u732E\u7814\u786F\u7D79\u770C\u80A9\u898B\u8B19\u8CE2\u8ED2\u9063\u9375\u967A\u9855\u9A13\u9E78\u5143\u539F\u53B3\u5E7B\u5F26\u6E1B\u6E90\u7384\u73FE\u7D43\u8237\u8A00\u8AFA\u9650\u4E4E\u500B\u53E4\u547C\u56FA\u59D1\u5B64\u5DF1\u5EAB\u5F27\u6238\u6545\u67AF\u6E56\u72D0\u7CCA\u88B4\u80A1\u80E1\u83F0\u864E\u8A87\u8DE8\u9237\u96C7\u9867\u9F13\u4E94\u4E92\u4F0D\u5348\u5449\u543E\u5A2F\u5F8C\u5FA1\u609F\u68A7\u6A8E\u745A\u7881\u8A9E\u8AA4\u8B77\u9190\u4E5E\u9BC9\u4EA4\u4F7C\u4FAF\u5019\u5016\u5149\u516C\u529F\u52B9\u52FE\u539A\u53E3\u5411"],
        ["b9a1", "\u540E\u5589\u5751\u57A2\u597D\u5B54\u5B5D\u5B8F\u5DE5\u5DE7\u5DF7\u5E78\u5E83\u5E9A\u5EB7\u5F18\u6052\u614C\u6297\u62D8\u63A7\u653B\u6602\u6643\u66F4\u676D\u6821\u6897\u69CB\u6C5F\u6D2A\u6D69\u6E2F\u6E9D\u7532\u7687\u786C\u7A3F\u7CE0\u7D05\u7D18\u7D5E\u7DB1\u8015\u8003\u80AF\u80B1\u8154\u818F\u822A\u8352\u884C\u8861\u8B1B\u8CA2\u8CFC\u90CA\u9175\u9271\u783F\u92FC\u95A4\u964D\u9805\u9999\u9AD8\u9D3B\u525B\u52AB\u53F7\u5408\u58D5\u62F7\u6FE0\u8C6A\u8F5F\u9EB9\u514B\u523B\u544A\u56FD\u7A40\u9177\u9D60\u9ED2\u7344\u6F09\u8170\u7511\u5FFD\u60DA\u9AA8\u72DB\u8FBC"],
        ["baa1", "\u6B64\u9803\u4ECA\u56F0\u5764\u58BE\u5A5A\u6068\u61C7\u660F\u6606\u6839\u68B1\u6DF7\u75D5\u7D3A\u826E\u9B42\u4E9B\u4F50\u53C9\u5506\u5D6F\u5DE6\u5DEE\u67FB\u6C99\u7473\u7802\u8A50\u9396\u88DF\u5750\u5EA7\u632B\u50B5\u50AC\u518D\u6700\u54C9\u585E\u59BB\u5BB0\u5F69\u624D\u63A1\u683D\u6B73\u6E08\u707D\u91C7\u7280\u7815\u7826\u796D\u658E\u7D30\u83DC\u88C1\u8F09\u969B\u5264\u5728\u6750\u7F6A\u8CA1\u51B4\u5742\u962A\u583A\u698A\u80B4\u54B2\u5D0E\u57FC\u7895\u9DFA\u4F5C\u524A\u548B\u643E\u6628\u6714\u67F5\u7A84\u7B56\u7D22\u932F\u685C\u9BAD\u7B39\u5319\u518A\u5237"],
        ["bba1", "\u5BDF\u62F6\u64AE\u64E6\u672D\u6BBA\u85A9\u96D1\u7690\u9BD6\u634C\u9306\u9BAB\u76BF\u6652\u4E09\u5098\u53C2\u5C71\u60E8\u6492\u6563\u685F\u71E6\u73CA\u7523\u7B97\u7E82\u8695\u8B83\u8CDB\u9178\u9910\u65AC\u66AB\u6B8B\u4ED5\u4ED4\u4F3A\u4F7F\u523A\u53F8\u53F2\u55E3\u56DB\u58EB\u59CB\u59C9\u59FF\u5B50\u5C4D\u5E02\u5E2B\u5FD7\u601D\u6307\u652F\u5B5C\u65AF\u65BD\u65E8\u679D\u6B62\u6B7B\u6C0F\u7345\u7949\u79C1\u7CF8\u7D19\u7D2B\u80A2\u8102\u81F3\u8996\u8A5E\u8A69\u8A66\u8A8C\u8AEE\u8CC7\u8CDC\u96CC\u98FC\u6B6F\u4E8B\u4F3C\u4F8D\u5150\u5B57\u5BFA\u6148\u6301\u6642"],
        ["bca1", "\u6B21\u6ECB\u6CBB\u723E\u74BD\u75D4\u78C1\u793A\u800C\u8033\u81EA\u8494\u8F9E\u6C50\u9E7F\u5F0F\u8B58\u9D2B\u7AFA\u8EF8\u5B8D\u96EB\u4E03\u53F1\u57F7\u5931\u5AC9\u5BA4\u6089\u6E7F\u6F06\u75BE\u8CEA\u5B9F\u8500\u7BE0\u5072\u67F4\u829D\u5C61\u854A\u7E1E\u820E\u5199\u5C04\u6368\u8D66\u659C\u716E\u793E\u7D17\u8005\u8B1D\u8ECA\u906E\u86C7\u90AA\u501F\u52FA\u5C3A\u6753\u707C\u7235\u914C\u91C8\u932B\u82E5\u5BC2\u5F31\u60F9\u4E3B\u53D6\u5B88\u624B\u6731\u6B8A\u72E9\u73E0\u7A2E\u816B\u8DA3\u9152\u9996\u5112\u53D7\u546A\u5BFF\u6388\u6A39\u7DAC\u9700\u56DA\u53CE\u5468"],
        ["bda1", "\u5B97\u5C31\u5DDE\u4FEE\u6101\u62FE\u6D32\u79C0\u79CB\u7D42\u7E4D\u7FD2\u81ED\u821F\u8490\u8846\u8972\u8B90\u8E74\u8F2F\u9031\u914B\u916C\u96C6\u919C\u4EC0\u4F4F\u5145\u5341\u5F93\u620E\u67D4\u6C41\u6E0B\u7363\u7E26\u91CD\u9283\u53D4\u5919\u5BBF\u6DD1\u795D\u7E2E\u7C9B\u587E\u719F\u51FA\u8853\u8FF0\u4FCA\u5CFB\u6625\u77AC\u7AE3\u821C\u99FF\u51C6\u5FAA\u65EC\u696F\u6B89\u6DF3\u6E96\u6F64\u76FE\u7D14\u5DE1\u9075\u9187\u9806\u51E6\u521D\u6240\u6691\u66D9\u6E1A\u5EB6\u7DD2\u7F72\u66F8\u85AF\u85F7\u8AF8\u52A9\u53D9\u5973\u5E8F\u5F90\u6055\u92E4\u9664\u50B7\u511F"],
        ["bea1", "\u52DD\u5320\u5347\u53EC\u54E8\u5546\u5531\u5617\u5968\u59BE\u5A3C\u5BB5\u5C06\u5C0F\u5C11\u5C1A\u5E84\u5E8A\u5EE0\u5F70\u627F\u6284\u62DB\u638C\u6377\u6607\u660C\u662D\u6676\u677E\u68A2\u6A1F\u6A35\u6CBC\u6D88\u6E09\u6E58\u713C\u7126\u7167\u75C7\u7701\u785D\u7901\u7965\u79F0\u7AE0\u7B11\u7CA7\u7D39\u8096\u83D6\u848B\u8549\u885D\u88F3\u8A1F\u8A3C\u8A54\u8A73\u8C61\u8CDE\u91A4\u9266\u937E\u9418\u969C\u9798\u4E0A\u4E08\u4E1E\u4E57\u5197\u5270\u57CE\u5834\u58CC\u5B22\u5E38\u60C5\u64FE\u6761\u6756\u6D44\u72B6\u7573\u7A63\u84B8\u8B72\u91B8\u9320\u5631\u57F4\u98FE"],
        ["bfa1", "\u62ED\u690D\u6B96\u71ED\u7E54\u8077\u8272\u89E6\u98DF\u8755\u8FB1\u5C3B\u4F38\u4FE1\u4FB5\u5507\u5A20\u5BDD\u5BE9\u5FC3\u614E\u632F\u65B0\u664B\u68EE\u699B\u6D78\u6DF1\u7533\u75B9\u771F\u795E\u79E6\u7D33\u81E3\u82AF\u85AA\u89AA\u8A3A\u8EAB\u8F9B\u9032\u91DD\u9707\u4EBA\u4EC1\u5203\u5875\u58EC\u5C0B\u751A\u5C3D\u814E\u8A0A\u8FC5\u9663\u976D\u7B25\u8ACF\u9808\u9162\u56F3\u53A8\u9017\u5439\u5782\u5E25\u63A8\u6C34\u708A\u7761\u7C8B\u7FE0\u8870\u9042\u9154\u9310\u9318\u968F\u745E\u9AC4\u5D07\u5D69\u6570\u67A2\u8DA8\u96DB\u636E\u6749\u6919\u83C5\u9817\u96C0\u88FE"],
        ["c0a1", "\u6F84\u647A\u5BF8\u4E16\u702C\u755D\u662F\u51C4\u5236\u52E2\u59D3\u5F81\u6027\u6210\u653F\u6574\u661F\u6674\u68F2\u6816\u6B63\u6E05\u7272\u751F\u76DB\u7CBE\u8056\u58F0\u88FD\u897F\u8AA0\u8A93\u8ACB\u901D\u9192\u9752\u9759\u6589\u7A0E\u8106\u96BB\u5E2D\u60DC\u621A\u65A5\u6614\u6790\u77F3\u7A4D\u7C4D\u7E3E\u810A\u8CAC\u8D64\u8DE1\u8E5F\u78A9\u5207\u62D9\u63A5\u6442\u6298\u8A2D\u7A83\u7BC0\u8AAC\u96EA\u7D76\u820C\u8749\u4ED9\u5148\u5343\u5360\u5BA3\u5C02\u5C16\u5DDD\u6226\u6247\u64B0\u6813\u6834\u6CC9\u6D45\u6D17\u67D3\u6F5C\u714E\u717D\u65CB\u7A7F\u7BAD\u7DDA"],
        ["c1a1", "\u7E4A\u7FA8\u817A\u821B\u8239\u85A6\u8A6E\u8CCE\u8DF5\u9078\u9077\u92AD\u9291\u9583\u9BAE\u524D\u5584\u6F38\u7136\u5168\u7985\u7E55\u81B3\u7CCE\u564C\u5851\u5CA8\u63AA\u66FE\u66FD\u695A\u72D9\u758F\u758E\u790E\u7956\u79DF\u7C97\u7D20\u7D44\u8607\u8A34\u963B\u9061\u9F20\u50E7\u5275\u53CC\u53E2\u5009\u55AA\u58EE\u594F\u723D\u5B8B\u5C64\u531D\u60E3\u60F3\u635C\u6383\u633F\u63BB\u64CD\u65E9\u66F9\u5DE3\u69CD\u69FD\u6F15\u71E5\u4E89\u75E9\u76F8\u7A93\u7CDF\u7DCF\u7D9C\u8061\u8349\u8358\u846C\u84BC\u85FB\u88C5\u8D70\u9001\u906D\u9397\u971C\u9A12\u50CF\u5897\u618E"],
        ["c2a1", "\u81D3\u8535\u8D08\u9020\u4FC3\u5074\u5247\u5373\u606F\u6349\u675F\u6E2C\u8DB3\u901F\u4FD7\u5C5E\u8CCA\u65CF\u7D9A\u5352\u8896\u5176\u63C3\u5B58\u5B6B\u5C0A\u640D\u6751\u905C\u4ED6\u591A\u592A\u6C70\u8A51\u553E\u5815\u59A5\u60F0\u6253\u67C1\u8235\u6955\u9640\u99C4\u9A28\u4F53\u5806\u5BFE\u8010\u5CB1\u5E2F\u5F85\u6020\u614B\u6234\u66FF\u6CF0\u6EDE\u80CE\u817F\u82D4\u888B\u8CB8\u9000\u902E\u968A\u9EDB\u9BDB\u4EE3\u53F0\u5927\u7B2C\u918D\u984C\u9DF9\u6EDD\u7027\u5353\u5544\u5B85\u6258\u629E\u62D3\u6CA2\u6FEF\u7422\u8A17\u9438\u6FC1\u8AFE\u8338\u51E7\u86F8\u53EA"],
        ["c3a1", "\u53E9\u4F46\u9054\u8FB0\u596A\u8131\u5DFD\u7AEA\u8FBF\u68DA\u8C37\u72F8\u9C48\u6A3D\u8AB0\u4E39\u5358\u5606\u5766\u62C5\u63A2\u65E6\u6B4E\u6DE1\u6E5B\u70AD\u77ED\u7AEF\u7BAA\u7DBB\u803D\u80C6\u86CB\u8A95\u935B\u56E3\u58C7\u5F3E\u65AD\u6696\u6A80\u6BB5\u7537\u8AC7\u5024\u77E5\u5730\u5F1B\u6065\u667A\u6C60\u75F4\u7A1A\u7F6E\u81F4\u8718\u9045\u99B3\u7BC9\u755C\u7AF9\u7B51\u84C4\u9010\u79E9\u7A92\u8336\u5AE1\u7740\u4E2D\u4EF2\u5B99\u5FE0\u62BD\u663C\u67F1\u6CE8\u866B\u8877\u8A3B\u914E\u92F3\u99D0\u6A17\u7026\u732A\u82E7\u8457\u8CAF\u4E01\u5146\u51CB\u558B\u5BF5"],
        ["c4a1", "\u5E16\u5E33\u5E81\u5F14\u5F35\u5F6B\u5FB4\u61F2\u6311\u66A2\u671D\u6F6E\u7252\u753A\u773A\u8074\u8139\u8178\u8776\u8ABF\u8ADC\u8D85\u8DF3\u929A\u9577\u9802\u9CE5\u52C5\u6357\u76F4\u6715\u6C88\u73CD\u8CC3\u93AE\u9673\u6D25\u589C\u690E\u69CC\u8FFD\u939A\u75DB\u901A\u585A\u6802\u63B4\u69FB\u4F43\u6F2C\u67D8\u8FBB\u8526\u7DB4\u9354\u693F\u6F70\u576A\u58F7\u5B2C\u7D2C\u722A\u540A\u91E3\u9DB4\u4EAD\u4F4E\u505C\u5075\u5243\u8C9E\u5448\u5824\u5B9A\u5E1D\u5E95\u5EAD\u5EF7\u5F1F\u608C\u62B5\u633A\u63D0\u68AF\u6C40\u7887\u798E\u7A0B\u7DE0\u8247\u8A02\u8AE6\u8E44\u9013"],
        ["c5a1", "\u90B8\u912D\u91D8\u9F0E\u6CE5\u6458\u64E2\u6575\u6EF4\u7684\u7B1B\u9069\u93D1\u6EBA\u54F2\u5FB9\u64A4\u8F4D\u8FED\u9244\u5178\u586B\u5929\u5C55\u5E97\u6DFB\u7E8F\u751C\u8CBC\u8EE2\u985B\u70B9\u4F1D\u6BBF\u6FB1\u7530\u96FB\u514E\u5410\u5835\u5857\u59AC\u5C60\u5F92\u6597\u675C\u6E21\u767B\u83DF\u8CED\u9014\u90FD\u934D\u7825\u783A\u52AA\u5EA6\u571F\u5974\u6012\u5012\u515A\u51AC\u51CD\u5200\u5510\u5854\u5858\u5957\u5B95\u5CF6\u5D8B\u60BC\u6295\u642D\u6771\u6843\u68BC\u68DF\u76D7\u6DD8\u6E6F\u6D9B\u706F\u71C8\u5F53\u75D8\u7977\u7B49\u7B54\u7B52\u7CD6\u7D71\u5230"],
        ["c6a1", "\u8463\u8569\u85E4\u8A0E\u8B04\u8C46\u8E0F\u9003\u900F\u9419\u9676\u982D\u9A30\u95D8\u50CD\u52D5\u540C\u5802\u5C0E\u61A7\u649E\u6D1E\u77B3\u7AE5\u80F4\u8404\u9053\u9285\u5CE0\u9D07\u533F\u5F97\u5FB3\u6D9C\u7279\u7763\u79BF\u7BE4\u6BD2\u72EC\u8AAD\u6803\u6A61\u51F8\u7A81\u6934\u5C4A\u9CF6\u82EB\u5BC5\u9149\u701E\u5678\u5C6F\u60C7\u6566\u6C8C\u8C5A\u9041\u9813\u5451\u66C7\u920D\u5948\u90A3\u5185\u4E4D\u51EA\u8599\u8B0E\u7058\u637A\u934B\u6962\u99B4\u7E04\u7577\u5357\u6960\u8EDF\u96E3\u6C5D\u4E8C\u5C3C\u5F10\u8FE9\u5302\u8CD1\u8089\u8679\u5EFF\u65E5\u4E73\u5165"],
        ["c7a1", "\u5982\u5C3F\u97EE\u4EFB\u598A\u5FCD\u8A8D\u6FE1\u79B0\u7962\u5BE7\u8471\u732B\u71B1\u5E74\u5FF5\u637B\u649A\u71C3\u7C98\u4E43\u5EFC\u4E4B\u57DC\u56A2\u60A9\u6FC3\u7D0D\u80FD\u8133\u81BF\u8FB2\u8997\u86A4\u5DF4\u628A\u64AD\u8987\u6777\u6CE2\u6D3E\u7436\u7834\u5A46\u7F75\u82AD\u99AC\u4FF3\u5EC3\u62DD\u6392\u6557\u676F\u76C3\u724C\u80CC\u80BA\u8F29\u914D\u500D\u57F9\u5A92\u6885\u6973\u7164\u72FD\u8CB7\u58F2\u8CE0\u966A\u9019\u877F\u79E4\u77E7\u8429\u4F2F\u5265\u535A\u62CD\u67CF\u6CCA\u767D\u7B94\u7C95\u8236\u8584\u8FEB\u66DD\u6F20\u7206\u7E1B\u83AB\u99C1\u9EA6"],
        ["c8a1", "\u51FD\u7BB1\u7872\u7BB8\u8087\u7B48\u6AE8\u5E61\u808C\u7551\u7560\u516B\u9262\u6E8C\u767A\u9197\u9AEA\u4F10\u7F70\u629C\u7B4F\u95A5\u9CE9\u567A\u5859\u86E4\u96BC\u4F34\u5224\u534A\u53CD\u53DB\u5E06\u642C\u6591\u677F\u6C3E\u6C4E\u7248\u72AF\u73ED\u7554\u7E41\u822C\u85E9\u8CA9\u7BC4\u91C6\u7169\u9812\u98EF\u633D\u6669\u756A\u76E4\u78D0\u8543\u86EE\u532A\u5351\u5426\u5983\u5E87\u5F7C\u60B2\u6249\u6279\u62AB\u6590\u6BD4\u6CCC\u75B2\u76AE\u7891\u79D8\u7DCB\u7F77\u80A5\u88AB\u8AB9\u8CBB\u907F\u975E\u98DB\u6A0B\u7C38\u5099\u5C3E\u5FAE\u6787\u6BD8\u7435\u7709\u7F8E"],
        ["c9a1", "\u9F3B\u67CA\u7A17\u5339\u758B\u9AED\u5F66\u819D\u83F1\u8098\u5F3C\u5FC5\u7562\u7B46\u903C\u6867\u59EB\u5A9B\u7D10\u767E\u8B2C\u4FF5\u5F6A\u6A19\u6C37\u6F02\u74E2\u7968\u8868\u8A55\u8C79\u5EDF\u63CF\u75C5\u79D2\u82D7\u9328\u92F2\u849C\u86ED\u9C2D\u54C1\u5F6C\u658C\u6D5C\u7015\u8CA7\u8CD3\u983B\u654F\u74F6\u4E0D\u4ED8\u57E0\u592B\u5A66\u5BCC\u51A8\u5E03\u5E9C\u6016\u6276\u6577\u65A7\u666E\u6D6E\u7236\u7B26\u8150\u819A\u8299\u8B5C\u8CA0\u8CE6\u8D74\u961C\u9644\u4FAE\u64AB\u6B66\u821E\u8461\u856A\u90E8\u5C01\u6953\u98A8\u847A\u8557\u4F0F\u526F\u5FA9\u5E45\u670D"],
        ["caa1", "\u798F\u8179\u8907\u8986\u6DF5\u5F17\u6255\u6CB8\u4ECF\u7269\u9B92\u5206\u543B\u5674\u58B3\u61A4\u626E\u711A\u596E\u7C89\u7CDE\u7D1B\u96F0\u6587\u805E\u4E19\u4F75\u5175\u5840\u5E63\u5E73\u5F0A\u67C4\u4E26\u853D\u9589\u965B\u7C73\u9801\u50FB\u58C1\u7656\u78A7\u5225\u77A5\u8511\u7B86\u504F\u5909\u7247\u7BC7\u7DE8\u8FBA\u8FD4\u904D\u4FBF\u52C9\u5A29\u5F01\u97AD\u4FDD\u8217\u92EA\u5703\u6355\u6B69\u752B\u88DC\u8F14\u7A42\u52DF\u5893\u6155\u620A\u66AE\u6BCD\u7C3F\u83E9\u5023\u4FF8\u5305\u5446\u5831\u5949\u5B9D\u5CF0\u5CEF\u5D29\u5E96\u62B1\u6367\u653E\u65B9\u670B"],
        ["cba1", "\u6CD5\u6CE1\u70F9\u7832\u7E2B\u80DE\u82B3\u840C\u84EC\u8702\u8912\u8A2A\u8C4A\u90A6\u92D2\u98FD\u9CF3\u9D6C\u4E4F\u4EA1\u508D\u5256\u574A\u59A8\u5E3D\u5FD8\u5FD9\u623F\u66B4\u671B\u67D0\u68D2\u5192\u7D21\u80AA\u81A8\u8B00\u8C8C\u8CBF\u927E\u9632\u5420\u982C\u5317\u50D5\u535C\u58A8\u64B2\u6734\u7267\u7766\u7A46\u91E6\u52C3\u6CA1\u6B86\u5800\u5E4C\u5954\u672C\u7FFB\u51E1\u76C6\u6469\u78E8\u9B54\u9EBB\u57CB\u59B9\u6627\u679A\u6BCE\u54E9\u69D9\u5E55\u819C\u6795\u9BAA\u67FE\u9C52\u685D\u4EA6\u4FE3\u53C8\u62B9\u672B\u6CAB\u8FC4\u4FAD\u7E6D\u9EBF\u4E07\u6162\u6E80"],
        ["cca1", "\u6F2B\u8513\u5473\u672A\u9B45\u5DF3\u7B95\u5CAC\u5BC6\u871C\u6E4A\u84D1\u7A14\u8108\u5999\u7C8D\u6C11\u7720\u52D9\u5922\u7121\u725F\u77DB\u9727\u9D61\u690B\u5A7F\u5A18\u51A5\u540D\u547D\u660E\u76DF\u8FF7\u9298\u9CF4\u59EA\u725D\u6EC5\u514D\u68C9\u7DBF\u7DEC\u9762\u9EBA\u6478\u6A21\u8302\u5984\u5B5F\u6BDB\u731B\u76F2\u7DB2\u8017\u8499\u5132\u6728\u9ED9\u76EE\u6762\u52FF\u9905\u5C24\u623B\u7C7E\u8CB0\u554F\u60B6\u7D0B\u9580\u5301\u4E5F\u51B6\u591C\u723A\u8036\u91CE\u5F25\u77E2\u5384\u5F79\u7D04\u85AC\u8A33\u8E8D\u9756\u67F3\u85AE\u9453\u6109\u6108\u6CB9\u7652"],
        ["cda1", "\u8AED\u8F38\u552F\u4F51\u512A\u52C7\u53CB\u5BA5\u5E7D\u60A0\u6182\u63D6\u6709\u67DA\u6E67\u6D8C\u7336\u7337\u7531\u7950\u88D5\u8A98\u904A\u9091\u90F5\u96C4\u878D\u5915\u4E88\u4F59\u4E0E\u8A89\u8F3F\u9810\u50AD\u5E7C\u5996\u5BB9\u5EB8\u63DA\u63FA\u64C1\u66DC\u694A\u69D8\u6D0B\u6EB6\u7194\u7528\u7AAF\u7F8A\u8000\u8449\u84C9\u8981\u8B21\u8E0A\u9065\u967D\u990A\u617E\u6291\u6B32\u6C83\u6D74\u7FCC\u7FFC\u6DC0\u7F85\u87BA\u88F8\u6765\u83B1\u983C\u96F7\u6D1B\u7D61\u843D\u916A\u4E71\u5375\u5D50\u6B04\u6FEB\u85CD\u862D\u89A7\u5229\u540F\u5C65\u674E\u68A8\u7406\u7483"],
        ["cea1", "\u75E2\u88CF\u88E1\u91CC\u96E2\u9678\u5F8B\u7387\u7ACB\u844E\u63A0\u7565\u5289\u6D41\u6E9C\u7409\u7559\u786B\u7C92\u9686\u7ADC\u9F8D\u4FB6\u616E\u65C5\u865C\u4E86\u4EAE\u50DA\u4E21\u51CC\u5BEE\u6599\u6881\u6DBC\u731F\u7642\u77AD\u7A1C\u7CE7\u826F\u8AD2\u907C\u91CF\u9675\u9818\u529B\u7DD1\u502B\u5398\u6797\u6DCB\u71D0\u7433\u81E8\u8F2A\u96A3\u9C57\u9E9F\u7460\u5841\u6D99\u7D2F\u985E\u4EE4\u4F36\u4F8B\u51B7\u52B1\u5DBA\u601C\u73B2\u793C\u82D3\u9234\u96B7\u96F6\u970A\u9E97\u9F62\u66A6\u6B74\u5217\u52A3\u70C8\u88C2\u5EC9\u604B\u6190\u6F23\u7149\u7C3E\u7DF4\u806F"],
        ["cfa1", "\u84EE\u9023\u932C\u5442\u9B6F\u6AD3\u7089\u8CC2\u8DEF\u9732\u52B4\u5A41\u5ECA\u5F04\u6717\u697C\u6994\u6D6A\u6F0F\u7262\u72FC\u7BED\u8001\u807E\u874B\u90CE\u516D\u9E93\u7984\u808B\u9332\u8AD6\u502D\u548C\u8A71\u6B6A\u8CC4\u8107\u60D1\u67A0\u9DF2\u4E99\u4E98\u9C10\u8A6B\u85C1\u8568\u6900\u6E7E\u7897\u8155"],
        ["d0a1", "\u5F0C\u4E10\u4E15\u4E2A\u4E31\u4E36\u4E3C\u4E3F\u4E42\u4E56\u4E58\u4E82\u4E85\u8C6B\u4E8A\u8212\u5F0D\u4E8E\u4E9E\u4E9F\u4EA0\u4EA2\u4EB0\u4EB3\u4EB6\u4ECE\u4ECD\u4EC4\u4EC6\u4EC2\u4ED7\u4EDE\u4EED\u4EDF\u4EF7\u4F09\u4F5A\u4F30\u4F5B\u4F5D\u4F57\u4F47\u4F76\u4F88\u4F8F\u4F98\u4F7B\u4F69\u4F70\u4F91\u4F6F\u4F86\u4F96\u5118\u4FD4\u4FDF\u4FCE\u4FD8\u4FDB\u4FD1\u4FDA\u4FD0\u4FE4\u4FE5\u501A\u5028\u5014\u502A\u5025\u5005\u4F1C\u4FF6\u5021\u5029\u502C\u4FFE\u4FEF\u5011\u5006\u5043\u5047\u6703\u5055\u5050\u5048\u505A\u5056\u506C\u5078\u5080\u509A\u5085\u50B4\u50B2"],
        ["d1a1", "\u50C9\u50CA\u50B3\u50C2\u50D6\u50DE\u50E5\u50ED\u50E3\u50EE\u50F9\u50F5\u5109\u5101\u5102\u5116\u5115\u5114\u511A\u5121\u513A\u5137\u513C\u513B\u513F\u5140\u5152\u514C\u5154\u5162\u7AF8\u5169\u516A\u516E\u5180\u5182\u56D8\u518C\u5189\u518F\u5191\u5193\u5195\u5196\u51A4\u51A6\u51A2\u51A9\u51AA\u51AB\u51B3\u51B1\u51B2\u51B0\u51B5\u51BD\u51C5\u51C9\u51DB\u51E0\u8655\u51E9\u51ED\u51F0\u51F5\u51FE\u5204\u520B\u5214\u520E\u5227\u522A\u522E\u5233\u5239\u524F\u5244\u524B\u524C\u525E\u5254\u526A\u5274\u5269\u5273\u527F\u527D\u528D\u5294\u5292\u5271\u5288\u5291\u8FA8"],
        ["d2a1", "\u8FA7\u52AC\u52AD\u52BC\u52B5\u52C1\u52CD\u52D7\u52DE\u52E3\u52E6\u98ED\u52E0\u52F3\u52F5\u52F8\u52F9\u5306\u5308\u7538\u530D\u5310\u530F\u5315\u531A\u5323\u532F\u5331\u5333\u5338\u5340\u5346\u5345\u4E17\u5349\u534D\u51D6\u535E\u5369\u536E\u5918\u537B\u5377\u5382\u5396\u53A0\u53A6\u53A5\u53AE\u53B0\u53B6\u53C3\u7C12\u96D9\u53DF\u66FC\u71EE\u53EE\u53E8\u53ED\u53FA\u5401\u543D\u5440\u542C\u542D\u543C\u542E\u5436\u5429\u541D\u544E\u548F\u5475\u548E\u545F\u5471\u5477\u5470\u5492\u547B\u5480\u5476\u5484\u5490\u5486\u54C7\u54A2\u54B8\u54A5\u54AC\u54C4\u54C8\u54A8"],
        ["d3a1", "\u54AB\u54C2\u54A4\u54BE\u54BC\u54D8\u54E5\u54E6\u550F\u5514\u54FD\u54EE\u54ED\u54FA\u54E2\u5539\u5540\u5563\u554C\u552E\u555C\u5545\u5556\u5557\u5538\u5533\u555D\u5599\u5580\u54AF\u558A\u559F\u557B\u557E\u5598\u559E\u55AE\u557C\u5583\u55A9\u5587\u55A8\u55DA\u55C5\u55DF\u55C4\u55DC\u55E4\u55D4\u5614\u55F7\u5616\u55FE\u55FD\u561B\u55F9\u564E\u5650\u71DF\u5634\u5636\u5632\u5638\u566B\u5664\u562F\u566C\u566A\u5686\u5680\u568A\u56A0\u5694\u568F\u56A5\u56AE\u56B6\u56B4\u56C2\u56BC\u56C1\u56C3\u56C0\u56C8\u56CE\u56D1\u56D3\u56D7\u56EE\u56F9\u5700\u56FF\u5704\u5709"],
        ["d4a1", "\u5708\u570B\u570D\u5713\u5718\u5716\u55C7\u571C\u5726\u5737\u5738\u574E\u573B\u5740\u574F\u5769\u57C0\u5788\u5761\u577F\u5789\u5793\u57A0\u57B3\u57A4\u57AA\u57B0\u57C3\u57C6\u57D4\u57D2\u57D3\u580A\u57D6\u57E3\u580B\u5819\u581D\u5872\u5821\u5862\u584B\u5870\u6BC0\u5852\u583D\u5879\u5885\u58B9\u589F\u58AB\u58BA\u58DE\u58BB\u58B8\u58AE\u58C5\u58D3\u58D1\u58D7\u58D9\u58D8\u58E5\u58DC\u58E4\u58DF\u58EF\u58FA\u58F9\u58FB\u58FC\u58FD\u5902\u590A\u5910\u591B\u68A6\u5925\u592C\u592D\u5932\u5938\u593E\u7AD2\u5955\u5950\u594E\u595A\u5958\u5962\u5960\u5967\u596C\u5969"],
        ["d5a1", "\u5978\u5981\u599D\u4F5E\u4FAB\u59A3\u59B2\u59C6\u59E8\u59DC\u598D\u59D9\u59DA\u5A25\u5A1F\u5A11\u5A1C\u5A09\u5A1A\u5A40\u5A6C\u5A49\u5A35\u5A36\u5A62\u5A6A\u5A9A\u5ABC\u5ABE\u5ACB\u5AC2\u5ABD\u5AE3\u5AD7\u5AE6\u5AE9\u5AD6\u5AFA\u5AFB\u5B0C\u5B0B\u5B16\u5B32\u5AD0\u5B2A\u5B36\u5B3E\u5B43\u5B45\u5B40\u5B51\u5B55\u5B5A\u5B5B\u5B65\u5B69\u5B70\u5B73\u5B75\u5B78\u6588\u5B7A\u5B80\u5B83\u5BA6\u5BB8\u5BC3\u5BC7\u5BC9\u5BD4\u5BD0\u5BE4\u5BE6\u5BE2\u5BDE\u5BE5\u5BEB\u5BF0\u5BF6\u5BF3\u5C05\u5C07\u5C08\u5C0D\u5C13\u5C20\u5C22\u5C28\u5C38\u5C39\u5C41\u5C46\u5C4E\u5C53"],
        ["d6a1", "\u5C50\u5C4F\u5B71\u5C6C\u5C6E\u4E62\u5C76\u5C79\u5C8C\u5C91\u5C94\u599B\u5CAB\u5CBB\u5CB6\u5CBC\u5CB7\u5CC5\u5CBE\u5CC7\u5CD9\u5CE9\u5CFD\u5CFA\u5CED\u5D8C\u5CEA\u5D0B\u5D15\u5D17\u5D5C\u5D1F\u5D1B\u5D11\u5D14\u5D22\u5D1A\u5D19\u5D18\u5D4C\u5D52\u5D4E\u5D4B\u5D6C\u5D73\u5D76\u5D87\u5D84\u5D82\u5DA2\u5D9D\u5DAC\u5DAE\u5DBD\u5D90\u5DB7\u5DBC\u5DC9\u5DCD\u5DD3\u5DD2\u5DD6\u5DDB\u5DEB\u5DF2\u5DF5\u5E0B\u5E1A\u5E19\u5E11\u5E1B\u5E36\u5E37\u5E44\u5E43\u5E40\u5E4E\u5E57\u5E54\u5E5F\u5E62\u5E64\u5E47\u5E75\u5E76\u5E7A\u9EBC\u5E7F\u5EA0\u5EC1\u5EC2\u5EC8\u5ED0\u5ECF"],
        ["d7a1", "\u5ED6\u5EE3\u5EDD\u5EDA\u5EDB\u5EE2\u5EE1\u5EE8\u5EE9\u5EEC\u5EF1\u5EF3\u5EF0\u5EF4\u5EF8\u5EFE\u5F03\u5F09\u5F5D\u5F5C\u5F0B\u5F11\u5F16\u5F29\u5F2D\u5F38\u5F41\u5F48\u5F4C\u5F4E\u5F2F\u5F51\u5F56\u5F57\u5F59\u5F61\u5F6D\u5F73\u5F77\u5F83\u5F82\u5F7F\u5F8A\u5F88\u5F91\u5F87\u5F9E\u5F99\u5F98\u5FA0\u5FA8\u5FAD\u5FBC\u5FD6\u5FFB\u5FE4\u5FF8\u5FF1\u5FDD\u60B3\u5FFF\u6021\u6060\u6019\u6010\u6029\u600E\u6031\u601B\u6015\u602B\u6026\u600F\u603A\u605A\u6041\u606A\u6077\u605F\u604A\u6046\u604D\u6063\u6043\u6064\u6042\u606C\u606B\u6059\u6081\u608D\u60E7\u6083\u609A"],
        ["d8a1", "\u6084\u609B\u6096\u6097\u6092\u60A7\u608B\u60E1\u60B8\u60E0\u60D3\u60B4\u5FF0\u60BD\u60C6\u60B5\u60D8\u614D\u6115\u6106\u60F6\u60F7\u6100\u60F4\u60FA\u6103\u6121\u60FB\u60F1\u610D\u610E\u6147\u613E\u6128\u6127\u614A\u613F\u613C\u612C\u6134\u613D\u6142\u6144\u6173\u6177\u6158\u6159\u615A\u616B\u6174\u616F\u6165\u6171\u615F\u615D\u6153\u6175\u6199\u6196\u6187\u61AC\u6194\u619A\u618A\u6191\u61AB\u61AE\u61CC\u61CA\u61C9\u61F7\u61C8\u61C3\u61C6\u61BA\u61CB\u7F79\u61CD\u61E6\u61E3\u61F6\u61FA\u61F4\u61FF\u61FD\u61FC\u61FE\u6200\u6208\u6209\u620D\u620C\u6214\u621B"],
        ["d9a1", "\u621E\u6221\u622A\u622E\u6230\u6232\u6233\u6241\u624E\u625E\u6263\u625B\u6260\u6268\u627C\u6282\u6289\u627E\u6292\u6293\u6296\u62D4\u6283\u6294\u62D7\u62D1\u62BB\u62CF\u62FF\u62C6\u64D4\u62C8\u62DC\u62CC\u62CA\u62C2\u62C7\u629B\u62C9\u630C\u62EE\u62F1\u6327\u6302\u6308\u62EF\u62F5\u6350\u633E\u634D\u641C\u634F\u6396\u638E\u6380\u63AB\u6376\u63A3\u638F\u6389\u639F\u63B5\u636B\u6369\u63BE\u63E9\u63C0\u63C6\u63E3\u63C9\u63D2\u63F6\u63C4\u6416\u6434\u6406\u6413\u6426\u6436\u651D\u6417\u6428\u640F\u6467\u646F\u6476\u644E\u652A\u6495\u6493\u64A5\u64A9\u6488\u64BC"],
        ["daa1", "\u64DA\u64D2\u64C5\u64C7\u64BB\u64D8\u64C2\u64F1\u64E7\u8209\u64E0\u64E1\u62AC\u64E3\u64EF\u652C\u64F6\u64F4\u64F2\u64FA\u6500\u64FD\u6518\u651C\u6505\u6524\u6523\u652B\u6534\u6535\u6537\u6536\u6538\u754B\u6548\u6556\u6555\u654D\u6558\u655E\u655D\u6572\u6578\u6582\u6583\u8B8A\u659B\u659F\u65AB\u65B7\u65C3\u65C6\u65C1\u65C4\u65CC\u65D2\u65DB\u65D9\u65E0\u65E1\u65F1\u6772\u660A\u6603\u65FB\u6773\u6635\u6636\u6634\u661C\u664F\u6644\u6649\u6641\u665E\u665D\u6664\u6667\u6668\u665F\u6662\u6670\u6683\u6688\u668E\u6689\u6684\u6698\u669D\u66C1\u66B9\u66C9\u66BE\u66BC"],
        ["dba1", "\u66C4\u66B8\u66D6\u66DA\u66E0\u663F\u66E6\u66E9\u66F0\u66F5\u66F7\u670F\u6716\u671E\u6726\u6727\u9738\u672E\u673F\u6736\u6741\u6738\u6737\u6746\u675E\u6760\u6759\u6763\u6764\u6789\u6770\u67A9\u677C\u676A\u678C\u678B\u67A6\u67A1\u6785\u67B7\u67EF\u67B4\u67EC\u67B3\u67E9\u67B8\u67E4\u67DE\u67DD\u67E2\u67EE\u67B9\u67CE\u67C6\u67E7\u6A9C\u681E\u6846\u6829\u6840\u684D\u6832\u684E\u68B3\u682B\u6859\u6863\u6877\u687F\u689F\u688F\u68AD\u6894\u689D\u689B\u6883\u6AAE\u68B9\u6874\u68B5\u68A0\u68BA\u690F\u688D\u687E\u6901\u68CA\u6908\u68D8\u6922\u6926\u68E1\u690C\u68CD"],
        ["dca1", "\u68D4\u68E7\u68D5\u6936\u6912\u6904\u68D7\u68E3\u6925\u68F9\u68E0\u68EF\u6928\u692A\u691A\u6923\u6921\u68C6\u6979\u6977\u695C\u6978\u696B\u6954\u697E\u696E\u6939\u6974\u693D\u6959\u6930\u6961\u695E\u695D\u6981\u696A\u69B2\u69AE\u69D0\u69BF\u69C1\u69D3\u69BE\u69CE\u5BE8\u69CA\u69DD\u69BB\u69C3\u69A7\u6A2E\u6991\u69A0\u699C\u6995\u69B4\u69DE\u69E8\u6A02\u6A1B\u69FF\u6B0A\u69F9\u69F2\u69E7\u6A05\u69B1\u6A1E\u69ED\u6A14\u69EB\u6A0A\u6A12\u6AC1\u6A23\u6A13\u6A44\u6A0C\u6A72\u6A36\u6A78\u6A47\u6A62\u6A59\u6A66\u6A48\u6A38\u6A22\u6A90\u6A8D\u6AA0\u6A84\u6AA2\u6AA3"],
        ["dda1", "\u6A97\u8617\u6ABB\u6AC3\u6AC2\u6AB8\u6AB3\u6AAC\u6ADE\u6AD1\u6ADF\u6AAA\u6ADA\u6AEA\u6AFB\u6B05\u8616\u6AFA\u6B12\u6B16\u9B31\u6B1F\u6B38\u6B37\u76DC\u6B39\u98EE\u6B47\u6B43\u6B49\u6B50\u6B59\u6B54\u6B5B\u6B5F\u6B61\u6B78\u6B79\u6B7F\u6B80\u6B84\u6B83\u6B8D\u6B98\u6B95\u6B9E\u6BA4\u6BAA\u6BAB\u6BAF\u6BB2\u6BB1\u6BB3\u6BB7\u6BBC\u6BC6\u6BCB\u6BD3\u6BDF\u6BEC\u6BEB\u6BF3\u6BEF\u9EBE\u6C08\u6C13\u6C14\u6C1B\u6C24\u6C23\u6C5E\u6C55\u6C62\u6C6A\u6C82\u6C8D\u6C9A\u6C81\u6C9B\u6C7E\u6C68\u6C73\u6C92\u6C90\u6CC4\u6CF1\u6CD3\u6CBD\u6CD7\u6CC5\u6CDD\u6CAE\u6CB1\u6CBE"],
        ["dea1", "\u6CBA\u6CDB\u6CEF\u6CD9\u6CEA\u6D1F\u884D\u6D36\u6D2B\u6D3D\u6D38\u6D19\u6D35\u6D33\u6D12\u6D0C\u6D63\u6D93\u6D64\u6D5A\u6D79\u6D59\u6D8E\u6D95\u6FE4\u6D85\u6DF9\u6E15\u6E0A\u6DB5\u6DC7\u6DE6\u6DB8\u6DC6\u6DEC\u6DDE\u6DCC\u6DE8\u6DD2\u6DC5\u6DFA\u6DD9\u6DE4\u6DD5\u6DEA\u6DEE\u6E2D\u6E6E\u6E2E\u6E19\u6E72\u6E5F\u6E3E\u6E23\u6E6B\u6E2B\u6E76\u6E4D\u6E1F\u6E43\u6E3A\u6E4E\u6E24\u6EFF\u6E1D\u6E38\u6E82\u6EAA\u6E98\u6EC9\u6EB7\u6ED3\u6EBD\u6EAF\u6EC4\u6EB2\u6ED4\u6ED5\u6E8F\u6EA5\u6EC2\u6E9F\u6F41\u6F11\u704C\u6EEC\u6EF8\u6EFE\u6F3F\u6EF2\u6F31\u6EEF\u6F32\u6ECC"],
        ["dfa1", "\u6F3E\u6F13\u6EF7\u6F86\u6F7A\u6F78\u6F81\u6F80\u6F6F\u6F5B\u6FF3\u6F6D\u6F82\u6F7C\u6F58\u6F8E\u6F91\u6FC2\u6F66\u6FB3\u6FA3\u6FA1\u6FA4\u6FB9\u6FC6\u6FAA\u6FDF\u6FD5\u6FEC\u6FD4\u6FD8\u6FF1\u6FEE\u6FDB\u7009\u700B\u6FFA\u7011\u7001\u700F\u6FFE\u701B\u701A\u6F74\u701D\u7018\u701F\u7030\u703E\u7032\u7051\u7063\u7099\u7092\u70AF\u70F1\u70AC\u70B8\u70B3\u70AE\u70DF\u70CB\u70DD\u70D9\u7109\u70FD\u711C\u7119\u7165\u7155\u7188\u7166\u7162\u714C\u7156\u716C\u718F\u71FB\u7184\u7195\u71A8\u71AC\u71D7\u71B9\u71BE\u71D2\u71C9\u71D4\u71CE\u71E0\u71EC\u71E7\u71F5\u71FC"],
        ["e0a1", "\u71F9\u71FF\u720D\u7210\u721B\u7228\u722D\u722C\u7230\u7232\u723B\u723C\u723F\u7240\u7246\u724B\u7258\u7274\u727E\u7282\u7281\u7287\u7292\u7296\u72A2\u72A7\u72B9\u72B2\u72C3\u72C6\u72C4\u72CE\u72D2\u72E2\u72E0\u72E1\u72F9\u72F7\u500F\u7317\u730A\u731C\u7316\u731D\u7334\u732F\u7329\u7325\u733E\u734E\u734F\u9ED8\u7357\u736A\u7368\u7370\u7378\u7375\u737B\u737A\u73C8\u73B3\u73CE\u73BB\u73C0\u73E5\u73EE\u73DE\u74A2\u7405\u746F\u7425\u73F8\u7432\u743A\u7455\u743F\u745F\u7459\u7441\u745C\u7469\u7470\u7463\u746A\u7476\u747E\u748B\u749E\u74A7\u74CA\u74CF\u74D4\u73F1"],
        ["e1a1", "\u74E0\u74E3\u74E7\u74E9\u74EE\u74F2\u74F0\u74F1\u74F8\u74F7\u7504\u7503\u7505\u750C\u750E\u750D\u7515\u7513\u751E\u7526\u752C\u753C\u7544\u754D\u754A\u7549\u755B\u7546\u755A\u7569\u7564\u7567\u756B\u756D\u7578\u7576\u7586\u7587\u7574\u758A\u7589\u7582\u7594\u759A\u759D\u75A5\u75A3\u75C2\u75B3\u75C3\u75B5\u75BD\u75B8\u75BC\u75B1\u75CD\u75CA\u75D2\u75D9\u75E3\u75DE\u75FE\u75FF\u75FC\u7601\u75F0\u75FA\u75F2\u75F3\u760B\u760D\u7609\u761F\u7627\u7620\u7621\u7622\u7624\u7634\u7630\u763B\u7647\u7648\u7646\u765C\u7658\u7661\u7662\u7668\u7669\u766A\u7667\u766C\u7670"],
        ["e2a1", "\u7672\u7676\u7678\u767C\u7680\u7683\u7688\u768B\u768E\u7696\u7693\u7699\u769A\u76B0\u76B4\u76B8\u76B9\u76BA\u76C2\u76CD\u76D6\u76D2\u76DE\u76E1\u76E5\u76E7\u76EA\u862F\u76FB\u7708\u7707\u7704\u7729\u7724\u771E\u7725\u7726\u771B\u7737\u7738\u7747\u775A\u7768\u776B\u775B\u7765\u777F\u777E\u7779\u778E\u778B\u7791\u77A0\u779E\u77B0\u77B6\u77B9\u77BF\u77BC\u77BD\u77BB\u77C7\u77CD\u77D7\u77DA\u77DC\u77E3\u77EE\u77FC\u780C\u7812\u7926\u7820\u792A\u7845\u788E\u7874\u7886\u787C\u789A\u788C\u78A3\u78B5\u78AA\u78AF\u78D1\u78C6\u78CB\u78D4\u78BE\u78BC\u78C5\u78CA\u78EC"],
        ["e3a1", "\u78E7\u78DA\u78FD\u78F4\u7907\u7912\u7911\u7919\u792C\u792B\u7940\u7960\u7957\u795F\u795A\u7955\u7953\u797A\u797F\u798A\u799D\u79A7\u9F4B\u79AA\u79AE\u79B3\u79B9\u79BA\u79C9\u79D5\u79E7\u79EC\u79E1\u79E3\u7A08\u7A0D\u7A18\u7A19\u7A20\u7A1F\u7980\u7A31\u7A3B\u7A3E\u7A37\u7A43\u7A57\u7A49\u7A61\u7A62\u7A69\u9F9D\u7A70\u7A79\u7A7D\u7A88\u7A97\u7A95\u7A98\u7A96\u7AA9\u7AC8\u7AB0\u7AB6\u7AC5\u7AC4\u7ABF\u9083\u7AC7\u7ACA\u7ACD\u7ACF\u7AD5\u7AD3\u7AD9\u7ADA\u7ADD\u7AE1\u7AE2\u7AE6\u7AED\u7AF0\u7B02\u7B0F\u7B0A\u7B06\u7B33\u7B18\u7B19\u7B1E\u7B35\u7B28\u7B36\u7B50"],
        ["e4a1", "\u7B7A\u7B04\u7B4D\u7B0B\u7B4C\u7B45\u7B75\u7B65\u7B74\u7B67\u7B70\u7B71\u7B6C\u7B6E\u7B9D\u7B98\u7B9F\u7B8D\u7B9C\u7B9A\u7B8B\u7B92\u7B8F\u7B5D\u7B99\u7BCB\u7BC1\u7BCC\u7BCF\u7BB4\u7BC6\u7BDD\u7BE9\u7C11\u7C14\u7BE6\u7BE5\u7C60\u7C00\u7C07\u7C13\u7BF3\u7BF7\u7C17\u7C0D\u7BF6\u7C23\u7C27\u7C2A\u7C1F\u7C37\u7C2B\u7C3D\u7C4C\u7C43\u7C54\u7C4F\u7C40\u7C50\u7C58\u7C5F\u7C64\u7C56\u7C65\u7C6C\u7C75\u7C83\u7C90\u7CA4\u7CAD\u7CA2\u7CAB\u7CA1\u7CA8\u7CB3\u7CB2\u7CB1\u7CAE\u7CB9\u7CBD\u7CC0\u7CC5\u7CC2\u7CD8\u7CD2\u7CDC\u7CE2\u9B3B\u7CEF\u7CF2\u7CF4\u7CF6\u7CFA\u7D06"],
        ["e5a1", "\u7D02\u7D1C\u7D15\u7D0A\u7D45\u7D4B\u7D2E\u7D32\u7D3F\u7D35\u7D46\u7D73\u7D56\u7D4E\u7D72\u7D68\u7D6E\u7D4F\u7D63\u7D93\u7D89\u7D5B\u7D8F\u7D7D\u7D9B\u7DBA\u7DAE\u7DA3\u7DB5\u7DC7\u7DBD\u7DAB\u7E3D\u7DA2\u7DAF\u7DDC\u7DB8\u7D9F\u7DB0\u7DD8\u7DDD\u7DE4\u7DDE\u7DFB\u7DF2\u7DE1\u7E05\u7E0A\u7E23\u7E21\u7E12\u7E31\u7E1F\u7E09\u7E0B\u7E22\u7E46\u7E66\u7E3B\u7E35\u7E39\u7E43\u7E37\u7E32\u7E3A\u7E67\u7E5D\u7E56\u7E5E\u7E59\u7E5A\u7E79\u7E6A\u7E69\u7E7C\u7E7B\u7E83\u7DD5\u7E7D\u8FAE\u7E7F\u7E88\u7E89\u7E8C\u7E92\u7E90\u7E93\u7E94\u7E96\u7E8E\u7E9B\u7E9C\u7F38\u7F3A"],
        ["e6a1", "\u7F45\u7F4C\u7F4D\u7F4E\u7F50\u7F51\u7F55\u7F54\u7F58\u7F5F\u7F60\u7F68\u7F69\u7F67\u7F78\u7F82\u7F86\u7F83\u7F88\u7F87\u7F8C\u7F94\u7F9E\u7F9D\u7F9A\u7FA3\u7FAF\u7FB2\u7FB9\u7FAE\u7FB6\u7FB8\u8B71\u7FC5\u7FC6\u7FCA\u7FD5\u7FD4\u7FE1\u7FE6\u7FE9\u7FF3\u7FF9\u98DC\u8006\u8004\u800B\u8012\u8018\u8019\u801C\u8021\u8028\u803F\u803B\u804A\u8046\u8052\u8058\u805A\u805F\u8062\u8068\u8073\u8072\u8070\u8076\u8079\u807D\u807F\u8084\u8086\u8085\u809B\u8093\u809A\u80AD\u5190\u80AC\u80DB\u80E5\u80D9\u80DD\u80C4\u80DA\u80D6\u8109\u80EF\u80F1\u811B\u8129\u8123\u812F\u814B"],
        ["e7a1", "\u968B\u8146\u813E\u8153\u8151\u80FC\u8171\u816E\u8165\u8166\u8174\u8183\u8188\u818A\u8180\u8182\u81A0\u8195\u81A4\u81A3\u815F\u8193\u81A9\u81B0\u81B5\u81BE\u81B8\u81BD\u81C0\u81C2\u81BA\u81C9\u81CD\u81D1\u81D9\u81D8\u81C8\u81DA\u81DF\u81E0\u81E7\u81FA\u81FB\u81FE\u8201\u8202\u8205\u8207\u820A\u820D\u8210\u8216\u8229\u822B\u8238\u8233\u8240\u8259\u8258\u825D\u825A\u825F\u8264\u8262\u8268\u826A\u826B\u822E\u8271\u8277\u8278\u827E\u828D\u8292\u82AB\u829F\u82BB\u82AC\u82E1\u82E3\u82DF\u82D2\u82F4\u82F3\u82FA\u8393\u8303\u82FB\u82F9\u82DE\u8306\u82DC\u8309\u82D9"],
        ["e8a1", "\u8335\u8334\u8316\u8332\u8331\u8340\u8339\u8350\u8345\u832F\u832B\u8317\u8318\u8385\u839A\u83AA\u839F\u83A2\u8396\u8323\u838E\u8387\u838A\u837C\u83B5\u8373\u8375\u83A0\u8389\u83A8\u83F4\u8413\u83EB\u83CE\u83FD\u8403\u83D8\u840B\u83C1\u83F7\u8407\u83E0\u83F2\u840D\u8422\u8420\u83BD\u8438\u8506\u83FB\u846D\u842A\u843C\u855A\u8484\u8477\u846B\u84AD\u846E\u8482\u8469\u8446\u842C\u846F\u8479\u8435\u84CA\u8462\u84B9\u84BF\u849F\u84D9\u84CD\u84BB\u84DA\u84D0\u84C1\u84C6\u84D6\u84A1\u8521\u84FF\u84F4\u8517\u8518\u852C\u851F\u8515\u8514\u84FC\u8540\u8563\u8558\u8548"],
        ["e9a1", "\u8541\u8602\u854B\u8555\u8580\u85A4\u8588\u8591\u858A\u85A8\u856D\u8594\u859B\u85EA\u8587\u859C\u8577\u857E\u8590\u85C9\u85BA\u85CF\u85B9\u85D0\u85D5\u85DD\u85E5\u85DC\u85F9\u860A\u8613\u860B\u85FE\u85FA\u8606\u8622\u861A\u8630\u863F\u864D\u4E55\u8654\u865F\u8667\u8671\u8693\u86A3\u86A9\u86AA\u868B\u868C\u86B6\u86AF\u86C4\u86C6\u86B0\u86C9\u8823\u86AB\u86D4\u86DE\u86E9\u86EC\u86DF\u86DB\u86EF\u8712\u8706\u8708\u8700\u8703\u86FB\u8711\u8709\u870D\u86F9\u870A\u8734\u873F\u8737\u873B\u8725\u8729\u871A\u8760\u875F\u8778\u874C\u874E\u8774\u8757\u8768\u876E\u8759"],
        ["eaa1", "\u8753\u8763\u876A\u8805\u87A2\u879F\u8782\u87AF\u87CB\u87BD\u87C0\u87D0\u96D6\u87AB\u87C4\u87B3\u87C7\u87C6\u87BB\u87EF\u87F2\u87E0\u880F\u880D\u87FE\u87F6\u87F7\u880E\u87D2\u8811\u8816\u8815\u8822\u8821\u8831\u8836\u8839\u8827\u883B\u8844\u8842\u8852\u8859\u885E\u8862\u886B\u8881\u887E\u889E\u8875\u887D\u88B5\u8872\u8882\u8897\u8892\u88AE\u8899\u88A2\u888D\u88A4\u88B0\u88BF\u88B1\u88C3\u88C4\u88D4\u88D8\u88D9\u88DD\u88F9\u8902\u88FC\u88F4\u88E8\u88F2\u8904\u890C\u890A\u8913\u8943\u891E\u8925\u892A\u892B\u8941\u8944\u893B\u8936\u8938\u894C\u891D\u8960\u895E"],
        ["eba1", "\u8966\u8964\u896D\u896A\u896F\u8974\u8977\u897E\u8983\u8988\u898A\u8993\u8998\u89A1\u89A9\u89A6\u89AC\u89AF\u89B2\u89BA\u89BD\u89BF\u89C0\u89DA\u89DC\u89DD\u89E7\u89F4\u89F8\u8A03\u8A16\u8A10\u8A0C\u8A1B\u8A1D\u8A25\u8A36\u8A41\u8A5B\u8A52\u8A46\u8A48\u8A7C\u8A6D\u8A6C\u8A62\u8A85\u8A82\u8A84\u8AA8\u8AA1\u8A91\u8AA5\u8AA6\u8A9A\u8AA3\u8AC4\u8ACD\u8AC2\u8ADA\u8AEB\u8AF3\u8AE7\u8AE4\u8AF1\u8B14\u8AE0\u8AE2\u8AF7\u8ADE\u8ADB\u8B0C\u8B07\u8B1A\u8AE1\u8B16\u8B10\u8B17\u8B20\u8B33\u97AB\u8B26\u8B2B\u8B3E\u8B28\u8B41\u8B4C\u8B4F\u8B4E\u8B49\u8B56\u8B5B\u8B5A\u8B6B"],
        ["eca1", "\u8B5F\u8B6C\u8B6F\u8B74\u8B7D\u8B80\u8B8C\u8B8E\u8B92\u8B93\u8B96\u8B99\u8B9A\u8C3A\u8C41\u8C3F\u8C48\u8C4C\u8C4E\u8C50\u8C55\u8C62\u8C6C\u8C78\u8C7A\u8C82\u8C89\u8C85\u8C8A\u8C8D\u8C8E\u8C94\u8C7C\u8C98\u621D\u8CAD\u8CAA\u8CBD\u8CB2\u8CB3\u8CAE\u8CB6\u8CC8\u8CC1\u8CE4\u8CE3\u8CDA\u8CFD\u8CFA\u8CFB\u8D04\u8D05\u8D0A\u8D07\u8D0F\u8D0D\u8D10\u9F4E\u8D13\u8CCD\u8D14\u8D16\u8D67\u8D6D\u8D71\u8D73\u8D81\u8D99\u8DC2\u8DBE\u8DBA\u8DCF\u8DDA\u8DD6\u8DCC\u8DDB\u8DCB\u8DEA\u8DEB\u8DDF\u8DE3\u8DFC\u8E08\u8E09\u8DFF\u8E1D\u8E1E\u8E10\u8E1F\u8E42\u8E35\u8E30\u8E34\u8E4A"],
        ["eda1", "\u8E47\u8E49\u8E4C\u8E50\u8E48\u8E59\u8E64\u8E60\u8E2A\u8E63\u8E55\u8E76\u8E72\u8E7C\u8E81\u8E87\u8E85\u8E84\u8E8B\u8E8A\u8E93\u8E91\u8E94\u8E99\u8EAA\u8EA1\u8EAC\u8EB0\u8EC6\u8EB1\u8EBE\u8EC5\u8EC8\u8ECB\u8EDB\u8EE3\u8EFC\u8EFB\u8EEB\u8EFE\u8F0A\u8F05\u8F15\u8F12\u8F19\u8F13\u8F1C\u8F1F\u8F1B\u8F0C\u8F26\u8F33\u8F3B\u8F39\u8F45\u8F42\u8F3E\u8F4C\u8F49\u8F46\u8F4E\u8F57\u8F5C\u8F62\u8F63\u8F64\u8F9C\u8F9F\u8FA3\u8FAD\u8FAF\u8FB7\u8FDA\u8FE5\u8FE2\u8FEA\u8FEF\u9087\u8FF4\u9005\u8FF9\u8FFA\u9011\u9015\u9021\u900D\u901E\u9016\u900B\u9027\u9036\u9035\u9039\u8FF8"],
        ["eea1", "\u904F\u9050\u9051\u9052\u900E\u9049\u903E\u9056\u9058\u905E\u9068\u906F\u9076\u96A8\u9072\u9082\u907D\u9081\u9080\u908A\u9089\u908F\u90A8\u90AF\u90B1\u90B5\u90E2\u90E4\u6248\u90DB\u9102\u9112\u9119\u9132\u9130\u914A\u9156\u9158\u9163\u9165\u9169\u9173\u9172\u918B\u9189\u9182\u91A2\u91AB\u91AF\u91AA\u91B5\u91B4\u91BA\u91C0\u91C1\u91C9\u91CB\u91D0\u91D6\u91DF\u91E1\u91DB\u91FC\u91F5\u91F6\u921E\u91FF\u9214\u922C\u9215\u9211\u925E\u9257\u9245\u9249\u9264\u9248\u9295\u923F\u924B\u9250\u929C\u9296\u9293\u929B\u925A\u92CF\u92B9\u92B7\u92E9\u930F\u92FA\u9344\u932E"],
        ["efa1", "\u9319\u9322\u931A\u9323\u933A\u9335\u933B\u935C\u9360\u937C\u936E\u9356\u93B0\u93AC\u93AD\u9394\u93B9\u93D6\u93D7\u93E8\u93E5\u93D8\u93C3\u93DD\u93D0\u93C8\u93E4\u941A\u9414\u9413\u9403\u9407\u9410\u9436\u942B\u9435\u9421\u943A\u9441\u9452\u9444\u945B\u9460\u9462\u945E\u946A\u9229\u9470\u9475\u9477\u947D\u945A\u947C\u947E\u9481\u947F\u9582\u9587\u958A\u9594\u9596\u9598\u9599\u95A0\u95A8\u95A7\u95AD\u95BC\u95BB\u95B9\u95BE\u95CA\u6FF6\u95C3\u95CD\u95CC\u95D5\u95D4\u95D6\u95DC\u95E1\u95E5\u95E2\u9621\u9628\u962E\u962F\u9642\u964C\u964F\u964B\u9677\u965C\u965E"],
        ["f0a1", "\u965D\u965F\u9666\u9672\u966C\u968D\u9698\u9695\u9697\u96AA\u96A7\u96B1\u96B2\u96B0\u96B4\u96B6\u96B8\u96B9\u96CE\u96CB\u96C9\u96CD\u894D\u96DC\u970D\u96D5\u96F9\u9704\u9706\u9708\u9713\u970E\u9711\u970F\u9716\u9719\u9724\u972A\u9730\u9739\u973D\u973E\u9744\u9746\u9748\u9742\u9749\u975C\u9760\u9764\u9766\u9768\u52D2\u976B\u9771\u9779\u9785\u977C\u9781\u977A\u9786\u978B\u978F\u9790\u979C\u97A8\u97A6\u97A3\u97B3\u97B4\u97C3\u97C6\u97C8\u97CB\u97DC\u97ED\u9F4F\u97F2\u7ADF\u97F6\u97F5\u980F\u980C\u9838\u9824\u9821\u9837\u983D\u9846\u984F\u984B\u986B\u986F\u9870"],
        ["f1a1", "\u9871\u9874\u9873\u98AA\u98AF\u98B1\u98B6\u98C4\u98C3\u98C6\u98E9\u98EB\u9903\u9909\u9912\u9914\u9918\u9921\u991D\u991E\u9924\u9920\u992C\u992E\u993D\u993E\u9942\u9949\u9945\u9950\u994B\u9951\u9952\u994C\u9955\u9997\u9998\u99A5\u99AD\u99AE\u99BC\u99DF\u99DB\u99DD\u99D8\u99D1\u99ED\u99EE\u99F1\u99F2\u99FB\u99F8\u9A01\u9A0F\u9A05\u99E2\u9A19\u9A2B\u9A37\u9A45\u9A42\u9A40\u9A43\u9A3E\u9A55\u9A4D\u9A5B\u9A57\u9A5F\u9A62\u9A65\u9A64\u9A69\u9A6B\u9A6A\u9AAD\u9AB0\u9ABC\u9AC0\u9ACF\u9AD1\u9AD3\u9AD4\u9ADE\u9ADF\u9AE2\u9AE3\u9AE6\u9AEF\u9AEB\u9AEE\u9AF4\u9AF1\u9AF7"],
        ["f2a1", "\u9AFB\u9B06\u9B18\u9B1A\u9B1F\u9B22\u9B23\u9B25\u9B27\u9B28\u9B29\u9B2A\u9B2E\u9B2F\u9B32\u9B44\u9B43\u9B4F\u9B4D\u9B4E\u9B51\u9B58\u9B74\u9B93\u9B83\u9B91\u9B96\u9B97\u9B9F\u9BA0\u9BA8\u9BB4\u9BC0\u9BCA\u9BB9\u9BC6\u9BCF\u9BD1\u9BD2\u9BE3\u9BE2\u9BE4\u9BD4\u9BE1\u9C3A\u9BF2\u9BF1\u9BF0\u9C15\u9C14\u9C09\u9C13\u9C0C\u9C06\u9C08\u9C12\u9C0A\u9C04\u9C2E\u9C1B\u9C25\u9C24\u9C21\u9C30\u9C47\u9C32\u9C46\u9C3E\u9C5A\u9C60\u9C67\u9C76\u9C78\u9CE7\u9CEC\u9CF0\u9D09\u9D08\u9CEB\u9D03\u9D06\u9D2A\u9D26\u9DAF\u9D23\u9D1F\u9D44\u9D15\u9D12\u9D41\u9D3F\u9D3E\u9D46\u9D48"],
        ["f3a1", "\u9D5D\u9D5E\u9D64\u9D51\u9D50\u9D59\u9D72\u9D89\u9D87\u9DAB\u9D6F\u9D7A\u9D9A\u9DA4\u9DA9\u9DB2\u9DC4\u9DC1\u9DBB\u9DB8\u9DBA\u9DC6\u9DCF\u9DC2\u9DD9\u9DD3\u9DF8\u9DE6\u9DED\u9DEF\u9DFD\u9E1A\u9E1B\u9E1E\u9E75\u9E79\u9E7D\u9E81\u9E88\u9E8B\u9E8C\u9E92\u9E95\u9E91\u9E9D\u9EA5\u9EA9\u9EB8\u9EAA\u9EAD\u9761\u9ECC\u9ECE\u9ECF\u9ED0\u9ED4\u9EDC\u9EDE\u9EDD\u9EE0\u9EE5\u9EE8\u9EEF\u9EF4\u9EF6\u9EF7\u9EF9\u9EFB\u9EFC\u9EFD\u9F07\u9F08\u76B7\u9F15\u9F21\u9F2C\u9F3E\u9F4A\u9F52\u9F54\u9F63\u9F5F\u9F60\u9F61\u9F66\u9F67\u9F6C\u9F6A\u9F77\u9F72\u9F76\u9F95\u9F9C\u9FA0"],
        ["f4a1", "\u582F\u69C7\u9059\u7464\u51DC\u7199"],
        ["f9a1", "\u7E8A\u891C\u9348\u9288\u84DC\u4FC9\u70BB\u6631\u68C8\u92F9\u66FB\u5F45\u4E28\u4EE1\u4EFC\u4F00\u4F03\u4F39\u4F56\u4F92\u4F8A\u4F9A\u4F94\u4FCD\u5040\u5022\u4FFF\u501E\u5046\u5070\u5042\u5094\u50F4\u50D8\u514A\u5164\u519D\u51BE\u51EC\u5215\u529C\u52A6\u52C0\u52DB\u5300\u5307\u5324\u5372\u5393\u53B2\u53DD\uFA0E\u549C\u548A\u54A9\u54FF\u5586\u5759\u5765\u57AC\u57C8\u57C7\uFA0F\uFA10\u589E\u58B2\u590B\u5953\u595B\u595D\u5963\u59A4\u59BA\u5B56\u5BC0\u752F\u5BD8\u5BEC\u5C1E\u5CA6\u5CBA\u5CF5\u5D27\u5D53\uFA11\u5D42\u5D6D\u5DB8\u5DB9\u5DD0\u5F21\u5F34\u5F67\u5FB7"],
        ["faa1", "\u5FDE\u605D\u6085\u608A\u60DE\u60D5\u6120\u60F2\u6111\u6137\u6130\u6198\u6213\u62A6\u63F5\u6460\u649D\u64CE\u654E\u6600\u6615\u663B\u6609\u662E\u661E\u6624\u6665\u6657\u6659\uFA12\u6673\u6699\u66A0\u66B2\u66BF\u66FA\u670E\uF929\u6766\u67BB\u6852\u67C0\u6801\u6844\u68CF\uFA13\u6968\uFA14\u6998\u69E2\u6A30\u6A6B\u6A46\u6A73\u6A7E\u6AE2\u6AE4\u6BD6\u6C3F\u6C5C\u6C86\u6C6F\u6CDA\u6D04\u6D87\u6D6F\u6D96\u6DAC\u6DCF\u6DF8\u6DF2\u6DFC\u6E39\u6E5C\u6E27\u6E3C\u6EBF\u6F88\u6FB5\u6FF5\u7005\u7007\u7028\u7085\u70AB\u710F\u7104\u715C\u7146\u7147\uFA15\u71C1\u71FE\u72B1"],
        ["fba1", "\u72BE\u7324\uFA16\u7377\u73BD\u73C9\u73D6\u73E3\u73D2\u7407\u73F5\u7426\u742A\u7429\u742E\u7462\u7489\u749F\u7501\u756F\u7682\u769C\u769E\u769B\u76A6\uFA17\u7746\u52AF\u7821\u784E\u7864\u787A\u7930\uFA18\uFA19\uFA1A\u7994\uFA1B\u799B\u7AD1\u7AE7\uFA1C\u7AEB\u7B9E\uFA1D\u7D48\u7D5C\u7DB7\u7DA0\u7DD6\u7E52\u7F47\u7FA1\uFA1E\u8301\u8362\u837F\u83C7\u83F6\u8448\u84B4\u8553\u8559\u856B\uFA1F\u85B0\uFA20\uFA21\u8807\u88F5\u8A12\u8A37\u8A79\u8AA7\u8ABE\u8ADF\uFA22\u8AF6\u8B53\u8B7F\u8CF0\u8CF4\u8D12\u8D76\uFA23\u8ECF\uFA24\uFA25\u9067\u90DE\uFA26\u9115\u9127\u91DA"],
        ["fca1", "\u91D7\u91DE\u91ED\u91EE\u91E4\u91E5\u9206\u9210\u920A\u923A\u9240\u923C\u924E\u9259\u9251\u9239\u9267\u92A7\u9277\u9278\u92E7\u92D7\u92D9\u92D0\uFA27\u92D5\u92E0\u92D3\u9325\u9321\u92FB\uFA28\u931E\u92FF\u931D\u9302\u9370\u9357\u93A4\u93C6\u93DE\u93F8\u9431\u9445\u9448\u9592\uF9DC\uFA29\u969D\u96AF\u9733\u973B\u9743\u974D\u974F\u9751\u9755\u9857\u9865\uFA2A\uFA2B\u9927\uFA2C\u999E\u9A4E\u9AD9\u9ADC\u9B75\u9B72\u9B8F\u9BB1\u9BBB\u9C00\u9D70\u9D6B\uFA2D\u9E19\u9ED1"],
        ["fcf1", "\u2170", 9, "\uFFE2\uFFE4\uFF07\uFF02"],
        ["8fa2af", "\u02D8\u02C7\xB8\u02D9\u02DD\xAF\u02DB\u02DA\uFF5E\u0384\u0385"],
        ["8fa2c2", "\xA1\xA6\xBF"],
        ["8fa2eb", "\xBA\xAA\xA9\xAE\u2122\xA4\u2116"],
        ["8fa6e1", "\u0386\u0388\u0389\u038A\u03AA"],
        ["8fa6e7", "\u038C"],
        ["8fa6e9", "\u038E\u03AB"],
        ["8fa6ec", "\u038F"],
        ["8fa6f1", "\u03AC\u03AD\u03AE\u03AF\u03CA\u0390\u03CC\u03C2\u03CD\u03CB\u03B0\u03CE"],
        ["8fa7c2", "\u0402", 10, "\u040E\u040F"],
        ["8fa7f2", "\u0452", 10, "\u045E\u045F"],
        ["8fa9a1", "\xC6\u0110"],
        ["8fa9a4", "\u0126"],
        ["8fa9a6", "\u0132"],
        ["8fa9a8", "\u0141\u013F"],
        ["8fa9ab", "\u014A\xD8\u0152"],
        ["8fa9af", "\u0166\xDE"],
        ["8fa9c1", "\xE6\u0111\xF0\u0127\u0131\u0133\u0138\u0142\u0140\u0149\u014B\xF8\u0153\xDF\u0167\xFE"],
        ["8faaa1", "\xC1\xC0\xC4\xC2\u0102\u01CD\u0100\u0104\xC5\xC3\u0106\u0108\u010C\xC7\u010A\u010E\xC9\xC8\xCB\xCA\u011A\u0116\u0112\u0118"],
        ["8faaba", "\u011C\u011E\u0122\u0120\u0124\xCD\xCC\xCF\xCE\u01CF\u0130\u012A\u012E\u0128\u0134\u0136\u0139\u013D\u013B\u0143\u0147\u0145\xD1\xD3\xD2\xD6\xD4\u01D1\u0150\u014C\xD5\u0154\u0158\u0156\u015A\u015C\u0160\u015E\u0164\u0162\xDA\xD9\xDC\xDB\u016C\u01D3\u0170\u016A\u0172\u016E\u0168\u01D7\u01DB\u01D9\u01D5\u0174\xDD\u0178\u0176\u0179\u017D\u017B"],
        ["8faba1", "\xE1\xE0\xE4\xE2\u0103\u01CE\u0101\u0105\xE5\xE3\u0107\u0109\u010D\xE7\u010B\u010F\xE9\xE8\xEB\xEA\u011B\u0117\u0113\u0119\u01F5\u011D\u011F"],
        ["8fabbd", "\u0121\u0125\xED\xEC\xEF\xEE\u01D0"],
        ["8fabc5", "\u012B\u012F\u0129\u0135\u0137\u013A\u013E\u013C\u0144\u0148\u0146\xF1\xF3\xF2\xF6\xF4\u01D2\u0151\u014D\xF5\u0155\u0159\u0157\u015B\u015D\u0161\u015F\u0165\u0163\xFA\xF9\xFC\xFB\u016D\u01D4\u0171\u016B\u0173\u016F\u0169\u01D8\u01DC\u01DA\u01D6\u0175\xFD\xFF\u0177\u017A\u017E\u017C"],
        ["8fb0a1", "\u4E02\u4E04\u4E05\u4E0C\u4E12\u4E1F\u4E23\u4E24\u4E28\u4E2B\u4E2E\u4E2F\u4E30\u4E35\u4E40\u4E41\u4E44\u4E47\u4E51\u4E5A\u4E5C\u4E63\u4E68\u4E69\u4E74\u4E75\u4E79\u4E7F\u4E8D\u4E96\u4E97\u4E9D\u4EAF\u4EB9\u4EC3\u4ED0\u4EDA\u4EDB\u4EE0\u4EE1\u4EE2\u4EE8\u4EEF\u4EF1\u4EF3\u4EF5\u4EFD\u4EFE\u4EFF\u4F00\u4F02\u4F03\u4F08\u4F0B\u4F0C\u4F12\u4F15\u4F16\u4F17\u4F19\u4F2E\u4F31\u4F60\u4F33\u4F35\u4F37\u4F39\u4F3B\u4F3E\u4F40\u4F42\u4F48\u4F49\u4F4B\u4F4C\u4F52\u4F54\u4F56\u4F58\u4F5F\u4F63\u4F6A\u4F6C\u4F6E\u4F71\u4F77\u4F78\u4F79\u4F7A\u4F7D\u4F7E\u4F81\u4F82\u4F84"],
        ["8fb1a1", "\u4F85\u4F89\u4F8A\u4F8C\u4F8E\u4F90\u4F92\u4F93\u4F94\u4F97\u4F99\u4F9A\u4F9E\u4F9F\u4FB2\u4FB7\u4FB9\u4FBB\u4FBC\u4FBD\u4FBE\u4FC0\u4FC1\u4FC5\u4FC6\u4FC8\u4FC9\u4FCB\u4FCC\u4FCD\u4FCF\u4FD2\u4FDC\u4FE0\u4FE2\u4FF0\u4FF2\u4FFC\u4FFD\u4FFF\u5000\u5001\u5004\u5007\u500A\u500C\u500E\u5010\u5013\u5017\u5018\u501B\u501C\u501D\u501E\u5022\u5027\u502E\u5030\u5032\u5033\u5035\u5040\u5041\u5042\u5045\u5046\u504A\u504C\u504E\u5051\u5052\u5053\u5057\u5059\u505F\u5060\u5062\u5063\u5066\u5067\u506A\u506D\u5070\u5071\u503B\u5081\u5083\u5084\u5086\u508A\u508E\u508F\u5090"],
        ["8fb2a1", "\u5092\u5093\u5094\u5096\u509B\u509C\u509E", 4, "\u50AA\u50AF\u50B0\u50B9\u50BA\u50BD\u50C0\u50C3\u50C4\u50C7\u50CC\u50CE\u50D0\u50D3\u50D4\u50D8\u50DC\u50DD\u50DF\u50E2\u50E4\u50E6\u50E8\u50E9\u50EF\u50F1\u50F6\u50FA\u50FE\u5103\u5106\u5107\u5108\u510B\u510C\u510D\u510E\u50F2\u5110\u5117\u5119\u511B\u511C\u511D\u511E\u5123\u5127\u5128\u512C\u512D\u512F\u5131\u5133\u5134\u5135\u5138\u5139\u5142\u514A\u514F\u5153\u5155\u5157\u5158\u515F\u5164\u5166\u517E\u5183\u5184\u518B\u518E\u5198\u519D\u51A1\u51A3\u51AD\u51B8\u51BA\u51BC\u51BE\u51BF\u51C2"],
        ["8fb3a1", "\u51C8\u51CF\u51D1\u51D2\u51D3\u51D5\u51D8\u51DE\u51E2\u51E5\u51EE\u51F2\u51F3\u51F4\u51F7\u5201\u5202\u5205\u5212\u5213\u5215\u5216\u5218\u5222\u5228\u5231\u5232\u5235\u523C\u5245\u5249\u5255\u5257\u5258\u525A\u525C\u525F\u5260\u5261\u5266\u526E\u5277\u5278\u5279\u5280\u5282\u5285\u528A\u528C\u5293\u5295\u5296\u5297\u5298\u529A\u529C\u52A4\u52A5\u52A6\u52A7\u52AF\u52B0\u52B6\u52B7\u52B8\u52BA\u52BB\u52BD\u52C0\u52C4\u52C6\u52C8\u52CC\u52CF\u52D1\u52D4\u52D6\u52DB\u52DC\u52E1\u52E5\u52E8\u52E9\u52EA\u52EC\u52F0\u52F1\u52F4\u52F6\u52F7\u5300\u5303\u530A\u530B"],
        ["8fb4a1", "\u530C\u5311\u5313\u5318\u531B\u531C\u531E\u531F\u5325\u5327\u5328\u5329\u532B\u532C\u532D\u5330\u5332\u5335\u533C\u533D\u533E\u5342\u534C\u534B\u5359\u535B\u5361\u5363\u5365\u536C\u536D\u5372\u5379\u537E\u5383\u5387\u5388\u538E\u5393\u5394\u5399\u539D\u53A1\u53A4\u53AA\u53AB\u53AF\u53B2\u53B4\u53B5\u53B7\u53B8\u53BA\u53BD\u53C0\u53C5\u53CF\u53D2\u53D3\u53D5\u53DA\u53DD\u53DE\u53E0\u53E6\u53E7\u53F5\u5402\u5413\u541A\u5421\u5427\u5428\u542A\u542F\u5431\u5434\u5435\u5443\u5444\u5447\u544D\u544F\u545E\u5462\u5464\u5466\u5467\u5469\u546B\u546D\u546E\u5474\u547F"],
        ["8fb5a1", "\u5481\u5483\u5485\u5488\u5489\u548D\u5491\u5495\u5496\u549C\u549F\u54A1\u54A6\u54A7\u54A9\u54AA\u54AD\u54AE\u54B1\u54B7\u54B9\u54BA\u54BB\u54BF\u54C6\u54CA\u54CD\u54CE\u54E0\u54EA\u54EC\u54EF\u54F6\u54FC\u54FE\u54FF\u5500\u5501\u5505\u5508\u5509\u550C\u550D\u550E\u5515\u552A\u552B\u5532\u5535\u5536\u553B\u553C\u553D\u5541\u5547\u5549\u554A\u554D\u5550\u5551\u5558\u555A\u555B\u555E\u5560\u5561\u5564\u5566\u557F\u5581\u5582\u5586\u5588\u558E\u558F\u5591\u5592\u5593\u5594\u5597\u55A3\u55A4\u55AD\u55B2\u55BF\u55C1\u55C3\u55C6\u55C9\u55CB\u55CC\u55CE\u55D1\u55D2"],
        ["8fb6a1", "\u55D3\u55D7\u55D8\u55DB\u55DE\u55E2\u55E9\u55F6\u55FF\u5605\u5608\u560A\u560D", 5, "\u5619\u562C\u5630\u5633\u5635\u5637\u5639\u563B\u563C\u563D\u563F\u5640\u5641\u5643\u5644\u5646\u5649\u564B\u564D\u564F\u5654\u565E\u5660\u5661\u5662\u5663\u5666\u5669\u566D\u566F\u5671\u5672\u5675\u5684\u5685\u5688\u568B\u568C\u5695\u5699\u569A\u569D\u569E\u569F\u56A6\u56A7\u56A8\u56A9\u56AB\u56AC\u56AD\u56B1\u56B3\u56B7\u56BE\u56C5\u56C9\u56CA\u56CB\u56CF\u56D0\u56CC\u56CD\u56D9\u56DC\u56DD\u56DF\u56E1\u56E4", 4, "\u56F1\u56EB\u56ED"],
        ["8fb7a1", "\u56F6\u56F7\u5701\u5702\u5707\u570A\u570C\u5711\u5715\u571A\u571B\u571D\u5720\u5722\u5723\u5724\u5725\u5729\u572A\u572C\u572E\u572F\u5733\u5734\u573D\u573E\u573F\u5745\u5746\u574C\u574D\u5752\u5762\u5765\u5767\u5768\u576B\u576D", 4, "\u5773\u5774\u5775\u5777\u5779\u577A\u577B\u577C\u577E\u5781\u5783\u578C\u5794\u5797\u5799\u579A\u579C\u579D\u579E\u579F\u57A1\u5795\u57A7\u57A8\u57A9\u57AC\u57B8\u57BD\u57C7\u57C8\u57CC\u57CF\u57D5\u57DD\u57DE\u57E4\u57E6\u57E7\u57E9\u57ED\u57F0\u57F5\u57F6\u57F8\u57FD\u57FE\u57FF\u5803\u5804\u5808\u5809\u57E1"],
        ["8fb8a1", "\u580C\u580D\u581B\u581E\u581F\u5820\u5826\u5827\u582D\u5832\u5839\u583F\u5849\u584C\u584D\u584F\u5850\u5855\u585F\u5861\u5864\u5867\u5868\u5878\u587C\u587F\u5880\u5881\u5887\u5888\u5889\u588A\u588C\u588D\u588F\u5890\u5894\u5896\u589D\u58A0\u58A1\u58A2\u58A6\u58A9\u58B1\u58B2\u58C4\u58BC\u58C2\u58C8\u58CD\u58CE\u58D0\u58D2\u58D4\u58D6\u58DA\u58DD\u58E1\u58E2\u58E9\u58F3\u5905\u5906\u590B\u590C\u5912\u5913\u5914\u8641\u591D\u5921\u5923\u5924\u5928\u592F\u5930\u5933\u5935\u5936\u593F\u5943\u5946\u5952\u5953\u5959\u595B\u595D\u595E\u595F\u5961\u5963\u596B\u596D"],
        ["8fb9a1", "\u596F\u5972\u5975\u5976\u5979\u597B\u597C\u598B\u598C\u598E\u5992\u5995\u5997\u599F\u59A4\u59A7\u59AD\u59AE\u59AF\u59B0\u59B3\u59B7\u59BA\u59BC\u59C1\u59C3\u59C4\u59C8\u59CA\u59CD\u59D2\u59DD\u59DE\u59DF\u59E3\u59E4\u59E7\u59EE\u59EF\u59F1\u59F2\u59F4\u59F7\u5A00\u5A04\u5A0C\u5A0D\u5A0E\u5A12\u5A13\u5A1E\u5A23\u5A24\u5A27\u5A28\u5A2A\u5A2D\u5A30\u5A44\u5A45\u5A47\u5A48\u5A4C\u5A50\u5A55\u5A5E\u5A63\u5A65\u5A67\u5A6D\u5A77\u5A7A\u5A7B\u5A7E\u5A8B\u5A90\u5A93\u5A96\u5A99\u5A9C\u5A9E\u5A9F\u5AA0\u5AA2\u5AA7\u5AAC\u5AB1\u5AB2\u5AB3\u5AB5\u5AB8\u5ABA\u5ABB\u5ABF"],
        ["8fbaa1", "\u5AC4\u5AC6\u5AC8\u5ACF\u5ADA\u5ADC\u5AE0\u5AE5\u5AEA\u5AEE\u5AF5\u5AF6\u5AFD\u5B00\u5B01\u5B08\u5B17\u5B34\u5B19\u5B1B\u5B1D\u5B21\u5B25\u5B2D\u5B38\u5B41\u5B4B\u5B4C\u5B52\u5B56\u5B5E\u5B68\u5B6E\u5B6F\u5B7C\u5B7D\u5B7E\u5B7F\u5B81\u5B84\u5B86\u5B8A\u5B8E\u5B90\u5B91\u5B93\u5B94\u5B96\u5BA8\u5BA9\u5BAC\u5BAD\u5BAF\u5BB1\u5BB2\u5BB7\u5BBA\u5BBC\u5BC0\u5BC1\u5BCD\u5BCF\u5BD6", 4, "\u5BE0\u5BEF\u5BF1\u5BF4\u5BFD\u5C0C\u5C17\u5C1E\u5C1F\u5C23\u5C26\u5C29\u5C2B\u5C2C\u5C2E\u5C30\u5C32\u5C35\u5C36\u5C59\u5C5A\u5C5C\u5C62\u5C63\u5C67\u5C68\u5C69"],
        ["8fbba1", "\u5C6D\u5C70\u5C74\u5C75\u5C7A\u5C7B\u5C7C\u5C7D\u5C87\u5C88\u5C8A\u5C8F\u5C92\u5C9D\u5C9F\u5CA0\u5CA2\u5CA3\u5CA6\u5CAA\u5CB2\u5CB4\u5CB5\u5CBA\u5CC9\u5CCB\u5CD2\u5CDD\u5CD7\u5CEE\u5CF1\u5CF2\u5CF4\u5D01\u5D06\u5D0D\u5D12\u5D2B\u5D23\u5D24\u5D26\u5D27\u5D31\u5D34\u5D39\u5D3D\u5D3F\u5D42\u5D43\u5D46\u5D48\u5D55\u5D51\u5D59\u5D4A\u5D5F\u5D60\u5D61\u5D62\u5D64\u5D6A\u5D6D\u5D70\u5D79\u5D7A\u5D7E\u5D7F\u5D81\u5D83\u5D88\u5D8A\u5D92\u5D93\u5D94\u5D95\u5D99\u5D9B\u5D9F\u5DA0\u5DA7\u5DAB\u5DB0\u5DB4\u5DB8\u5DB9\u5DC3\u5DC7\u5DCB\u5DD0\u5DCE\u5DD8\u5DD9\u5DE0\u5DE4"],
        ["8fbca1", "\u5DE9\u5DF8\u5DF9\u5E00\u5E07\u5E0D\u5E12\u5E14\u5E15\u5E18\u5E1F\u5E20\u5E2E\u5E28\u5E32\u5E35\u5E3E\u5E4B\u5E50\u5E49\u5E51\u5E56\u5E58\u5E5B\u5E5C\u5E5E\u5E68\u5E6A", 4, "\u5E70\u5E80\u5E8B\u5E8E\u5EA2\u5EA4\u5EA5\u5EA8\u5EAA\u5EAC\u5EB1\u5EB3\u5EBD\u5EBE\u5EBF\u5EC6\u5ECC\u5ECB\u5ECE\u5ED1\u5ED2\u5ED4\u5ED5\u5EDC\u5EDE\u5EE5\u5EEB\u5F02\u5F06\u5F07\u5F08\u5F0E\u5F19\u5F1C\u5F1D\u5F21\u5F22\u5F23\u5F24\u5F28\u5F2B\u5F2C\u5F2E\u5F30\u5F34\u5F36\u5F3B\u5F3D\u5F3F\u5F40\u5F44\u5F45\u5F47\u5F4D\u5F50\u5F54\u5F58\u5F5B\u5F60\u5F63\u5F64\u5F67"],
        ["8fbda1", "\u5F6F\u5F72\u5F74\u5F75\u5F78\u5F7A\u5F7D\u5F7E\u5F89\u5F8D\u5F8F\u5F96\u5F9C\u5F9D\u5FA2\u5FA7\u5FAB\u5FA4\u5FAC\u5FAF\u5FB0\u5FB1\u5FB8\u5FC4\u5FC7\u5FC8\u5FC9\u5FCB\u5FD0", 4, "\u5FDE\u5FE1\u5FE2\u5FE8\u5FE9\u5FEA\u5FEC\u5FED\u5FEE\u5FEF\u5FF2\u5FF3\u5FF6\u5FFA\u5FFC\u6007\u600A\u600D\u6013\u6014\u6017\u6018\u601A\u601F\u6024\u602D\u6033\u6035\u6040\u6047\u6048\u6049\u604C\u6051\u6054\u6056\u6057\u605D\u6061\u6067\u6071\u607E\u607F\u6082\u6086\u6088\u608A\u608E\u6091\u6093\u6095\u6098\u609D\u609E\u60A2\u60A4\u60A5\u60A8\u60B0\u60B1\u60B7"],
        ["8fbea1", "\u60BB\u60BE\u60C2\u60C4\u60C8\u60C9\u60CA\u60CB\u60CE\u60CF\u60D4\u60D5\u60D9\u60DB\u60DD\u60DE\u60E2\u60E5\u60F2\u60F5\u60F8\u60FC\u60FD\u6102\u6107\u610A\u610C\u6110", 4, "\u6116\u6117\u6119\u611C\u611E\u6122\u612A\u612B\u6130\u6131\u6135\u6136\u6137\u6139\u6141\u6145\u6146\u6149\u615E\u6160\u616C\u6172\u6178\u617B\u617C\u617F\u6180\u6181\u6183\u6184\u618B\u618D\u6192\u6193\u6197\u6198\u619C\u619D\u619F\u61A0\u61A5\u61A8\u61AA\u61AD\u61B8\u61B9\u61BC\u61C0\u61C1\u61C2\u61CE\u61CF\u61D5\u61DC\u61DD\u61DE\u61DF\u61E1\u61E2\u61E7\u61E9\u61E5"],
        ["8fbfa1", "\u61EC\u61ED\u61EF\u6201\u6203\u6204\u6207\u6213\u6215\u621C\u6220\u6222\u6223\u6227\u6229\u622B\u6239\u623D\u6242\u6243\u6244\u6246\u624C\u6250\u6251\u6252\u6254\u6256\u625A\u625C\u6264\u626D\u626F\u6273\u627A\u627D\u628D\u628E\u628F\u6290\u62A6\u62A8\u62B3\u62B6\u62B7\u62BA\u62BE\u62BF\u62C4\u62CE\u62D5\u62D6\u62DA\u62EA\u62F2\u62F4\u62FC\u62FD\u6303\u6304\u630A\u630B\u630D\u6310\u6313\u6316\u6318\u6329\u632A\u632D\u6335\u6336\u6339\u633C\u6341\u6342\u6343\u6344\u6346\u634A\u634B\u634E\u6352\u6353\u6354\u6358\u635B\u6365\u6366\u636C\u636D\u6371\u6374\u6375"],
        ["8fc0a1", "\u6378\u637C\u637D\u637F\u6382\u6384\u6387\u638A\u6390\u6394\u6395\u6399\u639A\u639E\u63A4\u63A6\u63AD\u63AE\u63AF\u63BD\u63C1\u63C5\u63C8\u63CE\u63D1\u63D3\u63D4\u63D5\u63DC\u63E0\u63E5\u63EA\u63EC\u63F2\u63F3\u63F5\u63F8\u63F9\u6409\u640A\u6410\u6412\u6414\u6418\u641E\u6420\u6422\u6424\u6425\u6429\u642A\u642F\u6430\u6435\u643D\u643F\u644B\u644F\u6451\u6452\u6453\u6454\u645A\u645B\u645C\u645D\u645F\u6460\u6461\u6463\u646D\u6473\u6474\u647B\u647D\u6485\u6487\u648F\u6490\u6491\u6498\u6499\u649B\u649D\u649F\u64A1\u64A3\u64A6\u64A8\u64AC\u64B3\u64BD\u64BE\u64BF"],
        ["8fc1a1", "\u64C4\u64C9\u64CA\u64CB\u64CC\u64CE\u64D0\u64D1\u64D5\u64D7\u64E4\u64E5\u64E9\u64EA\u64ED\u64F0\u64F5\u64F7\u64FB\u64FF\u6501\u6504\u6508\u6509\u650A\u650F\u6513\u6514\u6516\u6519\u651B\u651E\u651F\u6522\u6526\u6529\u652E\u6531\u653A\u653C\u653D\u6543\u6547\u6549\u6550\u6552\u6554\u655F\u6560\u6567\u656B\u657A\u657D\u6581\u6585\u658A\u6592\u6595\u6598\u659D\u65A0\u65A3\u65A6\u65AE\u65B2\u65B3\u65B4\u65BF\u65C2\u65C8\u65C9\u65CE\u65D0\u65D4\u65D6\u65D8\u65DF\u65F0\u65F2\u65F4\u65F5\u65F9\u65FE\u65FF\u6600\u6604\u6608\u6609\u660D\u6611\u6612\u6615\u6616\u661D"],
        ["8fc2a1", "\u661E\u6621\u6622\u6623\u6624\u6626\u6629\u662A\u662B\u662C\u662E\u6630\u6631\u6633\u6639\u6637\u6640\u6645\u6646\u664A\u664C\u6651\u664E\u6657\u6658\u6659\u665B\u665C\u6660\u6661\u66FB\u666A\u666B\u666C\u667E\u6673\u6675\u667F\u6677\u6678\u6679\u667B\u6680\u667C\u668B\u668C\u668D\u6690\u6692\u6699\u669A\u669B\u669C\u669F\u66A0\u66A4\u66AD\u66B1\u66B2\u66B5\u66BB\u66BF\u66C0\u66C2\u66C3\u66C8\u66CC\u66CE\u66CF\u66D4\u66DB\u66DF\u66E8\u66EB\u66EC\u66EE\u66FA\u6705\u6707\u670E\u6713\u6719\u671C\u6720\u6722\u6733\u673E\u6745\u6747\u6748\u674C\u6754\u6755\u675D"],
        ["8fc3a1", "\u6766\u676C\u676E\u6774\u6776\u677B\u6781\u6784\u678E\u678F\u6791\u6793\u6796\u6798\u6799\u679B\u67B0\u67B1\u67B2\u67B5\u67BB\u67BC\u67BD\u67F9\u67C0\u67C2\u67C3\u67C5\u67C8\u67C9\u67D2\u67D7\u67D9\u67DC\u67E1\u67E6\u67F0\u67F2\u67F6\u67F7\u6852\u6814\u6819\u681D\u681F\u6828\u6827\u682C\u682D\u682F\u6830\u6831\u6833\u683B\u683F\u6844\u6845\u684A\u684C\u6855\u6857\u6858\u685B\u686B\u686E", 4, "\u6875\u6879\u687A\u687B\u687C\u6882\u6884\u6886\u6888\u6896\u6898\u689A\u689C\u68A1\u68A3\u68A5\u68A9\u68AA\u68AE\u68B2\u68BB\u68C5\u68C8\u68CC\u68CF"],
        ["8fc4a1", "\u68D0\u68D1\u68D3\u68D6\u68D9\u68DC\u68DD\u68E5\u68E8\u68EA\u68EB\u68EC\u68ED\u68F0\u68F1\u68F5\u68F6\u68FB\u68FC\u68FD\u6906\u6909\u690A\u6910\u6911\u6913\u6916\u6917\u6931\u6933\u6935\u6938\u693B\u6942\u6945\u6949\u694E\u6957\u695B\u6963\u6964\u6965\u6966\u6968\u6969\u696C\u6970\u6971\u6972\u697A\u697B\u697F\u6980\u698D\u6992\u6996\u6998\u69A1\u69A5\u69A6\u69A8\u69AB\u69AD\u69AF\u69B7\u69B8\u69BA\u69BC\u69C5\u69C8\u69D1\u69D6\u69D7\u69E2\u69E5\u69EE\u69EF\u69F1\u69F3\u69F5\u69FE\u6A00\u6A01\u6A03\u6A0F\u6A11\u6A15\u6A1A\u6A1D\u6A20\u6A24\u6A28\u6A30\u6A32"],
        ["8fc5a1", "\u6A34\u6A37\u6A3B\u6A3E\u6A3F\u6A45\u6A46\u6A49\u6A4A\u6A4E\u6A50\u6A51\u6A52\u6A55\u6A56\u6A5B\u6A64\u6A67\u6A6A\u6A71\u6A73\u6A7E\u6A81\u6A83\u6A86\u6A87\u6A89\u6A8B\u6A91\u6A9B\u6A9D\u6A9E\u6A9F\u6AA5\u6AAB\u6AAF\u6AB0\u6AB1\u6AB4\u6ABD\u6ABE\u6ABF\u6AC6\u6AC9\u6AC8\u6ACC\u6AD0\u6AD4\u6AD5\u6AD6\u6ADC\u6ADD\u6AE4\u6AE7\u6AEC\u6AF0\u6AF1\u6AF2\u6AFC\u6AFD\u6B02\u6B03\u6B06\u6B07\u6B09\u6B0F\u6B10\u6B11\u6B17\u6B1B\u6B1E\u6B24\u6B28\u6B2B\u6B2C\u6B2F\u6B35\u6B36\u6B3B\u6B3F\u6B46\u6B4A\u6B4D\u6B52\u6B56\u6B58\u6B5D\u6B60\u6B67\u6B6B\u6B6E\u6B70\u6B75\u6B7D"],
        ["8fc6a1", "\u6B7E\u6B82\u6B85\u6B97\u6B9B\u6B9F\u6BA0\u6BA2\u6BA3\u6BA8\u6BA9\u6BAC\u6BAD\u6BAE\u6BB0\u6BB8\u6BB9\u6BBD\u6BBE\u6BC3\u6BC4\u6BC9\u6BCC\u6BD6\u6BDA\u6BE1\u6BE3\u6BE6\u6BE7\u6BEE\u6BF1\u6BF7\u6BF9\u6BFF\u6C02\u6C04\u6C05\u6C09\u6C0D\u6C0E\u6C10\u6C12\u6C19\u6C1F\u6C26\u6C27\u6C28\u6C2C\u6C2E\u6C33\u6C35\u6C36\u6C3A\u6C3B\u6C3F\u6C4A\u6C4B\u6C4D\u6C4F\u6C52\u6C54\u6C59\u6C5B\u6C5C\u6C6B\u6C6D\u6C6F\u6C74\u6C76\u6C78\u6C79\u6C7B\u6C85\u6C86\u6C87\u6C89\u6C94\u6C95\u6C97\u6C98\u6C9C\u6C9F\u6CB0\u6CB2\u6CB4\u6CC2\u6CC6\u6CCD\u6CCF\u6CD0\u6CD1\u6CD2\u6CD4\u6CD6"],
        ["8fc7a1", "\u6CDA\u6CDC\u6CE0\u6CE7\u6CE9\u6CEB\u6CEC\u6CEE\u6CF2\u6CF4\u6D04\u6D07\u6D0A\u6D0E\u6D0F\u6D11\u6D13\u6D1A\u6D26\u6D27\u6D28\u6C67\u6D2E\u6D2F\u6D31\u6D39\u6D3C\u6D3F\u6D57\u6D5E\u6D5F\u6D61\u6D65\u6D67\u6D6F\u6D70\u6D7C\u6D82\u6D87\u6D91\u6D92\u6D94\u6D96\u6D97\u6D98\u6DAA\u6DAC\u6DB4\u6DB7\u6DB9\u6DBD\u6DBF\u6DC4\u6DC8\u6DCA\u6DCE\u6DCF\u6DD6\u6DDB\u6DDD\u6DDF\u6DE0\u6DE2\u6DE5\u6DE9\u6DEF\u6DF0\u6DF4\u6DF6\u6DFC\u6E00\u6E04\u6E1E\u6E22\u6E27\u6E32\u6E36\u6E39\u6E3B\u6E3C\u6E44\u6E45\u6E48\u6E49\u6E4B\u6E4F\u6E51\u6E52\u6E53\u6E54\u6E57\u6E5C\u6E5D\u6E5E"],
        ["8fc8a1", "\u6E62\u6E63\u6E68\u6E73\u6E7B\u6E7D\u6E8D\u6E93\u6E99\u6EA0\u6EA7\u6EAD\u6EAE\u6EB1\u6EB3\u6EBB\u6EBF\u6EC0\u6EC1\u6EC3\u6EC7\u6EC8\u6ECA\u6ECD\u6ECE\u6ECF\u6EEB\u6EED\u6EEE\u6EF9\u6EFB\u6EFD\u6F04\u6F08\u6F0A\u6F0C\u6F0D\u6F16\u6F18\u6F1A\u6F1B\u6F26\u6F29\u6F2A\u6F2F\u6F30\u6F33\u6F36\u6F3B\u6F3C\u6F2D\u6F4F\u6F51\u6F52\u6F53\u6F57\u6F59\u6F5A\u6F5D\u6F5E\u6F61\u6F62\u6F68\u6F6C\u6F7D\u6F7E\u6F83\u6F87\u6F88\u6F8B\u6F8C\u6F8D\u6F90\u6F92\u6F93\u6F94\u6F96\u6F9A\u6F9F\u6FA0\u6FA5\u6FA6\u6FA7\u6FA8\u6FAE\u6FAF\u6FB0\u6FB5\u6FB6\u6FBC\u6FC5\u6FC7\u6FC8\u6FCA"],
        ["8fc9a1", "\u6FDA\u6FDE\u6FE8\u6FE9\u6FF0\u6FF5\u6FF9\u6FFC\u6FFD\u7000\u7005\u7006\u7007\u700D\u7017\u7020\u7023\u702F\u7034\u7037\u7039\u703C\u7043\u7044\u7048\u7049\u704A\u704B\u7054\u7055\u705D\u705E\u704E\u7064\u7065\u706C\u706E\u7075\u7076\u707E\u7081\u7085\u7086\u7094", 4, "\u709B\u70A4\u70AB\u70B0\u70B1\u70B4\u70B7\u70CA\u70D1\u70D3\u70D4\u70D5\u70D6\u70D8\u70DC\u70E4\u70FA\u7103", 4, "\u710B\u710C\u710F\u711E\u7120\u712B\u712D\u712F\u7130\u7131\u7138\u7141\u7145\u7146\u7147\u714A\u714B\u7150\u7152\u7157\u715A\u715C\u715E\u7160"],
        ["8fcaa1", "\u7168\u7179\u7180\u7185\u7187\u718C\u7192\u719A\u719B\u71A0\u71A2\u71AF\u71B0\u71B2\u71B3\u71BA\u71BF\u71C0\u71C1\u71C4\u71CB\u71CC\u71D3\u71D6\u71D9\u71DA\u71DC\u71F8\u71FE\u7200\u7207\u7208\u7209\u7213\u7217\u721A\u721D\u721F\u7224\u722B\u722F\u7234\u7238\u7239\u7241\u7242\u7243\u7245\u724E\u724F\u7250\u7253\u7255\u7256\u725A\u725C\u725E\u7260\u7263\u7268\u726B\u726E\u726F\u7271\u7277\u7278\u727B\u727C\u727F\u7284\u7289\u728D\u728E\u7293\u729B\u72A8\u72AD\u72AE\u72B1\u72B4\u72BE\u72C1\u72C7\u72C9\u72CC\u72D5\u72D6\u72D8\u72DF\u72E5\u72F3\u72F4\u72FA\u72FB"],
        ["8fcba1", "\u72FE\u7302\u7304\u7305\u7307\u730B\u730D\u7312\u7313\u7318\u7319\u731E\u7322\u7324\u7327\u7328\u732C\u7331\u7332\u7335\u733A\u733B\u733D\u7343\u734D\u7350\u7352\u7356\u7358\u735D\u735E\u735F\u7360\u7366\u7367\u7369\u736B\u736C\u736E\u736F\u7371\u7377\u7379\u737C\u7380\u7381\u7383\u7385\u7386\u738E\u7390\u7393\u7395\u7397\u7398\u739C\u739E\u739F\u73A0\u73A2\u73A5\u73A6\u73AA\u73AB\u73AD\u73B5\u73B7\u73B9\u73BC\u73BD\u73BF\u73C5\u73C6\u73C9\u73CB\u73CC\u73CF\u73D2\u73D3\u73D6\u73D9\u73DD\u73E1\u73E3\u73E6\u73E7\u73E9\u73F4\u73F5\u73F7\u73F9\u73FA\u73FB\u73FD"],
        ["8fcca1", "\u73FF\u7400\u7401\u7404\u7407\u740A\u7411\u741A\u741B\u7424\u7426\u7428", 9, "\u7439\u7440\u7443\u7444\u7446\u7447\u744B\u744D\u7451\u7452\u7457\u745D\u7462\u7466\u7467\u7468\u746B\u746D\u746E\u7471\u7472\u7480\u7481\u7485\u7486\u7487\u7489\u748F\u7490\u7491\u7492\u7498\u7499\u749A\u749C\u749F\u74A0\u74A1\u74A3\u74A6\u74A8\u74A9\u74AA\u74AB\u74AE\u74AF\u74B1\u74B2\u74B5\u74B9\u74BB\u74BF\u74C8\u74C9\u74CC\u74D0\u74D3\u74D8\u74DA\u74DB\u74DE\u74DF\u74E4\u74E8\u74EA\u74EB\u74EF\u74F4\u74FA\u74FB\u74FC\u74FF\u7506"],
        ["8fcda1", "\u7512\u7516\u7517\u7520\u7521\u7524\u7527\u7529\u752A\u752F\u7536\u7539\u753D\u753E\u753F\u7540\u7543\u7547\u7548\u754E\u7550\u7552\u7557\u755E\u755F\u7561\u756F\u7571\u7579", 5, "\u7581\u7585\u7590\u7592\u7593\u7595\u7599\u759C\u75A2\u75A4\u75B4\u75BA\u75BF\u75C0\u75C1\u75C4\u75C6\u75CC\u75CE\u75CF\u75D7\u75DC\u75DF\u75E0\u75E1\u75E4\u75E7\u75EC\u75EE\u75EF\u75F1\u75F9\u7600\u7602\u7603\u7604\u7607\u7608\u760A\u760C\u760F\u7612\u7613\u7615\u7616\u7619\u761B\u761C\u761D\u761E\u7623\u7625\u7626\u7629\u762D\u7632\u7633\u7635\u7638\u7639"],
        ["8fcea1", "\u763A\u763C\u764A\u7640\u7641\u7643\u7644\u7645\u7649\u764B\u7655\u7659\u765F\u7664\u7665\u766D\u766E\u766F\u7671\u7674\u7681\u7685\u768C\u768D\u7695\u769B\u769C\u769D\u769F\u76A0\u76A2", 6, "\u76AA\u76AD\u76BD\u76C1\u76C5\u76C9\u76CB\u76CC\u76CE\u76D4\u76D9\u76E0\u76E6\u76E8\u76EC\u76F0\u76F1\u76F6\u76F9\u76FC\u7700\u7706\u770A\u770E\u7712\u7714\u7715\u7717\u7719\u771A\u771C\u7722\u7728\u772D\u772E\u772F\u7734\u7735\u7736\u7739\u773D\u773E\u7742\u7745\u7746\u774A\u774D\u774E\u774F\u7752\u7756\u7757\u775C\u775E\u775F\u7760\u7762"],
        ["8fcfa1", "\u7764\u7767\u776A\u776C\u7770\u7772\u7773\u7774\u777A\u777D\u7780\u7784\u778C\u778D\u7794\u7795\u7796\u779A\u779F\u77A2\u77A7\u77AA\u77AE\u77AF\u77B1\u77B5\u77BE\u77C3\u77C9\u77D1\u77D2\u77D5\u77D9\u77DE\u77DF\u77E0\u77E4\u77E6\u77EA\u77EC\u77F0\u77F1\u77F4\u77F8\u77FB\u7805\u7806\u7809\u780D\u780E\u7811\u781D\u7821\u7822\u7823\u782D\u782E\u7830\u7835\u7837\u7843\u7844\u7847\u7848\u784C\u784E\u7852\u785C\u785E\u7860\u7861\u7863\u7864\u7868\u786A\u786E\u787A\u787E\u788A\u788F\u7894\u7898\u78A1\u789D\u789E\u789F\u78A4\u78A8\u78AC\u78AD\u78B0\u78B1\u78B2\u78B3"],
        ["8fd0a1", "\u78BB\u78BD\u78BF\u78C7\u78C8\u78C9\u78CC\u78CE\u78D2\u78D3\u78D5\u78D6\u78E4\u78DB\u78DF\u78E0\u78E1\u78E6\u78EA\u78F2\u78F3\u7900\u78F6\u78F7\u78FA\u78FB\u78FF\u7906\u790C\u7910\u791A\u791C\u791E\u791F\u7920\u7925\u7927\u7929\u792D\u7931\u7934\u7935\u793B\u793D\u793F\u7944\u7945\u7946\u794A\u794B\u794F\u7951\u7954\u7958\u795B\u795C\u7967\u7969\u796B\u7972\u7979\u797B\u797C\u797E\u798B\u798C\u7991\u7993\u7994\u7995\u7996\u7998\u799B\u799C\u79A1\u79A8\u79A9\u79AB\u79AF\u79B1\u79B4\u79B8\u79BB\u79C2\u79C4\u79C7\u79C8\u79CA\u79CF\u79D4\u79D6\u79DA\u79DD\u79DE"],
        ["8fd1a1", "\u79E0\u79E2\u79E5\u79EA\u79EB\u79ED\u79F1\u79F8\u79FC\u7A02\u7A03\u7A07\u7A09\u7A0A\u7A0C\u7A11\u7A15\u7A1B\u7A1E\u7A21\u7A27\u7A2B\u7A2D\u7A2F\u7A30\u7A34\u7A35\u7A38\u7A39\u7A3A\u7A44\u7A45\u7A47\u7A48\u7A4C\u7A55\u7A56\u7A59\u7A5C\u7A5D\u7A5F\u7A60\u7A65\u7A67\u7A6A\u7A6D\u7A75\u7A78\u7A7E\u7A80\u7A82\u7A85\u7A86\u7A8A\u7A8B\u7A90\u7A91\u7A94\u7A9E\u7AA0\u7AA3\u7AAC\u7AB3\u7AB5\u7AB9\u7ABB\u7ABC\u7AC6\u7AC9\u7ACC\u7ACE\u7AD1\u7ADB\u7AE8\u7AE9\u7AEB\u7AEC\u7AF1\u7AF4\u7AFB\u7AFD\u7AFE\u7B07\u7B14\u7B1F\u7B23\u7B27\u7B29\u7B2A\u7B2B\u7B2D\u7B2E\u7B2F\u7B30"],
        ["8fd2a1", "\u7B31\u7B34\u7B3D\u7B3F\u7B40\u7B41\u7B47\u7B4E\u7B55\u7B60\u7B64\u7B66\u7B69\u7B6A\u7B6D\u7B6F\u7B72\u7B73\u7B77\u7B84\u7B89\u7B8E\u7B90\u7B91\u7B96\u7B9B\u7B9E\u7BA0\u7BA5\u7BAC\u7BAF\u7BB0\u7BB2\u7BB5\u7BB6\u7BBA\u7BBB\u7BBC\u7BBD\u7BC2\u7BC5\u7BC8\u7BCA\u7BD4\u7BD6\u7BD7\u7BD9\u7BDA\u7BDB\u7BE8\u7BEA\u7BF2\u7BF4\u7BF5\u7BF8\u7BF9\u7BFA\u7BFC\u7BFE\u7C01\u7C02\u7C03\u7C04\u7C06\u7C09\u7C0B\u7C0C\u7C0E\u7C0F\u7C19\u7C1B\u7C20\u7C25\u7C26\u7C28\u7C2C\u7C31\u7C33\u7C34\u7C36\u7C39\u7C3A\u7C46\u7C4A\u7C55\u7C51\u7C52\u7C53\u7C59", 5],
        ["8fd3a1", "\u7C61\u7C63\u7C67\u7C69\u7C6D\u7C6E\u7C70\u7C72\u7C79\u7C7C\u7C7D\u7C86\u7C87\u7C8F\u7C94\u7C9E\u7CA0\u7CA6\u7CB0\u7CB6\u7CB7\u7CBA\u7CBB\u7CBC\u7CBF\u7CC4\u7CC7\u7CC8\u7CC9\u7CCD\u7CCF\u7CD3\u7CD4\u7CD5\u7CD7\u7CD9\u7CDA\u7CDD\u7CE6\u7CE9\u7CEB\u7CF5\u7D03\u7D07\u7D08\u7D09\u7D0F\u7D11\u7D12\u7D13\u7D16\u7D1D\u7D1E\u7D23\u7D26\u7D2A\u7D2D\u7D31\u7D3C\u7D3D\u7D3E\u7D40\u7D41\u7D47\u7D48\u7D4D\u7D51\u7D53\u7D57\u7D59\u7D5A\u7D5C\u7D5D\u7D65\u7D67\u7D6A\u7D70\u7D78\u7D7A\u7D7B\u7D7F\u7D81\u7D82\u7D83\u7D85\u7D86\u7D88\u7D8B\u7D8C\u7D8D\u7D91\u7D96\u7D97\u7D9D"],
        ["8fd4a1", "\u7D9E\u7DA6\u7DA7\u7DAA\u7DB3\u7DB6\u7DB7\u7DB9\u7DC2", 4, "\u7DCC\u7DCD\u7DCE\u7DD7\u7DD9\u7E00\u7DE2\u7DE5\u7DE6\u7DEA\u7DEB\u7DED\u7DF1\u7DF5\u7DF6\u7DF9\u7DFA\u7E08\u7E10\u7E11\u7E15\u7E17\u7E1C\u7E1D\u7E20\u7E27\u7E28\u7E2C\u7E2D\u7E2F\u7E33\u7E36\u7E3F\u7E44\u7E45\u7E47\u7E4E\u7E50\u7E52\u7E58\u7E5F\u7E61\u7E62\u7E65\u7E6B\u7E6E\u7E6F\u7E73\u7E78\u7E7E\u7E81\u7E86\u7E87\u7E8A\u7E8D\u7E91\u7E95\u7E98\u7E9A\u7E9D\u7E9E\u7F3C\u7F3B\u7F3D\u7F3E\u7F3F\u7F43\u7F44\u7F47\u7F4F\u7F52\u7F53\u7F5B\u7F5C\u7F5D\u7F61\u7F63\u7F64\u7F65\u7F66\u7F6D"],
        ["8fd5a1", "\u7F71\u7F7D\u7F7E\u7F7F\u7F80\u7F8B\u7F8D\u7F8F\u7F90\u7F91\u7F96\u7F97\u7F9C\u7FA1\u7FA2\u7FA6\u7FAA\u7FAD\u7FB4\u7FBC\u7FBF\u7FC0\u7FC3\u7FC8\u7FCE\u7FCF\u7FDB\u7FDF\u7FE3\u7FE5\u7FE8\u7FEC\u7FEE\u7FEF\u7FF2\u7FFA\u7FFD\u7FFE\u7FFF\u8007\u8008\u800A\u800D\u800E\u800F\u8011\u8013\u8014\u8016\u801D\u801E\u801F\u8020\u8024\u8026\u802C\u802E\u8030\u8034\u8035\u8037\u8039\u803A\u803C\u803E\u8040\u8044\u8060\u8064\u8066\u806D\u8071\u8075\u8081\u8088\u808E\u809C\u809E\u80A6\u80A7\u80AB\u80B8\u80B9\u80C8\u80CD\u80CF\u80D2\u80D4\u80D5\u80D7\u80D8\u80E0\u80ED\u80EE"],
        ["8fd6a1", "\u80F0\u80F2\u80F3\u80F6\u80F9\u80FA\u80FE\u8103\u810B\u8116\u8117\u8118\u811C\u811E\u8120\u8124\u8127\u812C\u8130\u8135\u813A\u813C\u8145\u8147\u814A\u814C\u8152\u8157\u8160\u8161\u8167\u8168\u8169\u816D\u816F\u8177\u8181\u8190\u8184\u8185\u8186\u818B\u818E\u8196\u8198\u819B\u819E\u81A2\u81AE\u81B2\u81B4\u81BB\u81CB\u81C3\u81C5\u81CA\u81CE\u81CF\u81D5\u81D7\u81DB\u81DD\u81DE\u81E1\u81E4\u81EB\u81EC\u81F0\u81F1\u81F2\u81F5\u81F6\u81F8\u81F9\u81FD\u81FF\u8200\u8203\u820F\u8213\u8214\u8219\u821A\u821D\u8221\u8222\u8228\u8232\u8234\u823A\u8243\u8244\u8245\u8246"],
        ["8fd7a1", "\u824B\u824E\u824F\u8251\u8256\u825C\u8260\u8263\u8267\u826D\u8274\u827B\u827D\u827F\u8280\u8281\u8283\u8284\u8287\u8289\u828A\u828E\u8291\u8294\u8296\u8298\u829A\u829B\u82A0\u82A1\u82A3\u82A4\u82A7\u82A8\u82A9\u82AA\u82AE\u82B0\u82B2\u82B4\u82B7\u82BA\u82BC\u82BE\u82BF\u82C6\u82D0\u82D5\u82DA\u82E0\u82E2\u82E4\u82E8\u82EA\u82ED\u82EF\u82F6\u82F7\u82FD\u82FE\u8300\u8301\u8307\u8308\u830A\u830B\u8354\u831B\u831D\u831E\u831F\u8321\u8322\u832C\u832D\u832E\u8330\u8333\u8337\u833A\u833C\u833D\u8342\u8343\u8344\u8347\u834D\u834E\u8351\u8355\u8356\u8357\u8370\u8378"],
        ["8fd8a1", "\u837D\u837F\u8380\u8382\u8384\u8386\u838D\u8392\u8394\u8395\u8398\u8399\u839B\u839C\u839D\u83A6\u83A7\u83A9\u83AC\u83BE\u83BF\u83C0\u83C7\u83C9\u83CF\u83D0\u83D1\u83D4\u83DD\u8353\u83E8\u83EA\u83F6\u83F8\u83F9\u83FC\u8401\u8406\u840A\u840F\u8411\u8415\u8419\u83AD\u842F\u8439\u8445\u8447\u8448\u844A\u844D\u844F\u8451\u8452\u8456\u8458\u8459\u845A\u845C\u8460\u8464\u8465\u8467\u846A\u8470\u8473\u8474\u8476\u8478\u847C\u847D\u8481\u8485\u8492\u8493\u8495\u849E\u84A6\u84A8\u84A9\u84AA\u84AF\u84B1\u84B4\u84BA\u84BD\u84BE\u84C0\u84C2\u84C7\u84C8\u84CC\u84CF\u84D3"],
        ["8fd9a1", "\u84DC\u84E7\u84EA\u84EF\u84F0\u84F1\u84F2\u84F7\u8532\u84FA\u84FB\u84FD\u8502\u8503\u8507\u850C\u850E\u8510\u851C\u851E\u8522\u8523\u8524\u8525\u8527\u852A\u852B\u852F\u8533\u8534\u8536\u853F\u8546\u854F", 4, "\u8556\u8559\u855C", 6, "\u8564\u856B\u856F\u8579\u857A\u857B\u857D\u857F\u8581\u8585\u8586\u8589\u858B\u858C\u858F\u8593\u8598\u859D\u859F\u85A0\u85A2\u85A5\u85A7\u85B4\u85B6\u85B7\u85B8\u85BC\u85BD\u85BE\u85BF\u85C2\u85C7\u85CA\u85CB\u85CE\u85AD\u85D8\u85DA\u85DF\u85E0\u85E6\u85E8\u85ED\u85F3\u85F6\u85FC"],
        ["8fdaa1", "\u85FF\u8600\u8604\u8605\u860D\u860E\u8610\u8611\u8612\u8618\u8619\u861B\u861E\u8621\u8627\u8629\u8636\u8638\u863A\u863C\u863D\u8640\u8642\u8646\u8652\u8653\u8656\u8657\u8658\u8659\u865D\u8660", 4, "\u8669\u866C\u866F\u8675\u8676\u8677\u867A\u868D\u8691\u8696\u8698\u869A\u869C\u86A1\u86A6\u86A7\u86A8\u86AD\u86B1\u86B3\u86B4\u86B5\u86B7\u86B8\u86B9\u86BF\u86C0\u86C1\u86C3\u86C5\u86D1\u86D2\u86D5\u86D7\u86DA\u86DC\u86E0\u86E3\u86E5\u86E7\u8688\u86FA\u86FC\u86FD\u8704\u8705\u8707\u870B\u870E\u870F\u8710\u8713\u8714\u8719\u871E\u871F\u8721\u8723"],
        ["8fdba1", "\u8728\u872E\u872F\u8731\u8732\u8739\u873A\u873C\u873D\u873E\u8740\u8743\u8745\u874D\u8758\u875D\u8761\u8764\u8765\u876F\u8771\u8772\u877B\u8783", 6, "\u878B\u878C\u8790\u8793\u8795\u8797\u8798\u8799\u879E\u87A0\u87A3\u87A7\u87AC\u87AD\u87AE\u87B1\u87B5\u87BE\u87BF\u87C1\u87C8\u87C9\u87CA\u87CE\u87D5\u87D6\u87D9\u87DA\u87DC\u87DF\u87E2\u87E3\u87E4\u87EA\u87EB\u87ED\u87F1\u87F3\u87F8\u87FA\u87FF\u8801\u8803\u8806\u8809\u880A\u880B\u8810\u8819\u8812\u8813\u8814\u8818\u881A\u881B\u881C\u881E\u881F\u8828\u882D\u882E\u8830\u8832\u8835"],
        ["8fdca1", "\u883A\u883C\u8841\u8843\u8845\u8848\u8849\u884A\u884B\u884E\u8851\u8855\u8856\u8858\u885A\u885C\u885F\u8860\u8864\u8869\u8871\u8879\u887B\u8880\u8898\u889A\u889B\u889C\u889F\u88A0\u88A8\u88AA\u88BA\u88BD\u88BE\u88C0\u88CA", 4, "\u88D1\u88D2\u88D3\u88DB\u88DE\u88E7\u88EF\u88F0\u88F1\u88F5\u88F7\u8901\u8906\u890D\u890E\u890F\u8915\u8916\u8918\u8919\u891A\u891C\u8920\u8926\u8927\u8928\u8930\u8931\u8932\u8935\u8939\u893A\u893E\u8940\u8942\u8945\u8946\u8949\u894F\u8952\u8957\u895A\u895B\u895C\u8961\u8962\u8963\u896B\u896E\u8970\u8973\u8975\u897A"],
        ["8fdda1", "\u897B\u897C\u897D\u8989\u898D\u8990\u8994\u8995\u899B\u899C\u899F\u89A0\u89A5\u89B0\u89B4\u89B5\u89B6\u89B7\u89BC\u89D4", 4, "\u89E5\u89E9\u89EB\u89ED\u89F1\u89F3\u89F6\u89F9\u89FD\u89FF\u8A04\u8A05\u8A07\u8A0F\u8A11\u8A12\u8A14\u8A15\u8A1E\u8A20\u8A22\u8A24\u8A26\u8A2B\u8A2C\u8A2F\u8A35\u8A37\u8A3D\u8A3E\u8A40\u8A43\u8A45\u8A47\u8A49\u8A4D\u8A4E\u8A53\u8A56\u8A57\u8A58\u8A5C\u8A5D\u8A61\u8A65\u8A67\u8A75\u8A76\u8A77\u8A79\u8A7A\u8A7B\u8A7E\u8A7F\u8A80\u8A83\u8A86\u8A8B\u8A8F\u8A90\u8A92\u8A96\u8A97\u8A99\u8A9F\u8AA7\u8AA9\u8AAE\u8AAF\u8AB3"],
        ["8fdea1", "\u8AB6\u8AB7\u8ABB\u8ABE\u8AC3\u8AC6\u8AC8\u8AC9\u8ACA\u8AD1\u8AD3\u8AD4\u8AD5\u8AD7\u8ADD\u8ADF\u8AEC\u8AF0\u8AF4\u8AF5\u8AF6\u8AFC\u8AFF\u8B05\u8B06\u8B0B\u8B11\u8B1C\u8B1E\u8B1F\u8B0A\u8B2D\u8B30\u8B37\u8B3C\u8B42", 4, "\u8B48\u8B52\u8B53\u8B54\u8B59\u8B4D\u8B5E\u8B63\u8B6D\u8B76\u8B78\u8B79\u8B7C\u8B7E\u8B81\u8B84\u8B85\u8B8B\u8B8D\u8B8F\u8B94\u8B95\u8B9C\u8B9E\u8B9F\u8C38\u8C39\u8C3D\u8C3E\u8C45\u8C47\u8C49\u8C4B\u8C4F\u8C51\u8C53\u8C54\u8C57\u8C58\u8C5B\u8C5D\u8C59\u8C63\u8C64\u8C66\u8C68\u8C69\u8C6D\u8C73\u8C75\u8C76\u8C7B\u8C7E\u8C86"],
        ["8fdfa1", "\u8C87\u8C8B\u8C90\u8C92\u8C93\u8C99\u8C9B\u8C9C\u8CA4\u8CB9\u8CBA\u8CC5\u8CC6\u8CC9\u8CCB\u8CCF\u8CD6\u8CD5\u8CD9\u8CDD\u8CE1\u8CE8\u8CEC\u8CEF\u8CF0\u8CF2\u8CF5\u8CF7\u8CF8\u8CFE\u8CFF\u8D01\u8D03\u8D09\u8D12\u8D17\u8D1B\u8D65\u8D69\u8D6C\u8D6E\u8D7F\u8D82\u8D84\u8D88\u8D8D\u8D90\u8D91\u8D95\u8D9E\u8D9F\u8DA0\u8DA6\u8DAB\u8DAC\u8DAF\u8DB2\u8DB5\u8DB7\u8DB9\u8DBB\u8DC0\u8DC5\u8DC6\u8DC7\u8DC8\u8DCA\u8DCE\u8DD1\u8DD4\u8DD5\u8DD7\u8DD9\u8DE4\u8DE5\u8DE7\u8DEC\u8DF0\u8DBC\u8DF1\u8DF2\u8DF4\u8DFD\u8E01\u8E04\u8E05\u8E06\u8E0B\u8E11\u8E14\u8E16\u8E20\u8E21\u8E22"],
        ["8fe0a1", "\u8E23\u8E26\u8E27\u8E31\u8E33\u8E36\u8E37\u8E38\u8E39\u8E3D\u8E40\u8E41\u8E4B\u8E4D\u8E4E\u8E4F\u8E54\u8E5B\u8E5C\u8E5D\u8E5E\u8E61\u8E62\u8E69\u8E6C\u8E6D\u8E6F\u8E70\u8E71\u8E79\u8E7A\u8E7B\u8E82\u8E83\u8E89\u8E90\u8E92\u8E95\u8E9A\u8E9B\u8E9D\u8E9E\u8EA2\u8EA7\u8EA9\u8EAD\u8EAE\u8EB3\u8EB5\u8EBA\u8EBB\u8EC0\u8EC1\u8EC3\u8EC4\u8EC7\u8ECF\u8ED1\u8ED4\u8EDC\u8EE8\u8EEE\u8EF0\u8EF1\u8EF7\u8EF9\u8EFA\u8EED\u8F00\u8F02\u8F07\u8F08\u8F0F\u8F10\u8F16\u8F17\u8F18\u8F1E\u8F20\u8F21\u8F23\u8F25\u8F27\u8F28\u8F2C\u8F2D\u8F2E\u8F34\u8F35\u8F36\u8F37\u8F3A\u8F40\u8F41"],
        ["8fe1a1", "\u8F43\u8F47\u8F4F\u8F51", 4, "\u8F58\u8F5D\u8F5E\u8F65\u8F9D\u8FA0\u8FA1\u8FA4\u8FA5\u8FA6\u8FB5\u8FB6\u8FB8\u8FBE\u8FC0\u8FC1\u8FC6\u8FCA\u8FCB\u8FCD\u8FD0\u8FD2\u8FD3\u8FD5\u8FE0\u8FE3\u8FE4\u8FE8\u8FEE\u8FF1\u8FF5\u8FF6\u8FFB\u8FFE\u9002\u9004\u9008\u900C\u9018\u901B\u9028\u9029\u902F\u902A\u902C\u902D\u9033\u9034\u9037\u903F\u9043\u9044\u904C\u905B\u905D\u9062\u9066\u9067\u906C\u9070\u9074\u9079\u9085\u9088\u908B\u908C\u908E\u9090\u9095\u9097\u9098\u9099\u909B\u90A0\u90A1\u90A2\u90A5\u90B0\u90B2\u90B3\u90B4\u90B6\u90BD\u90CC\u90BE\u90C3"],
        ["8fe2a1", "\u90C4\u90C5\u90C7\u90C8\u90D5\u90D7\u90D8\u90D9\u90DC\u90DD\u90DF\u90E5\u90D2\u90F6\u90EB\u90EF\u90F0\u90F4\u90FE\u90FF\u9100\u9104\u9105\u9106\u9108\u910D\u9110\u9114\u9116\u9117\u9118\u911A\u911C\u911E\u9120\u9125\u9122\u9123\u9127\u9129\u912E\u912F\u9131\u9134\u9136\u9137\u9139\u913A\u913C\u913D\u9143\u9147\u9148\u914F\u9153\u9157\u9159\u915A\u915B\u9161\u9164\u9167\u916D\u9174\u9179\u917A\u917B\u9181\u9183\u9185\u9186\u918A\u918E\u9191\u9193\u9194\u9195\u9198\u919E\u91A1\u91A6\u91A8\u91AC\u91AD\u91AE\u91B0\u91B1\u91B2\u91B3\u91B6\u91BB\u91BC\u91BD\u91BF"],
        ["8fe3a1", "\u91C2\u91C3\u91C5\u91D3\u91D4\u91D7\u91D9\u91DA\u91DE\u91E4\u91E5\u91E9\u91EA\u91EC", 5, "\u91F7\u91F9\u91FB\u91FD\u9200\u9201\u9204\u9205\u9206\u9207\u9209\u920A\u920C\u9210\u9212\u9213\u9216\u9218\u921C\u921D\u9223\u9224\u9225\u9226\u9228\u922E\u922F\u9230\u9233\u9235\u9236\u9238\u9239\u923A\u923C\u923E\u9240\u9242\u9243\u9246\u9247\u924A\u924D\u924E\u924F\u9251\u9258\u9259\u925C\u925D\u9260\u9261\u9265\u9267\u9268\u9269\u926E\u926F\u9270\u9275", 4, "\u927B\u927C\u927D\u927F\u9288\u9289\u928A\u928D\u928E\u9292\u9297"],
        ["8fe4a1", "\u9299\u929F\u92A0\u92A4\u92A5\u92A7\u92A8\u92AB\u92AF\u92B2\u92B6\u92B8\u92BA\u92BB\u92BC\u92BD\u92BF", 4, "\u92C5\u92C6\u92C7\u92C8\u92CB\u92CC\u92CD\u92CE\u92D0\u92D3\u92D5\u92D7\u92D8\u92D9\u92DC\u92DD\u92DF\u92E0\u92E1\u92E3\u92E5\u92E7\u92E8\u92EC\u92EE\u92F0\u92F9\u92FB\u92FF\u9300\u9302\u9308\u930D\u9311\u9314\u9315\u931C\u931D\u931E\u931F\u9321\u9324\u9325\u9327\u9329\u932A\u9333\u9334\u9336\u9337\u9347\u9348\u9349\u9350\u9351\u9352\u9355\u9357\u9358\u935A\u935E\u9364\u9365\u9367\u9369\u936A\u936D\u936F\u9370\u9371\u9373\u9374\u9376"],
        ["8fe5a1", "\u937A\u937D\u937F\u9380\u9381\u9382\u9388\u938A\u938B\u938D\u938F\u9392\u9395\u9398\u939B\u939E\u93A1\u93A3\u93A4\u93A6\u93A8\u93AB\u93B4\u93B5\u93B6\u93BA\u93A9\u93C1\u93C4\u93C5\u93C6\u93C7\u93C9", 4, "\u93D3\u93D9\u93DC\u93DE\u93DF\u93E2\u93E6\u93E7\u93F9\u93F7\u93F8\u93FA\u93FB\u93FD\u9401\u9402\u9404\u9408\u9409\u940D\u940E\u940F\u9415\u9416\u9417\u941F\u942E\u942F\u9431\u9432\u9433\u9434\u943B\u943F\u943D\u9443\u9445\u9448\u944A\u944C\u9455\u9459\u945C\u945F\u9461\u9463\u9468\u946B\u946D\u946E\u946F\u9471\u9472\u9484\u9483\u9578\u9579"],
        ["8fe6a1", "\u957E\u9584\u9588\u958C\u958D\u958E\u959D\u959E\u959F\u95A1\u95A6\u95A9\u95AB\u95AC\u95B4\u95B6\u95BA\u95BD\u95BF\u95C6\u95C8\u95C9\u95CB\u95D0\u95D1\u95D2\u95D3\u95D9\u95DA\u95DD\u95DE\u95DF\u95E0\u95E4\u95E6\u961D\u961E\u9622\u9624\u9625\u9626\u962C\u9631\u9633\u9637\u9638\u9639\u963A\u963C\u963D\u9641\u9652\u9654\u9656\u9657\u9658\u9661\u966E\u9674\u967B\u967C\u967E\u967F\u9681\u9682\u9683\u9684\u9689\u9691\u9696\u969A\u969D\u969F\u96A4\u96A5\u96A6\u96A9\u96AE\u96AF\u96B3\u96BA\u96CA\u96D2\u5DB2\u96D8\u96DA\u96DD\u96DE\u96DF\u96E9\u96EF\u96F1\u96FA\u9702"],
        ["8fe7a1", "\u9703\u9705\u9709\u971A\u971B\u971D\u9721\u9722\u9723\u9728\u9731\u9733\u9741\u9743\u974A\u974E\u974F\u9755\u9757\u9758\u975A\u975B\u9763\u9767\u976A\u976E\u9773\u9776\u9777\u9778\u977B\u977D\u977F\u9780\u9789\u9795\u9796\u9797\u9799\u979A\u979E\u979F\u97A2\u97AC\u97AE\u97B1\u97B2\u97B5\u97B6\u97B8\u97B9\u97BA\u97BC\u97BE\u97BF\u97C1\u97C4\u97C5\u97C7\u97C9\u97CA\u97CC\u97CD\u97CE\u97D0\u97D1\u97D4\u97D7\u97D8\u97D9\u97DD\u97DE\u97E0\u97DB\u97E1\u97E4\u97EF\u97F1\u97F4\u97F7\u97F8\u97FA\u9807\u980A\u9819\u980D\u980E\u9814\u9816\u981C\u981E\u9820\u9823\u9826"],
        ["8fe8a1", "\u982B\u982E\u982F\u9830\u9832\u9833\u9835\u9825\u983E\u9844\u9847\u984A\u9851\u9852\u9853\u9856\u9857\u9859\u985A\u9862\u9863\u9865\u9866\u986A\u986C\u98AB\u98AD\u98AE\u98B0\u98B4\u98B7\u98B8\u98BA\u98BB\u98BF\u98C2\u98C5\u98C8\u98CC\u98E1\u98E3\u98E5\u98E6\u98E7\u98EA\u98F3\u98F6\u9902\u9907\u9908\u9911\u9915\u9916\u9917\u991A\u991B\u991C\u991F\u9922\u9926\u9927\u992B\u9931", 4, "\u9939\u993A\u993B\u993C\u9940\u9941\u9946\u9947\u9948\u994D\u994E\u9954\u9958\u9959\u995B\u995C\u995E\u995F\u9960\u999B\u999D\u999F\u99A6\u99B0\u99B1\u99B2\u99B5"],
        ["8fe9a1", "\u99B9\u99BA\u99BD\u99BF\u99C3\u99C9\u99D3\u99D4\u99D9\u99DA\u99DC\u99DE\u99E7\u99EA\u99EB\u99EC\u99F0\u99F4\u99F5\u99F9\u99FD\u99FE\u9A02\u9A03\u9A04\u9A0B\u9A0C\u9A10\u9A11\u9A16\u9A1E\u9A20\u9A22\u9A23\u9A24\u9A27\u9A2D\u9A2E\u9A33\u9A35\u9A36\u9A38\u9A47\u9A41\u9A44\u9A4A\u9A4B\u9A4C\u9A4E\u9A51\u9A54\u9A56\u9A5D\u9AAA\u9AAC\u9AAE\u9AAF\u9AB2\u9AB4\u9AB5\u9AB6\u9AB9\u9ABB\u9ABE\u9ABF\u9AC1\u9AC3\u9AC6\u9AC8\u9ACE\u9AD0\u9AD2\u9AD5\u9AD6\u9AD7\u9ADB\u9ADC\u9AE0\u9AE4\u9AE5\u9AE7\u9AE9\u9AEC\u9AF2\u9AF3\u9AF5\u9AF9\u9AFA\u9AFD\u9AFF", 4],
        ["8feaa1", "\u9B04\u9B05\u9B08\u9B09\u9B0B\u9B0C\u9B0D\u9B0E\u9B10\u9B12\u9B16\u9B19\u9B1B\u9B1C\u9B20\u9B26\u9B2B\u9B2D\u9B33\u9B34\u9B35\u9B37\u9B39\u9B3A\u9B3D\u9B48\u9B4B\u9B4C\u9B55\u9B56\u9B57\u9B5B\u9B5E\u9B61\u9B63\u9B65\u9B66\u9B68\u9B6A", 4, "\u9B73\u9B75\u9B77\u9B78\u9B79\u9B7F\u9B80\u9B84\u9B85\u9B86\u9B87\u9B89\u9B8A\u9B8B\u9B8D\u9B8F\u9B90\u9B94\u9B9A\u9B9D\u9B9E\u9BA6\u9BA7\u9BA9\u9BAC\u9BB0\u9BB1\u9BB2\u9BB7\u9BB8\u9BBB\u9BBC\u9BBE\u9BBF\u9BC1\u9BC7\u9BC8\u9BCE\u9BD0\u9BD7\u9BD8\u9BDD\u9BDF\u9BE5\u9BE7\u9BEA\u9BEB\u9BEF\u9BF3\u9BF7\u9BF8"],
        ["8feba1", "\u9BF9\u9BFA\u9BFD\u9BFF\u9C00\u9C02\u9C0B\u9C0F\u9C11\u9C16\u9C18\u9C19\u9C1A\u9C1C\u9C1E\u9C22\u9C23\u9C26", 4, "\u9C31\u9C35\u9C36\u9C37\u9C3D\u9C41\u9C43\u9C44\u9C45\u9C49\u9C4A\u9C4E\u9C4F\u9C50\u9C53\u9C54\u9C56\u9C58\u9C5B\u9C5D\u9C5E\u9C5F\u9C63\u9C69\u9C6A\u9C5C\u9C6B\u9C68\u9C6E\u9C70\u9C72\u9C75\u9C77\u9C7B\u9CE6\u9CF2\u9CF7\u9CF9\u9D0B\u9D02\u9D11\u9D17\u9D18\u9D1C\u9D1D\u9D1E\u9D2F\u9D30\u9D32\u9D33\u9D34\u9D3A\u9D3C\u9D45\u9D3D\u9D42\u9D43\u9D47\u9D4A\u9D53\u9D54\u9D5F\u9D63\u9D62\u9D65\u9D69\u9D6A\u9D6B\u9D70\u9D76\u9D77\u9D7B"],
        ["8feca1", "\u9D7C\u9D7E\u9D83\u9D84\u9D86\u9D8A\u9D8D\u9D8E\u9D92\u9D93\u9D95\u9D96\u9D97\u9D98\u9DA1\u9DAA\u9DAC\u9DAE\u9DB1\u9DB5\u9DB9\u9DBC\u9DBF\u9DC3\u9DC7\u9DC9\u9DCA\u9DD4\u9DD5\u9DD6\u9DD7\u9DDA\u9DDE\u9DDF\u9DE0\u9DE5\u9DE7\u9DE9\u9DEB\u9DEE\u9DF0\u9DF3\u9DF4\u9DFE\u9E0A\u9E02\u9E07\u9E0E\u9E10\u9E11\u9E12\u9E15\u9E16\u9E19\u9E1C\u9E1D\u9E7A\u9E7B\u9E7C\u9E80\u9E82\u9E83\u9E84\u9E85\u9E87\u9E8E\u9E8F\u9E96\u9E98\u9E9B\u9E9E\u9EA4\u9EA8\u9EAC\u9EAE\u9EAF\u9EB0\u9EB3\u9EB4\u9EB5\u9EC6\u9EC8\u9ECB\u9ED5\u9EDF\u9EE4\u9EE7\u9EEC\u9EED\u9EEE\u9EF0\u9EF1\u9EF2\u9EF5"],
        ["8feda1", "\u9EF8\u9EFF\u9F02\u9F03\u9F09\u9F0F\u9F10\u9F11\u9F12\u9F14\u9F16\u9F17\u9F19\u9F1A\u9F1B\u9F1F\u9F22\u9F26\u9F2A\u9F2B\u9F2F\u9F31\u9F32\u9F34\u9F37\u9F39\u9F3A\u9F3C\u9F3D\u9F3F\u9F41\u9F43", 4, "\u9F53\u9F55\u9F56\u9F57\u9F58\u9F5A\u9F5D\u9F5E\u9F68\u9F69\u9F6D", 4, "\u9F73\u9F75\u9F7A\u9F7D\u9F8F\u9F90\u9F91\u9F92\u9F94\u9F96\u9F97\u9F9E\u9FA1\u9FA2\u9FA3\u9FA5"]
      ];
    }
  });

  // ../modules/cmd/node_modules/iconv-lite/encodings/tables/cp936.json
  var require_cp936 = __commonJS({
    "../modules/cmd/node_modules/iconv-lite/encodings/tables/cp936.json"(exports, module) {
      module.exports = [
        ["0", "\0", 127, "\u20AC"],
        ["8140", "\u4E02\u4E04\u4E05\u4E06\u4E0F\u4E12\u4E17\u4E1F\u4E20\u4E21\u4E23\u4E26\u4E29\u4E2E\u4E2F\u4E31\u4E33\u4E35\u4E37\u4E3C\u4E40\u4E41\u4E42\u4E44\u4E46\u4E4A\u4E51\u4E55\u4E57\u4E5A\u4E5B\u4E62\u4E63\u4E64\u4E65\u4E67\u4E68\u4E6A", 5, "\u4E72\u4E74", 9, "\u4E7F", 6, "\u4E87\u4E8A"],
        ["8180", "\u4E90\u4E96\u4E97\u4E99\u4E9C\u4E9D\u4E9E\u4EA3\u4EAA\u4EAF\u4EB0\u4EB1\u4EB4\u4EB6\u4EB7\u4EB8\u4EB9\u4EBC\u4EBD\u4EBE\u4EC8\u4ECC\u4ECF\u4ED0\u4ED2\u4EDA\u4EDB\u4EDC\u4EE0\u4EE2\u4EE6\u4EE7\u4EE9\u4EED\u4EEE\u4EEF\u4EF1\u4EF4\u4EF8\u4EF9\u4EFA\u4EFC\u4EFE\u4F00\u4F02", 6, "\u4F0B\u4F0C\u4F12", 4, "\u4F1C\u4F1D\u4F21\u4F23\u4F28\u4F29\u4F2C\u4F2D\u4F2E\u4F31\u4F33\u4F35\u4F37\u4F39\u4F3B\u4F3E", 4, "\u4F44\u4F45\u4F47", 5, "\u4F52\u4F54\u4F56\u4F61\u4F62\u4F66\u4F68\u4F6A\u4F6B\u4F6D\u4F6E\u4F71\u4F72\u4F75\u4F77\u4F78\u4F79\u4F7A\u4F7D\u4F80\u4F81\u4F82\u4F85\u4F86\u4F87\u4F8A\u4F8C\u4F8E\u4F90\u4F92\u4F93\u4F95\u4F96\u4F98\u4F99\u4F9A\u4F9C\u4F9E\u4F9F\u4FA1\u4FA2"],
        ["8240", "\u4FA4\u4FAB\u4FAD\u4FB0", 4, "\u4FB6", 8, "\u4FC0\u4FC1\u4FC2\u4FC6\u4FC7\u4FC8\u4FC9\u4FCB\u4FCC\u4FCD\u4FD2", 4, "\u4FD9\u4FDB\u4FE0\u4FE2\u4FE4\u4FE5\u4FE7\u4FEB\u4FEC\u4FF0\u4FF2\u4FF4\u4FF5\u4FF6\u4FF7\u4FF9\u4FFB\u4FFC\u4FFD\u4FFF", 11],
        ["8280", "\u500B\u500E\u5010\u5011\u5013\u5015\u5016\u5017\u501B\u501D\u501E\u5020\u5022\u5023\u5024\u5027\u502B\u502F", 10, "\u503B\u503D\u503F\u5040\u5041\u5042\u5044\u5045\u5046\u5049\u504A\u504B\u504D\u5050", 4, "\u5056\u5057\u5058\u5059\u505B\u505D", 7, "\u5066", 5, "\u506D", 8, "\u5078\u5079\u507A\u507C\u507D\u5081\u5082\u5083\u5084\u5086\u5087\u5089\u508A\u508B\u508C\u508E", 20, "\u50A4\u50A6\u50AA\u50AB\u50AD", 4, "\u50B3", 6, "\u50BC"],
        ["8340", "\u50BD", 17, "\u50D0", 5, "\u50D7\u50D8\u50D9\u50DB", 10, "\u50E8\u50E9\u50EA\u50EB\u50EF\u50F0\u50F1\u50F2\u50F4\u50F6", 4, "\u50FC", 9, "\u5108"],
        ["8380", "\u5109\u510A\u510C", 5, "\u5113", 13, "\u5122", 28, "\u5142\u5147\u514A\u514C\u514E\u514F\u5150\u5152\u5153\u5157\u5158\u5159\u515B\u515D", 4, "\u5163\u5164\u5166\u5167\u5169\u516A\u516F\u5172\u517A\u517E\u517F\u5183\u5184\u5186\u5187\u518A\u518B\u518E\u518F\u5190\u5191\u5193\u5194\u5198\u519A\u519D\u519E\u519F\u51A1\u51A3\u51A6", 4, "\u51AD\u51AE\u51B4\u51B8\u51B9\u51BA\u51BE\u51BF\u51C1\u51C2\u51C3\u51C5\u51C8\u51CA\u51CD\u51CE\u51D0\u51D2", 5],
        ["8440", "\u51D8\u51D9\u51DA\u51DC\u51DE\u51DF\u51E2\u51E3\u51E5", 5, "\u51EC\u51EE\u51F1\u51F2\u51F4\u51F7\u51FE\u5204\u5205\u5209\u520B\u520C\u520F\u5210\u5213\u5214\u5215\u521C\u521E\u521F\u5221\u5222\u5223\u5225\u5226\u5227\u522A\u522C\u522F\u5231\u5232\u5234\u5235\u523C\u523E\u5244", 5, "\u524B\u524E\u524F\u5252\u5253\u5255\u5257\u5258"],
        ["8480", "\u5259\u525A\u525B\u525D\u525F\u5260\u5262\u5263\u5264\u5266\u5268\u526B\u526C\u526D\u526E\u5270\u5271\u5273", 9, "\u527E\u5280\u5283", 4, "\u5289", 6, "\u5291\u5292\u5294", 6, "\u529C\u52A4\u52A5\u52A6\u52A7\u52AE\u52AF\u52B0\u52B4", 9, "\u52C0\u52C1\u52C2\u52C4\u52C5\u52C6\u52C8\u52CA\u52CC\u52CD\u52CE\u52CF\u52D1\u52D3\u52D4\u52D5\u52D7\u52D9", 5, "\u52E0\u52E1\u52E2\u52E3\u52E5", 10, "\u52F1", 7, "\u52FB\u52FC\u52FD\u5301\u5302\u5303\u5304\u5307\u5309\u530A\u530B\u530C\u530E"],
        ["8540", "\u5311\u5312\u5313\u5314\u5318\u531B\u531C\u531E\u531F\u5322\u5324\u5325\u5327\u5328\u5329\u532B\u532C\u532D\u532F", 9, "\u533C\u533D\u5340\u5342\u5344\u5346\u534B\u534C\u534D\u5350\u5354\u5358\u5359\u535B\u535D\u5365\u5368\u536A\u536C\u536D\u5372\u5376\u5379\u537B\u537C\u537D\u537E\u5380\u5381\u5383\u5387\u5388\u538A\u538E\u538F"],
        ["8580", "\u5390", 4, "\u5396\u5397\u5399\u539B\u539C\u539E\u53A0\u53A1\u53A4\u53A7\u53AA\u53AB\u53AC\u53AD\u53AF", 6, "\u53B7\u53B8\u53B9\u53BA\u53BC\u53BD\u53BE\u53C0\u53C3", 4, "\u53CE\u53CF\u53D0\u53D2\u53D3\u53D5\u53DA\u53DC\u53DD\u53DE\u53E1\u53E2\u53E7\u53F4\u53FA\u53FE\u53FF\u5400\u5402\u5405\u5407\u540B\u5414\u5418\u5419\u541A\u541C\u5422\u5424\u5425\u542A\u5430\u5433\u5436\u5437\u543A\u543D\u543F\u5441\u5442\u5444\u5445\u5447\u5449\u544C\u544D\u544E\u544F\u5451\u545A\u545D", 4, "\u5463\u5465\u5467\u5469", 7, "\u5474\u5479\u547A\u547E\u547F\u5481\u5483\u5485\u5487\u5488\u5489\u548A\u548D\u5491\u5493\u5497\u5498\u549C\u549E\u549F\u54A0\u54A1"],
        ["8640", "\u54A2\u54A5\u54AE\u54B0\u54B2\u54B5\u54B6\u54B7\u54B9\u54BA\u54BC\u54BE\u54C3\u54C5\u54CA\u54CB\u54D6\u54D8\u54DB\u54E0", 4, "\u54EB\u54EC\u54EF\u54F0\u54F1\u54F4", 5, "\u54FB\u54FE\u5500\u5502\u5503\u5504\u5505\u5508\u550A", 4, "\u5512\u5513\u5515", 5, "\u551C\u551D\u551E\u551F\u5521\u5525\u5526"],
        ["8680", "\u5528\u5529\u552B\u552D\u5532\u5534\u5535\u5536\u5538\u5539\u553A\u553B\u553D\u5540\u5542\u5545\u5547\u5548\u554B", 4, "\u5551\u5552\u5553\u5554\u5557", 4, "\u555D\u555E\u555F\u5560\u5562\u5563\u5568\u5569\u556B\u556F", 5, "\u5579\u557A\u557D\u557F\u5585\u5586\u558C\u558D\u558E\u5590\u5592\u5593\u5595\u5596\u5597\u559A\u559B\u559E\u55A0", 6, "\u55A8", 8, "\u55B2\u55B4\u55B6\u55B8\u55BA\u55BC\u55BF", 4, "\u55C6\u55C7\u55C8\u55CA\u55CB\u55CE\u55CF\u55D0\u55D5\u55D7", 4, "\u55DE\u55E0\u55E2\u55E7\u55E9\u55ED\u55EE\u55F0\u55F1\u55F4\u55F6\u55F8", 4, "\u55FF\u5602\u5603\u5604\u5605"],
        ["8740", "\u5606\u5607\u560A\u560B\u560D\u5610", 7, "\u5619\u561A\u561C\u561D\u5620\u5621\u5622\u5625\u5626\u5628\u5629\u562A\u562B\u562E\u562F\u5630\u5633\u5635\u5637\u5638\u563A\u563C\u563D\u563E\u5640", 11, "\u564F", 4, "\u5655\u5656\u565A\u565B\u565D", 4],
        ["8780", "\u5663\u5665\u5666\u5667\u566D\u566E\u566F\u5670\u5672\u5673\u5674\u5675\u5677\u5678\u5679\u567A\u567D", 7, "\u5687", 6, "\u5690\u5691\u5692\u5694", 14, "\u56A4", 10, "\u56B0", 6, "\u56B8\u56B9\u56BA\u56BB\u56BD", 12, "\u56CB", 8, "\u56D5\u56D6\u56D8\u56D9\u56DC\u56E3\u56E5", 5, "\u56EC\u56EE\u56EF\u56F2\u56F3\u56F6\u56F7\u56F8\u56FB\u56FC\u5700\u5701\u5702\u5705\u5707\u570B", 6],
        ["8840", "\u5712", 9, "\u571D\u571E\u5720\u5721\u5722\u5724\u5725\u5726\u5727\u572B\u5731\u5732\u5734", 4, "\u573C\u573D\u573F\u5741\u5743\u5744\u5745\u5746\u5748\u5749\u574B\u5752", 4, "\u5758\u5759\u5762\u5763\u5765\u5767\u576C\u576E\u5770\u5771\u5772\u5774\u5775\u5778\u5779\u577A\u577D\u577E\u577F\u5780"],
        ["8880", "\u5781\u5787\u5788\u5789\u578A\u578D", 4, "\u5794", 6, "\u579C\u579D\u579E\u579F\u57A5\u57A8\u57AA\u57AC\u57AF\u57B0\u57B1\u57B3\u57B5\u57B6\u57B7\u57B9", 8, "\u57C4", 6, "\u57CC\u57CD\u57D0\u57D1\u57D3\u57D6\u57D7\u57DB\u57DC\u57DE\u57E1\u57E2\u57E3\u57E5", 7, "\u57EE\u57F0\u57F1\u57F2\u57F3\u57F5\u57F6\u57F7\u57FB\u57FC\u57FE\u57FF\u5801\u5803\u5804\u5805\u5808\u5809\u580A\u580C\u580E\u580F\u5810\u5812\u5813\u5814\u5816\u5817\u5818\u581A\u581B\u581C\u581D\u581F\u5822\u5823\u5825", 4, "\u582B", 4, "\u5831\u5832\u5833\u5834\u5836", 7],
        ["8940", "\u583E", 5, "\u5845", 6, "\u584E\u584F\u5850\u5852\u5853\u5855\u5856\u5857\u5859", 4, "\u585F", 5, "\u5866", 4, "\u586D", 16, "\u587F\u5882\u5884\u5886\u5887\u5888\u588A\u588B\u588C"],
        ["8980", "\u588D", 4, "\u5894", 4, "\u589B\u589C\u589D\u58A0", 7, "\u58AA", 17, "\u58BD\u58BE\u58BF\u58C0\u58C2\u58C3\u58C4\u58C6", 10, "\u58D2\u58D3\u58D4\u58D6", 13, "\u58E5", 5, "\u58ED\u58EF\u58F1\u58F2\u58F4\u58F5\u58F7\u58F8\u58FA", 7, "\u5903\u5905\u5906\u5908", 4, "\u590E\u5910\u5911\u5912\u5913\u5917\u5918\u591B\u591D\u591E\u5920\u5921\u5922\u5923\u5926\u5928\u592C\u5930\u5932\u5933\u5935\u5936\u593B"],
        ["8a40", "\u593D\u593E\u593F\u5940\u5943\u5945\u5946\u594A\u594C\u594D\u5950\u5952\u5953\u5959\u595B", 4, "\u5961\u5963\u5964\u5966", 12, "\u5975\u5977\u597A\u597B\u597C\u597E\u597F\u5980\u5985\u5989\u598B\u598C\u598E\u598F\u5990\u5991\u5994\u5995\u5998\u599A\u599B\u599C\u599D\u599F\u59A0\u59A1\u59A2\u59A6"],
        ["8a80", "\u59A7\u59AC\u59AD\u59B0\u59B1\u59B3", 5, "\u59BA\u59BC\u59BD\u59BF", 6, "\u59C7\u59C8\u59C9\u59CC\u59CD\u59CE\u59CF\u59D5\u59D6\u59D9\u59DB\u59DE", 4, "\u59E4\u59E6\u59E7\u59E9\u59EA\u59EB\u59ED", 11, "\u59FA\u59FC\u59FD\u59FE\u5A00\u5A02\u5A0A\u5A0B\u5A0D\u5A0E\u5A0F\u5A10\u5A12\u5A14\u5A15\u5A16\u5A17\u5A19\u5A1A\u5A1B\u5A1D\u5A1E\u5A21\u5A22\u5A24\u5A26\u5A27\u5A28\u5A2A", 6, "\u5A33\u5A35\u5A37", 4, "\u5A3D\u5A3E\u5A3F\u5A41", 4, "\u5A47\u5A48\u5A4B", 9, "\u5A56\u5A57\u5A58\u5A59\u5A5B", 5],
        ["8b40", "\u5A61\u5A63\u5A64\u5A65\u5A66\u5A68\u5A69\u5A6B", 8, "\u5A78\u5A79\u5A7B\u5A7C\u5A7D\u5A7E\u5A80", 17, "\u5A93", 6, "\u5A9C", 13, "\u5AAB\u5AAC"],
        ["8b80", "\u5AAD", 4, "\u5AB4\u5AB6\u5AB7\u5AB9", 4, "\u5ABF\u5AC0\u5AC3", 5, "\u5ACA\u5ACB\u5ACD", 4, "\u5AD3\u5AD5\u5AD7\u5AD9\u5ADA\u5ADB\u5ADD\u5ADE\u5ADF\u5AE2\u5AE4\u5AE5\u5AE7\u5AE8\u5AEA\u5AEC", 4, "\u5AF2", 22, "\u5B0A", 11, "\u5B18", 25, "\u5B33\u5B35\u5B36\u5B38", 7, "\u5B41", 6],
        ["8c40", "\u5B48", 7, "\u5B52\u5B56\u5B5E\u5B60\u5B61\u5B67\u5B68\u5B6B\u5B6D\u5B6E\u5B6F\u5B72\u5B74\u5B76\u5B77\u5B78\u5B79\u5B7B\u5B7C\u5B7E\u5B7F\u5B82\u5B86\u5B8A\u5B8D\u5B8E\u5B90\u5B91\u5B92\u5B94\u5B96\u5B9F\u5BA7\u5BA8\u5BA9\u5BAC\u5BAD\u5BAE\u5BAF\u5BB1\u5BB2\u5BB7\u5BBA\u5BBB\u5BBC\u5BC0\u5BC1\u5BC3\u5BC8\u5BC9\u5BCA\u5BCB\u5BCD\u5BCE\u5BCF"],
        ["8c80", "\u5BD1\u5BD4", 8, "\u5BE0\u5BE2\u5BE3\u5BE6\u5BE7\u5BE9", 4, "\u5BEF\u5BF1", 6, "\u5BFD\u5BFE\u5C00\u5C02\u5C03\u5C05\u5C07\u5C08\u5C0B\u5C0C\u5C0D\u5C0E\u5C10\u5C12\u5C13\u5C17\u5C19\u5C1B\u5C1E\u5C1F\u5C20\u5C21\u5C23\u5C26\u5C28\u5C29\u5C2A\u5C2B\u5C2D\u5C2E\u5C2F\u5C30\u5C32\u5C33\u5C35\u5C36\u5C37\u5C43\u5C44\u5C46\u5C47\u5C4C\u5C4D\u5C52\u5C53\u5C54\u5C56\u5C57\u5C58\u5C5A\u5C5B\u5C5C\u5C5D\u5C5F\u5C62\u5C64\u5C67", 6, "\u5C70\u5C72", 6, "\u5C7B\u5C7C\u5C7D\u5C7E\u5C80\u5C83", 4, "\u5C89\u5C8A\u5C8B\u5C8E\u5C8F\u5C92\u5C93\u5C95\u5C9D", 4, "\u5CA4", 4],
        ["8d40", "\u5CAA\u5CAE\u5CAF\u5CB0\u5CB2\u5CB4\u5CB6\u5CB9\u5CBA\u5CBB\u5CBC\u5CBE\u5CC0\u5CC2\u5CC3\u5CC5", 5, "\u5CCC", 5, "\u5CD3", 5, "\u5CDA", 6, "\u5CE2\u5CE3\u5CE7\u5CE9\u5CEB\u5CEC\u5CEE\u5CEF\u5CF1", 9, "\u5CFC", 4],
        ["8d80", "\u5D01\u5D04\u5D05\u5D08", 5, "\u5D0F", 4, "\u5D15\u5D17\u5D18\u5D19\u5D1A\u5D1C\u5D1D\u5D1F", 4, "\u5D25\u5D28\u5D2A\u5D2B\u5D2C\u5D2F", 4, "\u5D35", 7, "\u5D3F", 7, "\u5D48\u5D49\u5D4D", 10, "\u5D59\u5D5A\u5D5C\u5D5E", 10, "\u5D6A\u5D6D\u5D6E\u5D70\u5D71\u5D72\u5D73\u5D75", 12, "\u5D83", 21, "\u5D9A\u5D9B\u5D9C\u5D9E\u5D9F\u5DA0"],
        ["8e40", "\u5DA1", 21, "\u5DB8", 12, "\u5DC6", 6, "\u5DCE", 12, "\u5DDC\u5DDF\u5DE0\u5DE3\u5DE4\u5DEA\u5DEC\u5DED"],
        ["8e80", "\u5DF0\u5DF5\u5DF6\u5DF8", 4, "\u5DFF\u5E00\u5E04\u5E07\u5E09\u5E0A\u5E0B\u5E0D\u5E0E\u5E12\u5E13\u5E17\u5E1E", 7, "\u5E28", 4, "\u5E2F\u5E30\u5E32", 4, "\u5E39\u5E3A\u5E3E\u5E3F\u5E40\u5E41\u5E43\u5E46", 5, "\u5E4D", 6, "\u5E56", 4, "\u5E5C\u5E5D\u5E5F\u5E60\u5E63", 14, "\u5E75\u5E77\u5E79\u5E7E\u5E81\u5E82\u5E83\u5E85\u5E88\u5E89\u5E8C\u5E8D\u5E8E\u5E92\u5E98\u5E9B\u5E9D\u5EA1\u5EA2\u5EA3\u5EA4\u5EA8", 4, "\u5EAE", 4, "\u5EB4\u5EBA\u5EBB\u5EBC\u5EBD\u5EBF", 6],
        ["8f40", "\u5EC6\u5EC7\u5EC8\u5ECB", 5, "\u5ED4\u5ED5\u5ED7\u5ED8\u5ED9\u5EDA\u5EDC", 11, "\u5EE9\u5EEB", 8, "\u5EF5\u5EF8\u5EF9\u5EFB\u5EFC\u5EFD\u5F05\u5F06\u5F07\u5F09\u5F0C\u5F0D\u5F0E\u5F10\u5F12\u5F14\u5F16\u5F19\u5F1A\u5F1C\u5F1D\u5F1E\u5F21\u5F22\u5F23\u5F24"],
        ["8f80", "\u5F28\u5F2B\u5F2C\u5F2E\u5F30\u5F32", 6, "\u5F3B\u5F3D\u5F3E\u5F3F\u5F41", 14, "\u5F51\u5F54\u5F59\u5F5A\u5F5B\u5F5C\u5F5E\u5F5F\u5F60\u5F63\u5F65\u5F67\u5F68\u5F6B\u5F6E\u5F6F\u5F72\u5F74\u5F75\u5F76\u5F78\u5F7A\u5F7D\u5F7E\u5F7F\u5F83\u5F86\u5F8D\u5F8E\u5F8F\u5F91\u5F93\u5F94\u5F96\u5F9A\u5F9B\u5F9D\u5F9E\u5F9F\u5FA0\u5FA2", 5, "\u5FA9\u5FAB\u5FAC\u5FAF", 5, "\u5FB6\u5FB8\u5FB9\u5FBA\u5FBB\u5FBE", 4, "\u5FC7\u5FC8\u5FCA\u5FCB\u5FCE\u5FD3\u5FD4\u5FD5\u5FDA\u5FDB\u5FDC\u5FDE\u5FDF\u5FE2\u5FE3\u5FE5\u5FE6\u5FE8\u5FE9\u5FEC\u5FEF\u5FF0\u5FF2\u5FF3\u5FF4\u5FF6\u5FF7\u5FF9\u5FFA\u5FFC\u6007"],
        ["9040", "\u6008\u6009\u600B\u600C\u6010\u6011\u6013\u6017\u6018\u601A\u601E\u601F\u6022\u6023\u6024\u602C\u602D\u602E\u6030", 4, "\u6036", 4, "\u603D\u603E\u6040\u6044", 6, "\u604C\u604E\u604F\u6051\u6053\u6054\u6056\u6057\u6058\u605B\u605C\u605E\u605F\u6060\u6061\u6065\u6066\u606E\u6071\u6072\u6074\u6075\u6077\u607E\u6080"],
        ["9080", "\u6081\u6082\u6085\u6086\u6087\u6088\u608A\u608B\u608E\u608F\u6090\u6091\u6093\u6095\u6097\u6098\u6099\u609C\u609E\u60A1\u60A2\u60A4\u60A5\u60A7\u60A9\u60AA\u60AE\u60B0\u60B3\u60B5\u60B6\u60B7\u60B9\u60BA\u60BD", 7, "\u60C7\u60C8\u60C9\u60CC", 4, "\u60D2\u60D3\u60D4\u60D6\u60D7\u60D9\u60DB\u60DE\u60E1", 4, "\u60EA\u60F1\u60F2\u60F5\u60F7\u60F8\u60FB", 4, "\u6102\u6103\u6104\u6105\u6107\u610A\u610B\u610C\u6110", 4, "\u6116\u6117\u6118\u6119\u611B\u611C\u611D\u611E\u6121\u6122\u6125\u6128\u6129\u612A\u612C", 18, "\u6140", 6],
        ["9140", "\u6147\u6149\u614B\u614D\u614F\u6150\u6152\u6153\u6154\u6156", 6, "\u615E\u615F\u6160\u6161\u6163\u6164\u6165\u6166\u6169", 6, "\u6171\u6172\u6173\u6174\u6176\u6178", 18, "\u618C\u618D\u618F", 4, "\u6195"],
        ["9180", "\u6196", 6, "\u619E", 8, "\u61AA\u61AB\u61AD", 9, "\u61B8", 5, "\u61BF\u61C0\u61C1\u61C3", 4, "\u61C9\u61CC", 4, "\u61D3\u61D5", 16, "\u61E7", 13, "\u61F6", 8, "\u6200", 5, "\u6207\u6209\u6213\u6214\u6219\u621C\u621D\u621E\u6220\u6223\u6226\u6227\u6228\u6229\u622B\u622D\u622F\u6230\u6231\u6232\u6235\u6236\u6238", 4, "\u6242\u6244\u6245\u6246\u624A"],
        ["9240", "\u624F\u6250\u6255\u6256\u6257\u6259\u625A\u625C", 6, "\u6264\u6265\u6268\u6271\u6272\u6274\u6275\u6277\u6278\u627A\u627B\u627D\u6281\u6282\u6283\u6285\u6286\u6287\u6288\u628B", 5, "\u6294\u6299\u629C\u629D\u629E\u62A3\u62A6\u62A7\u62A9\u62AA\u62AD\u62AE\u62AF\u62B0\u62B2\u62B3\u62B4\u62B6\u62B7\u62B8\u62BA\u62BE\u62C0\u62C1"],
        ["9280", "\u62C3\u62CB\u62CF\u62D1\u62D5\u62DD\u62DE\u62E0\u62E1\u62E4\u62EA\u62EB\u62F0\u62F2\u62F5\u62F8\u62F9\u62FA\u62FB\u6300\u6303\u6304\u6305\u6306\u630A\u630B\u630C\u630D\u630F\u6310\u6312\u6313\u6314\u6315\u6317\u6318\u6319\u631C\u6326\u6327\u6329\u632C\u632D\u632E\u6330\u6331\u6333", 5, "\u633B\u633C\u633E\u633F\u6340\u6341\u6344\u6347\u6348\u634A\u6351\u6352\u6353\u6354\u6356", 7, "\u6360\u6364\u6365\u6366\u6368\u636A\u636B\u636C\u636F\u6370\u6372\u6373\u6374\u6375\u6378\u6379\u637C\u637D\u637E\u637F\u6381\u6383\u6384\u6385\u6386\u638B\u638D\u6391\u6393\u6394\u6395\u6397\u6399", 6, "\u63A1\u63A4\u63A6\u63AB\u63AF\u63B1\u63B2\u63B5\u63B6\u63B9\u63BB\u63BD\u63BF\u63C0"],
        ["9340", "\u63C1\u63C2\u63C3\u63C5\u63C7\u63C8\u63CA\u63CB\u63CC\u63D1\u63D3\u63D4\u63D5\u63D7", 6, "\u63DF\u63E2\u63E4", 4, "\u63EB\u63EC\u63EE\u63EF\u63F0\u63F1\u63F3\u63F5\u63F7\u63F9\u63FA\u63FB\u63FC\u63FE\u6403\u6404\u6406", 4, "\u640D\u640E\u6411\u6412\u6415", 5, "\u641D\u641F\u6422\u6423\u6424"],
        ["9380", "\u6425\u6427\u6428\u6429\u642B\u642E", 5, "\u6435", 4, "\u643B\u643C\u643E\u6440\u6442\u6443\u6449\u644B", 6, "\u6453\u6455\u6456\u6457\u6459", 4, "\u645F", 7, "\u6468\u646A\u646B\u646C\u646E", 9, "\u647B", 6, "\u6483\u6486\u6488", 8, "\u6493\u6494\u6497\u6498\u649A\u649B\u649C\u649D\u649F", 4, "\u64A5\u64A6\u64A7\u64A8\u64AA\u64AB\u64AF\u64B1\u64B2\u64B3\u64B4\u64B6\u64B9\u64BB\u64BD\u64BE\u64BF\u64C1\u64C3\u64C4\u64C6", 6, "\u64CF\u64D1\u64D3\u64D4\u64D5\u64D6\u64D9\u64DA"],
        ["9440", "\u64DB\u64DC\u64DD\u64DF\u64E0\u64E1\u64E3\u64E5\u64E7", 24, "\u6501", 7, "\u650A", 7, "\u6513", 4, "\u6519", 8],
        ["9480", "\u6522\u6523\u6524\u6526", 4, "\u652C\u652D\u6530\u6531\u6532\u6533\u6537\u653A\u653C\u653D\u6540", 4, "\u6546\u6547\u654A\u654B\u654D\u654E\u6550\u6552\u6553\u6554\u6557\u6558\u655A\u655C\u655F\u6560\u6561\u6564\u6565\u6567\u6568\u6569\u656A\u656D\u656E\u656F\u6571\u6573\u6575\u6576\u6578", 14, "\u6588\u6589\u658A\u658D\u658E\u658F\u6592\u6594\u6595\u6596\u6598\u659A\u659D\u659E\u65A0\u65A2\u65A3\u65A6\u65A8\u65AA\u65AC\u65AE\u65B1", 7, "\u65BA\u65BB\u65BE\u65BF\u65C0\u65C2\u65C7\u65C8\u65C9\u65CA\u65CD\u65D0\u65D1\u65D3\u65D4\u65D5\u65D8", 7, "\u65E1\u65E3\u65E4\u65EA\u65EB"],
        ["9540", "\u65F2\u65F3\u65F4\u65F5\u65F8\u65F9\u65FB", 4, "\u6601\u6604\u6605\u6607\u6608\u6609\u660B\u660D\u6610\u6611\u6612\u6616\u6617\u6618\u661A\u661B\u661C\u661E\u6621\u6622\u6623\u6624\u6626\u6629\u662A\u662B\u662C\u662E\u6630\u6632\u6633\u6637", 4, "\u663D\u663F\u6640\u6642\u6644", 6, "\u664D\u664E\u6650\u6651\u6658"],
        ["9580", "\u6659\u665B\u665C\u665D\u665E\u6660\u6662\u6663\u6665\u6667\u6669", 4, "\u6671\u6672\u6673\u6675\u6678\u6679\u667B\u667C\u667D\u667F\u6680\u6681\u6683\u6685\u6686\u6688\u6689\u668A\u668B\u668D\u668E\u668F\u6690\u6692\u6693\u6694\u6695\u6698", 4, "\u669E", 8, "\u66A9", 4, "\u66AF", 4, "\u66B5\u66B6\u66B7\u66B8\u66BA\u66BB\u66BC\u66BD\u66BF", 25, "\u66DA\u66DE", 7, "\u66E7\u66E8\u66EA", 5, "\u66F1\u66F5\u66F6\u66F8\u66FA\u66FB\u66FD\u6701\u6702\u6703"],
        ["9640", "\u6704\u6705\u6706\u6707\u670C\u670E\u670F\u6711\u6712\u6713\u6716\u6718\u6719\u671A\u671C\u671E\u6720", 5, "\u6727\u6729\u672E\u6730\u6732\u6733\u6736\u6737\u6738\u6739\u673B\u673C\u673E\u673F\u6741\u6744\u6745\u6747\u674A\u674B\u674D\u6752\u6754\u6755\u6757", 4, "\u675D\u6762\u6763\u6764\u6766\u6767\u676B\u676C\u676E\u6771\u6774\u6776"],
        ["9680", "\u6778\u6779\u677A\u677B\u677D\u6780\u6782\u6783\u6785\u6786\u6788\u678A\u678C\u678D\u678E\u678F\u6791\u6792\u6793\u6794\u6796\u6799\u679B\u679F\u67A0\u67A1\u67A4\u67A6\u67A9\u67AC\u67AE\u67B1\u67B2\u67B4\u67B9", 7, "\u67C2\u67C5", 9, "\u67D5\u67D6\u67D7\u67DB\u67DF\u67E1\u67E3\u67E4\u67E6\u67E7\u67E8\u67EA\u67EB\u67ED\u67EE\u67F2\u67F5", 7, "\u67FE\u6801\u6802\u6803\u6804\u6806\u680D\u6810\u6812\u6814\u6815\u6818", 4, "\u681E\u681F\u6820\u6822", 6, "\u682B", 6, "\u6834\u6835\u6836\u683A\u683B\u683F\u6847\u684B\u684D\u684F\u6852\u6856", 5],
        ["9740", "\u685C\u685D\u685E\u685F\u686A\u686C", 7, "\u6875\u6878", 8, "\u6882\u6884\u6887", 7, "\u6890\u6891\u6892\u6894\u6895\u6896\u6898", 9, "\u68A3\u68A4\u68A5\u68A9\u68AA\u68AB\u68AC\u68AE\u68B1\u68B2\u68B4\u68B6\u68B7\u68B8"],
        ["9780", "\u68B9", 6, "\u68C1\u68C3", 5, "\u68CA\u68CC\u68CE\u68CF\u68D0\u68D1\u68D3\u68D4\u68D6\u68D7\u68D9\u68DB", 4, "\u68E1\u68E2\u68E4", 9, "\u68EF\u68F2\u68F3\u68F4\u68F6\u68F7\u68F8\u68FB\u68FD\u68FE\u68FF\u6900\u6902\u6903\u6904\u6906", 4, "\u690C\u690F\u6911\u6913", 11, "\u6921\u6922\u6923\u6925", 7, "\u692E\u692F\u6931\u6932\u6933\u6935\u6936\u6937\u6938\u693A\u693B\u693C\u693E\u6940\u6941\u6943", 16, "\u6955\u6956\u6958\u6959\u695B\u695C\u695F"],
        ["9840", "\u6961\u6962\u6964\u6965\u6967\u6968\u6969\u696A\u696C\u696D\u696F\u6970\u6972", 4, "\u697A\u697B\u697D\u697E\u697F\u6981\u6983\u6985\u698A\u698B\u698C\u698E", 5, "\u6996\u6997\u6999\u699A\u699D", 9, "\u69A9\u69AA\u69AC\u69AE\u69AF\u69B0\u69B2\u69B3\u69B5\u69B6\u69B8\u69B9\u69BA\u69BC\u69BD"],
        ["9880", "\u69BE\u69BF\u69C0\u69C2", 7, "\u69CB\u69CD\u69CF\u69D1\u69D2\u69D3\u69D5", 5, "\u69DC\u69DD\u69DE\u69E1", 11, "\u69EE\u69EF\u69F0\u69F1\u69F3", 9, "\u69FE\u6A00", 9, "\u6A0B", 11, "\u6A19", 5, "\u6A20\u6A22", 5, "\u6A29\u6A2B\u6A2C\u6A2D\u6A2E\u6A30\u6A32\u6A33\u6A34\u6A36", 6, "\u6A3F", 4, "\u6A45\u6A46\u6A48", 7, "\u6A51", 6, "\u6A5A"],
        ["9940", "\u6A5C", 4, "\u6A62\u6A63\u6A64\u6A66", 10, "\u6A72", 6, "\u6A7A\u6A7B\u6A7D\u6A7E\u6A7F\u6A81\u6A82\u6A83\u6A85", 8, "\u6A8F\u6A92", 4, "\u6A98", 7, "\u6AA1", 5],
        ["9980", "\u6AA7\u6AA8\u6AAA\u6AAD", 114, "\u6B25\u6B26\u6B28", 6],
        ["9a40", "\u6B2F\u6B30\u6B31\u6B33\u6B34\u6B35\u6B36\u6B38\u6B3B\u6B3C\u6B3D\u6B3F\u6B40\u6B41\u6B42\u6B44\u6B45\u6B48\u6B4A\u6B4B\u6B4D", 11, "\u6B5A", 7, "\u6B68\u6B69\u6B6B", 13, "\u6B7A\u6B7D\u6B7E\u6B7F\u6B80\u6B85\u6B88"],
        ["9a80", "\u6B8C\u6B8E\u6B8F\u6B90\u6B91\u6B94\u6B95\u6B97\u6B98\u6B99\u6B9C", 4, "\u6BA2", 7, "\u6BAB", 7, "\u6BB6\u6BB8", 6, "\u6BC0\u6BC3\u6BC4\u6BC6", 4, "\u6BCC\u6BCE\u6BD0\u6BD1\u6BD8\u6BDA\u6BDC", 4, "\u6BE2", 7, "\u6BEC\u6BED\u6BEE\u6BF0\u6BF1\u6BF2\u6BF4\u6BF6\u6BF7\u6BF8\u6BFA\u6BFB\u6BFC\u6BFE", 6, "\u6C08", 4, "\u6C0E\u6C12\u6C17\u6C1C\u6C1D\u6C1E\u6C20\u6C23\u6C25\u6C2B\u6C2C\u6C2D\u6C31\u6C33\u6C36\u6C37\u6C39\u6C3A\u6C3B\u6C3C\u6C3E\u6C3F\u6C43\u6C44\u6C45\u6C48\u6C4B", 4, "\u6C51\u6C52\u6C53\u6C56\u6C58"],
        ["9b40", "\u6C59\u6C5A\u6C62\u6C63\u6C65\u6C66\u6C67\u6C6B", 4, "\u6C71\u6C73\u6C75\u6C77\u6C78\u6C7A\u6C7B\u6C7C\u6C7F\u6C80\u6C84\u6C87\u6C8A\u6C8B\u6C8D\u6C8E\u6C91\u6C92\u6C95\u6C96\u6C97\u6C98\u6C9A\u6C9C\u6C9D\u6C9E\u6CA0\u6CA2\u6CA8\u6CAC\u6CAF\u6CB0\u6CB4\u6CB5\u6CB6\u6CB7\u6CBA\u6CC0\u6CC1\u6CC2\u6CC3\u6CC6\u6CC7\u6CC8\u6CCB\u6CCD\u6CCE\u6CCF\u6CD1\u6CD2\u6CD8"],
        ["9b80", "\u6CD9\u6CDA\u6CDC\u6CDD\u6CDF\u6CE4\u6CE6\u6CE7\u6CE9\u6CEC\u6CED\u6CF2\u6CF4\u6CF9\u6CFF\u6D00\u6D02\u6D03\u6D05\u6D06\u6D08\u6D09\u6D0A\u6D0D\u6D0F\u6D10\u6D11\u6D13\u6D14\u6D15\u6D16\u6D18\u6D1C\u6D1D\u6D1F", 5, "\u6D26\u6D28\u6D29\u6D2C\u6D2D\u6D2F\u6D30\u6D34\u6D36\u6D37\u6D38\u6D3A\u6D3F\u6D40\u6D42\u6D44\u6D49\u6D4C\u6D50\u6D55\u6D56\u6D57\u6D58\u6D5B\u6D5D\u6D5F\u6D61\u6D62\u6D64\u6D65\u6D67\u6D68\u6D6B\u6D6C\u6D6D\u6D70\u6D71\u6D72\u6D73\u6D75\u6D76\u6D79\u6D7A\u6D7B\u6D7D", 4, "\u6D83\u6D84\u6D86\u6D87\u6D8A\u6D8B\u6D8D\u6D8F\u6D90\u6D92\u6D96", 4, "\u6D9C\u6DA2\u6DA5\u6DAC\u6DAD\u6DB0\u6DB1\u6DB3\u6DB4\u6DB6\u6DB7\u6DB9", 5, "\u6DC1\u6DC2\u6DC3\u6DC8\u6DC9\u6DCA"],
        ["9c40", "\u6DCD\u6DCE\u6DCF\u6DD0\u6DD2\u6DD3\u6DD4\u6DD5\u6DD7\u6DDA\u6DDB\u6DDC\u6DDF\u6DE2\u6DE3\u6DE5\u6DE7\u6DE8\u6DE9\u6DEA\u6DED\u6DEF\u6DF0\u6DF2\u6DF4\u6DF5\u6DF6\u6DF8\u6DFA\u6DFD", 7, "\u6E06\u6E07\u6E08\u6E09\u6E0B\u6E0F\u6E12\u6E13\u6E15\u6E18\u6E19\u6E1B\u6E1C\u6E1E\u6E1F\u6E22\u6E26\u6E27\u6E28\u6E2A\u6E2C\u6E2E\u6E30\u6E31\u6E33\u6E35"],
        ["9c80", "\u6E36\u6E37\u6E39\u6E3B", 7, "\u6E45", 7, "\u6E4F\u6E50\u6E51\u6E52\u6E55\u6E57\u6E59\u6E5A\u6E5C\u6E5D\u6E5E\u6E60", 10, "\u6E6C\u6E6D\u6E6F", 14, "\u6E80\u6E81\u6E82\u6E84\u6E87\u6E88\u6E8A", 4, "\u6E91", 6, "\u6E99\u6E9A\u6E9B\u6E9D\u6E9E\u6EA0\u6EA1\u6EA3\u6EA4\u6EA6\u6EA8\u6EA9\u6EAB\u6EAC\u6EAD\u6EAE\u6EB0\u6EB3\u6EB5\u6EB8\u6EB9\u6EBC\u6EBE\u6EBF\u6EC0\u6EC3\u6EC4\u6EC5\u6EC6\u6EC8\u6EC9\u6ECA\u6ECC\u6ECD\u6ECE\u6ED0\u6ED2\u6ED6\u6ED8\u6ED9\u6EDB\u6EDC\u6EDD\u6EE3\u6EE7\u6EEA", 5],
        ["9d40", "\u6EF0\u6EF1\u6EF2\u6EF3\u6EF5\u6EF6\u6EF7\u6EF8\u6EFA", 7, "\u6F03\u6F04\u6F05\u6F07\u6F08\u6F0A", 4, "\u6F10\u6F11\u6F12\u6F16", 9, "\u6F21\u6F22\u6F23\u6F25\u6F26\u6F27\u6F28\u6F2C\u6F2E\u6F30\u6F32\u6F34\u6F35\u6F37", 6, "\u6F3F\u6F40\u6F41\u6F42"],
        ["9d80", "\u6F43\u6F44\u6F45\u6F48\u6F49\u6F4A\u6F4C\u6F4E", 9, "\u6F59\u6F5A\u6F5B\u6F5D\u6F5F\u6F60\u6F61\u6F63\u6F64\u6F65\u6F67", 5, "\u6F6F\u6F70\u6F71\u6F73\u6F75\u6F76\u6F77\u6F79\u6F7B\u6F7D", 6, "\u6F85\u6F86\u6F87\u6F8A\u6F8B\u6F8F", 12, "\u6F9D\u6F9E\u6F9F\u6FA0\u6FA2", 4, "\u6FA8", 10, "\u6FB4\u6FB5\u6FB7\u6FB8\u6FBA", 5, "\u6FC1\u6FC3", 5, "\u6FCA", 6, "\u6FD3", 10, "\u6FDF\u6FE2\u6FE3\u6FE4\u6FE5"],
        ["9e40", "\u6FE6", 7, "\u6FF0", 32, "\u7012", 7, "\u701C", 6, "\u7024", 6],
        ["9e80", "\u702B", 9, "\u7036\u7037\u7038\u703A", 17, "\u704D\u704E\u7050", 13, "\u705F", 11, "\u706E\u7071\u7072\u7073\u7074\u7077\u7079\u707A\u707B\u707D\u7081\u7082\u7083\u7084\u7086\u7087\u7088\u708B\u708C\u708D\u708F\u7090\u7091\u7093\u7097\u7098\u709A\u709B\u709E", 12, "\u70B0\u70B2\u70B4\u70B5\u70B6\u70BA\u70BE\u70BF\u70C4\u70C5\u70C6\u70C7\u70C9\u70CB", 12, "\u70DA"],
        ["9f40", "\u70DC\u70DD\u70DE\u70E0\u70E1\u70E2\u70E3\u70E5\u70EA\u70EE\u70F0", 6, "\u70F8\u70FA\u70FB\u70FC\u70FE", 10, "\u710B", 4, "\u7111\u7112\u7114\u7117\u711B", 10, "\u7127", 7, "\u7132\u7133\u7134"],
        ["9f80", "\u7135\u7137", 13, "\u7146\u7147\u7148\u7149\u714B\u714D\u714F", 12, "\u715D\u715F", 4, "\u7165\u7169", 4, "\u716F\u7170\u7171\u7174\u7175\u7176\u7177\u7179\u717B\u717C\u717E", 5, "\u7185", 4, "\u718B\u718C\u718D\u718E\u7190\u7191\u7192\u7193\u7195\u7196\u7197\u719A", 4, "\u71A1", 6, "\u71A9\u71AA\u71AB\u71AD", 5, "\u71B4\u71B6\u71B7\u71B8\u71BA", 8, "\u71C4", 9, "\u71CF", 4],
        ["a040", "\u71D6", 9, "\u71E1\u71E2\u71E3\u71E4\u71E6\u71E8", 5, "\u71EF", 9, "\u71FA", 11, "\u7207", 19],
        ["a080", "\u721B\u721C\u721E", 9, "\u7229\u722B\u722D\u722E\u722F\u7232\u7233\u7234\u723A\u723C\u723E\u7240", 6, "\u7249\u724A\u724B\u724E\u724F\u7250\u7251\u7253\u7254\u7255\u7257\u7258\u725A\u725C\u725E\u7260\u7263\u7264\u7265\u7268\u726A\u726B\u726C\u726D\u7270\u7271\u7273\u7274\u7276\u7277\u7278\u727B\u727C\u727D\u7282\u7283\u7285", 4, "\u728C\u728E\u7290\u7291\u7293", 11, "\u72A0", 11, "\u72AE\u72B1\u72B2\u72B3\u72B5\u72BA", 6, "\u72C5\u72C6\u72C7\u72C9\u72CA\u72CB\u72CC\u72CF\u72D1\u72D3\u72D4\u72D5\u72D6\u72D8\u72DA\u72DB"],
        ["a1a1", "\u3000\u3001\u3002\xB7\u02C9\u02C7\xA8\u3003\u3005\u2014\uFF5E\u2016\u2026\u2018\u2019\u201C\u201D\u3014\u3015\u3008", 7, "\u3016\u3017\u3010\u3011\xB1\xD7\xF7\u2236\u2227\u2228\u2211\u220F\u222A\u2229\u2208\u2237\u221A\u22A5\u2225\u2220\u2312\u2299\u222B\u222E\u2261\u224C\u2248\u223D\u221D\u2260\u226E\u226F\u2264\u2265\u221E\u2235\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFF04\xA4\uFFE0\uFFE1\u2030\xA7\u2116\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u203B\u2192\u2190\u2191\u2193\u3013"],
        ["a2a1", "\u2170", 9],
        ["a2b1", "\u2488", 19, "\u2474", 19, "\u2460", 9],
        ["a2e5", "\u3220", 9],
        ["a2f1", "\u2160", 11],
        ["a3a1", "\uFF01\uFF02\uFF03\uFFE5\uFF05", 88, "\uFFE3"],
        ["a4a1", "\u3041", 82],
        ["a5a1", "\u30A1", 85],
        ["a6a1", "\u0391", 16, "\u03A3", 6],
        ["a6c1", "\u03B1", 16, "\u03C3", 6],
        ["a6e0", "\uFE35\uFE36\uFE39\uFE3A\uFE3F\uFE40\uFE3D\uFE3E\uFE41\uFE42\uFE43\uFE44"],
        ["a6ee", "\uFE3B\uFE3C\uFE37\uFE38\uFE31"],
        ["a6f4", "\uFE33\uFE34"],
        ["a7a1", "\u0410", 5, "\u0401\u0416", 25],
        ["a7d1", "\u0430", 5, "\u0451\u0436", 25],
        ["a840", "\u02CA\u02CB\u02D9\u2013\u2015\u2025\u2035\u2105\u2109\u2196\u2197\u2198\u2199\u2215\u221F\u2223\u2252\u2266\u2267\u22BF\u2550", 35, "\u2581", 6],
        ["a880", "\u2588", 7, "\u2593\u2594\u2595\u25BC\u25BD\u25E2\u25E3\u25E4\u25E5\u2609\u2295\u3012\u301D\u301E"],
        ["a8a1", "\u0101\xE1\u01CE\xE0\u0113\xE9\u011B\xE8\u012B\xED\u01D0\xEC\u014D\xF3\u01D2\xF2\u016B\xFA\u01D4\xF9\u01D6\u01D8\u01DA\u01DC\xFC\xEA\u0251"],
        ["a8bd", "\u0144\u0148"],
        ["a8c0", "\u0261"],
        ["a8c5", "\u3105", 36],
        ["a940", "\u3021", 8, "\u32A3\u338E\u338F\u339C\u339D\u339E\u33A1\u33C4\u33CE\u33D1\u33D2\u33D5\uFE30\uFFE2\uFFE4"],
        ["a959", "\u2121\u3231"],
        ["a95c", "\u2010"],
        ["a960", "\u30FC\u309B\u309C\u30FD\u30FE\u3006\u309D\u309E\uFE49", 9, "\uFE54\uFE55\uFE56\uFE57\uFE59", 8],
        ["a980", "\uFE62", 4, "\uFE68\uFE69\uFE6A\uFE6B"],
        ["a996", "\u3007"],
        ["a9a4", "\u2500", 75],
        ["aa40", "\u72DC\u72DD\u72DF\u72E2", 5, "\u72EA\u72EB\u72F5\u72F6\u72F9\u72FD\u72FE\u72FF\u7300\u7302\u7304", 5, "\u730B\u730C\u730D\u730F\u7310\u7311\u7312\u7314\u7318\u7319\u731A\u731F\u7320\u7323\u7324\u7326\u7327\u7328\u732D\u732F\u7330\u7332\u7333\u7335\u7336\u733A\u733B\u733C\u733D\u7340", 8],
        ["aa80", "\u7349\u734A\u734B\u734C\u734E\u734F\u7351\u7353\u7354\u7355\u7356\u7358", 7, "\u7361", 10, "\u736E\u7370\u7371"],
        ["ab40", "\u7372", 11, "\u737F", 4, "\u7385\u7386\u7388\u738A\u738C\u738D\u738F\u7390\u7392\u7393\u7394\u7395\u7397\u7398\u7399\u739A\u739C\u739D\u739E\u73A0\u73A1\u73A3", 5, "\u73AA\u73AC\u73AD\u73B1\u73B4\u73B5\u73B6\u73B8\u73B9\u73BC\u73BD\u73BE\u73BF\u73C1\u73C3", 4],
        ["ab80", "\u73CB\u73CC\u73CE\u73D2", 6, "\u73DA\u73DB\u73DC\u73DD\u73DF\u73E1\u73E2\u73E3\u73E4\u73E6\u73E8\u73EA\u73EB\u73EC\u73EE\u73EF\u73F0\u73F1\u73F3", 4],
        ["ac40", "\u73F8", 10, "\u7404\u7407\u7408\u740B\u740C\u740D\u740E\u7411", 8, "\u741C", 5, "\u7423\u7424\u7427\u7429\u742B\u742D\u742F\u7431\u7432\u7437", 4, "\u743D\u743E\u743F\u7440\u7442", 11],
        ["ac80", "\u744E", 6, "\u7456\u7458\u745D\u7460", 12, "\u746E\u746F\u7471", 4, "\u7478\u7479\u747A"],
        ["ad40", "\u747B\u747C\u747D\u747F\u7482\u7484\u7485\u7486\u7488\u7489\u748A\u748C\u748D\u748F\u7491", 10, "\u749D\u749F", 7, "\u74AA", 15, "\u74BB", 12],
        ["ad80", "\u74C8", 9, "\u74D3", 8, "\u74DD\u74DF\u74E1\u74E5\u74E7", 6, "\u74F0\u74F1\u74F2"],
        ["ae40", "\u74F3\u74F5\u74F8", 6, "\u7500\u7501\u7502\u7503\u7505", 7, "\u750E\u7510\u7512\u7514\u7515\u7516\u7517\u751B\u751D\u751E\u7520", 4, "\u7526\u7527\u752A\u752E\u7534\u7536\u7539\u753C\u753D\u753F\u7541\u7542\u7543\u7544\u7546\u7547\u7549\u754A\u754D\u7550\u7551\u7552\u7553\u7555\u7556\u7557\u7558"],
        ["ae80", "\u755D", 7, "\u7567\u7568\u7569\u756B", 6, "\u7573\u7575\u7576\u7577\u757A", 4, "\u7580\u7581\u7582\u7584\u7585\u7587"],
        ["af40", "\u7588\u7589\u758A\u758C\u758D\u758E\u7590\u7593\u7595\u7598\u759B\u759C\u759E\u75A2\u75A6", 4, "\u75AD\u75B6\u75B7\u75BA\u75BB\u75BF\u75C0\u75C1\u75C6\u75CB\u75CC\u75CE\u75CF\u75D0\u75D1\u75D3\u75D7\u75D9\u75DA\u75DC\u75DD\u75DF\u75E0\u75E1\u75E5\u75E9\u75EC\u75ED\u75EE\u75EF\u75F2\u75F3\u75F5\u75F6\u75F7\u75F8\u75FA\u75FB\u75FD\u75FE\u7602\u7604\u7606\u7607"],
        ["af80", "\u7608\u7609\u760B\u760D\u760E\u760F\u7611\u7612\u7613\u7614\u7616\u761A\u761C\u761D\u761E\u7621\u7623\u7627\u7628\u762C\u762E\u762F\u7631\u7632\u7636\u7637\u7639\u763A\u763B\u763D\u7641\u7642\u7644"],
        ["b040", "\u7645", 6, "\u764E", 5, "\u7655\u7657", 4, "\u765D\u765F\u7660\u7661\u7662\u7664", 6, "\u766C\u766D\u766E\u7670", 7, "\u7679\u767A\u767C\u767F\u7680\u7681\u7683\u7685\u7689\u768A\u768C\u768D\u768F\u7690\u7692\u7694\u7695\u7697\u7698\u769A\u769B"],
        ["b080", "\u769C", 7, "\u76A5", 8, "\u76AF\u76B0\u76B3\u76B5", 9, "\u76C0\u76C1\u76C3\u554A\u963F\u57C3\u6328\u54CE\u5509\u54C0\u7691\u764C\u853C\u77EE\u827E\u788D\u7231\u9698\u978D\u6C28\u5B89\u4FFA\u6309\u6697\u5CB8\u80FA\u6848\u80AE\u6602\u76CE\u51F9\u6556\u71AC\u7FF1\u8884\u50B2\u5965\u61CA\u6FB3\u82AD\u634C\u6252\u53ED\u5427\u7B06\u516B\u75A4\u5DF4\u62D4\u8DCB\u9776\u628A\u8019\u575D\u9738\u7F62\u7238\u767D\u67CF\u767E\u6446\u4F70\u8D25\u62DC\u7A17\u6591\u73ED\u642C\u6273\u822C\u9881\u677F\u7248\u626E\u62CC\u4F34\u74E3\u534A\u529E\u7ECA\u90A6\u5E2E\u6886\u699C\u8180\u7ED1\u68D2\u78C5\u868C\u9551\u508D\u8C24\u82DE\u80DE\u5305\u8912\u5265"],
        ["b140", "\u76C4\u76C7\u76C9\u76CB\u76CC\u76D3\u76D5\u76D9\u76DA\u76DC\u76DD\u76DE\u76E0", 4, "\u76E6", 7, "\u76F0\u76F3\u76F5\u76F6\u76F7\u76FA\u76FB\u76FD\u76FF\u7700\u7702\u7703\u7705\u7706\u770A\u770C\u770E", 10, "\u771B\u771C\u771D\u771E\u7721\u7723\u7724\u7725\u7727\u772A\u772B"],
        ["b180", "\u772C\u772E\u7730", 4, "\u7739\u773B\u773D\u773E\u773F\u7742\u7744\u7745\u7746\u7748", 7, "\u7752", 7, "\u775C\u8584\u96F9\u4FDD\u5821\u9971\u5B9D\u62B1\u62A5\u66B4\u8C79\u9C8D\u7206\u676F\u7891\u60B2\u5351\u5317\u8F88\u80CC\u8D1D\u94A1\u500D\u72C8\u5907\u60EB\u7119\u88AB\u5954\u82EF\u672C\u7B28\u5D29\u7EF7\u752D\u6CF5\u8E66\u8FF8\u903C\u9F3B\u6BD4\u9119\u7B14\u5F7C\u78A7\u84D6\u853D\u6BD5\u6BD9\u6BD6\u5E01\u5E87\u75F9\u95ED\u655D\u5F0A\u5FC5\u8F9F\u58C1\u81C2\u907F\u965B\u97AD\u8FB9\u7F16\u8D2C\u6241\u4FBF\u53D8\u535E\u8FA8\u8FA9\u8FAB\u904D\u6807\u5F6A\u8198\u8868\u9CD6\u618B\u522B\u762A\u5F6C\u658C\u6FD2\u6EE8\u5BBE\u6448\u5175\u51B0\u67C4\u4E19\u79C9\u997C\u70B3"],
        ["b240", "\u775D\u775E\u775F\u7760\u7764\u7767\u7769\u776A\u776D", 11, "\u777A\u777B\u777C\u7781\u7782\u7783\u7786", 5, "\u778F\u7790\u7793", 11, "\u77A1\u77A3\u77A4\u77A6\u77A8\u77AB\u77AD\u77AE\u77AF\u77B1\u77B2\u77B4\u77B6", 4],
        ["b280", "\u77BC\u77BE\u77C0", 12, "\u77CE", 8, "\u77D8\u77D9\u77DA\u77DD", 4, "\u77E4\u75C5\u5E76\u73BB\u83E0\u64AD\u62E8\u94B5\u6CE2\u535A\u52C3\u640F\u94C2\u7B94\u4F2F\u5E1B\u8236\u8116\u818A\u6E24\u6CCA\u9A73\u6355\u535C\u54FA\u8865\u57E0\u4E0D\u5E03\u6B65\u7C3F\u90E8\u6016\u64E6\u731C\u88C1\u6750\u624D\u8D22\u776C\u8E29\u91C7\u5F69\u83DC\u8521\u9910\u53C2\u8695\u6B8B\u60ED\u60E8\u707F\u82CD\u8231\u4ED3\u6CA7\u85CF\u64CD\u7CD9\u69FD\u66F9\u8349\u5395\u7B56\u4FA7\u518C\u6D4B\u5C42\u8E6D\u63D2\u53C9\u832C\u8336\u67E5\u78B4\u643D\u5BDF\u5C94\u5DEE\u8BE7\u62C6\u67F4\u8C7A\u6400\u63BA\u8749\u998B\u8C17\u7F20\u94F2\u4EA7\u9610\u98A4\u660C\u7316"],
        ["b340", "\u77E6\u77E8\u77EA\u77EF\u77F0\u77F1\u77F2\u77F4\u77F5\u77F7\u77F9\u77FA\u77FB\u77FC\u7803", 5, "\u780A\u780B\u780E\u780F\u7810\u7813\u7815\u7819\u781B\u781E\u7820\u7821\u7822\u7824\u7828\u782A\u782B\u782E\u782F\u7831\u7832\u7833\u7835\u7836\u783D\u783F\u7841\u7842\u7843\u7844\u7846\u7848\u7849\u784A\u784B\u784D\u784F\u7851\u7853\u7854\u7858\u7859\u785A"],
        ["b380", "\u785B\u785C\u785E", 11, "\u786F", 7, "\u7878\u7879\u787A\u787B\u787D", 6, "\u573A\u5C1D\u5E38\u957F\u507F\u80A0\u5382\u655E\u7545\u5531\u5021\u8D85\u6284\u949E\u671D\u5632\u6F6E\u5DE2\u5435\u7092\u8F66\u626F\u64A4\u63A3\u5F7B\u6F88\u90F4\u81E3\u8FB0\u5C18\u6668\u5FF1\u6C89\u9648\u8D81\u886C\u6491\u79F0\u57CE\u6A59\u6210\u5448\u4E58\u7A0B\u60E9\u6F84\u8BDA\u627F\u901E\u9A8B\u79E4\u5403\u75F4\u6301\u5319\u6C60\u8FDF\u5F1B\u9A70\u803B\u9F7F\u4F88\u5C3A\u8D64\u7FC5\u65A5\u70BD\u5145\u51B2\u866B\u5D07\u5BA0\u62BD\u916C\u7574\u8E0C\u7A20\u6101\u7B79\u4EC7\u7EF8\u7785\u4E11\u81ED\u521D\u51FA\u6A71\u53A8\u8E87\u9504\u96CF\u6EC1\u9664\u695A"],
        ["b440", "\u7884\u7885\u7886\u7888\u788A\u788B\u788F\u7890\u7892\u7894\u7895\u7896\u7899\u789D\u789E\u78A0\u78A2\u78A4\u78A6\u78A8", 7, "\u78B5\u78B6\u78B7\u78B8\u78BA\u78BB\u78BC\u78BD\u78BF\u78C0\u78C2\u78C3\u78C4\u78C6\u78C7\u78C8\u78CC\u78CD\u78CE\u78CF\u78D1\u78D2\u78D3\u78D6\u78D7\u78D8\u78DA", 9],
        ["b480", "\u78E4\u78E5\u78E6\u78E7\u78E9\u78EA\u78EB\u78ED", 4, "\u78F3\u78F5\u78F6\u78F8\u78F9\u78FB", 5, "\u7902\u7903\u7904\u7906", 6, "\u7840\u50A8\u77D7\u6410\u89E6\u5904\u63E3\u5DDD\u7A7F\u693D\u4F20\u8239\u5598\u4E32\u75AE\u7A97\u5E62\u5E8A\u95EF\u521B\u5439\u708A\u6376\u9524\u5782\u6625\u693F\u9187\u5507\u6DF3\u7EAF\u8822\u6233\u7EF0\u75B5\u8328\u78C1\u96CC\u8F9E\u6148\u74F7\u8BCD\u6B64\u523A\u8D50\u6B21\u806A\u8471\u56F1\u5306\u4ECE\u4E1B\u51D1\u7C97\u918B\u7C07\u4FC3\u8E7F\u7BE1\u7A9C\u6467\u5D14\u50AC\u8106\u7601\u7CB9\u6DEC\u7FE0\u6751\u5B58\u5BF8\u78CB\u64AE\u6413\u63AA\u632B\u9519\u642D\u8FBE\u7B54\u7629\u6253\u5927\u5446\u6B79\u50A3\u6234\u5E26\u6B86\u4EE3\u8D37\u888B\u5F85\u902E"],
        ["b540", "\u790D", 5, "\u7914", 9, "\u791F", 4, "\u7925", 14, "\u7935", 4, "\u793D\u793F\u7942\u7943\u7944\u7945\u7947\u794A", 8, "\u7954\u7955\u7958\u7959\u7961\u7963"],
        ["b580", "\u7964\u7966\u7969\u796A\u796B\u796C\u796E\u7970", 6, "\u7979\u797B", 4, "\u7982\u7983\u7986\u7987\u7988\u7989\u798B\u798C\u798D\u798E\u7990\u7991\u7992\u6020\u803D\u62C5\u4E39\u5355\u90F8\u63B8\u80C6\u65E6\u6C2E\u4F46\u60EE\u6DE1\u8BDE\u5F39\u86CB\u5F53\u6321\u515A\u8361\u6863\u5200\u6363\u8E48\u5012\u5C9B\u7977\u5BFC\u5230\u7A3B\u60BC\u9053\u76D7\u5FB7\u5F97\u7684\u8E6C\u706F\u767B\u7B49\u77AA\u51F3\u9093\u5824\u4F4E\u6EF4\u8FEA\u654C\u7B1B\u72C4\u6DA4\u7FDF\u5AE1\u62B5\u5E95\u5730\u8482\u7B2C\u5E1D\u5F1F\u9012\u7F14\u98A0\u6382\u6EC7\u7898\u70B9\u5178\u975B\u57AB\u7535\u4F43\u7538\u5E97\u60E6\u5960\u6DC0\u6BBF\u7889\u53FC\u96D5\u51CB\u5201\u6389\u540A\u9493\u8C03\u8DCC\u7239\u789F\u8776\u8FED\u8C0D\u53E0"],
        ["b640", "\u7993", 6, "\u799B", 11, "\u79A8", 10, "\u79B4", 4, "\u79BC\u79BF\u79C2\u79C4\u79C5\u79C7\u79C8\u79CA\u79CC\u79CE\u79CF\u79D0\u79D3\u79D4\u79D6\u79D7\u79D9", 5, "\u79E0\u79E1\u79E2\u79E5\u79E8\u79EA"],
        ["b680", "\u79EC\u79EE\u79F1", 6, "\u79F9\u79FA\u79FC\u79FE\u79FF\u7A01\u7A04\u7A05\u7A07\u7A08\u7A09\u7A0A\u7A0C\u7A0F", 4, "\u7A15\u7A16\u7A18\u7A19\u7A1B\u7A1C\u4E01\u76EF\u53EE\u9489\u9876\u9F0E\u952D\u5B9A\u8BA2\u4E22\u4E1C\u51AC\u8463\u61C2\u52A8\u680B\u4F97\u606B\u51BB\u6D1E\u515C\u6296\u6597\u9661\u8C46\u9017\u75D8\u90FD\u7763\u6BD2\u728A\u72EC\u8BFB\u5835\u7779\u8D4C\u675C\u9540\u809A\u5EA6\u6E21\u5992\u7AEF\u77ED\u953B\u6BB5\u65AD\u7F0E\u5806\u5151\u961F\u5BF9\u58A9\u5428\u8E72\u6566\u987F\u56E4\u949D\u76FE\u9041\u6387\u54C6\u591A\u593A\u579B\u8EB2\u6735\u8DFA\u8235\u5241\u60F0\u5815\u86FE\u5CE8\u9E45\u4FC4\u989D\u8BB9\u5A25\u6076\u5384\u627C\u904F\u9102\u997F\u6069\u800C\u513F\u8033\u5C14\u9975\u6D31\u4E8C"],
        ["b740", "\u7A1D\u7A1F\u7A21\u7A22\u7A24", 14, "\u7A34\u7A35\u7A36\u7A38\u7A3A\u7A3E\u7A40", 5, "\u7A47", 9, "\u7A52", 4, "\u7A58", 16],
        ["b780", "\u7A69", 6, "\u7A71\u7A72\u7A73\u7A75\u7A7B\u7A7C\u7A7D\u7A7E\u7A82\u7A85\u7A87\u7A89\u7A8A\u7A8B\u7A8C\u7A8E\u7A8F\u7A90\u7A93\u7A94\u7A99\u7A9A\u7A9B\u7A9E\u7AA1\u7AA2\u8D30\u53D1\u7F5A\u7B4F\u4F10\u4E4F\u9600\u6CD5\u73D0\u85E9\u5E06\u756A\u7FFB\u6A0A\u77FE\u9492\u7E41\u51E1\u70E6\u53CD\u8FD4\u8303\u8D29\u72AF\u996D\u6CDB\u574A\u82B3\u65B9\u80AA\u623F\u9632\u59A8\u4EFF\u8BBF\u7EBA\u653E\u83F2\u975E\u5561\u98DE\u80A5\u532A\u8BFD\u5420\u80BA\u5E9F\u6CB8\u8D39\u82AC\u915A\u5429\u6C1B\u5206\u7EB7\u575F\u711A\u6C7E\u7C89\u594B\u4EFD\u5FFF\u6124\u7CAA\u4E30\u5C01\u67AB\u8702\u5CF0\u950B\u98CE\u75AF\u70FD\u9022\u51AF\u7F1D\u8BBD\u5949\u51E4\u4F5B\u5426\u592B\u6577\u80A4\u5B75\u6276\u62C2\u8F90\u5E45\u6C1F\u7B26\u4F0F\u4FD8\u670D"],
        ["b840", "\u7AA3\u7AA4\u7AA7\u7AA9\u7AAA\u7AAB\u7AAE", 4, "\u7AB4", 10, "\u7AC0", 10, "\u7ACC", 9, "\u7AD7\u7AD8\u7ADA\u7ADB\u7ADC\u7ADD\u7AE1\u7AE2\u7AE4\u7AE7", 5, "\u7AEE\u7AF0\u7AF1\u7AF2\u7AF3"],
        ["b880", "\u7AF4", 4, "\u7AFB\u7AFC\u7AFE\u7B00\u7B01\u7B02\u7B05\u7B07\u7B09\u7B0C\u7B0D\u7B0E\u7B10\u7B12\u7B13\u7B16\u7B17\u7B18\u7B1A\u7B1C\u7B1D\u7B1F\u7B21\u7B22\u7B23\u7B27\u7B29\u7B2D\u6D6E\u6DAA\u798F\u88B1\u5F17\u752B\u629A\u8F85\u4FEF\u91DC\u65A7\u812F\u8151\u5E9C\u8150\u8D74\u526F\u8986\u8D4B\u590D\u5085\u4ED8\u961C\u7236\u8179\u8D1F\u5BCC\u8BA3\u9644\u5987\u7F1A\u5490\u5676\u560E\u8BE5\u6539\u6982\u9499\u76D6\u6E89\u5E72\u7518\u6746\u67D1\u7AFF\u809D\u8D76\u611F\u79C6\u6562\u8D63\u5188\u521A\u94A2\u7F38\u809B\u7EB2\u5C97\u6E2F\u6760\u7BD9\u768B\u9AD8\u818F\u7F94\u7CD5\u641E\u9550\u7A3F\u544A\u54E5\u6B4C\u6401\u6208\u9E3D\u80F3\u7599\u5272\u9769\u845B\u683C\u86E4\u9601\u9694\u94EC\u4E2A\u5404\u7ED9\u6839\u8DDF\u8015\u66F4\u5E9A\u7FB9"],
        ["b940", "\u7B2F\u7B30\u7B32\u7B34\u7B35\u7B36\u7B37\u7B39\u7B3B\u7B3D\u7B3F", 5, "\u7B46\u7B48\u7B4A\u7B4D\u7B4E\u7B53\u7B55\u7B57\u7B59\u7B5C\u7B5E\u7B5F\u7B61\u7B63", 10, "\u7B6F\u7B70\u7B73\u7B74\u7B76\u7B78\u7B7A\u7B7C\u7B7D\u7B7F\u7B81\u7B82\u7B83\u7B84\u7B86", 6, "\u7B8E\u7B8F"],
        ["b980", "\u7B91\u7B92\u7B93\u7B96\u7B98\u7B99\u7B9A\u7B9B\u7B9E\u7B9F\u7BA0\u7BA3\u7BA4\u7BA5\u7BAE\u7BAF\u7BB0\u7BB2\u7BB3\u7BB5\u7BB6\u7BB7\u7BB9", 7, "\u7BC2\u7BC3\u7BC4\u57C2\u803F\u6897\u5DE5\u653B\u529F\u606D\u9F9A\u4F9B\u8EAC\u516C\u5BAB\u5F13\u5DE9\u6C5E\u62F1\u8D21\u5171\u94A9\u52FE\u6C9F\u82DF\u72D7\u57A2\u6784\u8D2D\u591F\u8F9C\u83C7\u5495\u7B8D\u4F30\u6CBD\u5B64\u59D1\u9F13\u53E4\u86CA\u9AA8\u8C37\u80A1\u6545\u987E\u56FA\u96C7\u522E\u74DC\u5250\u5BE1\u6302\u8902\u4E56\u62D0\u602A\u68FA\u5173\u5B98\u51A0\u89C2\u7BA1\u9986\u7F50\u60EF\u704C\u8D2F\u5149\u5E7F\u901B\u7470\u89C4\u572D\u7845\u5F52\u9F9F\u95FA\u8F68\u9B3C\u8BE1\u7678\u6842\u67DC\u8DEA\u8D35\u523D\u8F8A\u6EDA\u68CD\u9505\u90ED\u56FD\u679C\u88F9\u8FC7\u54C8"],
        ["ba40", "\u7BC5\u7BC8\u7BC9\u7BCA\u7BCB\u7BCD\u7BCE\u7BCF\u7BD0\u7BD2\u7BD4", 4, "\u7BDB\u7BDC\u7BDE\u7BDF\u7BE0\u7BE2\u7BE3\u7BE4\u7BE7\u7BE8\u7BE9\u7BEB\u7BEC\u7BED\u7BEF\u7BF0\u7BF2", 4, "\u7BF8\u7BF9\u7BFA\u7BFB\u7BFD\u7BFF", 7, "\u7C08\u7C09\u7C0A\u7C0D\u7C0E\u7C10", 5, "\u7C17\u7C18\u7C19"],
        ["ba80", "\u7C1A", 4, "\u7C20", 5, "\u7C28\u7C29\u7C2B", 12, "\u7C39", 5, "\u7C42\u9AB8\u5B69\u6D77\u6C26\u4EA5\u5BB3\u9A87\u9163\u61A8\u90AF\u97E9\u542B\u6DB5\u5BD2\u51FD\u558A\u7F55\u7FF0\u64BC\u634D\u65F1\u61BE\u608D\u710A\u6C57\u6C49\u592F\u676D\u822A\u58D5\u568E\u8C6A\u6BEB\u90DD\u597D\u8017\u53F7\u6D69\u5475\u559D\u8377\u83CF\u6838\u79BE\u548C\u4F55\u5408\u76D2\u8C89\u9602\u6CB3\u6DB8\u8D6B\u8910\u9E64\u8D3A\u563F\u9ED1\u75D5\u5F88\u72E0\u6068\u54FC\u4EA8\u6A2A\u8861\u6052\u8F70\u54C4\u70D8\u8679\u9E3F\u6D2A\u5B8F\u5F18\u7EA2\u5589\u4FAF\u7334\u543C\u539A\u5019\u540E\u547C\u4E4E\u5FFD\u745A\u58F6\u846B\u80E1\u8774\u72D0\u7CCA\u6E56"],
        ["bb40", "\u7C43", 9, "\u7C4E", 36, "\u7C75", 5, "\u7C7E", 9],
        ["bb80", "\u7C88\u7C8A", 6, "\u7C93\u7C94\u7C96\u7C99\u7C9A\u7C9B\u7CA0\u7CA1\u7CA3\u7CA6\u7CA7\u7CA8\u7CA9\u7CAB\u7CAC\u7CAD\u7CAF\u7CB0\u7CB4", 4, "\u7CBA\u7CBB\u5F27\u864E\u552C\u62A4\u4E92\u6CAA\u6237\u82B1\u54D7\u534E\u733E\u6ED1\u753B\u5212\u5316\u8BDD\u69D0\u5F8A\u6000\u6DEE\u574F\u6B22\u73AF\u6853\u8FD8\u7F13\u6362\u60A3\u5524\u75EA\u8C62\u7115\u6DA3\u5BA6\u5E7B\u8352\u614C\u9EC4\u78FA\u8757\u7C27\u7687\u51F0\u60F6\u714C\u6643\u5E4C\u604D\u8C0E\u7070\u6325\u8F89\u5FBD\u6062\u86D4\u56DE\u6BC1\u6094\u6167\u5349\u60E0\u6666\u8D3F\u79FD\u4F1A\u70E9\u6C47\u8BB3\u8BF2\u7ED8\u8364\u660F\u5A5A\u9B42\u6D51\u6DF7\u8C41\u6D3B\u4F19\u706B\u83B7\u6216\u60D1\u970D\u8D27\u7978\u51FB\u573E\u57FA\u673A\u7578\u7A3D\u79EF\u7B95"],
        ["bc40", "\u7CBF\u7CC0\u7CC2\u7CC3\u7CC4\u7CC6\u7CC9\u7CCB\u7CCE", 6, "\u7CD8\u7CDA\u7CDB\u7CDD\u7CDE\u7CE1", 6, "\u7CE9", 5, "\u7CF0", 7, "\u7CF9\u7CFA\u7CFC", 13, "\u7D0B", 5],
        ["bc80", "\u7D11", 14, "\u7D21\u7D23\u7D24\u7D25\u7D26\u7D28\u7D29\u7D2A\u7D2C\u7D2D\u7D2E\u7D30", 6, "\u808C\u9965\u8FF9\u6FC0\u8BA5\u9E21\u59EC\u7EE9\u7F09\u5409\u6781\u68D8\u8F91\u7C4D\u96C6\u53CA\u6025\u75BE\u6C72\u5373\u5AC9\u7EA7\u6324\u51E0\u810A\u5DF1\u84DF\u6280\u5180\u5B63\u4F0E\u796D\u5242\u60B8\u6D4E\u5BC4\u5BC2\u8BA1\u8BB0\u65E2\u5FCC\u9645\u5993\u7EE7\u7EAA\u5609\u67B7\u5939\u4F73\u5BB6\u52A0\u835A\u988A\u8D3E\u7532\u94BE\u5047\u7A3C\u4EF7\u67B6\u9A7E\u5AC1\u6B7C\u76D1\u575A\u5C16\u7B3A\u95F4\u714E\u517C\u80A9\u8270\u5978\u7F04\u8327\u68C0\u67EC\u78B1\u7877\u62E3\u6361\u7B80\u4FED\u526A\u51CF\u8350\u69DB\u9274\u8DF5\u8D31\u89C1\u952E\u7BAD\u4EF6"],
        ["bd40", "\u7D37", 54, "\u7D6F", 7],
        ["bd80", "\u7D78", 32, "\u5065\u8230\u5251\u996F\u6E10\u6E85\u6DA7\u5EFA\u50F5\u59DC\u5C06\u6D46\u6C5F\u7586\u848B\u6868\u5956\u8BB2\u5320\u9171\u964D\u8549\u6912\u7901\u7126\u80F6\u4EA4\u90CA\u6D47\u9A84\u5A07\u56BC\u6405\u94F0\u77EB\u4FA5\u811A\u72E1\u89D2\u997A\u7F34\u7EDE\u527F\u6559\u9175\u8F7F\u8F83\u53EB\u7A96\u63ED\u63A5\u7686\u79F8\u8857\u9636\u622A\u52AB\u8282\u6854\u6770\u6377\u776B\u7AED\u6D01\u7ED3\u89E3\u59D0\u6212\u85C9\u82A5\u754C\u501F\u4ECB\u75A5\u8BEB\u5C4A\u5DFE\u7B4B\u65A4\u91D1\u4ECA\u6D25\u895F\u7D27\u9526\u4EC5\u8C28\u8FDB\u9773\u664B\u7981\u8FD1\u70EC\u6D78"],
        ["be40", "\u7D99", 12, "\u7DA7", 6, "\u7DAF", 42],
        ["be80", "\u7DDA", 32, "\u5C3D\u52B2\u8346\u5162\u830E\u775B\u6676\u9CB8\u4EAC\u60CA\u7CBE\u7CB3\u7ECF\u4E95\u8B66\u666F\u9888\u9759\u5883\u656C\u955C\u5F84\u75C9\u9756\u7ADF\u7ADE\u51C0\u70AF\u7A98\u63EA\u7A76\u7EA0\u7396\u97ED\u4E45\u7078\u4E5D\u9152\u53A9\u6551\u65E7\u81FC\u8205\u548E\u5C31\u759A\u97A0\u62D8\u72D9\u75BD\u5C45\u9A79\u83CA\u5C40\u5480\u77E9\u4E3E\u6CAE\u805A\u62D2\u636E\u5DE8\u5177\u8DDD\u8E1E\u952F\u4FF1\u53E5\u60E7\u70AC\u5267\u6350\u9E43\u5A1F\u5026\u7737\u5377\u7EE2\u6485\u652B\u6289\u6398\u5014\u7235\u89C9\u51B3\u8BC0\u7EDD\u5747\u83CC\u94A7\u519B\u541B\u5CFB"],
        ["bf40", "\u7DFB", 62],
        ["bf80", "\u7E3A\u7E3C", 4, "\u7E42", 4, "\u7E48", 21, "\u4FCA\u7AE3\u6D5A\u90E1\u9A8F\u5580\u5496\u5361\u54AF\u5F00\u63E9\u6977\u51EF\u6168\u520A\u582A\u52D8\u574E\u780D\u770B\u5EB7\u6177\u7CE0\u625B\u6297\u4EA2\u7095\u8003\u62F7\u70E4\u9760\u5777\u82DB\u67EF\u68F5\u78D5\u9897\u79D1\u58F3\u54B3\u53EF\u6E34\u514B\u523B\u5BA2\u8BFE\u80AF\u5543\u57A6\u6073\u5751\u542D\u7A7A\u6050\u5B54\u63A7\u62A0\u53E3\u6263\u5BC7\u67AF\u54ED\u7A9F\u82E6\u9177\u5E93\u88E4\u5938\u57AE\u630E\u8DE8\u80EF\u5757\u7B77\u4FA9\u5FEB\u5BBD\u6B3E\u5321\u7B50\u72C2\u6846\u77FF\u7736\u65F7\u51B5\u4E8F\u76D4\u5CBF\u7AA5\u8475\u594E\u9B41\u5080"],
        ["c040", "\u7E5E", 35, "\u7E83", 23, "\u7E9C\u7E9D\u7E9E"],
        ["c080", "\u7EAE\u7EB4\u7EBB\u7EBC\u7ED6\u7EE4\u7EEC\u7EF9\u7F0A\u7F10\u7F1E\u7F37\u7F39\u7F3B", 6, "\u7F43\u7F46", 9, "\u7F52\u7F53\u9988\u6127\u6E83\u5764\u6606\u6346\u56F0\u62EC\u6269\u5ED3\u9614\u5783\u62C9\u5587\u8721\u814A\u8FA3\u5566\u83B1\u6765\u8D56\u84DD\u5A6A\u680F\u62E6\u7BEE\u9611\u5170\u6F9C\u8C30\u63FD\u89C8\u61D2\u7F06\u70C2\u6EE5\u7405\u6994\u72FC\u5ECA\u90CE\u6717\u6D6A\u635E\u52B3\u7262\u8001\u4F6C\u59E5\u916A\u70D9\u6D9D\u52D2\u4E50\u96F7\u956D\u857E\u78CA\u7D2F\u5121\u5792\u64C2\u808B\u7C7B\u6CEA\u68F1\u695E\u51B7\u5398\u68A8\u7281\u9ECE\u7BF1\u72F8\u79BB\u6F13\u7406\u674E\u91CC\u9CA4\u793C\u8389\u8354\u540F\u6817\u4E3D\u5389\u52B1\u783E\u5386\u5229\u5088\u4F8B\u4FD0"],
        ["c140", "\u7F56\u7F59\u7F5B\u7F5C\u7F5D\u7F5E\u7F60\u7F63", 4, "\u7F6B\u7F6C\u7F6D\u7F6F\u7F70\u7F73\u7F75\u7F76\u7F77\u7F78\u7F7A\u7F7B\u7F7C\u7F7D\u7F7F\u7F80\u7F82", 7, "\u7F8B\u7F8D\u7F8F", 4, "\u7F95", 4, "\u7F9B\u7F9C\u7FA0\u7FA2\u7FA3\u7FA5\u7FA6\u7FA8", 6, "\u7FB1"],
        ["c180", "\u7FB3", 4, "\u7FBA\u7FBB\u7FBE\u7FC0\u7FC2\u7FC3\u7FC4\u7FC6\u7FC7\u7FC8\u7FC9\u7FCB\u7FCD\u7FCF", 4, "\u7FD6\u7FD7\u7FD9", 5, "\u7FE2\u7FE3\u75E2\u7ACB\u7C92\u6CA5\u96B6\u529B\u7483\u54E9\u4FE9\u8054\u83B2\u8FDE\u9570\u5EC9\u601C\u6D9F\u5E18\u655B\u8138\u94FE\u604B\u70BC\u7EC3\u7CAE\u51C9\u6881\u7CB1\u826F\u4E24\u8F86\u91CF\u667E\u4EAE\u8C05\u64A9\u804A\u50DA\u7597\u71CE\u5BE5\u8FBD\u6F66\u4E86\u6482\u9563\u5ED6\u6599\u5217\u88C2\u70C8\u52A3\u730E\u7433\u6797\u78F7\u9716\u4E34\u90BB\u9CDE\u6DCB\u51DB\u8D41\u541D\u62CE\u73B2\u83F1\u96F6\u9F84\u94C3\u4F36\u7F9A\u51CC\u7075\u9675\u5CAD\u9886\u53E6\u4EE4\u6E9C\u7409\u69B4\u786B\u998F\u7559\u5218\u7624\u6D41\u67F3\u516D\u9F99\u804B\u5499\u7B3C\u7ABF"],
        ["c240", "\u7FE4\u7FE7\u7FE8\u7FEA\u7FEB\u7FEC\u7FED\u7FEF\u7FF2\u7FF4", 6, "\u7FFD\u7FFE\u7FFF\u8002\u8007\u8008\u8009\u800A\u800E\u800F\u8011\u8013\u801A\u801B\u801D\u801E\u801F\u8021\u8023\u8024\u802B", 5, "\u8032\u8034\u8039\u803A\u803C\u803E\u8040\u8041\u8044\u8045\u8047\u8048\u8049\u804E\u804F\u8050\u8051\u8053\u8055\u8056\u8057"],
        ["c280", "\u8059\u805B", 13, "\u806B", 5, "\u8072", 11, "\u9686\u5784\u62E2\u9647\u697C\u5A04\u6402\u7BD3\u6F0F\u964B\u82A6\u5362\u9885\u5E90\u7089\u63B3\u5364\u864F\u9C81\u9E93\u788C\u9732\u8DEF\u8D42\u9E7F\u6F5E\u7984\u5F55\u9646\u622E\u9A74\u5415\u94DD\u4FA3\u65C5\u5C65\u5C61\u7F15\u8651\u6C2F\u5F8B\u7387\u6EE4\u7EFF\u5CE6\u631B\u5B6A\u6EE6\u5375\u4E71\u63A0\u7565\u62A1\u8F6E\u4F26\u4ED1\u6CA6\u7EB6\u8BBA\u841D\u87BA\u7F57\u903B\u9523\u7BA9\u9AA1\u88F8\u843D\u6D1B\u9A86\u7EDC\u5988\u9EBB\u739B\u7801\u8682\u9A6C\u9A82\u561B\u5417\u57CB\u4E70\u9EA6\u5356\u8FC8\u8109\u7792\u9992\u86EE\u6EE1\u8513\u66FC\u6162\u6F2B"],
        ["c340", "\u807E\u8081\u8082\u8085\u8088\u808A\u808D", 5, "\u8094\u8095\u8097\u8099\u809E\u80A3\u80A6\u80A7\u80A8\u80AC\u80B0\u80B3\u80B5\u80B6\u80B8\u80B9\u80BB\u80C5\u80C7", 4, "\u80CF", 6, "\u80D8\u80DF\u80E0\u80E2\u80E3\u80E6\u80EE\u80F5\u80F7\u80F9\u80FB\u80FE\u80FF\u8100\u8101\u8103\u8104\u8105\u8107\u8108\u810B"],
        ["c380", "\u810C\u8115\u8117\u8119\u811B\u811C\u811D\u811F", 12, "\u812D\u812E\u8130\u8133\u8134\u8135\u8137\u8139", 4, "\u813F\u8C29\u8292\u832B\u76F2\u6C13\u5FD9\u83BD\u732B\u8305\u951A\u6BDB\u77DB\u94C6\u536F\u8302\u5192\u5E3D\u8C8C\u8D38\u4E48\u73AB\u679A\u6885\u9176\u9709\u7164\u6CA1\u7709\u5A92\u9541\u6BCF\u7F8E\u6627\u5BD0\u59B9\u5A9A\u95E8\u95F7\u4EEC\u840C\u8499\u6AAC\u76DF\u9530\u731B\u68A6\u5B5F\u772F\u919A\u9761\u7CDC\u8FF7\u8C1C\u5F25\u7C73\u79D8\u89C5\u6CCC\u871C\u5BC6\u5E42\u68C9\u7720\u7EF5\u5195\u514D\u52C9\u5A29\u7F05\u9762\u82D7\u63CF\u7784\u85D0\u79D2\u6E3A\u5E99\u5999\u8511\u706D\u6C11\u62BF\u76BF\u654F\u60AF\u95FD\u660E\u879F\u9E23\u94ED\u540D\u547D\u8C2C\u6478"],
        ["c440", "\u8140", 5, "\u8147\u8149\u814D\u814E\u814F\u8152\u8156\u8157\u8158\u815B", 4, "\u8161\u8162\u8163\u8164\u8166\u8168\u816A\u816B\u816C\u816F\u8172\u8173\u8175\u8176\u8177\u8178\u8181\u8183", 4, "\u8189\u818B\u818C\u818D\u818E\u8190\u8192", 5, "\u8199\u819A\u819E", 4, "\u81A4\u81A5"],
        ["c480", "\u81A7\u81A9\u81AB", 7, "\u81B4", 5, "\u81BC\u81BD\u81BE\u81BF\u81C4\u81C5\u81C7\u81C8\u81C9\u81CB\u81CD", 6, "\u6479\u8611\u6A21\u819C\u78E8\u6469\u9B54\u62B9\u672B\u83AB\u58A8\u9ED8\u6CAB\u6F20\u5BDE\u964C\u8C0B\u725F\u67D0\u62C7\u7261\u4EA9\u59C6\u6BCD\u5893\u66AE\u5E55\u52DF\u6155\u6728\u76EE\u7766\u7267\u7A46\u62FF\u54EA\u5450\u94A0\u90A3\u5A1C\u7EB3\u6C16\u4E43\u5976\u8010\u5948\u5357\u7537\u96BE\u56CA\u6320\u8111\u607C\u95F9\u6DD6\u5462\u9981\u5185\u5AE9\u80FD\u59AE\u9713\u502A\u6CE5\u5C3C\u62DF\u4F60\u533F\u817B\u9006\u6EBA\u852B\u62C8\u5E74\u78BE\u64B5\u637B\u5FF5\u5A18\u917F\u9E1F\u5C3F\u634F\u8042\u5B7D\u556E\u954A\u954D\u6D85\u60A8\u67E0\u72DE\u51DD\u5B81"],
        ["c540", "\u81D4", 14, "\u81E4\u81E5\u81E6\u81E8\u81E9\u81EB\u81EE", 4, "\u81F5", 5, "\u81FD\u81FF\u8203\u8207", 4, "\u820E\u820F\u8211\u8213\u8215", 5, "\u821D\u8220\u8224\u8225\u8226\u8227\u8229\u822E\u8232\u823A\u823C\u823D\u823F"],
        ["c580", "\u8240\u8241\u8242\u8243\u8245\u8246\u8248\u824A\u824C\u824D\u824E\u8250", 7, "\u8259\u825B\u825C\u825D\u825E\u8260", 7, "\u8269\u62E7\u6CDE\u725B\u626D\u94AE\u7EBD\u8113\u6D53\u519C\u5F04\u5974\u52AA\u6012\u5973\u6696\u8650\u759F\u632A\u61E6\u7CEF\u8BFA\u54E6\u6B27\u9E25\u6BB4\u85D5\u5455\u5076\u6CA4\u556A\u8DB4\u722C\u5E15\u6015\u7436\u62CD\u6392\u724C\u5F98\u6E43\u6D3E\u6500\u6F58\u76D8\u78D0\u76FC\u7554\u5224\u53DB\u4E53\u5E9E\u65C1\u802A\u80D6\u629B\u5486\u5228\u70AE\u888D\u8DD1\u6CE1\u5478\u80DA\u57F9\u88F4\u8D54\u966A\u914D\u4F69\u6C9B\u55B7\u76C6\u7830\u62A8\u70F9\u6F8E\u5F6D\u84EC\u68DA\u787C\u7BF7\u81A8\u670B\u9E4F\u6367\u78B0\u576F\u7812\u9739\u6279\u62AB\u5288\u7435\u6BD7"],
        ["c640", "\u826A\u826B\u826C\u826D\u8271\u8275\u8276\u8277\u8278\u827B\u827C\u8280\u8281\u8283\u8285\u8286\u8287\u8289\u828C\u8290\u8293\u8294\u8295\u8296\u829A\u829B\u829E\u82A0\u82A2\u82A3\u82A7\u82B2\u82B5\u82B6\u82BA\u82BB\u82BC\u82BF\u82C0\u82C2\u82C3\u82C5\u82C6\u82C9\u82D0\u82D6\u82D9\u82DA\u82DD\u82E2\u82E7\u82E8\u82E9\u82EA\u82EC\u82ED\u82EE\u82F0\u82F2\u82F3\u82F5\u82F6\u82F8"],
        ["c680", "\u82FA\u82FC", 4, "\u830A\u830B\u830D\u8310\u8312\u8313\u8316\u8318\u8319\u831D", 9, "\u8329\u832A\u832E\u8330\u8332\u8337\u833B\u833D\u5564\u813E\u75B2\u76AE\u5339\u75DE\u50FB\u5C41\u8B6C\u7BC7\u504F\u7247\u9A97\u98D8\u6F02\u74E2\u7968\u6487\u77A5\u62FC\u9891\u8D2B\u54C1\u8058\u4E52\u576A\u82F9\u840D\u5E73\u51ED\u74F6\u8BC4\u5C4F\u5761\u6CFC\u9887\u5A46\u7834\u9B44\u8FEB\u7C95\u5256\u6251\u94FA\u4EC6\u8386\u8461\u83E9\u84B2\u57D4\u6734\u5703\u666E\u6D66\u8C31\u66DD\u7011\u671F\u6B3A\u6816\u621A\u59BB\u4E03\u51C4\u6F06\u67D2\u6C8F\u5176\u68CB\u5947\u6B67\u7566\u5D0E\u8110\u9F50\u65D7\u7948\u7941\u9A91\u8D77\u5C82\u4E5E\u4F01\u542F\u5951\u780C\u5668\u6C14\u8FC4\u5F03\u6C7D\u6CE3\u8BAB\u6390"],
        ["c740", "\u833E\u833F\u8341\u8342\u8344\u8345\u8348\u834A", 4, "\u8353\u8355", 4, "\u835D\u8362\u8370", 6, "\u8379\u837A\u837E", 6, "\u8387\u8388\u838A\u838B\u838C\u838D\u838F\u8390\u8391\u8394\u8395\u8396\u8397\u8399\u839A\u839D\u839F\u83A1", 6, "\u83AC\u83AD\u83AE"],
        ["c780", "\u83AF\u83B5\u83BB\u83BE\u83BF\u83C2\u83C3\u83C4\u83C6\u83C8\u83C9\u83CB\u83CD\u83CE\u83D0\u83D1\u83D2\u83D3\u83D5\u83D7\u83D9\u83DA\u83DB\u83DE\u83E2\u83E3\u83E4\u83E6\u83E7\u83E8\u83EB\u83EC\u83ED\u6070\u6D3D\u7275\u6266\u948E\u94C5\u5343\u8FC1\u7B7E\u4EDF\u8C26\u4E7E\u9ED4\u94B1\u94B3\u524D\u6F5C\u9063\u6D45\u8C34\u5811\u5D4C\u6B20\u6B49\u67AA\u545B\u8154\u7F8C\u5899\u8537\u5F3A\u62A2\u6A47\u9539\u6572\u6084\u6865\u77A7\u4E54\u4FA8\u5DE7\u9798\u64AC\u7FD8\u5CED\u4FCF\u7A8D\u5207\u8304\u4E14\u602F\u7A83\u94A6\u4FB5\u4EB2\u79E6\u7434\u52E4\u82B9\u64D2\u79BD\u5BDD\u6C81\u9752\u8F7B\u6C22\u503E\u537F\u6E05\u64CE\u6674\u6C30\u60C5\u9877\u8BF7\u5E86\u743C\u7A77\u79CB\u4E18\u90B1\u7403\u6C42\u56DA\u914B\u6CC5\u8D8B\u533A\u86C6\u66F2\u8EAF\u5C48\u9A71\u6E20"],
        ["c840", "\u83EE\u83EF\u83F3", 4, "\u83FA\u83FB\u83FC\u83FE\u83FF\u8400\u8402\u8405\u8407\u8408\u8409\u840A\u8410\u8412", 5, "\u8419\u841A\u841B\u841E", 5, "\u8429", 7, "\u8432", 5, "\u8439\u843A\u843B\u843E", 7, "\u8447\u8448\u8449"],
        ["c880", "\u844A", 6, "\u8452", 4, "\u8458\u845D\u845E\u845F\u8460\u8462\u8464", 4, "\u846A\u846E\u846F\u8470\u8472\u8474\u8477\u8479\u847B\u847C\u53D6\u5A36\u9F8B\u8DA3\u53BB\u5708\u98A7\u6743\u919B\u6CC9\u5168\u75CA\u62F3\u72AC\u5238\u529D\u7F3A\u7094\u7638\u5374\u9E4A\u69B7\u786E\u96C0\u88D9\u7FA4\u7136\u71C3\u5189\u67D3\u74E4\u58E4\u6518\u56B7\u8BA9\u9976\u6270\u7ED5\u60F9\u70ED\u58EC\u4EC1\u4EBA\u5FCD\u97E7\u4EFB\u8BA4\u5203\u598A\u7EAB\u6254\u4ECD\u65E5\u620E\u8338\u84C9\u8363\u878D\u7194\u6EB6\u5BB9\u7ED2\u5197\u63C9\u67D4\u8089\u8339\u8815\u5112\u5B7A\u5982\u8FB1\u4E73\u6C5D\u5165\u8925\u8F6F\u962E\u854A\u745E\u9510\u95F0\u6DA6\u82E5\u5F31\u6492\u6D12\u8428\u816E\u9CC3\u585E\u8D5B\u4E09\u53C1"],
        ["c940", "\u847D", 4, "\u8483\u8484\u8485\u8486\u848A\u848D\u848F", 7, "\u8498\u849A\u849B\u849D\u849E\u849F\u84A0\u84A2", 12, "\u84B0\u84B1\u84B3\u84B5\u84B6\u84B7\u84BB\u84BC\u84BE\u84C0\u84C2\u84C3\u84C5\u84C6\u84C7\u84C8\u84CB\u84CC\u84CE\u84CF\u84D2\u84D4\u84D5\u84D7"],
        ["c980", "\u84D8", 4, "\u84DE\u84E1\u84E2\u84E4\u84E7", 4, "\u84ED\u84EE\u84EF\u84F1", 10, "\u84FD\u84FE\u8500\u8501\u8502\u4F1E\u6563\u6851\u55D3\u4E27\u6414\u9A9A\u626B\u5AC2\u745F\u8272\u6DA9\u68EE\u50E7\u838E\u7802\u6740\u5239\u6C99\u7EB1\u50BB\u5565\u715E\u7B5B\u6652\u73CA\u82EB\u6749\u5C71\u5220\u717D\u886B\u95EA\u9655\u64C5\u8D61\u81B3\u5584\u6C55\u6247\u7F2E\u5892\u4F24\u5546\u8D4F\u664C\u4E0A\u5C1A\u88F3\u68A2\u634E\u7A0D\u70E7\u828D\u52FA\u97F6\u5C11\u54E8\u90B5\u7ECD\u5962\u8D4A\u86C7\u820C\u820D\u8D66\u6444\u5C04\u6151\u6D89\u793E\u8BBE\u7837\u7533\u547B\u4F38\u8EAB\u6DF1\u5A20\u7EC5\u795E\u6C88\u5BA1\u5A76\u751A\u80BE\u614E\u6E17\u58F0\u751F\u7525\u7272\u5347\u7EF3"],
        ["ca40", "\u8503", 8, "\u850D\u850E\u850F\u8510\u8512\u8514\u8515\u8516\u8518\u8519\u851B\u851C\u851D\u851E\u8520\u8522", 8, "\u852D", 9, "\u853E", 4, "\u8544\u8545\u8546\u8547\u854B", 10],
        ["ca80", "\u8557\u8558\u855A\u855B\u855C\u855D\u855F", 4, "\u8565\u8566\u8567\u8569", 8, "\u8573\u8575\u8576\u8577\u8578\u857C\u857D\u857F\u8580\u8581\u7701\u76DB\u5269\u80DC\u5723\u5E08\u5931\u72EE\u65BD\u6E7F\u8BD7\u5C38\u8671\u5341\u77F3\u62FE\u65F6\u4EC0\u98DF\u8680\u5B9E\u8BC6\u53F2\u77E2\u4F7F\u5C4E\u9A76\u59CB\u5F0F\u793A\u58EB\u4E16\u67FF\u4E8B\u62ED\u8A93\u901D\u52BF\u662F\u55DC\u566C\u9002\u4ED5\u4F8D\u91CA\u9970\u6C0F\u5E02\u6043\u5BA4\u89C6\u8BD5\u6536\u624B\u9996\u5B88\u5BFF\u6388\u552E\u53D7\u7626\u517D\u852C\u67A2\u68B3\u6B8A\u6292\u8F93\u53D4\u8212\u6DD1\u758F\u4E66\u8D4E\u5B70\u719F\u85AF\u6691\u66D9\u7F72\u8700\u9ECD\u9F20\u5C5E\u672F\u8FF0\u6811\u675F\u620D\u7AD6\u5885\u5EB6\u6570\u6F31"],
        ["cb40", "\u8582\u8583\u8586\u8588", 6, "\u8590", 10, "\u859D", 6, "\u85A5\u85A6\u85A7\u85A9\u85AB\u85AC\u85AD\u85B1", 5, "\u85B8\u85BA", 6, "\u85C2", 6, "\u85CA", 4, "\u85D1\u85D2"],
        ["cb80", "\u85D4\u85D6", 5, "\u85DD", 6, "\u85E5\u85E6\u85E7\u85E8\u85EA", 14, "\u6055\u5237\u800D\u6454\u8870\u7529\u5E05\u6813\u62F4\u971C\u53CC\u723D\u8C01\u6C34\u7761\u7A0E\u542E\u77AC\u987A\u821C\u8BF4\u7855\u6714\u70C1\u65AF\u6495\u5636\u601D\u79C1\u53F8\u4E1D\u6B7B\u8086\u5BFA\u55E3\u56DB\u4F3A\u4F3C\u9972\u5DF3\u677E\u8038\u6002\u9882\u9001\u5B8B\u8BBC\u8BF5\u641C\u8258\u64DE\u55FD\u82CF\u9165\u4FD7\u7D20\u901F\u7C9F\u50F3\u5851\u6EAF\u5BBF\u8BC9\u8083\u9178\u849C\u7B97\u867D\u968B\u968F\u7EE5\u9AD3\u788E\u5C81\u7A57\u9042\u96A7\u795F\u5B59\u635F\u7B0B\u84D1\u68AD\u5506\u7F29\u7410\u7D22\u9501\u6240\u584C\u4ED6\u5B83\u5979\u5854"],
        ["cc40", "\u85F9\u85FA\u85FC\u85FD\u85FE\u8600", 4, "\u8606", 10, "\u8612\u8613\u8614\u8615\u8617", 15, "\u8628\u862A", 13, "\u8639\u863A\u863B\u863D\u863E\u863F\u8640"],
        ["cc80", "\u8641", 11, "\u8652\u8653\u8655", 4, "\u865B\u865C\u865D\u865F\u8660\u8661\u8663", 7, "\u736D\u631E\u8E4B\u8E0F\u80CE\u82D4\u62AC\u53F0\u6CF0\u915E\u592A\u6001\u6C70\u574D\u644A\u8D2A\u762B\u6EE9\u575B\u6A80\u75F0\u6F6D\u8C2D\u8C08\u5766\u6BEF\u8892\u78B3\u63A2\u53F9\u70AD\u6C64\u5858\u642A\u5802\u68E0\u819B\u5510\u7CD6\u5018\u8EBA\u6DCC\u8D9F\u70EB\u638F\u6D9B\u6ED4\u7EE6\u8404\u6843\u9003\u6DD8\u9676\u8BA8\u5957\u7279\u85E4\u817E\u75BC\u8A8A\u68AF\u5254\u8E22\u9511\u63D0\u9898\u8E44\u557C\u4F53\u66FF\u568F\u60D5\u6D95\u5243\u5C49\u5929\u6DFB\u586B\u7530\u751C\u606C\u8214\u8146\u6311\u6761\u8FE2\u773A\u8DF3\u8D34\u94C1\u5E16\u5385\u542C\u70C3"],
        ["cd40", "\u866D\u866F\u8670\u8672", 6, "\u8683", 6, "\u868E", 4, "\u8694\u8696", 5, "\u869E", 4, "\u86A5\u86A6\u86AB\u86AD\u86AE\u86B2\u86B3\u86B7\u86B8\u86B9\u86BB", 4, "\u86C1\u86C2\u86C3\u86C5\u86C8\u86CC\u86CD\u86D2\u86D3\u86D5\u86D6\u86D7\u86DA\u86DC"],
        ["cd80", "\u86DD\u86E0\u86E1\u86E2\u86E3\u86E5\u86E6\u86E7\u86E8\u86EA\u86EB\u86EC\u86EF\u86F5\u86F6\u86F7\u86FA\u86FB\u86FC\u86FD\u86FF\u8701\u8704\u8705\u8706\u870B\u870C\u870E\u870F\u8710\u8711\u8714\u8716\u6C40\u5EF7\u505C\u4EAD\u5EAD\u633A\u8247\u901A\u6850\u916E\u77B3\u540C\u94DC\u5F64\u7AE5\u6876\u6345\u7B52\u7EDF\u75DB\u5077\u6295\u5934\u900F\u51F8\u79C3\u7A81\u56FE\u5F92\u9014\u6D82\u5C60\u571F\u5410\u5154\u6E4D\u56E2\u63A8\u9893\u817F\u8715\u892A\u9000\u541E\u5C6F\u81C0\u62D6\u6258\u8131\u9E35\u9640\u9A6E\u9A7C\u692D\u59A5\u62D3\u553E\u6316\u54C7\u86D9\u6D3C\u5A03\u74E6\u889C\u6B6A\u5916\u8C4C\u5F2F\u6E7E\u73A9\u987D\u4E38\u70F7\u5B8C\u7897\u633D\u665A\u7696\u60CB\u5B9B\u5A49\u4E07\u8155\u6C6A\u738B\u4EA1\u6789\u7F51\u5F80\u65FA\u671B\u5FD8\u5984\u5A01"],
        ["ce40", "\u8719\u871B\u871D\u871F\u8720\u8724\u8726\u8727\u8728\u872A\u872B\u872C\u872D\u872F\u8730\u8732\u8733\u8735\u8736\u8738\u8739\u873A\u873C\u873D\u8740", 6, "\u874A\u874B\u874D\u874F\u8750\u8751\u8752\u8754\u8755\u8756\u8758\u875A", 5, "\u8761\u8762\u8766", 7, "\u876F\u8771\u8772\u8773\u8775"],
        ["ce80", "\u8777\u8778\u8779\u877A\u877F\u8780\u8781\u8784\u8786\u8787\u8789\u878A\u878C\u878E", 4, "\u8794\u8795\u8796\u8798", 6, "\u87A0", 4, "\u5DCD\u5FAE\u5371\u97E6\u8FDD\u6845\u56F4\u552F\u60DF\u4E3A\u6F4D\u7EF4\u82C7\u840E\u59D4\u4F1F\u4F2A\u5C3E\u7EAC\u672A\u851A\u5473\u754F\u80C3\u5582\u9B4F\u4F4D\u6E2D\u8C13\u5C09\u6170\u536B\u761F\u6E29\u868A\u6587\u95FB\u7EB9\u543B\u7A33\u7D0A\u95EE\u55E1\u7FC1\u74EE\u631D\u8717\u6DA1\u7A9D\u6211\u65A1\u5367\u63E1\u6C83\u5DEB\u545C\u94A8\u4E4C\u6C61\u8BEC\u5C4B\u65E0\u829C\u68A7\u543E\u5434\u6BCB\u6B66\u4E94\u6342\u5348\u821E\u4F0D\u4FAE\u575E\u620A\u96FE\u6664\u7269\u52FF\u52A1\u609F\u8BEF\u6614\u7199\u6790\u897F\u7852\u77FD\u6670\u563B\u5438\u9521\u727A"],
        ["cf40", "\u87A5\u87A6\u87A7\u87A9\u87AA\u87AE\u87B0\u87B1\u87B2\u87B4\u87B6\u87B7\u87B8\u87B9\u87BB\u87BC\u87BE\u87BF\u87C1", 4, "\u87C7\u87C8\u87C9\u87CC", 4, "\u87D4", 6, "\u87DC\u87DD\u87DE\u87DF\u87E1\u87E2\u87E3\u87E4\u87E6\u87E7\u87E8\u87E9\u87EB\u87EC\u87ED\u87EF", 9],
        ["cf80", "\u87FA\u87FB\u87FC\u87FD\u87FF\u8800\u8801\u8802\u8804", 5, "\u880B", 7, "\u8814\u8817\u8818\u8819\u881A\u881C", 4, "\u8823\u7A00\u606F\u5E0C\u6089\u819D\u5915\u60DC\u7184\u70EF\u6EAA\u6C50\u7280\u6A84\u88AD\u5E2D\u4E60\u5AB3\u559C\u94E3\u6D17\u7CFB\u9699\u620F\u7EC6\u778E\u867E\u5323\u971E\u8F96\u6687\u5CE1\u4FA0\u72ED\u4E0B\u53A6\u590F\u5413\u6380\u9528\u5148\u4ED9\u9C9C\u7EA4\u54B8\u8D24\u8854\u8237\u95F2\u6D8E\u5F26\u5ACC\u663E\u9669\u73B0\u732E\u53BF\u817A\u9985\u7FA1\u5BAA\u9677\u9650\u7EBF\u76F8\u53A2\u9576\u9999\u7BB1\u8944\u6E58\u4E61\u7FD4\u7965\u8BE6\u60F3\u54CD\u4EAB\u9879\u5DF7\u6A61\u50CF\u5411\u8C61\u8427\u785D\u9704\u524A\u54EE\u56A3\u9500\u6D88\u5BB5\u6DC6\u6653"],
        ["d040", "\u8824", 13, "\u8833", 5, "\u883A\u883B\u883D\u883E\u883F\u8841\u8842\u8843\u8846", 5, "\u884E", 5, "\u8855\u8856\u8858\u885A", 6, "\u8866\u8867\u886A\u886D\u886F\u8871\u8873\u8874\u8875\u8876\u8878\u8879\u887A"],
        ["d080", "\u887B\u887C\u8880\u8883\u8886\u8887\u8889\u888A\u888C\u888E\u888F\u8890\u8891\u8893\u8894\u8895\u8897", 4, "\u889D", 4, "\u88A3\u88A5", 5, "\u5C0F\u5B5D\u6821\u8096\u5578\u7B11\u6548\u6954\u4E9B\u6B47\u874E\u978B\u534F\u631F\u643A\u90AA\u659C\u80C1\u8C10\u5199\u68B0\u5378\u87F9\u61C8\u6CC4\u6CFB\u8C22\u5C51\u85AA\u82AF\u950C\u6B23\u8F9B\u65B0\u5FFB\u5FC3\u4FE1\u8845\u661F\u8165\u7329\u60FA\u5174\u5211\u578B\u5F62\u90A2\u884C\u9192\u5E78\u674F\u6027\u59D3\u5144\u51F6\u80F8\u5308\u6C79\u96C4\u718A\u4F11\u4FEE\u7F9E\u673D\u55C5\u9508\u79C0\u8896\u7EE3\u589F\u620C\u9700\u865A\u5618\u987B\u5F90\u8BB8\u84C4\u9157\u53D9\u65ED\u5E8F\u755C\u6064\u7D6E\u5A7F\u7EEA\u7EED\u8F69\u55A7\u5BA3\u60AC\u65CB\u7384"],
        ["d140", "\u88AC\u88AE\u88AF\u88B0\u88B2", 4, "\u88B8\u88B9\u88BA\u88BB\u88BD\u88BE\u88BF\u88C0\u88C3\u88C4\u88C7\u88C8\u88CA\u88CB\u88CC\u88CD\u88CF\u88D0\u88D1\u88D3\u88D6\u88D7\u88DA", 4, "\u88E0\u88E1\u88E6\u88E7\u88E9", 6, "\u88F2\u88F5\u88F6\u88F7\u88FA\u88FB\u88FD\u88FF\u8900\u8901\u8903", 5],
        ["d180", "\u8909\u890B", 4, "\u8911\u8914", 4, "\u891C", 4, "\u8922\u8923\u8924\u8926\u8927\u8928\u8929\u892C\u892D\u892E\u892F\u8931\u8932\u8933\u8935\u8937\u9009\u7663\u7729\u7EDA\u9774\u859B\u5B66\u7A74\u96EA\u8840\u52CB\u718F\u5FAA\u65EC\u8BE2\u5BFB\u9A6F\u5DE1\u6B89\u6C5B\u8BAD\u8BAF\u900A\u8FC5\u538B\u62BC\u9E26\u9E2D\u5440\u4E2B\u82BD\u7259\u869C\u5D16\u8859\u6DAF\u96C5\u54D1\u4E9A\u8BB6\u7109\u54BD\u9609\u70DF\u6DF9\u76D0\u4E25\u7814\u8712\u5CA9\u5EF6\u8A00\u989C\u960E\u708E\u6CBF\u5944\u63A9\u773C\u884D\u6F14\u8273\u5830\u71D5\u538C\u781A\u96C1\u5501\u5F66\u7130\u5BB4\u8C1A\u9A8C\u6B83\u592E\u9E2F\u79E7\u6768\u626C\u4F6F\u75A1\u7F8A\u6D0B\u9633\u6C27\u4EF0\u75D2\u517B\u6837\u6F3E\u9080\u8170\u5996\u7476"],
        ["d240", "\u8938", 8, "\u8942\u8943\u8945", 24, "\u8960", 5, "\u8967", 19, "\u897C"],
        ["d280", "\u897D\u897E\u8980\u8982\u8984\u8985\u8987", 26, "\u6447\u5C27\u9065\u7A91\u8C23\u59DA\u54AC\u8200\u836F\u8981\u8000\u6930\u564E\u8036\u7237\u91CE\u51B6\u4E5F\u9875\u6396\u4E1A\u53F6\u66F3\u814B\u591C\u6DB2\u4E00\u58F9\u533B\u63D6\u94F1\u4F9D\u4F0A\u8863\u9890\u5937\u9057\u79FB\u4EEA\u80F0\u7591\u6C82\u5B9C\u59E8\u5F5D\u6905\u8681\u501A\u5DF2\u4E59\u77E3\u4EE5\u827A\u6291\u6613\u9091\u5C79\u4EBF\u5F79\u81C6\u9038\u8084\u75AB\u4EA6\u88D4\u610F\u6BC5\u5FC6\u4E49\u76CA\u6EA2\u8BE3\u8BAE\u8C0A\u8BD1\u5F02\u7FFC\u7FCC\u7ECE\u8335\u836B\u56E0\u6BB7\u97F3\u9634\u59FB\u541F\u94F6\u6DEB\u5BC5\u996E\u5C39\u5F15\u9690"],
        ["d340", "\u89A2", 30, "\u89C3\u89CD\u89D3\u89D4\u89D5\u89D7\u89D8\u89D9\u89DB\u89DD\u89DF\u89E0\u89E1\u89E2\u89E4\u89E7\u89E8\u89E9\u89EA\u89EC\u89ED\u89EE\u89F0\u89F1\u89F2\u89F4", 6],
        ["d380", "\u89FB", 4, "\u8A01", 5, "\u8A08", 21, "\u5370\u82F1\u6A31\u5A74\u9E70\u5E94\u7F28\u83B9\u8424\u8425\u8367\u8747\u8FCE\u8D62\u76C8\u5F71\u9896\u786C\u6620\u54DF\u62E5\u4F63\u81C3\u75C8\u5EB8\u96CD\u8E0A\u86F9\u548F\u6CF3\u6D8C\u6C38\u607F\u52C7\u7528\u5E7D\u4F18\u60A0\u5FE7\u5C24\u7531\u90AE\u94C0\u72B9\u6CB9\u6E38\u9149\u6709\u53CB\u53F3\u4F51\u91C9\u8BF1\u53C8\u5E7C\u8FC2\u6DE4\u4E8E\u76C2\u6986\u865E\u611A\u8206\u4F59\u4FDE\u903E\u9C7C\u6109\u6E1D\u6E14\u9685\u4E88\u5A31\u96E8\u4E0E\u5C7F\u79B9\u5B87\u8BED\u7FBD\u7389\u57DF\u828B\u90C1\u5401\u9047\u55BB\u5CEA\u5FA1\u6108\u6B32\u72F1\u80B2\u8A89"],
        ["d440", "\u8A1E", 31, "\u8A3F", 8, "\u8A49", 21],
        ["d480", "\u8A5F", 25, "\u8A7A", 6, "\u6D74\u5BD3\u88D5\u9884\u8C6B\u9A6D\u9E33\u6E0A\u51A4\u5143\u57A3\u8881\u539F\u63F4\u8F95\u56ED\u5458\u5706\u733F\u6E90\u7F18\u8FDC\u82D1\u613F\u6028\u9662\u66F0\u7EA6\u8D8A\u8DC3\u94A5\u5CB3\u7CA4\u6708\u60A6\u9605\u8018\u4E91\u90E7\u5300\u9668\u5141\u8FD0\u8574\u915D\u6655\u97F5\u5B55\u531D\u7838\u6742\u683D\u54C9\u707E\u5BB0\u8F7D\u518D\u5728\u54B1\u6512\u6682\u8D5E\u8D43\u810F\u846C\u906D\u7CDF\u51FF\u85FB\u67A3\u65E9\u6FA1\u86A4\u8E81\u566A\u9020\u7682\u7076\u71E5\u8D23\u62E9\u5219\u6CFD\u8D3C\u600E\u589E\u618E\u66FE\u8D60\u624E\u55B3\u6E23\u672D\u8F67"],
        ["d540", "\u8A81", 7, "\u8A8B", 7, "\u8A94", 46],
        ["d580", "\u8AC3", 32, "\u94E1\u95F8\u7728\u6805\u69A8\u548B\u4E4D\u70B8\u8BC8\u6458\u658B\u5B85\u7A84\u503A\u5BE8\u77BB\u6BE1\u8A79\u7C98\u6CBE\u76CF\u65A9\u8F97\u5D2D\u5C55\u8638\u6808\u5360\u6218\u7AD9\u6E5B\u7EFD\u6A1F\u7AE0\u5F70\u6F33\u5F20\u638C\u6DA8\u6756\u4E08\u5E10\u8D26\u4ED7\u80C0\u7634\u969C\u62DB\u662D\u627E\u6CBC\u8D75\u7167\u7F69\u5146\u8087\u53EC\u906E\u6298\u54F2\u86F0\u8F99\u8005\u9517\u8517\u8FD9\u6D59\u73CD\u659F\u771F\u7504\u7827\u81FB\u8D1E\u9488\u4FA6\u6795\u75B9\u8BCA\u9707\u632F\u9547\u9635\u84B8\u6323\u7741\u5F81\u72F0\u4E89\u6014\u6574\u62EF\u6B63\u653F"],
        ["d640", "\u8AE4", 34, "\u8B08", 27],
        ["d680", "\u8B24\u8B25\u8B27", 30, "\u5E27\u75C7\u90D1\u8BC1\u829D\u679D\u652F\u5431\u8718\u77E5\u80A2\u8102\u6C41\u4E4B\u7EC7\u804C\u76F4\u690D\u6B96\u6267\u503C\u4F84\u5740\u6307\u6B62\u8DBE\u53EA\u65E8\u7EB8\u5FD7\u631A\u63B7\u81F3\u81F4\u7F6E\u5E1C\u5CD9\u5236\u667A\u79E9\u7A1A\u8D28\u7099\u75D4\u6EDE\u6CBB\u7A92\u4E2D\u76C5\u5FE0\u949F\u8877\u7EC8\u79CD\u80BF\u91CD\u4EF2\u4F17\u821F\u5468\u5DDE\u6D32\u8BCC\u7CA5\u8F74\u8098\u5E1A\u5492\u76B1\u5B99\u663C\u9AA4\u73E0\u682A\u86DB\u6731\u732A\u8BF8\u8BDB\u9010\u7AF9\u70DB\u716E\u62C4\u77A9\u5631\u4E3B\u8457\u67F1\u52A9\u86C0\u8D2E\u94F8\u7B51"],
        ["d740", "\u8B46", 31, "\u8B67", 4, "\u8B6D", 25],
        ["d780", "\u8B87", 24, "\u8BAC\u8BB1\u8BBB\u8BC7\u8BD0\u8BEA\u8C09\u8C1E\u4F4F\u6CE8\u795D\u9A7B\u6293\u722A\u62FD\u4E13\u7816\u8F6C\u64B0\u8D5A\u7BC6\u6869\u5E84\u88C5\u5986\u649E\u58EE\u72B6\u690E\u9525\u8FFD\u8D58\u5760\u7F00\u8C06\u51C6\u6349\u62D9\u5353\u684C\u7422\u8301\u914C\u5544\u7740\u707C\u6D4A\u5179\u54A8\u8D44\u59FF\u6ECB\u6DC4\u5B5C\u7D2B\u4ED4\u7C7D\u6ED3\u5B50\u81EA\u6E0D\u5B57\u9B03\u68D5\u8E2A\u5B97\u7EFC\u603B\u7EB5\u90B9\u8D70\u594F\u63CD\u79DF\u8DB3\u5352\u65CF\u7956\u8BC5\u963B\u7EC4\u94BB\u7E82\u5634\u9189\u6700\u7F6A\u5C0A\u9075\u6628\u5DE6\u4F50\u67DE\u505A\u4F5C\u5750\u5EA7"],
        ["d840", "\u8C38", 8, "\u8C42\u8C43\u8C44\u8C45\u8C48\u8C4A\u8C4B\u8C4D", 7, "\u8C56\u8C57\u8C58\u8C59\u8C5B", 5, "\u8C63", 6, "\u8C6C", 6, "\u8C74\u8C75\u8C76\u8C77\u8C7B", 6, "\u8C83\u8C84\u8C86\u8C87"],
        ["d880", "\u8C88\u8C8B\u8C8D", 6, "\u8C95\u8C96\u8C97\u8C99", 20, "\u4E8D\u4E0C\u5140\u4E10\u5EFF\u5345\u4E15\u4E98\u4E1E\u9B32\u5B6C\u5669\u4E28\u79BA\u4E3F\u5315\u4E47\u592D\u723B\u536E\u6C10\u56DF\u80E4\u9997\u6BD3\u777E\u9F17\u4E36\u4E9F\u9F10\u4E5C\u4E69\u4E93\u8288\u5B5B\u556C\u560F\u4EC4\u538D\u539D\u53A3\u53A5\u53AE\u9765\u8D5D\u531A\u53F5\u5326\u532E\u533E\u8D5C\u5366\u5363\u5202\u5208\u520E\u522D\u5233\u523F\u5240\u524C\u525E\u5261\u525C\u84AF\u527D\u5282\u5281\u5290\u5293\u5182\u7F54\u4EBB\u4EC3\u4EC9\u4EC2\u4EE8\u4EE1\u4EEB\u4EDE\u4F1B\u4EF3\u4F22\u4F64\u4EF5\u4F25\u4F27\u4F09\u4F2B\u4F5E\u4F67\u6538\u4F5A\u4F5D"],
        ["d940", "\u8CAE", 62],
        ["d980", "\u8CED", 32, "\u4F5F\u4F57\u4F32\u4F3D\u4F76\u4F74\u4F91\u4F89\u4F83\u4F8F\u4F7E\u4F7B\u4FAA\u4F7C\u4FAC\u4F94\u4FE6\u4FE8\u4FEA\u4FC5\u4FDA\u4FE3\u4FDC\u4FD1\u4FDF\u4FF8\u5029\u504C\u4FF3\u502C\u500F\u502E\u502D\u4FFE\u501C\u500C\u5025\u5028\u507E\u5043\u5055\u5048\u504E\u506C\u507B\u50A5\u50A7\u50A9\u50BA\u50D6\u5106\u50ED\u50EC\u50E6\u50EE\u5107\u510B\u4EDD\u6C3D\u4F58\u4F65\u4FCE\u9FA0\u6C46\u7C74\u516E\u5DFD\u9EC9\u9998\u5181\u5914\u52F9\u530D\u8A07\u5310\u51EB\u5919\u5155\u4EA0\u5156\u4EB3\u886E\u88A4\u4EB5\u8114\u88D2\u7980\u5B34\u8803\u7FB8\u51AB\u51B1\u51BD\u51BC"],
        ["da40", "\u8D0E", 14, "\u8D20\u8D51\u8D52\u8D57\u8D5F\u8D65\u8D68\u8D69\u8D6A\u8D6C\u8D6E\u8D6F\u8D71\u8D72\u8D78", 8, "\u8D82\u8D83\u8D86\u8D87\u8D88\u8D89\u8D8C", 4, "\u8D92\u8D93\u8D95", 9, "\u8DA0\u8DA1"],
        ["da80", "\u8DA2\u8DA4", 12, "\u8DB2\u8DB6\u8DB7\u8DB9\u8DBB\u8DBD\u8DC0\u8DC1\u8DC2\u8DC5\u8DC7\u8DC8\u8DC9\u8DCA\u8DCD\u8DD0\u8DD2\u8DD3\u8DD4\u51C7\u5196\u51A2\u51A5\u8BA0\u8BA6\u8BA7\u8BAA\u8BB4\u8BB5\u8BB7\u8BC2\u8BC3\u8BCB\u8BCF\u8BCE\u8BD2\u8BD3\u8BD4\u8BD6\u8BD8\u8BD9\u8BDC\u8BDF\u8BE0\u8BE4\u8BE8\u8BE9\u8BEE\u8BF0\u8BF3\u8BF6\u8BF9\u8BFC\u8BFF\u8C00\u8C02\u8C04\u8C07\u8C0C\u8C0F\u8C11\u8C12\u8C14\u8C15\u8C16\u8C19\u8C1B\u8C18\u8C1D\u8C1F\u8C20\u8C21\u8C25\u8C27\u8C2A\u8C2B\u8C2E\u8C2F\u8C32\u8C33\u8C35\u8C36\u5369\u537A\u961D\u9622\u9621\u9631\u962A\u963D\u963C\u9642\u9649\u9654\u965F\u9667\u966C\u9672\u9674\u9688\u968D\u9697\u96B0\u9097\u909B\u909D\u9099\u90AC\u90A1\u90B4\u90B3\u90B6\u90BA"],
        ["db40", "\u8DD5\u8DD8\u8DD9\u8DDC\u8DE0\u8DE1\u8DE2\u8DE5\u8DE6\u8DE7\u8DE9\u8DED\u8DEE\u8DF0\u8DF1\u8DF2\u8DF4\u8DF6\u8DFC\u8DFE", 6, "\u8E06\u8E07\u8E08\u8E0B\u8E0D\u8E0E\u8E10\u8E11\u8E12\u8E13\u8E15", 7, "\u8E20\u8E21\u8E24", 4, "\u8E2B\u8E2D\u8E30\u8E32\u8E33\u8E34\u8E36\u8E37\u8E38\u8E3B\u8E3C\u8E3E"],
        ["db80", "\u8E3F\u8E43\u8E45\u8E46\u8E4C", 4, "\u8E53", 5, "\u8E5A", 11, "\u8E67\u8E68\u8E6A\u8E6B\u8E6E\u8E71\u90B8\u90B0\u90CF\u90C5\u90BE\u90D0\u90C4\u90C7\u90D3\u90E6\u90E2\u90DC\u90D7\u90DB\u90EB\u90EF\u90FE\u9104\u9122\u911E\u9123\u9131\u912F\u9139\u9143\u9146\u520D\u5942\u52A2\u52AC\u52AD\u52BE\u54FF\u52D0\u52D6\u52F0\u53DF\u71EE\u77CD\u5EF4\u51F5\u51FC\u9B2F\u53B6\u5F01\u755A\u5DEF\u574C\u57A9\u57A1\u587E\u58BC\u58C5\u58D1\u5729\u572C\u572A\u5733\u5739\u572E\u572F\u575C\u573B\u5742\u5769\u5785\u576B\u5786\u577C\u577B\u5768\u576D\u5776\u5773\u57AD\u57A4\u578C\u57B2\u57CF\u57A7\u57B4\u5793\u57A0\u57D5\u57D8\u57DA\u57D9\u57D2\u57B8\u57F4\u57EF\u57F8\u57E4\u57DD"],
        ["dc40", "\u8E73\u8E75\u8E77", 4, "\u8E7D\u8E7E\u8E80\u8E82\u8E83\u8E84\u8E86\u8E88", 6, "\u8E91\u8E92\u8E93\u8E95", 6, "\u8E9D\u8E9F", 11, "\u8EAD\u8EAE\u8EB0\u8EB1\u8EB3", 6, "\u8EBB", 7],
        ["dc80", "\u8EC3", 10, "\u8ECF", 21, "\u580B\u580D\u57FD\u57ED\u5800\u581E\u5819\u5844\u5820\u5865\u586C\u5881\u5889\u589A\u5880\u99A8\u9F19\u61FF\u8279\u827D\u827F\u828F\u828A\u82A8\u8284\u828E\u8291\u8297\u8299\u82AB\u82B8\u82BE\u82B0\u82C8\u82CA\u82E3\u8298\u82B7\u82AE\u82CB\u82CC\u82C1\u82A9\u82B4\u82A1\u82AA\u829F\u82C4\u82CE\u82A4\u82E1\u8309\u82F7\u82E4\u830F\u8307\u82DC\u82F4\u82D2\u82D8\u830C\u82FB\u82D3\u8311\u831A\u8306\u8314\u8315\u82E0\u82D5\u831C\u8351\u835B\u835C\u8308\u8392\u833C\u8334\u8331\u839B\u835E\u832F\u834F\u8347\u8343\u835F\u8340\u8317\u8360\u832D\u833A\u8333\u8366\u8365"],
        ["dd40", "\u8EE5", 62],
        ["dd80", "\u8F24", 32, "\u8368\u831B\u8369\u836C\u836A\u836D\u836E\u83B0\u8378\u83B3\u83B4\u83A0\u83AA\u8393\u839C\u8385\u837C\u83B6\u83A9\u837D\u83B8\u837B\u8398\u839E\u83A8\u83BA\u83BC\u83C1\u8401\u83E5\u83D8\u5807\u8418\u840B\u83DD\u83FD\u83D6\u841C\u8438\u8411\u8406\u83D4\u83DF\u840F\u8403\u83F8\u83F9\u83EA\u83C5\u83C0\u8426\u83F0\u83E1\u845C\u8451\u845A\u8459\u8473\u8487\u8488\u847A\u8489\u8478\u843C\u8446\u8469\u8476\u848C\u848E\u8431\u846D\u84C1\u84CD\u84D0\u84E6\u84BD\u84D3\u84CA\u84BF\u84BA\u84E0\u84A1\u84B9\u84B4\u8497\u84E5\u84E3\u850C\u750D\u8538\u84F0\u8539\u851F\u853A"],
        ["de40", "\u8F45", 32, "\u8F6A\u8F80\u8F8C\u8F92\u8F9D\u8FA0\u8FA1\u8FA2\u8FA4\u8FA5\u8FA6\u8FA7\u8FAA\u8FAC\u8FAD\u8FAE\u8FAF\u8FB2\u8FB3\u8FB4\u8FB5\u8FB7\u8FB8\u8FBA\u8FBB\u8FBC\u8FBF\u8FC0\u8FC3\u8FC6"],
        ["de80", "\u8FC9", 4, "\u8FCF\u8FD2\u8FD6\u8FD7\u8FDA\u8FE0\u8FE1\u8FE3\u8FE7\u8FEC\u8FEF\u8FF1\u8FF2\u8FF4\u8FF5\u8FF6\u8FFA\u8FFB\u8FFC\u8FFE\u8FFF\u9007\u9008\u900C\u900E\u9013\u9015\u9018\u8556\u853B\u84FF\u84FC\u8559\u8548\u8568\u8564\u855E\u857A\u77A2\u8543\u8572\u857B\u85A4\u85A8\u8587\u858F\u8579\u85AE\u859C\u8585\u85B9\u85B7\u85B0\u85D3\u85C1\u85DC\u85FF\u8627\u8605\u8629\u8616\u863C\u5EFE\u5F08\u593C\u5941\u8037\u5955\u595A\u5958\u530F\u5C22\u5C25\u5C2C\u5C34\u624C\u626A\u629F\u62BB\u62CA\u62DA\u62D7\u62EE\u6322\u62F6\u6339\u634B\u6343\u63AD\u63F6\u6371\u637A\u638E\u63B4\u636D\u63AC\u638A\u6369\u63AE\u63BC\u63F2\u63F8\u63E0\u63FF\u63C4\u63DE\u63CE\u6452\u63C6\u63BE\u6445\u6441\u640B\u641B\u6420\u640C\u6426\u6421\u645E\u6484\u646D\u6496"],
        ["df40", "\u9019\u901C\u9023\u9024\u9025\u9027", 5, "\u9030", 4, "\u9037\u9039\u903A\u903D\u903F\u9040\u9043\u9045\u9046\u9048", 4, "\u904E\u9054\u9055\u9056\u9059\u905A\u905C", 5, "\u9064\u9066\u9067\u9069\u906A\u906B\u906C\u906F", 4, "\u9076", 6, "\u907E\u9081"],
        ["df80", "\u9084\u9085\u9086\u9087\u9089\u908A\u908C", 4, "\u9092\u9094\u9096\u9098\u909A\u909C\u909E\u909F\u90A0\u90A4\u90A5\u90A7\u90A8\u90A9\u90AB\u90AD\u90B2\u90B7\u90BC\u90BD\u90BF\u90C0\u647A\u64B7\u64B8\u6499\u64BA\u64C0\u64D0\u64D7\u64E4\u64E2\u6509\u6525\u652E\u5F0B\u5FD2\u7519\u5F11\u535F\u53F1\u53FD\u53E9\u53E8\u53FB\u5412\u5416\u5406\u544B\u5452\u5453\u5454\u5456\u5443\u5421\u5457\u5459\u5423\u5432\u5482\u5494\u5477\u5471\u5464\u549A\u549B\u5484\u5476\u5466\u549D\u54D0\u54AD\u54C2\u54B4\u54D2\u54A7\u54A6\u54D3\u54D4\u5472\u54A3\u54D5\u54BB\u54BF\u54CC\u54D9\u54DA\u54DC\u54A9\u54AA\u54A4\u54DD\u54CF\u54DE\u551B\u54E7\u5520\u54FD\u5514\u54F3\u5522\u5523\u550F\u5511\u5527\u552A\u5567\u558F\u55B5\u5549\u556D\u5541\u5555\u553F\u5550\u553C"],
        ["e040", "\u90C2\u90C3\u90C6\u90C8\u90C9\u90CB\u90CC\u90CD\u90D2\u90D4\u90D5\u90D6\u90D8\u90D9\u90DA\u90DE\u90DF\u90E0\u90E3\u90E4\u90E5\u90E9\u90EA\u90EC\u90EE\u90F0\u90F1\u90F2\u90F3\u90F5\u90F6\u90F7\u90F9\u90FA\u90FB\u90FC\u90FF\u9100\u9101\u9103\u9105", 19, "\u911A\u911B\u911C"],
        ["e080", "\u911D\u911F\u9120\u9121\u9124", 10, "\u9130\u9132", 6, "\u913A", 8, "\u9144\u5537\u5556\u5575\u5576\u5577\u5533\u5530\u555C\u558B\u55D2\u5583\u55B1\u55B9\u5588\u5581\u559F\u557E\u55D6\u5591\u557B\u55DF\u55BD\u55BE\u5594\u5599\u55EA\u55F7\u55C9\u561F\u55D1\u55EB\u55EC\u55D4\u55E6\u55DD\u55C4\u55EF\u55E5\u55F2\u55F3\u55CC\u55CD\u55E8\u55F5\u55E4\u8F94\u561E\u5608\u560C\u5601\u5624\u5623\u55FE\u5600\u5627\u562D\u5658\u5639\u5657\u562C\u564D\u5662\u5659\u565C\u564C\u5654\u5686\u5664\u5671\u566B\u567B\u567C\u5685\u5693\u56AF\u56D4\u56D7\u56DD\u56E1\u56F5\u56EB\u56F9\u56FF\u5704\u570A\u5709\u571C\u5E0F\u5E19\u5E14\u5E11\u5E31\u5E3B\u5E3C"],
        ["e140", "\u9145\u9147\u9148\u9151\u9153\u9154\u9155\u9156\u9158\u9159\u915B\u915C\u915F\u9160\u9166\u9167\u9168\u916B\u916D\u9173\u917A\u917B\u917C\u9180", 4, "\u9186\u9188\u918A\u918E\u918F\u9193", 6, "\u919C", 5, "\u91A4", 5, "\u91AB\u91AC\u91B0\u91B1\u91B2\u91B3\u91B6\u91B7\u91B8\u91B9\u91BB"],
        ["e180", "\u91BC", 10, "\u91C8\u91CB\u91D0\u91D2", 9, "\u91DD", 8, "\u5E37\u5E44\u5E54\u5E5B\u5E5E\u5E61\u5C8C\u5C7A\u5C8D\u5C90\u5C96\u5C88\u5C98\u5C99\u5C91\u5C9A\u5C9C\u5CB5\u5CA2\u5CBD\u5CAC\u5CAB\u5CB1\u5CA3\u5CC1\u5CB7\u5CC4\u5CD2\u5CE4\u5CCB\u5CE5\u5D02\u5D03\u5D27\u5D26\u5D2E\u5D24\u5D1E\u5D06\u5D1B\u5D58\u5D3E\u5D34\u5D3D\u5D6C\u5D5B\u5D6F\u5D5D\u5D6B\u5D4B\u5D4A\u5D69\u5D74\u5D82\u5D99\u5D9D\u8C73\u5DB7\u5DC5\u5F73\u5F77\u5F82\u5F87\u5F89\u5F8C\u5F95\u5F99\u5F9C\u5FA8\u5FAD\u5FB5\u5FBC\u8862\u5F61\u72AD\u72B0\u72B4\u72B7\u72B8\u72C3\u72C1\u72CE\u72CD\u72D2\u72E8\u72EF\u72E9\u72F2\u72F4\u72F7\u7301\u72F3\u7303\u72FA"],
        ["e240", "\u91E6", 62],
        ["e280", "\u9225", 32, "\u72FB\u7317\u7313\u7321\u730A\u731E\u731D\u7315\u7322\u7339\u7325\u732C\u7338\u7331\u7350\u734D\u7357\u7360\u736C\u736F\u737E\u821B\u5925\u98E7\u5924\u5902\u9963\u9967", 5, "\u9974\u9977\u997D\u9980\u9984\u9987\u998A\u998D\u9990\u9991\u9993\u9994\u9995\u5E80\u5E91\u5E8B\u5E96\u5EA5\u5EA0\u5EB9\u5EB5\u5EBE\u5EB3\u8D53\u5ED2\u5ED1\u5EDB\u5EE8\u5EEA\u81BA\u5FC4\u5FC9\u5FD6\u5FCF\u6003\u5FEE\u6004\u5FE1\u5FE4\u5FFE\u6005\u6006\u5FEA\u5FED\u5FF8\u6019\u6035\u6026\u601B\u600F\u600D\u6029\u602B\u600A\u603F\u6021\u6078\u6079\u607B\u607A\u6042"],
        ["e340", "\u9246", 45, "\u9275", 16],
        ["e380", "\u9286", 7, "\u928F", 24, "\u606A\u607D\u6096\u609A\u60AD\u609D\u6083\u6092\u608C\u609B\u60EC\u60BB\u60B1\u60DD\u60D8\u60C6\u60DA\u60B4\u6120\u6126\u6115\u6123\u60F4\u6100\u610E\u612B\u614A\u6175\u61AC\u6194\u61A7\u61B7\u61D4\u61F5\u5FDD\u96B3\u95E9\u95EB\u95F1\u95F3\u95F5\u95F6\u95FC\u95FE\u9603\u9604\u9606\u9608\u960A\u960B\u960C\u960D\u960F\u9612\u9615\u9616\u9617\u9619\u961A\u4E2C\u723F\u6215\u6C35\u6C54\u6C5C\u6C4A\u6CA3\u6C85\u6C90\u6C94\u6C8C\u6C68\u6C69\u6C74\u6C76\u6C86\u6CA9\u6CD0\u6CD4\u6CAD\u6CF7\u6CF8\u6CF1\u6CD7\u6CB2\u6CE0\u6CD6\u6CFA\u6CEB\u6CEE\u6CB1\u6CD3\u6CEF\u6CFE"],
        ["e440", "\u92A8", 5, "\u92AF", 24, "\u92C9", 31],
        ["e480", "\u92E9", 32, "\u6D39\u6D27\u6D0C\u6D43\u6D48\u6D07\u6D04\u6D19\u6D0E\u6D2B\u6D4D\u6D2E\u6D35\u6D1A\u6D4F\u6D52\u6D54\u6D33\u6D91\u6D6F\u6D9E\u6DA0\u6D5E\u6D93\u6D94\u6D5C\u6D60\u6D7C\u6D63\u6E1A\u6DC7\u6DC5\u6DDE\u6E0E\u6DBF\u6DE0\u6E11\u6DE6\u6DDD\u6DD9\u6E16\u6DAB\u6E0C\u6DAE\u6E2B\u6E6E\u6E4E\u6E6B\u6EB2\u6E5F\u6E86\u6E53\u6E54\u6E32\u6E25\u6E44\u6EDF\u6EB1\u6E98\u6EE0\u6F2D\u6EE2\u6EA5\u6EA7\u6EBD\u6EBB\u6EB7\u6ED7\u6EB4\u6ECF\u6E8F\u6EC2\u6E9F\u6F62\u6F46\u6F47\u6F24\u6F15\u6EF9\u6F2F\u6F36\u6F4B\u6F74\u6F2A\u6F09\u6F29\u6F89\u6F8D\u6F8C\u6F78\u6F72\u6F7C\u6F7A\u6FD1"],
        ["e540", "\u930A", 51, "\u933F", 10],
        ["e580", "\u934A", 31, "\u936B\u6FC9\u6FA7\u6FB9\u6FB6\u6FC2\u6FE1\u6FEE\u6FDE\u6FE0\u6FEF\u701A\u7023\u701B\u7039\u7035\u704F\u705E\u5B80\u5B84\u5B95\u5B93\u5BA5\u5BB8\u752F\u9A9E\u6434\u5BE4\u5BEE\u8930\u5BF0\u8E47\u8B07\u8FB6\u8FD3\u8FD5\u8FE5\u8FEE\u8FE4\u8FE9\u8FE6\u8FF3\u8FE8\u9005\u9004\u900B\u9026\u9011\u900D\u9016\u9021\u9035\u9036\u902D\u902F\u9044\u9051\u9052\u9050\u9068\u9058\u9062\u905B\u66B9\u9074\u907D\u9082\u9088\u9083\u908B\u5F50\u5F57\u5F56\u5F58\u5C3B\u54AB\u5C50\u5C59\u5B71\u5C63\u5C66\u7FBC\u5F2A\u5F29\u5F2D\u8274\u5F3C\u9B3B\u5C6E\u5981\u5983\u598D\u59A9\u59AA\u59A3"],
        ["e640", "\u936C", 34, "\u9390", 27],
        ["e680", "\u93AC", 29, "\u93CB\u93CC\u93CD\u5997\u59CA\u59AB\u599E\u59A4\u59D2\u59B2\u59AF\u59D7\u59BE\u5A05\u5A06\u59DD\u5A08\u59E3\u59D8\u59F9\u5A0C\u5A09\u5A32\u5A34\u5A11\u5A23\u5A13\u5A40\u5A67\u5A4A\u5A55\u5A3C\u5A62\u5A75\u80EC\u5AAA\u5A9B\u5A77\u5A7A\u5ABE\u5AEB\u5AB2\u5AD2\u5AD4\u5AB8\u5AE0\u5AE3\u5AF1\u5AD6\u5AE6\u5AD8\u5ADC\u5B09\u5B17\u5B16\u5B32\u5B37\u5B40\u5C15\u5C1C\u5B5A\u5B65\u5B73\u5B51\u5B53\u5B62\u9A75\u9A77\u9A78\u9A7A\u9A7F\u9A7D\u9A80\u9A81\u9A85\u9A88\u9A8A\u9A90\u9A92\u9A93\u9A96\u9A98\u9A9B\u9A9C\u9A9D\u9A9F\u9AA0\u9AA2\u9AA3\u9AA5\u9AA7\u7E9F\u7EA1\u7EA3\u7EA5\u7EA8\u7EA9"],
        ["e740", "\u93CE", 7, "\u93D7", 54],
        ["e780", "\u940E", 32, "\u7EAD\u7EB0\u7EBE\u7EC0\u7EC1\u7EC2\u7EC9\u7ECB\u7ECC\u7ED0\u7ED4\u7ED7\u7EDB\u7EE0\u7EE1\u7EE8\u7EEB\u7EEE\u7EEF\u7EF1\u7EF2\u7F0D\u7EF6\u7EFA\u7EFB\u7EFE\u7F01\u7F02\u7F03\u7F07\u7F08\u7F0B\u7F0C\u7F0F\u7F11\u7F12\u7F17\u7F19\u7F1C\u7F1B\u7F1F\u7F21", 6, "\u7F2A\u7F2B\u7F2C\u7F2D\u7F2F", 4, "\u7F35\u5E7A\u757F\u5DDB\u753E\u9095\u738E\u7391\u73AE\u73A2\u739F\u73CF\u73C2\u73D1\u73B7\u73B3\u73C0\u73C9\u73C8\u73E5\u73D9\u987C\u740A\u73E9\u73E7\u73DE\u73BA\u73F2\u740F\u742A\u745B\u7426\u7425\u7428\u7430\u742E\u742C"],
        ["e840", "\u942F", 14, "\u943F", 43, "\u946C\u946D\u946E\u946F"],
        ["e880", "\u9470", 20, "\u9491\u9496\u9498\u94C7\u94CF\u94D3\u94D4\u94DA\u94E6\u94FB\u951C\u9520\u741B\u741A\u7441\u745C\u7457\u7455\u7459\u7477\u746D\u747E\u749C\u748E\u7480\u7481\u7487\u748B\u749E\u74A8\u74A9\u7490\u74A7\u74D2\u74BA\u97EA\u97EB\u97EC\u674C\u6753\u675E\u6748\u6769\u67A5\u6787\u676A\u6773\u6798\u67A7\u6775\u67A8\u679E\u67AD\u678B\u6777\u677C\u67F0\u6809\u67D8\u680A\u67E9\u67B0\u680C\u67D9\u67B5\u67DA\u67B3\u67DD\u6800\u67C3\u67B8\u67E2\u680E\u67C1\u67FD\u6832\u6833\u6860\u6861\u684E\u6862\u6844\u6864\u6883\u681D\u6855\u6866\u6841\u6867\u6840\u683E\u684A\u6849\u6829\u68B5\u688F\u6874\u6877\u6893\u686B\u68C2\u696E\u68FC\u691F\u6920\u68F9"],
        ["e940", "\u9527\u9533\u953D\u9543\u9548\u954B\u9555\u955A\u9560\u956E\u9574\u9575\u9577", 7, "\u9580", 42],
        ["e980", "\u95AB", 32, "\u6924\u68F0\u690B\u6901\u6957\u68E3\u6910\u6971\u6939\u6960\u6942\u695D\u6984\u696B\u6980\u6998\u6978\u6934\u69CC\u6987\u6988\u69CE\u6989\u6966\u6963\u6979\u699B\u69A7\u69BB\u69AB\u69AD\u69D4\u69B1\u69C1\u69CA\u69DF\u6995\u69E0\u698D\u69FF\u6A2F\u69ED\u6A17\u6A18\u6A65\u69F2\u6A44\u6A3E\u6AA0\u6A50\u6A5B\u6A35\u6A8E\u6A79\u6A3D\u6A28\u6A58\u6A7C\u6A91\u6A90\u6AA9\u6A97\u6AAB\u7337\u7352\u6B81\u6B82\u6B87\u6B84\u6B92\u6B93\u6B8D\u6B9A\u6B9B\u6BA1\u6BAA\u8F6B\u8F6D\u8F71\u8F72\u8F73\u8F75\u8F76\u8F78\u8F77\u8F79\u8F7A\u8F7C\u8F7E\u8F81\u8F82\u8F84\u8F87\u8F8B"],
        ["ea40", "\u95CC", 27, "\u95EC\u95FF\u9607\u9613\u9618\u961B\u961E\u9620\u9623", 6, "\u962B\u962C\u962D\u962F\u9630\u9637\u9638\u9639\u963A\u963E\u9641\u9643\u964A\u964E\u964F\u9651\u9652\u9653\u9656\u9657"],
        ["ea80", "\u9658\u9659\u965A\u965C\u965D\u965E\u9660\u9663\u9665\u9666\u966B\u966D", 4, "\u9673\u9678", 12, "\u9687\u9689\u968A\u8F8D\u8F8E\u8F8F\u8F98\u8F9A\u8ECE\u620B\u6217\u621B\u621F\u6222\u6221\u6225\u6224\u622C\u81E7\u74EF\u74F4\u74FF\u750F\u7511\u7513\u6534\u65EE\u65EF\u65F0\u660A\u6619\u6772\u6603\u6615\u6600\u7085\u66F7\u661D\u6634\u6631\u6636\u6635\u8006\u665F\u6654\u6641\u664F\u6656\u6661\u6657\u6677\u6684\u668C\u66A7\u669D\u66BE\u66DB\u66DC\u66E6\u66E9\u8D32\u8D33\u8D36\u8D3B\u8D3D\u8D40\u8D45\u8D46\u8D48\u8D49\u8D47\u8D4D\u8D55\u8D59\u89C7\u89CA\u89CB\u89CC\u89CE\u89CF\u89D0\u89D1\u726E\u729F\u725D\u7266\u726F\u727E\u727F\u7284\u728B\u728D\u728F\u7292\u6308\u6332\u63B0"],
        ["eb40", "\u968C\u968E\u9691\u9692\u9693\u9695\u9696\u969A\u969B\u969D", 9, "\u96A8", 7, "\u96B1\u96B2\u96B4\u96B5\u96B7\u96B8\u96BA\u96BB\u96BF\u96C2\u96C3\u96C8\u96CA\u96CB\u96D0\u96D1\u96D3\u96D4\u96D6", 9, "\u96E1", 6, "\u96EB"],
        ["eb80", "\u96EC\u96ED\u96EE\u96F0\u96F1\u96F2\u96F4\u96F5\u96F8\u96FA\u96FB\u96FC\u96FD\u96FF\u9702\u9703\u9705\u970A\u970B\u970C\u9710\u9711\u9712\u9714\u9715\u9717", 4, "\u971D\u971F\u9720\u643F\u64D8\u8004\u6BEA\u6BF3\u6BFD\u6BF5\u6BF9\u6C05\u6C07\u6C06\u6C0D\u6C15\u6C18\u6C19\u6C1A\u6C21\u6C29\u6C24\u6C2A\u6C32\u6535\u6555\u656B\u724D\u7252\u7256\u7230\u8662\u5216\u809F\u809C\u8093\u80BC\u670A\u80BD\u80B1\u80AB\u80AD\u80B4\u80B7\u80E7\u80E8\u80E9\u80EA\u80DB\u80C2\u80C4\u80D9\u80CD\u80D7\u6710\u80DD\u80EB\u80F1\u80F4\u80ED\u810D\u810E\u80F2\u80FC\u6715\u8112\u8C5A\u8136\u811E\u812C\u8118\u8132\u8148\u814C\u8153\u8174\u8159\u815A\u8171\u8160\u8169\u817C\u817D\u816D\u8167\u584D\u5AB5\u8188\u8182\u8191\u6ED5\u81A3\u81AA\u81CC\u6726\u81CA\u81BB"],
        ["ec40", "\u9721", 8, "\u972B\u972C\u972E\u972F\u9731\u9733", 4, "\u973A\u973B\u973C\u973D\u973F", 18, "\u9754\u9755\u9757\u9758\u975A\u975C\u975D\u975F\u9763\u9764\u9766\u9767\u9768\u976A", 7],
        ["ec80", "\u9772\u9775\u9777", 4, "\u977D", 7, "\u9786", 4, "\u978C\u978E\u978F\u9790\u9793\u9795\u9796\u9797\u9799", 4, "\u81C1\u81A6\u6B24\u6B37\u6B39\u6B43\u6B46\u6B59\u98D1\u98D2\u98D3\u98D5\u98D9\u98DA\u6BB3\u5F40\u6BC2\u89F3\u6590\u9F51\u6593\u65BC\u65C6\u65C4\u65C3\u65CC\u65CE\u65D2\u65D6\u7080\u709C\u7096\u709D\u70BB\u70C0\u70B7\u70AB\u70B1\u70E8\u70CA\u7110\u7113\u7116\u712F\u7131\u7173\u715C\u7168\u7145\u7172\u714A\u7178\u717A\u7198\u71B3\u71B5\u71A8\u71A0\u71E0\u71D4\u71E7\u71F9\u721D\u7228\u706C\u7118\u7166\u71B9\u623E\u623D\u6243\u6248\u6249\u793B\u7940\u7946\u7949\u795B\u795C\u7953\u795A\u7962\u7957\u7960\u796F\u7967\u797A\u7985\u798A\u799A\u79A7\u79B3\u5FD1\u5FD0"],
        ["ed40", "\u979E\u979F\u97A1\u97A2\u97A4", 6, "\u97AC\u97AE\u97B0\u97B1\u97B3\u97B5", 46],
        ["ed80", "\u97E4\u97E5\u97E8\u97EE", 4, "\u97F4\u97F7", 23, "\u603C\u605D\u605A\u6067\u6041\u6059\u6063\u60AB\u6106\u610D\u615D\u61A9\u619D\u61CB\u61D1\u6206\u8080\u807F\u6C93\u6CF6\u6DFC\u77F6\u77F8\u7800\u7809\u7817\u7818\u7811\u65AB\u782D\u781C\u781D\u7839\u783A\u783B\u781F\u783C\u7825\u782C\u7823\u7829\u784E\u786D\u7856\u7857\u7826\u7850\u7847\u784C\u786A\u789B\u7893\u789A\u7887\u789C\u78A1\u78A3\u78B2\u78B9\u78A5\u78D4\u78D9\u78C9\u78EC\u78F2\u7905\u78F4\u7913\u7924\u791E\u7934\u9F9B\u9EF9\u9EFB\u9EFC\u76F1\u7704\u770D\u76F9\u7707\u7708\u771A\u7722\u7719\u772D\u7726\u7735\u7738\u7750\u7751\u7747\u7743\u775A\u7768"],
        ["ee40", "\u980F", 62],
        ["ee80", "\u984E", 32, "\u7762\u7765\u777F\u778D\u777D\u7780\u778C\u7791\u779F\u77A0\u77B0\u77B5\u77BD\u753A\u7540\u754E\u754B\u7548\u755B\u7572\u7579\u7583\u7F58\u7F61\u7F5F\u8A48\u7F68\u7F74\u7F71\u7F79\u7F81\u7F7E\u76CD\u76E5\u8832\u9485\u9486\u9487\u948B\u948A\u948C\u948D\u948F\u9490\u9494\u9497\u9495\u949A\u949B\u949C\u94A3\u94A4\u94AB\u94AA\u94AD\u94AC\u94AF\u94B0\u94B2\u94B4\u94B6", 4, "\u94BC\u94BD\u94BF\u94C4\u94C8", 6, "\u94D0\u94D1\u94D2\u94D5\u94D6\u94D7\u94D9\u94D8\u94DB\u94DE\u94DF\u94E0\u94E2\u94E4\u94E5\u94E7\u94E8\u94EA"],
        ["ef40", "\u986F", 5, "\u988B\u988E\u9892\u9895\u9899\u98A3\u98A8", 37, "\u98CF\u98D0\u98D4\u98D6\u98D7\u98DB\u98DC\u98DD\u98E0", 4],
        ["ef80", "\u98E5\u98E6\u98E9", 30, "\u94E9\u94EB\u94EE\u94EF\u94F3\u94F4\u94F5\u94F7\u94F9\u94FC\u94FD\u94FF\u9503\u9502\u9506\u9507\u9509\u950A\u950D\u950E\u950F\u9512", 4, "\u9518\u951B\u951D\u951E\u951F\u9522\u952A\u952B\u9529\u952C\u9531\u9532\u9534\u9536\u9537\u9538\u953C\u953E\u953F\u9542\u9535\u9544\u9545\u9546\u9549\u954C\u954E\u954F\u9552\u9553\u9554\u9556\u9557\u9558\u9559\u955B\u955E\u955F\u955D\u9561\u9562\u9564", 8, "\u956F\u9571\u9572\u9573\u953A\u77E7\u77EC\u96C9\u79D5\u79ED\u79E3\u79EB\u7A06\u5D47\u7A03\u7A02\u7A1E\u7A14"],
        ["f040", "\u9908", 4, "\u990E\u990F\u9911", 28, "\u992F", 26],
        ["f080", "\u994A", 9, "\u9956", 12, "\u9964\u9966\u9973\u9978\u9979\u997B\u997E\u9982\u9983\u9989\u7A39\u7A37\u7A51\u9ECF\u99A5\u7A70\u7688\u768E\u7693\u7699\u76A4\u74DE\u74E0\u752C\u9E20\u9E22\u9E28", 4, "\u9E32\u9E31\u9E36\u9E38\u9E37\u9E39\u9E3A\u9E3E\u9E41\u9E42\u9E44\u9E46\u9E47\u9E48\u9E49\u9E4B\u9E4C\u9E4E\u9E51\u9E55\u9E57\u9E5A\u9E5B\u9E5C\u9E5E\u9E63\u9E66", 6, "\u9E71\u9E6D\u9E73\u7592\u7594\u7596\u75A0\u759D\u75AC\u75A3\u75B3\u75B4\u75B8\u75C4\u75B1\u75B0\u75C3\u75C2\u75D6\u75CD\u75E3\u75E8\u75E6\u75E4\u75EB\u75E7\u7603\u75F1\u75FC\u75FF\u7610\u7600\u7605\u760C\u7617\u760A\u7625\u7618\u7615\u7619"],
        ["f140", "\u998C\u998E\u999A", 10, "\u99A6\u99A7\u99A9", 47],
        ["f180", "\u99D9", 32, "\u761B\u763C\u7622\u7620\u7640\u762D\u7630\u763F\u7635\u7643\u763E\u7633\u764D\u765E\u7654\u765C\u7656\u766B\u766F\u7FCA\u7AE6\u7A78\u7A79\u7A80\u7A86\u7A88\u7A95\u7AA6\u7AA0\u7AAC\u7AA8\u7AAD\u7AB3\u8864\u8869\u8872\u887D\u887F\u8882\u88A2\u88C6\u88B7\u88BC\u88C9\u88E2\u88CE\u88E3\u88E5\u88F1\u891A\u88FC\u88E8\u88FE\u88F0\u8921\u8919\u8913\u891B\u890A\u8934\u892B\u8936\u8941\u8966\u897B\u758B\u80E5\u76B2\u76B4\u77DC\u8012\u8014\u8016\u801C\u8020\u8022\u8025\u8026\u8027\u8029\u8028\u8031\u800B\u8035\u8043\u8046\u804D\u8052\u8069\u8071\u8983\u9878\u9880\u9883"],
        ["f240", "\u99FA", 62],
        ["f280", "\u9A39", 32, "\u9889\u988C\u988D\u988F\u9894\u989A\u989B\u989E\u989F\u98A1\u98A2\u98A5\u98A6\u864D\u8654\u866C\u866E\u867F\u867A\u867C\u867B\u86A8\u868D\u868B\u86AC\u869D\u86A7\u86A3\u86AA\u8693\u86A9\u86B6\u86C4\u86B5\u86CE\u86B0\u86BA\u86B1\u86AF\u86C9\u86CF\u86B4\u86E9\u86F1\u86F2\u86ED\u86F3\u86D0\u8713\u86DE\u86F4\u86DF\u86D8\u86D1\u8703\u8707\u86F8\u8708\u870A\u870D\u8709\u8723\u873B\u871E\u8725\u872E\u871A\u873E\u8748\u8734\u8731\u8729\u8737\u873F\u8782\u8722\u877D\u877E\u877B\u8760\u8770\u874C\u876E\u878B\u8753\u8763\u877C\u8764\u8759\u8765\u8793\u87AF\u87A8\u87D2"],
        ["f340", "\u9A5A", 17, "\u9A72\u9A83\u9A89\u9A8D\u9A8E\u9A94\u9A95\u9A99\u9AA6\u9AA9", 6, "\u9AB2\u9AB3\u9AB4\u9AB5\u9AB9\u9ABB\u9ABD\u9ABE\u9ABF\u9AC3\u9AC4\u9AC6", 4, "\u9ACD\u9ACE\u9ACF\u9AD0\u9AD2\u9AD4\u9AD5\u9AD6\u9AD7\u9AD9\u9ADA\u9ADB\u9ADC"],
        ["f380", "\u9ADD\u9ADE\u9AE0\u9AE2\u9AE3\u9AE4\u9AE5\u9AE7\u9AE8\u9AE9\u9AEA\u9AEC\u9AEE\u9AF0", 8, "\u9AFA\u9AFC", 6, "\u9B04\u9B05\u9B06\u87C6\u8788\u8785\u87AD\u8797\u8783\u87AB\u87E5\u87AC\u87B5\u87B3\u87CB\u87D3\u87BD\u87D1\u87C0\u87CA\u87DB\u87EA\u87E0\u87EE\u8816\u8813\u87FE\u880A\u881B\u8821\u8839\u883C\u7F36\u7F42\u7F44\u7F45\u8210\u7AFA\u7AFD\u7B08\u7B03\u7B04\u7B15\u7B0A\u7B2B\u7B0F\u7B47\u7B38\u7B2A\u7B19\u7B2E\u7B31\u7B20\u7B25\u7B24\u7B33\u7B3E\u7B1E\u7B58\u7B5A\u7B45\u7B75\u7B4C\u7B5D\u7B60\u7B6E\u7B7B\u7B62\u7B72\u7B71\u7B90\u7BA6\u7BA7\u7BB8\u7BAC\u7B9D\u7BA8\u7B85\u7BAA\u7B9C\u7BA2\u7BAB\u7BB4\u7BD1\u7BC1\u7BCC\u7BDD\u7BDA\u7BE5\u7BE6\u7BEA\u7C0C\u7BFE\u7BFC\u7C0F\u7C16\u7C0B"],
        ["f440", "\u9B07\u9B09", 5, "\u9B10\u9B11\u9B12\u9B14", 10, "\u9B20\u9B21\u9B22\u9B24", 10, "\u9B30\u9B31\u9B33", 7, "\u9B3D\u9B3E\u9B3F\u9B40\u9B46\u9B4A\u9B4B\u9B4C\u9B4E\u9B50\u9B52\u9B53\u9B55", 5],
        ["f480", "\u9B5B", 32, "\u7C1F\u7C2A\u7C26\u7C38\u7C41\u7C40\u81FE\u8201\u8202\u8204\u81EC\u8844\u8221\u8222\u8223\u822D\u822F\u8228\u822B\u8238\u823B\u8233\u8234\u823E\u8244\u8249\u824B\u824F\u825A\u825F\u8268\u887E\u8885\u8888\u88D8\u88DF\u895E\u7F9D\u7F9F\u7FA7\u7FAF\u7FB0\u7FB2\u7C7C\u6549\u7C91\u7C9D\u7C9C\u7C9E\u7CA2\u7CB2\u7CBC\u7CBD\u7CC1\u7CC7\u7CCC\u7CCD\u7CC8\u7CC5\u7CD7\u7CE8\u826E\u66A8\u7FBF\u7FCE\u7FD5\u7FE5\u7FE1\u7FE6\u7FE9\u7FEE\u7FF3\u7CF8\u7D77\u7DA6\u7DAE\u7E47\u7E9B\u9EB8\u9EB4\u8D73\u8D84\u8D94\u8D91\u8DB1\u8D67\u8D6D\u8C47\u8C49\u914A\u9150\u914E\u914F\u9164"],
        ["f540", "\u9B7C", 62],
        ["f580", "\u9BBB", 32, "\u9162\u9161\u9170\u9169\u916F\u917D\u917E\u9172\u9174\u9179\u918C\u9185\u9190\u918D\u9191\u91A2\u91A3\u91AA\u91AD\u91AE\u91AF\u91B5\u91B4\u91BA\u8C55\u9E7E\u8DB8\u8DEB\u8E05\u8E59\u8E69\u8DB5\u8DBF\u8DBC\u8DBA\u8DC4\u8DD6\u8DD7\u8DDA\u8DDE\u8DCE\u8DCF\u8DDB\u8DC6\u8DEC\u8DF7\u8DF8\u8DE3\u8DF9\u8DFB\u8DE4\u8E09\u8DFD\u8E14\u8E1D\u8E1F\u8E2C\u8E2E\u8E23\u8E2F\u8E3A\u8E40\u8E39\u8E35\u8E3D\u8E31\u8E49\u8E41\u8E42\u8E51\u8E52\u8E4A\u8E70\u8E76\u8E7C\u8E6F\u8E74\u8E85\u8E8F\u8E94\u8E90\u8E9C\u8E9E\u8C78\u8C82\u8C8A\u8C85\u8C98\u8C94\u659B\u89D6\u89DE\u89DA\u89DC"],
        ["f640", "\u9BDC", 62],
        ["f680", "\u9C1B", 32, "\u89E5\u89EB\u89EF\u8A3E\u8B26\u9753\u96E9\u96F3\u96EF\u9706\u9701\u9708\u970F\u970E\u972A\u972D\u9730\u973E\u9F80\u9F83\u9F85", 5, "\u9F8C\u9EFE\u9F0B\u9F0D\u96B9\u96BC\u96BD\u96CE\u96D2\u77BF\u96E0\u928E\u92AE\u92C8\u933E\u936A\u93CA\u938F\u943E\u946B\u9C7F\u9C82\u9C85\u9C86\u9C87\u9C88\u7A23\u9C8B\u9C8E\u9C90\u9C91\u9C92\u9C94\u9C95\u9C9A\u9C9B\u9C9E", 5, "\u9CA5", 4, "\u9CAB\u9CAD\u9CAE\u9CB0", 7, "\u9CBA\u9CBB\u9CBC\u9CBD\u9CC4\u9CC5\u9CC6\u9CC7\u9CCA\u9CCB"],
        ["f740", "\u9C3C", 62],
        ["f780", "\u9C7B\u9C7D\u9C7E\u9C80\u9C83\u9C84\u9C89\u9C8A\u9C8C\u9C8F\u9C93\u9C96\u9C97\u9C98\u9C99\u9C9D\u9CAA\u9CAC\u9CAF\u9CB9\u9CBE", 4, "\u9CC8\u9CC9\u9CD1\u9CD2\u9CDA\u9CDB\u9CE0\u9CE1\u9CCC", 4, "\u9CD3\u9CD4\u9CD5\u9CD7\u9CD8\u9CD9\u9CDC\u9CDD\u9CDF\u9CE2\u977C\u9785\u9791\u9792\u9794\u97AF\u97AB\u97A3\u97B2\u97B4\u9AB1\u9AB0\u9AB7\u9E58\u9AB6\u9ABA\u9ABC\u9AC1\u9AC0\u9AC5\u9AC2\u9ACB\u9ACC\u9AD1\u9B45\u9B43\u9B47\u9B49\u9B48\u9B4D\u9B51\u98E8\u990D\u992E\u9955\u9954\u9ADF\u9AE1\u9AE6\u9AEF\u9AEB\u9AFB\u9AED\u9AF9\u9B08\u9B0F\u9B13\u9B1F\u9B23\u9EBD\u9EBE\u7E3B\u9E82\u9E87\u9E88\u9E8B\u9E92\u93D6\u9E9D\u9E9F\u9EDB\u9EDC\u9EDD\u9EE0\u9EDF\u9EE2\u9EE9\u9EE7\u9EE5\u9EEA\u9EEF\u9F22\u9F2C\u9F2F\u9F39\u9F37\u9F3D\u9F3E\u9F44"],
        ["f840", "\u9CE3", 62],
        ["f880", "\u9D22", 32],
        ["f940", "\u9D43", 62],
        ["f980", "\u9D82", 32],
        ["fa40", "\u9DA3", 62],
        ["fa80", "\u9DE2", 32],
        ["fb40", "\u9E03", 27, "\u9E24\u9E27\u9E2E\u9E30\u9E34\u9E3B\u9E3C\u9E40\u9E4D\u9E50\u9E52\u9E53\u9E54\u9E56\u9E59\u9E5D\u9E5F\u9E60\u9E61\u9E62\u9E65\u9E6E\u9E6F\u9E72\u9E74", 9, "\u9E80"],
        ["fb80", "\u9E81\u9E83\u9E84\u9E85\u9E86\u9E89\u9E8A\u9E8C", 5, "\u9E94", 8, "\u9E9E\u9EA0", 5, "\u9EA7\u9EA8\u9EA9\u9EAA"],
        ["fc40", "\u9EAB", 8, "\u9EB5\u9EB6\u9EB7\u9EB9\u9EBA\u9EBC\u9EBF", 4, "\u9EC5\u9EC6\u9EC7\u9EC8\u9ECA\u9ECB\u9ECC\u9ED0\u9ED2\u9ED3\u9ED5\u9ED6\u9ED7\u9ED9\u9EDA\u9EDE\u9EE1\u9EE3\u9EE4\u9EE6\u9EE8\u9EEB\u9EEC\u9EED\u9EEE\u9EF0", 8, "\u9EFA\u9EFD\u9EFF", 6],
        ["fc80", "\u9F06", 4, "\u9F0C\u9F0F\u9F11\u9F12\u9F14\u9F15\u9F16\u9F18\u9F1A", 5, "\u9F21\u9F23", 8, "\u9F2D\u9F2E\u9F30\u9F31"],
        ["fd40", "\u9F32", 4, "\u9F38\u9F3A\u9F3C\u9F3F", 4, "\u9F45", 10, "\u9F52", 38],
        ["fd80", "\u9F79", 5, "\u9F81\u9F82\u9F8D", 11, "\u9F9C\u9F9D\u9F9E\u9FA1", 4, "\uF92C\uF979\uF995\uF9E7\uF9F1"],
        ["fe40", "\uFA0C\uFA0D\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA18\uFA1F\uFA20\uFA21\uFA23\uFA24\uFA27\uFA28\uFA29"]
      ];
    }
  });

  // ../modules/cmd/node_modules/iconv-lite/encodings/tables/gbk-added.json
  var require_gbk_added = __commonJS({
    "../modules/cmd/node_modules/iconv-lite/encodings/tables/gbk-added.json"(exports, module) {
      module.exports = [
        ["a140", "\uE4C6", 62],
        ["a180", "\uE505", 32],
        ["a240", "\uE526", 62],
        ["a280", "\uE565", 32],
        ["a2ab", "\uE766", 5],
        ["a2e3", "\u20AC\uE76D"],
        ["a2ef", "\uE76E\uE76F"],
        ["a2fd", "\uE770\uE771"],
        ["a340", "\uE586", 62],
        ["a380", "\uE5C5", 31, "\u3000"],
        ["a440", "\uE5E6", 62],
        ["a480", "\uE625", 32],
        ["a4f4", "\uE772", 10],
        ["a540", "\uE646", 62],
        ["a580", "\uE685", 32],
        ["a5f7", "\uE77D", 7],
        ["a640", "\uE6A6", 62],
        ["a680", "\uE6E5", 32],
        ["a6b9", "\uE785", 7],
        ["a6d9", "\uE78D", 6],
        ["a6ec", "\uE794\uE795"],
        ["a6f3", "\uE796"],
        ["a6f6", "\uE797", 8],
        ["a740", "\uE706", 62],
        ["a780", "\uE745", 32],
        ["a7c2", "\uE7A0", 14],
        ["a7f2", "\uE7AF", 12],
        ["a896", "\uE7BC", 10],
        ["a8bc", "\u1E3F"],
        ["a8bf", "\u01F9"],
        ["a8c1", "\uE7C9\uE7CA\uE7CB\uE7CC"],
        ["a8ea", "\uE7CD", 20],
        ["a958", "\uE7E2"],
        ["a95b", "\uE7E3"],
        ["a95d", "\uE7E4\uE7E5\uE7E6"],
        ["a989", "\u303E\u2FF0", 11],
        ["a997", "\uE7F4", 12],
        ["a9f0", "\uE801", 14],
        ["aaa1", "\uE000", 93],
        ["aba1", "\uE05E", 93],
        ["aca1", "\uE0BC", 93],
        ["ada1", "\uE11A", 93],
        ["aea1", "\uE178", 93],
        ["afa1", "\uE1D6", 93],
        ["d7fa", "\uE810", 4],
        ["f8a1", "\uE234", 93],
        ["f9a1", "\uE292", 93],
        ["faa1", "\uE2F0", 93],
        ["fba1", "\uE34E", 93],
        ["fca1", "\uE3AC", 93],
        ["fda1", "\uE40A", 93],
        ["fe50", "\u2E81\uE816\uE817\uE818\u2E84\u3473\u3447\u2E88\u2E8B\uE81E\u359E\u361A\u360E\u2E8C\u2E97\u396E\u3918\uE826\u39CF\u39DF\u3A73\u39D0\uE82B\uE82C\u3B4E\u3C6E\u3CE0\u2EA7\uE831\uE832\u2EAA\u4056\u415F\u2EAE\u4337\u2EB3\u2EB6\u2EB7\uE83B\u43B1\u43AC\u2EBB\u43DD\u44D6\u4661\u464C\uE843"],
        ["fe80", "\u4723\u4729\u477C\u478D\u2ECA\u4947\u497A\u497D\u4982\u4983\u4985\u4986\u499F\u499B\u49B7\u49B6\uE854\uE855\u4CA3\u4C9F\u4CA0\u4CA1\u4C77\u4CA2\u4D13", 6, "\u4DAE\uE864\uE468", 93],
        ["8135f437", "\uE7C7"]
      ];
    }
  });

  // ../modules/cmd/node_modules/iconv-lite/encodings/tables/gb18030-ranges.json
  var require_gb18030_ranges = __commonJS({
    "../modules/cmd/node_modules/iconv-lite/encodings/tables/gb18030-ranges.json"(exports, module) {
      module.exports = { uChars: [128, 165, 169, 178, 184, 216, 226, 235, 238, 244, 248, 251, 253, 258, 276, 284, 300, 325, 329, 334, 364, 463, 465, 467, 469, 471, 473, 475, 477, 506, 594, 610, 712, 716, 730, 930, 938, 962, 970, 1026, 1104, 1106, 8209, 8215, 8218, 8222, 8231, 8241, 8244, 8246, 8252, 8365, 8452, 8454, 8458, 8471, 8482, 8556, 8570, 8596, 8602, 8713, 8720, 8722, 8726, 8731, 8737, 8740, 8742, 8748, 8751, 8760, 8766, 8777, 8781, 8787, 8802, 8808, 8816, 8854, 8858, 8870, 8896, 8979, 9322, 9372, 9548, 9588, 9616, 9622, 9634, 9652, 9662, 9672, 9676, 9680, 9702, 9735, 9738, 9793, 9795, 11906, 11909, 11913, 11917, 11928, 11944, 11947, 11951, 11956, 11960, 11964, 11979, 12284, 12292, 12312, 12319, 12330, 12351, 12436, 12447, 12535, 12543, 12586, 12842, 12850, 12964, 13200, 13215, 13218, 13253, 13263, 13267, 13270, 13384, 13428, 13727, 13839, 13851, 14617, 14703, 14801, 14816, 14964, 15183, 15471, 15585, 16471, 16736, 17208, 17325, 17330, 17374, 17623, 17997, 18018, 18212, 18218, 18301, 18318, 18760, 18811, 18814, 18820, 18823, 18844, 18848, 18872, 19576, 19620, 19738, 19887, 40870, 59244, 59336, 59367, 59413, 59417, 59423, 59431, 59437, 59443, 59452, 59460, 59478, 59493, 63789, 63866, 63894, 63976, 63986, 64016, 64018, 64021, 64025, 64034, 64037, 64042, 65074, 65093, 65107, 65112, 65127, 65132, 65375, 65510, 65536], gbChars: [0, 36, 38, 45, 50, 81, 89, 95, 96, 100, 103, 104, 105, 109, 126, 133, 148, 172, 175, 179, 208, 306, 307, 308, 309, 310, 311, 312, 313, 341, 428, 443, 544, 545, 558, 741, 742, 749, 750, 805, 819, 820, 7922, 7924, 7925, 7927, 7934, 7943, 7944, 7945, 7950, 8062, 8148, 8149, 8152, 8164, 8174, 8236, 8240, 8262, 8264, 8374, 8380, 8381, 8384, 8388, 8390, 8392, 8393, 8394, 8396, 8401, 8406, 8416, 8419, 8424, 8437, 8439, 8445, 8482, 8485, 8496, 8521, 8603, 8936, 8946, 9046, 9050, 9063, 9066, 9076, 9092, 9100, 9108, 9111, 9113, 9131, 9162, 9164, 9218, 9219, 11329, 11331, 11334, 11336, 11346, 11361, 11363, 11366, 11370, 11372, 11375, 11389, 11682, 11686, 11687, 11692, 11694, 11714, 11716, 11723, 11725, 11730, 11736, 11982, 11989, 12102, 12336, 12348, 12350, 12384, 12393, 12395, 12397, 12510, 12553, 12851, 12962, 12973, 13738, 13823, 13919, 13933, 14080, 14298, 14585, 14698, 15583, 15847, 16318, 16434, 16438, 16481, 16729, 17102, 17122, 17315, 17320, 17402, 17418, 17859, 17909, 17911, 17915, 17916, 17936, 17939, 17961, 18664, 18703, 18814, 18962, 19043, 33469, 33470, 33471, 33484, 33485, 33490, 33497, 33501, 33505, 33513, 33520, 33536, 33550, 37845, 37921, 37948, 38029, 38038, 38064, 38065, 38066, 38069, 38075, 38076, 38078, 39108, 39109, 39113, 39114, 39115, 39116, 39265, 39394, 189e3] };
    }
  });

  // ../modules/cmd/node_modules/iconv-lite/encodings/tables/cp949.json
  var require_cp949 = __commonJS({
    "../modules/cmd/node_modules/iconv-lite/encodings/tables/cp949.json"(exports, module) {
      module.exports = [
        ["0", "\0", 127],
        ["8141", "\uAC02\uAC03\uAC05\uAC06\uAC0B", 4, "\uAC18\uAC1E\uAC1F\uAC21\uAC22\uAC23\uAC25", 6, "\uAC2E\uAC32\uAC33\uAC34"],
        ["8161", "\uAC35\uAC36\uAC37\uAC3A\uAC3B\uAC3D\uAC3E\uAC3F\uAC41", 9, "\uAC4C\uAC4E", 5, "\uAC55"],
        ["8181", "\uAC56\uAC57\uAC59\uAC5A\uAC5B\uAC5D", 18, "\uAC72\uAC73\uAC75\uAC76\uAC79\uAC7B", 4, "\uAC82\uAC87\uAC88\uAC8D\uAC8E\uAC8F\uAC91\uAC92\uAC93\uAC95", 6, "\uAC9E\uACA2", 5, "\uACAB\uACAD\uACAE\uACB1", 6, "\uACBA\uACBE\uACBF\uACC0\uACC2\uACC3\uACC5\uACC6\uACC7\uACC9\uACCA\uACCB\uACCD", 7, "\uACD6\uACD8", 7, "\uACE2\uACE3\uACE5\uACE6\uACE9\uACEB\uACED\uACEE\uACF2\uACF4\uACF7", 4, "\uACFE\uACFF\uAD01\uAD02\uAD03\uAD05\uAD07", 4, "\uAD0E\uAD10\uAD12\uAD13"],
        ["8241", "\uAD14\uAD15\uAD16\uAD17\uAD19\uAD1A\uAD1B\uAD1D\uAD1E\uAD1F\uAD21", 7, "\uAD2A\uAD2B\uAD2E", 5],
        ["8261", "\uAD36\uAD37\uAD39\uAD3A\uAD3B\uAD3D", 6, "\uAD46\uAD48\uAD4A", 5, "\uAD51\uAD52\uAD53\uAD55\uAD56\uAD57"],
        ["8281", "\uAD59", 7, "\uAD62\uAD64", 7, "\uAD6E\uAD6F\uAD71\uAD72\uAD77\uAD78\uAD79\uAD7A\uAD7E\uAD80\uAD83", 4, "\uAD8A\uAD8B\uAD8D\uAD8E\uAD8F\uAD91", 10, "\uAD9E", 5, "\uADA5", 17, "\uADB8", 7, "\uADC2\uADC3\uADC5\uADC6\uADC7\uADC9", 6, "\uADD2\uADD4", 7, "\uADDD\uADDE\uADDF\uADE1\uADE2\uADE3\uADE5", 18],
        ["8341", "\uADFA\uADFB\uADFD\uADFE\uAE02", 5, "\uAE0A\uAE0C\uAE0E", 5, "\uAE15", 7],
        ["8361", "\uAE1D", 18, "\uAE32\uAE33\uAE35\uAE36\uAE39\uAE3B\uAE3C"],
        ["8381", "\uAE3D\uAE3E\uAE3F\uAE42\uAE44\uAE47\uAE48\uAE49\uAE4B\uAE4F\uAE51\uAE52\uAE53\uAE55\uAE57", 4, "\uAE5E\uAE62\uAE63\uAE64\uAE66\uAE67\uAE6A\uAE6B\uAE6D\uAE6E\uAE6F\uAE71", 6, "\uAE7A\uAE7E", 5, "\uAE86", 5, "\uAE8D", 46, "\uAEBF\uAEC1\uAEC2\uAEC3\uAEC5", 6, "\uAECE\uAED2", 5, "\uAEDA\uAEDB\uAEDD", 8],
        ["8441", "\uAEE6\uAEE7\uAEE9\uAEEA\uAEEC\uAEEE", 5, "\uAEF5\uAEF6\uAEF7\uAEF9\uAEFA\uAEFB\uAEFD", 8],
        ["8461", "\uAF06\uAF09\uAF0A\uAF0B\uAF0C\uAF0E\uAF0F\uAF11", 18],
        ["8481", "\uAF24", 7, "\uAF2E\uAF2F\uAF31\uAF33\uAF35", 6, "\uAF3E\uAF40\uAF44\uAF45\uAF46\uAF47\uAF4A", 5, "\uAF51", 10, "\uAF5E", 5, "\uAF66", 18, "\uAF7A", 5, "\uAF81\uAF82\uAF83\uAF85\uAF86\uAF87\uAF89", 6, "\uAF92\uAF93\uAF94\uAF96", 5, "\uAF9D", 26, "\uAFBA\uAFBB\uAFBD\uAFBE"],
        ["8541", "\uAFBF\uAFC1", 5, "\uAFCA\uAFCC\uAFCF", 4, "\uAFD5", 6, "\uAFDD", 4],
        ["8561", "\uAFE2", 5, "\uAFEA", 5, "\uAFF2\uAFF3\uAFF5\uAFF6\uAFF7\uAFF9", 6, "\uB002\uB003"],
        ["8581", "\uB005", 6, "\uB00D\uB00E\uB00F\uB011\uB012\uB013\uB015", 6, "\uB01E", 9, "\uB029", 26, "\uB046\uB047\uB049\uB04B\uB04D\uB04F\uB050\uB051\uB052\uB056\uB058\uB05A\uB05B\uB05C\uB05E", 29, "\uB07E\uB07F\uB081\uB082\uB083\uB085", 6, "\uB08E\uB090\uB092", 5, "\uB09B\uB09D\uB09E\uB0A3\uB0A4"],
        ["8641", "\uB0A5\uB0A6\uB0A7\uB0AA\uB0B0\uB0B2\uB0B6\uB0B7\uB0B9\uB0BA\uB0BB\uB0BD", 6, "\uB0C6\uB0CA", 5, "\uB0D2"],
        ["8661", "\uB0D3\uB0D5\uB0D6\uB0D7\uB0D9", 6, "\uB0E1\uB0E2\uB0E3\uB0E4\uB0E6", 10],
        ["8681", "\uB0F1", 22, "\uB10A\uB10D\uB10E\uB10F\uB111\uB114\uB115\uB116\uB117\uB11A\uB11E", 4, "\uB126\uB127\uB129\uB12A\uB12B\uB12D", 6, "\uB136\uB13A", 5, "\uB142\uB143\uB145\uB146\uB147\uB149", 6, "\uB152\uB153\uB156\uB157\uB159\uB15A\uB15B\uB15D\uB15E\uB15F\uB161", 22, "\uB17A\uB17B\uB17D\uB17E\uB17F\uB181\uB183", 4, "\uB18A\uB18C\uB18E\uB18F\uB190\uB191\uB195\uB196\uB197\uB199\uB19A\uB19B\uB19D"],
        ["8741", "\uB19E", 9, "\uB1A9", 15],
        ["8761", "\uB1B9", 18, "\uB1CD\uB1CE\uB1CF\uB1D1\uB1D2\uB1D3\uB1D5"],
        ["8781", "\uB1D6", 5, "\uB1DE\uB1E0", 7, "\uB1EA\uB1EB\uB1ED\uB1EE\uB1EF\uB1F1", 7, "\uB1FA\uB1FC\uB1FE", 5, "\uB206\uB207\uB209\uB20A\uB20D", 6, "\uB216\uB218\uB21A", 5, "\uB221", 18, "\uB235", 6, "\uB23D", 26, "\uB259\uB25A\uB25B\uB25D\uB25E\uB25F\uB261", 6, "\uB26A", 4],
        ["8841", "\uB26F", 4, "\uB276", 5, "\uB27D", 6, "\uB286\uB287\uB288\uB28A", 4],
        ["8861", "\uB28F\uB292\uB293\uB295\uB296\uB297\uB29B", 4, "\uB2A2\uB2A4\uB2A7\uB2A8\uB2A9\uB2AB\uB2AD\uB2AE\uB2AF\uB2B1\uB2B2\uB2B3\uB2B5\uB2B6\uB2B7"],
        ["8881", "\uB2B8", 15, "\uB2CA\uB2CB\uB2CD\uB2CE\uB2CF\uB2D1\uB2D3", 4, "\uB2DA\uB2DC\uB2DE\uB2DF\uB2E0\uB2E1\uB2E3\uB2E7\uB2E9\uB2EA\uB2F0\uB2F1\uB2F2\uB2F6\uB2FC\uB2FD\uB2FE\uB302\uB303\uB305\uB306\uB307\uB309", 6, "\uB312\uB316", 5, "\uB31D", 54, "\uB357\uB359\uB35A\uB35D\uB360\uB361\uB362\uB363"],
        ["8941", "\uB366\uB368\uB36A\uB36C\uB36D\uB36F\uB372\uB373\uB375\uB376\uB377\uB379", 6, "\uB382\uB386", 5, "\uB38D"],
        ["8961", "\uB38E\uB38F\uB391\uB392\uB393\uB395", 10, "\uB3A2", 5, "\uB3A9\uB3AA\uB3AB\uB3AD"],
        ["8981", "\uB3AE", 21, "\uB3C6\uB3C7\uB3C9\uB3CA\uB3CD\uB3CF\uB3D1\uB3D2\uB3D3\uB3D6\uB3D8\uB3DA\uB3DC\uB3DE\uB3DF\uB3E1\uB3E2\uB3E3\uB3E5\uB3E6\uB3E7\uB3E9", 18, "\uB3FD", 18, "\uB411", 6, "\uB419\uB41A\uB41B\uB41D\uB41E\uB41F\uB421", 6, "\uB42A\uB42C", 7, "\uB435", 15],
        ["8a41", "\uB445", 10, "\uB452\uB453\uB455\uB456\uB457\uB459", 6, "\uB462\uB464\uB466"],
        ["8a61", "\uB467", 4, "\uB46D", 18, "\uB481\uB482"],
        ["8a81", "\uB483", 4, "\uB489", 19, "\uB49E", 5, "\uB4A5\uB4A6\uB4A7\uB4A9\uB4AA\uB4AB\uB4AD", 7, "\uB4B6\uB4B8\uB4BA", 5, "\uB4C1\uB4C2\uB4C3\uB4C5\uB4C6\uB4C7\uB4C9", 6, "\uB4D1\uB4D2\uB4D3\uB4D4\uB4D6", 5, "\uB4DE\uB4DF\uB4E1\uB4E2\uB4E5\uB4E7", 4, "\uB4EE\uB4F0\uB4F2", 5, "\uB4F9", 26, "\uB516\uB517\uB519\uB51A\uB51D"],
        ["8b41", "\uB51E", 5, "\uB526\uB52B", 4, "\uB532\uB533\uB535\uB536\uB537\uB539", 6, "\uB542\uB546"],
        ["8b61", "\uB547\uB548\uB549\uB54A\uB54E\uB54F\uB551\uB552\uB553\uB555", 6, "\uB55E\uB562", 8],
        ["8b81", "\uB56B", 52, "\uB5A2\uB5A3\uB5A5\uB5A6\uB5A7\uB5A9\uB5AC\uB5AD\uB5AE\uB5AF\uB5B2\uB5B6", 4, "\uB5BE\uB5BF\uB5C1\uB5C2\uB5C3\uB5C5", 6, "\uB5CE\uB5D2", 5, "\uB5D9", 18, "\uB5ED", 18],
        ["8c41", "\uB600", 15, "\uB612\uB613\uB615\uB616\uB617\uB619", 4],
        ["8c61", "\uB61E", 6, "\uB626", 5, "\uB62D", 6, "\uB635", 5],
        ["8c81", "\uB63B", 12, "\uB649", 26, "\uB665\uB666\uB667\uB669", 50, "\uB69E\uB69F\uB6A1\uB6A2\uB6A3\uB6A5", 5, "\uB6AD\uB6AE\uB6AF\uB6B0\uB6B2", 16],
        ["8d41", "\uB6C3", 16, "\uB6D5", 8],
        ["8d61", "\uB6DE", 17, "\uB6F1\uB6F2\uB6F3\uB6F5\uB6F6\uB6F7\uB6F9\uB6FA"],
        ["8d81", "\uB6FB", 4, "\uB702\uB703\uB704\uB706", 33, "\uB72A\uB72B\uB72D\uB72E\uB731", 6, "\uB73A\uB73C", 7, "\uB745\uB746\uB747\uB749\uB74A\uB74B\uB74D", 6, "\uB756", 9, "\uB761\uB762\uB763\uB765\uB766\uB767\uB769", 6, "\uB772\uB774\uB776", 5, "\uB77E\uB77F\uB781\uB782\uB783\uB785", 6, "\uB78E\uB793\uB794\uB795\uB79A\uB79B\uB79D\uB79E"],
        ["8e41", "\uB79F\uB7A1", 6, "\uB7AA\uB7AE", 5, "\uB7B6\uB7B7\uB7B9", 8],
        ["8e61", "\uB7C2", 4, "\uB7C8\uB7CA", 19],
        ["8e81", "\uB7DE", 13, "\uB7EE\uB7EF\uB7F1\uB7F2\uB7F3\uB7F5", 6, "\uB7FE\uB802", 4, "\uB80A\uB80B\uB80D\uB80E\uB80F\uB811", 6, "\uB81A\uB81C\uB81E", 5, "\uB826\uB827\uB829\uB82A\uB82B\uB82D", 6, "\uB836\uB83A", 5, "\uB841\uB842\uB843\uB845", 11, "\uB852\uB854", 7, "\uB85E\uB85F\uB861\uB862\uB863\uB865", 6, "\uB86E\uB870\uB872", 5, "\uB879\uB87A\uB87B\uB87D", 7],
        ["8f41", "\uB885", 7, "\uB88E", 17],
        ["8f61", "\uB8A0", 7, "\uB8A9", 6, "\uB8B1\uB8B2\uB8B3\uB8B5\uB8B6\uB8B7\uB8B9", 4],
        ["8f81", "\uB8BE\uB8BF\uB8C2\uB8C4\uB8C6", 5, "\uB8CD\uB8CE\uB8CF\uB8D1\uB8D2\uB8D3\uB8D5", 7, "\uB8DE\uB8E0\uB8E2", 5, "\uB8EA\uB8EB\uB8ED\uB8EE\uB8EF\uB8F1", 6, "\uB8FA\uB8FC\uB8FE", 5, "\uB905", 18, "\uB919", 6, "\uB921", 26, "\uB93E\uB93F\uB941\uB942\uB943\uB945", 6, "\uB94D\uB94E\uB950\uB952", 5],
        ["9041", "\uB95A\uB95B\uB95D\uB95E\uB95F\uB961", 6, "\uB96A\uB96C\uB96E", 5, "\uB976\uB977\uB979\uB97A\uB97B\uB97D"],
        ["9061", "\uB97E", 5, "\uB986\uB988\uB98B\uB98C\uB98F", 15],
        ["9081", "\uB99F", 12, "\uB9AE\uB9AF\uB9B1\uB9B2\uB9B3\uB9B5", 6, "\uB9BE\uB9C0\uB9C2", 5, "\uB9CA\uB9CB\uB9CD\uB9D3", 4, "\uB9DA\uB9DC\uB9DF\uB9E0\uB9E2\uB9E6\uB9E7\uB9E9\uB9EA\uB9EB\uB9ED", 6, "\uB9F6\uB9FB", 4, "\uBA02", 5, "\uBA09", 11, "\uBA16", 33, "\uBA3A\uBA3B\uBA3D\uBA3E\uBA3F\uBA41\uBA43\uBA44\uBA45\uBA46"],
        ["9141", "\uBA47\uBA4A\uBA4C\uBA4F\uBA50\uBA51\uBA52\uBA56\uBA57\uBA59\uBA5A\uBA5B\uBA5D", 6, "\uBA66\uBA6A", 5],
        ["9161", "\uBA72\uBA73\uBA75\uBA76\uBA77\uBA79", 9, "\uBA86\uBA88\uBA89\uBA8A\uBA8B\uBA8D", 5],
        ["9181", "\uBA93", 20, "\uBAAA\uBAAD\uBAAE\uBAAF\uBAB1\uBAB3", 4, "\uBABA\uBABC\uBABE", 5, "\uBAC5\uBAC6\uBAC7\uBAC9", 14, "\uBADA", 33, "\uBAFD\uBAFE\uBAFF\uBB01\uBB02\uBB03\uBB05", 7, "\uBB0E\uBB10\uBB12", 5, "\uBB19\uBB1A\uBB1B\uBB1D\uBB1E\uBB1F\uBB21", 6],
        ["9241", "\uBB28\uBB2A\uBB2C", 7, "\uBB37\uBB39\uBB3A\uBB3F", 4, "\uBB46\uBB48\uBB4A\uBB4B\uBB4C\uBB4E\uBB51\uBB52"],
        ["9261", "\uBB53\uBB55\uBB56\uBB57\uBB59", 7, "\uBB62\uBB64", 7, "\uBB6D", 4],
        ["9281", "\uBB72", 21, "\uBB89\uBB8A\uBB8B\uBB8D\uBB8E\uBB8F\uBB91", 18, "\uBBA5\uBBA6\uBBA7\uBBA9\uBBAA\uBBAB\uBBAD", 6, "\uBBB5\uBBB6\uBBB8", 7, "\uBBC1\uBBC2\uBBC3\uBBC5\uBBC6\uBBC7\uBBC9", 6, "\uBBD1\uBBD2\uBBD4", 35, "\uBBFA\uBBFB\uBBFD\uBBFE\uBC01"],
        ["9341", "\uBC03", 4, "\uBC0A\uBC0E\uBC10\uBC12\uBC13\uBC19\uBC1A\uBC20\uBC21\uBC22\uBC23\uBC26\uBC28\uBC2A\uBC2B\uBC2C\uBC2E\uBC2F\uBC32\uBC33\uBC35"],
        ["9361", "\uBC36\uBC37\uBC39", 6, "\uBC42\uBC46\uBC47\uBC48\uBC4A\uBC4B\uBC4E\uBC4F\uBC51", 8],
        ["9381", "\uBC5A\uBC5B\uBC5C\uBC5E", 37, "\uBC86\uBC87\uBC89\uBC8A\uBC8D\uBC8F", 4, "\uBC96\uBC98\uBC9B", 4, "\uBCA2\uBCA3\uBCA5\uBCA6\uBCA9", 6, "\uBCB2\uBCB6", 5, "\uBCBE\uBCBF\uBCC1\uBCC2\uBCC3\uBCC5", 7, "\uBCCE\uBCD2\uBCD3\uBCD4\uBCD6\uBCD7\uBCD9\uBCDA\uBCDB\uBCDD", 22, "\uBCF7\uBCF9\uBCFA\uBCFB\uBCFD"],
        ["9441", "\uBCFE", 5, "\uBD06\uBD08\uBD0A", 5, "\uBD11\uBD12\uBD13\uBD15", 8],
        ["9461", "\uBD1E", 5, "\uBD25", 6, "\uBD2D", 12],
        ["9481", "\uBD3A", 5, "\uBD41", 6, "\uBD4A\uBD4B\uBD4D\uBD4E\uBD4F\uBD51", 6, "\uBD5A", 9, "\uBD65\uBD66\uBD67\uBD69", 22, "\uBD82\uBD83\uBD85\uBD86\uBD8B", 4, "\uBD92\uBD94\uBD96\uBD97\uBD98\uBD9B\uBD9D", 6, "\uBDA5", 10, "\uBDB1", 6, "\uBDB9", 24],
        ["9541", "\uBDD2\uBDD3\uBDD6\uBDD7\uBDD9\uBDDA\uBDDB\uBDDD", 11, "\uBDEA", 5, "\uBDF1"],
        ["9561", "\uBDF2\uBDF3\uBDF5\uBDF6\uBDF7\uBDF9", 6, "\uBE01\uBE02\uBE04\uBE06", 5, "\uBE0E\uBE0F\uBE11\uBE12\uBE13"],
        ["9581", "\uBE15", 6, "\uBE1E\uBE20", 35, "\uBE46\uBE47\uBE49\uBE4A\uBE4B\uBE4D\uBE4F", 4, "\uBE56\uBE58\uBE5C\uBE5D\uBE5E\uBE5F\uBE62\uBE63\uBE65\uBE66\uBE67\uBE69\uBE6B", 4, "\uBE72\uBE76", 4, "\uBE7E\uBE7F\uBE81\uBE82\uBE83\uBE85", 6, "\uBE8E\uBE92", 5, "\uBE9A", 13, "\uBEA9", 14],
        ["9641", "\uBEB8", 23, "\uBED2\uBED3"],
        ["9661", "\uBED5\uBED6\uBED9", 6, "\uBEE1\uBEE2\uBEE6", 5, "\uBEED", 8],
        ["9681", "\uBEF6", 10, "\uBF02", 5, "\uBF0A", 13, "\uBF1A\uBF1E", 33, "\uBF42\uBF43\uBF45\uBF46\uBF47\uBF49", 6, "\uBF52\uBF53\uBF54\uBF56", 44],
        ["9741", "\uBF83", 16, "\uBF95", 8],
        ["9761", "\uBF9E", 17, "\uBFB1", 7],
        ["9781", "\uBFB9", 11, "\uBFC6", 5, "\uBFCE\uBFCF\uBFD1\uBFD2\uBFD3\uBFD5", 6, "\uBFDD\uBFDE\uBFE0\uBFE2", 89, "\uC03D\uC03E\uC03F"],
        ["9841", "\uC040", 16, "\uC052", 5, "\uC059\uC05A\uC05B"],
        ["9861", "\uC05D\uC05E\uC05F\uC061", 6, "\uC06A", 15],
        ["9881", "\uC07A", 21, "\uC092\uC093\uC095\uC096\uC097\uC099", 6, "\uC0A2\uC0A4\uC0A6", 5, "\uC0AE\uC0B1\uC0B2\uC0B7", 4, "\uC0BE\uC0C2\uC0C3\uC0C4\uC0C6\uC0C7\uC0CA\uC0CB\uC0CD\uC0CE\uC0CF\uC0D1", 6, "\uC0DA\uC0DE", 5, "\uC0E6\uC0E7\uC0E9\uC0EA\uC0EB\uC0ED", 6, "\uC0F6\uC0F8\uC0FA", 5, "\uC101\uC102\uC103\uC105\uC106\uC107\uC109", 6, "\uC111\uC112\uC113\uC114\uC116", 5, "\uC121\uC122\uC125\uC128\uC129\uC12A\uC12B\uC12E"],
        ["9941", "\uC132\uC133\uC134\uC135\uC137\uC13A\uC13B\uC13D\uC13E\uC13F\uC141", 6, "\uC14A\uC14E", 5, "\uC156\uC157"],
        ["9961", "\uC159\uC15A\uC15B\uC15D", 6, "\uC166\uC16A", 5, "\uC171\uC172\uC173\uC175\uC176\uC177\uC179\uC17A\uC17B"],
        ["9981", "\uC17C", 8, "\uC186", 5, "\uC18F\uC191\uC192\uC193\uC195\uC197", 4, "\uC19E\uC1A0\uC1A2\uC1A3\uC1A4\uC1A6\uC1A7\uC1AA\uC1AB\uC1AD\uC1AE\uC1AF\uC1B1", 11, "\uC1BE", 5, "\uC1C5\uC1C6\uC1C7\uC1C9\uC1CA\uC1CB\uC1CD", 6, "\uC1D5\uC1D6\uC1D9", 6, "\uC1E1\uC1E2\uC1E3\uC1E5\uC1E6\uC1E7\uC1E9", 6, "\uC1F2\uC1F4", 7, "\uC1FE\uC1FF\uC201\uC202\uC203\uC205", 6, "\uC20E\uC210\uC212", 5, "\uC21A\uC21B\uC21D\uC21E\uC221\uC222\uC223"],
        ["9a41", "\uC224\uC225\uC226\uC227\uC22A\uC22C\uC22E\uC230\uC233\uC235", 16],
        ["9a61", "\uC246\uC247\uC249", 6, "\uC252\uC253\uC255\uC256\uC257\uC259", 6, "\uC261\uC262\uC263\uC264\uC266"],
        ["9a81", "\uC267", 4, "\uC26E\uC26F\uC271\uC272\uC273\uC275", 6, "\uC27E\uC280\uC282", 5, "\uC28A", 5, "\uC291", 6, "\uC299\uC29A\uC29C\uC29E", 5, "\uC2A6\uC2A7\uC2A9\uC2AA\uC2AB\uC2AE", 5, "\uC2B6\uC2B8\uC2BA", 33, "\uC2DE\uC2DF\uC2E1\uC2E2\uC2E5", 5, "\uC2EE\uC2F0\uC2F2\uC2F3\uC2F4\uC2F5\uC2F7\uC2FA\uC2FD\uC2FE\uC2FF\uC301", 6, "\uC30A\uC30B\uC30E\uC30F"],
        ["9b41", "\uC310\uC311\uC312\uC316\uC317\uC319\uC31A\uC31B\uC31D", 6, "\uC326\uC327\uC32A", 8],
        ["9b61", "\uC333", 17, "\uC346", 7],
        ["9b81", "\uC34E", 25, "\uC36A\uC36B\uC36D\uC36E\uC36F\uC371\uC373", 4, "\uC37A\uC37B\uC37E", 5, "\uC385\uC386\uC387\uC389\uC38A\uC38B\uC38D", 50, "\uC3C1", 22, "\uC3DA"],
        ["9c41", "\uC3DB\uC3DD\uC3DE\uC3E1\uC3E3", 4, "\uC3EA\uC3EB\uC3EC\uC3EE", 5, "\uC3F6\uC3F7\uC3F9", 5],
        ["9c61", "\uC3FF", 8, "\uC409", 6, "\uC411", 9],
        ["9c81", "\uC41B", 8, "\uC425", 6, "\uC42D\uC42E\uC42F\uC431\uC432\uC433\uC435", 6, "\uC43E", 9, "\uC449", 26, "\uC466\uC467\uC469\uC46A\uC46B\uC46D", 6, "\uC476\uC477\uC478\uC47A", 5, "\uC481", 18, "\uC495", 6, "\uC49D", 12],
        ["9d41", "\uC4AA", 13, "\uC4B9\uC4BA\uC4BB\uC4BD", 8],
        ["9d61", "\uC4C6", 25],
        ["9d81", "\uC4E0", 8, "\uC4EA", 5, "\uC4F2\uC4F3\uC4F5\uC4F6\uC4F7\uC4F9\uC4FB\uC4FC\uC4FD\uC4FE\uC502", 9, "\uC50D\uC50E\uC50F\uC511\uC512\uC513\uC515", 6, "\uC51D", 10, "\uC52A\uC52B\uC52D\uC52E\uC52F\uC531", 6, "\uC53A\uC53C\uC53E", 5, "\uC546\uC547\uC54B\uC54F\uC550\uC551\uC552\uC556\uC55A\uC55B\uC55C\uC55F\uC562\uC563\uC565\uC566\uC567\uC569", 6, "\uC572\uC576", 5, "\uC57E\uC57F\uC581\uC582\uC583\uC585\uC586\uC588\uC589\uC58A\uC58B\uC58E\uC590\uC592\uC593\uC594"],
        ["9e41", "\uC596\uC599\uC59A\uC59B\uC59D\uC59E\uC59F\uC5A1", 7, "\uC5AA", 9, "\uC5B6"],
        ["9e61", "\uC5B7\uC5BA\uC5BF", 4, "\uC5CB\uC5CD\uC5CF\uC5D2\uC5D3\uC5D5\uC5D6\uC5D7\uC5D9", 6, "\uC5E2\uC5E4\uC5E6\uC5E7"],
        ["9e81", "\uC5E8\uC5E9\uC5EA\uC5EB\uC5EF\uC5F1\uC5F2\uC5F3\uC5F5\uC5F8\uC5F9\uC5FA\uC5FB\uC602\uC603\uC604\uC609\uC60A\uC60B\uC60D\uC60E\uC60F\uC611", 6, "\uC61A\uC61D", 6, "\uC626\uC627\uC629\uC62A\uC62B\uC62F\uC631\uC632\uC636\uC638\uC63A\uC63C\uC63D\uC63E\uC63F\uC642\uC643\uC645\uC646\uC647\uC649", 6, "\uC652\uC656", 5, "\uC65E\uC65F\uC661", 10, "\uC66D\uC66E\uC670\uC672", 5, "\uC67A\uC67B\uC67D\uC67E\uC67F\uC681", 6, "\uC68A\uC68C\uC68E", 5, "\uC696\uC697\uC699\uC69A\uC69B\uC69D", 6, "\uC6A6"],
        ["9f41", "\uC6A8\uC6AA", 5, "\uC6B2\uC6B3\uC6B5\uC6B6\uC6B7\uC6BB", 4, "\uC6C2\uC6C4\uC6C6", 5, "\uC6CE"],
        ["9f61", "\uC6CF\uC6D1\uC6D2\uC6D3\uC6D5", 6, "\uC6DE\uC6DF\uC6E2", 5, "\uC6EA\uC6EB\uC6ED\uC6EE\uC6EF\uC6F1\uC6F2"],
        ["9f81", "\uC6F3", 4, "\uC6FA\uC6FB\uC6FC\uC6FE", 5, "\uC706\uC707\uC709\uC70A\uC70B\uC70D", 6, "\uC716\uC718\uC71A", 5, "\uC722\uC723\uC725\uC726\uC727\uC729", 6, "\uC732\uC734\uC736\uC738\uC739\uC73A\uC73B\uC73E\uC73F\uC741\uC742\uC743\uC745", 4, "\uC74B\uC74E\uC750\uC759\uC75A\uC75B\uC75D\uC75E\uC75F\uC761", 6, "\uC769\uC76A\uC76C", 7, "\uC776\uC777\uC779\uC77A\uC77B\uC77F\uC780\uC781\uC782\uC786\uC78B\uC78C\uC78D\uC78F\uC792\uC793\uC795\uC799\uC79B", 4, "\uC7A2\uC7A7", 4, "\uC7AE\uC7AF\uC7B1\uC7B2\uC7B3\uC7B5\uC7B6\uC7B7"],
        ["a041", "\uC7B8\uC7B9\uC7BA\uC7BB\uC7BE\uC7C2", 5, "\uC7CA\uC7CB\uC7CD\uC7CF\uC7D1", 6, "\uC7D9\uC7DA\uC7DB\uC7DC"],
        ["a061", "\uC7DE", 5, "\uC7E5\uC7E6\uC7E7\uC7E9\uC7EA\uC7EB\uC7ED", 13],
        ["a081", "\uC7FB", 4, "\uC802\uC803\uC805\uC806\uC807\uC809\uC80B", 4, "\uC812\uC814\uC817", 4, "\uC81E\uC81F\uC821\uC822\uC823\uC825", 6, "\uC82E\uC830\uC832", 5, "\uC839\uC83A\uC83B\uC83D\uC83E\uC83F\uC841", 6, "\uC84A\uC84B\uC84E", 5, "\uC855", 26, "\uC872\uC873\uC875\uC876\uC877\uC879\uC87B", 4, "\uC882\uC884\uC888\uC889\uC88A\uC88E", 5, "\uC895", 7, "\uC89E\uC8A0\uC8A2\uC8A3\uC8A4"],
        ["a141", "\uC8A5\uC8A6\uC8A7\uC8A9", 18, "\uC8BE\uC8BF\uC8C0\uC8C1"],
        ["a161", "\uC8C2\uC8C3\uC8C5\uC8C6\uC8C7\uC8C9\uC8CA\uC8CB\uC8CD", 6, "\uC8D6\uC8D8\uC8DA", 5, "\uC8E2\uC8E3\uC8E5"],
        ["a181", "\uC8E6", 14, "\uC8F6", 5, "\uC8FE\uC8FF\uC901\uC902\uC903\uC907", 4, "\uC90E\u3000\u3001\u3002\xB7\u2025\u2026\xA8\u3003\xAD\u2015\u2225\uFF3C\u223C\u2018\u2019\u201C\u201D\u3014\u3015\u3008", 9, "\xB1\xD7\xF7\u2260\u2264\u2265\u221E\u2234\xB0\u2032\u2033\u2103\u212B\uFFE0\uFFE1\uFFE5\u2642\u2640\u2220\u22A5\u2312\u2202\u2207\u2261\u2252\xA7\u203B\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u25BD\u25BC\u2192\u2190\u2191\u2193\u2194\u3013\u226A\u226B\u221A\u223D\u221D\u2235\u222B\u222C\u2208\u220B\u2286\u2287\u2282\u2283\u222A\u2229\u2227\u2228\uFFE2"],
        ["a241", "\uC910\uC912", 5, "\uC919", 18],
        ["a261", "\uC92D", 6, "\uC935", 18],
        ["a281", "\uC948", 7, "\uC952\uC953\uC955\uC956\uC957\uC959", 6, "\uC962\uC964", 7, "\uC96D\uC96E\uC96F\u21D2\u21D4\u2200\u2203\xB4\uFF5E\u02C7\u02D8\u02DD\u02DA\u02D9\xB8\u02DB\xA1\xBF\u02D0\u222E\u2211\u220F\xA4\u2109\u2030\u25C1\u25C0\u25B7\u25B6\u2664\u2660\u2661\u2665\u2667\u2663\u2299\u25C8\u25A3\u25D0\u25D1\u2592\u25A4\u25A5\u25A8\u25A7\u25A6\u25A9\u2668\u260F\u260E\u261C\u261E\xB6\u2020\u2021\u2195\u2197\u2199\u2196\u2198\u266D\u2669\u266A\u266C\u327F\u321C\u2116\u33C7\u2122\u33C2\u33D8\u2121\u20AC\xAE"],
        ["a341", "\uC971\uC972\uC973\uC975", 6, "\uC97D", 10, "\uC98A\uC98B\uC98D\uC98E\uC98F"],
        ["a361", "\uC991", 6, "\uC99A\uC99C\uC99E", 16],
        ["a381", "\uC9AF", 16, "\uC9C2\uC9C3\uC9C5\uC9C6\uC9C9\uC9CB", 4, "\uC9D2\uC9D4\uC9D7\uC9D8\uC9DB\uFF01", 58, "\uFFE6\uFF3D", 32, "\uFFE3"],
        ["a441", "\uC9DE\uC9DF\uC9E1\uC9E3\uC9E5\uC9E6\uC9E8\uC9E9\uC9EA\uC9EB\uC9EE\uC9F2", 5, "\uC9FA\uC9FB\uC9FD\uC9FE\uC9FF\uCA01\uCA02\uCA03\uCA04"],
        ["a461", "\uCA05\uCA06\uCA07\uCA0A\uCA0E", 5, "\uCA15\uCA16\uCA17\uCA19", 12],
        ["a481", "\uCA26\uCA27\uCA28\uCA2A", 28, "\u3131", 93],
        ["a541", "\uCA47", 4, "\uCA4E\uCA4F\uCA51\uCA52\uCA53\uCA55", 6, "\uCA5E\uCA62", 5, "\uCA69\uCA6A"],
        ["a561", "\uCA6B", 17, "\uCA7E", 5, "\uCA85\uCA86"],
        ["a581", "\uCA87", 16, "\uCA99", 14, "\u2170", 9],
        ["a5b0", "\u2160", 9],
        ["a5c1", "\u0391", 16, "\u03A3", 6],
        ["a5e1", "\u03B1", 16, "\u03C3", 6],
        ["a641", "\uCAA8", 19, "\uCABE\uCABF\uCAC1\uCAC2\uCAC3\uCAC5"],
        ["a661", "\uCAC6", 5, "\uCACE\uCAD0\uCAD2\uCAD4\uCAD5\uCAD6\uCAD7\uCADA", 5, "\uCAE1", 6],
        ["a681", "\uCAE8\uCAE9\uCAEA\uCAEB\uCAED", 6, "\uCAF5", 18, "\uCB09\uCB0A\u2500\u2502\u250C\u2510\u2518\u2514\u251C\u252C\u2524\u2534\u253C\u2501\u2503\u250F\u2513\u251B\u2517\u2523\u2533\u252B\u253B\u254B\u2520\u252F\u2528\u2537\u253F\u251D\u2530\u2525\u2538\u2542\u2512\u2511\u251A\u2519\u2516\u2515\u250E\u250D\u251E\u251F\u2521\u2522\u2526\u2527\u2529\u252A\u252D\u252E\u2531\u2532\u2535\u2536\u2539\u253A\u253D\u253E\u2540\u2541\u2543", 7],
        ["a741", "\uCB0B", 4, "\uCB11\uCB12\uCB13\uCB15\uCB16\uCB17\uCB19", 6, "\uCB22", 7],
        ["a761", "\uCB2A", 22, "\uCB42\uCB43\uCB44"],
        ["a781", "\uCB45\uCB46\uCB47\uCB4A\uCB4B\uCB4D\uCB4E\uCB4F\uCB51", 6, "\uCB5A\uCB5B\uCB5C\uCB5E", 5, "\uCB65", 7, "\u3395\u3396\u3397\u2113\u3398\u33C4\u33A3\u33A4\u33A5\u33A6\u3399", 9, "\u33CA\u338D\u338E\u338F\u33CF\u3388\u3389\u33C8\u33A7\u33A8\u33B0", 9, "\u3380", 4, "\u33BA", 5, "\u3390", 4, "\u2126\u33C0\u33C1\u338A\u338B\u338C\u33D6\u33C5\u33AD\u33AE\u33AF\u33DB\u33A9\u33AA\u33AB\u33AC\u33DD\u33D0\u33D3\u33C3\u33C9\u33DC\u33C6"],
        ["a841", "\uCB6D", 10, "\uCB7A", 14],
        ["a861", "\uCB89", 18, "\uCB9D", 6],
        ["a881", "\uCBA4", 19, "\uCBB9", 11, "\xC6\xD0\xAA\u0126"],
        ["a8a6", "\u0132"],
        ["a8a8", "\u013F\u0141\xD8\u0152\xBA\xDE\u0166\u014A"],
        ["a8b1", "\u3260", 27, "\u24D0", 25, "\u2460", 14, "\xBD\u2153\u2154\xBC\xBE\u215B\u215C\u215D\u215E"],
        ["a941", "\uCBC5", 14, "\uCBD5", 10],
        ["a961", "\uCBE0\uCBE1\uCBE2\uCBE3\uCBE5\uCBE6\uCBE8\uCBEA", 18],
        ["a981", "\uCBFD", 14, "\uCC0E\uCC0F\uCC11\uCC12\uCC13\uCC15", 6, "\uCC1E\uCC1F\uCC20\uCC23\uCC24\xE6\u0111\xF0\u0127\u0131\u0133\u0138\u0140\u0142\xF8\u0153\xDF\xFE\u0167\u014B\u0149\u3200", 27, "\u249C", 25, "\u2474", 14, "\xB9\xB2\xB3\u2074\u207F\u2081\u2082\u2083\u2084"],
        ["aa41", "\uCC25\uCC26\uCC2A\uCC2B\uCC2D\uCC2F\uCC31", 6, "\uCC3A\uCC3F", 4, "\uCC46\uCC47\uCC49\uCC4A\uCC4B\uCC4D\uCC4E"],
        ["aa61", "\uCC4F", 4, "\uCC56\uCC5A", 5, "\uCC61\uCC62\uCC63\uCC65\uCC67\uCC69", 6, "\uCC71\uCC72"],
        ["aa81", "\uCC73\uCC74\uCC76", 29, "\u3041", 82],
        ["ab41", "\uCC94\uCC95\uCC96\uCC97\uCC9A\uCC9B\uCC9D\uCC9E\uCC9F\uCCA1", 6, "\uCCAA\uCCAE", 5, "\uCCB6\uCCB7\uCCB9"],
        ["ab61", "\uCCBA\uCCBB\uCCBD", 6, "\uCCC6\uCCC8\uCCCA", 5, "\uCCD1\uCCD2\uCCD3\uCCD5", 5],
        ["ab81", "\uCCDB", 8, "\uCCE5", 6, "\uCCED\uCCEE\uCCEF\uCCF1", 12, "\u30A1", 85],
        ["ac41", "\uCCFE\uCCFF\uCD00\uCD02", 5, "\uCD0A\uCD0B\uCD0D\uCD0E\uCD0F\uCD11", 6, "\uCD1A\uCD1C\uCD1E\uCD1F\uCD20"],
        ["ac61", "\uCD21\uCD22\uCD23\uCD25\uCD26\uCD27\uCD29\uCD2A\uCD2B\uCD2D", 11, "\uCD3A", 4],
        ["ac81", "\uCD3F", 28, "\uCD5D\uCD5E\uCD5F\u0410", 5, "\u0401\u0416", 25],
        ["acd1", "\u0430", 5, "\u0451\u0436", 25],
        ["ad41", "\uCD61\uCD62\uCD63\uCD65", 6, "\uCD6E\uCD70\uCD72", 5, "\uCD79", 7],
        ["ad61", "\uCD81", 6, "\uCD89", 10, "\uCD96\uCD97\uCD99\uCD9A\uCD9B\uCD9D\uCD9E\uCD9F"],
        ["ad81", "\uCDA0\uCDA1\uCDA2\uCDA3\uCDA6\uCDA8\uCDAA", 5, "\uCDB1", 18, "\uCDC5"],
        ["ae41", "\uCDC6", 5, "\uCDCD\uCDCE\uCDCF\uCDD1", 16],
        ["ae61", "\uCDE2", 5, "\uCDE9\uCDEA\uCDEB\uCDED\uCDEE\uCDEF\uCDF1", 6, "\uCDFA\uCDFC\uCDFE", 4],
        ["ae81", "\uCE03\uCE05\uCE06\uCE07\uCE09\uCE0A\uCE0B\uCE0D", 6, "\uCE15\uCE16\uCE17\uCE18\uCE1A", 5, "\uCE22\uCE23\uCE25\uCE26\uCE27\uCE29\uCE2A\uCE2B"],
        ["af41", "\uCE2C\uCE2D\uCE2E\uCE2F\uCE32\uCE34\uCE36", 19],
        ["af61", "\uCE4A", 13, "\uCE5A\uCE5B\uCE5D\uCE5E\uCE62", 5, "\uCE6A\uCE6C"],
        ["af81", "\uCE6E", 5, "\uCE76\uCE77\uCE79\uCE7A\uCE7B\uCE7D", 6, "\uCE86\uCE88\uCE8A", 5, "\uCE92\uCE93\uCE95\uCE96\uCE97\uCE99"],
        ["b041", "\uCE9A", 5, "\uCEA2\uCEA6", 5, "\uCEAE", 12],
        ["b061", "\uCEBB", 5, "\uCEC2", 19],
        ["b081", "\uCED6", 13, "\uCEE6\uCEE7\uCEE9\uCEEA\uCEED", 6, "\uCEF6\uCEFA", 5, "\uAC00\uAC01\uAC04\uAC07\uAC08\uAC09\uAC0A\uAC10", 7, "\uAC19", 4, "\uAC20\uAC24\uAC2C\uAC2D\uAC2F\uAC30\uAC31\uAC38\uAC39\uAC3C\uAC40\uAC4B\uAC4D\uAC54\uAC58\uAC5C\uAC70\uAC71\uAC74\uAC77\uAC78\uAC7A\uAC80\uAC81\uAC83\uAC84\uAC85\uAC86\uAC89\uAC8A\uAC8B\uAC8C\uAC90\uAC94\uAC9C\uAC9D\uAC9F\uACA0\uACA1\uACA8\uACA9\uACAA\uACAC\uACAF\uACB0\uACB8\uACB9\uACBB\uACBC\uACBD\uACC1\uACC4\uACC8\uACCC\uACD5\uACD7\uACE0\uACE1\uACE4\uACE7\uACE8\uACEA\uACEC\uACEF\uACF0\uACF1\uACF3\uACF5\uACF6\uACFC\uACFD\uAD00\uAD04\uAD06"],
        ["b141", "\uCF02\uCF03\uCF05\uCF06\uCF07\uCF09", 6, "\uCF12\uCF14\uCF16", 5, "\uCF1D\uCF1E\uCF1F\uCF21\uCF22\uCF23"],
        ["b161", "\uCF25", 6, "\uCF2E\uCF32", 5, "\uCF39", 11],
        ["b181", "\uCF45", 14, "\uCF56\uCF57\uCF59\uCF5A\uCF5B\uCF5D", 6, "\uCF66\uCF68\uCF6A\uCF6B\uCF6C\uAD0C\uAD0D\uAD0F\uAD11\uAD18\uAD1C\uAD20\uAD29\uAD2C\uAD2D\uAD34\uAD35\uAD38\uAD3C\uAD44\uAD45\uAD47\uAD49\uAD50\uAD54\uAD58\uAD61\uAD63\uAD6C\uAD6D\uAD70\uAD73\uAD74\uAD75\uAD76\uAD7B\uAD7C\uAD7D\uAD7F\uAD81\uAD82\uAD88\uAD89\uAD8C\uAD90\uAD9C\uAD9D\uADA4\uADB7\uADC0\uADC1\uADC4\uADC8\uADD0\uADD1\uADD3\uADDC\uADE0\uADE4\uADF8\uADF9\uADFC\uADFF\uAE00\uAE01\uAE08\uAE09\uAE0B\uAE0D\uAE14\uAE30\uAE31\uAE34\uAE37\uAE38\uAE3A\uAE40\uAE41\uAE43\uAE45\uAE46\uAE4A\uAE4C\uAE4D\uAE4E\uAE50\uAE54\uAE56\uAE5C\uAE5D\uAE5F\uAE60\uAE61\uAE65\uAE68\uAE69\uAE6C\uAE70\uAE78"],
        ["b241", "\uCF6D\uCF6E\uCF6F\uCF72\uCF73\uCF75\uCF76\uCF77\uCF79", 6, "\uCF81\uCF82\uCF83\uCF84\uCF86", 5, "\uCF8D"],
        ["b261", "\uCF8E", 18, "\uCFA2", 5, "\uCFA9"],
        ["b281", "\uCFAA", 5, "\uCFB1", 18, "\uCFC5", 6, "\uAE79\uAE7B\uAE7C\uAE7D\uAE84\uAE85\uAE8C\uAEBC\uAEBD\uAEBE\uAEC0\uAEC4\uAECC\uAECD\uAECF\uAED0\uAED1\uAED8\uAED9\uAEDC\uAEE8\uAEEB\uAEED\uAEF4\uAEF8\uAEFC\uAF07\uAF08\uAF0D\uAF10\uAF2C\uAF2D\uAF30\uAF32\uAF34\uAF3C\uAF3D\uAF3F\uAF41\uAF42\uAF43\uAF48\uAF49\uAF50\uAF5C\uAF5D\uAF64\uAF65\uAF79\uAF80\uAF84\uAF88\uAF90\uAF91\uAF95\uAF9C\uAFB8\uAFB9\uAFBC\uAFC0\uAFC7\uAFC8\uAFC9\uAFCB\uAFCD\uAFCE\uAFD4\uAFDC\uAFE8\uAFE9\uAFF0\uAFF1\uAFF4\uAFF8\uB000\uB001\uB004\uB00C\uB010\uB014\uB01C\uB01D\uB028\uB044\uB045\uB048\uB04A\uB04C\uB04E\uB053\uB054\uB055\uB057\uB059"],
        ["b341", "\uCFCC", 19, "\uCFE2\uCFE3\uCFE5\uCFE6\uCFE7\uCFE9"],
        ["b361", "\uCFEA", 5, "\uCFF2\uCFF4\uCFF6", 5, "\uCFFD\uCFFE\uCFFF\uD001\uD002\uD003\uD005", 5],
        ["b381", "\uD00B", 5, "\uD012", 5, "\uD019", 19, "\uB05D\uB07C\uB07D\uB080\uB084\uB08C\uB08D\uB08F\uB091\uB098\uB099\uB09A\uB09C\uB09F\uB0A0\uB0A1\uB0A2\uB0A8\uB0A9\uB0AB", 4, "\uB0B1\uB0B3\uB0B4\uB0B5\uB0B8\uB0BC\uB0C4\uB0C5\uB0C7\uB0C8\uB0C9\uB0D0\uB0D1\uB0D4\uB0D8\uB0E0\uB0E5\uB108\uB109\uB10B\uB10C\uB110\uB112\uB113\uB118\uB119\uB11B\uB11C\uB11D\uB123\uB124\uB125\uB128\uB12C\uB134\uB135\uB137\uB138\uB139\uB140\uB141\uB144\uB148\uB150\uB151\uB154\uB155\uB158\uB15C\uB160\uB178\uB179\uB17C\uB180\uB182\uB188\uB189\uB18B\uB18D\uB192\uB193\uB194\uB198\uB19C\uB1A8\uB1CC\uB1D0\uB1D4\uB1DC\uB1DD"],
        ["b441", "\uD02E", 5, "\uD036\uD037\uD039\uD03A\uD03B\uD03D", 6, "\uD046\uD048\uD04A", 5],
        ["b461", "\uD051\uD052\uD053\uD055\uD056\uD057\uD059", 6, "\uD061", 10, "\uD06E\uD06F"],
        ["b481", "\uD071\uD072\uD073\uD075", 6, "\uD07E\uD07F\uD080\uD082", 18, "\uB1DF\uB1E8\uB1E9\uB1EC\uB1F0\uB1F9\uB1FB\uB1FD\uB204\uB205\uB208\uB20B\uB20C\uB214\uB215\uB217\uB219\uB220\uB234\uB23C\uB258\uB25C\uB260\uB268\uB269\uB274\uB275\uB27C\uB284\uB285\uB289\uB290\uB291\uB294\uB298\uB299\uB29A\uB2A0\uB2A1\uB2A3\uB2A5\uB2A6\uB2AA\uB2AC\uB2B0\uB2B4\uB2C8\uB2C9\uB2CC\uB2D0\uB2D2\uB2D8\uB2D9\uB2DB\uB2DD\uB2E2\uB2E4\uB2E5\uB2E6\uB2E8\uB2EB", 4, "\uB2F3\uB2F4\uB2F5\uB2F7", 4, "\uB2FF\uB300\uB301\uB304\uB308\uB310\uB311\uB313\uB314\uB315\uB31C\uB354\uB355\uB356\uB358\uB35B\uB35C\uB35E\uB35F\uB364\uB365"],
        ["b541", "\uD095", 14, "\uD0A6\uD0A7\uD0A9\uD0AA\uD0AB\uD0AD", 5],
        ["b561", "\uD0B3\uD0B6\uD0B8\uD0BA", 5, "\uD0C2\uD0C3\uD0C5\uD0C6\uD0C7\uD0CA", 5, "\uD0D2\uD0D6", 4],
        ["b581", "\uD0DB\uD0DE\uD0DF\uD0E1\uD0E2\uD0E3\uD0E5", 6, "\uD0EE\uD0F2", 5, "\uD0F9", 11, "\uB367\uB369\uB36B\uB36E\uB370\uB371\uB374\uB378\uB380\uB381\uB383\uB384\uB385\uB38C\uB390\uB394\uB3A0\uB3A1\uB3A8\uB3AC\uB3C4\uB3C5\uB3C8\uB3CB\uB3CC\uB3CE\uB3D0\uB3D4\uB3D5\uB3D7\uB3D9\uB3DB\uB3DD\uB3E0\uB3E4\uB3E8\uB3FC\uB410\uB418\uB41C\uB420\uB428\uB429\uB42B\uB434\uB450\uB451\uB454\uB458\uB460\uB461\uB463\uB465\uB46C\uB480\uB488\uB49D\uB4A4\uB4A8\uB4AC\uB4B5\uB4B7\uB4B9\uB4C0\uB4C4\uB4C8\uB4D0\uB4D5\uB4DC\uB4DD\uB4E0\uB4E3\uB4E4\uB4E6\uB4EC\uB4ED\uB4EF\uB4F1\uB4F8\uB514\uB515\uB518\uB51B\uB51C\uB524\uB525\uB527\uB528\uB529\uB52A\uB530\uB531\uB534\uB538"],
        ["b641", "\uD105", 7, "\uD10E", 17],
        ["b661", "\uD120", 15, "\uD132\uD133\uD135\uD136\uD137\uD139\uD13B\uD13C\uD13D\uD13E"],
        ["b681", "\uD13F\uD142\uD146", 5, "\uD14E\uD14F\uD151\uD152\uD153\uD155", 6, "\uD15E\uD160\uD162", 5, "\uD169\uD16A\uD16B\uD16D\uB540\uB541\uB543\uB544\uB545\uB54B\uB54C\uB54D\uB550\uB554\uB55C\uB55D\uB55F\uB560\uB561\uB5A0\uB5A1\uB5A4\uB5A8\uB5AA\uB5AB\uB5B0\uB5B1\uB5B3\uB5B4\uB5B5\uB5BB\uB5BC\uB5BD\uB5C0\uB5C4\uB5CC\uB5CD\uB5CF\uB5D0\uB5D1\uB5D8\uB5EC\uB610\uB611\uB614\uB618\uB625\uB62C\uB634\uB648\uB664\uB668\uB69C\uB69D\uB6A0\uB6A4\uB6AB\uB6AC\uB6B1\uB6D4\uB6F0\uB6F4\uB6F8\uB700\uB701\uB705\uB728\uB729\uB72C\uB72F\uB730\uB738\uB739\uB73B\uB744\uB748\uB74C\uB754\uB755\uB760\uB764\uB768\uB770\uB771\uB773\uB775\uB77C\uB77D\uB780\uB784\uB78C\uB78D\uB78F\uB790\uB791\uB792\uB796\uB797"],
        ["b741", "\uD16E", 13, "\uD17D", 6, "\uD185\uD186\uD187\uD189\uD18A"],
        ["b761", "\uD18B", 20, "\uD1A2\uD1A3\uD1A5\uD1A6\uD1A7"],
        ["b781", "\uD1A9", 6, "\uD1B2\uD1B4\uD1B6\uD1B7\uD1B8\uD1B9\uD1BB\uD1BD\uD1BE\uD1BF\uD1C1", 14, "\uB798\uB799\uB79C\uB7A0\uB7A8\uB7A9\uB7AB\uB7AC\uB7AD\uB7B4\uB7B5\uB7B8\uB7C7\uB7C9\uB7EC\uB7ED\uB7F0\uB7F4\uB7FC\uB7FD\uB7FF\uB800\uB801\uB807\uB808\uB809\uB80C\uB810\uB818\uB819\uB81B\uB81D\uB824\uB825\uB828\uB82C\uB834\uB835\uB837\uB838\uB839\uB840\uB844\uB851\uB853\uB85C\uB85D\uB860\uB864\uB86C\uB86D\uB86F\uB871\uB878\uB87C\uB88D\uB8A8\uB8B0\uB8B4\uB8B8\uB8C0\uB8C1\uB8C3\uB8C5\uB8CC\uB8D0\uB8D4\uB8DD\uB8DF\uB8E1\uB8E8\uB8E9\uB8EC\uB8F0\uB8F8\uB8F9\uB8FB\uB8FD\uB904\uB918\uB920\uB93C\uB93D\uB940\uB944\uB94C\uB94F\uB951\uB958\uB959\uB95C\uB960\uB968\uB969"],
        ["b841", "\uD1D0", 7, "\uD1D9", 17],
        ["b861", "\uD1EB", 8, "\uD1F5\uD1F6\uD1F7\uD1F9", 13],
        ["b881", "\uD208\uD20A", 5, "\uD211", 24, "\uB96B\uB96D\uB974\uB975\uB978\uB97C\uB984\uB985\uB987\uB989\uB98A\uB98D\uB98E\uB9AC\uB9AD\uB9B0\uB9B4\uB9BC\uB9BD\uB9BF\uB9C1\uB9C8\uB9C9\uB9CC\uB9CE", 4, "\uB9D8\uB9D9\uB9DB\uB9DD\uB9DE\uB9E1\uB9E3\uB9E4\uB9E5\uB9E8\uB9EC\uB9F4\uB9F5\uB9F7\uB9F8\uB9F9\uB9FA\uBA00\uBA01\uBA08\uBA15\uBA38\uBA39\uBA3C\uBA40\uBA42\uBA48\uBA49\uBA4B\uBA4D\uBA4E\uBA53\uBA54\uBA55\uBA58\uBA5C\uBA64\uBA65\uBA67\uBA68\uBA69\uBA70\uBA71\uBA74\uBA78\uBA83\uBA84\uBA85\uBA87\uBA8C\uBAA8\uBAA9\uBAAB\uBAAC\uBAB0\uBAB2\uBAB8\uBAB9\uBABB\uBABD\uBAC4\uBAC8\uBAD8\uBAD9\uBAFC"],
        ["b941", "\uD22A\uD22B\uD22E\uD22F\uD231\uD232\uD233\uD235", 6, "\uD23E\uD240\uD242", 5, "\uD249\uD24A\uD24B\uD24C"],
        ["b961", "\uD24D", 14, "\uD25D", 6, "\uD265\uD266\uD267\uD268"],
        ["b981", "\uD269", 22, "\uD282\uD283\uD285\uD286\uD287\uD289\uD28A\uD28B\uD28C\uBB00\uBB04\uBB0D\uBB0F\uBB11\uBB18\uBB1C\uBB20\uBB29\uBB2B\uBB34\uBB35\uBB36\uBB38\uBB3B\uBB3C\uBB3D\uBB3E\uBB44\uBB45\uBB47\uBB49\uBB4D\uBB4F\uBB50\uBB54\uBB58\uBB61\uBB63\uBB6C\uBB88\uBB8C\uBB90\uBBA4\uBBA8\uBBAC\uBBB4\uBBB7\uBBC0\uBBC4\uBBC8\uBBD0\uBBD3\uBBF8\uBBF9\uBBFC\uBBFF\uBC00\uBC02\uBC08\uBC09\uBC0B\uBC0C\uBC0D\uBC0F\uBC11\uBC14", 4, "\uBC1B", 4, "\uBC24\uBC25\uBC27\uBC29\uBC2D\uBC30\uBC31\uBC34\uBC38\uBC40\uBC41\uBC43\uBC44\uBC45\uBC49\uBC4C\uBC4D\uBC50\uBC5D\uBC84\uBC85\uBC88\uBC8B\uBC8C\uBC8E\uBC94\uBC95\uBC97"],
        ["ba41", "\uD28D\uD28E\uD28F\uD292\uD293\uD294\uD296", 5, "\uD29D\uD29E\uD29F\uD2A1\uD2A2\uD2A3\uD2A5", 6, "\uD2AD"],
        ["ba61", "\uD2AE\uD2AF\uD2B0\uD2B2", 5, "\uD2BA\uD2BB\uD2BD\uD2BE\uD2C1\uD2C3", 4, "\uD2CA\uD2CC", 5],
        ["ba81", "\uD2D2\uD2D3\uD2D5\uD2D6\uD2D7\uD2D9\uD2DA\uD2DB\uD2DD", 6, "\uD2E6", 9, "\uD2F2\uD2F3\uD2F5\uD2F6\uD2F7\uD2F9\uD2FA\uBC99\uBC9A\uBCA0\uBCA1\uBCA4\uBCA7\uBCA8\uBCB0\uBCB1\uBCB3\uBCB4\uBCB5\uBCBC\uBCBD\uBCC0\uBCC4\uBCCD\uBCCF\uBCD0\uBCD1\uBCD5\uBCD8\uBCDC\uBCF4\uBCF5\uBCF6\uBCF8\uBCFC\uBD04\uBD05\uBD07\uBD09\uBD10\uBD14\uBD24\uBD2C\uBD40\uBD48\uBD49\uBD4C\uBD50\uBD58\uBD59\uBD64\uBD68\uBD80\uBD81\uBD84\uBD87\uBD88\uBD89\uBD8A\uBD90\uBD91\uBD93\uBD95\uBD99\uBD9A\uBD9C\uBDA4\uBDB0\uBDB8\uBDD4\uBDD5\uBDD8\uBDDC\uBDE9\uBDF0\uBDF4\uBDF8\uBE00\uBE03\uBE05\uBE0C\uBE0D\uBE10\uBE14\uBE1C\uBE1D\uBE1F\uBE44\uBE45\uBE48\uBE4C\uBE4E\uBE54\uBE55\uBE57\uBE59\uBE5A\uBE5B\uBE60\uBE61\uBE64"],
        ["bb41", "\uD2FB", 4, "\uD302\uD304\uD306", 5, "\uD30F\uD311\uD312\uD313\uD315\uD317", 4, "\uD31E\uD322\uD323"],
        ["bb61", "\uD324\uD326\uD327\uD32A\uD32B\uD32D\uD32E\uD32F\uD331", 6, "\uD33A\uD33E", 5, "\uD346\uD347\uD348\uD349"],
        ["bb81", "\uD34A", 31, "\uBE68\uBE6A\uBE70\uBE71\uBE73\uBE74\uBE75\uBE7B\uBE7C\uBE7D\uBE80\uBE84\uBE8C\uBE8D\uBE8F\uBE90\uBE91\uBE98\uBE99\uBEA8\uBED0\uBED1\uBED4\uBED7\uBED8\uBEE0\uBEE3\uBEE4\uBEE5\uBEEC\uBF01\uBF08\uBF09\uBF18\uBF19\uBF1B\uBF1C\uBF1D\uBF40\uBF41\uBF44\uBF48\uBF50\uBF51\uBF55\uBF94\uBFB0\uBFC5\uBFCC\uBFCD\uBFD0\uBFD4\uBFDC\uBFDF\uBFE1\uC03C\uC051\uC058\uC05C\uC060\uC068\uC069\uC090\uC091\uC094\uC098\uC0A0\uC0A1\uC0A3\uC0A5\uC0AC\uC0AD\uC0AF\uC0B0\uC0B3\uC0B4\uC0B5\uC0B6\uC0BC\uC0BD\uC0BF\uC0C0\uC0C1\uC0C5\uC0C8\uC0C9\uC0CC\uC0D0\uC0D8\uC0D9\uC0DB\uC0DC\uC0DD\uC0E4"],
        ["bc41", "\uD36A", 17, "\uD37E\uD37F\uD381\uD382\uD383\uD385\uD386\uD387"],
        ["bc61", "\uD388\uD389\uD38A\uD38B\uD38E\uD392", 5, "\uD39A\uD39B\uD39D\uD39E\uD39F\uD3A1", 6, "\uD3AA\uD3AC\uD3AE"],
        ["bc81", "\uD3AF", 4, "\uD3B5\uD3B6\uD3B7\uD3B9\uD3BA\uD3BB\uD3BD", 6, "\uD3C6\uD3C7\uD3CA", 5, "\uD3D1", 5, "\uC0E5\uC0E8\uC0EC\uC0F4\uC0F5\uC0F7\uC0F9\uC100\uC104\uC108\uC110\uC115\uC11C", 4, "\uC123\uC124\uC126\uC127\uC12C\uC12D\uC12F\uC130\uC131\uC136\uC138\uC139\uC13C\uC140\uC148\uC149\uC14B\uC14C\uC14D\uC154\uC155\uC158\uC15C\uC164\uC165\uC167\uC168\uC169\uC170\uC174\uC178\uC185\uC18C\uC18D\uC18E\uC190\uC194\uC196\uC19C\uC19D\uC19F\uC1A1\uC1A5\uC1A8\uC1A9\uC1AC\uC1B0\uC1BD\uC1C4\uC1C8\uC1CC\uC1D4\uC1D7\uC1D8\uC1E0\uC1E4\uC1E8\uC1F0\uC1F1\uC1F3\uC1FC\uC1FD\uC200\uC204\uC20C\uC20D\uC20F\uC211\uC218\uC219\uC21C\uC21F\uC220\uC228\uC229\uC22B\uC22D"],
        ["bd41", "\uD3D7\uD3D9", 7, "\uD3E2\uD3E4", 7, "\uD3EE\uD3EF\uD3F1\uD3F2\uD3F3\uD3F5\uD3F6\uD3F7"],
        ["bd61", "\uD3F8\uD3F9\uD3FA\uD3FB\uD3FE\uD400\uD402", 5, "\uD409", 13],
        ["bd81", "\uD417", 5, "\uD41E", 25, "\uC22F\uC231\uC232\uC234\uC248\uC250\uC251\uC254\uC258\uC260\uC265\uC26C\uC26D\uC270\uC274\uC27C\uC27D\uC27F\uC281\uC288\uC289\uC290\uC298\uC29B\uC29D\uC2A4\uC2A5\uC2A8\uC2AC\uC2AD\uC2B4\uC2B5\uC2B7\uC2B9\uC2DC\uC2DD\uC2E0\uC2E3\uC2E4\uC2EB\uC2EC\uC2ED\uC2EF\uC2F1\uC2F6\uC2F8\uC2F9\uC2FB\uC2FC\uC300\uC308\uC309\uC30C\uC30D\uC313\uC314\uC315\uC318\uC31C\uC324\uC325\uC328\uC329\uC345\uC368\uC369\uC36C\uC370\uC372\uC378\uC379\uC37C\uC37D\uC384\uC388\uC38C\uC3C0\uC3D8\uC3D9\uC3DC\uC3DF\uC3E0\uC3E2\uC3E8\uC3E9\uC3ED\uC3F4\uC3F5\uC3F8\uC408\uC410\uC424\uC42C\uC430"],
        ["be41", "\uD438", 7, "\uD441\uD442\uD443\uD445", 14],
        ["be61", "\uD454", 7, "\uD45D\uD45E\uD45F\uD461\uD462\uD463\uD465", 7, "\uD46E\uD470\uD471\uD472"],
        ["be81", "\uD473", 4, "\uD47A\uD47B\uD47D\uD47E\uD481\uD483", 4, "\uD48A\uD48C\uD48E", 5, "\uD495", 8, "\uC434\uC43C\uC43D\uC448\uC464\uC465\uC468\uC46C\uC474\uC475\uC479\uC480\uC494\uC49C\uC4B8\uC4BC\uC4E9\uC4F0\uC4F1\uC4F4\uC4F8\uC4FA\uC4FF\uC500\uC501\uC50C\uC510\uC514\uC51C\uC528\uC529\uC52C\uC530\uC538\uC539\uC53B\uC53D\uC544\uC545\uC548\uC549\uC54A\uC54C\uC54D\uC54E\uC553\uC554\uC555\uC557\uC558\uC559\uC55D\uC55E\uC560\uC561\uC564\uC568\uC570\uC571\uC573\uC574\uC575\uC57C\uC57D\uC580\uC584\uC587\uC58C\uC58D\uC58F\uC591\uC595\uC597\uC598\uC59C\uC5A0\uC5A9\uC5B4\uC5B5\uC5B8\uC5B9\uC5BB\uC5BC\uC5BD\uC5BE\uC5C4", 6, "\uC5CC\uC5CE"],
        ["bf41", "\uD49E", 10, "\uD4AA", 14],
        ["bf61", "\uD4B9", 18, "\uD4CD\uD4CE\uD4CF\uD4D1\uD4D2\uD4D3\uD4D5"],
        ["bf81", "\uD4D6", 5, "\uD4DD\uD4DE\uD4E0", 7, "\uD4E9\uD4EA\uD4EB\uD4ED\uD4EE\uD4EF\uD4F1", 6, "\uD4F9\uD4FA\uD4FC\uC5D0\uC5D1\uC5D4\uC5D8\uC5E0\uC5E1\uC5E3\uC5E5\uC5EC\uC5ED\uC5EE\uC5F0\uC5F4\uC5F6\uC5F7\uC5FC", 5, "\uC605\uC606\uC607\uC608\uC60C\uC610\uC618\uC619\uC61B\uC61C\uC624\uC625\uC628\uC62C\uC62D\uC62E\uC630\uC633\uC634\uC635\uC637\uC639\uC63B\uC640\uC641\uC644\uC648\uC650\uC651\uC653\uC654\uC655\uC65C\uC65D\uC660\uC66C\uC66F\uC671\uC678\uC679\uC67C\uC680\uC688\uC689\uC68B\uC68D\uC694\uC695\uC698\uC69C\uC6A4\uC6A5\uC6A7\uC6A9\uC6B0\uC6B1\uC6B4\uC6B8\uC6B9\uC6BA\uC6C0\uC6C1\uC6C3\uC6C5\uC6CC\uC6CD\uC6D0\uC6D4\uC6DC\uC6DD\uC6E0\uC6E1\uC6E8"],
        ["c041", "\uD4FE", 5, "\uD505\uD506\uD507\uD509\uD50A\uD50B\uD50D", 6, "\uD516\uD518", 5],
        ["c061", "\uD51E", 25],
        ["c081", "\uD538\uD539\uD53A\uD53B\uD53E\uD53F\uD541\uD542\uD543\uD545", 6, "\uD54E\uD550\uD552", 5, "\uD55A\uD55B\uD55D\uD55E\uD55F\uD561\uD562\uD563\uC6E9\uC6EC\uC6F0\uC6F8\uC6F9\uC6FD\uC704\uC705\uC708\uC70C\uC714\uC715\uC717\uC719\uC720\uC721\uC724\uC728\uC730\uC731\uC733\uC735\uC737\uC73C\uC73D\uC740\uC744\uC74A\uC74C\uC74D\uC74F\uC751", 7, "\uC75C\uC760\uC768\uC76B\uC774\uC775\uC778\uC77C\uC77D\uC77E\uC783\uC784\uC785\uC787\uC788\uC789\uC78A\uC78E\uC790\uC791\uC794\uC796\uC797\uC798\uC79A\uC7A0\uC7A1\uC7A3\uC7A4\uC7A5\uC7A6\uC7AC\uC7AD\uC7B0\uC7B4\uC7BC\uC7BD\uC7BF\uC7C0\uC7C1\uC7C8\uC7C9\uC7CC\uC7CE\uC7D0\uC7D8\uC7DD\uC7E4\uC7E8\uC7EC\uC800\uC801\uC804\uC808\uC80A"],
        ["c141", "\uD564\uD566\uD567\uD56A\uD56C\uD56E", 5, "\uD576\uD577\uD579\uD57A\uD57B\uD57D", 6, "\uD586\uD58A\uD58B"],
        ["c161", "\uD58C\uD58D\uD58E\uD58F\uD591", 19, "\uD5A6\uD5A7"],
        ["c181", "\uD5A8", 31, "\uC810\uC811\uC813\uC815\uC816\uC81C\uC81D\uC820\uC824\uC82C\uC82D\uC82F\uC831\uC838\uC83C\uC840\uC848\uC849\uC84C\uC84D\uC854\uC870\uC871\uC874\uC878\uC87A\uC880\uC881\uC883\uC885\uC886\uC887\uC88B\uC88C\uC88D\uC894\uC89D\uC89F\uC8A1\uC8A8\uC8BC\uC8BD\uC8C4\uC8C8\uC8CC\uC8D4\uC8D5\uC8D7\uC8D9\uC8E0\uC8E1\uC8E4\uC8F5\uC8FC\uC8FD\uC900\uC904\uC905\uC906\uC90C\uC90D\uC90F\uC911\uC918\uC92C\uC934\uC950\uC951\uC954\uC958\uC960\uC961\uC963\uC96C\uC970\uC974\uC97C\uC988\uC989\uC98C\uC990\uC998\uC999\uC99B\uC99D\uC9C0\uC9C1\uC9C4\uC9C7\uC9C8\uC9CA\uC9D0\uC9D1\uC9D3"],
        ["c241", "\uD5CA\uD5CB\uD5CD\uD5CE\uD5CF\uD5D1\uD5D3", 4, "\uD5DA\uD5DC\uD5DE", 5, "\uD5E6\uD5E7\uD5E9\uD5EA\uD5EB\uD5ED\uD5EE"],
        ["c261", "\uD5EF", 4, "\uD5F6\uD5F8\uD5FA", 5, "\uD602\uD603\uD605\uD606\uD607\uD609", 6, "\uD612"],
        ["c281", "\uD616", 5, "\uD61D\uD61E\uD61F\uD621\uD622\uD623\uD625", 7, "\uD62E", 9, "\uD63A\uD63B\uC9D5\uC9D6\uC9D9\uC9DA\uC9DC\uC9DD\uC9E0\uC9E2\uC9E4\uC9E7\uC9EC\uC9ED\uC9EF\uC9F0\uC9F1\uC9F8\uC9F9\uC9FC\uCA00\uCA08\uCA09\uCA0B\uCA0C\uCA0D\uCA14\uCA18\uCA29\uCA4C\uCA4D\uCA50\uCA54\uCA5C\uCA5D\uCA5F\uCA60\uCA61\uCA68\uCA7D\uCA84\uCA98\uCABC\uCABD\uCAC0\uCAC4\uCACC\uCACD\uCACF\uCAD1\uCAD3\uCAD8\uCAD9\uCAE0\uCAEC\uCAF4\uCB08\uCB10\uCB14\uCB18\uCB20\uCB21\uCB41\uCB48\uCB49\uCB4C\uCB50\uCB58\uCB59\uCB5D\uCB64\uCB78\uCB79\uCB9C\uCBB8\uCBD4\uCBE4\uCBE7\uCBE9\uCC0C\uCC0D\uCC10\uCC14\uCC1C\uCC1D\uCC21\uCC22\uCC27\uCC28\uCC29\uCC2C\uCC2E\uCC30\uCC38\uCC39\uCC3B"],
        ["c341", "\uD63D\uD63E\uD63F\uD641\uD642\uD643\uD644\uD646\uD647\uD64A\uD64C\uD64E\uD64F\uD650\uD652\uD653\uD656\uD657\uD659\uD65A\uD65B\uD65D", 4],
        ["c361", "\uD662", 4, "\uD668\uD66A", 5, "\uD672\uD673\uD675", 11],
        ["c381", "\uD681\uD682\uD684\uD686", 5, "\uD68E\uD68F\uD691\uD692\uD693\uD695", 7, "\uD69E\uD6A0\uD6A2", 5, "\uD6A9\uD6AA\uCC3C\uCC3D\uCC3E\uCC44\uCC45\uCC48\uCC4C\uCC54\uCC55\uCC57\uCC58\uCC59\uCC60\uCC64\uCC66\uCC68\uCC70\uCC75\uCC98\uCC99\uCC9C\uCCA0\uCCA8\uCCA9\uCCAB\uCCAC\uCCAD\uCCB4\uCCB5\uCCB8\uCCBC\uCCC4\uCCC5\uCCC7\uCCC9\uCCD0\uCCD4\uCCE4\uCCEC\uCCF0\uCD01\uCD08\uCD09\uCD0C\uCD10\uCD18\uCD19\uCD1B\uCD1D\uCD24\uCD28\uCD2C\uCD39\uCD5C\uCD60\uCD64\uCD6C\uCD6D\uCD6F\uCD71\uCD78\uCD88\uCD94\uCD95\uCD98\uCD9C\uCDA4\uCDA5\uCDA7\uCDA9\uCDB0\uCDC4\uCDCC\uCDD0\uCDE8\uCDEC\uCDF0\uCDF8\uCDF9\uCDFB\uCDFD\uCE04\uCE08\uCE0C\uCE14\uCE19\uCE20\uCE21\uCE24\uCE28\uCE30\uCE31\uCE33\uCE35"],
        ["c441", "\uD6AB\uD6AD\uD6AE\uD6AF\uD6B1", 7, "\uD6BA\uD6BC", 7, "\uD6C6\uD6C7\uD6C9\uD6CA\uD6CB"],
        ["c461", "\uD6CD\uD6CE\uD6CF\uD6D0\uD6D2\uD6D3\uD6D5\uD6D6\uD6D8\uD6DA", 5, "\uD6E1\uD6E2\uD6E3\uD6E5\uD6E6\uD6E7\uD6E9", 4],
        ["c481", "\uD6EE\uD6EF\uD6F1\uD6F2\uD6F3\uD6F4\uD6F6", 5, "\uD6FE\uD6FF\uD701\uD702\uD703\uD705", 11, "\uD712\uD713\uD714\uCE58\uCE59\uCE5C\uCE5F\uCE60\uCE61\uCE68\uCE69\uCE6B\uCE6D\uCE74\uCE75\uCE78\uCE7C\uCE84\uCE85\uCE87\uCE89\uCE90\uCE91\uCE94\uCE98\uCEA0\uCEA1\uCEA3\uCEA4\uCEA5\uCEAC\uCEAD\uCEC1\uCEE4\uCEE5\uCEE8\uCEEB\uCEEC\uCEF4\uCEF5\uCEF7\uCEF8\uCEF9\uCF00\uCF01\uCF04\uCF08\uCF10\uCF11\uCF13\uCF15\uCF1C\uCF20\uCF24\uCF2C\uCF2D\uCF2F\uCF30\uCF31\uCF38\uCF54\uCF55\uCF58\uCF5C\uCF64\uCF65\uCF67\uCF69\uCF70\uCF71\uCF74\uCF78\uCF80\uCF85\uCF8C\uCFA1\uCFA8\uCFB0\uCFC4\uCFE0\uCFE1\uCFE4\uCFE8\uCFF0\uCFF1\uCFF3\uCFF5\uCFFC\uD000\uD004\uD011\uD018\uD02D\uD034\uD035\uD038\uD03C"],
        ["c541", "\uD715\uD716\uD717\uD71A\uD71B\uD71D\uD71E\uD71F\uD721", 6, "\uD72A\uD72C\uD72E", 5, "\uD736\uD737\uD739"],
        ["c561", "\uD73A\uD73B\uD73D", 6, "\uD745\uD746\uD748\uD74A", 5, "\uD752\uD753\uD755\uD75A", 4],
        ["c581", "\uD75F\uD762\uD764\uD766\uD767\uD768\uD76A\uD76B\uD76D\uD76E\uD76F\uD771\uD772\uD773\uD775", 6, "\uD77E\uD77F\uD780\uD782", 5, "\uD78A\uD78B\uD044\uD045\uD047\uD049\uD050\uD054\uD058\uD060\uD06C\uD06D\uD070\uD074\uD07C\uD07D\uD081\uD0A4\uD0A5\uD0A8\uD0AC\uD0B4\uD0B5\uD0B7\uD0B9\uD0C0\uD0C1\uD0C4\uD0C8\uD0C9\uD0D0\uD0D1\uD0D3\uD0D4\uD0D5\uD0DC\uD0DD\uD0E0\uD0E4\uD0EC\uD0ED\uD0EF\uD0F0\uD0F1\uD0F8\uD10D\uD130\uD131\uD134\uD138\uD13A\uD140\uD141\uD143\uD144\uD145\uD14C\uD14D\uD150\uD154\uD15C\uD15D\uD15F\uD161\uD168\uD16C\uD17C\uD184\uD188\uD1A0\uD1A1\uD1A4\uD1A8\uD1B0\uD1B1\uD1B3\uD1B5\uD1BA\uD1BC\uD1C0\uD1D8\uD1F4\uD1F8\uD207\uD209\uD210\uD22C\uD22D\uD230\uD234\uD23C\uD23D\uD23F\uD241\uD248\uD25C"],
        ["c641", "\uD78D\uD78E\uD78F\uD791", 6, "\uD79A\uD79C\uD79E", 5],
        ["c6a1", "\uD264\uD280\uD281\uD284\uD288\uD290\uD291\uD295\uD29C\uD2A0\uD2A4\uD2AC\uD2B1\uD2B8\uD2B9\uD2BC\uD2BF\uD2C0\uD2C2\uD2C8\uD2C9\uD2CB\uD2D4\uD2D8\uD2DC\uD2E4\uD2E5\uD2F0\uD2F1\uD2F4\uD2F8\uD300\uD301\uD303\uD305\uD30C\uD30D\uD30E\uD310\uD314\uD316\uD31C\uD31D\uD31F\uD320\uD321\uD325\uD328\uD329\uD32C\uD330\uD338\uD339\uD33B\uD33C\uD33D\uD344\uD345\uD37C\uD37D\uD380\uD384\uD38C\uD38D\uD38F\uD390\uD391\uD398\uD399\uD39C\uD3A0\uD3A8\uD3A9\uD3AB\uD3AD\uD3B4\uD3B8\uD3BC\uD3C4\uD3C5\uD3C8\uD3C9\uD3D0\uD3D8\uD3E1\uD3E3\uD3EC\uD3ED\uD3F0\uD3F4\uD3FC\uD3FD\uD3FF\uD401"],
        ["c7a1", "\uD408\uD41D\uD440\uD444\uD45C\uD460\uD464\uD46D\uD46F\uD478\uD479\uD47C\uD47F\uD480\uD482\uD488\uD489\uD48B\uD48D\uD494\uD4A9\uD4CC\uD4D0\uD4D4\uD4DC\uD4DF\uD4E8\uD4EC\uD4F0\uD4F8\uD4FB\uD4FD\uD504\uD508\uD50C\uD514\uD515\uD517\uD53C\uD53D\uD540\uD544\uD54C\uD54D\uD54F\uD551\uD558\uD559\uD55C\uD560\uD565\uD568\uD569\uD56B\uD56D\uD574\uD575\uD578\uD57C\uD584\uD585\uD587\uD588\uD589\uD590\uD5A5\uD5C8\uD5C9\uD5CC\uD5D0\uD5D2\uD5D8\uD5D9\uD5DB\uD5DD\uD5E4\uD5E5\uD5E8\uD5EC\uD5F4\uD5F5\uD5F7\uD5F9\uD600\uD601\uD604\uD608\uD610\uD611\uD613\uD614\uD615\uD61C\uD620"],
        ["c8a1", "\uD624\uD62D\uD638\uD639\uD63C\uD640\uD645\uD648\uD649\uD64B\uD64D\uD651\uD654\uD655\uD658\uD65C\uD667\uD669\uD670\uD671\uD674\uD683\uD685\uD68C\uD68D\uD690\uD694\uD69D\uD69F\uD6A1\uD6A8\uD6AC\uD6B0\uD6B9\uD6BB\uD6C4\uD6C5\uD6C8\uD6CC\uD6D1\uD6D4\uD6D7\uD6D9\uD6E0\uD6E4\uD6E8\uD6F0\uD6F5\uD6FC\uD6FD\uD700\uD704\uD711\uD718\uD719\uD71C\uD720\uD728\uD729\uD72B\uD72D\uD734\uD735\uD738\uD73C\uD744\uD747\uD749\uD750\uD751\uD754\uD756\uD757\uD758\uD759\uD760\uD761\uD763\uD765\uD769\uD76C\uD770\uD774\uD77C\uD77D\uD781\uD788\uD789\uD78C\uD790\uD798\uD799\uD79B\uD79D"],
        ["caa1", "\u4F3D\u4F73\u5047\u50F9\u52A0\u53EF\u5475\u54E5\u5609\u5AC1\u5BB6\u6687\u67B6\u67B7\u67EF\u6B4C\u73C2\u75C2\u7A3C\u82DB\u8304\u8857\u8888\u8A36\u8CC8\u8DCF\u8EFB\u8FE6\u99D5\u523B\u5374\u5404\u606A\u6164\u6BBC\u73CF\u811A\u89BA\u89D2\u95A3\u4F83\u520A\u58BE\u5978\u59E6\u5E72\u5E79\u61C7\u63C0\u6746\u67EC\u687F\u6F97\u764E\u770B\u78F5\u7A08\u7AFF\u7C21\u809D\u826E\u8271\u8AEB\u9593\u4E6B\u559D\u66F7\u6E34\u78A3\u7AED\u845B\u8910\u874E\u97A8\u52D8\u574E\u582A\u5D4C\u611F\u61BE\u6221\u6562\u67D1\u6A44\u6E1B\u7518\u75B3\u76E3\u77B0\u7D3A\u90AF\u9451\u9452\u9F95"],
        ["cba1", "\u5323\u5CAC\u7532\u80DB\u9240\u9598\u525B\u5808\u59DC\u5CA1\u5D17\u5EB7\u5F3A\u5F4A\u6177\u6C5F\u757A\u7586\u7CE0\u7D73\u7DB1\u7F8C\u8154\u8221\u8591\u8941\u8B1B\u92FC\u964D\u9C47\u4ECB\u4EF7\u500B\u51F1\u584F\u6137\u613E\u6168\u6539\u69EA\u6F11\u75A5\u7686\u76D6\u7B87\u82A5\u84CB\uF900\u93A7\u958B\u5580\u5BA2\u5751\uF901\u7CB3\u7FB9\u91B5\u5028\u53BB\u5C45\u5DE8\u62D2\u636E\u64DA\u64E7\u6E20\u70AC\u795B\u8DDD\u8E1E\uF902\u907D\u9245\u92F8\u4E7E\u4EF6\u5065\u5DFE\u5EFA\u6106\u6957\u8171\u8654\u8E47\u9375\u9A2B\u4E5E\u5091\u6770\u6840\u5109\u528D\u5292\u6AA2"],
        ["cca1", "\u77BC\u9210\u9ED4\u52AB\u602F\u8FF2\u5048\u61A9\u63ED\u64CA\u683C\u6A84\u6FC0\u8188\u89A1\u9694\u5805\u727D\u72AC\u7504\u7D79\u7E6D\u80A9\u898B\u8B74\u9063\u9D51\u6289\u6C7A\u6F54\u7D50\u7F3A\u8A23\u517C\u614A\u7B9D\u8B19\u9257\u938C\u4EAC\u4FD3\u501E\u50BE\u5106\u52C1\u52CD\u537F\u5770\u5883\u5E9A\u5F91\u6176\u61AC\u64CE\u656C\u666F\u66BB\u66F4\u6897\u6D87\u7085\u70F1\u749F\u74A5\u74CA\u75D9\u786C\u78EC\u7ADF\u7AF6\u7D45\u7D93\u8015\u803F\u811B\u8396\u8B66\u8F15\u9015\u93E1\u9803\u9838\u9A5A\u9BE8\u4FC2\u5553\u583A\u5951\u5B63\u5C46\u60B8\u6212\u6842\u68B0"],
        ["cda1", "\u68E8\u6EAA\u754C\u7678\u78CE\u7A3D\u7CFB\u7E6B\u7E7C\u8A08\u8AA1\u8C3F\u968E\u9DC4\u53E4\u53E9\u544A\u5471\u56FA\u59D1\u5B64\u5C3B\u5EAB\u62F7\u6537\u6545\u6572\u66A0\u67AF\u69C1\u6CBD\u75FC\u7690\u777E\u7A3F\u7F94\u8003\u80A1\u818F\u82E6\u82FD\u83F0\u85C1\u8831\u88B4\u8AA5\uF903\u8F9C\u932E\u96C7\u9867\u9AD8\u9F13\u54ED\u659B\u66F2\u688F\u7A40\u8C37\u9D60\u56F0\u5764\u5D11\u6606\u68B1\u68CD\u6EFE\u7428\u889E\u9BE4\u6C68\uF904\u9AA8\u4F9B\u516C\u5171\u529F\u5B54\u5DE5\u6050\u606D\u62F1\u63A7\u653B\u73D9\u7A7A\u86A3\u8CA2\u978F\u4E32\u5BE1\u6208\u679C\u74DC"],
        ["cea1", "\u79D1\u83D3\u8A87\u8AB2\u8DE8\u904E\u934B\u9846\u5ED3\u69E8\u85FF\u90ED\uF905\u51A0\u5B98\u5BEC\u6163\u68FA\u6B3E\u704C\u742F\u74D8\u7BA1\u7F50\u83C5\u89C0\u8CAB\u95DC\u9928\u522E\u605D\u62EC\u9002\u4F8A\u5149\u5321\u58D9\u5EE3\u66E0\u6D38\u709A\u72C2\u73D6\u7B50\u80F1\u945B\u5366\u639B\u7F6B\u4E56\u5080\u584A\u58DE\u602A\u6127\u62D0\u69D0\u9B41\u5B8F\u7D18\u80B1\u8F5F\u4EA4\u50D1\u54AC\u55AC\u5B0C\u5DA0\u5DE7\u652A\u654E\u6821\u6A4B\u72E1\u768E\u77EF\u7D5E\u7FF9\u81A0\u854E\u86DF\u8F03\u8F4E\u90CA\u9903\u9A55\u9BAB\u4E18\u4E45\u4E5D\u4EC7\u4FF1\u5177\u52FE"],
        ["cfa1", "\u5340\u53E3\u53E5\u548E\u5614\u5775\u57A2\u5BC7\u5D87\u5ED0\u61FC\u62D8\u6551\u67B8\u67E9\u69CB\u6B50\u6BC6\u6BEC\u6C42\u6E9D\u7078\u72D7\u7396\u7403\u77BF\u77E9\u7A76\u7D7F\u8009\u81FC\u8205\u820A\u82DF\u8862\u8B33\u8CFC\u8EC0\u9011\u90B1\u9264\u92B6\u99D2\u9A45\u9CE9\u9DD7\u9F9C\u570B\u5C40\u83CA\u97A0\u97AB\u9EB4\u541B\u7A98\u7FA4\u88D9\u8ECD\u90E1\u5800\u5C48\u6398\u7A9F\u5BAE\u5F13\u7A79\u7AAE\u828E\u8EAC\u5026\u5238\u52F8\u5377\u5708\u62F3\u6372\u6B0A\u6DC3\u7737\u53A5\u7357\u8568\u8E76\u95D5\u673A\u6AC3\u6F70\u8A6D\u8ECC\u994B\uF906\u6677\u6B78\u8CB4"],
        ["d0a1", "\u9B3C\uF907\u53EB\u572D\u594E\u63C6\u69FB\u73EA\u7845\u7ABA\u7AC5\u7CFE\u8475\u898F\u8D73\u9035\u95A8\u52FB\u5747\u7547\u7B60\u83CC\u921E\uF908\u6A58\u514B\u524B\u5287\u621F\u68D8\u6975\u9699\u50C5\u52A4\u52E4\u61C3\u65A4\u6839\u69FF\u747E\u7B4B\u82B9\u83EB\u89B2\u8B39\u8FD1\u9949\uF909\u4ECA\u5997\u64D2\u6611\u6A8E\u7434\u7981\u79BD\u82A9\u887E\u887F\u895F\uF90A\u9326\u4F0B\u53CA\u6025\u6271\u6C72\u7D1A\u7D66\u4E98\u5162\u77DC\u80AF\u4F01\u4F0E\u5176\u5180\u55DC\u5668\u573B\u57FA\u57FC\u5914\u5947\u5993\u5BC4\u5C90\u5D0E\u5DF1\u5E7E\u5FCC\u6280\u65D7\u65E3"],
        ["d1a1", "\u671E\u671F\u675E\u68CB\u68C4\u6A5F\u6B3A\u6C23\u6C7D\u6C82\u6DC7\u7398\u7426\u742A\u7482\u74A3\u7578\u757F\u7881\u78EF\u7941\u7947\u7948\u797A\u7B95\u7D00\u7DBA\u7F88\u8006\u802D\u808C\u8A18\u8B4F\u8C48\u8D77\u9321\u9324\u98E2\u9951\u9A0E\u9A0F\u9A65\u9E92\u7DCA\u4F76\u5409\u62EE\u6854\u91D1\u55AB\u513A\uF90B\uF90C\u5A1C\u61E6\uF90D\u62CF\u62FF\uF90E", 5, "\u90A3\uF914", 4, "\u8AFE\uF919\uF91A\uF91B\uF91C\u6696\uF91D\u7156\uF91E\uF91F\u96E3\uF920\u634F\u637A\u5357\uF921\u678F\u6960\u6E73\uF922\u7537\uF923\uF924\uF925"],
        ["d2a1", "\u7D0D\uF926\uF927\u8872\u56CA\u5A18\uF928", 4, "\u4E43\uF92D\u5167\u5948\u67F0\u8010\uF92E\u5973\u5E74\u649A\u79CA\u5FF5\u606C\u62C8\u637B\u5BE7\u5BD7\u52AA\uF92F\u5974\u5F29\u6012\uF930\uF931\uF932\u7459\uF933", 5, "\u99D1\uF939", 10, "\u6FC3\uF944\uF945\u81BF\u8FB2\u60F1\uF946\uF947\u8166\uF948\uF949\u5C3F\uF94A", 7, "\u5AE9\u8A25\u677B\u7D10\uF952", 5, "\u80FD\uF958\uF959\u5C3C\u6CE5\u533F\u6EBA\u591A\u8336"],
        ["d3a1", "\u4E39\u4EB6\u4F46\u55AE\u5718\u58C7\u5F56\u65B7\u65E6\u6A80\u6BB5\u6E4D\u77ED\u7AEF\u7C1E\u7DDE\u86CB\u8892\u9132\u935B\u64BB\u6FBE\u737A\u75B8\u9054\u5556\u574D\u61BA\u64D4\u66C7\u6DE1\u6E5B\u6F6D\u6FB9\u75F0\u8043\u81BD\u8541\u8983\u8AC7\u8B5A\u931F\u6C93\u7553\u7B54\u8E0F\u905D\u5510\u5802\u5858\u5E62\u6207\u649E\u68E0\u7576\u7CD6\u87B3\u9EE8\u4EE3\u5788\u576E\u5927\u5C0D\u5CB1\u5E36\u5F85\u6234\u64E1\u73B3\u81FA\u888B\u8CB8\u968A\u9EDB\u5B85\u5FB7\u60B3\u5012\u5200\u5230\u5716\u5835\u5857\u5C0E\u5C60\u5CF6\u5D8B\u5EA6\u5F92\u60BC\u6311\u6389\u6417\u6843"],
        ["d4a1", "\u68F9\u6AC2\u6DD8\u6E21\u6ED4\u6FE4\u71FE\u76DC\u7779\u79B1\u7A3B\u8404\u89A9\u8CED\u8DF3\u8E48\u9003\u9014\u9053\u90FD\u934D\u9676\u97DC\u6BD2\u7006\u7258\u72A2\u7368\u7763\u79BF\u7BE4\u7E9B\u8B80\u58A9\u60C7\u6566\u65FD\u66BE\u6C8C\u711E\u71C9\u8C5A\u9813\u4E6D\u7A81\u4EDD\u51AC\u51CD\u52D5\u540C\u61A7\u6771\u6850\u68DF\u6D1E\u6F7C\u75BC\u77B3\u7AE5\u80F4\u8463\u9285\u515C\u6597\u675C\u6793\u75D8\u7AC7\u8373\uF95A\u8C46\u9017\u982D\u5C6F\u81C0\u829A\u9041\u906F\u920D\u5F97\u5D9D\u6A59\u71C8\u767B\u7B49\u85E4\u8B04\u9127\u9A30\u5587\u61F6\uF95B\u7669\u7F85"],
        ["d5a1", "\u863F\u87BA\u88F8\u908F\uF95C\u6D1B\u70D9\u73DE\u7D61\u843D\uF95D\u916A\u99F1\uF95E\u4E82\u5375\u6B04\u6B12\u703E\u721B\u862D\u9E1E\u524C\u8FA3\u5D50\u64E5\u652C\u6B16\u6FEB\u7C43\u7E9C\u85CD\u8964\u89BD\u62C9\u81D8\u881F\u5ECA\u6717\u6D6A\u72FC\u7405\u746F\u8782\u90DE\u4F86\u5D0D\u5FA0\u840A\u51B7\u63A0\u7565\u4EAE\u5006\u5169\u51C9\u6881\u6A11\u7CAE\u7CB1\u7CE7\u826F\u8AD2\u8F1B\u91CF\u4FB6\u5137\u52F5\u5442\u5EEC\u616E\u623E\u65C5\u6ADA\u6FFE\u792A\u85DC\u8823\u95AD\u9A62\u9A6A\u9E97\u9ECE\u529B\u66C6\u6B77\u701D\u792B\u8F62\u9742\u6190\u6200\u6523\u6F23"],
        ["d6a1", "\u7149\u7489\u7DF4\u806F\u84EE\u8F26\u9023\u934A\u51BD\u5217\u52A3\u6D0C\u70C8\u88C2\u5EC9\u6582\u6BAE\u6FC2\u7C3E\u7375\u4EE4\u4F36\u56F9\uF95F\u5CBA\u5DBA\u601C\u73B2\u7B2D\u7F9A\u7FCE\u8046\u901E\u9234\u96F6\u9748\u9818\u9F61\u4F8B\u6FA7\u79AE\u91B4\u96B7\u52DE\uF960\u6488\u64C4\u6AD3\u6F5E\u7018\u7210\u76E7\u8001\u8606\u865C\u8DEF\u8F05\u9732\u9B6F\u9DFA\u9E75\u788C\u797F\u7DA0\u83C9\u9304\u9E7F\u9E93\u8AD6\u58DF\u5F04\u6727\u7027\u74CF\u7C60\u807E\u5121\u7028\u7262\u78CA\u8CC2\u8CDA\u8CF4\u96F7\u4E86\u50DA\u5BEE\u5ED6\u6599\u71CE\u7642\u77AD\u804A\u84FC"],
        ["d7a1", "\u907C\u9B27\u9F8D\u58D8\u5A41\u5C62\u6A13\u6DDA\u6F0F\u763B\u7D2F\u7E37\u851E\u8938\u93E4\u964B\u5289\u65D2\u67F3\u69B4\u6D41\u6E9C\u700F\u7409\u7460\u7559\u7624\u786B\u8B2C\u985E\u516D\u622E\u9678\u4F96\u502B\u5D19\u6DEA\u7DB8\u8F2A\u5F8B\u6144\u6817\uF961\u9686\u52D2\u808B\u51DC\u51CC\u695E\u7A1C\u7DBE\u83F1\u9675\u4FDA\u5229\u5398\u540F\u550E\u5C65\u60A7\u674E\u68A8\u6D6C\u7281\u72F8\u7406\u7483\uF962\u75E2\u7C6C\u7F79\u7FB8\u8389\u88CF\u88E1\u91CC\u91D0\u96E2\u9BC9\u541D\u6F7E\u71D0\u7498\u85FA\u8EAA\u96A3\u9C57\u9E9F\u6797\u6DCB\u7433\u81E8\u9716\u782C"],
        ["d8a1", "\u7ACB\u7B20\u7C92\u6469\u746A\u75F2\u78BC\u78E8\u99AC\u9B54\u9EBB\u5BDE\u5E55\u6F20\u819C\u83AB\u9088\u4E07\u534D\u5A29\u5DD2\u5F4E\u6162\u633D\u6669\u66FC\u6EFF\u6F2B\u7063\u779E\u842C\u8513\u883B\u8F13\u9945\u9C3B\u551C\u62B9\u672B\u6CAB\u8309\u896A\u977A\u4EA1\u5984\u5FD8\u5FD9\u671B\u7DB2\u7F54\u8292\u832B\u83BD\u8F1E\u9099\u57CB\u59B9\u5A92\u5BD0\u6627\u679A\u6885\u6BCF\u7164\u7F75\u8CB7\u8CE3\u9081\u9B45\u8108\u8C8A\u964C\u9A40\u9EA5\u5B5F\u6C13\u731B\u76F2\u76DF\u840C\u51AA\u8993\u514D\u5195\u52C9\u68C9\u6C94\u7704\u7720\u7DBF\u7DEC\u9762\u9EB5\u6EC5"],
        ["d9a1", "\u8511\u51A5\u540D\u547D\u660E\u669D\u6927\u6E9F\u76BF\u7791\u8317\u84C2\u879F\u9169\u9298\u9CF4\u8882\u4FAE\u5192\u52DF\u59C6\u5E3D\u6155\u6478\u6479\u66AE\u67D0\u6A21\u6BCD\u6BDB\u725F\u7261\u7441\u7738\u77DB\u8017\u82BC\u8305\u8B00\u8B28\u8C8C\u6728\u6C90\u7267\u76EE\u7766\u7A46\u9DA9\u6B7F\u6C92\u5922\u6726\u8499\u536F\u5893\u5999\u5EDF\u63CF\u6634\u6773\u6E3A\u732B\u7AD7\u82D7\u9328\u52D9\u5DEB\u61AE\u61CB\u620A\u62C7\u64AB\u65E0\u6959\u6B66\u6BCB\u7121\u73F7\u755D\u7E46\u821E\u8302\u856A\u8AA3\u8CBF\u9727\u9D61\u58A8\u9ED8\u5011\u520E\u543B\u554F\u6587"],
        ["daa1", "\u6C76\u7D0A\u7D0B\u805E\u868A\u9580\u96EF\u52FF\u6C95\u7269\u5473\u5A9A\u5C3E\u5D4B\u5F4C\u5FAE\u672A\u68B6\u6963\u6E3C\u6E44\u7709\u7C73\u7F8E\u8587\u8B0E\u8FF7\u9761\u9EF4\u5CB7\u60B6\u610D\u61AB\u654F\u65FB\u65FC\u6C11\u6CEF\u739F\u73C9\u7DE1\u9594\u5BC6\u871C\u8B10\u525D\u535A\u62CD\u640F\u64B2\u6734\u6A38\u6CCA\u73C0\u749E\u7B94\u7C95\u7E1B\u818A\u8236\u8584\u8FEB\u96F9\u99C1\u4F34\u534A\u53CD\u53DB\u62CC\u642C\u6500\u6591\u69C3\u6CEE\u6F58\u73ED\u7554\u7622\u76E4\u76FC\u78D0\u78FB\u792C\u7D46\u822C\u87E0\u8FD4\u9812\u98EF\u52C3\u62D4\u64A5\u6E24\u6F51"],
        ["dba1", "\u767C\u8DCB\u91B1\u9262\u9AEE\u9B43\u5023\u508D\u574A\u59A8\u5C28\u5E47\u5F77\u623F\u653E\u65B9\u65C1\u6609\u678B\u699C\u6EC2\u78C5\u7D21\u80AA\u8180\u822B\u82B3\u84A1\u868C\u8A2A\u8B17\u90A6\u9632\u9F90\u500D\u4FF3\uF963\u57F9\u5F98\u62DC\u6392\u676F\u6E43\u7119\u76C3\u80CC\u80DA\u88F4\u88F5\u8919\u8CE0\u8F29\u914D\u966A\u4F2F\u4F70\u5E1B\u67CF\u6822\u767D\u767E\u9B44\u5E61\u6A0A\u7169\u71D4\u756A\uF964\u7E41\u8543\u85E9\u98DC\u4F10\u7B4F\u7F70\u95A5\u51E1\u5E06\u68B5\u6C3E\u6C4E\u6CDB\u72AF\u7BC4\u8303\u6CD5\u743A\u50FB\u5288\u58C1\u64D8\u6A97\u74A7\u7656"],
        ["dca1", "\u78A7\u8617\u95E2\u9739\uF965\u535E\u5F01\u8B8A\u8FA8\u8FAF\u908A\u5225\u77A5\u9C49\u9F08\u4E19\u5002\u5175\u5C5B\u5E77\u661E\u663A\u67C4\u68C5\u70B3\u7501\u75C5\u79C9\u7ADD\u8F27\u9920\u9A08\u4FDD\u5821\u5831\u5BF6\u666E\u6B65\u6D11\u6E7A\u6F7D\u73E4\u752B\u83E9\u88DC\u8913\u8B5C\u8F14\u4F0F\u50D5\u5310\u535C\u5B93\u5FA9\u670D\u798F\u8179\u832F\u8514\u8907\u8986\u8F39\u8F3B\u99A5\u9C12\u672C\u4E76\u4FF8\u5949\u5C01\u5CEF\u5CF0\u6367\u68D2\u70FD\u71A2\u742B\u7E2B\u84EC\u8702\u9022\u92D2\u9CF3\u4E0D\u4ED8\u4FEF\u5085\u5256\u526F\u5426\u5490\u57E0\u592B\u5A66"],
        ["dda1", "\u5B5A\u5B75\u5BCC\u5E9C\uF966\u6276\u6577\u65A7\u6D6E\u6EA5\u7236\u7B26\u7C3F\u7F36\u8150\u8151\u819A\u8240\u8299\u83A9\u8A03\u8CA0\u8CE6\u8CFB\u8D74\u8DBA\u90E8\u91DC\u961C\u9644\u99D9\u9CE7\u5317\u5206\u5429\u5674\u58B3\u5954\u596E\u5FFF\u61A4\u626E\u6610\u6C7E\u711A\u76C6\u7C89\u7CDE\u7D1B\u82AC\u8CC1\u96F0\uF967\u4F5B\u5F17\u5F7F\u62C2\u5D29\u670B\u68DA\u787C\u7E43\u9D6C\u4E15\u5099\u5315\u532A\u5351\u5983\u5A62\u5E87\u60B2\u618A\u6249\u6279\u6590\u6787\u69A7\u6BD4\u6BD6\u6BD7\u6BD8\u6CB8\uF968\u7435\u75FA\u7812\u7891\u79D5\u79D8\u7C83\u7DCB\u7FE1\u80A5"],
        ["dea1", "\u813E\u81C2\u83F2\u871A\u88E8\u8AB9\u8B6C\u8CBB\u9119\u975E\u98DB\u9F3B\u56AC\u5B2A\u5F6C\u658C\u6AB3\u6BAF\u6D5C\u6FF1\u7015\u725D\u73AD\u8CA7\u8CD3\u983B\u6191\u6C37\u8058\u9A01\u4E4D\u4E8B\u4E9B\u4ED5\u4F3A\u4F3C\u4F7F\u4FDF\u50FF\u53F2\u53F8\u5506\u55E3\u56DB\u58EB\u5962\u5A11\u5BEB\u5BFA\u5C04\u5DF3\u5E2B\u5F99\u601D\u6368\u659C\u65AF\u67F6\u67FB\u68AD\u6B7B\u6C99\u6CD7\u6E23\u7009\u7345\u7802\u793E\u7940\u7960\u79C1\u7BE9\u7D17\u7D72\u8086\u820D\u838E\u84D1\u86C7\u88DF\u8A50\u8A5E\u8B1D\u8CDC\u8D66\u8FAD\u90AA\u98FC\u99DF\u9E9D\u524A\uF969\u6714\uF96A"],
        ["dfa1", "\u5098\u522A\u5C71\u6563\u6C55\u73CA\u7523\u759D\u7B97\u849C\u9178\u9730\u4E77\u6492\u6BBA\u715E\u85A9\u4E09\uF96B\u6749\u68EE\u6E17\u829F\u8518\u886B\u63F7\u6F81\u9212\u98AF\u4E0A\u50B7\u50CF\u511F\u5546\u55AA\u5617\u5B40\u5C19\u5CE0\u5E38\u5E8A\u5EA0\u5EC2\u60F3\u6851\u6A61\u6E58\u723D\u7240\u72C0\u76F8\u7965\u7BB1\u7FD4\u88F3\u89F4\u8A73\u8C61\u8CDE\u971C\u585E\u74BD\u8CFD\u55C7\uF96C\u7A61\u7D22\u8272\u7272\u751F\u7525\uF96D\u7B19\u5885\u58FB\u5DBC\u5E8F\u5EB6\u5F90\u6055\u6292\u637F\u654D\u6691\u66D9\u66F8\u6816\u68F2\u7280\u745E\u7B6E\u7D6E\u7DD6\u7F72"],
        ["e0a1", "\u80E5\u8212\u85AF\u897F\u8A93\u901D\u92E4\u9ECD\u9F20\u5915\u596D\u5E2D\u60DC\u6614\u6673\u6790\u6C50\u6DC5\u6F5F\u77F3\u78A9\u84C6\u91CB\u932B\u4ED9\u50CA\u5148\u5584\u5B0B\u5BA3\u6247\u657E\u65CB\u6E32\u717D\u7401\u7444\u7487\u74BF\u766C\u79AA\u7DDA\u7E55\u7FA8\u817A\u81B3\u8239\u861A\u87EC\u8A75\u8DE3\u9078\u9291\u9425\u994D\u9BAE\u5368\u5C51\u6954\u6CC4\u6D29\u6E2B\u820C\u859B\u893B\u8A2D\u8AAA\u96EA\u9F67\u5261\u66B9\u6BB2\u7E96\u87FE\u8D0D\u9583\u965D\u651D\u6D89\u71EE\uF96E\u57CE\u59D3\u5BAC\u6027\u60FA\u6210\u661F\u665F\u7329\u73F9\u76DB\u7701\u7B6C"],
        ["e1a1", "\u8056\u8072\u8165\u8AA0\u9192\u4E16\u52E2\u6B72\u6D17\u7A05\u7B39\u7D30\uF96F\u8CB0\u53EC\u562F\u5851\u5BB5\u5C0F\u5C11\u5DE2\u6240\u6383\u6414\u662D\u68B3\u6CBC\u6D88\u6EAF\u701F\u70A4\u71D2\u7526\u758F\u758E\u7619\u7B11\u7BE0\u7C2B\u7D20\u7D39\u852C\u856D\u8607\u8A34\u900D\u9061\u90B5\u92B7\u97F6\u9A37\u4FD7\u5C6C\u675F\u6D91\u7C9F\u7E8C\u8B16\u8D16\u901F\u5B6B\u5DFD\u640D\u84C0\u905C\u98E1\u7387\u5B8B\u609A\u677E\u6DDE\u8A1F\u8AA6\u9001\u980C\u5237\uF970\u7051\u788E\u9396\u8870\u91D7\u4FEE\u53D7\u55FD\u56DA\u5782\u58FD\u5AC2\u5B88\u5CAB\u5CC0\u5E25\u6101"],
        ["e2a1", "\u620D\u624B\u6388\u641C\u6536\u6578\u6A39\u6B8A\u6C34\u6D19\u6F31\u71E7\u72E9\u7378\u7407\u74B2\u7626\u7761\u79C0\u7A57\u7AEA\u7CB9\u7D8F\u7DAC\u7E61\u7F9E\u8129\u8331\u8490\u84DA\u85EA\u8896\u8AB0\u8B90\u8F38\u9042\u9083\u916C\u9296\u92B9\u968B\u96A7\u96A8\u96D6\u9700\u9808\u9996\u9AD3\u9B1A\u53D4\u587E\u5919\u5B70\u5BBF\u6DD1\u6F5A\u719F\u7421\u74B9\u8085\u83FD\u5DE1\u5F87\u5FAA\u6042\u65EC\u6812\u696F\u6A53\u6B89\u6D35\u6DF3\u73E3\u76FE\u77AC\u7B4D\u7D14\u8123\u821C\u8340\u84F4\u8563\u8A62\u8AC4\u9187\u931E\u9806\u99B4\u620C\u8853\u8FF0\u9265\u5D07\u5D27"],
        ["e3a1", "\u5D69\u745F\u819D\u8768\u6FD5\u62FE\u7FD2\u8936\u8972\u4E1E\u4E58\u50E7\u52DD\u5347\u627F\u6607\u7E69\u8805\u965E\u4F8D\u5319\u5636\u59CB\u5AA4\u5C38\u5C4E\u5C4D\u5E02\u5F11\u6043\u65BD\u662F\u6642\u67BE\u67F4\u731C\u77E2\u793A\u7FC5\u8494\u84CD\u8996\u8A66\u8A69\u8AE1\u8C55\u8C7A\u57F4\u5BD4\u5F0F\u606F\u62ED\u690D\u6B96\u6E5C\u7184\u7BD2\u8755\u8B58\u8EFE\u98DF\u98FE\u4F38\u4F81\u4FE1\u547B\u5A20\u5BB8\u613C\u65B0\u6668\u71FC\u7533\u795E\u7D33\u814E\u81E3\u8398\u85AA\u85CE\u8703\u8A0A\u8EAB\u8F9B\uF971\u8FC5\u5931\u5BA4\u5BE6\u6089\u5BE9\u5C0B\u5FC3\u6C81"],
        ["e4a1", "\uF972\u6DF1\u700B\u751A\u82AF\u8AF6\u4EC0\u5341\uF973\u96D9\u6C0F\u4E9E\u4FC4\u5152\u555E\u5A25\u5CE8\u6211\u7259\u82BD\u83AA\u86FE\u8859\u8A1D\u963F\u96C5\u9913\u9D09\u9D5D\u580A\u5CB3\u5DBD\u5E44\u60E1\u6115\u63E1\u6A02\u6E25\u9102\u9354\u984E\u9C10\u9F77\u5B89\u5CB8\u6309\u664F\u6848\u773C\u96C1\u978D\u9854\u9B9F\u65A1\u8B01\u8ECB\u95BC\u5535\u5CA9\u5DD6\u5EB5\u6697\u764C\u83F4\u95C7\u58D3\u62BC\u72CE\u9D28\u4EF0\u592E\u600F\u663B\u6B83\u79E7\u9D26\u5393\u54C0\u57C3\u5D16\u611B\u66D6\u6DAF\u788D\u827E\u9698\u9744\u5384\u627C\u6396\u6DB2\u7E0A\u814B\u984D"],
        ["e5a1", "\u6AFB\u7F4C\u9DAF\u9E1A\u4E5F\u503B\u51B6\u591C\u60F9\u63F6\u6930\u723A\u8036\uF974\u91CE\u5F31\uF975\uF976\u7D04\u82E5\u846F\u84BB\u85E5\u8E8D\uF977\u4F6F\uF978\uF979\u58E4\u5B43\u6059\u63DA\u6518\u656D\u6698\uF97A\u694A\u6A23\u6D0B\u7001\u716C\u75D2\u760D\u79B3\u7A70\uF97B\u7F8A\uF97C\u8944\uF97D\u8B93\u91C0\u967D\uF97E\u990A\u5704\u5FA1\u65BC\u6F01\u7600\u79A6\u8A9E\u99AD\u9B5A\u9F6C\u5104\u61B6\u6291\u6A8D\u81C6\u5043\u5830\u5F66\u7109\u8A00\u8AFA\u5B7C\u8616\u4FFA\u513C\u56B4\u5944\u63A9\u6DF9\u5DAA\u696D\u5186\u4E88\u4F59\uF97F\uF980\uF981\u5982\uF982"],
        ["e6a1", "\uF983\u6B5F\u6C5D\uF984\u74B5\u7916\uF985\u8207\u8245\u8339\u8F3F\u8F5D\uF986\u9918\uF987\uF988\uF989\u4EA6\uF98A\u57DF\u5F79\u6613\uF98B\uF98C\u75AB\u7E79\u8B6F\uF98D\u9006\u9A5B\u56A5\u5827\u59F8\u5A1F\u5BB4\uF98E\u5EF6\uF98F\uF990\u6350\u633B\uF991\u693D\u6C87\u6CBF\u6D8E\u6D93\u6DF5\u6F14\uF992\u70DF\u7136\u7159\uF993\u71C3\u71D5\uF994\u784F\u786F\uF995\u7B75\u7DE3\uF996\u7E2F\uF997\u884D\u8EDF\uF998\uF999\uF99A\u925B\uF99B\u9CF6\uF99C\uF99D\uF99E\u6085\u6D85\uF99F\u71B1\uF9A0\uF9A1\u95B1\u53AD\uF9A2\uF9A3\uF9A4\u67D3\uF9A5\u708E\u7130\u7430\u8276\u82D2"],
        ["e7a1", "\uF9A6\u95BB\u9AE5\u9E7D\u66C4\uF9A7\u71C1\u8449\uF9A8\uF9A9\u584B\uF9AA\uF9AB\u5DB8\u5F71\uF9AC\u6620\u668E\u6979\u69AE\u6C38\u6CF3\u6E36\u6F41\u6FDA\u701B\u702F\u7150\u71DF\u7370\uF9AD\u745B\uF9AE\u74D4\u76C8\u7A4E\u7E93\uF9AF\uF9B0\u82F1\u8A60\u8FCE\uF9B1\u9348\uF9B2\u9719\uF9B3\uF9B4\u4E42\u502A\uF9B5\u5208\u53E1\u66F3\u6C6D\u6FCA\u730A\u777F\u7A62\u82AE\u85DD\u8602\uF9B6\u88D4\u8A63\u8B7D\u8C6B\uF9B7\u92B3\uF9B8\u9713\u9810\u4E94\u4F0D\u4FC9\u50B2\u5348\u543E\u5433\u55DA\u5862\u58BA\u5967\u5A1B\u5BE4\u609F\uF9B9\u61CA\u6556\u65FF\u6664\u68A7\u6C5A\u6FB3"],
        ["e8a1", "\u70CF\u71AC\u7352\u7B7D\u8708\u8AA4\u9C32\u9F07\u5C4B\u6C83\u7344\u7389\u923A\u6EAB\u7465\u761F\u7A69\u7E15\u860A\u5140\u58C5\u64C1\u74EE\u7515\u7670\u7FC1\u9095\u96CD\u9954\u6E26\u74E6\u7AA9\u7AAA\u81E5\u86D9\u8778\u8A1B\u5A49\u5B8C\u5B9B\u68A1\u6900\u6D63\u73A9\u7413\u742C\u7897\u7DE9\u7FEB\u8118\u8155\u839E\u8C4C\u962E\u9811\u66F0\u5F80\u65FA\u6789\u6C6A\u738B\u502D\u5A03\u6B6A\u77EE\u5916\u5D6C\u5DCD\u7325\u754F\uF9BA\uF9BB\u50E5\u51F9\u582F\u592D\u5996\u59DA\u5BE5\uF9BC\uF9BD\u5DA2\u62D7\u6416\u6493\u64FE\uF9BE\u66DC\uF9BF\u6A48\uF9C0\u71FF\u7464\uF9C1"],
        ["e9a1", "\u7A88\u7AAF\u7E47\u7E5E\u8000\u8170\uF9C2\u87EF\u8981\u8B20\u9059\uF9C3\u9080\u9952\u617E\u6B32\u6D74\u7E1F\u8925\u8FB1\u4FD1\u50AD\u5197\u52C7\u57C7\u5889\u5BB9\u5EB8\u6142\u6995\u6D8C\u6E67\u6EB6\u7194\u7462\u7528\u752C\u8073\u8338\u84C9\u8E0A\u9394\u93DE\uF9C4\u4E8E\u4F51\u5076\u512A\u53C8\u53CB\u53F3\u5B87\u5BD3\u5C24\u611A\u6182\u65F4\u725B\u7397\u7440\u76C2\u7950\u7991\u79B9\u7D06\u7FBD\u828B\u85D5\u865E\u8FC2\u9047\u90F5\u91EA\u9685\u96E8\u96E9\u52D6\u5F67\u65ED\u6631\u682F\u715C\u7A36\u90C1\u980A\u4E91\uF9C5\u6A52\u6B9E\u6F90\u7189\u8018\u82B8\u8553"],
        ["eaa1", "\u904B\u9695\u96F2\u97FB\u851A\u9B31\u4E90\u718A\u96C4\u5143\u539F\u54E1\u5713\u5712\u57A3\u5A9B\u5AC4\u5BC3\u6028\u613F\u63F4\u6C85\u6D39\u6E72\u6E90\u7230\u733F\u7457\u82D1\u8881\u8F45\u9060\uF9C6\u9662\u9858\u9D1B\u6708\u8D8A\u925E\u4F4D\u5049\u50DE\u5371\u570D\u59D4\u5A01\u5C09\u6170\u6690\u6E2D\u7232\u744B\u7DEF\u80C3\u840E\u8466\u853F\u875F\u885B\u8918\u8B02\u9055\u97CB\u9B4F\u4E73\u4F91\u5112\u516A\uF9C7\u552F\u55A9\u5B7A\u5BA5\u5E7C\u5E7D\u5EBE\u60A0\u60DF\u6108\u6109\u63C4\u6538\u6709\uF9C8\u67D4\u67DA\uF9C9\u6961\u6962\u6CB9\u6D27\uF9CA\u6E38\uF9CB"],
        ["eba1", "\u6FE1\u7336\u7337\uF9CC\u745C\u7531\uF9CD\u7652\uF9CE\uF9CF\u7DAD\u81FE\u8438\u88D5\u8A98\u8ADB\u8AED\u8E30\u8E42\u904A\u903E\u907A\u9149\u91C9\u936E\uF9D0\uF9D1\u5809\uF9D2\u6BD3\u8089\u80B2\uF9D3\uF9D4\u5141\u596B\u5C39\uF9D5\uF9D6\u6F64\u73A7\u80E4\u8D07\uF9D7\u9217\u958F\uF9D8\uF9D9\uF9DA\uF9DB\u807F\u620E\u701C\u7D68\u878D\uF9DC\u57A0\u6069\u6147\u6BB7\u8ABE\u9280\u96B1\u4E59\u541F\u6DEB\u852D\u9670\u97F3\u98EE\u63D6\u6CE3\u9091\u51DD\u61C9\u81BA\u9DF9\u4F9D\u501A\u5100\u5B9C\u610F\u61FF\u64EC\u6905\u6BC5\u7591\u77E3\u7FA9\u8264\u858F\u87FB\u8863\u8ABC"],
        ["eca1", "\u8B70\u91AB\u4E8C\u4EE5\u4F0A\uF9DD\uF9DE\u5937\u59E8\uF9DF\u5DF2\u5F1B\u5F5B\u6021\uF9E0\uF9E1\uF9E2\uF9E3\u723E\u73E5\uF9E4\u7570\u75CD\uF9E5\u79FB\uF9E6\u800C\u8033\u8084\u82E1\u8351\uF9E7\uF9E8\u8CBD\u8CB3\u9087\uF9E9\uF9EA\u98F4\u990C\uF9EB\uF9EC\u7037\u76CA\u7FCA\u7FCC\u7FFC\u8B1A\u4EBA\u4EC1\u5203\u5370\uF9ED\u54BD\u56E0\u59FB\u5BC5\u5F15\u5FCD\u6E6E\uF9EE\uF9EF\u7D6A\u8335\uF9F0\u8693\u8A8D\uF9F1\u976D\u9777\uF9F2\uF9F3\u4E00\u4F5A\u4F7E\u58F9\u65E5\u6EA2\u9038\u93B0\u99B9\u4EFB\u58EC\u598A\u59D9\u6041\uF9F4\uF9F5\u7A14\uF9F6\u834F\u8CC3\u5165\u5344"],
        ["eda1", "\uF9F7\uF9F8\uF9F9\u4ECD\u5269\u5B55\u82BF\u4ED4\u523A\u54A8\u59C9\u59FF\u5B50\u5B57\u5B5C\u6063\u6148\u6ECB\u7099\u716E\u7386\u74F7\u75B5\u78C1\u7D2B\u8005\u81EA\u8328\u8517\u85C9\u8AEE\u8CC7\u96CC\u4F5C\u52FA\u56BC\u65AB\u6628\u707C\u70B8\u7235\u7DBD\u828D\u914C\u96C0\u9D72\u5B71\u68E7\u6B98\u6F7A\u76DE\u5C91\u66AB\u6F5B\u7BB4\u7C2A\u8836\u96DC\u4E08\u4ED7\u5320\u5834\u58BB\u58EF\u596C\u5C07\u5E33\u5E84\u5F35\u638C\u66B2\u6756\u6A1F\u6AA3\u6B0C\u6F3F\u7246\uF9FA\u7350\u748B\u7AE0\u7CA7\u8178\u81DF\u81E7\u838A\u846C\u8523\u8594\u85CF\u88DD\u8D13\u91AC\u9577"],
        ["eea1", "\u969C\u518D\u54C9\u5728\u5BB0\u624D\u6750\u683D\u6893\u6E3D\u6ED3\u707D\u7E21\u88C1\u8CA1\u8F09\u9F4B\u9F4E\u722D\u7B8F\u8ACD\u931A\u4F47\u4F4E\u5132\u5480\u59D0\u5E95\u62B5\u6775\u696E\u6A17\u6CAE\u6E1A\u72D9\u732A\u75BD\u7BB8\u7D35\u82E7\u83F9\u8457\u85F7\u8A5B\u8CAF\u8E87\u9019\u90B8\u96CE\u9F5F\u52E3\u540A\u5AE1\u5BC2\u6458\u6575\u6EF4\u72C4\uF9FB\u7684\u7A4D\u7B1B\u7C4D\u7E3E\u7FDF\u837B\u8B2B\u8CCA\u8D64\u8DE1\u8E5F\u8FEA\u8FF9\u9069\u93D1\u4F43\u4F7A\u50B3\u5168\u5178\u524D\u526A\u5861\u587C\u5960\u5C08\u5C55\u5EDB\u609B\u6230\u6813\u6BBF\u6C08\u6FB1"],
        ["efa1", "\u714E\u7420\u7530\u7538\u7551\u7672\u7B4C\u7B8B\u7BAD\u7BC6\u7E8F\u8A6E\u8F3E\u8F49\u923F\u9293\u9322\u942B\u96FB\u985A\u986B\u991E\u5207\u622A\u6298\u6D59\u7664\u7ACA\u7BC0\u7D76\u5360\u5CBE\u5E97\u6F38\u70B9\u7C98\u9711\u9B8E\u9EDE\u63A5\u647A\u8776\u4E01\u4E95\u4EAD\u505C\u5075\u5448\u59C3\u5B9A\u5E40\u5EAD\u5EF7\u5F81\u60C5\u633A\u653F\u6574\u65CC\u6676\u6678\u67FE\u6968\u6A89\u6B63\u6C40\u6DC0\u6DE8\u6E1F\u6E5E\u701E\u70A1\u738E\u73FD\u753A\u775B\u7887\u798E\u7A0B\u7A7D\u7CBE\u7D8E\u8247\u8A02\u8AEA\u8C9E\u912D\u914A\u91D8\u9266\u92CC\u9320\u9706\u9756"],
        ["f0a1", "\u975C\u9802\u9F0E\u5236\u5291\u557C\u5824\u5E1D\u5F1F\u608C\u63D0\u68AF\u6FDF\u796D\u7B2C\u81CD\u85BA\u88FD\u8AF8\u8E44\u918D\u9664\u969B\u973D\u984C\u9F4A\u4FCE\u5146\u51CB\u52A9\u5632\u5F14\u5F6B\u63AA\u64CD\u65E9\u6641\u66FA\u66F9\u671D\u689D\u68D7\u69FD\u6F15\u6F6E\u7167\u71E5\u722A\u74AA\u773A\u7956\u795A\u79DF\u7A20\u7A95\u7C97\u7CDF\u7D44\u7E70\u8087\u85FB\u86A4\u8A54\u8ABF\u8D99\u8E81\u9020\u906D\u91E3\u963B\u96D5\u9CE5\u65CF\u7C07\u8DB3\u93C3\u5B58\u5C0A\u5352\u62D9\u731D\u5027\u5B97\u5F9E\u60B0\u616B\u68D5\u6DD9\u742E\u7A2E\u7D42\u7D9C\u7E31\u816B"],
        ["f1a1", "\u8E2A\u8E35\u937E\u9418\u4F50\u5750\u5DE6\u5EA7\u632B\u7F6A\u4E3B\u4F4F\u4F8F\u505A\u59DD\u80C4\u546A\u5468\u55FE\u594F\u5B99\u5DDE\u5EDA\u665D\u6731\u67F1\u682A\u6CE8\u6D32\u6E4A\u6F8D\u70B7\u73E0\u7587\u7C4C\u7D02\u7D2C\u7DA2\u821F\u86DB\u8A3B\u8A85\u8D70\u8E8A\u8F33\u9031\u914E\u9152\u9444\u99D0\u7AF9\u7CA5\u4FCA\u5101\u51C6\u57C8\u5BEF\u5CFB\u6659\u6A3D\u6D5A\u6E96\u6FEC\u710C\u756F\u7AE3\u8822\u9021\u9075\u96CB\u99FF\u8301\u4E2D\u4EF2\u8846\u91CD\u537D\u6ADB\u696B\u6C41\u847A\u589E\u618E\u66FE\u62EF\u70DD\u7511\u75C7\u7E52\u84B8\u8B49\u8D08\u4E4B\u53EA"],
        ["f2a1", "\u54AB\u5730\u5740\u5FD7\u6301\u6307\u646F\u652F\u65E8\u667A\u679D\u67B3\u6B62\u6C60\u6C9A\u6F2C\u77E5\u7825\u7949\u7957\u7D19\u80A2\u8102\u81F3\u829D\u82B7\u8718\u8A8C\uF9FC\u8D04\u8DBE\u9072\u76F4\u7A19\u7A37\u7E54\u8077\u5507\u55D4\u5875\u632F\u6422\u6649\u664B\u686D\u699B\u6B84\u6D25\u6EB1\u73CD\u7468\u74A1\u755B\u75B9\u76E1\u771E\u778B\u79E6\u7E09\u7E1D\u81FB\u852F\u8897\u8A3A\u8CD1\u8EEB\u8FB0\u9032\u93AD\u9663\u9673\u9707\u4F84\u53F1\u59EA\u5AC9\u5E19\u684E\u74C6\u75BE\u79E9\u7A92\u81A3\u86ED\u8CEA\u8DCC\u8FED\u659F\u6715\uF9FD\u57F7\u6F57\u7DDD\u8F2F"],
        ["f3a1", "\u93F6\u96C6\u5FB5\u61F2\u6F84\u4E14\u4F98\u501F\u53C9\u55DF\u5D6F\u5DEE\u6B21\u6B64\u78CB\u7B9A\uF9FE\u8E49\u8ECA\u906E\u6349\u643E\u7740\u7A84\u932F\u947F\u9F6A\u64B0\u6FAF\u71E6\u74A8\u74DA\u7AC4\u7C12\u7E82\u7CB2\u7E98\u8B9A\u8D0A\u947D\u9910\u994C\u5239\u5BDF\u64E6\u672D\u7D2E\u50ED\u53C3\u5879\u6158\u6159\u61FA\u65AC\u7AD9\u8B92\u8B96\u5009\u5021\u5275\u5531\u5A3C\u5EE0\u5F70\u6134\u655E\u660C\u6636\u66A2\u69CD\u6EC4\u6F32\u7316\u7621\u7A93\u8139\u8259\u83D6\u84BC\u50B5\u57F0\u5BC0\u5BE8\u5F69\u63A1\u7826\u7DB5\u83DC\u8521\u91C7\u91F5\u518A\u67F5\u7B56"],
        ["f4a1", "\u8CAC\u51C4\u59BB\u60BD\u8655\u501C\uF9FF\u5254\u5C3A\u617D\u621A\u62D3\u64F2\u65A5\u6ECC\u7620\u810A\u8E60\u965F\u96BB\u4EDF\u5343\u5598\u5929\u5DDD\u64C5\u6CC9\u6DFA\u7394\u7A7F\u821B\u85A6\u8CE4\u8E10\u9077\u91E7\u95E1\u9621\u97C6\u51F8\u54F2\u5586\u5FB9\u64A4\u6F88\u7DB4\u8F1F\u8F4D\u9435\u50C9\u5C16\u6CBE\u6DFB\u751B\u77BB\u7C3D\u7C64\u8A79\u8AC2\u581E\u59BE\u5E16\u6377\u7252\u758A\u776B\u8ADC\u8CBC\u8F12\u5EF3\u6674\u6DF8\u807D\u83C1\u8ACB\u9751\u9BD6\uFA00\u5243\u66FF\u6D95\u6EEF\u7DE0\u8AE6\u902E\u905E\u9AD4\u521D\u527F\u54E8\u6194\u6284\u62DB\u68A2"],
        ["f5a1", "\u6912\u695A\u6A35\u7092\u7126\u785D\u7901\u790E\u79D2\u7A0D\u8096\u8278\u82D5\u8349\u8549\u8C82\u8D85\u9162\u918B\u91AE\u4FC3\u56D1\u71ED\u77D7\u8700\u89F8\u5BF8\u5FD6\u6751\u90A8\u53E2\u585A\u5BF5\u60A4\u6181\u6460\u7E3D\u8070\u8525\u9283\u64AE\u50AC\u5D14\u6700\u589C\u62BD\u63A8\u690E\u6978\u6A1E\u6E6B\u76BA\u79CB\u82BB\u8429\u8ACF\u8DA8\u8FFD\u9112\u914B\u919C\u9310\u9318\u939A\u96DB\u9A36\u9C0D\u4E11\u755C\u795D\u7AFA\u7B51\u7BC9\u7E2E\u84C4\u8E59\u8E74\u8EF8\u9010\u6625\u693F\u7443\u51FA\u672E\u9EDC\u5145\u5FE0\u6C96\u87F2\u885D\u8877\u60B4\u81B5\u8403"],
        ["f6a1", "\u8D05\u53D6\u5439\u5634\u5A36\u5C31\u708A\u7FE0\u805A\u8106\u81ED\u8DA3\u9189\u9A5F\u9DF2\u5074\u4EC4\u53A0\u60FB\u6E2C\u5C64\u4F88\u5024\u55E4\u5CD9\u5E5F\u6065\u6894\u6CBB\u6DC4\u71BE\u75D4\u75F4\u7661\u7A1A\u7A49\u7DC7\u7DFB\u7F6E\u81F4\u86A9\u8F1C\u96C9\u99B3\u9F52\u5247\u52C5\u98ED\u89AA\u4E03\u67D2\u6F06\u4FB5\u5BE2\u6795\u6C88\u6D78\u741B\u7827\u91DD\u937C\u87C4\u79E4\u7A31\u5FEB\u4ED6\u54A4\u553E\u58AE\u59A5\u60F0\u6253\u62D6\u6736\u6955\u8235\u9640\u99B1\u99DD\u502C\u5353\u5544\u577C\uFA01\u6258\uFA02\u64E2\u666B\u67DD\u6FC1\u6FEF\u7422\u7438\u8A17"],
        ["f7a1", "\u9438\u5451\u5606\u5766\u5F48\u619A\u6B4E\u7058\u70AD\u7DBB\u8A95\u596A\u812B\u63A2\u7708\u803D\u8CAA\u5854\u642D\u69BB\u5B95\u5E11\u6E6F\uFA03\u8569\u514C\u53F0\u592A\u6020\u614B\u6B86\u6C70\u6CF0\u7B1E\u80CE\u82D4\u8DC6\u90B0\u98B1\uFA04\u64C7\u6FA4\u6491\u6504\u514E\u5410\u571F\u8A0E\u615F\u6876\uFA05\u75DB\u7B52\u7D71\u901A\u5806\u69CC\u817F\u892A\u9000\u9839\u5078\u5957\u59AC\u6295\u900F\u9B2A\u615D\u7279\u95D6\u5761\u5A46\u5DF4\u628A\u64AD\u64FA\u6777\u6CE2\u6D3E\u722C\u7436\u7834\u7F77\u82AD\u8DDB\u9817\u5224\u5742\u677F\u7248\u74E3\u8CA9\u8FA6\u9211"],
        ["f8a1", "\u962A\u516B\u53ED\u634C\u4F69\u5504\u6096\u6557\u6C9B\u6D7F\u724C\u72FD\u7A17\u8987\u8C9D\u5F6D\u6F8E\u70F9\u81A8\u610E\u4FBF\u504F\u6241\u7247\u7BC7\u7DE8\u7FE9\u904D\u97AD\u9A19\u8CB6\u576A\u5E73\u67B0\u840D\u8A55\u5420\u5B16\u5E63\u5EE2\u5F0A\u6583\u80BA\u853D\u9589\u965B\u4F48\u5305\u530D\u530F\u5486\u54FA\u5703\u5E03\u6016\u629B\u62B1\u6355\uFA06\u6CE1\u6D66\u75B1\u7832\u80DE\u812F\u82DE\u8461\u84B2\u888D\u8912\u900B\u92EA\u98FD\u9B91\u5E45\u66B4\u66DD\u7011\u7206\uFA07\u4FF5\u527D\u5F6A\u6153\u6753\u6A19\u6F02\u74E2\u7968\u8868\u8C79\u98C7\u98C4\u9A43"],
        ["f9a1", "\u54C1\u7A1F\u6953\u8AF7\u8C4A\u98A8\u99AE\u5F7C\u62AB\u75B2\u76AE\u88AB\u907F\u9642\u5339\u5F3C\u5FC5\u6CCC\u73CC\u7562\u758B\u7B46\u82FE\u999D\u4E4F\u903C\u4E0B\u4F55\u53A6\u590F\u5EC8\u6630\u6CB3\u7455\u8377\u8766\u8CC0\u9050\u971E\u9C15\u58D1\u5B78\u8650\u8B14\u9DB4\u5BD2\u6068\u608D\u65F1\u6C57\u6F22\u6FA3\u701A\u7F55\u7FF0\u9591\u9592\u9650\u97D3\u5272\u8F44\u51FD\u542B\u54B8\u5563\u558A\u6ABB\u6DB5\u7DD8\u8266\u929C\u9677\u9E79\u5408\u54C8\u76D2\u86E4\u95A4\u95D4\u965C\u4EA2\u4F09\u59EE\u5AE6\u5DF7\u6052\u6297\u676D\u6841\u6C86\u6E2F\u7F38\u809B\u822A"],
        ["faa1", "\uFA08\uFA09\u9805\u4EA5\u5055\u54B3\u5793\u595A\u5B69\u5BB3\u61C8\u6977\u6D77\u7023\u87F9\u89E3\u8A72\u8AE7\u9082\u99ED\u9AB8\u52BE\u6838\u5016\u5E78\u674F\u8347\u884C\u4EAB\u5411\u56AE\u73E6\u9115\u97FF\u9909\u9957\u9999\u5653\u589F\u865B\u8A31\u61B2\u6AF6\u737B\u8ED2\u6B47\u96AA\u9A57\u5955\u7200\u8D6B\u9769\u4FD4\u5CF4\u5F26\u61F8\u665B\u6CEB\u70AB\u7384\u73B9\u73FE\u7729\u774D\u7D43\u7D62\u7E23\u8237\u8852\uFA0A\u8CE2\u9249\u986F\u5B51\u7A74\u8840\u9801\u5ACC\u4FE0\u5354\u593E\u5CFD\u633E\u6D79\u72F9\u8105\u8107\u83A2\u92CF\u9830\u4EA8\u5144\u5211\u578B"],
        ["fba1", "\u5F62\u6CC2\u6ECE\u7005\u7050\u70AF\u7192\u73E9\u7469\u834A\u87A2\u8861\u9008\u90A2\u93A3\u99A8\u516E\u5F57\u60E0\u6167\u66B3\u8559\u8E4A\u91AF\u978B\u4E4E\u4E92\u547C\u58D5\u58FA\u597D\u5CB5\u5F27\u6236\u6248\u660A\u6667\u6BEB\u6D69\u6DCF\u6E56\u6EF8\u6F94\u6FE0\u6FE9\u705D\u72D0\u7425\u745A\u74E0\u7693\u795C\u7CCA\u7E1E\u80E1\u82A6\u846B\u84BF\u864E\u865F\u8774\u8B77\u8C6A\u93AC\u9800\u9865\u60D1\u6216\u9177\u5A5A\u660F\u6DF7\u6E3E\u743F\u9B42\u5FFD\u60DA\u7B0F\u54C4\u5F18\u6C5E\u6CD3\u6D2A\u70D8\u7D05\u8679\u8A0C\u9D3B\u5316\u548C\u5B05\u6A3A\u706B\u7575"],
        ["fca1", "\u798D\u79BE\u82B1\u83EF\u8A71\u8B41\u8CA8\u9774\uFA0B\u64F4\u652B\u78BA\u78BB\u7A6B\u4E38\u559A\u5950\u5BA6\u5E7B\u60A3\u63DB\u6B61\u6665\u6853\u6E19\u7165\u74B0\u7D08\u9084\u9A69\u9C25\u6D3B\u6ED1\u733E\u8C41\u95CA\u51F0\u5E4C\u5FA8\u604D\u60F6\u6130\u614C\u6643\u6644\u69A5\u6CC1\u6E5F\u6EC9\u6F62\u714C\u749C\u7687\u7BC1\u7C27\u8352\u8757\u9051\u968D\u9EC3\u532F\u56DE\u5EFB\u5F8A\u6062\u6094\u61F7\u6666\u6703\u6A9C\u6DEE\u6FAE\u7070\u736A\u7E6A\u81BE\u8334\u86D4\u8AA8\u8CC4\u5283\u7372\u5B96\u6A6B\u9404\u54EE\u5686\u5B5D\u6548\u6585\u66C9\u689F\u6D8D\u6DC6"],
        ["fda1", "\u723B\u80B4\u9175\u9A4D\u4FAF\u5019\u539A\u540E\u543C\u5589\u55C5\u5E3F\u5F8C\u673D\u7166\u73DD\u9005\u52DB\u52F3\u5864\u58CE\u7104\u718F\u71FB\u85B0\u8A13\u6688\u85A8\u55A7\u6684\u714A\u8431\u5349\u5599\u6BC1\u5F59\u5FBD\u63EE\u6689\u7147\u8AF1\u8F1D\u9EBE\u4F11\u643A\u70CB\u7566\u8667\u6064\u8B4E\u9DF8\u5147\u51F6\u5308\u6D36\u80F8\u9ED1\u6615\u6B23\u7098\u75D5\u5403\u5C79\u7D07\u8A16\u6B20\u6B3D\u6B46\u5438\u6070\u6D3D\u7FD5\u8208\u50D6\u51DE\u559C\u566B\u56CD\u59EC\u5B09\u5E0C\u6199\u6198\u6231\u665E\u66E6\u7199\u71B9\u71BA\u72A7\u79A7\u7A00\u7FB2\u8A70"]
      ];
    }
  });

  // ../modules/cmd/node_modules/iconv-lite/encodings/tables/cp950.json
  var require_cp950 = __commonJS({
    "../modules/cmd/node_modules/iconv-lite/encodings/tables/cp950.json"(exports, module) {
      module.exports = [
        ["0", "\0", 127],
        ["a140", "\u3000\uFF0C\u3001\u3002\uFF0E\u2027\uFF1B\uFF1A\uFF1F\uFF01\uFE30\u2026\u2025\uFE50\uFE51\uFE52\xB7\uFE54\uFE55\uFE56\uFE57\uFF5C\u2013\uFE31\u2014\uFE33\u2574\uFE34\uFE4F\uFF08\uFF09\uFE35\uFE36\uFF5B\uFF5D\uFE37\uFE38\u3014\u3015\uFE39\uFE3A\u3010\u3011\uFE3B\uFE3C\u300A\u300B\uFE3D\uFE3E\u3008\u3009\uFE3F\uFE40\u300C\u300D\uFE41\uFE42\u300E\u300F\uFE43\uFE44\uFE59\uFE5A"],
        ["a1a1", "\uFE5B\uFE5C\uFE5D\uFE5E\u2018\u2019\u201C\u201D\u301D\u301E\u2035\u2032\uFF03\uFF06\uFF0A\u203B\xA7\u3003\u25CB\u25CF\u25B3\u25B2\u25CE\u2606\u2605\u25C7\u25C6\u25A1\u25A0\u25BD\u25BC\u32A3\u2105\xAF\uFFE3\uFF3F\u02CD\uFE49\uFE4A\uFE4D\uFE4E\uFE4B\uFE4C\uFE5F\uFE60\uFE61\uFF0B\uFF0D\xD7\xF7\xB1\u221A\uFF1C\uFF1E\uFF1D\u2266\u2267\u2260\u221E\u2252\u2261\uFE62", 4, "\uFF5E\u2229\u222A\u22A5\u2220\u221F\u22BF\u33D2\u33D1\u222B\u222E\u2235\u2234\u2640\u2642\u2295\u2299\u2191\u2193\u2190\u2192\u2196\u2197\u2199\u2198\u2225\u2223\uFF0F"],
        ["a240", "\uFF3C\u2215\uFE68\uFF04\uFFE5\u3012\uFFE0\uFFE1\uFF05\uFF20\u2103\u2109\uFE69\uFE6A\uFE6B\u33D5\u339C\u339D\u339E\u33CE\u33A1\u338E\u338F\u33C4\xB0\u5159\u515B\u515E\u515D\u5161\u5163\u55E7\u74E9\u7CCE\u2581", 7, "\u258F\u258E\u258D\u258C\u258B\u258A\u2589\u253C\u2534\u252C\u2524\u251C\u2594\u2500\u2502\u2595\u250C\u2510\u2514\u2518\u256D"],
        ["a2a1", "\u256E\u2570\u256F\u2550\u255E\u256A\u2561\u25E2\u25E3\u25E5\u25E4\u2571\u2572\u2573\uFF10", 9, "\u2160", 9, "\u3021", 8, "\u5341\u5344\u5345\uFF21", 25, "\uFF41", 21],
        ["a340", "\uFF57\uFF58\uFF59\uFF5A\u0391", 16, "\u03A3", 6, "\u03B1", 16, "\u03C3", 6, "\u3105", 10],
        ["a3a1", "\u3110", 25, "\u02D9\u02C9\u02CA\u02C7\u02CB"],
        ["a3e1", "\u20AC"],
        ["a440", "\u4E00\u4E59\u4E01\u4E03\u4E43\u4E5D\u4E86\u4E8C\u4EBA\u513F\u5165\u516B\u51E0\u5200\u5201\u529B\u5315\u5341\u535C\u53C8\u4E09\u4E0B\u4E08\u4E0A\u4E2B\u4E38\u51E1\u4E45\u4E48\u4E5F\u4E5E\u4E8E\u4EA1\u5140\u5203\u52FA\u5343\u53C9\u53E3\u571F\u58EB\u5915\u5927\u5973\u5B50\u5B51\u5B53\u5BF8\u5C0F\u5C22\u5C38\u5C71\u5DDD\u5DE5\u5DF1\u5DF2\u5DF3\u5DFE\u5E72\u5EFE\u5F0B\u5F13\u624D"],
        ["a4a1", "\u4E11\u4E10\u4E0D\u4E2D\u4E30\u4E39\u4E4B\u5C39\u4E88\u4E91\u4E95\u4E92\u4E94\u4EA2\u4EC1\u4EC0\u4EC3\u4EC6\u4EC7\u4ECD\u4ECA\u4ECB\u4EC4\u5143\u5141\u5167\u516D\u516E\u516C\u5197\u51F6\u5206\u5207\u5208\u52FB\u52FE\u52FF\u5316\u5339\u5348\u5347\u5345\u535E\u5384\u53CB\u53CA\u53CD\u58EC\u5929\u592B\u592A\u592D\u5B54\u5C11\u5C24\u5C3A\u5C6F\u5DF4\u5E7B\u5EFF\u5F14\u5F15\u5FC3\u6208\u6236\u624B\u624E\u652F\u6587\u6597\u65A4\u65B9\u65E5\u66F0\u6708\u6728\u6B20\u6B62\u6B79\u6BCB\u6BD4\u6BDB\u6C0F\u6C34\u706B\u722A\u7236\u723B\u7247\u7259\u725B\u72AC\u738B\u4E19"],
        ["a540", "\u4E16\u4E15\u4E14\u4E18\u4E3B\u4E4D\u4E4F\u4E4E\u4EE5\u4ED8\u4ED4\u4ED5\u4ED6\u4ED7\u4EE3\u4EE4\u4ED9\u4EDE\u5145\u5144\u5189\u518A\u51AC\u51F9\u51FA\u51F8\u520A\u52A0\u529F\u5305\u5306\u5317\u531D\u4EDF\u534A\u5349\u5361\u5360\u536F\u536E\u53BB\u53EF\u53E4\u53F3\u53EC\u53EE\u53E9\u53E8\u53FC\u53F8\u53F5\u53EB\u53E6\u53EA\u53F2\u53F1\u53F0\u53E5\u53ED\u53FB\u56DB\u56DA\u5916"],
        ["a5a1", "\u592E\u5931\u5974\u5976\u5B55\u5B83\u5C3C\u5DE8\u5DE7\u5DE6\u5E02\u5E03\u5E73\u5E7C\u5F01\u5F18\u5F17\u5FC5\u620A\u6253\u6254\u6252\u6251\u65A5\u65E6\u672E\u672C\u672A\u672B\u672D\u6B63\u6BCD\u6C11\u6C10\u6C38\u6C41\u6C40\u6C3E\u72AF\u7384\u7389\u74DC\u74E6\u7518\u751F\u7528\u7529\u7530\u7531\u7532\u7533\u758B\u767D\u76AE\u76BF\u76EE\u77DB\u77E2\u77F3\u793A\u79BE\u7A74\u7ACB\u4E1E\u4E1F\u4E52\u4E53\u4E69\u4E99\u4EA4\u4EA6\u4EA5\u4EFF\u4F09\u4F19\u4F0A\u4F15\u4F0D\u4F10\u4F11\u4F0F\u4EF2\u4EF6\u4EFB\u4EF0\u4EF3\u4EFD\u4F01\u4F0B\u5149\u5147\u5146\u5148\u5168"],
        ["a640", "\u5171\u518D\u51B0\u5217\u5211\u5212\u520E\u5216\u52A3\u5308\u5321\u5320\u5370\u5371\u5409\u540F\u540C\u540A\u5410\u5401\u540B\u5404\u5411\u540D\u5408\u5403\u540E\u5406\u5412\u56E0\u56DE\u56DD\u5733\u5730\u5728\u572D\u572C\u572F\u5729\u5919\u591A\u5937\u5938\u5984\u5978\u5983\u597D\u5979\u5982\u5981\u5B57\u5B58\u5B87\u5B88\u5B85\u5B89\u5BFA\u5C16\u5C79\u5DDE\u5E06\u5E76\u5E74"],
        ["a6a1", "\u5F0F\u5F1B\u5FD9\u5FD6\u620E\u620C\u620D\u6210\u6263\u625B\u6258\u6536\u65E9\u65E8\u65EC\u65ED\u66F2\u66F3\u6709\u673D\u6734\u6731\u6735\u6B21\u6B64\u6B7B\u6C16\u6C5D\u6C57\u6C59\u6C5F\u6C60\u6C50\u6C55\u6C61\u6C5B\u6C4D\u6C4E\u7070\u725F\u725D\u767E\u7AF9\u7C73\u7CF8\u7F36\u7F8A\u7FBD\u8001\u8003\u800C\u8012\u8033\u807F\u8089\u808B\u808C\u81E3\u81EA\u81F3\u81FC\u820C\u821B\u821F\u826E\u8272\u827E\u866B\u8840\u884C\u8863\u897F\u9621\u4E32\u4EA8\u4F4D\u4F4F\u4F47\u4F57\u4F5E\u4F34\u4F5B\u4F55\u4F30\u4F50\u4F51\u4F3D\u4F3A\u4F38\u4F43\u4F54\u4F3C\u4F46\u4F63"],
        ["a740", "\u4F5C\u4F60\u4F2F\u4F4E\u4F36\u4F59\u4F5D\u4F48\u4F5A\u514C\u514B\u514D\u5175\u51B6\u51B7\u5225\u5224\u5229\u522A\u5228\u52AB\u52A9\u52AA\u52AC\u5323\u5373\u5375\u541D\u542D\u541E\u543E\u5426\u544E\u5427\u5446\u5443\u5433\u5448\u5442\u541B\u5429\u544A\u5439\u543B\u5438\u542E\u5435\u5436\u5420\u543C\u5440\u5431\u542B\u541F\u542C\u56EA\u56F0\u56E4\u56EB\u574A\u5751\u5740\u574D"],
        ["a7a1", "\u5747\u574E\u573E\u5750\u574F\u573B\u58EF\u593E\u599D\u5992\u59A8\u599E\u59A3\u5999\u5996\u598D\u59A4\u5993\u598A\u59A5\u5B5D\u5B5C\u5B5A\u5B5B\u5B8C\u5B8B\u5B8F\u5C2C\u5C40\u5C41\u5C3F\u5C3E\u5C90\u5C91\u5C94\u5C8C\u5DEB\u5E0C\u5E8F\u5E87\u5E8A\u5EF7\u5F04\u5F1F\u5F64\u5F62\u5F77\u5F79\u5FD8\u5FCC\u5FD7\u5FCD\u5FF1\u5FEB\u5FF8\u5FEA\u6212\u6211\u6284\u6297\u6296\u6280\u6276\u6289\u626D\u628A\u627C\u627E\u6279\u6273\u6292\u626F\u6298\u626E\u6295\u6293\u6291\u6286\u6539\u653B\u6538\u65F1\u66F4\u675F\u674E\u674F\u6750\u6751\u675C\u6756\u675E\u6749\u6746\u6760"],
        ["a840", "\u6753\u6757\u6B65\u6BCF\u6C42\u6C5E\u6C99\u6C81\u6C88\u6C89\u6C85\u6C9B\u6C6A\u6C7A\u6C90\u6C70\u6C8C\u6C68\u6C96\u6C92\u6C7D\u6C83\u6C72\u6C7E\u6C74\u6C86\u6C76\u6C8D\u6C94\u6C98\u6C82\u7076\u707C\u707D\u7078\u7262\u7261\u7260\u72C4\u72C2\u7396\u752C\u752B\u7537\u7538\u7682\u76EF\u77E3\u79C1\u79C0\u79BF\u7A76\u7CFB\u7F55\u8096\u8093\u809D\u8098\u809B\u809A\u80B2\u826F\u8292"],
        ["a8a1", "\u828B\u828D\u898B\u89D2\u8A00\u8C37\u8C46\u8C55\u8C9D\u8D64\u8D70\u8DB3\u8EAB\u8ECA\u8F9B\u8FB0\u8FC2\u8FC6\u8FC5\u8FC4\u5DE1\u9091\u90A2\u90AA\u90A6\u90A3\u9149\u91C6\u91CC\u9632\u962E\u9631\u962A\u962C\u4E26\u4E56\u4E73\u4E8B\u4E9B\u4E9E\u4EAB\u4EAC\u4F6F\u4F9D\u4F8D\u4F73\u4F7F\u4F6C\u4F9B\u4F8B\u4F86\u4F83\u4F70\u4F75\u4F88\u4F69\u4F7B\u4F96\u4F7E\u4F8F\u4F91\u4F7A\u5154\u5152\u5155\u5169\u5177\u5176\u5178\u51BD\u51FD\u523B\u5238\u5237\u523A\u5230\u522E\u5236\u5241\u52BE\u52BB\u5352\u5354\u5353\u5351\u5366\u5377\u5378\u5379\u53D6\u53D4\u53D7\u5473\u5475"],
        ["a940", "\u5496\u5478\u5495\u5480\u547B\u5477\u5484\u5492\u5486\u547C\u5490\u5471\u5476\u548C\u549A\u5462\u5468\u548B\u547D\u548E\u56FA\u5783\u5777\u576A\u5769\u5761\u5766\u5764\u577C\u591C\u5949\u5947\u5948\u5944\u5954\u59BE\u59BB\u59D4\u59B9\u59AE\u59D1\u59C6\u59D0\u59CD\u59CB\u59D3\u59CA\u59AF\u59B3\u59D2\u59C5\u5B5F\u5B64\u5B63\u5B97\u5B9A\u5B98\u5B9C\u5B99\u5B9B\u5C1A\u5C48\u5C45"],
        ["a9a1", "\u5C46\u5CB7\u5CA1\u5CB8\u5CA9\u5CAB\u5CB1\u5CB3\u5E18\u5E1A\u5E16\u5E15\u5E1B\u5E11\u5E78\u5E9A\u5E97\u5E9C\u5E95\u5E96\u5EF6\u5F26\u5F27\u5F29\u5F80\u5F81\u5F7F\u5F7C\u5FDD\u5FE0\u5FFD\u5FF5\u5FFF\u600F\u6014\u602F\u6035\u6016\u602A\u6015\u6021\u6027\u6029\u602B\u601B\u6216\u6215\u623F\u623E\u6240\u627F\u62C9\u62CC\u62C4\u62BF\u62C2\u62B9\u62D2\u62DB\u62AB\u62D3\u62D4\u62CB\u62C8\u62A8\u62BD\u62BC\u62D0\u62D9\u62C7\u62CD\u62B5\u62DA\u62B1\u62D8\u62D6\u62D7\u62C6\u62AC\u62CE\u653E\u65A7\u65BC\u65FA\u6614\u6613\u660C\u6606\u6602\u660E\u6600\u660F\u6615\u660A"],
        ["aa40", "\u6607\u670D\u670B\u676D\u678B\u6795\u6771\u679C\u6773\u6777\u6787\u679D\u6797\u676F\u6770\u677F\u6789\u677E\u6790\u6775\u679A\u6793\u677C\u676A\u6772\u6B23\u6B66\u6B67\u6B7F\u6C13\u6C1B\u6CE3\u6CE8\u6CF3\u6CB1\u6CCC\u6CE5\u6CB3\u6CBD\u6CBE\u6CBC\u6CE2\u6CAB\u6CD5\u6CD3\u6CB8\u6CC4\u6CB9\u6CC1\u6CAE\u6CD7\u6CC5\u6CF1\u6CBF\u6CBB\u6CE1\u6CDB\u6CCA\u6CAC\u6CEF\u6CDC\u6CD6\u6CE0"],
        ["aaa1", "\u7095\u708E\u7092\u708A\u7099\u722C\u722D\u7238\u7248\u7267\u7269\u72C0\u72CE\u72D9\u72D7\u72D0\u73A9\u73A8\u739F\u73AB\u73A5\u753D\u759D\u7599\u759A\u7684\u76C2\u76F2\u76F4\u77E5\u77FD\u793E\u7940\u7941\u79C9\u79C8\u7A7A\u7A79\u7AFA\u7CFE\u7F54\u7F8C\u7F8B\u8005\u80BA\u80A5\u80A2\u80B1\u80A1\u80AB\u80A9\u80B4\u80AA\u80AF\u81E5\u81FE\u820D\u82B3\u829D\u8299\u82AD\u82BD\u829F\u82B9\u82B1\u82AC\u82A5\u82AF\u82B8\u82A3\u82B0\u82BE\u82B7\u864E\u8671\u521D\u8868\u8ECB\u8FCE\u8FD4\u8FD1\u90B5\u90B8\u90B1\u90B6\u91C7\u91D1\u9577\u9580\u961C\u9640\u963F\u963B\u9644"],
        ["ab40", "\u9642\u96B9\u96E8\u9752\u975E\u4E9F\u4EAD\u4EAE\u4FE1\u4FB5\u4FAF\u4FBF\u4FE0\u4FD1\u4FCF\u4FDD\u4FC3\u4FB6\u4FD8\u4FDF\u4FCA\u4FD7\u4FAE\u4FD0\u4FC4\u4FC2\u4FDA\u4FCE\u4FDE\u4FB7\u5157\u5192\u5191\u51A0\u524E\u5243\u524A\u524D\u524C\u524B\u5247\u52C7\u52C9\u52C3\u52C1\u530D\u5357\u537B\u539A\u53DB\u54AC\u54C0\u54A8\u54CE\u54C9\u54B8\u54A6\u54B3\u54C7\u54C2\u54BD\u54AA\u54C1"],
        ["aba1", "\u54C4\u54C8\u54AF\u54AB\u54B1\u54BB\u54A9\u54A7\u54BF\u56FF\u5782\u578B\u57A0\u57A3\u57A2\u57CE\u57AE\u5793\u5955\u5951\u594F\u594E\u5950\u59DC\u59D8\u59FF\u59E3\u59E8\u5A03\u59E5\u59EA\u59DA\u59E6\u5A01\u59FB\u5B69\u5BA3\u5BA6\u5BA4\u5BA2\u5BA5\u5C01\u5C4E\u5C4F\u5C4D\u5C4B\u5CD9\u5CD2\u5DF7\u5E1D\u5E25\u5E1F\u5E7D\u5EA0\u5EA6\u5EFA\u5F08\u5F2D\u5F65\u5F88\u5F85\u5F8A\u5F8B\u5F87\u5F8C\u5F89\u6012\u601D\u6020\u6025\u600E\u6028\u604D\u6070\u6068\u6062\u6046\u6043\u606C\u606B\u606A\u6064\u6241\u62DC\u6316\u6309\u62FC\u62ED\u6301\u62EE\u62FD\u6307\u62F1\u62F7"],
        ["ac40", "\u62EF\u62EC\u62FE\u62F4\u6311\u6302\u653F\u6545\u65AB\u65BD\u65E2\u6625\u662D\u6620\u6627\u662F\u661F\u6628\u6631\u6624\u66F7\u67FF\u67D3\u67F1\u67D4\u67D0\u67EC\u67B6\u67AF\u67F5\u67E9\u67EF\u67C4\u67D1\u67B4\u67DA\u67E5\u67B8\u67CF\u67DE\u67F3\u67B0\u67D9\u67E2\u67DD\u67D2\u6B6A\u6B83\u6B86\u6BB5\u6BD2\u6BD7\u6C1F\u6CC9\u6D0B\u6D32\u6D2A\u6D41\u6D25\u6D0C\u6D31\u6D1E\u6D17"],
        ["aca1", "\u6D3B\u6D3D\u6D3E\u6D36\u6D1B\u6CF5\u6D39\u6D27\u6D38\u6D29\u6D2E\u6D35\u6D0E\u6D2B\u70AB\u70BA\u70B3\u70AC\u70AF\u70AD\u70B8\u70AE\u70A4\u7230\u7272\u726F\u7274\u72E9\u72E0\u72E1\u73B7\u73CA\u73BB\u73B2\u73CD\u73C0\u73B3\u751A\u752D\u754F\u754C\u754E\u754B\u75AB\u75A4\u75A5\u75A2\u75A3\u7678\u7686\u7687\u7688\u76C8\u76C6\u76C3\u76C5\u7701\u76F9\u76F8\u7709\u770B\u76FE\u76FC\u7707\u77DC\u7802\u7814\u780C\u780D\u7946\u7949\u7948\u7947\u79B9\u79BA\u79D1\u79D2\u79CB\u7A7F\u7A81\u7AFF\u7AFD\u7C7D\u7D02\u7D05\u7D00\u7D09\u7D07\u7D04\u7D06\u7F38\u7F8E\u7FBF\u8004"],
        ["ad40", "\u8010\u800D\u8011\u8036\u80D6\u80E5\u80DA\u80C3\u80C4\u80CC\u80E1\u80DB\u80CE\u80DE\u80E4\u80DD\u81F4\u8222\u82E7\u8303\u8305\u82E3\u82DB\u82E6\u8304\u82E5\u8302\u8309\u82D2\u82D7\u82F1\u8301\u82DC\u82D4\u82D1\u82DE\u82D3\u82DF\u82EF\u8306\u8650\u8679\u867B\u867A\u884D\u886B\u8981\u89D4\u8A08\u8A02\u8A03\u8C9E\u8CA0\u8D74\u8D73\u8DB4\u8ECD\u8ECC\u8FF0\u8FE6\u8FE2\u8FEA\u8FE5"],
        ["ada1", "\u8FED\u8FEB\u8FE4\u8FE8\u90CA\u90CE\u90C1\u90C3\u914B\u914A\u91CD\u9582\u9650\u964B\u964C\u964D\u9762\u9769\u97CB\u97ED\u97F3\u9801\u98A8\u98DB\u98DF\u9996\u9999\u4E58\u4EB3\u500C\u500D\u5023\u4FEF\u5026\u5025\u4FF8\u5029\u5016\u5006\u503C\u501F\u501A\u5012\u5011\u4FFA\u5000\u5014\u5028\u4FF1\u5021\u500B\u5019\u5018\u4FF3\u4FEE\u502D\u502A\u4FFE\u502B\u5009\u517C\u51A4\u51A5\u51A2\u51CD\u51CC\u51C6\u51CB\u5256\u525C\u5254\u525B\u525D\u532A\u537F\u539F\u539D\u53DF\u54E8\u5510\u5501\u5537\u54FC\u54E5\u54F2\u5506\u54FA\u5514\u54E9\u54ED\u54E1\u5509\u54EE\u54EA"],
        ["ae40", "\u54E6\u5527\u5507\u54FD\u550F\u5703\u5704\u57C2\u57D4\u57CB\u57C3\u5809\u590F\u5957\u5958\u595A\u5A11\u5A18\u5A1C\u5A1F\u5A1B\u5A13\u59EC\u5A20\u5A23\u5A29\u5A25\u5A0C\u5A09\u5B6B\u5C58\u5BB0\u5BB3\u5BB6\u5BB4\u5BAE\u5BB5\u5BB9\u5BB8\u5C04\u5C51\u5C55\u5C50\u5CED\u5CFD\u5CFB\u5CEA\u5CE8\u5CF0\u5CF6\u5D01\u5CF4\u5DEE\u5E2D\u5E2B\u5EAB\u5EAD\u5EA7\u5F31\u5F92\u5F91\u5F90\u6059"],
        ["aea1", "\u6063\u6065\u6050\u6055\u606D\u6069\u606F\u6084\u609F\u609A\u608D\u6094\u608C\u6085\u6096\u6247\u62F3\u6308\u62FF\u634E\u633E\u632F\u6355\u6342\u6346\u634F\u6349\u633A\u6350\u633D\u632A\u632B\u6328\u634D\u634C\u6548\u6549\u6599\u65C1\u65C5\u6642\u6649\u664F\u6643\u6652\u664C\u6645\u6641\u66F8\u6714\u6715\u6717\u6821\u6838\u6848\u6846\u6853\u6839\u6842\u6854\u6829\u68B3\u6817\u684C\u6851\u683D\u67F4\u6850\u6840\u683C\u6843\u682A\u6845\u6813\u6818\u6841\u6B8A\u6B89\u6BB7\u6C23\u6C27\u6C28\u6C26\u6C24\u6CF0\u6D6A\u6D95\u6D88\u6D87\u6D66\u6D78\u6D77\u6D59\u6D93"],
        ["af40", "\u6D6C\u6D89\u6D6E\u6D5A\u6D74\u6D69\u6D8C\u6D8A\u6D79\u6D85\u6D65\u6D94\u70CA\u70D8\u70E4\u70D9\u70C8\u70CF\u7239\u7279\u72FC\u72F9\u72FD\u72F8\u72F7\u7386\u73ED\u7409\u73EE\u73E0\u73EA\u73DE\u7554\u755D\u755C\u755A\u7559\u75BE\u75C5\u75C7\u75B2\u75B3\u75BD\u75BC\u75B9\u75C2\u75B8\u768B\u76B0\u76CA\u76CD\u76CE\u7729\u771F\u7720\u7728\u77E9\u7830\u7827\u7838\u781D\u7834\u7837"],
        ["afa1", "\u7825\u782D\u7820\u781F\u7832\u7955\u7950\u7960\u795F\u7956\u795E\u795D\u7957\u795A\u79E4\u79E3\u79E7\u79DF\u79E6\u79E9\u79D8\u7A84\u7A88\u7AD9\u7B06\u7B11\u7C89\u7D21\u7D17\u7D0B\u7D0A\u7D20\u7D22\u7D14\u7D10\u7D15\u7D1A\u7D1C\u7D0D\u7D19\u7D1B\u7F3A\u7F5F\u7F94\u7FC5\u7FC1\u8006\u8018\u8015\u8019\u8017\u803D\u803F\u80F1\u8102\u80F0\u8105\u80ED\u80F4\u8106\u80F8\u80F3\u8108\u80FD\u810A\u80FC\u80EF\u81ED\u81EC\u8200\u8210\u822A\u822B\u8228\u822C\u82BB\u832B\u8352\u8354\u834A\u8338\u8350\u8349\u8335\u8334\u834F\u8332\u8339\u8336\u8317\u8340\u8331\u8328\u8343"],
        ["b040", "\u8654\u868A\u86AA\u8693\u86A4\u86A9\u868C\u86A3\u869C\u8870\u8877\u8881\u8882\u887D\u8879\u8A18\u8A10\u8A0E\u8A0C\u8A15\u8A0A\u8A17\u8A13\u8A16\u8A0F\u8A11\u8C48\u8C7A\u8C79\u8CA1\u8CA2\u8D77\u8EAC\u8ED2\u8ED4\u8ECF\u8FB1\u9001\u9006\u8FF7\u9000\u8FFA\u8FF4\u9003\u8FFD\u9005\u8FF8\u9095\u90E1\u90DD\u90E2\u9152\u914D\u914C\u91D8\u91DD\u91D7\u91DC\u91D9\u9583\u9662\u9663\u9661"],
        ["b0a1", "\u965B\u965D\u9664\u9658\u965E\u96BB\u98E2\u99AC\u9AA8\u9AD8\u9B25\u9B32\u9B3C\u4E7E\u507A\u507D\u505C\u5047\u5043\u504C\u505A\u5049\u5065\u5076\u504E\u5055\u5075\u5074\u5077\u504F\u500F\u506F\u506D\u515C\u5195\u51F0\u526A\u526F\u52D2\u52D9\u52D8\u52D5\u5310\u530F\u5319\u533F\u5340\u533E\u53C3\u66FC\u5546\u556A\u5566\u5544\u555E\u5561\u5543\u554A\u5531\u5556\u554F\u5555\u552F\u5564\u5538\u552E\u555C\u552C\u5563\u5533\u5541\u5557\u5708\u570B\u5709\u57DF\u5805\u580A\u5806\u57E0\u57E4\u57FA\u5802\u5835\u57F7\u57F9\u5920\u5962\u5A36\u5A41\u5A49\u5A66\u5A6A\u5A40"],
        ["b140", "\u5A3C\u5A62\u5A5A\u5A46\u5A4A\u5B70\u5BC7\u5BC5\u5BC4\u5BC2\u5BBF\u5BC6\u5C09\u5C08\u5C07\u5C60\u5C5C\u5C5D\u5D07\u5D06\u5D0E\u5D1B\u5D16\u5D22\u5D11\u5D29\u5D14\u5D19\u5D24\u5D27\u5D17\u5DE2\u5E38\u5E36\u5E33\u5E37\u5EB7\u5EB8\u5EB6\u5EB5\u5EBE\u5F35\u5F37\u5F57\u5F6C\u5F69\u5F6B\u5F97\u5F99\u5F9E\u5F98\u5FA1\u5FA0\u5F9C\u607F\u60A3\u6089\u60A0\u60A8\u60CB\u60B4\u60E6\u60BD"],
        ["b1a1", "\u60C5\u60BB\u60B5\u60DC\u60BC\u60D8\u60D5\u60C6\u60DF\u60B8\u60DA\u60C7\u621A\u621B\u6248\u63A0\u63A7\u6372\u6396\u63A2\u63A5\u6377\u6367\u6398\u63AA\u6371\u63A9\u6389\u6383\u639B\u636B\u63A8\u6384\u6388\u6399\u63A1\u63AC\u6392\u638F\u6380\u637B\u6369\u6368\u637A\u655D\u6556\u6551\u6559\u6557\u555F\u654F\u6558\u6555\u6554\u659C\u659B\u65AC\u65CF\u65CB\u65CC\u65CE\u665D\u665A\u6664\u6668\u6666\u665E\u66F9\u52D7\u671B\u6881\u68AF\u68A2\u6893\u68B5\u687F\u6876\u68B1\u68A7\u6897\u68B0\u6883\u68C4\u68AD\u6886\u6885\u6894\u689D\u68A8\u689F\u68A1\u6882\u6B32\u6BBA"],
        ["b240", "\u6BEB\u6BEC\u6C2B\u6D8E\u6DBC\u6DF3\u6DD9\u6DB2\u6DE1\u6DCC\u6DE4\u6DFB\u6DFA\u6E05\u6DC7\u6DCB\u6DAF\u6DD1\u6DAE\u6DDE\u6DF9\u6DB8\u6DF7\u6DF5\u6DC5\u6DD2\u6E1A\u6DB5\u6DDA\u6DEB\u6DD8\u6DEA\u6DF1\u6DEE\u6DE8\u6DC6\u6DC4\u6DAA\u6DEC\u6DBF\u6DE6\u70F9\u7109\u710A\u70FD\u70EF\u723D\u727D\u7281\u731C\u731B\u7316\u7313\u7319\u7387\u7405\u740A\u7403\u7406\u73FE\u740D\u74E0\u74F6"],
        ["b2a1", "\u74F7\u751C\u7522\u7565\u7566\u7562\u7570\u758F\u75D4\u75D5\u75B5\u75CA\u75CD\u768E\u76D4\u76D2\u76DB\u7737\u773E\u773C\u7736\u7738\u773A\u786B\u7843\u784E\u7965\u7968\u796D\u79FB\u7A92\u7A95\u7B20\u7B28\u7B1B\u7B2C\u7B26\u7B19\u7B1E\u7B2E\u7C92\u7C97\u7C95\u7D46\u7D43\u7D71\u7D2E\u7D39\u7D3C\u7D40\u7D30\u7D33\u7D44\u7D2F\u7D42\u7D32\u7D31\u7F3D\u7F9E\u7F9A\u7FCC\u7FCE\u7FD2\u801C\u804A\u8046\u812F\u8116\u8123\u812B\u8129\u8130\u8124\u8202\u8235\u8237\u8236\u8239\u838E\u839E\u8398\u8378\u83A2\u8396\u83BD\u83AB\u8392\u838A\u8393\u8389\u83A0\u8377\u837B\u837C"],
        ["b340", "\u8386\u83A7\u8655\u5F6A\u86C7\u86C0\u86B6\u86C4\u86B5\u86C6\u86CB\u86B1\u86AF\u86C9\u8853\u889E\u8888\u88AB\u8892\u8896\u888D\u888B\u8993\u898F\u8A2A\u8A1D\u8A23\u8A25\u8A31\u8A2D\u8A1F\u8A1B\u8A22\u8C49\u8C5A\u8CA9\u8CAC\u8CAB\u8CA8\u8CAA\u8CA7\u8D67\u8D66\u8DBE\u8DBA\u8EDB\u8EDF\u9019\u900D\u901A\u9017\u9023\u901F\u901D\u9010\u9015\u901E\u9020\u900F\u9022\u9016\u901B\u9014"],
        ["b3a1", "\u90E8\u90ED\u90FD\u9157\u91CE\u91F5\u91E6\u91E3\u91E7\u91ED\u91E9\u9589\u966A\u9675\u9673\u9678\u9670\u9674\u9676\u9677\u966C\u96C0\u96EA\u96E9\u7AE0\u7ADF\u9802\u9803\u9B5A\u9CE5\u9E75\u9E7F\u9EA5\u9EBB\u50A2\u508D\u5085\u5099\u5091\u5080\u5096\u5098\u509A\u6700\u51F1\u5272\u5274\u5275\u5269\u52DE\u52DD\u52DB\u535A\u53A5\u557B\u5580\u55A7\u557C\u558A\u559D\u5598\u5582\u559C\u55AA\u5594\u5587\u558B\u5583\u55B3\u55AE\u559F\u553E\u55B2\u559A\u55BB\u55AC\u55B1\u557E\u5589\u55AB\u5599\u570D\u582F\u582A\u5834\u5824\u5830\u5831\u5821\u581D\u5820\u58F9\u58FA\u5960"],
        ["b440", "\u5A77\u5A9A\u5A7F\u5A92\u5A9B\u5AA7\u5B73\u5B71\u5BD2\u5BCC\u5BD3\u5BD0\u5C0A\u5C0B\u5C31\u5D4C\u5D50\u5D34\u5D47\u5DFD\u5E45\u5E3D\u5E40\u5E43\u5E7E\u5ECA\u5EC1\u5EC2\u5EC4\u5F3C\u5F6D\u5FA9\u5FAA\u5FA8\u60D1\u60E1\u60B2\u60B6\u60E0\u611C\u6123\u60FA\u6115\u60F0\u60FB\u60F4\u6168\u60F1\u610E\u60F6\u6109\u6100\u6112\u621F\u6249\u63A3\u638C\u63CF\u63C0\u63E9\u63C9\u63C6\u63CD"],
        ["b4a1", "\u63D2\u63E3\u63D0\u63E1\u63D6\u63ED\u63EE\u6376\u63F4\u63EA\u63DB\u6452\u63DA\u63F9\u655E\u6566\u6562\u6563\u6591\u6590\u65AF\u666E\u6670\u6674\u6676\u666F\u6691\u667A\u667E\u6677\u66FE\u66FF\u671F\u671D\u68FA\u68D5\u68E0\u68D8\u68D7\u6905\u68DF\u68F5\u68EE\u68E7\u68F9\u68D2\u68F2\u68E3\u68CB\u68CD\u690D\u6912\u690E\u68C9\u68DA\u696E\u68FB\u6B3E\u6B3A\u6B3D\u6B98\u6B96\u6BBC\u6BEF\u6C2E\u6C2F\u6C2C\u6E2F\u6E38\u6E54\u6E21\u6E32\u6E67\u6E4A\u6E20\u6E25\u6E23\u6E1B\u6E5B\u6E58\u6E24\u6E56\u6E6E\u6E2D\u6E26\u6E6F\u6E34\u6E4D\u6E3A\u6E2C\u6E43\u6E1D\u6E3E\u6ECB"],
        ["b540", "\u6E89\u6E19\u6E4E\u6E63\u6E44\u6E72\u6E69\u6E5F\u7119\u711A\u7126\u7130\u7121\u7136\u716E\u711C\u724C\u7284\u7280\u7336\u7325\u7334\u7329\u743A\u742A\u7433\u7422\u7425\u7435\u7436\u7434\u742F\u741B\u7426\u7428\u7525\u7526\u756B\u756A\u75E2\u75DB\u75E3\u75D9\u75D8\u75DE\u75E0\u767B\u767C\u7696\u7693\u76B4\u76DC\u774F\u77ED\u785D\u786C\u786F\u7A0D\u7A08\u7A0B\u7A05\u7A00\u7A98"],
        ["b5a1", "\u7A97\u7A96\u7AE5\u7AE3\u7B49\u7B56\u7B46\u7B50\u7B52\u7B54\u7B4D\u7B4B\u7B4F\u7B51\u7C9F\u7CA5\u7D5E\u7D50\u7D68\u7D55\u7D2B\u7D6E\u7D72\u7D61\u7D66\u7D62\u7D70\u7D73\u5584\u7FD4\u7FD5\u800B\u8052\u8085\u8155\u8154\u814B\u8151\u814E\u8139\u8146\u813E\u814C\u8153\u8174\u8212\u821C\u83E9\u8403\u83F8\u840D\u83E0\u83C5\u840B\u83C1\u83EF\u83F1\u83F4\u8457\u840A\u83F0\u840C\u83CC\u83FD\u83F2\u83CA\u8438\u840E\u8404\u83DC\u8407\u83D4\u83DF\u865B\u86DF\u86D9\u86ED\u86D4\u86DB\u86E4\u86D0\u86DE\u8857\u88C1\u88C2\u88B1\u8983\u8996\u8A3B\u8A60\u8A55\u8A5E\u8A3C\u8A41"],
        ["b640", "\u8A54\u8A5B\u8A50\u8A46\u8A34\u8A3A\u8A36\u8A56\u8C61\u8C82\u8CAF\u8CBC\u8CB3\u8CBD\u8CC1\u8CBB\u8CC0\u8CB4\u8CB7\u8CB6\u8CBF\u8CB8\u8D8A\u8D85\u8D81\u8DCE\u8DDD\u8DCB\u8DDA\u8DD1\u8DCC\u8DDB\u8DC6\u8EFB\u8EF8\u8EFC\u8F9C\u902E\u9035\u9031\u9038\u9032\u9036\u9102\u90F5\u9109\u90FE\u9163\u9165\u91CF\u9214\u9215\u9223\u9209\u921E\u920D\u9210\u9207\u9211\u9594\u958F\u958B\u9591"],
        ["b6a1", "\u9593\u9592\u958E\u968A\u968E\u968B\u967D\u9685\u9686\u968D\u9672\u9684\u96C1\u96C5\u96C4\u96C6\u96C7\u96EF\u96F2\u97CC\u9805\u9806\u9808\u98E7\u98EA\u98EF\u98E9\u98F2\u98ED\u99AE\u99AD\u9EC3\u9ECD\u9ED1\u4E82\u50AD\u50B5\u50B2\u50B3\u50C5\u50BE\u50AC\u50B7\u50BB\u50AF\u50C7\u527F\u5277\u527D\u52DF\u52E6\u52E4\u52E2\u52E3\u532F\u55DF\u55E8\u55D3\u55E6\u55CE\u55DC\u55C7\u55D1\u55E3\u55E4\u55EF\u55DA\u55E1\u55C5\u55C6\u55E5\u55C9\u5712\u5713\u585E\u5851\u5858\u5857\u585A\u5854\u586B\u584C\u586D\u584A\u5862\u5852\u584B\u5967\u5AC1\u5AC9\u5ACC\u5ABE\u5ABD\u5ABC"],
        ["b740", "\u5AB3\u5AC2\u5AB2\u5D69\u5D6F\u5E4C\u5E79\u5EC9\u5EC8\u5F12\u5F59\u5FAC\u5FAE\u611A\u610F\u6148\u611F\u60F3\u611B\u60F9\u6101\u6108\u614E\u614C\u6144\u614D\u613E\u6134\u6127\u610D\u6106\u6137\u6221\u6222\u6413\u643E\u641E\u642A\u642D\u643D\u642C\u640F\u641C\u6414\u640D\u6436\u6416\u6417\u6406\u656C\u659F\u65B0\u6697\u6689\u6687\u6688\u6696\u6684\u6698\u668D\u6703\u6994\u696D"],
        ["b7a1", "\u695A\u6977\u6960\u6954\u6975\u6930\u6982\u694A\u6968\u696B\u695E\u6953\u6979\u6986\u695D\u6963\u695B\u6B47\u6B72\u6BC0\u6BBF\u6BD3\u6BFD\u6EA2\u6EAF\u6ED3\u6EB6\u6EC2\u6E90\u6E9D\u6EC7\u6EC5\u6EA5\u6E98\u6EBC\u6EBA\u6EAB\u6ED1\u6E96\u6E9C\u6EC4\u6ED4\u6EAA\u6EA7\u6EB4\u714E\u7159\u7169\u7164\u7149\u7167\u715C\u716C\u7166\u714C\u7165\u715E\u7146\u7168\u7156\u723A\u7252\u7337\u7345\u733F\u733E\u746F\u745A\u7455\u745F\u745E\u7441\u743F\u7459\u745B\u745C\u7576\u7578\u7600\u75F0\u7601\u75F2\u75F1\u75FA\u75FF\u75F4\u75F3\u76DE\u76DF\u775B\u776B\u7766\u775E\u7763"],
        ["b840", "\u7779\u776A\u776C\u775C\u7765\u7768\u7762\u77EE\u788E\u78B0\u7897\u7898\u788C\u7889\u787C\u7891\u7893\u787F\u797A\u797F\u7981\u842C\u79BD\u7A1C\u7A1A\u7A20\u7A14\u7A1F\u7A1E\u7A9F\u7AA0\u7B77\u7BC0\u7B60\u7B6E\u7B67\u7CB1\u7CB3\u7CB5\u7D93\u7D79\u7D91\u7D81\u7D8F\u7D5B\u7F6E\u7F69\u7F6A\u7F72\u7FA9\u7FA8\u7FA4\u8056\u8058\u8086\u8084\u8171\u8170\u8178\u8165\u816E\u8173\u816B"],
        ["b8a1", "\u8179\u817A\u8166\u8205\u8247\u8482\u8477\u843D\u8431\u8475\u8466\u846B\u8449\u846C\u845B\u843C\u8435\u8461\u8463\u8469\u846D\u8446\u865E\u865C\u865F\u86F9\u8713\u8708\u8707\u8700\u86FE\u86FB\u8702\u8703\u8706\u870A\u8859\u88DF\u88D4\u88D9\u88DC\u88D8\u88DD\u88E1\u88CA\u88D5\u88D2\u899C\u89E3\u8A6B\u8A72\u8A73\u8A66\u8A69\u8A70\u8A87\u8A7C\u8A63\u8AA0\u8A71\u8A85\u8A6D\u8A62\u8A6E\u8A6C\u8A79\u8A7B\u8A3E\u8A68\u8C62\u8C8A\u8C89\u8CCA\u8CC7\u8CC8\u8CC4\u8CB2\u8CC3\u8CC2\u8CC5\u8DE1\u8DDF\u8DE8\u8DEF\u8DF3\u8DFA\u8DEA\u8DE4\u8DE6\u8EB2\u8F03\u8F09\u8EFE\u8F0A"],
        ["b940", "\u8F9F\u8FB2\u904B\u904A\u9053\u9042\u9054\u903C\u9055\u9050\u9047\u904F\u904E\u904D\u9051\u903E\u9041\u9112\u9117\u916C\u916A\u9169\u91C9\u9237\u9257\u9238\u923D\u9240\u923E\u925B\u924B\u9264\u9251\u9234\u9249\u924D\u9245\u9239\u923F\u925A\u9598\u9698\u9694\u9695\u96CD\u96CB\u96C9\u96CA\u96F7\u96FB\u96F9\u96F6\u9756\u9774\u9776\u9810\u9811\u9813\u980A\u9812\u980C\u98FC\u98F4"],
        ["b9a1", "\u98FD\u98FE\u99B3\u99B1\u99B4\u9AE1\u9CE9\u9E82\u9F0E\u9F13\u9F20\u50E7\u50EE\u50E5\u50D6\u50ED\u50DA\u50D5\u50CF\u50D1\u50F1\u50CE\u50E9\u5162\u51F3\u5283\u5282\u5331\u53AD\u55FE\u5600\u561B\u5617\u55FD\u5614\u5606\u5609\u560D\u560E\u55F7\u5616\u561F\u5608\u5610\u55F6\u5718\u5716\u5875\u587E\u5883\u5893\u588A\u5879\u5885\u587D\u58FD\u5925\u5922\u5924\u596A\u5969\u5AE1\u5AE6\u5AE9\u5AD7\u5AD6\u5AD8\u5AE3\u5B75\u5BDE\u5BE7\u5BE1\u5BE5\u5BE6\u5BE8\u5BE2\u5BE4\u5BDF\u5C0D\u5C62\u5D84\u5D87\u5E5B\u5E63\u5E55\u5E57\u5E54\u5ED3\u5ED6\u5F0A\u5F46\u5F70\u5FB9\u6147"],
        ["ba40", "\u613F\u614B\u6177\u6162\u6163\u615F\u615A\u6158\u6175\u622A\u6487\u6458\u6454\u64A4\u6478\u645F\u647A\u6451\u6467\u6434\u646D\u647B\u6572\u65A1\u65D7\u65D6\u66A2\u66A8\u669D\u699C\u69A8\u6995\u69C1\u69AE\u69D3\u69CB\u699B\u69B7\u69BB\u69AB\u69B4\u69D0\u69CD\u69AD\u69CC\u69A6\u69C3\u69A3\u6B49\u6B4C\u6C33\u6F33\u6F14\u6EFE\u6F13\u6EF4\u6F29\u6F3E\u6F20\u6F2C\u6F0F\u6F02\u6F22"],
        ["baa1", "\u6EFF\u6EEF\u6F06\u6F31\u6F38\u6F32\u6F23\u6F15\u6F2B\u6F2F\u6F88\u6F2A\u6EEC\u6F01\u6EF2\u6ECC\u6EF7\u7194\u7199\u717D\u718A\u7184\u7192\u723E\u7292\u7296\u7344\u7350\u7464\u7463\u746A\u7470\u746D\u7504\u7591\u7627\u760D\u760B\u7609\u7613\u76E1\u76E3\u7784\u777D\u777F\u7761\u78C1\u789F\u78A7\u78B3\u78A9\u78A3\u798E\u798F\u798D\u7A2E\u7A31\u7AAA\u7AA9\u7AED\u7AEF\u7BA1\u7B95\u7B8B\u7B75\u7B97\u7B9D\u7B94\u7B8F\u7BB8\u7B87\u7B84\u7CB9\u7CBD\u7CBE\u7DBB\u7DB0\u7D9C\u7DBD\u7DBE\u7DA0\u7DCA\u7DB4\u7DB2\u7DB1\u7DBA\u7DA2\u7DBF\u7DB5\u7DB8\u7DAD\u7DD2\u7DC7\u7DAC"],
        ["bb40", "\u7F70\u7FE0\u7FE1\u7FDF\u805E\u805A\u8087\u8150\u8180\u818F\u8188\u818A\u817F\u8182\u81E7\u81FA\u8207\u8214\u821E\u824B\u84C9\u84BF\u84C6\u84C4\u8499\u849E\u84B2\u849C\u84CB\u84B8\u84C0\u84D3\u8490\u84BC\u84D1\u84CA\u873F\u871C\u873B\u8722\u8725\u8734\u8718\u8755\u8737\u8729\u88F3\u8902\u88F4\u88F9\u88F8\u88FD\u88E8\u891A\u88EF\u8AA6\u8A8C\u8A9E\u8AA3\u8A8D\u8AA1\u8A93\u8AA4"],
        ["bba1", "\u8AAA\u8AA5\u8AA8\u8A98\u8A91\u8A9A\u8AA7\u8C6A\u8C8D\u8C8C\u8CD3\u8CD1\u8CD2\u8D6B\u8D99\u8D95\u8DFC\u8F14\u8F12\u8F15\u8F13\u8FA3\u9060\u9058\u905C\u9063\u9059\u905E\u9062\u905D\u905B\u9119\u9118\u911E\u9175\u9178\u9177\u9174\u9278\u9280\u9285\u9298\u9296\u927B\u9293\u929C\u92A8\u927C\u9291\u95A1\u95A8\u95A9\u95A3\u95A5\u95A4\u9699\u969C\u969B\u96CC\u96D2\u9700\u977C\u9785\u97F6\u9817\u9818\u98AF\u98B1\u9903\u9905\u990C\u9909\u99C1\u9AAF\u9AB0\u9AE6\u9B41\u9B42\u9CF4\u9CF6\u9CF3\u9EBC\u9F3B\u9F4A\u5104\u5100\u50FB\u50F5\u50F9\u5102\u5108\u5109\u5105\u51DC"],
        ["bc40", "\u5287\u5288\u5289\u528D\u528A\u52F0\u53B2\u562E\u563B\u5639\u5632\u563F\u5634\u5629\u5653\u564E\u5657\u5674\u5636\u562F\u5630\u5880\u589F\u589E\u58B3\u589C\u58AE\u58A9\u58A6\u596D\u5B09\u5AFB\u5B0B\u5AF5\u5B0C\u5B08\u5BEE\u5BEC\u5BE9\u5BEB\u5C64\u5C65\u5D9D\u5D94\u5E62\u5E5F\u5E61\u5EE2\u5EDA\u5EDF\u5EDD\u5EE3\u5EE0\u5F48\u5F71\u5FB7\u5FB5\u6176\u6167\u616E\u615D\u6155\u6182"],
        ["bca1", "\u617C\u6170\u616B\u617E\u61A7\u6190\u61AB\u618E\u61AC\u619A\u61A4\u6194\u61AE\u622E\u6469\u646F\u6479\u649E\u64B2\u6488\u6490\u64B0\u64A5\u6493\u6495\u64A9\u6492\u64AE\u64AD\u64AB\u649A\u64AC\u6499\u64A2\u64B3\u6575\u6577\u6578\u66AE\u66AB\u66B4\u66B1\u6A23\u6A1F\u69E8\u6A01\u6A1E\u6A19\u69FD\u6A21\u6A13\u6A0A\u69F3\u6A02\u6A05\u69ED\u6A11\u6B50\u6B4E\u6BA4\u6BC5\u6BC6\u6F3F\u6F7C\u6F84\u6F51\u6F66\u6F54\u6F86\u6F6D\u6F5B\u6F78\u6F6E\u6F8E\u6F7A\u6F70\u6F64\u6F97\u6F58\u6ED5\u6F6F\u6F60\u6F5F\u719F\u71AC\u71B1\u71A8\u7256\u729B\u734E\u7357\u7469\u748B\u7483"],
        ["bd40", "\u747E\u7480\u757F\u7620\u7629\u761F\u7624\u7626\u7621\u7622\u769A\u76BA\u76E4\u778E\u7787\u778C\u7791\u778B\u78CB\u78C5\u78BA\u78CA\u78BE\u78D5\u78BC\u78D0\u7A3F\u7A3C\u7A40\u7A3D\u7A37\u7A3B\u7AAF\u7AAE\u7BAD\u7BB1\u7BC4\u7BB4\u7BC6\u7BC7\u7BC1\u7BA0\u7BCC\u7CCA\u7DE0\u7DF4\u7DEF\u7DFB\u7DD8\u7DEC\u7DDD\u7DE8\u7DE3\u7DDA\u7DDE\u7DE9\u7D9E\u7DD9\u7DF2\u7DF9\u7F75\u7F77\u7FAF"],
        ["bda1", "\u7FE9\u8026\u819B\u819C\u819D\u81A0\u819A\u8198\u8517\u853D\u851A\u84EE\u852C\u852D\u8513\u8511\u8523\u8521\u8514\u84EC\u8525\u84FF\u8506\u8782\u8774\u8776\u8760\u8766\u8778\u8768\u8759\u8757\u874C\u8753\u885B\u885D\u8910\u8907\u8912\u8913\u8915\u890A\u8ABC\u8AD2\u8AC7\u8AC4\u8A95\u8ACB\u8AF8\u8AB2\u8AC9\u8AC2\u8ABF\u8AB0\u8AD6\u8ACD\u8AB6\u8AB9\u8ADB\u8C4C\u8C4E\u8C6C\u8CE0\u8CDE\u8CE6\u8CE4\u8CEC\u8CED\u8CE2\u8CE3\u8CDC\u8CEA\u8CE1\u8D6D\u8D9F\u8DA3\u8E2B\u8E10\u8E1D\u8E22\u8E0F\u8E29\u8E1F\u8E21\u8E1E\u8EBA\u8F1D\u8F1B\u8F1F\u8F29\u8F26\u8F2A\u8F1C\u8F1E"],
        ["be40", "\u8F25\u9069\u906E\u9068\u906D\u9077\u9130\u912D\u9127\u9131\u9187\u9189\u918B\u9183\u92C5\u92BB\u92B7\u92EA\u92AC\u92E4\u92C1\u92B3\u92BC\u92D2\u92C7\u92F0\u92B2\u95AD\u95B1\u9704\u9706\u9707\u9709\u9760\u978D\u978B\u978F\u9821\u982B\u981C\u98B3\u990A\u9913\u9912\u9918\u99DD\u99D0\u99DF\u99DB\u99D1\u99D5\u99D2\u99D9\u9AB7\u9AEE\u9AEF\u9B27\u9B45\u9B44\u9B77\u9B6F\u9D06\u9D09"],
        ["bea1", "\u9D03\u9EA9\u9EBE\u9ECE\u58A8\u9F52\u5112\u5118\u5114\u5110\u5115\u5180\u51AA\u51DD\u5291\u5293\u52F3\u5659\u566B\u5679\u5669\u5664\u5678\u566A\u5668\u5665\u5671\u566F\u566C\u5662\u5676\u58C1\u58BE\u58C7\u58C5\u596E\u5B1D\u5B34\u5B78\u5BF0\u5C0E\u5F4A\u61B2\u6191\u61A9\u618A\u61CD\u61B6\u61BE\u61CA\u61C8\u6230\u64C5\u64C1\u64CB\u64BB\u64BC\u64DA\u64C4\u64C7\u64C2\u64CD\u64BF\u64D2\u64D4\u64BE\u6574\u66C6\u66C9\u66B9\u66C4\u66C7\u66B8\u6A3D\u6A38\u6A3A\u6A59\u6A6B\u6A58\u6A39\u6A44\u6A62\u6A61\u6A4B\u6A47\u6A35\u6A5F\u6A48\u6B59\u6B77\u6C05\u6FC2\u6FB1\u6FA1"],
        ["bf40", "\u6FC3\u6FA4\u6FC1\u6FA7\u6FB3\u6FC0\u6FB9\u6FB6\u6FA6\u6FA0\u6FB4\u71BE\u71C9\u71D0\u71D2\u71C8\u71D5\u71B9\u71CE\u71D9\u71DC\u71C3\u71C4\u7368\u749C\u74A3\u7498\u749F\u749E\u74E2\u750C\u750D\u7634\u7638\u763A\u76E7\u76E5\u77A0\u779E\u779F\u77A5\u78E8\u78DA\u78EC\u78E7\u79A6\u7A4D\u7A4E\u7A46\u7A4C\u7A4B\u7ABA\u7BD9\u7C11\u7BC9\u7BE4\u7BDB\u7BE1\u7BE9\u7BE6\u7CD5\u7CD6\u7E0A"],
        ["bfa1", "\u7E11\u7E08\u7E1B\u7E23\u7E1E\u7E1D\u7E09\u7E10\u7F79\u7FB2\u7FF0\u7FF1\u7FEE\u8028\u81B3\u81A9\u81A8\u81FB\u8208\u8258\u8259\u854A\u8559\u8548\u8568\u8569\u8543\u8549\u856D\u856A\u855E\u8783\u879F\u879E\u87A2\u878D\u8861\u892A\u8932\u8925\u892B\u8921\u89AA\u89A6\u8AE6\u8AFA\u8AEB\u8AF1\u8B00\u8ADC\u8AE7\u8AEE\u8AFE\u8B01\u8B02\u8AF7\u8AED\u8AF3\u8AF6\u8AFC\u8C6B\u8C6D\u8C93\u8CF4\u8E44\u8E31\u8E34\u8E42\u8E39\u8E35\u8F3B\u8F2F\u8F38\u8F33\u8FA8\u8FA6\u9075\u9074\u9078\u9072\u907C\u907A\u9134\u9192\u9320\u9336\u92F8\u9333\u932F\u9322\u92FC\u932B\u9304\u931A"],
        ["c040", "\u9310\u9326\u9321\u9315\u932E\u9319\u95BB\u96A7\u96A8\u96AA\u96D5\u970E\u9711\u9716\u970D\u9713\u970F\u975B\u975C\u9766\u9798\u9830\u9838\u983B\u9837\u982D\u9839\u9824\u9910\u9928\u991E\u991B\u9921\u991A\u99ED\u99E2\u99F1\u9AB8\u9ABC\u9AFB\u9AED\u9B28\u9B91\u9D15\u9D23\u9D26\u9D28\u9D12\u9D1B\u9ED8\u9ED4\u9F8D\u9F9C\u512A\u511F\u5121\u5132\u52F5\u568E\u5680\u5690\u5685\u5687"],
        ["c0a1", "\u568F\u58D5\u58D3\u58D1\u58CE\u5B30\u5B2A\u5B24\u5B7A\u5C37\u5C68\u5DBC\u5DBA\u5DBD\u5DB8\u5E6B\u5F4C\u5FBD\u61C9\u61C2\u61C7\u61E6\u61CB\u6232\u6234\u64CE\u64CA\u64D8\u64E0\u64F0\u64E6\u64EC\u64F1\u64E2\u64ED\u6582\u6583\u66D9\u66D6\u6A80\u6A94\u6A84\u6AA2\u6A9C\u6ADB\u6AA3\u6A7E\u6A97\u6A90\u6AA0\u6B5C\u6BAE\u6BDA\u6C08\u6FD8\u6FF1\u6FDF\u6FE0\u6FDB\u6FE4\u6FEB\u6FEF\u6F80\u6FEC\u6FE1\u6FE9\u6FD5\u6FEE\u6FF0\u71E7\u71DF\u71EE\u71E6\u71E5\u71ED\u71EC\u71F4\u71E0\u7235\u7246\u7370\u7372\u74A9\u74B0\u74A6\u74A8\u7646\u7642\u764C\u76EA\u77B3\u77AA\u77B0\u77AC"],
        ["c140", "\u77A7\u77AD\u77EF\u78F7\u78FA\u78F4\u78EF\u7901\u79A7\u79AA\u7A57\u7ABF\u7C07\u7C0D\u7BFE\u7BF7\u7C0C\u7BE0\u7CE0\u7CDC\u7CDE\u7CE2\u7CDF\u7CD9\u7CDD\u7E2E\u7E3E\u7E46\u7E37\u7E32\u7E43\u7E2B\u7E3D\u7E31\u7E45\u7E41\u7E34\u7E39\u7E48\u7E35\u7E3F\u7E2F\u7F44\u7FF3\u7FFC\u8071\u8072\u8070\u806F\u8073\u81C6\u81C3\u81BA\u81C2\u81C0\u81BF\u81BD\u81C9\u81BE\u81E8\u8209\u8271\u85AA"],
        ["c1a1", "\u8584\u857E\u859C\u8591\u8594\u85AF\u859B\u8587\u85A8\u858A\u8667\u87C0\u87D1\u87B3\u87D2\u87C6\u87AB\u87BB\u87BA\u87C8\u87CB\u893B\u8936\u8944\u8938\u893D\u89AC\u8B0E\u8B17\u8B19\u8B1B\u8B0A\u8B20\u8B1D\u8B04\u8B10\u8C41\u8C3F\u8C73\u8CFA\u8CFD\u8CFC\u8CF8\u8CFB\u8DA8\u8E49\u8E4B\u8E48\u8E4A\u8F44\u8F3E\u8F42\u8F45\u8F3F\u907F\u907D\u9084\u9081\u9082\u9080\u9139\u91A3\u919E\u919C\u934D\u9382\u9328\u9375\u934A\u9365\u934B\u9318\u937E\u936C\u935B\u9370\u935A\u9354\u95CA\u95CB\u95CC\u95C8\u95C6\u96B1\u96B8\u96D6\u971C\u971E\u97A0\u97D3\u9846\u98B6\u9935\u9A01"],
        ["c240", "\u99FF\u9BAE\u9BAB\u9BAA\u9BAD\u9D3B\u9D3F\u9E8B\u9ECF\u9EDE\u9EDC\u9EDD\u9EDB\u9F3E\u9F4B\u53E2\u5695\u56AE\u58D9\u58D8\u5B38\u5F5D\u61E3\u6233\u64F4\u64F2\u64FE\u6506\u64FA\u64FB\u64F7\u65B7\u66DC\u6726\u6AB3\u6AAC\u6AC3\u6ABB\u6AB8\u6AC2\u6AAE\u6AAF\u6B5F\u6B78\u6BAF\u7009\u700B\u6FFE\u7006\u6FFA\u7011\u700F\u71FB\u71FC\u71FE\u71F8\u7377\u7375\u74A7\u74BF\u7515\u7656\u7658"],
        ["c2a1", "\u7652\u77BD\u77BF\u77BB\u77BC\u790E\u79AE\u7A61\u7A62\u7A60\u7AC4\u7AC5\u7C2B\u7C27\u7C2A\u7C1E\u7C23\u7C21\u7CE7\u7E54\u7E55\u7E5E\u7E5A\u7E61\u7E52\u7E59\u7F48\u7FF9\u7FFB\u8077\u8076\u81CD\u81CF\u820A\u85CF\u85A9\u85CD\u85D0\u85C9\u85B0\u85BA\u85B9\u85A6\u87EF\u87EC\u87F2\u87E0\u8986\u89B2\u89F4\u8B28\u8B39\u8B2C\u8B2B\u8C50\u8D05\u8E59\u8E63\u8E66\u8E64\u8E5F\u8E55\u8EC0\u8F49\u8F4D\u9087\u9083\u9088\u91AB\u91AC\u91D0\u9394\u938A\u9396\u93A2\u93B3\u93AE\u93AC\u93B0\u9398\u939A\u9397\u95D4\u95D6\u95D0\u95D5\u96E2\u96DC\u96D9\u96DB\u96DE\u9724\u97A3\u97A6"],
        ["c340", "\u97AD\u97F9\u984D\u984F\u984C\u984E\u9853\u98BA\u993E\u993F\u993D\u992E\u99A5\u9A0E\u9AC1\u9B03\u9B06\u9B4F\u9B4E\u9B4D\u9BCA\u9BC9\u9BFD\u9BC8\u9BC0\u9D51\u9D5D\u9D60\u9EE0\u9F15\u9F2C\u5133\u56A5\u58DE\u58DF\u58E2\u5BF5\u9F90\u5EEC\u61F2\u61F7\u61F6\u61F5\u6500\u650F\u66E0\u66DD\u6AE5\u6ADD\u6ADA\u6AD3\u701B\u701F\u7028\u701A\u701D\u7015\u7018\u7206\u720D\u7258\u72A2\u7378"],
        ["c3a1", "\u737A\u74BD\u74CA\u74E3\u7587\u7586\u765F\u7661\u77C7\u7919\u79B1\u7A6B\u7A69\u7C3E\u7C3F\u7C38\u7C3D\u7C37\u7C40\u7E6B\u7E6D\u7E79\u7E69\u7E6A\u7F85\u7E73\u7FB6\u7FB9\u7FB8\u81D8\u85E9\u85DD\u85EA\u85D5\u85E4\u85E5\u85F7\u87FB\u8805\u880D\u87F9\u87FE\u8960\u895F\u8956\u895E\u8B41\u8B5C\u8B58\u8B49\u8B5A\u8B4E\u8B4F\u8B46\u8B59\u8D08\u8D0A\u8E7C\u8E72\u8E87\u8E76\u8E6C\u8E7A\u8E74\u8F54\u8F4E\u8FAD\u908A\u908B\u91B1\u91AE\u93E1\u93D1\u93DF\u93C3\u93C8\u93DC\u93DD\u93D6\u93E2\u93CD\u93D8\u93E4\u93D7\u93E8\u95DC\u96B4\u96E3\u972A\u9727\u9761\u97DC\u97FB\u985E"],
        ["c440", "\u9858\u985B\u98BC\u9945\u9949\u9A16\u9A19\u9B0D\u9BE8\u9BE7\u9BD6\u9BDB\u9D89\u9D61\u9D72\u9D6A\u9D6C\u9E92\u9E97\u9E93\u9EB4\u52F8\u56A8\u56B7\u56B6\u56B4\u56BC\u58E4\u5B40\u5B43\u5B7D\u5BF6\u5DC9\u61F8\u61FA\u6518\u6514\u6519\u66E6\u6727\u6AEC\u703E\u7030\u7032\u7210\u737B\u74CF\u7662\u7665\u7926\u792A\u792C\u792B\u7AC7\u7AF6\u7C4C\u7C43\u7C4D\u7CEF\u7CF0\u8FAE\u7E7D\u7E7C"],
        ["c4a1", "\u7E82\u7F4C\u8000\u81DA\u8266\u85FB\u85F9\u8611\u85FA\u8606\u860B\u8607\u860A\u8814\u8815\u8964\u89BA\u89F8\u8B70\u8B6C\u8B66\u8B6F\u8B5F\u8B6B\u8D0F\u8D0D\u8E89\u8E81\u8E85\u8E82\u91B4\u91CB\u9418\u9403\u93FD\u95E1\u9730\u98C4\u9952\u9951\u99A8\u9A2B\u9A30\u9A37\u9A35\u9C13\u9C0D\u9E79\u9EB5\u9EE8\u9F2F\u9F5F\u9F63\u9F61\u5137\u5138\u56C1\u56C0\u56C2\u5914\u5C6C\u5DCD\u61FC\u61FE\u651D\u651C\u6595\u66E9\u6AFB\u6B04\u6AFA\u6BB2\u704C\u721B\u72A7\u74D6\u74D4\u7669\u77D3\u7C50\u7E8F\u7E8C\u7FBC\u8617\u862D\u861A\u8823\u8822\u8821\u881F\u896A\u896C\u89BD\u8B74"],
        ["c540", "\u8B77\u8B7D\u8D13\u8E8A\u8E8D\u8E8B\u8F5F\u8FAF\u91BA\u942E\u9433\u9435\u943A\u9438\u9432\u942B\u95E2\u9738\u9739\u9732\u97FF\u9867\u9865\u9957\u9A45\u9A43\u9A40\u9A3E\u9ACF\u9B54\u9B51\u9C2D\u9C25\u9DAF\u9DB4\u9DC2\u9DB8\u9E9D\u9EEF\u9F19\u9F5C\u9F66\u9F67\u513C\u513B\u56C8\u56CA\u56C9\u5B7F\u5DD4\u5DD2\u5F4E\u61FF\u6524\u6B0A\u6B61\u7051\u7058\u7380\u74E4\u758A\u766E\u766C"],
        ["c5a1", "\u79B3\u7C60\u7C5F\u807E\u807D\u81DF\u8972\u896F\u89FC\u8B80\u8D16\u8D17\u8E91\u8E93\u8F61\u9148\u9444\u9451\u9452\u973D\u973E\u97C3\u97C1\u986B\u9955\u9A55\u9A4D\u9AD2\u9B1A\u9C49\u9C31\u9C3E\u9C3B\u9DD3\u9DD7\u9F34\u9F6C\u9F6A\u9F94\u56CC\u5DD6\u6200\u6523\u652B\u652A\u66EC\u6B10\u74DA\u7ACA\u7C64\u7C63\u7C65\u7E93\u7E96\u7E94\u81E2\u8638\u863F\u8831\u8B8A\u9090\u908F\u9463\u9460\u9464\u9768\u986F\u995C\u9A5A\u9A5B\u9A57\u9AD3\u9AD4\u9AD1\u9C54\u9C57\u9C56\u9DE5\u9E9F\u9EF4\u56D1\u58E9\u652C\u705E\u7671\u7672\u77D7\u7F50\u7F88\u8836\u8839\u8862\u8B93\u8B92"],
        ["c640", "\u8B96\u8277\u8D1B\u91C0\u946A\u9742\u9748\u9744\u97C6\u9870\u9A5F\u9B22\u9B58\u9C5F\u9DF9\u9DFA\u9E7C\u9E7D\u9F07\u9F77\u9F72\u5EF3\u6B16\u7063\u7C6C\u7C6E\u883B\u89C0\u8EA1\u91C1\u9472\u9470\u9871\u995E\u9AD6\u9B23\u9ECC\u7064\u77DA\u8B9A\u9477\u97C9\u9A62\u9A65\u7E9C\u8B9C\u8EAA\u91C5\u947D\u947E\u947C\u9C77\u9C78\u9EF7\u8C54\u947F\u9E1A\u7228\u9A6A\u9B31\u9E1B\u9E1E\u7C72"],
        ["c940", "\u4E42\u4E5C\u51F5\u531A\u5382\u4E07\u4E0C\u4E47\u4E8D\u56D7\uFA0C\u5C6E\u5F73\u4E0F\u5187\u4E0E\u4E2E\u4E93\u4EC2\u4EC9\u4EC8\u5198\u52FC\u536C\u53B9\u5720\u5903\u592C\u5C10\u5DFF\u65E1\u6BB3\u6BCC\u6C14\u723F\u4E31\u4E3C\u4EE8\u4EDC\u4EE9\u4EE1\u4EDD\u4EDA\u520C\u531C\u534C\u5722\u5723\u5917\u592F\u5B81\u5B84\u5C12\u5C3B\u5C74\u5C73\u5E04\u5E80\u5E82\u5FC9\u6209\u6250\u6C15"],
        ["c9a1", "\u6C36\u6C43\u6C3F\u6C3B\u72AE\u72B0\u738A\u79B8\u808A\u961E\u4F0E\u4F18\u4F2C\u4EF5\u4F14\u4EF1\u4F00\u4EF7\u4F08\u4F1D\u4F02\u4F05\u4F22\u4F13\u4F04\u4EF4\u4F12\u51B1\u5213\u5209\u5210\u52A6\u5322\u531F\u534D\u538A\u5407\u56E1\u56DF\u572E\u572A\u5734\u593C\u5980\u597C\u5985\u597B\u597E\u5977\u597F\u5B56\u5C15\u5C25\u5C7C\u5C7A\u5C7B\u5C7E\u5DDF\u5E75\u5E84\u5F02\u5F1A\u5F74\u5FD5\u5FD4\u5FCF\u625C\u625E\u6264\u6261\u6266\u6262\u6259\u6260\u625A\u6265\u65EF\u65EE\u673E\u6739\u6738\u673B\u673A\u673F\u673C\u6733\u6C18\u6C46\u6C52\u6C5C\u6C4F\u6C4A\u6C54\u6C4B"],
        ["ca40", "\u6C4C\u7071\u725E\u72B4\u72B5\u738E\u752A\u767F\u7A75\u7F51\u8278\u827C\u8280\u827D\u827F\u864D\u897E\u9099\u9097\u9098\u909B\u9094\u9622\u9624\u9620\u9623\u4F56\u4F3B\u4F62\u4F49\u4F53\u4F64\u4F3E\u4F67\u4F52\u4F5F\u4F41\u4F58\u4F2D\u4F33\u4F3F\u4F61\u518F\u51B9\u521C\u521E\u5221\u52AD\u52AE\u5309\u5363\u5372\u538E\u538F\u5430\u5437\u542A\u5454\u5445\u5419\u541C\u5425\u5418"],
        ["caa1", "\u543D\u544F\u5441\u5428\u5424\u5447\u56EE\u56E7\u56E5\u5741\u5745\u574C\u5749\u574B\u5752\u5906\u5940\u59A6\u5998\u59A0\u5997\u598E\u59A2\u5990\u598F\u59A7\u59A1\u5B8E\u5B92\u5C28\u5C2A\u5C8D\u5C8F\u5C88\u5C8B\u5C89\u5C92\u5C8A\u5C86\u5C93\u5C95\u5DE0\u5E0A\u5E0E\u5E8B\u5E89\u5E8C\u5E88\u5E8D\u5F05\u5F1D\u5F78\u5F76\u5FD2\u5FD1\u5FD0\u5FED\u5FE8\u5FEE\u5FF3\u5FE1\u5FE4\u5FE3\u5FFA\u5FEF\u5FF7\u5FFB\u6000\u5FF4\u623A\u6283\u628C\u628E\u628F\u6294\u6287\u6271\u627B\u627A\u6270\u6281\u6288\u6277\u627D\u6272\u6274\u6537\u65F0\u65F4\u65F3\u65F2\u65F5\u6745\u6747"],
        ["cb40", "\u6759\u6755\u674C\u6748\u675D\u674D\u675A\u674B\u6BD0\u6C19\u6C1A\u6C78\u6C67\u6C6B\u6C84\u6C8B\u6C8F\u6C71\u6C6F\u6C69\u6C9A\u6C6D\u6C87\u6C95\u6C9C\u6C66\u6C73\u6C65\u6C7B\u6C8E\u7074\u707A\u7263\u72BF\u72BD\u72C3\u72C6\u72C1\u72BA\u72C5\u7395\u7397\u7393\u7394\u7392\u753A\u7539\u7594\u7595\u7681\u793D\u8034\u8095\u8099\u8090\u8092\u809C\u8290\u828F\u8285\u828E\u8291\u8293"],
        ["cba1", "\u828A\u8283\u8284\u8C78\u8FC9\u8FBF\u909F\u90A1\u90A5\u909E\u90A7\u90A0\u9630\u9628\u962F\u962D\u4E33\u4F98\u4F7C\u4F85\u4F7D\u4F80\u4F87\u4F76\u4F74\u4F89\u4F84\u4F77\u4F4C\u4F97\u4F6A\u4F9A\u4F79\u4F81\u4F78\u4F90\u4F9C\u4F94\u4F9E\u4F92\u4F82\u4F95\u4F6B\u4F6E\u519E\u51BC\u51BE\u5235\u5232\u5233\u5246\u5231\u52BC\u530A\u530B\u533C\u5392\u5394\u5487\u547F\u5481\u5491\u5482\u5488\u546B\u547A\u547E\u5465\u546C\u5474\u5466\u548D\u546F\u5461\u5460\u5498\u5463\u5467\u5464\u56F7\u56F9\u576F\u5772\u576D\u576B\u5771\u5770\u5776\u5780\u5775\u577B\u5773\u5774\u5762"],
        ["cc40", "\u5768\u577D\u590C\u5945\u59B5\u59BA\u59CF\u59CE\u59B2\u59CC\u59C1\u59B6\u59BC\u59C3\u59D6\u59B1\u59BD\u59C0\u59C8\u59B4\u59C7\u5B62\u5B65\u5B93\u5B95\u5C44\u5C47\u5CAE\u5CA4\u5CA0\u5CB5\u5CAF\u5CA8\u5CAC\u5C9F\u5CA3\u5CAD\u5CA2\u5CAA\u5CA7\u5C9D\u5CA5\u5CB6\u5CB0\u5CA6\u5E17\u5E14\u5E19\u5F28\u5F22\u5F23\u5F24\u5F54\u5F82\u5F7E\u5F7D\u5FDE\u5FE5\u602D\u6026\u6019\u6032\u600B"],
        ["cca1", "\u6034\u600A\u6017\u6033\u601A\u601E\u602C\u6022\u600D\u6010\u602E\u6013\u6011\u600C\u6009\u601C\u6214\u623D\u62AD\u62B4\u62D1\u62BE\u62AA\u62B6\u62CA\u62AE\u62B3\u62AF\u62BB\u62A9\u62B0\u62B8\u653D\u65A8\u65BB\u6609\u65FC\u6604\u6612\u6608\u65FB\u6603\u660B\u660D\u6605\u65FD\u6611\u6610\u66F6\u670A\u6785\u676C\u678E\u6792\u6776\u677B\u6798\u6786\u6784\u6774\u678D\u678C\u677A\u679F\u6791\u6799\u6783\u677D\u6781\u6778\u6779\u6794\u6B25\u6B80\u6B7E\u6BDE\u6C1D\u6C93\u6CEC\u6CEB\u6CEE\u6CD9\u6CB6\u6CD4\u6CAD\u6CE7\u6CB7\u6CD0\u6CC2\u6CBA\u6CC3\u6CC6\u6CED\u6CF2"],
        ["cd40", "\u6CD2\u6CDD\u6CB4\u6C8A\u6C9D\u6C80\u6CDE\u6CC0\u6D30\u6CCD\u6CC7\u6CB0\u6CF9\u6CCF\u6CE9\u6CD1\u7094\u7098\u7085\u7093\u7086\u7084\u7091\u7096\u7082\u709A\u7083\u726A\u72D6\u72CB\u72D8\u72C9\u72DC\u72D2\u72D4\u72DA\u72CC\u72D1\u73A4\u73A1\u73AD\u73A6\u73A2\u73A0\u73AC\u739D\u74DD\u74E8\u753F\u7540\u753E\u758C\u7598\u76AF\u76F3\u76F1\u76F0\u76F5\u77F8\u77FC\u77F9\u77FB\u77FA"],
        ["cda1", "\u77F7\u7942\u793F\u79C5\u7A78\u7A7B\u7AFB\u7C75\u7CFD\u8035\u808F\u80AE\u80A3\u80B8\u80B5\u80AD\u8220\u82A0\u82C0\u82AB\u829A\u8298\u829B\u82B5\u82A7\u82AE\u82BC\u829E\u82BA\u82B4\u82A8\u82A1\u82A9\u82C2\u82A4\u82C3\u82B6\u82A2\u8670\u866F\u866D\u866E\u8C56\u8FD2\u8FCB\u8FD3\u8FCD\u8FD6\u8FD5\u8FD7\u90B2\u90B4\u90AF\u90B3\u90B0\u9639\u963D\u963C\u963A\u9643\u4FCD\u4FC5\u4FD3\u4FB2\u4FC9\u4FCB\u4FC1\u4FD4\u4FDC\u4FD9\u4FBB\u4FB3\u4FDB\u4FC7\u4FD6\u4FBA\u4FC0\u4FB9\u4FEC\u5244\u5249\u52C0\u52C2\u533D\u537C\u5397\u5396\u5399\u5398\u54BA\u54A1\u54AD\u54A5\u54CF"],
        ["ce40", "\u54C3\u830D\u54B7\u54AE\u54D6\u54B6\u54C5\u54C6\u54A0\u5470\u54BC\u54A2\u54BE\u5472\u54DE\u54B0\u57B5\u579E\u579F\u57A4\u578C\u5797\u579D\u579B\u5794\u5798\u578F\u5799\u57A5\u579A\u5795\u58F4\u590D\u5953\u59E1\u59DE\u59EE\u5A00\u59F1\u59DD\u59FA\u59FD\u59FC\u59F6\u59E4\u59F2\u59F7\u59DB\u59E9\u59F3\u59F5\u59E0\u59FE\u59F4\u59ED\u5BA8\u5C4C\u5CD0\u5CD8\u5CCC\u5CD7\u5CCB\u5CDB"],
        ["cea1", "\u5CDE\u5CDA\u5CC9\u5CC7\u5CCA\u5CD6\u5CD3\u5CD4\u5CCF\u5CC8\u5CC6\u5CCE\u5CDF\u5CF8\u5DF9\u5E21\u5E22\u5E23\u5E20\u5E24\u5EB0\u5EA4\u5EA2\u5E9B\u5EA3\u5EA5\u5F07\u5F2E\u5F56\u5F86\u6037\u6039\u6054\u6072\u605E\u6045\u6053\u6047\u6049\u605B\u604C\u6040\u6042\u605F\u6024\u6044\u6058\u6066\u606E\u6242\u6243\u62CF\u630D\u630B\u62F5\u630E\u6303\u62EB\u62F9\u630F\u630C\u62F8\u62F6\u6300\u6313\u6314\u62FA\u6315\u62FB\u62F0\u6541\u6543\u65AA\u65BF\u6636\u6621\u6632\u6635\u661C\u6626\u6622\u6633\u662B\u663A\u661D\u6634\u6639\u662E\u670F\u6710\u67C1\u67F2\u67C8\u67BA"],
        ["cf40", "\u67DC\u67BB\u67F8\u67D8\u67C0\u67B7\u67C5\u67EB\u67E4\u67DF\u67B5\u67CD\u67B3\u67F7\u67F6\u67EE\u67E3\u67C2\u67B9\u67CE\u67E7\u67F0\u67B2\u67FC\u67C6\u67ED\u67CC\u67AE\u67E6\u67DB\u67FA\u67C9\u67CA\u67C3\u67EA\u67CB\u6B28\u6B82\u6B84\u6BB6\u6BD6\u6BD8\u6BE0\u6C20\u6C21\u6D28\u6D34\u6D2D\u6D1F\u6D3C\u6D3F\u6D12\u6D0A\u6CDA\u6D33\u6D04\u6D19\u6D3A\u6D1A\u6D11\u6D00\u6D1D\u6D42"],
        ["cfa1", "\u6D01\u6D18\u6D37\u6D03\u6D0F\u6D40\u6D07\u6D20\u6D2C\u6D08\u6D22\u6D09\u6D10\u70B7\u709F\u70BE\u70B1\u70B0\u70A1\u70B4\u70B5\u70A9\u7241\u7249\u724A\u726C\u7270\u7273\u726E\u72CA\u72E4\u72E8\u72EB\u72DF\u72EA\u72E6\u72E3\u7385\u73CC\u73C2\u73C8\u73C5\u73B9\u73B6\u73B5\u73B4\u73EB\u73BF\u73C7\u73BE\u73C3\u73C6\u73B8\u73CB\u74EC\u74EE\u752E\u7547\u7548\u75A7\u75AA\u7679\u76C4\u7708\u7703\u7704\u7705\u770A\u76F7\u76FB\u76FA\u77E7\u77E8\u7806\u7811\u7812\u7805\u7810\u780F\u780E\u7809\u7803\u7813\u794A\u794C\u794B\u7945\u7944\u79D5\u79CD\u79CF\u79D6\u79CE\u7A80"],
        ["d040", "\u7A7E\u7AD1\u7B00\u7B01\u7C7A\u7C78\u7C79\u7C7F\u7C80\u7C81\u7D03\u7D08\u7D01\u7F58\u7F91\u7F8D\u7FBE\u8007\u800E\u800F\u8014\u8037\u80D8\u80C7\u80E0\u80D1\u80C8\u80C2\u80D0\u80C5\u80E3\u80D9\u80DC\u80CA\u80D5\u80C9\u80CF\u80D7\u80E6\u80CD\u81FF\u8221\u8294\u82D9\u82FE\u82F9\u8307\u82E8\u8300\u82D5\u833A\u82EB\u82D6\u82F4\u82EC\u82E1\u82F2\u82F5\u830C\u82FB\u82F6\u82F0\u82EA"],
        ["d0a1", "\u82E4\u82E0\u82FA\u82F3\u82ED\u8677\u8674\u867C\u8673\u8841\u884E\u8867\u886A\u8869\u89D3\u8A04\u8A07\u8D72\u8FE3\u8FE1\u8FEE\u8FE0\u90F1\u90BD\u90BF\u90D5\u90C5\u90BE\u90C7\u90CB\u90C8\u91D4\u91D3\u9654\u964F\u9651\u9653\u964A\u964E\u501E\u5005\u5007\u5013\u5022\u5030\u501B\u4FF5\u4FF4\u5033\u5037\u502C\u4FF6\u4FF7\u5017\u501C\u5020\u5027\u5035\u502F\u5031\u500E\u515A\u5194\u5193\u51CA\u51C4\u51C5\u51C8\u51CE\u5261\u525A\u5252\u525E\u525F\u5255\u5262\u52CD\u530E\u539E\u5526\u54E2\u5517\u5512\u54E7\u54F3\u54E4\u551A\u54FF\u5504\u5508\u54EB\u5511\u5505\u54F1"],
        ["d140", "\u550A\u54FB\u54F7\u54F8\u54E0\u550E\u5503\u550B\u5701\u5702\u57CC\u5832\u57D5\u57D2\u57BA\u57C6\u57BD\u57BC\u57B8\u57B6\u57BF\u57C7\u57D0\u57B9\u57C1\u590E\u594A\u5A19\u5A16\u5A2D\u5A2E\u5A15\u5A0F\u5A17\u5A0A\u5A1E\u5A33\u5B6C\u5BA7\u5BAD\u5BAC\u5C03\u5C56\u5C54\u5CEC\u5CFF\u5CEE\u5CF1\u5CF7\u5D00\u5CF9\u5E29\u5E28\u5EA8\u5EAE\u5EAA\u5EAC\u5F33\u5F30\u5F67\u605D\u605A\u6067"],
        ["d1a1", "\u6041\u60A2\u6088\u6080\u6092\u6081\u609D\u6083\u6095\u609B\u6097\u6087\u609C\u608E\u6219\u6246\u62F2\u6310\u6356\u632C\u6344\u6345\u6336\u6343\u63E4\u6339\u634B\u634A\u633C\u6329\u6341\u6334\u6358\u6354\u6359\u632D\u6347\u6333\u635A\u6351\u6338\u6357\u6340\u6348\u654A\u6546\u65C6\u65C3\u65C4\u65C2\u664A\u665F\u6647\u6651\u6712\u6713\u681F\u681A\u6849\u6832\u6833\u683B\u684B\u684F\u6816\u6831\u681C\u6835\u682B\u682D\u682F\u684E\u6844\u6834\u681D\u6812\u6814\u6826\u6828\u682E\u684D\u683A\u6825\u6820\u6B2C\u6B2F\u6B2D\u6B31\u6B34\u6B6D\u8082\u6B88\u6BE6\u6BE4"],
        ["d240", "\u6BE8\u6BE3\u6BE2\u6BE7\u6C25\u6D7A\u6D63\u6D64\u6D76\u6D0D\u6D61\u6D92\u6D58\u6D62\u6D6D\u6D6F\u6D91\u6D8D\u6DEF\u6D7F\u6D86\u6D5E\u6D67\u6D60\u6D97\u6D70\u6D7C\u6D5F\u6D82\u6D98\u6D2F\u6D68\u6D8B\u6D7E\u6D80\u6D84\u6D16\u6D83\u6D7B\u6D7D\u6D75\u6D90\u70DC\u70D3\u70D1\u70DD\u70CB\u7F39\u70E2\u70D7\u70D2\u70DE\u70E0\u70D4\u70CD\u70C5\u70C6\u70C7\u70DA\u70CE\u70E1\u7242\u7278"],
        ["d2a1", "\u7277\u7276\u7300\u72FA\u72F4\u72FE\u72F6\u72F3\u72FB\u7301\u73D3\u73D9\u73E5\u73D6\u73BC\u73E7\u73E3\u73E9\u73DC\u73D2\u73DB\u73D4\u73DD\u73DA\u73D7\u73D8\u73E8\u74DE\u74DF\u74F4\u74F5\u7521\u755B\u755F\u75B0\u75C1\u75BB\u75C4\u75C0\u75BF\u75B6\u75BA\u768A\u76C9\u771D\u771B\u7710\u7713\u7712\u7723\u7711\u7715\u7719\u771A\u7722\u7727\u7823\u782C\u7822\u7835\u782F\u7828\u782E\u782B\u7821\u7829\u7833\u782A\u7831\u7954\u795B\u794F\u795C\u7953\u7952\u7951\u79EB\u79EC\u79E0\u79EE\u79ED\u79EA\u79DC\u79DE\u79DD\u7A86\u7A89\u7A85\u7A8B\u7A8C\u7A8A\u7A87\u7AD8\u7B10"],
        ["d340", "\u7B04\u7B13\u7B05\u7B0F\u7B08\u7B0A\u7B0E\u7B09\u7B12\u7C84\u7C91\u7C8A\u7C8C\u7C88\u7C8D\u7C85\u7D1E\u7D1D\u7D11\u7D0E\u7D18\u7D16\u7D13\u7D1F\u7D12\u7D0F\u7D0C\u7F5C\u7F61\u7F5E\u7F60\u7F5D\u7F5B\u7F96\u7F92\u7FC3\u7FC2\u7FC0\u8016\u803E\u8039\u80FA\u80F2\u80F9\u80F5\u8101\u80FB\u8100\u8201\u822F\u8225\u8333\u832D\u8344\u8319\u8351\u8325\u8356\u833F\u8341\u8326\u831C\u8322"],
        ["d3a1", "\u8342\u834E\u831B\u832A\u8308\u833C\u834D\u8316\u8324\u8320\u8337\u832F\u8329\u8347\u8345\u834C\u8353\u831E\u832C\u834B\u8327\u8348\u8653\u8652\u86A2\u86A8\u8696\u868D\u8691\u869E\u8687\u8697\u8686\u868B\u869A\u8685\u86A5\u8699\u86A1\u86A7\u8695\u8698\u868E\u869D\u8690\u8694\u8843\u8844\u886D\u8875\u8876\u8872\u8880\u8871\u887F\u886F\u8883\u887E\u8874\u887C\u8A12\u8C47\u8C57\u8C7B\u8CA4\u8CA3\u8D76\u8D78\u8DB5\u8DB7\u8DB6\u8ED1\u8ED3\u8FFE\u8FF5\u9002\u8FFF\u8FFB\u9004\u8FFC\u8FF6\u90D6\u90E0\u90D9\u90DA\u90E3\u90DF\u90E5\u90D8\u90DB\u90D7\u90DC\u90E4\u9150"],
        ["d440", "\u914E\u914F\u91D5\u91E2\u91DA\u965C\u965F\u96BC\u98E3\u9ADF\u9B2F\u4E7F\u5070\u506A\u5061\u505E\u5060\u5053\u504B\u505D\u5072\u5048\u504D\u5041\u505B\u504A\u5062\u5015\u5045\u505F\u5069\u506B\u5063\u5064\u5046\u5040\u506E\u5073\u5057\u5051\u51D0\u526B\u526D\u526C\u526E\u52D6\u52D3\u532D\u539C\u5575\u5576\u553C\u554D\u5550\u5534\u552A\u5551\u5562\u5536\u5535\u5530\u5552\u5545"],
        ["d4a1", "\u550C\u5532\u5565\u554E\u5539\u5548\u552D\u553B\u5540\u554B\u570A\u5707\u57FB\u5814\u57E2\u57F6\u57DC\u57F4\u5800\u57ED\u57FD\u5808\u57F8\u580B\u57F3\u57CF\u5807\u57EE\u57E3\u57F2\u57E5\u57EC\u57E1\u580E\u57FC\u5810\u57E7\u5801\u580C\u57F1\u57E9\u57F0\u580D\u5804\u595C\u5A60\u5A58\u5A55\u5A67\u5A5E\u5A38\u5A35\u5A6D\u5A50\u5A5F\u5A65\u5A6C\u5A53\u5A64\u5A57\u5A43\u5A5D\u5A52\u5A44\u5A5B\u5A48\u5A8E\u5A3E\u5A4D\u5A39\u5A4C\u5A70\u5A69\u5A47\u5A51\u5A56\u5A42\u5A5C\u5B72\u5B6E\u5BC1\u5BC0\u5C59\u5D1E\u5D0B\u5D1D\u5D1A\u5D20\u5D0C\u5D28\u5D0D\u5D26\u5D25\u5D0F"],
        ["d540", "\u5D30\u5D12\u5D23\u5D1F\u5D2E\u5E3E\u5E34\u5EB1\u5EB4\u5EB9\u5EB2\u5EB3\u5F36\u5F38\u5F9B\u5F96\u5F9F\u608A\u6090\u6086\u60BE\u60B0\u60BA\u60D3\u60D4\u60CF\u60E4\u60D9\u60DD\u60C8\u60B1\u60DB\u60B7\u60CA\u60BF\u60C3\u60CD\u60C0\u6332\u6365\u638A\u6382\u637D\u63BD\u639E\u63AD\u639D\u6397\u63AB\u638E\u636F\u6387\u6390\u636E\u63AF\u6375\u639C\u636D\u63AE\u637C\u63A4\u633B\u639F"],
        ["d5a1", "\u6378\u6385\u6381\u6391\u638D\u6370\u6553\u65CD\u6665\u6661\u665B\u6659\u665C\u6662\u6718\u6879\u6887\u6890\u689C\u686D\u686E\u68AE\u68AB\u6956\u686F\u68A3\u68AC\u68A9\u6875\u6874\u68B2\u688F\u6877\u6892\u687C\u686B\u6872\u68AA\u6880\u6871\u687E\u689B\u6896\u688B\u68A0\u6889\u68A4\u6878\u687B\u6891\u688C\u688A\u687D\u6B36\u6B33\u6B37\u6B38\u6B91\u6B8F\u6B8D\u6B8E\u6B8C\u6C2A\u6DC0\u6DAB\u6DB4\u6DB3\u6E74\u6DAC\u6DE9\u6DE2\u6DB7\u6DF6\u6DD4\u6E00\u6DC8\u6DE0\u6DDF\u6DD6\u6DBE\u6DE5\u6DDC\u6DDD\u6DDB\u6DF4\u6DCA\u6DBD\u6DED\u6DF0\u6DBA\u6DD5\u6DC2\u6DCF\u6DC9"],
        ["d640", "\u6DD0\u6DF2\u6DD3\u6DFD\u6DD7\u6DCD\u6DE3\u6DBB\u70FA\u710D\u70F7\u7117\u70F4\u710C\u70F0\u7104\u70F3\u7110\u70FC\u70FF\u7106\u7113\u7100\u70F8\u70F6\u710B\u7102\u710E\u727E\u727B\u727C\u727F\u731D\u7317\u7307\u7311\u7318\u730A\u7308\u72FF\u730F\u731E\u7388\u73F6\u73F8\u73F5\u7404\u7401\u73FD\u7407\u7400\u73FA\u73FC\u73FF\u740C\u740B\u73F4\u7408\u7564\u7563\u75CE\u75D2\u75CF"],
        ["d6a1", "\u75CB\u75CC\u75D1\u75D0\u768F\u7689\u76D3\u7739\u772F\u772D\u7731\u7732\u7734\u7733\u773D\u7725\u773B\u7735\u7848\u7852\u7849\u784D\u784A\u784C\u7826\u7845\u7850\u7964\u7967\u7969\u796A\u7963\u796B\u7961\u79BB\u79FA\u79F8\u79F6\u79F7\u7A8F\u7A94\u7A90\u7B35\u7B47\u7B34\u7B25\u7B30\u7B22\u7B24\u7B33\u7B18\u7B2A\u7B1D\u7B31\u7B2B\u7B2D\u7B2F\u7B32\u7B38\u7B1A\u7B23\u7C94\u7C98\u7C96\u7CA3\u7D35\u7D3D\u7D38\u7D36\u7D3A\u7D45\u7D2C\u7D29\u7D41\u7D47\u7D3E\u7D3F\u7D4A\u7D3B\u7D28\u7F63\u7F95\u7F9C\u7F9D\u7F9B\u7FCA\u7FCB\u7FCD\u7FD0\u7FD1\u7FC7\u7FCF\u7FC9\u801F"],
        ["d740", "\u801E\u801B\u8047\u8043\u8048\u8118\u8125\u8119\u811B\u812D\u811F\u812C\u811E\u8121\u8115\u8127\u811D\u8122\u8211\u8238\u8233\u823A\u8234\u8232\u8274\u8390\u83A3\u83A8\u838D\u837A\u8373\u83A4\u8374\u838F\u8381\u8395\u8399\u8375\u8394\u83A9\u837D\u8383\u838C\u839D\u839B\u83AA\u838B\u837E\u83A5\u83AF\u8388\u8397\u83B0\u837F\u83A6\u8387\u83AE\u8376\u839A\u8659\u8656\u86BF\u86B7"],
        ["d7a1", "\u86C2\u86C1\u86C5\u86BA\u86B0\u86C8\u86B9\u86B3\u86B8\u86CC\u86B4\u86BB\u86BC\u86C3\u86BD\u86BE\u8852\u8889\u8895\u88A8\u88A2\u88AA\u889A\u8891\u88A1\u889F\u8898\u88A7\u8899\u889B\u8897\u88A4\u88AC\u888C\u8893\u888E\u8982\u89D6\u89D9\u89D5\u8A30\u8A27\u8A2C\u8A1E\u8C39\u8C3B\u8C5C\u8C5D\u8C7D\u8CA5\u8D7D\u8D7B\u8D79\u8DBC\u8DC2\u8DB9\u8DBF\u8DC1\u8ED8\u8EDE\u8EDD\u8EDC\u8ED7\u8EE0\u8EE1\u9024\u900B\u9011\u901C\u900C\u9021\u90EF\u90EA\u90F0\u90F4\u90F2\u90F3\u90D4\u90EB\u90EC\u90E9\u9156\u9158\u915A\u9153\u9155\u91EC\u91F4\u91F1\u91F3\u91F8\u91E4\u91F9\u91EA"],
        ["d840", "\u91EB\u91F7\u91E8\u91EE\u957A\u9586\u9588\u967C\u966D\u966B\u9671\u966F\u96BF\u976A\u9804\u98E5\u9997\u509B\u5095\u5094\u509E\u508B\u50A3\u5083\u508C\u508E\u509D\u5068\u509C\u5092\u5082\u5087\u515F\u51D4\u5312\u5311\u53A4\u53A7\u5591\u55A8\u55A5\u55AD\u5577\u5645\u55A2\u5593\u5588\u558F\u55B5\u5581\u55A3\u5592\u55A4\u557D\u558C\u55A6\u557F\u5595\u55A1\u558E\u570C\u5829\u5837"],
        ["d8a1", "\u5819\u581E\u5827\u5823\u5828\u57F5\u5848\u5825\u581C\u581B\u5833\u583F\u5836\u582E\u5839\u5838\u582D\u582C\u583B\u5961\u5AAF\u5A94\u5A9F\u5A7A\u5AA2\u5A9E\u5A78\u5AA6\u5A7C\u5AA5\u5AAC\u5A95\u5AAE\u5A37\u5A84\u5A8A\u5A97\u5A83\u5A8B\u5AA9\u5A7B\u5A7D\u5A8C\u5A9C\u5A8F\u5A93\u5A9D\u5BEA\u5BCD\u5BCB\u5BD4\u5BD1\u5BCA\u5BCE\u5C0C\u5C30\u5D37\u5D43\u5D6B\u5D41\u5D4B\u5D3F\u5D35\u5D51\u5D4E\u5D55\u5D33\u5D3A\u5D52\u5D3D\u5D31\u5D59\u5D42\u5D39\u5D49\u5D38\u5D3C\u5D32\u5D36\u5D40\u5D45\u5E44\u5E41\u5F58\u5FA6\u5FA5\u5FAB\u60C9\u60B9\u60CC\u60E2\u60CE\u60C4\u6114"],
        ["d940", "\u60F2\u610A\u6116\u6105\u60F5\u6113\u60F8\u60FC\u60FE\u60C1\u6103\u6118\u611D\u6110\u60FF\u6104\u610B\u624A\u6394\u63B1\u63B0\u63CE\u63E5\u63E8\u63EF\u63C3\u649D\u63F3\u63CA\u63E0\u63F6\u63D5\u63F2\u63F5\u6461\u63DF\u63BE\u63DD\u63DC\u63C4\u63D8\u63D3\u63C2\u63C7\u63CC\u63CB\u63C8\u63F0\u63D7\u63D9\u6532\u6567\u656A\u6564\u655C\u6568\u6565\u658C\u659D\u659E\u65AE\u65D0\u65D2"],
        ["d9a1", "\u667C\u666C\u667B\u6680\u6671\u6679\u666A\u6672\u6701\u690C\u68D3\u6904\u68DC\u692A\u68EC\u68EA\u68F1\u690F\u68D6\u68F7\u68EB\u68E4\u68F6\u6913\u6910\u68F3\u68E1\u6907\u68CC\u6908\u6970\u68B4\u6911\u68EF\u68C6\u6914\u68F8\u68D0\u68FD\u68FC\u68E8\u690B\u690A\u6917\u68CE\u68C8\u68DD\u68DE\u68E6\u68F4\u68D1\u6906\u68D4\u68E9\u6915\u6925\u68C7\u6B39\u6B3B\u6B3F\u6B3C\u6B94\u6B97\u6B99\u6B95\u6BBD\u6BF0\u6BF2\u6BF3\u6C30\u6DFC\u6E46\u6E47\u6E1F\u6E49\u6E88\u6E3C\u6E3D\u6E45\u6E62\u6E2B\u6E3F\u6E41\u6E5D\u6E73\u6E1C\u6E33\u6E4B\u6E40\u6E51\u6E3B\u6E03\u6E2E\u6E5E"],
        ["da40", "\u6E68\u6E5C\u6E61\u6E31\u6E28\u6E60\u6E71\u6E6B\u6E39\u6E22\u6E30\u6E53\u6E65\u6E27\u6E78\u6E64\u6E77\u6E55\u6E79\u6E52\u6E66\u6E35\u6E36\u6E5A\u7120\u711E\u712F\u70FB\u712E\u7131\u7123\u7125\u7122\u7132\u711F\u7128\u713A\u711B\u724B\u725A\u7288\u7289\u7286\u7285\u728B\u7312\u730B\u7330\u7322\u7331\u7333\u7327\u7332\u732D\u7326\u7323\u7335\u730C\u742E\u742C\u7430\u742B\u7416"],
        ["daa1", "\u741A\u7421\u742D\u7431\u7424\u7423\u741D\u7429\u7420\u7432\u74FB\u752F\u756F\u756C\u75E7\u75DA\u75E1\u75E6\u75DD\u75DF\u75E4\u75D7\u7695\u7692\u76DA\u7746\u7747\u7744\u774D\u7745\u774A\u774E\u774B\u774C\u77DE\u77EC\u7860\u7864\u7865\u785C\u786D\u7871\u786A\u786E\u7870\u7869\u7868\u785E\u7862\u7974\u7973\u7972\u7970\u7A02\u7A0A\u7A03\u7A0C\u7A04\u7A99\u7AE6\u7AE4\u7B4A\u7B3B\u7B44\u7B48\u7B4C\u7B4E\u7B40\u7B58\u7B45\u7CA2\u7C9E\u7CA8\u7CA1\u7D58\u7D6F\u7D63\u7D53\u7D56\u7D67\u7D6A\u7D4F\u7D6D\u7D5C\u7D6B\u7D52\u7D54\u7D69\u7D51\u7D5F\u7D4E\u7F3E\u7F3F\u7F65"],
        ["db40", "\u7F66\u7FA2\u7FA0\u7FA1\u7FD7\u8051\u804F\u8050\u80FE\u80D4\u8143\u814A\u8152\u814F\u8147\u813D\u814D\u813A\u81E6\u81EE\u81F7\u81F8\u81F9\u8204\u823C\u823D\u823F\u8275\u833B\u83CF\u83F9\u8423\u83C0\u83E8\u8412\u83E7\u83E4\u83FC\u83F6\u8410\u83C6\u83C8\u83EB\u83E3\u83BF\u8401\u83DD\u83E5\u83D8\u83FF\u83E1\u83CB\u83CE\u83D6\u83F5\u83C9\u8409\u840F\u83DE\u8411\u8406\u83C2\u83F3"],
        ["dba1", "\u83D5\u83FA\u83C7\u83D1\u83EA\u8413\u83C3\u83EC\u83EE\u83C4\u83FB\u83D7\u83E2\u841B\u83DB\u83FE\u86D8\u86E2\u86E6\u86D3\u86E3\u86DA\u86EA\u86DD\u86EB\u86DC\u86EC\u86E9\u86D7\u86E8\u86D1\u8848\u8856\u8855\u88BA\u88D7\u88B9\u88B8\u88C0\u88BE\u88B6\u88BC\u88B7\u88BD\u88B2\u8901\u88C9\u8995\u8998\u8997\u89DD\u89DA\u89DB\u8A4E\u8A4D\u8A39\u8A59\u8A40\u8A57\u8A58\u8A44\u8A45\u8A52\u8A48\u8A51\u8A4A\u8A4C\u8A4F\u8C5F\u8C81\u8C80\u8CBA\u8CBE\u8CB0\u8CB9\u8CB5\u8D84\u8D80\u8D89\u8DD8\u8DD3\u8DCD\u8DC7\u8DD6\u8DDC\u8DCF\u8DD5\u8DD9\u8DC8\u8DD7\u8DC5\u8EEF\u8EF7\u8EFA"],
        ["dc40", "\u8EF9\u8EE6\u8EEE\u8EE5\u8EF5\u8EE7\u8EE8\u8EF6\u8EEB\u8EF1\u8EEC\u8EF4\u8EE9\u902D\u9034\u902F\u9106\u912C\u9104\u90FF\u90FC\u9108\u90F9\u90FB\u9101\u9100\u9107\u9105\u9103\u9161\u9164\u915F\u9162\u9160\u9201\u920A\u9225\u9203\u921A\u9226\u920F\u920C\u9200\u9212\u91FF\u91FD\u9206\u9204\u9227\u9202\u921C\u9224\u9219\u9217\u9205\u9216\u957B\u958D\u958C\u9590\u9687\u967E\u9688"],
        ["dca1", "\u9689\u9683\u9680\u96C2\u96C8\u96C3\u96F1\u96F0\u976C\u9770\u976E\u9807\u98A9\u98EB\u9CE6\u9EF9\u4E83\u4E84\u4EB6\u50BD\u50BF\u50C6\u50AE\u50C4\u50CA\u50B4\u50C8\u50C2\u50B0\u50C1\u50BA\u50B1\u50CB\u50C9\u50B6\u50B8\u51D7\u527A\u5278\u527B\u527C\u55C3\u55DB\u55CC\u55D0\u55CB\u55CA\u55DD\u55C0\u55D4\u55C4\u55E9\u55BF\u55D2\u558D\u55CF\u55D5\u55E2\u55D6\u55C8\u55F2\u55CD\u55D9\u55C2\u5714\u5853\u5868\u5864\u584F\u584D\u5849\u586F\u5855\u584E\u585D\u5859\u5865\u585B\u583D\u5863\u5871\u58FC\u5AC7\u5AC4\u5ACB\u5ABA\u5AB8\u5AB1\u5AB5\u5AB0\u5ABF\u5AC8\u5ABB\u5AC6"],
        ["dd40", "\u5AB7\u5AC0\u5ACA\u5AB4\u5AB6\u5ACD\u5AB9\u5A90\u5BD6\u5BD8\u5BD9\u5C1F\u5C33\u5D71\u5D63\u5D4A\u5D65\u5D72\u5D6C\u5D5E\u5D68\u5D67\u5D62\u5DF0\u5E4F\u5E4E\u5E4A\u5E4D\u5E4B\u5EC5\u5ECC\u5EC6\u5ECB\u5EC7\u5F40\u5FAF\u5FAD\u60F7\u6149\u614A\u612B\u6145\u6136\u6132\u612E\u6146\u612F\u614F\u6129\u6140\u6220\u9168\u6223\u6225\u6224\u63C5\u63F1\u63EB\u6410\u6412\u6409\u6420\u6424"],
        ["dda1", "\u6433\u6443\u641F\u6415\u6418\u6439\u6437\u6422\u6423\u640C\u6426\u6430\u6428\u6441\u6435\u642F\u640A\u641A\u6440\u6425\u6427\u640B\u63E7\u641B\u642E\u6421\u640E\u656F\u6592\u65D3\u6686\u668C\u6695\u6690\u668B\u668A\u6699\u6694\u6678\u6720\u6966\u695F\u6938\u694E\u6962\u6971\u693F\u6945\u696A\u6939\u6942\u6957\u6959\u697A\u6948\u6949\u6935\u696C\u6933\u693D\u6965\u68F0\u6978\u6934\u6969\u6940\u696F\u6944\u6976\u6958\u6941\u6974\u694C\u693B\u694B\u6937\u695C\u694F\u6951\u6932\u6952\u692F\u697B\u693C\u6B46\u6B45\u6B43\u6B42\u6B48\u6B41\u6B9B\uFA0D\u6BFB\u6BFC"],
        ["de40", "\u6BF9\u6BF7\u6BF8\u6E9B\u6ED6\u6EC8\u6E8F\u6EC0\u6E9F\u6E93\u6E94\u6EA0\u6EB1\u6EB9\u6EC6\u6ED2\u6EBD\u6EC1\u6E9E\u6EC9\u6EB7\u6EB0\u6ECD\u6EA6\u6ECF\u6EB2\u6EBE\u6EC3\u6EDC\u6ED8\u6E99\u6E92\u6E8E\u6E8D\u6EA4\u6EA1\u6EBF\u6EB3\u6ED0\u6ECA\u6E97\u6EAE\u6EA3\u7147\u7154\u7152\u7163\u7160\u7141\u715D\u7162\u7172\u7178\u716A\u7161\u7142\u7158\u7143\u714B\u7170\u715F\u7150\u7153"],
        ["dea1", "\u7144\u714D\u715A\u724F\u728D\u728C\u7291\u7290\u728E\u733C\u7342\u733B\u733A\u7340\u734A\u7349\u7444\u744A\u744B\u7452\u7451\u7457\u7440\u744F\u7450\u744E\u7442\u7446\u744D\u7454\u74E1\u74FF\u74FE\u74FD\u751D\u7579\u7577\u6983\u75EF\u760F\u7603\u75F7\u75FE\u75FC\u75F9\u75F8\u7610\u75FB\u75F6\u75ED\u75F5\u75FD\u7699\u76B5\u76DD\u7755\u775F\u7760\u7752\u7756\u775A\u7769\u7767\u7754\u7759\u776D\u77E0\u7887\u789A\u7894\u788F\u7884\u7895\u7885\u7886\u78A1\u7883\u7879\u7899\u7880\u7896\u787B\u797C\u7982\u797D\u7979\u7A11\u7A18\u7A19\u7A12\u7A17\u7A15\u7A22\u7A13"],
        ["df40", "\u7A1B\u7A10\u7AA3\u7AA2\u7A9E\u7AEB\u7B66\u7B64\u7B6D\u7B74\u7B69\u7B72\u7B65\u7B73\u7B71\u7B70\u7B61\u7B78\u7B76\u7B63\u7CB2\u7CB4\u7CAF\u7D88\u7D86\u7D80\u7D8D\u7D7F\u7D85\u7D7A\u7D8E\u7D7B\u7D83\u7D7C\u7D8C\u7D94\u7D84\u7D7D\u7D92\u7F6D\u7F6B\u7F67\u7F68\u7F6C\u7FA6\u7FA5\u7FA7\u7FDB\u7FDC\u8021\u8164\u8160\u8177\u815C\u8169\u815B\u8162\u8172\u6721\u815E\u8176\u8167\u816F"],
        ["dfa1", "\u8144\u8161\u821D\u8249\u8244\u8240\u8242\u8245\u84F1\u843F\u8456\u8476\u8479\u848F\u848D\u8465\u8451\u8440\u8486\u8467\u8430\u844D\u847D\u845A\u8459\u8474\u8473\u845D\u8507\u845E\u8437\u843A\u8434\u847A\u8443\u8478\u8432\u8445\u8429\u83D9\u844B\u842F\u8442\u842D\u845F\u8470\u8439\u844E\u844C\u8452\u846F\u84C5\u848E\u843B\u8447\u8436\u8433\u8468\u847E\u8444\u842B\u8460\u8454\u846E\u8450\u870B\u8704\u86F7\u870C\u86FA\u86D6\u86F5\u874D\u86F8\u870E\u8709\u8701\u86F6\u870D\u8705\u88D6\u88CB\u88CD\u88CE\u88DE\u88DB\u88DA\u88CC\u88D0\u8985\u899B\u89DF\u89E5\u89E4"],
        ["e040", "\u89E1\u89E0\u89E2\u89DC\u89E6\u8A76\u8A86\u8A7F\u8A61\u8A3F\u8A77\u8A82\u8A84\u8A75\u8A83\u8A81\u8A74\u8A7A\u8C3C\u8C4B\u8C4A\u8C65\u8C64\u8C66\u8C86\u8C84\u8C85\u8CCC\u8D68\u8D69\u8D91\u8D8C\u8D8E\u8D8F\u8D8D\u8D93\u8D94\u8D90\u8D92\u8DF0\u8DE0\u8DEC\u8DF1\u8DEE\u8DD0\u8DE9\u8DE3\u8DE2\u8DE7\u8DF2\u8DEB\u8DF4\u8F06\u8EFF\u8F01\u8F00\u8F05\u8F07\u8F08\u8F02\u8F0B\u9052\u903F"],
        ["e0a1", "\u9044\u9049\u903D\u9110\u910D\u910F\u9111\u9116\u9114\u910B\u910E\u916E\u916F\u9248\u9252\u9230\u923A\u9266\u9233\u9265\u925E\u9283\u922E\u924A\u9246\u926D\u926C\u924F\u9260\u9267\u926F\u9236\u9261\u9270\u9231\u9254\u9263\u9250\u9272\u924E\u9253\u924C\u9256\u9232\u959F\u959C\u959E\u959B\u9692\u9693\u9691\u9697\u96CE\u96FA\u96FD\u96F8\u96F5\u9773\u9777\u9778\u9772\u980F\u980D\u980E\u98AC\u98F6\u98F9\u99AF\u99B2\u99B0\u99B5\u9AAD\u9AAB\u9B5B\u9CEA\u9CED\u9CE7\u9E80\u9EFD\u50E6\u50D4\u50D7\u50E8\u50F3\u50DB\u50EA\u50DD\u50E4\u50D3\u50EC\u50F0\u50EF\u50E3\u50E0"],
        ["e140", "\u51D8\u5280\u5281\u52E9\u52EB\u5330\u53AC\u5627\u5615\u560C\u5612\u55FC\u560F\u561C\u5601\u5613\u5602\u55FA\u561D\u5604\u55FF\u55F9\u5889\u587C\u5890\u5898\u5886\u5881\u587F\u5874\u588B\u587A\u5887\u5891\u588E\u5876\u5882\u5888\u587B\u5894\u588F\u58FE\u596B\u5ADC\u5AEE\u5AE5\u5AD5\u5AEA\u5ADA\u5AED\u5AEB\u5AF3\u5AE2\u5AE0\u5ADB\u5AEC\u5ADE\u5ADD\u5AD9\u5AE8\u5ADF\u5B77\u5BE0"],
        ["e1a1", "\u5BE3\u5C63\u5D82\u5D80\u5D7D\u5D86\u5D7A\u5D81\u5D77\u5D8A\u5D89\u5D88\u5D7E\u5D7C\u5D8D\u5D79\u5D7F\u5E58\u5E59\u5E53\u5ED8\u5ED1\u5ED7\u5ECE\u5EDC\u5ED5\u5ED9\u5ED2\u5ED4\u5F44\u5F43\u5F6F\u5FB6\u612C\u6128\u6141\u615E\u6171\u6173\u6152\u6153\u6172\u616C\u6180\u6174\u6154\u617A\u615B\u6165\u613B\u616A\u6161\u6156\u6229\u6227\u622B\u642B\u644D\u645B\u645D\u6474\u6476\u6472\u6473\u647D\u6475\u6466\u64A6\u644E\u6482\u645E\u645C\u644B\u6453\u6460\u6450\u647F\u643F\u646C\u646B\u6459\u6465\u6477\u6573\u65A0\u66A1\u66A0\u669F\u6705\u6704\u6722\u69B1\u69B6\u69C9"],
        ["e240", "\u69A0\u69CE\u6996\u69B0\u69AC\u69BC\u6991\u6999\u698E\u69A7\u698D\u69A9\u69BE\u69AF\u69BF\u69C4\u69BD\u69A4\u69D4\u69B9\u69CA\u699A\u69CF\u69B3\u6993\u69AA\u69A1\u699E\u69D9\u6997\u6990\u69C2\u69B5\u69A5\u69C6\u6B4A\u6B4D\u6B4B\u6B9E\u6B9F\u6BA0\u6BC3\u6BC4\u6BFE\u6ECE\u6EF5\u6EF1\u6F03\u6F25\u6EF8\u6F37\u6EFB\u6F2E\u6F09\u6F4E\u6F19\u6F1A\u6F27\u6F18\u6F3B\u6F12\u6EED\u6F0A"],
        ["e2a1", "\u6F36\u6F73\u6EF9\u6EEE\u6F2D\u6F40\u6F30\u6F3C\u6F35\u6EEB\u6F07\u6F0E\u6F43\u6F05\u6EFD\u6EF6\u6F39\u6F1C\u6EFC\u6F3A\u6F1F\u6F0D\u6F1E\u6F08\u6F21\u7187\u7190\u7189\u7180\u7185\u7182\u718F\u717B\u7186\u7181\u7197\u7244\u7253\u7297\u7295\u7293\u7343\u734D\u7351\u734C\u7462\u7473\u7471\u7475\u7472\u7467\u746E\u7500\u7502\u7503\u757D\u7590\u7616\u7608\u760C\u7615\u7611\u760A\u7614\u76B8\u7781\u777C\u7785\u7782\u776E\u7780\u776F\u777E\u7783\u78B2\u78AA\u78B4\u78AD\u78A8\u787E\u78AB\u789E\u78A5\u78A0\u78AC\u78A2\u78A4\u7998\u798A\u798B\u7996\u7995\u7994\u7993"],
        ["e340", "\u7997\u7988\u7992\u7990\u7A2B\u7A4A\u7A30\u7A2F\u7A28\u7A26\u7AA8\u7AAB\u7AAC\u7AEE\u7B88\u7B9C\u7B8A\u7B91\u7B90\u7B96\u7B8D\u7B8C\u7B9B\u7B8E\u7B85\u7B98\u5284\u7B99\u7BA4\u7B82\u7CBB\u7CBF\u7CBC\u7CBA\u7DA7\u7DB7\u7DC2\u7DA3\u7DAA\u7DC1\u7DC0\u7DC5\u7D9D\u7DCE\u7DC4\u7DC6\u7DCB\u7DCC\u7DAF\u7DB9\u7D96\u7DBC\u7D9F\u7DA6\u7DAE\u7DA9\u7DA1\u7DC9\u7F73\u7FE2\u7FE3\u7FE5\u7FDE"],
        ["e3a1", "\u8024\u805D\u805C\u8189\u8186\u8183\u8187\u818D\u818C\u818B\u8215\u8497\u84A4\u84A1\u849F\u84BA\u84CE\u84C2\u84AC\u84AE\u84AB\u84B9\u84B4\u84C1\u84CD\u84AA\u849A\u84B1\u84D0\u849D\u84A7\u84BB\u84A2\u8494\u84C7\u84CC\u849B\u84A9\u84AF\u84A8\u84D6\u8498\u84B6\u84CF\u84A0\u84D7\u84D4\u84D2\u84DB\u84B0\u8491\u8661\u8733\u8723\u8728\u876B\u8740\u872E\u871E\u8721\u8719\u871B\u8743\u872C\u8741\u873E\u8746\u8720\u8732\u872A\u872D\u873C\u8712\u873A\u8731\u8735\u8742\u8726\u8727\u8738\u8724\u871A\u8730\u8711\u88F7\u88E7\u88F1\u88F2\u88FA\u88FE\u88EE\u88FC\u88F6\u88FB"],
        ["e440", "\u88F0\u88EC\u88EB\u899D\u89A1\u899F\u899E\u89E9\u89EB\u89E8\u8AAB\u8A99\u8A8B\u8A92\u8A8F\u8A96\u8C3D\u8C68\u8C69\u8CD5\u8CCF\u8CD7\u8D96\u8E09\u8E02\u8DFF\u8E0D\u8DFD\u8E0A\u8E03\u8E07\u8E06\u8E05\u8DFE\u8E00\u8E04\u8F10\u8F11\u8F0E\u8F0D\u9123\u911C\u9120\u9122\u911F\u911D\u911A\u9124\u9121\u911B\u917A\u9172\u9179\u9173\u92A5\u92A4\u9276\u929B\u927A\u92A0\u9294\u92AA\u928D"],
        ["e4a1", "\u92A6\u929A\u92AB\u9279\u9297\u927F\u92A3\u92EE\u928E\u9282\u9295\u92A2\u927D\u9288\u92A1\u928A\u9286\u928C\u9299\u92A7\u927E\u9287\u92A9\u929D\u928B\u922D\u969E\u96A1\u96FF\u9758\u977D\u977A\u977E\u9783\u9780\u9782\u977B\u9784\u9781\u977F\u97CE\u97CD\u9816\u98AD\u98AE\u9902\u9900\u9907\u999D\u999C\u99C3\u99B9\u99BB\u99BA\u99C2\u99BD\u99C7\u9AB1\u9AE3\u9AE7\u9B3E\u9B3F\u9B60\u9B61\u9B5F\u9CF1\u9CF2\u9CF5\u9EA7\u50FF\u5103\u5130\u50F8\u5106\u5107\u50F6\u50FE\u510B\u510C\u50FD\u510A\u528B\u528C\u52F1\u52EF\u5648\u5642\u564C\u5635\u5641\u564A\u5649\u5646\u5658"],
        ["e540", "\u565A\u5640\u5633\u563D\u562C\u563E\u5638\u562A\u563A\u571A\u58AB\u589D\u58B1\u58A0\u58A3\u58AF\u58AC\u58A5\u58A1\u58FF\u5AFF\u5AF4\u5AFD\u5AF7\u5AF6\u5B03\u5AF8\u5B02\u5AF9\u5B01\u5B07\u5B05\u5B0F\u5C67\u5D99\u5D97\u5D9F\u5D92\u5DA2\u5D93\u5D95\u5DA0\u5D9C\u5DA1\u5D9A\u5D9E\u5E69\u5E5D\u5E60\u5E5C\u7DF3\u5EDB\u5EDE\u5EE1\u5F49\u5FB2\u618B\u6183\u6179\u61B1\u61B0\u61A2\u6189"],
        ["e5a1", "\u619B\u6193\u61AF\u61AD\u619F\u6192\u61AA\u61A1\u618D\u6166\u61B3\u622D\u646E\u6470\u6496\u64A0\u6485\u6497\u649C\u648F\u648B\u648A\u648C\u64A3\u649F\u6468\u64B1\u6498\u6576\u657A\u6579\u657B\u65B2\u65B3\u66B5\u66B0\u66A9\u66B2\u66B7\u66AA\u66AF\u6A00\u6A06\u6A17\u69E5\u69F8\u6A15\u69F1\u69E4\u6A20\u69FF\u69EC\u69E2\u6A1B\u6A1D\u69FE\u6A27\u69F2\u69EE\u6A14\u69F7\u69E7\u6A40\u6A08\u69E6\u69FB\u6A0D\u69FC\u69EB\u6A09\u6A04\u6A18\u6A25\u6A0F\u69F6\u6A26\u6A07\u69F4\u6A16\u6B51\u6BA5\u6BA3\u6BA2\u6BA6\u6C01\u6C00\u6BFF\u6C02\u6F41\u6F26\u6F7E\u6F87\u6FC6\u6F92"],
        ["e640", "\u6F8D\u6F89\u6F8C\u6F62\u6F4F\u6F85\u6F5A\u6F96\u6F76\u6F6C\u6F82\u6F55\u6F72\u6F52\u6F50\u6F57\u6F94\u6F93\u6F5D\u6F00\u6F61\u6F6B\u6F7D\u6F67\u6F90\u6F53\u6F8B\u6F69\u6F7F\u6F95\u6F63\u6F77\u6F6A\u6F7B\u71B2\u71AF\u719B\u71B0\u71A0\u719A\u71A9\u71B5\u719D\u71A5\u719E\u71A4\u71A1\u71AA\u719C\u71A7\u71B3\u7298\u729A\u7358\u7352\u735E\u735F\u7360\u735D\u735B\u7361\u735A\u7359"],
        ["e6a1", "\u7362\u7487\u7489\u748A\u7486\u7481\u747D\u7485\u7488\u747C\u7479\u7508\u7507\u757E\u7625\u761E\u7619\u761D\u761C\u7623\u761A\u7628\u761B\u769C\u769D\u769E\u769B\u778D\u778F\u7789\u7788\u78CD\u78BB\u78CF\u78CC\u78D1\u78CE\u78D4\u78C8\u78C3\u78C4\u78C9\u799A\u79A1\u79A0\u799C\u79A2\u799B\u6B76\u7A39\u7AB2\u7AB4\u7AB3\u7BB7\u7BCB\u7BBE\u7BAC\u7BCE\u7BAF\u7BB9\u7BCA\u7BB5\u7CC5\u7CC8\u7CCC\u7CCB\u7DF7\u7DDB\u7DEA\u7DE7\u7DD7\u7DE1\u7E03\u7DFA\u7DE6\u7DF6\u7DF1\u7DF0\u7DEE\u7DDF\u7F76\u7FAC\u7FB0\u7FAD\u7FED\u7FEB\u7FEA\u7FEC\u7FE6\u7FE8\u8064\u8067\u81A3\u819F"],
        ["e740", "\u819E\u8195\u81A2\u8199\u8197\u8216\u824F\u8253\u8252\u8250\u824E\u8251\u8524\u853B\u850F\u8500\u8529\u850E\u8509\u850D\u851F\u850A\u8527\u851C\u84FB\u852B\u84FA\u8508\u850C\u84F4\u852A\u84F2\u8515\u84F7\u84EB\u84F3\u84FC\u8512\u84EA\u84E9\u8516\u84FE\u8528\u851D\u852E\u8502\u84FD\u851E\u84F6\u8531\u8526\u84E7\u84E8\u84F0\u84EF\u84F9\u8518\u8520\u8530\u850B\u8519\u852F\u8662"],
        ["e7a1", "\u8756\u8763\u8764\u8777\u87E1\u8773\u8758\u8754\u875B\u8752\u8761\u875A\u8751\u875E\u876D\u876A\u8750\u874E\u875F\u875D\u876F\u876C\u877A\u876E\u875C\u8765\u874F\u877B\u8775\u8762\u8767\u8769\u885A\u8905\u890C\u8914\u890B\u8917\u8918\u8919\u8906\u8916\u8911\u890E\u8909\u89A2\u89A4\u89A3\u89ED\u89F0\u89EC\u8ACF\u8AC6\u8AB8\u8AD3\u8AD1\u8AD4\u8AD5\u8ABB\u8AD7\u8ABE\u8AC0\u8AC5\u8AD8\u8AC3\u8ABA\u8ABD\u8AD9\u8C3E\u8C4D\u8C8F\u8CE5\u8CDF\u8CD9\u8CE8\u8CDA\u8CDD\u8CE7\u8DA0\u8D9C\u8DA1\u8D9B\u8E20\u8E23\u8E25\u8E24\u8E2E\u8E15\u8E1B\u8E16\u8E11\u8E19\u8E26\u8E27"],
        ["e840", "\u8E14\u8E12\u8E18\u8E13\u8E1C\u8E17\u8E1A\u8F2C\u8F24\u8F18\u8F1A\u8F20\u8F23\u8F16\u8F17\u9073\u9070\u906F\u9067\u906B\u912F\u912B\u9129\u912A\u9132\u9126\u912E\u9185\u9186\u918A\u9181\u9182\u9184\u9180\u92D0\u92C3\u92C4\u92C0\u92D9\u92B6\u92CF\u92F1\u92DF\u92D8\u92E9\u92D7\u92DD\u92CC\u92EF\u92C2\u92E8\u92CA\u92C8\u92CE\u92E6\u92CD\u92D5\u92C9\u92E0\u92DE\u92E7\u92D1\u92D3"],
        ["e8a1", "\u92B5\u92E1\u92C6\u92B4\u957C\u95AC\u95AB\u95AE\u95B0\u96A4\u96A2\u96D3\u9705\u9708\u9702\u975A\u978A\u978E\u9788\u97D0\u97CF\u981E\u981D\u9826\u9829\u9828\u9820\u981B\u9827\u98B2\u9908\u98FA\u9911\u9914\u9916\u9917\u9915\u99DC\u99CD\u99CF\u99D3\u99D4\u99CE\u99C9\u99D6\u99D8\u99CB\u99D7\u99CC\u9AB3\u9AEC\u9AEB\u9AF3\u9AF2\u9AF1\u9B46\u9B43\u9B67\u9B74\u9B71\u9B66\u9B76\u9B75\u9B70\u9B68\u9B64\u9B6C\u9CFC\u9CFA\u9CFD\u9CFF\u9CF7\u9D07\u9D00\u9CF9\u9CFB\u9D08\u9D05\u9D04\u9E83\u9ED3\u9F0F\u9F10\u511C\u5113\u5117\u511A\u5111\u51DE\u5334\u53E1\u5670\u5660\u566E"],
        ["e940", "\u5673\u5666\u5663\u566D\u5672\u565E\u5677\u571C\u571B\u58C8\u58BD\u58C9\u58BF\u58BA\u58C2\u58BC\u58C6\u5B17\u5B19\u5B1B\u5B21\u5B14\u5B13\u5B10\u5B16\u5B28\u5B1A\u5B20\u5B1E\u5BEF\u5DAC\u5DB1\u5DA9\u5DA7\u5DB5\u5DB0\u5DAE\u5DAA\u5DA8\u5DB2\u5DAD\u5DAF\u5DB4\u5E67\u5E68\u5E66\u5E6F\u5EE9\u5EE7\u5EE6\u5EE8\u5EE5\u5F4B\u5FBC\u619D\u61A8\u6196\u61C5\u61B4\u61C6\u61C1\u61CC\u61BA"],
        ["e9a1", "\u61BF\u61B8\u618C\u64D7\u64D6\u64D0\u64CF\u64C9\u64BD\u6489\u64C3\u64DB\u64F3\u64D9\u6533\u657F\u657C\u65A2\u66C8\u66BE\u66C0\u66CA\u66CB\u66CF\u66BD\u66BB\u66BA\u66CC\u6723\u6A34\u6A66\u6A49\u6A67\u6A32\u6A68\u6A3E\u6A5D\u6A6D\u6A76\u6A5B\u6A51\u6A28\u6A5A\u6A3B\u6A3F\u6A41\u6A6A\u6A64\u6A50\u6A4F\u6A54\u6A6F\u6A69\u6A60\u6A3C\u6A5E\u6A56\u6A55\u6A4D\u6A4E\u6A46\u6B55\u6B54\u6B56\u6BA7\u6BAA\u6BAB\u6BC8\u6BC7\u6C04\u6C03\u6C06\u6FAD\u6FCB\u6FA3\u6FC7\u6FBC\u6FCE\u6FC8\u6F5E\u6FC4\u6FBD\u6F9E\u6FCA\u6FA8\u7004\u6FA5\u6FAE\u6FBA\u6FAC\u6FAA\u6FCF\u6FBF\u6FB8"],
        ["ea40", "\u6FA2\u6FC9\u6FAB\u6FCD\u6FAF\u6FB2\u6FB0\u71C5\u71C2\u71BF\u71B8\u71D6\u71C0\u71C1\u71CB\u71D4\u71CA\u71C7\u71CF\u71BD\u71D8\u71BC\u71C6\u71DA\u71DB\u729D\u729E\u7369\u7366\u7367\u736C\u7365\u736B\u736A\u747F\u749A\u74A0\u7494\u7492\u7495\u74A1\u750B\u7580\u762F\u762D\u7631\u763D\u7633\u763C\u7635\u7632\u7630\u76BB\u76E6\u779A\u779D\u77A1\u779C\u779B\u77A2\u77A3\u7795\u7799"],
        ["eaa1", "\u7797\u78DD\u78E9\u78E5\u78EA\u78DE\u78E3\u78DB\u78E1\u78E2\u78ED\u78DF\u78E0\u79A4\u7A44\u7A48\u7A47\u7AB6\u7AB8\u7AB5\u7AB1\u7AB7\u7BDE\u7BE3\u7BE7\u7BDD\u7BD5\u7BE5\u7BDA\u7BE8\u7BF9\u7BD4\u7BEA\u7BE2\u7BDC\u7BEB\u7BD8\u7BDF\u7CD2\u7CD4\u7CD7\u7CD0\u7CD1\u7E12\u7E21\u7E17\u7E0C\u7E1F\u7E20\u7E13\u7E0E\u7E1C\u7E15\u7E1A\u7E22\u7E0B\u7E0F\u7E16\u7E0D\u7E14\u7E25\u7E24\u7F43\u7F7B\u7F7C\u7F7A\u7FB1\u7FEF\u802A\u8029\u806C\u81B1\u81A6\u81AE\u81B9\u81B5\u81AB\u81B0\u81AC\u81B4\u81B2\u81B7\u81A7\u81F2\u8255\u8256\u8257\u8556\u8545\u856B\u854D\u8553\u8561\u8558"],
        ["eb40", "\u8540\u8546\u8564\u8541\u8562\u8544\u8551\u8547\u8563\u853E\u855B\u8571\u854E\u856E\u8575\u8555\u8567\u8560\u858C\u8566\u855D\u8554\u8565\u856C\u8663\u8665\u8664\u879B\u878F\u8797\u8793\u8792\u8788\u8781\u8796\u8798\u8779\u8787\u87A3\u8785\u8790\u8791\u879D\u8784\u8794\u879C\u879A\u8789\u891E\u8926\u8930\u892D\u892E\u8927\u8931\u8922\u8929\u8923\u892F\u892C\u891F\u89F1\u8AE0"],
        ["eba1", "\u8AE2\u8AF2\u8AF4\u8AF5\u8ADD\u8B14\u8AE4\u8ADF\u8AF0\u8AC8\u8ADE\u8AE1\u8AE8\u8AFF\u8AEF\u8AFB\u8C91\u8C92\u8C90\u8CF5\u8CEE\u8CF1\u8CF0\u8CF3\u8D6C\u8D6E\u8DA5\u8DA7\u8E33\u8E3E\u8E38\u8E40\u8E45\u8E36\u8E3C\u8E3D\u8E41\u8E30\u8E3F\u8EBD\u8F36\u8F2E\u8F35\u8F32\u8F39\u8F37\u8F34\u9076\u9079\u907B\u9086\u90FA\u9133\u9135\u9136\u9193\u9190\u9191\u918D\u918F\u9327\u931E\u9308\u931F\u9306\u930F\u937A\u9338\u933C\u931B\u9323\u9312\u9301\u9346\u932D\u930E\u930D\u92CB\u931D\u92FA\u9325\u9313\u92F9\u92F7\u9334\u9302\u9324\u92FF\u9329\u9339\u9335\u932A\u9314\u930C"],
        ["ec40", "\u930B\u92FE\u9309\u9300\u92FB\u9316\u95BC\u95CD\u95BE\u95B9\u95BA\u95B6\u95BF\u95B5\u95BD\u96A9\u96D4\u970B\u9712\u9710\u9799\u9797\u9794\u97F0\u97F8\u9835\u982F\u9832\u9924\u991F\u9927\u9929\u999E\u99EE\u99EC\u99E5\u99E4\u99F0\u99E3\u99EA\u99E9\u99E7\u9AB9\u9ABF\u9AB4\u9ABB\u9AF6\u9AFA\u9AF9\u9AF7\u9B33\u9B80\u9B85\u9B87\u9B7C\u9B7E\u9B7B\u9B82\u9B93\u9B92\u9B90\u9B7A\u9B95"],
        ["eca1", "\u9B7D\u9B88\u9D25\u9D17\u9D20\u9D1E\u9D14\u9D29\u9D1D\u9D18\u9D22\u9D10\u9D19\u9D1F\u9E88\u9E86\u9E87\u9EAE\u9EAD\u9ED5\u9ED6\u9EFA\u9F12\u9F3D\u5126\u5125\u5122\u5124\u5120\u5129\u52F4\u5693\u568C\u568D\u5686\u5684\u5683\u567E\u5682\u567F\u5681\u58D6\u58D4\u58CF\u58D2\u5B2D\u5B25\u5B32\u5B23\u5B2C\u5B27\u5B26\u5B2F\u5B2E\u5B7B\u5BF1\u5BF2\u5DB7\u5E6C\u5E6A\u5FBE\u5FBB\u61C3\u61B5\u61BC\u61E7\u61E0\u61E5\u61E4\u61E8\u61DE\u64EF\u64E9\u64E3\u64EB\u64E4\u64E8\u6581\u6580\u65B6\u65DA\u66D2\u6A8D\u6A96\u6A81\u6AA5\u6A89\u6A9F\u6A9B\u6AA1\u6A9E\u6A87\u6A93\u6A8E"],
        ["ed40", "\u6A95\u6A83\u6AA8\u6AA4\u6A91\u6A7F\u6AA6\u6A9A\u6A85\u6A8C\u6A92\u6B5B\u6BAD\u6C09\u6FCC\u6FA9\u6FF4\u6FD4\u6FE3\u6FDC\u6FED\u6FE7\u6FE6\u6FDE\u6FF2\u6FDD\u6FE2\u6FE8\u71E1\u71F1\u71E8\u71F2\u71E4\u71F0\u71E2\u7373\u736E\u736F\u7497\u74B2\u74AB\u7490\u74AA\u74AD\u74B1\u74A5\u74AF\u7510\u7511\u7512\u750F\u7584\u7643\u7648\u7649\u7647\u76A4\u76E9\u77B5\u77AB\u77B2\u77B7\u77B6"],
        ["eda1", "\u77B4\u77B1\u77A8\u77F0\u78F3\u78FD\u7902\u78FB\u78FC\u78F2\u7905\u78F9\u78FE\u7904\u79AB\u79A8\u7A5C\u7A5B\u7A56\u7A58\u7A54\u7A5A\u7ABE\u7AC0\u7AC1\u7C05\u7C0F\u7BF2\u7C00\u7BFF\u7BFB\u7C0E\u7BF4\u7C0B\u7BF3\u7C02\u7C09\u7C03\u7C01\u7BF8\u7BFD\u7C06\u7BF0\u7BF1\u7C10\u7C0A\u7CE8\u7E2D\u7E3C\u7E42\u7E33\u9848\u7E38\u7E2A\u7E49\u7E40\u7E47\u7E29\u7E4C\u7E30\u7E3B\u7E36\u7E44\u7E3A\u7F45\u7F7F\u7F7E\u7F7D\u7FF4\u7FF2\u802C\u81BB\u81C4\u81CC\u81CA\u81C5\u81C7\u81BC\u81E9\u825B\u825A\u825C\u8583\u8580\u858F\u85A7\u8595\u85A0\u858B\u85A3\u857B\u85A4\u859A\u859E"],
        ["ee40", "\u8577\u857C\u8589\u85A1\u857A\u8578\u8557\u858E\u8596\u8586\u858D\u8599\u859D\u8581\u85A2\u8582\u8588\u8585\u8579\u8576\u8598\u8590\u859F\u8668\u87BE\u87AA\u87AD\u87C5\u87B0\u87AC\u87B9\u87B5\u87BC\u87AE\u87C9\u87C3\u87C2\u87CC\u87B7\u87AF\u87C4\u87CA\u87B4\u87B6\u87BF\u87B8\u87BD\u87DE\u87B2\u8935\u8933\u893C\u893E\u8941\u8952\u8937\u8942\u89AD\u89AF\u89AE\u89F2\u89F3\u8B1E"],
        ["eea1", "\u8B18\u8B16\u8B11\u8B05\u8B0B\u8B22\u8B0F\u8B12\u8B15\u8B07\u8B0D\u8B08\u8B06\u8B1C\u8B13\u8B1A\u8C4F\u8C70\u8C72\u8C71\u8C6F\u8C95\u8C94\u8CF9\u8D6F\u8E4E\u8E4D\u8E53\u8E50\u8E4C\u8E47\u8F43\u8F40\u9085\u907E\u9138\u919A\u91A2\u919B\u9199\u919F\u91A1\u919D\u91A0\u93A1\u9383\u93AF\u9364\u9356\u9347\u937C\u9358\u935C\u9376\u9349\u9350\u9351\u9360\u936D\u938F\u934C\u936A\u9379\u9357\u9355\u9352\u934F\u9371\u9377\u937B\u9361\u935E\u9363\u9367\u9380\u934E\u9359\u95C7\u95C0\u95C9\u95C3\u95C5\u95B7\u96AE\u96B0\u96AC\u9720\u971F\u9718\u971D\u9719\u979A\u97A1\u979C"],
        ["ef40", "\u979E\u979D\u97D5\u97D4\u97F1\u9841\u9844\u984A\u9849\u9845\u9843\u9925\u992B\u992C\u992A\u9933\u9932\u992F\u992D\u9931\u9930\u9998\u99A3\u99A1\u9A02\u99FA\u99F4\u99F7\u99F9\u99F8\u99F6\u99FB\u99FD\u99FE\u99FC\u9A03\u9ABE\u9AFE\u9AFD\u9B01\u9AFC\u9B48\u9B9A\u9BA8\u9B9E\u9B9B\u9BA6\u9BA1\u9BA5\u9BA4\u9B86\u9BA2\u9BA0\u9BAF\u9D33\u9D41\u9D67\u9D36\u9D2E\u9D2F\u9D31\u9D38\u9D30"],
        ["efa1", "\u9D45\u9D42\u9D43\u9D3E\u9D37\u9D40\u9D3D\u7FF5\u9D2D\u9E8A\u9E89\u9E8D\u9EB0\u9EC8\u9EDA\u9EFB\u9EFF\u9F24\u9F23\u9F22\u9F54\u9FA0\u5131\u512D\u512E\u5698\u569C\u5697\u569A\u569D\u5699\u5970\u5B3C\u5C69\u5C6A\u5DC0\u5E6D\u5E6E\u61D8\u61DF\u61ED\u61EE\u61F1\u61EA\u61F0\u61EB\u61D6\u61E9\u64FF\u6504\u64FD\u64F8\u6501\u6503\u64FC\u6594\u65DB\u66DA\u66DB\u66D8\u6AC5\u6AB9\u6ABD\u6AE1\u6AC6\u6ABA\u6AB6\u6AB7\u6AC7\u6AB4\u6AAD\u6B5E\u6BC9\u6C0B\u7007\u700C\u700D\u7001\u7005\u7014\u700E\u6FFF\u7000\u6FFB\u7026\u6FFC\u6FF7\u700A\u7201\u71FF\u71F9\u7203\u71FD\u7376"],
        ["f040", "\u74B8\u74C0\u74B5\u74C1\u74BE\u74B6\u74BB\u74C2\u7514\u7513\u765C\u7664\u7659\u7650\u7653\u7657\u765A\u76A6\u76BD\u76EC\u77C2\u77BA\u78FF\u790C\u7913\u7914\u7909\u7910\u7912\u7911\u79AD\u79AC\u7A5F\u7C1C\u7C29\u7C19\u7C20\u7C1F\u7C2D\u7C1D\u7C26\u7C28\u7C22\u7C25\u7C30\u7E5C\u7E50\u7E56\u7E63\u7E58\u7E62\u7E5F\u7E51\u7E60\u7E57\u7E53\u7FB5\u7FB3\u7FF7\u7FF8\u8075\u81D1\u81D2"],
        ["f0a1", "\u81D0\u825F\u825E\u85B4\u85C6\u85C0\u85C3\u85C2\u85B3\u85B5\u85BD\u85C7\u85C4\u85BF\u85CB\u85CE\u85C8\u85C5\u85B1\u85B6\u85D2\u8624\u85B8\u85B7\u85BE\u8669\u87E7\u87E6\u87E2\u87DB\u87EB\u87EA\u87E5\u87DF\u87F3\u87E4\u87D4\u87DC\u87D3\u87ED\u87D8\u87E3\u87A4\u87D7\u87D9\u8801\u87F4\u87E8\u87DD\u8953\u894B\u894F\u894C\u8946\u8950\u8951\u8949\u8B2A\u8B27\u8B23\u8B33\u8B30\u8B35\u8B47\u8B2F\u8B3C\u8B3E\u8B31\u8B25\u8B37\u8B26\u8B36\u8B2E\u8B24\u8B3B\u8B3D\u8B3A\u8C42\u8C75\u8C99\u8C98\u8C97\u8CFE\u8D04\u8D02\u8D00\u8E5C\u8E62\u8E60\u8E57\u8E56\u8E5E\u8E65\u8E67"],
        ["f140", "\u8E5B\u8E5A\u8E61\u8E5D\u8E69\u8E54\u8F46\u8F47\u8F48\u8F4B\u9128\u913A\u913B\u913E\u91A8\u91A5\u91A7\u91AF\u91AA\u93B5\u938C\u9392\u93B7\u939B\u939D\u9389\u93A7\u938E\u93AA\u939E\u93A6\u9395\u9388\u9399\u939F\u938D\u93B1\u9391\u93B2\u93A4\u93A8\u93B4\u93A3\u93A5\u95D2\u95D3\u95D1\u96B3\u96D7\u96DA\u5DC2\u96DF\u96D8\u96DD\u9723\u9722\u9725\u97AC\u97AE\u97A8\u97AB\u97A4\u97AA"],
        ["f1a1", "\u97A2\u97A5\u97D7\u97D9\u97D6\u97D8\u97FA\u9850\u9851\u9852\u98B8\u9941\u993C\u993A\u9A0F\u9A0B\u9A09\u9A0D\u9A04\u9A11\u9A0A\u9A05\u9A07\u9A06\u9AC0\u9ADC\u9B08\u9B04\u9B05\u9B29\u9B35\u9B4A\u9B4C\u9B4B\u9BC7\u9BC6\u9BC3\u9BBF\u9BC1\u9BB5\u9BB8\u9BD3\u9BB6\u9BC4\u9BB9\u9BBD\u9D5C\u9D53\u9D4F\u9D4A\u9D5B\u9D4B\u9D59\u9D56\u9D4C\u9D57\u9D52\u9D54\u9D5F\u9D58\u9D5A\u9E8E\u9E8C\u9EDF\u9F01\u9F00\u9F16\u9F25\u9F2B\u9F2A\u9F29\u9F28\u9F4C\u9F55\u5134\u5135\u5296\u52F7\u53B4\u56AB\u56AD\u56A6\u56A7\u56AA\u56AC\u58DA\u58DD\u58DB\u5912\u5B3D\u5B3E\u5B3F\u5DC3\u5E70"],
        ["f240", "\u5FBF\u61FB\u6507\u6510\u650D\u6509\u650C\u650E\u6584\u65DE\u65DD\u66DE\u6AE7\u6AE0\u6ACC\u6AD1\u6AD9\u6ACB\u6ADF\u6ADC\u6AD0\u6AEB\u6ACF\u6ACD\u6ADE\u6B60\u6BB0\u6C0C\u7019\u7027\u7020\u7016\u702B\u7021\u7022\u7023\u7029\u7017\u7024\u701C\u702A\u720C\u720A\u7207\u7202\u7205\u72A5\u72A6\u72A4\u72A3\u72A1\u74CB\u74C5\u74B7\u74C3\u7516\u7660\u77C9\u77CA\u77C4\u77F1\u791D\u791B"],
        ["f2a1", "\u7921\u791C\u7917\u791E\u79B0\u7A67\u7A68\u7C33\u7C3C\u7C39\u7C2C\u7C3B\u7CEC\u7CEA\u7E76\u7E75\u7E78\u7E70\u7E77\u7E6F\u7E7A\u7E72\u7E74\u7E68\u7F4B\u7F4A\u7F83\u7F86\u7FB7\u7FFD\u7FFE\u8078\u81D7\u81D5\u8264\u8261\u8263\u85EB\u85F1\u85ED\u85D9\u85E1\u85E8\u85DA\u85D7\u85EC\u85F2\u85F8\u85D8\u85DF\u85E3\u85DC\u85D1\u85F0\u85E6\u85EF\u85DE\u85E2\u8800\u87FA\u8803\u87F6\u87F7\u8809\u880C\u880B\u8806\u87FC\u8808\u87FF\u880A\u8802\u8962\u895A\u895B\u8957\u8961\u895C\u8958\u895D\u8959\u8988\u89B7\u89B6\u89F6\u8B50\u8B48\u8B4A\u8B40\u8B53\u8B56\u8B54\u8B4B\u8B55"],
        ["f340", "\u8B51\u8B42\u8B52\u8B57\u8C43\u8C77\u8C76\u8C9A\u8D06\u8D07\u8D09\u8DAC\u8DAA\u8DAD\u8DAB\u8E6D\u8E78\u8E73\u8E6A\u8E6F\u8E7B\u8EC2\u8F52\u8F51\u8F4F\u8F50\u8F53\u8FB4\u9140\u913F\u91B0\u91AD\u93DE\u93C7\u93CF\u93C2\u93DA\u93D0\u93F9\u93EC\u93CC\u93D9\u93A9\u93E6\u93CA\u93D4\u93EE\u93E3\u93D5\u93C4\u93CE\u93C0\u93D2\u93E7\u957D\u95DA\u95DB\u96E1\u9729\u972B\u972C\u9728\u9726"],
        ["f3a1", "\u97B3\u97B7\u97B6\u97DD\u97DE\u97DF\u985C\u9859\u985D\u9857\u98BF\u98BD\u98BB\u98BE\u9948\u9947\u9943\u99A6\u99A7\u9A1A\u9A15\u9A25\u9A1D\u9A24\u9A1B\u9A22\u9A20\u9A27\u9A23\u9A1E\u9A1C\u9A14\u9AC2\u9B0B\u9B0A\u9B0E\u9B0C\u9B37\u9BEA\u9BEB\u9BE0\u9BDE\u9BE4\u9BE6\u9BE2\u9BF0\u9BD4\u9BD7\u9BEC\u9BDC\u9BD9\u9BE5\u9BD5\u9BE1\u9BDA\u9D77\u9D81\u9D8A\u9D84\u9D88\u9D71\u9D80\u9D78\u9D86\u9D8B\u9D8C\u9D7D\u9D6B\u9D74\u9D75\u9D70\u9D69\u9D85\u9D73\u9D7B\u9D82\u9D6F\u9D79\u9D7F\u9D87\u9D68\u9E94\u9E91\u9EC0\u9EFC\u9F2D\u9F40\u9F41\u9F4D\u9F56\u9F57\u9F58\u5337\u56B2"],
        ["f440", "\u56B5\u56B3\u58E3\u5B45\u5DC6\u5DC7\u5EEE\u5EEF\u5FC0\u5FC1\u61F9\u6517\u6516\u6515\u6513\u65DF\u66E8\u66E3\u66E4\u6AF3\u6AF0\u6AEA\u6AE8\u6AF9\u6AF1\u6AEE\u6AEF\u703C\u7035\u702F\u7037\u7034\u7031\u7042\u7038\u703F\u703A\u7039\u7040\u703B\u7033\u7041\u7213\u7214\u72A8\u737D\u737C\u74BA\u76AB\u76AA\u76BE\u76ED\u77CC\u77CE\u77CF\u77CD\u77F2\u7925\u7923\u7927\u7928\u7924\u7929"],
        ["f4a1", "\u79B2\u7A6E\u7A6C\u7A6D\u7AF7\u7C49\u7C48\u7C4A\u7C47\u7C45\u7CEE\u7E7B\u7E7E\u7E81\u7E80\u7FBA\u7FFF\u8079\u81DB\u81D9\u820B\u8268\u8269\u8622\u85FF\u8601\u85FE\u861B\u8600\u85F6\u8604\u8609\u8605\u860C\u85FD\u8819\u8810\u8811\u8817\u8813\u8816\u8963\u8966\u89B9\u89F7\u8B60\u8B6A\u8B5D\u8B68\u8B63\u8B65\u8B67\u8B6D\u8DAE\u8E86\u8E88\u8E84\u8F59\u8F56\u8F57\u8F55\u8F58\u8F5A\u908D\u9143\u9141\u91B7\u91B5\u91B2\u91B3\u940B\u9413\u93FB\u9420\u940F\u9414\u93FE\u9415\u9410\u9428\u9419\u940D\u93F5\u9400\u93F7\u9407\u940E\u9416\u9412\u93FA\u9409\u93F8\u940A\u93FF"],
        ["f540", "\u93FC\u940C\u93F6\u9411\u9406\u95DE\u95E0\u95DF\u972E\u972F\u97B9\u97BB\u97FD\u97FE\u9860\u9862\u9863\u985F\u98C1\u98C2\u9950\u994E\u9959\u994C\u994B\u9953\u9A32\u9A34\u9A31\u9A2C\u9A2A\u9A36\u9A29\u9A2E\u9A38\u9A2D\u9AC7\u9ACA\u9AC6\u9B10\u9B12\u9B11\u9C0B\u9C08\u9BF7\u9C05\u9C12\u9BF8\u9C40\u9C07\u9C0E\u9C06\u9C17\u9C14\u9C09\u9D9F\u9D99\u9DA4\u9D9D\u9D92\u9D98\u9D90\u9D9B"],
        ["f5a1", "\u9DA0\u9D94\u9D9C\u9DAA\u9D97\u9DA1\u9D9A\u9DA2\u9DA8\u9D9E\u9DA3\u9DBF\u9DA9\u9D96\u9DA6\u9DA7\u9E99\u9E9B\u9E9A\u9EE5\u9EE4\u9EE7\u9EE6\u9F30\u9F2E\u9F5B\u9F60\u9F5E\u9F5D\u9F59\u9F91\u513A\u5139\u5298\u5297\u56C3\u56BD\u56BE\u5B48\u5B47\u5DCB\u5DCF\u5EF1\u61FD\u651B\u6B02\u6AFC\u6B03\u6AF8\u6B00\u7043\u7044\u704A\u7048\u7049\u7045\u7046\u721D\u721A\u7219\u737E\u7517\u766A\u77D0\u792D\u7931\u792F\u7C54\u7C53\u7CF2\u7E8A\u7E87\u7E88\u7E8B\u7E86\u7E8D\u7F4D\u7FBB\u8030\u81DD\u8618\u862A\u8626\u861F\u8623\u861C\u8619\u8627\u862E\u8621\u8620\u8629\u861E\u8625"],
        ["f640", "\u8829\u881D\u881B\u8820\u8824\u881C\u882B\u884A\u896D\u8969\u896E\u896B\u89FA\u8B79\u8B78\u8B45\u8B7A\u8B7B\u8D10\u8D14\u8DAF\u8E8E\u8E8C\u8F5E\u8F5B\u8F5D\u9146\u9144\u9145\u91B9\u943F\u943B\u9436\u9429\u943D\u943C\u9430\u9439\u942A\u9437\u942C\u9440\u9431\u95E5\u95E4\u95E3\u9735\u973A\u97BF\u97E1\u9864\u98C9\u98C6\u98C0\u9958\u9956\u9A39\u9A3D\u9A46\u9A44\u9A42\u9A41\u9A3A"],
        ["f6a1", "\u9A3F\u9ACD\u9B15\u9B17\u9B18\u9B16\u9B3A\u9B52\u9C2B\u9C1D\u9C1C\u9C2C\u9C23\u9C28\u9C29\u9C24\u9C21\u9DB7\u9DB6\u9DBC\u9DC1\u9DC7\u9DCA\u9DCF\u9DBE\u9DC5\u9DC3\u9DBB\u9DB5\u9DCE\u9DB9\u9DBA\u9DAC\u9DC8\u9DB1\u9DAD\u9DCC\u9DB3\u9DCD\u9DB2\u9E7A\u9E9C\u9EEB\u9EEE\u9EED\u9F1B\u9F18\u9F1A\u9F31\u9F4E\u9F65\u9F64\u9F92\u4EB9\u56C6\u56C5\u56CB\u5971\u5B4B\u5B4C\u5DD5\u5DD1\u5EF2\u6521\u6520\u6526\u6522\u6B0B\u6B08\u6B09\u6C0D\u7055\u7056\u7057\u7052\u721E\u721F\u72A9\u737F\u74D8\u74D5\u74D9\u74D7\u766D\u76AD\u7935\u79B4\u7A70\u7A71\u7C57\u7C5C\u7C59\u7C5B\u7C5A"],
        ["f740", "\u7CF4\u7CF1\u7E91\u7F4F\u7F87\u81DE\u826B\u8634\u8635\u8633\u862C\u8632\u8636\u882C\u8828\u8826\u882A\u8825\u8971\u89BF\u89BE\u89FB\u8B7E\u8B84\u8B82\u8B86\u8B85\u8B7F\u8D15\u8E95\u8E94\u8E9A\u8E92\u8E90\u8E96\u8E97\u8F60\u8F62\u9147\u944C\u9450\u944A\u944B\u944F\u9447\u9445\u9448\u9449\u9446\u973F\u97E3\u986A\u9869\u98CB\u9954\u995B\u9A4E\u9A53\u9A54\u9A4C\u9A4F\u9A48\u9A4A"],
        ["f7a1", "\u9A49\u9A52\u9A50\u9AD0\u9B19\u9B2B\u9B3B\u9B56\u9B55\u9C46\u9C48\u9C3F\u9C44\u9C39\u9C33\u9C41\u9C3C\u9C37\u9C34\u9C32\u9C3D\u9C36\u9DDB\u9DD2\u9DDE\u9DDA\u9DCB\u9DD0\u9DDC\u9DD1\u9DDF\u9DE9\u9DD9\u9DD8\u9DD6\u9DF5\u9DD5\u9DDD\u9EB6\u9EF0\u9F35\u9F33\u9F32\u9F42\u9F6B\u9F95\u9FA2\u513D\u5299\u58E8\u58E7\u5972\u5B4D\u5DD8\u882F\u5F4F\u6201\u6203\u6204\u6529\u6525\u6596\u66EB\u6B11\u6B12\u6B0F\u6BCA\u705B\u705A\u7222\u7382\u7381\u7383\u7670\u77D4\u7C67\u7C66\u7E95\u826C\u863A\u8640\u8639\u863C\u8631\u863B\u863E\u8830\u8832\u882E\u8833\u8976\u8974\u8973\u89FE"],
        ["f840", "\u8B8C\u8B8E\u8B8B\u8B88\u8C45\u8D19\u8E98\u8F64\u8F63\u91BC\u9462\u9455\u945D\u9457\u945E\u97C4\u97C5\u9800\u9A56\u9A59\u9B1E\u9B1F\u9B20\u9C52\u9C58\u9C50\u9C4A\u9C4D\u9C4B\u9C55\u9C59\u9C4C\u9C4E\u9DFB\u9DF7\u9DEF\u9DE3\u9DEB\u9DF8\u9DE4\u9DF6\u9DE1\u9DEE\u9DE6\u9DF2\u9DF0\u9DE2\u9DEC\u9DF4\u9DF3\u9DE8\u9DED\u9EC2\u9ED0\u9EF2\u9EF3\u9F06\u9F1C\u9F38\u9F37\u9F36\u9F43\u9F4F"],
        ["f8a1", "\u9F71\u9F70\u9F6E\u9F6F\u56D3\u56CD\u5B4E\u5C6D\u652D\u66ED\u66EE\u6B13\u705F\u7061\u705D\u7060\u7223\u74DB\u74E5\u77D5\u7938\u79B7\u79B6\u7C6A\u7E97\u7F89\u826D\u8643\u8838\u8837\u8835\u884B\u8B94\u8B95\u8E9E\u8E9F\u8EA0\u8E9D\u91BE\u91BD\u91C2\u946B\u9468\u9469\u96E5\u9746\u9743\u9747\u97C7\u97E5\u9A5E\u9AD5\u9B59\u9C63\u9C67\u9C66\u9C62\u9C5E\u9C60\u9E02\u9DFE\u9E07\u9E03\u9E06\u9E05\u9E00\u9E01\u9E09\u9DFF\u9DFD\u9E04\u9EA0\u9F1E\u9F46\u9F74\u9F75\u9F76\u56D4\u652E\u65B8\u6B18\u6B19\u6B17\u6B1A\u7062\u7226\u72AA\u77D8\u77D9\u7939\u7C69\u7C6B\u7CF6\u7E9A"],
        ["f940", "\u7E98\u7E9B\u7E99\u81E0\u81E1\u8646\u8647\u8648\u8979\u897A\u897C\u897B\u89FF\u8B98\u8B99\u8EA5\u8EA4\u8EA3\u946E\u946D\u946F\u9471\u9473\u9749\u9872\u995F\u9C68\u9C6E\u9C6D\u9E0B\u9E0D\u9E10\u9E0F\u9E12\u9E11\u9EA1\u9EF5\u9F09\u9F47\u9F78\u9F7B\u9F7A\u9F79\u571E\u7066\u7C6F\u883C\u8DB2\u8EA6\u91C3\u9474\u9478\u9476\u9475\u9A60\u9C74\u9C73\u9C71\u9C75\u9E14\u9E13\u9EF6\u9F0A"],
        ["f9a1", "\u9FA4\u7068\u7065\u7CF7\u866A\u883E\u883D\u883F\u8B9E\u8C9C\u8EA9\u8EC9\u974B\u9873\u9874\u98CC\u9961\u99AB\u9A64\u9A66\u9A67\u9B24\u9E15\u9E17\u9F48\u6207\u6B1E\u7227\u864C\u8EA8\u9482\u9480\u9481\u9A69\u9A68\u9B2E\u9E19\u7229\u864B\u8B9F\u9483\u9C79\u9EB7\u7675\u9A6B\u9C7A\u9E1D\u7069\u706A\u9EA4\u9F7E\u9F49\u9F98\u7881\u92B9\u88CF\u58BB\u6052\u7CA7\u5AFA\u2554\u2566\u2557\u2560\u256C\u2563\u255A\u2569\u255D\u2552\u2564\u2555\u255E\u256A\u2561\u2558\u2567\u255B\u2553\u2565\u2556\u255F\u256B\u2562\u2559\u2568\u255C\u2551\u2550\u256D\u256E\u2570\u256F\u2593"]
      ];
    }
  });

  // ../modules/cmd/node_modules/iconv-lite/encodings/tables/big5-added.json
  var require_big5_added = __commonJS({
    "../modules/cmd/node_modules/iconv-lite/encodings/tables/big5-added.json"(exports, module) {
      module.exports = [
        ["8740", "\u43F0\u4C32\u4603\u45A6\u4578\u{27267}\u4D77\u45B3\u{27CB1}\u4CE2\u{27CC5}\u3B95\u4736\u4744\u4C47\u4C40\u{242BF}\u{23617}\u{27352}\u{26E8B}\u{270D2}\u4C57\u{2A351}\u474F\u45DA\u4C85\u{27C6C}\u4D07\u4AA4\u46A1\u{26B23}\u7225\u{25A54}\u{21A63}\u{23E06}\u{23F61}\u664D\u56FB"],
        ["8767", "\u7D95\u591D\u{28BB9}\u3DF4\u9734\u{27BEF}\u5BDB\u{21D5E}\u5AA4\u3625\u{29EB0}\u5AD1\u5BB7\u5CFC\u676E\u8593\u{29945}\u7461\u749D\u3875\u{21D53}\u{2369E}\u{26021}\u3EEC"],
        ["87a1", "\u{258DE}\u3AF5\u7AFC\u9F97\u{24161}\u{2890D}\u{231EA}\u{20A8A}\u{2325E}\u430A\u8484\u9F96\u942F\u4930\u8613\u5896\u974A\u9218\u79D0\u7A32\u6660\u6A29\u889D\u744C\u7BC5\u6782\u7A2C\u524F\u9046\u34E6\u73C4\u{25DB9}\u74C6\u9FC7\u57B3\u492F\u544C\u4131\u{2368E}\u5818\u7A72\u{27B65}\u8B8F\u46AE\u{26E88}\u4181\u{25D99}\u7BAE\u{224BC}\u9FC8\u{224C1}\u{224C9}\u{224CC}\u9FC9\u8504\u{235BB}\u40B4\u9FCA\u44E1\u{2ADFF}\u62C1\u706E\u9FCB"],
        ["8840", "\u31C0", 4, "\u{2010C}\u31C5\u{200D1}\u{200CD}\u31C6\u31C7\u{200CB}\u{21FE8}\u31C8\u{200CA}\u31C9\u31CA\u31CB\u31CC\u{2010E}\u31CD\u31CE\u0100\xC1\u01CD\xC0\u0112\xC9\u011A\xC8\u014C\xD3\u01D1\xD2\u0FFF\xCA\u0304\u1EBE\u0FFF\xCA\u030C\u1EC0\xCA\u0101\xE1\u01CE\xE0\u0251\u0113\xE9\u011B\xE8\u012B\xED\u01D0\xEC\u014D\xF3\u01D2\xF2\u016B\xFA\u01D4\xF9\u01D6\u01D8\u01DA"],
        ["88a1", "\u01DC\xFC\u0FFF\xEA\u0304\u1EBF\u0FFF\xEA\u030C\u1EC1\xEA\u0261\u23DA\u23DB"],
        ["8940", "\u{2A3A9}\u{21145}"],
        ["8943", "\u650A"],
        ["8946", "\u4E3D\u6EDD\u9D4E\u91DF"],
        ["894c", "\u{27735}\u6491\u4F1A\u4F28\u4FA8\u5156\u5174\u519C\u51E4\u52A1\u52A8\u533B\u534E\u53D1\u53D8\u56E2\u58F0\u5904\u5907\u5932\u5934\u5B66\u5B9E\u5B9F\u5C9A\u5E86\u603B\u6589\u67FE\u6804\u6865\u6D4E\u70BC\u7535\u7EA4\u7EAC\u7EBA\u7EC7\u7ECF\u7EDF\u7F06\u7F37\u827A\u82CF\u836F\u89C6\u8BBE\u8BE2\u8F66\u8F67\u8F6E"],
        ["89a1", "\u7411\u7CFC\u7DCD\u6946\u7AC9\u5227"],
        ["89ab", "\u918C\u78B8\u915E\u80BC"],
        ["89b0", "\u8D0B\u80F6\u{209E7}"],
        ["89b5", "\u809F\u9EC7\u4CCD\u9DC9\u9E0C\u4C3E\u{29DF6}\u{2700E}\u9E0A\u{2A133}\u35C1"],
        ["89c1", "\u6E9A\u823E\u7519"],
        ["89c5", "\u4911\u9A6C\u9A8F\u9F99\u7987\u{2846C}\u{21DCA}\u{205D0}\u{22AE6}\u4E24\u4E81\u4E80\u4E87\u4EBF\u4EEB\u4F37\u344C\u4FBD\u3E48\u5003\u5088\u347D\u3493\u34A5\u5186\u5905\u51DB\u51FC\u5205\u4E89\u5279\u5290\u5327\u35C7\u53A9\u3551\u53B0\u3553\u53C2\u5423\u356D\u3572\u3681\u5493\u54A3\u54B4\u54B9\u54D0\u54EF\u5518\u5523\u5528\u3598\u553F\u35A5\u35BF\u55D7\u35C5"],
        ["8a40", "\u{27D84}\u5525"],
        ["8a43", "\u{20C42}\u{20D15}\u{2512B}\u5590\u{22CC6}\u39EC\u{20341}\u8E46\u{24DB8}\u{294E5}\u4053\u{280BE}\u777A\u{22C38}\u3A34\u47D5\u{2815D}\u{269F2}\u{24DEA}\u64DD\u{20D7C}\u{20FB4}\u{20CD5}\u{210F4}\u648D\u8E7E\u{20E96}\u{20C0B}\u{20F64}\u{22CA9}\u{28256}\u{244D3}"],
        ["8a64", "\u{20D46}\u{29A4D}\u{280E9}\u47F4\u{24EA7}\u{22CC2}\u9AB2\u3A67\u{295F4}\u3FED\u3506\u{252C7}\u{297D4}\u{278C8}\u{22D44}\u9D6E\u9815"],
        ["8a76", "\u43D9\u{260A5}\u64B4\u54E3\u{22D4C}\u{22BCA}\u{21077}\u39FB\u{2106F}"],
        ["8aa1", "\u{266DA}\u{26716}\u{279A0}\u64EA\u{25052}\u{20C43}\u8E68\u{221A1}\u{28B4C}\u{20731}"],
        ["8aac", "\u480B\u{201A9}\u3FFA\u5873\u{22D8D}"],
        ["8ab2", "\u{245C8}\u{204FC}\u{26097}\u{20F4C}\u{20D96}\u5579\u40BB\u43BA"],
        ["8abb", "\u4AB4\u{22A66}\u{2109D}\u81AA\u98F5\u{20D9C}\u6379\u39FE\u{22775}\u8DC0\u56A1\u647C\u3E43"],
        ["8ac9", "\u{2A601}\u{20E09}\u{22ACF}\u{22CC9}"],
        ["8ace", "\u{210C8}\u{239C2}\u3992\u3A06\u{2829B}\u3578\u{25E49}\u{220C7}\u5652\u{20F31}\u{22CB2}\u{29720}\u34BC\u6C3D\u{24E3B}"],
        ["8adf", "\u{27574}\u{22E8B}\u{22208}\u{2A65B}\u{28CCD}\u{20E7A}\u{20C34}\u{2681C}\u7F93\u{210CF}\u{22803}\u{22939}\u35FB\u{251E3}\u{20E8C}\u{20F8D}\u{20EAA}\u3F93\u{20F30}\u{20D47}\u{2114F}\u{20E4C}"],
        ["8af6", "\u{20EAB}\u{20BA9}\u{20D48}\u{210C0}\u{2113D}\u3FF9\u{22696}\u6432\u{20FAD}"],
        ["8b40", "\u{233F4}\u{27639}\u{22BCE}\u{20D7E}\u{20D7F}\u{22C51}\u{22C55}\u3A18\u{20E98}\u{210C7}\u{20F2E}\u{2A632}\u{26B50}\u{28CD2}\u{28D99}\u{28CCA}\u95AA\u54CC\u82C4\u55B9"],
        ["8b55", "\u{29EC3}\u9C26\u9AB6\u{2775E}\u{22DEE}\u7140\u816D\u80EC\u5C1C\u{26572}\u8134\u3797\u535F\u{280BD}\u91B6\u{20EFA}\u{20E0F}\u{20E77}\u{20EFB}\u35DD\u{24DEB}\u3609\u{20CD6}\u56AF\u{227B5}\u{210C9}\u{20E10}\u{20E78}\u{21078}\u{21148}\u{28207}\u{21455}\u{20E79}\u{24E50}\u{22DA4}\u5A54\u{2101D}\u{2101E}\u{210F5}\u{210F6}\u579C\u{20E11}"],
        ["8ba1", "\u{27694}\u{282CD}\u{20FB5}\u{20E7B}\u{2517E}\u3703\u{20FB6}\u{21180}\u{252D8}\u{2A2BD}\u{249DA}\u{2183A}\u{24177}\u{2827C}\u5899\u5268\u361A\u{2573D}\u7BB2\u5B68\u4800\u4B2C\u9F27\u49E7\u9C1F\u9B8D\u{25B74}\u{2313D}\u55FB\u35F2\u5689\u4E28\u5902\u{21BC1}\u{2F878}\u9751\u{20086}\u4E5B\u4EBB\u353E\u5C23\u5F51\u5FC4\u38FA\u624C\u6535\u6B7A\u6C35\u6C3A\u706C\u722B\u4E2C\u72AD\u{248E9}\u7F52\u793B\u7CF9\u7F53\u{2626A}\u34C1"],
        ["8bde", "\u{2634B}\u8002\u8080\u{26612}\u{26951}\u535D\u8864\u89C1\u{278B2}\u8BA0\u8D1D\u9485\u9578\u957F\u95E8\u{28E0F}\u97E6\u9875\u98CE\u98DE\u9963\u{29810}\u9C7C\u9E1F\u9EC4\u6B6F\uF907\u4E37\u{20087}\u961D\u6237\u94A2"],
        ["8c40", "\u503B\u6DFE\u{29C73}\u9FA6\u3DC9\u888F\u{2414E}\u7077\u5CF5\u4B20\u{251CD}\u3559\u{25D30}\u6122\u{28A32}\u8FA7\u91F6\u7191\u6719\u73BA\u{23281}\u{2A107}\u3C8B\u{21980}\u4B10\u78E4\u7402\u51AE\u{2870F}\u4009\u6A63\u{2A2BA}\u4223\u860F\u{20A6F}\u7A2A\u{29947}\u{28AEA}\u9755\u704D\u5324\u{2207E}\u93F4\u76D9\u{289E3}\u9FA7\u77DD\u4EA3\u4FF0\u50BC\u4E2F\u4F17\u9FA8\u5434\u7D8B\u5892\u58D0\u{21DB6}\u5E92\u5E99\u5FC2\u{22712}\u658B"],
        ["8ca1", "\u{233F9}\u6919\u6A43\u{23C63}\u6CFF"],
        ["8ca7", "\u7200\u{24505}\u738C\u3EDB\u{24A13}\u5B15\u74B9\u8B83\u{25CA4}\u{25695}\u7A93\u7BEC\u7CC3\u7E6C\u82F8\u8597\u9FA9\u8890\u9FAA\u8EB9\u9FAB\u8FCF\u855F\u99E0\u9221\u9FAC\u{28DB9}\u{2143F}\u4071\u42A2\u5A1A"],
        ["8cc9", "\u9868\u676B\u4276\u573D"],
        ["8cce", "\u85D6\u{2497B}\u82BF\u{2710D}\u4C81\u{26D74}\u5D7B\u{26B15}\u{26FBE}\u9FAD\u9FAE\u5B96\u9FAF\u66E7\u7E5B\u6E57\u79CA\u3D88\u44C3\u{23256}\u{22796}\u439A\u4536"],
        ["8ce6", "\u5CD5\u{23B1A}\u8AF9\u5C78\u3D12\u{23551}\u5D78\u9FB2\u7157\u4558\u{240EC}\u{21E23}\u4C77\u3978\u344A\u{201A4}\u{26C41}\u8ACC\u4FB4\u{20239}\u59BF\u816C\u9856\u{298FA}\u5F3B"],
        ["8d40", "\u{20B9F}"],
        ["8d42", "\u{221C1}\u{2896D}\u4102\u46BB\u{29079}\u3F07\u9FB3\u{2A1B5}\u40F8\u37D6\u46F7\u{26C46}\u417C\u{286B2}\u{273FF}\u456D\u38D4\u{2549A}\u4561\u451B\u4D89\u4C7B\u4D76\u45EA\u3FC8\u{24B0F}\u3661\u44DE\u44BD\u41ED\u5D3E\u5D48\u5D56\u3DFC\u380F\u5DA4\u5DB9\u3820\u3838\u5E42\u5EBD\u5F25\u5F83\u3908\u3914\u393F\u394D\u60D7\u613D\u5CE5\u3989\u61B7\u61B9\u61CF\u39B8\u622C\u6290\u62E5\u6318\u39F8\u56B1"],
        ["8da1", "\u3A03\u63E2\u63FB\u6407\u645A\u3A4B\u64C0\u5D15\u5621\u9F9F\u3A97\u6586\u3ABD\u65FF\u6653\u3AF2\u6692\u3B22\u6716\u3B42\u67A4\u6800\u3B58\u684A\u6884\u3B72\u3B71\u3B7B\u6909\u6943\u725C\u6964\u699F\u6985\u3BBC\u69D6\u3BDD\u6A65\u6A74\u6A71\u6A82\u3BEC\u6A99\u3BF2\u6AAB\u6AB5\u6AD4\u6AF6\u6B81\u6BC1\u6BEA\u6C75\u6CAA\u3CCB\u6D02\u6D06\u6D26\u6D81\u3CEF\u6DA4\u6DB1\u6E15\u6E18\u6E29\u6E86\u{289C0}\u6EBB\u6EE2\u6EDA\u9F7F\u6EE8\u6EE9\u6F24\u6F34\u3D46\u{23F41}\u6F81\u6FBE\u3D6A\u3D75\u71B7\u5C99\u3D8A\u702C\u3D91\u7050\u7054\u706F\u707F\u7089\u{20325}\u43C1\u35F1\u{20ED8}"],
        ["8e40", "\u{23ED7}\u57BE\u{26ED3}\u713E\u{257E0}\u364E\u69A2\u{28BE9}\u5B74\u7A49\u{258E1}\u{294D9}\u7A65\u7A7D\u{259AC}\u7ABB\u7AB0\u7AC2\u7AC3\u71D1\u{2648D}\u41CA\u7ADA\u7ADD\u7AEA\u41EF\u54B2\u{25C01}\u7B0B\u7B55\u7B29\u{2530E}\u{25CFE}\u7BA2\u7B6F\u839C\u{25BB4}\u{26C7F}\u7BD0\u8421\u7B92\u7BB8\u{25D20}\u3DAD\u{25C65}\u8492\u7BFA\u7C06\u7C35\u{25CC1}\u7C44\u7C83\u{24882}\u7CA6\u667D\u{24578}\u7CC9\u7CC7\u7CE6\u7C74\u7CF3\u7CF5\u7CCE"],
        ["8ea1", "\u7E67\u451D\u{26E44}\u7D5D\u{26ED6}\u748D\u7D89\u7DAB\u7135\u7DB3\u7DD2\u{24057}\u{26029}\u7DE4\u3D13\u7DF5\u{217F9}\u7DE5\u{2836D}\u7E1D\u{26121}\u{2615A}\u7E6E\u7E92\u432B\u946C\u7E27\u7F40\u7F41\u7F47\u7936\u{262D0}\u99E1\u7F97\u{26351}\u7FA3\u{21661}\u{20068}\u455C\u{23766}\u4503\u{2833A}\u7FFA\u{26489}\u8005\u8008\u801D\u8028\u802F\u{2A087}\u{26CC3}\u803B\u803C\u8061\u{22714}\u4989\u{26626}\u{23DE3}\u{266E8}\u6725\u80A7\u{28A48}\u8107\u811A\u58B0\u{226F6}\u6C7F\u{26498}\u{24FB8}\u64E7\u{2148A}\u8218\u{2185E}\u6A53\u{24A65}\u{24A95}\u447A\u8229\u{20B0D}\u{26A52}\u{23D7E}\u4FF9\u{214FD}\u84E2\u8362\u{26B0A}\u{249A7}\u{23530}\u{21773}\u{23DF8}\u82AA\u691B\u{2F994}\u41DB"],
        ["8f40", "\u854B\u82D0\u831A\u{20E16}\u{217B4}\u36C1\u{2317D}\u{2355A}\u827B\u82E2\u8318\u{23E8B}\u{26DA3}\u{26B05}\u{26B97}\u{235CE}\u3DBF\u831D\u55EC\u8385\u450B\u{26DA5}\u83AC\u83C1\u83D3\u347E\u{26ED4}\u6A57\u855A\u3496\u{26E42}\u{22EEF}\u8458\u{25BE4}\u8471\u3DD3\u44E4\u6AA7\u844A\u{23CB5}\u7958\u84A8\u{26B96}\u{26E77}\u{26E43}\u84DE\u840F\u8391\u44A0\u8493\u84E4\u{25C91}\u4240\u{25CC0}\u4543\u8534\u5AF2\u{26E99}\u4527\u8573\u4516\u67BF\u8616"],
        ["8fa1", "\u{28625}\u{2863B}\u85C1\u{27088}\u8602\u{21582}\u{270CD}\u{2F9B2}\u456A\u8628\u3648\u{218A2}\u53F7\u{2739A}\u867E\u8771\u{2A0F8}\u87EE\u{22C27}\u87B1\u87DA\u880F\u5661\u866C\u6856\u460F\u8845\u8846\u{275E0}\u{23DB9}\u{275E4}\u885E\u889C\u465B\u88B4\u88B5\u63C1\u88C5\u7777\u{2770F}\u8987\u898A\u89A6\u89A9\u89A7\u89BC\u{28A25}\u89E7\u{27924}\u{27ABD}\u8A9C\u7793\u91FE\u8A90\u{27A59}\u7AE9\u{27B3A}\u{23F8F}\u4713\u{27B38}\u717C\u8B0C\u8B1F\u{25430}\u{25565}\u8B3F\u8B4C\u8B4D\u8AA9\u{24A7A}\u8B90\u8B9B\u8AAF\u{216DF}\u4615\u884F\u8C9B\u{27D54}\u{27D8F}\u{2F9D4}\u3725\u{27D53}\u8CD6\u{27D98}\u{27DBD}\u8D12\u8D03\u{21910}\u8CDB\u705C\u8D11\u{24CC9}\u3ED0\u8D77"],
        ["9040", "\u8DA9\u{28002}\u{21014}\u{2498A}\u3B7C\u{281BC}\u{2710C}\u7AE7\u8EAD\u8EB6\u8EC3\u92D4\u8F19\u8F2D\u{28365}\u{28412}\u8FA5\u9303\u{2A29F}\u{20A50}\u8FB3\u492A\u{289DE}\u{2853D}\u{23DBB}\u5EF8\u{23262}\u8FF9\u{2A014}\u{286BC}\u{28501}\u{22325}\u3980\u{26ED7}\u9037\u{2853C}\u{27ABE}\u9061\u{2856C}\u{2860B}\u90A8\u{28713}\u90C4\u{286E6}\u90AE\u90FD\u9167\u3AF0\u91A9\u91C4\u7CAC\u{28933}\u{21E89}\u920E\u6C9F\u9241\u9262\u{255B9}\u92B9\u{28AC6}\u{23C9B}\u{28B0C}\u{255DB}"],
        ["90a1", "\u{20D31}\u932C\u936B\u{28AE1}\u{28BEB}\u708F\u5AC3\u{28AE2}\u{28AE5}\u4965\u9244\u{28BEC}\u{28C39}\u{28BFF}\u9373\u945B\u8EBC\u9585\u95A6\u9426\u95A0\u6FF6\u42B9\u{2267A}\u{286D8}\u{2127C}\u{23E2E}\u49DF\u6C1C\u967B\u9696\u416C\u96A3\u{26ED5}\u61DA\u96B6\u78F5\u{28AE0}\u96BD\u53CC\u49A1\u{26CB8}\u{20274}\u{26410}\u{290AF}\u{290E5}\u{24AD1}\u{21915}\u{2330A}\u9731\u8642\u9736\u4A0F\u453D\u4585\u{24AE9}\u7075\u5B41\u971B\u975C\u{291D5}\u9757\u5B4A\u{291EB}\u975F\u9425\u50D0\u{230B7}\u{230BC}\u9789\u979F\u97B1\u97BE\u97C0\u97D2\u97E0\u{2546C}\u97EE\u741C\u{29433}\u97FF\u97F5\u{2941D}\u{2797A}\u4AD1\u9834\u9833\u984B\u9866\u3B0E\u{27175}\u3D51\u{20630}\u{2415C}"],
        ["9140", "\u{25706}\u98CA\u98B7\u98C8\u98C7\u4AFF\u{26D27}\u{216D3}\u55B0\u98E1\u98E6\u98EC\u9378\u9939\u{24A29}\u4B72\u{29857}\u{29905}\u99F5\u9A0C\u9A3B\u9A10\u9A58\u{25725}\u36C4\u{290B1}\u{29BD5}\u9AE0\u9AE2\u{29B05}\u9AF4\u4C0E\u9B14\u9B2D\u{28600}\u5034\u9B34\u{269A8}\u38C3\u{2307D}\u9B50\u9B40\u{29D3E}\u5A45\u{21863}\u9B8E\u{2424B}\u9C02\u9BFF\u9C0C\u{29E68}\u9DD4\u{29FB7}\u{2A192}\u{2A1AB}\u{2A0E1}\u{2A123}\u{2A1DF}\u9D7E\u9D83\u{2A134}\u9E0E\u6888"],
        ["91a1", "\u9DC4\u{2215B}\u{2A193}\u{2A220}\u{2193B}\u{2A233}\u9D39\u{2A0B9}\u{2A2B4}\u9E90\u9E95\u9E9E\u9EA2\u4D34\u9EAA\u9EAF\u{24364}\u9EC1\u3B60\u39E5\u3D1D\u4F32\u37BE\u{28C2B}\u9F02\u9F08\u4B96\u9424\u{26DA2}\u9F17\u9F16\u9F39\u569F\u568A\u9F45\u99B8\u{2908B}\u97F2\u847F\u9F62\u9F69\u7ADC\u9F8E\u7216\u4BBE\u{24975}\u{249BB}\u7177\u{249F8}\u{24348}\u{24A51}\u739E\u{28BDA}\u{218FA}\u799F\u{2897E}\u{28E36}\u9369\u93F3\u{28A44}\u92EC\u9381\u93CB\u{2896C}\u{244B9}\u7217\u3EEB\u7772\u7A43\u70D0\u{24473}\u{243F8}\u717E\u{217EF}\u70A3\u{218BE}\u{23599}\u3EC7\u{21885}\u{2542F}\u{217F8}\u3722\u{216FB}\u{21839}\u36E1\u{21774}\u{218D1}\u{25F4B}\u3723\u{216C0}\u575B\u{24A25}\u{213FE}\u{212A8}"],
        ["9240", "\u{213C6}\u{214B6}\u8503\u{236A6}\u8503\u8455\u{24994}\u{27165}\u{23E31}\u{2555C}\u{23EFB}\u{27052}\u44F4\u{236EE}\u{2999D}\u{26F26}\u67F9\u3733\u3C15\u3DE7\u586C\u{21922}\u6810\u4057\u{2373F}\u{240E1}\u{2408B}\u{2410F}\u{26C21}\u54CB\u569E\u{266B1}\u5692\u{20FDF}\u{20BA8}\u{20E0D}\u93C6\u{28B13}\u939C\u4EF8\u512B\u3819\u{24436}\u4EBC\u{20465}\u{2037F}\u4F4B\u4F8A\u{25651}\u5A68\u{201AB}\u{203CB}\u3999\u{2030A}\u{20414}\u3435\u4F29\u{202C0}\u{28EB3}\u{20275}\u8ADA\u{2020C}\u4E98"],
        ["92a1", "\u50CD\u510D\u4FA2\u4F03\u{24A0E}\u{23E8A}\u4F42\u502E\u506C\u5081\u4FCC\u4FE5\u5058\u50FC\u5159\u515B\u515D\u515E\u6E76\u{23595}\u{23E39}\u{23EBF}\u6D72\u{21884}\u{23E89}\u51A8\u51C3\u{205E0}\u44DD\u{204A3}\u{20492}\u{20491}\u8D7A\u{28A9C}\u{2070E}\u5259\u52A4\u{20873}\u52E1\u936E\u467A\u718C\u{2438C}\u{20C20}\u{249AC}\u{210E4}\u69D1\u{20E1D}\u7479\u3EDE\u7499\u7414\u7456\u7398\u4B8E\u{24ABC}\u{2408D}\u53D0\u3584\u720F\u{240C9}\u55B4\u{20345}\u54CD\u{20BC6}\u571D\u925D\u96F4\u9366\u57DD\u578D\u577F\u363E\u58CB\u5A99\u{28A46}\u{216FA}\u{2176F}\u{21710}\u5A2C\u59B8\u928F\u5A7E\u5ACF\u5A12\u{25946}\u{219F3}\u{21861}\u{24295}\u36F5\u6D05\u7443\u5A21\u{25E83}"],
        ["9340", "\u5A81\u{28BD7}\u{20413}\u93E0\u748C\u{21303}\u7105\u4972\u9408\u{289FB}\u93BD\u37A0\u5C1E\u5C9E\u5E5E\u5E48\u{21996}\u{2197C}\u{23AEE}\u5ECD\u5B4F\u{21903}\u{21904}\u3701\u{218A0}\u36DD\u{216FE}\u36D3\u812A\u{28A47}\u{21DBA}\u{23472}\u{289A8}\u5F0C\u5F0E\u{21927}\u{217AB}\u5A6B\u{2173B}\u5B44\u8614\u{275FD}\u8860\u607E\u{22860}\u{2262B}\u5FDB\u3EB8\u{225AF}\u{225BE}\u{29088}\u{26F73}\u61C0\u{2003E}\u{20046}\u{2261B}\u6199\u6198\u6075\u{22C9B}\u{22D07}\u{246D4}\u{2914D}"],
        ["93a1", "\u6471\u{24665}\u{22B6A}\u3A29\u{22B22}\u{23450}\u{298EA}\u{22E78}\u6337\u{2A45B}\u64B6\u6331\u63D1\u{249E3}\u{22D67}\u62A4\u{22CA1}\u643B\u656B\u6972\u3BF4\u{2308E}\u{232AD}\u{24989}\u{232AB}\u550D\u{232E0}\u{218D9}\u{2943F}\u66CE\u{23289}\u{231B3}\u3AE0\u4190\u{25584}\u{28B22}\u{2558F}\u{216FC}\u{2555B}\u{25425}\u78EE\u{23103}\u{2182A}\u{23234}\u3464\u{2320F}\u{23182}\u{242C9}\u668E\u{26D24}\u666B\u4B93\u6630\u{27870}\u{21DEB}\u6663\u{232D2}\u{232E1}\u661E\u{25872}\u38D1\u{2383A}\u{237BC}\u3B99\u{237A2}\u{233FE}\u74D0\u3B96\u678F\u{2462A}\u68B6\u681E\u3BC4\u6ABE\u3863\u{237D5}\u{24487}\u6A33\u6A52\u6AC9\u6B05\u{21912}\u6511\u6898\u6A4C\u3BD7\u6A7A\u6B57\u{23FC0}\u{23C9A}\u93A0\u92F2\u{28BEA}\u{28ACB}"],
        ["9440", "\u9289\u{2801E}\u{289DC}\u9467\u6DA5\u6F0B\u{249EC}\u6D67\u{23F7F}\u3D8F\u6E04\u{2403C}\u5A3D\u6E0A\u5847\u6D24\u7842\u713B\u{2431A}\u{24276}\u70F1\u7250\u7287\u7294\u{2478F}\u{24725}\u5179\u{24AA4}\u{205EB}\u747A\u{23EF8}\u{2365F}\u{24A4A}\u{24917}\u{25FE1}\u3F06\u3EB1\u{24ADF}\u{28C23}\u{23F35}\u60A7\u3EF3\u74CC\u743C\u9387\u7437\u449F\u{26DEA}\u4551\u7583\u3F63\u{24CD9}\u{24D06}\u3F58\u7555\u7673\u{2A5C6}\u3B19\u7468\u{28ACC}\u{249AB}\u{2498E}\u3AFB"],
        ["94a1", "\u3DCD\u{24A4E}\u3EFF\u{249C5}\u{248F3}\u91FA\u5732\u9342\u{28AE3}\u{21864}\u50DF\u{25221}\u{251E7}\u7778\u{23232}\u770E\u770F\u777B\u{24697}\u{23781}\u3A5E\u{248F0}\u7438\u749B\u3EBF\u{24ABA}\u{24AC7}\u40C8\u{24A96}\u{261AE}\u9307\u{25581}\u781E\u788D\u7888\u78D2\u73D0\u7959\u{27741}\u{256E3}\u410E\u799B\u8496\u79A5\u6A2D\u{23EFA}\u7A3A\u79F4\u416E\u{216E6}\u4132\u9235\u79F1\u{20D4C}\u{2498C}\u{20299}\u{23DBA}\u{2176E}\u3597\u556B\u3570\u36AA\u{201D4}\u{20C0D}\u7AE2\u5A59\u{226F5}\u{25AAF}\u{25A9C}\u5A0D\u{2025B}\u78F0\u5A2A\u{25BC6}\u7AFE\u41F9\u7C5D\u7C6D\u4211\u{25BB3}\u{25EBC}\u{25EA6}\u7CCD\u{249F9}\u{217B0}\u7C8E\u7C7C\u7CAE\u6AB2\u7DDC\u7E07\u7DD3\u7F4E\u{26261}"],
        ["9540", "\u{2615C}\u{27B48}\u7D97\u{25E82}\u426A\u{26B75}\u{20916}\u67D6\u{2004E}\u{235CF}\u57C4\u{26412}\u{263F8}\u{24962}\u7FDD\u7B27\u{2082C}\u{25AE9}\u{25D43}\u7B0C\u{25E0E}\u99E6\u8645\u9A63\u6A1C\u{2343F}\u39E2\u{249F7}\u{265AD}\u9A1F\u{265A0}\u8480\u{27127}\u{26CD1}\u44EA\u8137\u4402\u80C6\u8109\u8142\u{267B4}\u98C3\u{26A42}\u8262\u8265\u{26A51}\u8453\u{26DA7}\u8610\u{2721B}\u5A86\u417F\u{21840}\u5B2B\u{218A1}\u5AE4\u{218D8}\u86A0\u{2F9BC}\u{23D8F}\u882D\u{27422}\u5A02"],
        ["95a1", "\u886E\u4F45\u8887\u88BF\u88E6\u8965\u894D\u{25683}\u8954\u{27785}\u{27784}\u{28BF5}\u{28BD9}\u{28B9C}\u{289F9}\u3EAD\u84A3\u46F5\u46CF\u37F2\u8A3D\u8A1C\u{29448}\u5F4D\u922B\u{24284}\u65D4\u7129\u70C4\u{21845}\u9D6D\u8C9F\u8CE9\u{27DDC}\u599A\u77C3\u59F0\u436E\u36D4\u8E2A\u8EA7\u{24C09}\u8F30\u8F4A\u42F4\u6C58\u6FBB\u{22321}\u489B\u6F79\u6E8B\u{217DA}\u9BE9\u36B5\u{2492F}\u90BB\u9097\u5571\u4906\u91BB\u9404\u{28A4B}\u4062\u{28AFC}\u9427\u{28C1D}\u{28C3B}\u84E5\u8A2B\u9599\u95A7\u9597\u9596\u{28D34}\u7445\u3EC2\u{248FF}\u{24A42}\u{243EA}\u3EE7\u{23225}\u968F\u{28EE7}\u{28E66}\u{28E65}\u3ECC\u{249ED}\u{24A78}\u{23FEE}\u7412\u746B\u3EFC\u9741\u{290B0}"],
        ["9640", "\u6847\u4A1D\u{29093}\u{257DF}\u975D\u9368\u{28989}\u{28C26}\u{28B2F}\u{263BE}\u92BA\u5B11\u8B69\u493C\u73F9\u{2421B}\u979B\u9771\u9938\u{20F26}\u5DC1\u{28BC5}\u{24AB2}\u981F\u{294DA}\u92F6\u{295D7}\u91E5\u44C0\u{28B50}\u{24A67}\u{28B64}\u98DC\u{28A45}\u3F00\u922A\u4925\u8414\u993B\u994D\u{27B06}\u3DFD\u999B\u4B6F\u99AA\u9A5C\u{28B65}\u{258C8}\u6A8F\u9A21\u5AFE\u9A2F\u{298F1}\u4B90\u{29948}\u99BC\u4BBD\u4B97\u937D\u5872\u{21302}\u5822\u{249B8}"],
        ["96a1", "\u{214E8}\u7844\u{2271F}\u{23DB8}\u68C5\u3D7D\u9458\u3927\u6150\u{22781}\u{2296B}\u6107\u9C4F\u9C53\u9C7B\u9C35\u9C10\u9B7F\u9BCF\u{29E2D}\u9B9F\u{2A1F5}\u{2A0FE}\u9D21\u4CAE\u{24104}\u9E18\u4CB0\u9D0C\u{2A1B4}\u{2A0ED}\u{2A0F3}\u{2992F}\u9DA5\u84BD\u{26E12}\u{26FDF}\u{26B82}\u85FC\u4533\u{26DA4}\u{26E84}\u{26DF0}\u8420\u85EE\u{26E00}\u{237D7}\u{26064}\u79E2\u{2359C}\u{23640}\u492D\u{249DE}\u3D62\u93DB\u92BE\u9348\u{202BF}\u78B9\u9277\u944D\u4FE4\u3440\u9064\u{2555D}\u783D\u7854\u78B6\u784B\u{21757}\u{231C9}\u{24941}\u369A\u4F72\u6FDA\u6FD9\u701E\u701E\u5414\u{241B5}\u57BB\u58F3\u578A\u9D16\u57D7\u7134\u34AF\u{241AC}\u71EB\u{26C40}\u{24F97}\u5B28\u{217B5}\u{28A49}"],
        ["9740", "\u610C\u5ACE\u5A0B\u42BC\u{24488}\u372C\u4B7B\u{289FC}\u93BB\u93B8\u{218D6}\u{20F1D}\u8472\u{26CC0}\u{21413}\u{242FA}\u{22C26}\u{243C1}\u5994\u{23DB7}\u{26741}\u7DA8\u{2615B}\u{260A4}\u{249B9}\u{2498B}\u{289FA}\u92E5\u73E2\u3EE9\u74B4\u{28B63}\u{2189F}\u3EE1\u{24AB3}\u6AD8\u73F3\u73FB\u3ED6\u{24A3E}\u{24A94}\u{217D9}\u{24A66}\u{203A7}\u{21424}\u{249E5}\u7448\u{24916}\u70A5\u{24976}\u9284\u73E6\u935F\u{204FE}\u9331\u{28ACE}\u{28A16}\u9386\u{28BE7}\u{255D5}\u4935\u{28A82}\u716B"],
        ["97a1", "\u{24943}\u{20CFF}\u56A4\u{2061A}\u{20BEB}\u{20CB8}\u5502\u79C4\u{217FA}\u7DFE\u{216C2}\u{24A50}\u{21852}\u452E\u9401\u370A\u{28AC0}\u{249AD}\u59B0\u{218BF}\u{21883}\u{27484}\u5AA1\u36E2\u{23D5B}\u36B0\u925F\u5A79\u{28A81}\u{21862}\u9374\u3CCD\u{20AB4}\u4A96\u398A\u50F4\u3D69\u3D4C\u{2139C}\u7175\u42FB\u{28218}\u6E0F\u{290E4}\u44EB\u6D57\u{27E4F}\u7067\u6CAF\u3CD6\u{23FED}\u{23E2D}\u6E02\u6F0C\u3D6F\u{203F5}\u7551\u36BC\u34C8\u4680\u3EDA\u4871\u59C4\u926E\u493E\u8F41\u{28C1C}\u{26BC0}\u5812\u57C8\u36D6\u{21452}\u70FE\u{24362}\u{24A71}\u{22FE3}\u{212B0}\u{223BD}\u68B9\u6967\u{21398}\u{234E5}\u{27BF4}\u{236DF}\u{28A83}\u{237D6}\u{233FA}\u{24C9F}\u6A1A\u{236AD}\u{26CB7}\u843E\u44DF\u44CE"],
        ["9840", "\u{26D26}\u{26D51}\u{26C82}\u{26FDE}\u6F17\u{27109}\u833D\u{2173A}\u83ED\u{26C80}\u{27053}\u{217DB}\u5989\u5A82\u{217B3}\u5A61\u5A71\u{21905}\u{241FC}\u372D\u59EF\u{2173C}\u36C7\u718E\u9390\u669A\u{242A5}\u5A6E\u5A2B\u{24293}\u6A2B\u{23EF9}\u{27736}\u{2445B}\u{242CA}\u711D\u{24259}\u{289E1}\u4FB0\u{26D28}\u5CC2\u{244CE}\u{27E4D}\u{243BD}\u6A0C\u{24256}\u{21304}\u70A6\u7133\u{243E9}\u3DA5\u6CDF\u{2F825}\u{24A4F}\u7E65\u59EB\u5D2F\u3DF3\u5F5C\u{24A5D}\u{217DF}\u7DA4\u8426"],
        ["98a1", "\u5485\u{23AFA}\u{23300}\u{20214}\u577E\u{208D5}\u{20619}\u3FE5\u{21F9E}\u{2A2B6}\u7003\u{2915B}\u5D70\u738F\u7CD3\u{28A59}\u{29420}\u4FC8\u7FE7\u72CD\u7310\u{27AF4}\u7338\u7339\u{256F6}\u7341\u7348\u3EA9\u{27B18}\u906C\u71F5\u{248F2}\u73E1\u81F6\u3ECA\u770C\u3ED1\u6CA2\u56FD\u7419\u741E\u741F\u3EE2\u3EF0\u3EF4\u3EFA\u74D3\u3F0E\u3F53\u7542\u756D\u7572\u758D\u3F7C\u75C8\u75DC\u3FC0\u764D\u3FD7\u7674\u3FDC\u767A\u{24F5C}\u7188\u5623\u8980\u5869\u401D\u7743\u4039\u6761\u4045\u35DB\u7798\u406A\u406F\u5C5E\u77BE\u77CB\u58F2\u7818\u70B9\u781C\u40A8\u7839\u7847\u7851\u7866\u8448\u{25535}\u7933\u6803\u7932\u4103"],
        ["9940", "\u4109\u7991\u7999\u8FBB\u7A06\u8FBC\u4167\u7A91\u41B2\u7ABC\u8279\u41C4\u7ACF\u7ADB\u41CF\u4E21\u7B62\u7B6C\u7B7B\u7C12\u7C1B\u4260\u427A\u7C7B\u7C9C\u428C\u7CB8\u4294\u7CED\u8F93\u70C0\u{20CCF}\u7DCF\u7DD4\u7DD0\u7DFD\u7FAE\u7FB4\u729F\u4397\u8020\u8025\u7B39\u802E\u8031\u8054\u3DCC\u57B4\u70A0\u80B7\u80E9\u43ED\u810C\u732A\u810E\u8112\u7560\u8114\u4401\u3B39\u8156\u8159\u815A"],
        ["99a1", "\u4413\u583A\u817C\u8184\u4425\u8193\u442D\u81A5\u57EF\u81C1\u81E4\u8254\u448F\u82A6\u8276\u82CA\u82D8\u82FF\u44B0\u8357\u9669\u698A\u8405\u70F5\u8464\u60E3\u8488\u4504\u84BE\u84E1\u84F8\u8510\u8538\u8552\u453B\u856F\u8570\u85E0\u4577\u8672\u8692\u86B2\u86EF\u9645\u878B\u4606\u4617\u88AE\u88FF\u8924\u8947\u8991\u{27967}\u8A29\u8A38\u8A94\u8AB4\u8C51\u8CD4\u8CF2\u8D1C\u4798\u585F\u8DC3\u47ED\u4EEE\u8E3A\u55D8\u5754\u8E71\u55F5\u8EB0\u4837\u8ECE\u8EE2\u8EE4\u8EED\u8EF2\u8FB7\u8FC1\u8FCA\u8FCC\u9033\u99C4\u48AD\u98E0\u9213\u491E\u9228\u9258\u926B\u92B1\u92AE\u92BF"],
        ["9a40", "\u92E3\u92EB\u92F3\u92F4\u92FD\u9343\u9384\u93AD\u4945\u4951\u9EBF\u9417\u5301\u941D\u942D\u943E\u496A\u9454\u9479\u952D\u95A2\u49A7\u95F4\u9633\u49E5\u67A0\u4A24\u9740\u4A35\u97B2\u97C2\u5654\u4AE4\u60E8\u98B9\u4B19\u98F1\u5844\u990E\u9919\u51B4\u991C\u9937\u9942\u995D\u9962\u4B70\u99C5\u4B9D\u9A3C\u9B0F\u7A83\u9B69\u9B81\u9BDD\u9BF1\u9BF4\u4C6D\u9C20\u376F\u{21BC2}\u9D49\u9C3A"],
        ["9aa1", "\u9EFE\u5650\u9D93\u9DBD\u9DC0\u9DFC\u94F6\u8FB6\u9E7B\u9EAC\u9EB1\u9EBD\u9EC6\u94DC\u9EE2\u9EF1\u9EF8\u7AC8\u9F44\u{20094}\u{202B7}\u{203A0}\u691A\u94C3\u59AC\u{204D7}\u5840\u94C1\u37B9\u{205D5}\u{20615}\u{20676}\u{216BA}\u5757\u7173\u{20AC2}\u{20ACD}\u{20BBF}\u546A\u{2F83B}\u{20BCB}\u549E\u{20BFB}\u{20C3B}\u{20C53}\u{20C65}\u{20C7C}\u60E7\u{20C8D}\u567A\u{20CB5}\u{20CDD}\u{20CED}\u{20D6F}\u{20DB2}\u{20DC8}\u6955\u9C2F\u87A5\u{20E04}\u{20E0E}\u{20ED7}\u{20F90}\u{20F2D}\u{20E73}\u5C20\u{20FBC}\u5E0B\u{2105C}\u{2104F}\u{21076}\u671E\u{2107B}\u{21088}\u{21096}\u3647\u{210BF}\u{210D3}\u{2112F}\u{2113B}\u5364\u84AD\u{212E3}\u{21375}\u{21336}\u8B81\u{21577}\u{21619}\u{217C3}\u{217C7}\u4E78\u70BB\u{2182D}\u{2196A}"],
        ["9b40", "\u{21A2D}\u{21A45}\u{21C2A}\u{21C70}\u{21CAC}\u{21EC8}\u62C3\u{21ED5}\u{21F15}\u7198\u6855\u{22045}\u69E9\u36C8\u{2227C}\u{223D7}\u{223FA}\u{2272A}\u{22871}\u{2294F}\u82FD\u{22967}\u{22993}\u{22AD5}\u89A5\u{22AE8}\u8FA0\u{22B0E}\u97B8\u{22B3F}\u9847\u9ABD\u{22C4C}"],
        ["9b62", "\u{22C88}\u{22CB7}\u{25BE8}\u{22D08}\u{22D12}\u{22DB7}\u{22D95}\u{22E42}\u{22F74}\u{22FCC}\u{23033}\u{23066}\u{2331F}\u{233DE}\u5FB1\u6648\u66BF\u{27A79}\u{23567}\u{235F3}\u7201\u{249BA}\u77D7\u{2361A}\u{23716}\u7E87\u{20346}\u58B5\u670E"],
        ["9ba1", "\u6918\u{23AA7}\u{27657}\u{25FE2}\u{23E11}\u{23EB9}\u{275FE}\u{2209A}\u48D0\u4AB8\u{24119}\u{28A9A}\u{242EE}\u{2430D}\u{2403B}\u{24334}\u{24396}\u{24A45}\u{205CA}\u51D2\u{20611}\u599F\u{21EA8}\u3BBE\u{23CFF}\u{24404}\u{244D6}\u5788\u{24674}\u399B\u{2472F}\u{285E8}\u{299C9}\u3762\u{221C3}\u8B5E\u{28B4E}\u99D6\u{24812}\u{248FB}\u{24A15}\u7209\u{24AC0}\u{20C78}\u5965\u{24EA5}\u{24F86}\u{20779}\u8EDA\u{2502C}\u528F\u573F\u7171\u{25299}\u{25419}\u{23F4A}\u{24AA7}\u55BC\u{25446}\u{2546E}\u{26B52}\u91D4\u3473\u{2553F}\u{27632}\u{2555E}\u4718\u{25562}\u{25566}\u{257C7}\u{2493F}\u{2585D}\u5066\u34FB\u{233CC}\u60DE\u{25903}\u477C\u{28948}\u{25AAE}\u{25B89}\u{25C06}\u{21D90}\u57A1\u7151\u6FB6\u{26102}\u{27C12}\u9056\u{261B2}\u{24F9A}\u8B62\u{26402}\u{2644A}"],
        ["9c40", "\u5D5B\u{26BF7}\u8F36\u{26484}\u{2191C}\u8AEA\u{249F6}\u{26488}\u{23FEF}\u{26512}\u4BC0\u{265BF}\u{266B5}\u{2271B}\u9465\u{257E1}\u6195\u5A27\u{2F8CD}\u4FBB\u56B9\u{24521}\u{266FC}\u4E6A\u{24934}\u9656\u6D8F\u{26CBD}\u3618\u8977\u{26799}\u{2686E}\u{26411}\u{2685E}\u71DF\u{268C7}\u7B42\u{290C0}\u{20A11}\u{26926}\u9104\u{26939}\u7A45\u9DF0\u{269FA}\u9A26\u{26A2D}\u365F\u{26469}\u{20021}\u7983\u{26A34}\u{26B5B}\u5D2C\u{23519}\u83CF\u{26B9D}\u46D0\u{26CA4}\u753B\u8865\u{26DAE}\u58B6"],
        ["9ca1", "\u371C\u{2258D}\u{2704B}\u{271CD}\u3C54\u{27280}\u{27285}\u9281\u{2217A}\u{2728B}\u9330\u{272E6}\u{249D0}\u6C39\u949F\u{27450}\u{20EF8}\u8827\u88F5\u{22926}\u{28473}\u{217B1}\u6EB8\u{24A2A}\u{21820}\u39A4\u36B9\u5C10\u79E3\u453F\u66B6\u{29CAD}\u{298A4}\u8943\u{277CC}\u{27858}\u56D6\u40DF\u{2160A}\u39A1\u{2372F}\u{280E8}\u{213C5}\u71AD\u8366\u{279DD}\u{291A8}\u5A67\u4CB7\u{270AF}\u{289AB}\u{279FD}\u{27A0A}\u{27B0B}\u{27D66}\u{2417A}\u7B43\u797E\u{28009}\u6FB5\u{2A2DF}\u6A03\u{28318}\u53A2\u{26E07}\u93BF\u6836\u975D\u{2816F}\u{28023}\u{269B5}\u{213ED}\u{2322F}\u{28048}\u5D85\u{28C30}\u{28083}\u5715\u9823\u{28949}\u5DAB\u{24988}\u65BE\u69D5\u53D2\u{24AA5}\u{23F81}\u3C11\u6736\u{28090}\u{280F4}\u{2812E}\u{21FA1}\u{2814F}"],
        ["9d40", "\u{28189}\u{281AF}\u{2821A}\u{28306}\u{2832F}\u{2838A}\u35CA\u{28468}\u{286AA}\u48FA\u63E6\u{28956}\u7808\u9255\u{289B8}\u43F2\u{289E7}\u43DF\u{289E8}\u{28B46}\u{28BD4}\u59F8\u{28C09}\u8F0B\u{28FC5}\u{290EC}\u7B51\u{29110}\u{2913C}\u3DF7\u{2915E}\u{24ACA}\u8FD0\u728F\u568B\u{294E7}\u{295E9}\u{295B0}\u{295B8}\u{29732}\u{298D1}\u{29949}\u{2996A}\u{299C3}\u{29A28}\u{29B0E}\u{29D5A}\u{29D9B}\u7E9F\u{29EF8}\u{29F23}\u4CA4\u9547\u{2A293}\u71A2\u{2A2FF}\u4D91\u9012\u{2A5CB}\u4D9C\u{20C9C}\u8FBE\u55C1"],
        ["9da1", "\u8FBA\u{224B0}\u8FB9\u{24A93}\u4509\u7E7F\u6F56\u6AB1\u4EEA\u34E4\u{28B2C}\u{2789D}\u373A\u8E80\u{217F5}\u{28024}\u{28B6C}\u{28B99}\u{27A3E}\u{266AF}\u3DEB\u{27655}\u{23CB7}\u{25635}\u{25956}\u4E9A\u{25E81}\u{26258}\u56BF\u{20E6D}\u8E0E\u5B6D\u{23E88}\u{24C9E}\u63DE\u62D0\u{217F6}\u{2187B}\u6530\u562D\u{25C4A}\u541A\u{25311}\u3DC6\u{29D98}\u4C7D\u5622\u561E\u7F49\u{25ED8}\u5975\u{23D40}\u8770\u4E1C\u{20FEA}\u{20D49}\u{236BA}\u8117\u9D5E\u8D18\u763B\u9C45\u764E\u77B9\u9345\u5432\u8148\u82F7\u5625\u8132\u8418\u80BD\u55EA\u7962\u5643\u5416\u{20E9D}\u35CE\u5605\u55F1\u66F1\u{282E2}\u362D\u7534\u55F0\u55BA\u5497\u5572\u{20C41}\u{20C96}\u5ED0\u{25148}\u{20E76}\u{22C62}"],
        ["9e40", "\u{20EA2}\u9EAB\u7D5A\u55DE\u{21075}\u629D\u976D\u5494\u8CCD\u71F6\u9176\u63FC\u63B9\u63FE\u5569\u{22B43}\u9C72\u{22EB3}\u519A\u34DF\u{20DA7}\u51A7\u544D\u551E\u5513\u7666\u8E2D\u{2688A}\u75B1\u80B6\u8804\u8786\u88C7\u81B6\u841C\u{210C1}\u44EC\u7304\u{24706}\u5B90\u830B\u{26893}\u567B\u{226F4}\u{27D2F}\u{241A3}\u{27D73}\u{26ED0}\u{272B6}\u9170\u{211D9}\u9208\u{23CFC}\u{2A6A9}\u{20EAC}\u{20EF9}\u7266\u{21CA2}\u474E\u{24FC2}\u{27FF9}\u{20FEB}\u40FA"],
        ["9ea1", "\u9C5D\u651F\u{22DA0}\u48F3\u{247E0}\u{29D7C}\u{20FEC}\u{20E0A}\u6062\u{275A3}\u{20FED}"],
        ["9ead", "\u{26048}\u{21187}\u71A3\u7E8E\u9D50\u4E1A\u4E04\u3577\u5B0D\u6CB2\u5367\u36AC\u39DC\u537D\u36A5\u{24618}\u589A\u{24B6E}\u822D\u544B\u57AA\u{25A95}\u{20979}"],
        ["9ec5", "\u3A52\u{22465}\u7374\u{29EAC}\u4D09\u9BED\u{23CFE}\u{29F30}\u4C5B\u{24FA9}\u{2959E}\u{29FDE}\u845C\u{23DB6}\u{272B2}\u{267B3}\u{23720}\u632E\u7D25\u{23EF7}\u{23E2C}\u3A2A\u9008\u52CC\u3E74\u367A\u45E9\u{2048E}\u7640\u5AF0\u{20EB6}\u787A\u{27F2E}\u58A7\u40BF\u567C\u9B8B\u5D74\u7654\u{2A434}\u9E85\u4CE1\u75F9\u37FB\u6119\u{230DA}\u{243F2}"],
        ["9ef5", "\u565D\u{212A9}\u57A7\u{24963}\u{29E06}\u5234\u{270AE}\u35AD\u6C4A\u9D7C"],
        ["9f40", "\u7C56\u9B39\u57DE\u{2176C}\u5C53\u64D3\u{294D0}\u{26335}\u{27164}\u86AD\u{20D28}\u{26D22}\u{24AE2}\u{20D71}"],
        ["9f4f", "\u51FE\u{21F0F}\u5D8E\u9703\u{21DD1}\u9E81\u904C\u7B1F\u9B02\u5CD1\u7BA3\u6268\u6335\u9AFF\u7BCF\u9B2A\u7C7E\u9B2E\u7C42\u7C86\u9C15\u7BFC\u9B09\u9F17\u9C1B\u{2493E}\u9F5A\u5573\u5BC3\u4FFD\u9E98\u4FF2\u5260\u3E06\u52D1\u5767\u5056\u59B7\u5E12\u97C8\u9DAB\u8F5C\u5469\u97B4\u9940\u97BA\u532C\u6130"],
        ["9fa1", "\u692C\u53DA\u9C0A\u9D02\u4C3B\u9641\u6980\u50A6\u7546\u{2176D}\u99DA\u5273"],
        ["9fae", "\u9159\u9681\u915C"],
        ["9fb2", "\u9151\u{28E97}\u637F\u{26D23}\u6ACA\u5611\u918E\u757A\u6285\u{203FC}\u734F\u7C70\u{25C21}\u{23CFD}"],
        ["9fc1", "\u{24919}\u76D6\u9B9D\u4E2A\u{20CD4}\u83BE\u8842"],
        ["9fc9", "\u5C4A\u69C0\u50ED\u577A\u521F\u5DF5\u4ECE\u6C31\u{201F2}\u4F39\u549C\u54DA\u529A\u8D82\u35FE\u5F0C\u35F3"],
        ["9fdb", "\u6B52\u917C\u9FA5\u9B97\u982E\u98B4\u9ABA\u9EA8\u9E84\u717A\u7B14"],
        ["9fe7", "\u6BFA\u8818\u7F78"],
        ["9feb", "\u5620\u{2A64A}\u8E77\u9F53"],
        ["9ff0", "\u8DD4\u8E4F\u9E1C\u8E01\u6282\u{2837D}\u8E28\u8E75\u7AD3\u{24A77}\u7A3E\u78D8\u6CEA\u8A67\u7607"],
        ["a040", "\u{28A5A}\u9F26\u6CCE\u87D6\u75C3\u{2A2B2}\u7853\u{2F840}\u8D0C\u72E2\u7371\u8B2D\u7302\u74F1\u8CEB\u{24ABB}\u862F\u5FBA\u88A0\u44B7"],
        ["a055", "\u{2183B}\u{26E05}"],
        ["a058", "\u8A7E\u{2251B}"],
        ["a05b", "\u60FD\u7667\u9AD7\u9D44\u936E\u9B8F\u87F5"],
        ["a063", "\u880F\u8CF7\u732C\u9721\u9BB0\u35D6\u72B2\u4C07\u7C51\u994A\u{26159}\u6159\u4C04\u9E96\u617D"],
        ["a073", "\u575F\u616F\u62A6\u6239\u62CE\u3A5C\u61E2\u53AA\u{233F5}\u6364\u6802\u35D2"],
        ["a0a1", "\u5D57\u{28BC2}\u8FDA\u{28E39}"],
        ["a0a6", "\u50D9\u{21D46}\u7906\u5332\u9638\u{20F3B}\u4065"],
        ["a0ae", "\u77FE"],
        ["a0b0", "\u7CC2\u{25F1A}\u7CDA\u7A2D\u8066\u8063\u7D4D\u7505\u74F2\u8994\u821A\u670C\u8062\u{27486}\u805B\u74F0\u8103\u7724\u8989\u{267CC}\u7553\u{26ED1}\u87A9\u87CE\u81C8\u878C\u8A49\u8CAD\u8B43\u772B\u74F8\u84DA\u3635\u69B2\u8DA6"],
        ["a0d4", "\u89A9\u7468\u6DB9\u87C1\u{24011}\u74E7\u3DDB\u7176\u60A4\u619C\u3CD1\u7162\u6077"],
        ["a0e2", "\u7F71\u{28B2D}\u7250\u60E9\u4B7E\u5220\u3C18\u{23CC7}\u{25ED7}\u{27656}\u{25531}\u{21944}\u{212FE}\u{29903}\u{26DDC}\u{270AD}\u5CC1\u{261AD}\u{28A0F}\u{23677}\u{200EE}\u{26846}\u{24F0E}\u4562\u5B1F\u{2634C}\u9F50\u9EA6\u{2626B}"],
        ["a3c0", "\u2400", 31, "\u2421"],
        ["c6a1", "\u2460", 9, "\u2474", 9, "\u2170", 9, "\u4E36\u4E3F\u4E85\u4EA0\u5182\u5196\u51AB\u52F9\u5338\u5369\u53B6\u590A\u5B80\u5DDB\u2F33\u5E7F\u5EF4\u5F50\u5F61\u6534\u65E0\u7592\u7676\u8FB5\u96B6\xA8\u02C6\u30FD\u30FE\u309D\u309E\u3003\u4EDD\u3005\u3006\u3007\u30FC\uFF3B\uFF3D\u273D\u3041", 23],
        ["c740", "\u3059", 58, "\u30A1\u30A2\u30A3\u30A4"],
        ["c7a1", "\u30A5", 81, "\u0410", 5, "\u0401\u0416", 4],
        ["c840", "\u041B", 26, "\u0451\u0436", 25, "\u21E7\u21B8\u21B9\u31CF\u{200CC}\u4E5A\u{2008A}\u5202\u4491"],
        ["c8a1", "\u9FB0\u5188\u9FB1\u{27607}"],
        ["c8cd", "\uFFE2\uFFE4\uFF07\uFF02\u3231\u2116\u2121\u309B\u309C\u2E80\u2E84\u2E86\u2E87\u2E88\u2E8A\u2E8C\u2E8D\u2E95\u2E9C\u2E9D\u2EA5\u2EA7\u2EAA\u2EAC\u2EAE\u2EB6\u2EBC\u2EBE\u2EC6\u2ECA\u2ECC\u2ECD\u2ECF\u2ED6\u2ED7\u2EDE\u2EE3"],
        ["c8f5", "\u0283\u0250\u025B\u0254\u0275\u0153\xF8\u014B\u028A\u026A"],
        ["f9fe", "\uFFED"],
        ["fa40", "\u{20547}\u92DB\u{205DF}\u{23FC5}\u854C\u42B5\u73EF\u51B5\u3649\u{24942}\u{289E4}\u9344\u{219DB}\u82EE\u{23CC8}\u783C\u6744\u62DF\u{24933}\u{289AA}\u{202A0}\u{26BB3}\u{21305}\u4FAB\u{224ED}\u5008\u{26D29}\u{27A84}\u{23600}\u{24AB1}\u{22513}\u5029\u{2037E}\u5FA4\u{20380}\u{20347}\u6EDB\u{2041F}\u507D\u5101\u347A\u510E\u986C\u3743\u8416\u{249A4}\u{20487}\u5160\u{233B4}\u516A\u{20BFF}\u{220FC}\u{202E5}\u{22530}\u{2058E}\u{23233}\u{21983}\u5B82\u877D\u{205B3}\u{23C99}\u51B2\u51B8"],
        ["faa1", "\u9D34\u51C9\u51CF\u51D1\u3CDC\u51D3\u{24AA6}\u51B3\u51E2\u5342\u51ED\u83CD\u693E\u{2372D}\u5F7B\u520B\u5226\u523C\u52B5\u5257\u5294\u52B9\u52C5\u7C15\u8542\u52E0\u860D\u{26B13}\u5305\u{28ADE}\u5549\u6ED9\u{23F80}\u{20954}\u{23FEC}\u5333\u5344\u{20BE2}\u6CCB\u{21726}\u681B\u73D5\u604A\u3EAA\u38CC\u{216E8}\u71DD\u44A2\u536D\u5374\u{286AB}\u537E\u537F\u{21596}\u{21613}\u77E6\u5393\u{28A9B}\u53A0\u53AB\u53AE\u73A7\u{25772}\u3F59\u739C\u53C1\u53C5\u6C49\u4E49\u57FE\u53D9\u3AAB\u{20B8F}\u53E0\u{23FEB}\u{22DA3}\u53F6\u{20C77}\u5413\u7079\u552B\u6657\u6D5B\u546D\u{26B53}\u{20D74}\u555D\u548F\u54A4\u47A6\u{2170D}\u{20EDD}\u3DB4\u{20D4D}"],
        ["fb40", "\u{289BC}\u{22698}\u5547\u4CED\u542F\u7417\u5586\u55A9\u5605\u{218D7}\u{2403A}\u4552\u{24435}\u66B3\u{210B4}\u5637\u66CD\u{2328A}\u66A4\u66AD\u564D\u564F\u78F1\u56F1\u9787\u53FE\u5700\u56EF\u56ED\u{28B66}\u3623\u{2124F}\u5746\u{241A5}\u6C6E\u708B\u5742\u36B1\u{26C7E}\u57E6\u{21416}\u5803\u{21454}\u{24363}\u5826\u{24BF5}\u585C\u58AA\u3561\u58E0\u58DC\u{2123C}\u58FB\u5BFF\u5743\u{2A150}\u{24278}\u93D3\u35A1\u591F\u68A6\u36C3\u6E59"],
        ["fba1", "\u{2163E}\u5A24\u5553\u{21692}\u8505\u59C9\u{20D4E}\u{26C81}\u{26D2A}\u{217DC}\u59D9\u{217FB}\u{217B2}\u{26DA6}\u6D71\u{21828}\u{216D5}\u59F9\u{26E45}\u5AAB\u5A63\u36E6\u{249A9}\u5A77\u3708\u5A96\u7465\u5AD3\u{26FA1}\u{22554}\u3D85\u{21911}\u3732\u{216B8}\u5E83\u52D0\u5B76\u6588\u5B7C\u{27A0E}\u4004\u485D\u{20204}\u5BD5\u6160\u{21A34}\u{259CC}\u{205A5}\u5BF3\u5B9D\u4D10\u5C05\u{21B44}\u5C13\u73CE\u5C14\u{21CA5}\u{26B28}\u5C49\u48DD\u5C85\u5CE9\u5CEF\u5D8B\u{21DF9}\u{21E37}\u5D10\u5D18\u5D46\u{21EA4}\u5CBA\u5DD7\u82FC\u382D\u{24901}\u{22049}\u{22173}\u8287\u3836\u3BC2\u5E2E\u6A8A\u5E75\u5E7A\u{244BC}\u{20CD3}\u53A6\u4EB7\u5ED0\u53A8\u{21771}\u5E09\u5EF4\u{28482}"],
        ["fc40", "\u5EF9\u5EFB\u38A0\u5EFC\u683E\u941B\u5F0D\u{201C1}\u{2F894}\u3ADE\u48AE\u{2133A}\u5F3A\u{26888}\u{223D0}\u5F58\u{22471}\u5F63\u97BD\u{26E6E}\u5F72\u9340\u{28A36}\u5FA7\u5DB6\u3D5F\u{25250}\u{21F6A}\u{270F8}\u{22668}\u91D6\u{2029E}\u{28A29}\u6031\u6685\u{21877}\u3963\u3DC7\u3639\u5790\u{227B4}\u7971\u3E40\u609E\u60A4\u60B3\u{24982}\u{2498F}\u{27A53}\u74A4\u50E1\u5AA0\u6164\u8424\u6142\u{2F8A6}\u{26ED2}\u6181\u51F4\u{20656}\u6187\u5BAA\u{23FB7}"],
        ["fca1", "\u{2285F}\u61D3\u{28B9D}\u{2995D}\u61D0\u3932\u{22980}\u{228C1}\u6023\u615C\u651E\u638B\u{20118}\u62C5\u{21770}\u62D5\u{22E0D}\u636C\u{249DF}\u3A17\u6438\u63F8\u{2138E}\u{217FC}\u6490\u6F8A\u{22E36}\u9814\u{2408C}\u{2571D}\u64E1\u64E5\u947B\u3A66\u643A\u3A57\u654D\u6F16\u{24A28}\u{24A23}\u6585\u656D\u655F\u{2307E}\u65B5\u{24940}\u4B37\u65D1\u40D8\u{21829}\u65E0\u65E3\u5FDF\u{23400}\u6618\u{231F7}\u{231F8}\u6644\u{231A4}\u{231A5}\u664B\u{20E75}\u6667\u{251E6}\u6673\u6674\u{21E3D}\u{23231}\u{285F4}\u{231C8}\u{25313}\u77C5\u{228F7}\u99A4\u6702\u{2439C}\u{24A21}\u3B2B\u69FA\u{237C2}\u675E\u6767\u6762\u{241CD}\u{290ED}\u67D7\u44E9\u6822\u6E50\u923C\u6801\u{233E6}\u{26DA0}\u685D"],
        ["fd40", "\u{2346F}\u69E1\u6A0B\u{28ADF}\u6973\u68C3\u{235CD}\u6901\u6900\u3D32\u3A01\u{2363C}\u3B80\u67AC\u6961\u{28A4A}\u42FC\u6936\u6998\u3BA1\u{203C9}\u8363\u5090\u69F9\u{23659}\u{2212A}\u6A45\u{23703}\u6A9D\u3BF3\u67B1\u6AC8\u{2919C}\u3C0D\u6B1D\u{20923}\u60DE\u6B35\u6B74\u{227CD}\u6EB5\u{23ADB}\u{203B5}\u{21958}\u3740\u5421\u{23B5A}\u6BE1\u{23EFC}\u6BDC\u6C37\u{2248B}\u{248F1}\u{26B51}\u6C5A\u8226\u6C79\u{23DBC}\u44C5\u{23DBD}\u{241A4}\u{2490C}\u{24900}"],
        ["fda1", "\u{23CC9}\u36E5\u3CEB\u{20D32}\u9B83\u{231F9}\u{22491}\u7F8F\u6837\u{26D25}\u{26DA1}\u{26DEB}\u6D96\u6D5C\u6E7C\u6F04\u{2497F}\u{24085}\u{26E72}\u8533\u{26F74}\u51C7\u6C9C\u6E1D\u842E\u{28B21}\u6E2F\u{23E2F}\u7453\u{23F82}\u79CC\u6E4F\u5A91\u{2304B}\u6FF8\u370D\u6F9D\u{23E30}\u6EFA\u{21497}\u{2403D}\u4555\u93F0\u6F44\u6F5C\u3D4E\u6F74\u{29170}\u3D3B\u6F9F\u{24144}\u6FD3\u{24091}\u{24155}\u{24039}\u{23FF0}\u{23FB4}\u{2413F}\u51DF\u{24156}\u{24157}\u{24140}\u{261DD}\u704B\u707E\u70A7\u7081\u70CC\u70D5\u70D6\u70DF\u4104\u3DE8\u71B4\u7196\u{24277}\u712B\u7145\u5A88\u714A\u716E\u5C9C\u{24365}\u714F\u9362\u{242C1}\u712C\u{2445A}\u{24A27}\u{24A22}\u71BA\u{28BE8}\u70BD\u720E"],
        ["fe40", "\u9442\u7215\u5911\u9443\u7224\u9341\u{25605}\u722E\u7240\u{24974}\u68BD\u7255\u7257\u3E55\u{23044}\u680D\u6F3D\u7282\u732A\u732B\u{24823}\u{2882B}\u48ED\u{28804}\u7328\u732E\u73CF\u73AA\u{20C3A}\u{26A2E}\u73C9\u7449\u{241E2}\u{216E7}\u{24A24}\u6623\u36C5\u{249B7}\u{2498D}\u{249FB}\u73F7\u7415\u6903\u{24A26}\u7439\u{205C3}\u3ED7\u745C\u{228AD}\u7460\u{28EB2}\u7447\u73E4\u7476\u83B9\u746C\u3730\u7474\u93F1\u6A2C\u7482\u4953\u{24A8C}"],
        ["fea1", "\u{2415F}\u{24A79}\u{28B8F}\u5B46\u{28C03}\u{2189E}\u74C8\u{21988}\u750E\u74E9\u751E\u{28ED9}\u{21A4B}\u5BD7\u{28EAC}\u9385\u754D\u754A\u7567\u756E\u{24F82}\u3F04\u{24D13}\u758E\u745D\u759E\u75B4\u7602\u762C\u7651\u764F\u766F\u7676\u{263F5}\u7690\u81EF\u37F8\u{26911}\u{2690E}\u76A1\u76A5\u76B7\u76CC\u{26F9F}\u8462\u{2509D}\u{2517D}\u{21E1C}\u771E\u7726\u7740\u64AF\u{25220}\u7758\u{232AC}\u77AF\u{28964}\u{28968}\u{216C1}\u77F4\u7809\u{21376}\u{24A12}\u68CA\u78AF\u78C7\u78D3\u96A5\u792E\u{255E0}\u78D7\u7934\u78B1\u{2760C}\u8FB8\u8884\u{28B2B}\u{26083}\u{2261C}\u7986\u8900\u6902\u7980\u{25857}\u799D\u{27B39}\u793C\u79A9\u6E2A\u{27126}\u3EA8\u79C6\u{2910D}\u79D4"]
      ];
    }
  });

  // ../modules/cmd/node_modules/iconv-lite/encodings/dbcs-data.js
  var require_dbcs_data = __commonJS({
    "../modules/cmd/node_modules/iconv-lite/encodings/dbcs-data.js"(exports, module) {
      "use strict";
      module.exports = {
        "shiftjis": {
          type: "_dbcs",
          table: function() {
            return require_shiftjis();
          },
          encodeAdd: { "\xA5": 92, "\u203E": 126 },
          encodeSkipVals: [{ from: 60736, to: 63808 }]
        },
        "csshiftjis": "shiftjis",
        "mskanji": "shiftjis",
        "sjis": "shiftjis",
        "windows31j": "shiftjis",
        "ms31j": "shiftjis",
        "xsjis": "shiftjis",
        "windows932": "shiftjis",
        "ms932": "shiftjis",
        "932": "shiftjis",
        "cp932": "shiftjis",
        "eucjp": {
          type: "_dbcs",
          table: function() {
            return require_eucjp();
          },
          encodeAdd: { "\xA5": 92, "\u203E": 126 }
        },
        "gb2312": "cp936",
        "gb231280": "cp936",
        "gb23121980": "cp936",
        "csgb2312": "cp936",
        "csiso58gb231280": "cp936",
        "euccn": "cp936",
        "windows936": "cp936",
        "ms936": "cp936",
        "936": "cp936",
        "cp936": {
          type: "_dbcs",
          table: function() {
            return require_cp936();
          }
        },
        "gbk": {
          type: "_dbcs",
          table: function() {
            return require_cp936().concat(require_gbk_added());
          }
        },
        "xgbk": "gbk",
        "isoir58": "gbk",
        "gb18030": {
          type: "_dbcs",
          table: function() {
            return require_cp936().concat(require_gbk_added());
          },
          gb18030: function() {
            return require_gb18030_ranges();
          },
          encodeSkipVals: [128],
          encodeAdd: { "\u20AC": 41699 }
        },
        "chinese": "gb18030",
        "windows949": "cp949",
        "ms949": "cp949",
        "949": "cp949",
        "cp949": {
          type: "_dbcs",
          table: function() {
            return require_cp949();
          }
        },
        "cseuckr": "cp949",
        "csksc56011987": "cp949",
        "euckr": "cp949",
        "isoir149": "cp949",
        "korean": "cp949",
        "ksc56011987": "cp949",
        "ksc56011989": "cp949",
        "ksc5601": "cp949",
        "windows950": "cp950",
        "ms950": "cp950",
        "950": "cp950",
        "cp950": {
          type: "_dbcs",
          table: function() {
            return require_cp950();
          }
        },
        "big5": "big5hkscs",
        "big5hkscs": {
          type: "_dbcs",
          table: function() {
            return require_cp950().concat(require_big5_added());
          },
          encodeSkipVals: [
            36457,
            36463,
            36478,
            36523,
            36532,
            36557,
            36560,
            36695,
            36713,
            36718,
            36811,
            36862,
            36973,
            36986,
            37060,
            37084,
            37105,
            37311,
            37551,
            37552,
            37553,
            37554,
            37585,
            37959,
            38090,
            38361,
            38652,
            39285,
            39798,
            39800,
            39803,
            39878,
            39902,
            39916,
            39926,
            40002,
            40019,
            40034,
            40040,
            40043,
            40055,
            40124,
            40125,
            40144,
            40279,
            40282,
            40388,
            40431,
            40443,
            40617,
            40687,
            40701,
            40800,
            40907,
            41079,
            41180,
            41183,
            36812,
            37576,
            38468,
            38637,
            41636,
            41637,
            41639,
            41638,
            41676,
            41678
          ]
        },
        "cnbig5": "big5hkscs",
        "csbig5": "big5hkscs",
        "xxbig5": "big5hkscs"
      };
    }
  });

  // ../modules/cmd/node_modules/iconv-lite/encodings/index.js
  var require_encodings = __commonJS({
    "../modules/cmd/node_modules/iconv-lite/encodings/index.js"(exports, module) {
      "use strict";
      var modules = [
        require_internal(),
        require_utf32(),
        require_utf16(),
        require_utf7(),
        require_sbcs_codec(),
        require_sbcs_data(),
        require_sbcs_data_generated(),
        require_dbcs_codec(),
        require_dbcs_data()
      ];
      for (i = 0; i < modules.length; i++) {
        module = modules[i];
        for (enc in module)
          if (Object.prototype.hasOwnProperty.call(module, enc))
            exports[enc] = module[enc];
      }
      var module;
      var enc;
      var i;
    }
  });

  // ../modules/cmd/node_modules/iconv-lite/lib/streams.js
  var require_streams = __commonJS({
    "../modules/cmd/node_modules/iconv-lite/lib/streams.js"(exports, module) {
      "use strict";
      var Buffer2 = require_safer().Buffer;
      module.exports = function(stream_module) {
        var Transform = stream_module.Transform;
        function IconvLiteEncoderStream(conv, options) {
          this.conv = conv;
          options = options || {};
          options.decodeStrings = false;
          Transform.call(this, options);
        }
        IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {
          constructor: { value: IconvLiteEncoderStream }
        });
        IconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {
          if (typeof chunk != "string")
            return done(new Error("Iconv encoding stream needs strings as its input."));
          try {
            var res = this.conv.write(chunk);
            if (res && res.length)
              this.push(res);
            done();
          } catch (e) {
            done(e);
          }
        };
        IconvLiteEncoderStream.prototype._flush = function(done) {
          try {
            var res = this.conv.end();
            if (res && res.length)
              this.push(res);
            done();
          } catch (e) {
            done(e);
          }
        };
        IconvLiteEncoderStream.prototype.collect = function(cb) {
          var chunks = [];
          this.on("error", cb);
          this.on("data", function(chunk) {
            chunks.push(chunk);
          });
          this.on("end", function() {
            cb(null, Buffer2.concat(chunks));
          });
          return this;
        };
        function IconvLiteDecoderStream(conv, options) {
          this.conv = conv;
          options = options || {};
          options.encoding = this.encoding = "utf8";
          Transform.call(this, options);
        }
        IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {
          constructor: { value: IconvLiteDecoderStream }
        });
        IconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {
          if (!Buffer2.isBuffer(chunk) && !(chunk instanceof Uint8Array))
            return done(new Error("Iconv decoding stream needs buffers as its input."));
          try {
            var res = this.conv.write(chunk);
            if (res && res.length)
              this.push(res, this.encoding);
            done();
          } catch (e) {
            done(e);
          }
        };
        IconvLiteDecoderStream.prototype._flush = function(done) {
          try {
            var res = this.conv.end();
            if (res && res.length)
              this.push(res, this.encoding);
            done();
          } catch (e) {
            done(e);
          }
        };
        IconvLiteDecoderStream.prototype.collect = function(cb) {
          var res = "";
          this.on("error", cb);
          this.on("data", function(chunk) {
            res += chunk;
          });
          this.on("end", function() {
            cb(null, res);
          });
          return this;
        };
        return {
          IconvLiteEncoderStream,
          IconvLiteDecoderStream
        };
      };
    }
  });

  // ../modules/cmd/node_modules/iconv-lite/lib/index.js
  var require_lib = __commonJS({
    "../modules/cmd/node_modules/iconv-lite/lib/index.js"(exports, module) {
      "use strict";
      var Buffer2 = require_safer().Buffer;
      var bomHandling = require_bom_handling();
      var iconv2 = module.exports;
      iconv2.encodings = null;
      iconv2.defaultCharUnicode = "\uFFFD";
      iconv2.defaultCharSingleByte = "?";
      iconv2.encode = function encode(str, encoding, options) {
        str = "" + (str || "");
        var encoder = iconv2.getEncoder(encoding, options);
        var res = encoder.write(str);
        var trail = encoder.end();
        return trail && trail.length > 0 ? Buffer2.concat([res, trail]) : res;
      };
      iconv2.decode = function decode(buf, encoding, options) {
        if (typeof buf === "string") {
          if (!iconv2.skipDecodeWarning) {
            console.error("Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding");
            iconv2.skipDecodeWarning = true;
          }
          buf = Buffer2.from("" + (buf || ""), "binary");
        }
        var decoder = iconv2.getDecoder(encoding, options);
        var res = decoder.write(buf);
        var trail = decoder.end();
        return trail ? res + trail : res;
      };
      iconv2.encodingExists = function encodingExists(enc) {
        try {
          iconv2.getCodec(enc);
          return true;
        } catch (e) {
          return false;
        }
      };
      iconv2.toEncoding = iconv2.encode;
      iconv2.fromEncoding = iconv2.decode;
      iconv2._codecDataCache = {};
      iconv2.getCodec = function getCodec(encoding) {
        if (!iconv2.encodings)
          iconv2.encodings = require_encodings();
        var enc = iconv2._canonicalizeEncoding(encoding);
        var codecOptions = {};
        while (true) {
          var codec = iconv2._codecDataCache[enc];
          if (codec)
            return codec;
          var codecDef = iconv2.encodings[enc];
          switch (typeof codecDef) {
            case "string":
              enc = codecDef;
              break;
            case "object":
              for (var key in codecDef)
                codecOptions[key] = codecDef[key];
              if (!codecOptions.encodingName)
                codecOptions.encodingName = enc;
              enc = codecDef.type;
              break;
            case "function":
              if (!codecOptions.encodingName)
                codecOptions.encodingName = enc;
              codec = new codecDef(codecOptions, iconv2);
              iconv2._codecDataCache[codecOptions.encodingName] = codec;
              return codec;
            default:
              throw new Error("Encoding not recognized: '" + encoding + "' (searched as: '" + enc + "')");
          }
        }
      };
      iconv2._canonicalizeEncoding = function(encoding) {
        return ("" + encoding).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g, "");
      };
      iconv2.getEncoder = function getEncoder(encoding, options) {
        var codec = iconv2.getCodec(encoding), encoder = new codec.encoder(options, codec);
        if (codec.bomAware && options && options.addBOM)
          encoder = new bomHandling.PrependBOM(encoder, options);
        return encoder;
      };
      iconv2.getDecoder = function getDecoder(encoding, options) {
        var codec = iconv2.getCodec(encoding), decoder = new codec.decoder(options, codec);
        if (codec.bomAware && !(options && options.stripBOM === false))
          decoder = new bomHandling.StripBOM(decoder, options);
        return decoder;
      };
      iconv2.enableStreamingAPI = function enableStreamingAPI(stream_module2) {
        if (iconv2.supportsStreams)
          return;
        var streams = require_streams()(stream_module2);
        iconv2.IconvLiteEncoderStream = streams.IconvLiteEncoderStream;
        iconv2.IconvLiteDecoderStream = streams.IconvLiteDecoderStream;
        iconv2.encodeStream = function encodeStream(encoding, options) {
          return new iconv2.IconvLiteEncoderStream(iconv2.getEncoder(encoding, options), options);
        };
        iconv2.decodeStream = function decodeStream(encoding, options) {
          return new iconv2.IconvLiteDecoderStream(iconv2.getDecoder(encoding, options), options);
        };
        iconv2.supportsStreams = true;
      };
      var stream_module;
      try {
        stream_module = __require("stream");
      } catch (e) {
      }
      if (stream_module && stream_module.Transform) {
        iconv2.enableStreamingAPI(stream_module);
      } else {
        iconv2.encodeStream = iconv2.decodeStream = function() {
          throw new Error("iconv-lite Streaming API is not enabled. Use iconv.enableStreamingAPI(require('stream')); to enable it.");
        };
      }
      if (false) {
        console.error("iconv-lite warning: js files use non-utf8 encoding. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.");
      }
    }
  });

  // ../modules/cmd/index.ts
  var cmd_exports = {};
  __export(cmd_exports, {
    SetDecode: () => SetDecode,
    default: () => cmd_default,
    execFile: () => execFile,
    run: () => run,
    runSync: () => runSync,
    spawn: () => spawn
  });
  function GetStringByteLength(InputText) {
    if (Buffer.isBuffer(InputText))
      return InputText.byteLength;
    return InputText.replace(/[^\x00-\xff]/g, "01").length;
  }
  function StringToBuffer(InputText) {
    let NewBuffer = Buffer.alloc(
      GetStringByteLength(InputText) || 1,
      InputText
    );
    if (Buffer.isBuffer(InputText))
      return InputText;
    return NewBuffer;
  }
  function CommandReturnInputText(InputText) {
    let ReturnInputText = "";
    if (!InputText)
      return ReturnInputText;
    try {
      if (!Buffer.isBuffer(InputText))
        InputText = StringToBuffer(InputText);
      ReturnInputText = iconv.decode(InputText, Decode).replace(/[\r\n]+/gim, "\n");
    } catch (e) {
    }
    return ReturnInputText;
  }
  function FormatCommandInputText(Command) {
    let ReturnCmdText = "";
    if (Buffer.isBuffer(Command))
      ReturnCmdText = ReturnCmdText.concat(Command.toString());
    if (Command instanceof String)
      ReturnCmdText = ReturnCmdText.concat(String(Command));
    if (Command instanceof Set || Array.isArray(Command)) {
      let index = 0;
      for (let iterator of Command) {
        if (index !== 0)
          iterator = `"${iterator}"`;
        ReturnCmdText = ReturnCmdText.concat(iterator);
        index++;
      }
    }
    return ReturnCmdText;
  }
  var import_util, import_child_process, iconv, Decode, NodeCommand, run, runSync, SetDecode, spawn, execFile, cmd_default;
  var init_cmd = __esm({
    "../modules/cmd/index.ts"() {
      "use strict";
      import_util = __require("util");
      import_child_process = __toESM(__require("child_process"));
      iconv = require_lib();
      Decode = "cp936";
      NodeCommand = class {
        constructor() {
        }
        run(Command, Callback, Options) {
          let fun = void 0;
          if (!Command)
            throw new Error("Not Command");
          let CommandInputText = FormatCommandInputText(Command);
          let ToSpawnVarList = [CommandInputText];
          if (Callback && Options) {
            if (typeof Callback == "function" && typeof Options == "object")
              ToSpawnVarList.push(...[Options, Callback]);
            if (typeof Callback == "object" && typeof Options == "function")
              ToSpawnVarList.push(...[Callback, Options]);
          } else {
          }
          function RunAsync() {
            return new Promise(async function(resolve, reject) {
              fun = import_child_process.default.exec(CommandInputText, function(error, stdout, stderr) {
                let run2 = {
                  err: error,
                  data: CommandReturnInputText(stdout),
                  stderr: CommandReturnInputText(stderr)
                };
                if (error)
                  return reject(run2);
                resolve(run2);
              });
            });
          }
          if (Callback) {
            RunAsync().then(({ err, data, stderr }) => Callback(err, data, stderr)).catch((NodeCmdReturnResult2) => {
              let { err, data, stderr } = NodeCmdReturnResult2;
              Callback(err, data, stderr);
            });
            if (fun)
              return fun;
          } else
            return RunAsync();
        }
        runSync(Command) {
          let InputCommandText = FormatCommandInputText(Command);
          try {
            return {
              data: CommandReturnInputText(import_child_process.default.execSync(InputCommandText)),
              err: null,
              stderr: null
            };
          } catch (error) {
            return {
              data: null,
              err: error?.stderr ? CommandReturnInputText(error.stderr) : null,
              stderr: error?.stderr ? CommandReturnInputText(error.stderr) : null
            };
          }
        }
        SetDecode(decode) {
          if (!decode)
            throw new Error("Not decode");
          Decode = decode;
          return true;
        }
        spawn(file, args, callback, options) {
          if (!options)
            options = {};
          let SpawnFun = void 0;
          let SpawnFunDataList = /* @__PURE__ */ new Set();
          let DataByteLength = 0;
          let SpawnAdditionStdout = {};
          let StartSpawn4 = new Promise(async function(resolve, reject) {
            try {
              SpawnFun = import_child_process.default.spawn(file, args, options);
              SpawnAdditionStdout.on = SpawnFun?.stdout.on;
              SpawnFun?.stdout.on("data", (data) => {
                SpawnFunDataList.add(data);
                if (callback)
                  callback.apply(SpawnFun, [CommandReturnInputText(data)]);
              });
              SpawnFun?.stdout.on("close", () => {
                for (let Data of SpawnFunDataList) {
                  DataByteLength += Data.byteLength;
                }
                ;
                let ResponseData = Buffer.concat([...SpawnFunDataList], DataByteLength);
                delete StartSpawn4.HaveDataList;
                StartSpawn4.Fulfil = true;
                resolve(CommandReturnInputText(ResponseData));
              });
              SpawnAdditionStdout.ErrorList = /* @__PURE__ */ new Set();
              SpawnFun?.stdout.on("error", function(error) {
                SpawnAdditionStdout.ErrorList?.add(error);
              });
            } catch (error) {
              return reject(error);
            }
          });
          StartSpawn4.Quit = function() {
            return SpawnFun?.stdin.end();
          };
          StartSpawn4.GetDataList = function() {
            return SpawnFunDataList;
          };
          StartSpawn4.GetData = function() {
            for (let Data of SpawnFunDataList) {
              DataByteLength += Data.byteLength;
            }
            ;
            let ResponseData = Buffer.concat([...SpawnFunDataList], DataByteLength);
            return CommandReturnInputText(ResponseData);
          };
          StartSpawn4.on = SpawnAdditionStdout.on;
          StartSpawn4.ErrorList = SpawnAdditionStdout.ErrorList;
          StartSpawn4.Options = options;
          StartSpawn4.Spawn = SpawnFun;
          StartSpawn4.HaveDataList = SpawnFunDataList;
          StartSpawn4.Fulfil = false;
          return StartSpawn4;
        }
        execFile = (0, import_util.promisify)(import_child_process.default.execFile);
      };
      ({ run, runSync, SetDecode, spawn, execFile } = new NodeCommand());
      cmd_default = { run, runSync, SetDecode, spawn, execFile };
    }
  });

  // ../node_modules/universalify/index.js
  var require_universalify = __commonJS({
    "../node_modules/universalify/index.js"(exports) {
      "use strict";
      exports.fromCallback = function(fn) {
        return Object.defineProperty(function(...args) {
          if (typeof args[args.length - 1] === "function")
            fn.apply(this, args);
          else {
            return new Promise((resolve, reject) => {
              fn.call(
                this,
                ...args,
                (err, res) => err != null ? reject(err) : resolve(res)
              );
            });
          }
        }, "name", { value: fn.name });
      };
      exports.fromPromise = function(fn) {
        return Object.defineProperty(function(...args) {
          const cb = args[args.length - 1];
          if (typeof cb !== "function")
            return fn.apply(this, args);
          else
            fn.apply(this, args.slice(0, -1)).then((r) => cb(null, r), cb);
        }, "name", { value: fn.name });
      };
    }
  });

  // ../node_modules/graceful-fs/polyfills.js
  var require_polyfills = __commonJS({
    "../node_modules/graceful-fs/polyfills.js"(exports, module) {
      var constants = __require("constants");
      var origCwd = process.cwd;
      var cwd = null;
      var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;
      process.cwd = function() {
        if (!cwd)
          cwd = origCwd.call(process);
        return cwd;
      };
      try {
        process.cwd();
      } catch (er) {
      }
      if (typeof process.chdir === "function") {
        chdir = process.chdir;
        process.chdir = function(d) {
          cwd = null;
          chdir.call(process, d);
        };
        if (Object.setPrototypeOf)
          Object.setPrototypeOf(process.chdir, chdir);
      }
      var chdir;
      module.exports = patch;
      function patch(fs4) {
        if (constants.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
          patchLchmod(fs4);
        }
        if (!fs4.lutimes) {
          patchLutimes(fs4);
        }
        fs4.chown = chownFix(fs4.chown);
        fs4.fchown = chownFix(fs4.fchown);
        fs4.lchown = chownFix(fs4.lchown);
        fs4.chmod = chmodFix(fs4.chmod);
        fs4.fchmod = chmodFix(fs4.fchmod);
        fs4.lchmod = chmodFix(fs4.lchmod);
        fs4.chownSync = chownFixSync(fs4.chownSync);
        fs4.fchownSync = chownFixSync(fs4.fchownSync);
        fs4.lchownSync = chownFixSync(fs4.lchownSync);
        fs4.chmodSync = chmodFixSync(fs4.chmodSync);
        fs4.fchmodSync = chmodFixSync(fs4.fchmodSync);
        fs4.lchmodSync = chmodFixSync(fs4.lchmodSync);
        fs4.stat = statFix(fs4.stat);
        fs4.fstat = statFix(fs4.fstat);
        fs4.lstat = statFix(fs4.lstat);
        fs4.statSync = statFixSync(fs4.statSync);
        fs4.fstatSync = statFixSync(fs4.fstatSync);
        fs4.lstatSync = statFixSync(fs4.lstatSync);
        if (fs4.chmod && !fs4.lchmod) {
          fs4.lchmod = function(path6, mode, cb) {
            if (cb)
              process.nextTick(cb);
          };
          fs4.lchmodSync = function() {
          };
        }
        if (fs4.chown && !fs4.lchown) {
          fs4.lchown = function(path6, uid, gid, cb) {
            if (cb)
              process.nextTick(cb);
          };
          fs4.lchownSync = function() {
          };
        }
        if (platform === "win32") {
          fs4.rename = typeof fs4.rename !== "function" ? fs4.rename : function(fs$rename) {
            function rename(from, to, cb) {
              var start = Date.now();
              var backoff = 0;
              fs$rename(from, to, function CB(er) {
                if (er && (er.code === "EACCES" || er.code === "EPERM") && Date.now() - start < 6e4) {
                  setTimeout(function() {
                    fs4.stat(to, function(stater, st) {
                      if (stater && stater.code === "ENOENT")
                        fs$rename(from, to, CB);
                      else
                        cb(er);
                    });
                  }, backoff);
                  if (backoff < 100)
                    backoff += 10;
                  return;
                }
                if (cb)
                  cb(er);
              });
            }
            if (Object.setPrototypeOf)
              Object.setPrototypeOf(rename, fs$rename);
            return rename;
          }(fs4.rename);
        }
        fs4.read = typeof fs4.read !== "function" ? fs4.read : function(fs$read) {
          function read(fd, buffer, offset, length, position, callback_) {
            var callback;
            if (callback_ && typeof callback_ === "function") {
              var eagCounter = 0;
              callback = function(er, _, __) {
                if (er && er.code === "EAGAIN" && eagCounter < 10) {
                  eagCounter++;
                  return fs$read.call(fs4, fd, buffer, offset, length, position, callback);
                }
                callback_.apply(this, arguments);
              };
            }
            return fs$read.call(fs4, fd, buffer, offset, length, position, callback);
          }
          if (Object.setPrototypeOf)
            Object.setPrototypeOf(read, fs$read);
          return read;
        }(fs4.read);
        fs4.readSync = typeof fs4.readSync !== "function" ? fs4.readSync : function(fs$readSync) {
          return function(fd, buffer, offset, length, position) {
            var eagCounter = 0;
            while (true) {
              try {
                return fs$readSync.call(fs4, fd, buffer, offset, length, position);
              } catch (er) {
                if (er.code === "EAGAIN" && eagCounter < 10) {
                  eagCounter++;
                  continue;
                }
                throw er;
              }
            }
          };
        }(fs4.readSync);
        function patchLchmod(fs5) {
          fs5.lchmod = function(path6, mode, callback) {
            fs5.open(
              path6,
              constants.O_WRONLY | constants.O_SYMLINK,
              mode,
              function(err, fd) {
                if (err) {
                  if (callback)
                    callback(err);
                  return;
                }
                fs5.fchmod(fd, mode, function(err2) {
                  fs5.close(fd, function(err22) {
                    if (callback)
                      callback(err2 || err22);
                  });
                });
              }
            );
          };
          fs5.lchmodSync = function(path6, mode) {
            var fd = fs5.openSync(path6, constants.O_WRONLY | constants.O_SYMLINK, mode);
            var threw = true;
            var ret;
            try {
              ret = fs5.fchmodSync(fd, mode);
              threw = false;
            } finally {
              if (threw) {
                try {
                  fs5.closeSync(fd);
                } catch (er) {
                }
              } else {
                fs5.closeSync(fd);
              }
            }
            return ret;
          };
        }
        function patchLutimes(fs5) {
          if (constants.hasOwnProperty("O_SYMLINK") && fs5.futimes) {
            fs5.lutimes = function(path6, at, mt, cb) {
              fs5.open(path6, constants.O_SYMLINK, function(er, fd) {
                if (er) {
                  if (cb)
                    cb(er);
                  return;
                }
                fs5.futimes(fd, at, mt, function(er2) {
                  fs5.close(fd, function(er22) {
                    if (cb)
                      cb(er2 || er22);
                  });
                });
              });
            };
            fs5.lutimesSync = function(path6, at, mt) {
              var fd = fs5.openSync(path6, constants.O_SYMLINK);
              var ret;
              var threw = true;
              try {
                ret = fs5.futimesSync(fd, at, mt);
                threw = false;
              } finally {
                if (threw) {
                  try {
                    fs5.closeSync(fd);
                  } catch (er) {
                  }
                } else {
                  fs5.closeSync(fd);
                }
              }
              return ret;
            };
          } else if (fs5.futimes) {
            fs5.lutimes = function(_a, _b, _c, cb) {
              if (cb)
                process.nextTick(cb);
            };
            fs5.lutimesSync = function() {
            };
          }
        }
        function chmodFix(orig) {
          if (!orig)
            return orig;
          return function(target, mode, cb) {
            return orig.call(fs4, target, mode, function(er) {
              if (chownErOk(er))
                er = null;
              if (cb)
                cb.apply(this, arguments);
            });
          };
        }
        function chmodFixSync(orig) {
          if (!orig)
            return orig;
          return function(target, mode) {
            try {
              return orig.call(fs4, target, mode);
            } catch (er) {
              if (!chownErOk(er))
                throw er;
            }
          };
        }
        function chownFix(orig) {
          if (!orig)
            return orig;
          return function(target, uid, gid, cb) {
            return orig.call(fs4, target, uid, gid, function(er) {
              if (chownErOk(er))
                er = null;
              if (cb)
                cb.apply(this, arguments);
            });
          };
        }
        function chownFixSync(orig) {
          if (!orig)
            return orig;
          return function(target, uid, gid) {
            try {
              return orig.call(fs4, target, uid, gid);
            } catch (er) {
              if (!chownErOk(er))
                throw er;
            }
          };
        }
        function statFix(orig) {
          if (!orig)
            return orig;
          return function(target, options, cb) {
            if (typeof options === "function") {
              cb = options;
              options = null;
            }
            function callback(er, stats) {
              if (stats) {
                if (stats.uid < 0)
                  stats.uid += 4294967296;
                if (stats.gid < 0)
                  stats.gid += 4294967296;
              }
              if (cb)
                cb.apply(this, arguments);
            }
            return options ? orig.call(fs4, target, options, callback) : orig.call(fs4, target, callback);
          };
        }
        function statFixSync(orig) {
          if (!orig)
            return orig;
          return function(target, options) {
            var stats = options ? orig.call(fs4, target, options) : orig.call(fs4, target);
            if (stats) {
              if (stats.uid < 0)
                stats.uid += 4294967296;
              if (stats.gid < 0)
                stats.gid += 4294967296;
            }
            return stats;
          };
        }
        function chownErOk(er) {
          if (!er)
            return true;
          if (er.code === "ENOSYS")
            return true;
          var nonroot = !process.getuid || process.getuid() !== 0;
          if (nonroot) {
            if (er.code === "EINVAL" || er.code === "EPERM")
              return true;
          }
          return false;
        }
      }
    }
  });

  // ../node_modules/graceful-fs/legacy-streams.js
  var require_legacy_streams = __commonJS({
    "../node_modules/graceful-fs/legacy-streams.js"(exports, module) {
      var Stream = __require("stream").Stream;
      module.exports = legacy;
      function legacy(fs4) {
        return {
          ReadStream,
          WriteStream
        };
        function ReadStream(path6, options) {
          if (!(this instanceof ReadStream))
            return new ReadStream(path6, options);
          Stream.call(this);
          var self2 = this;
          this.path = path6;
          this.fd = null;
          this.readable = true;
          this.paused = false;
          this.flags = "r";
          this.mode = 438;
          this.bufferSize = 64 * 1024;
          options = options || {};
          var keys = Object.keys(options);
          for (var index = 0, length = keys.length; index < length; index++) {
            var key = keys[index];
            this[key] = options[key];
          }
          if (this.encoding)
            this.setEncoding(this.encoding);
          if (this.start !== void 0) {
            if ("number" !== typeof this.start) {
              throw TypeError("start must be a Number");
            }
            if (this.end === void 0) {
              this.end = Infinity;
            } else if ("number" !== typeof this.end) {
              throw TypeError("end must be a Number");
            }
            if (this.start > this.end) {
              throw new Error("start must be <= end");
            }
            this.pos = this.start;
          }
          if (this.fd !== null) {
            process.nextTick(function() {
              self2._read();
            });
            return;
          }
          fs4.open(this.path, this.flags, this.mode, function(err, fd) {
            if (err) {
              self2.emit("error", err);
              self2.readable = false;
              return;
            }
            self2.fd = fd;
            self2.emit("open", fd);
            self2._read();
          });
        }
        function WriteStream(path6, options) {
          if (!(this instanceof WriteStream))
            return new WriteStream(path6, options);
          Stream.call(this);
          this.path = path6;
          this.fd = null;
          this.writable = true;
          this.flags = "w";
          this.encoding = "binary";
          this.mode = 438;
          this.bytesWritten = 0;
          options = options || {};
          var keys = Object.keys(options);
          for (var index = 0, length = keys.length; index < length; index++) {
            var key = keys[index];
            this[key] = options[key];
          }
          if (this.start !== void 0) {
            if ("number" !== typeof this.start) {
              throw TypeError("start must be a Number");
            }
            if (this.start < 0) {
              throw new Error("start must be >= zero");
            }
            this.pos = this.start;
          }
          this.busy = false;
          this._queue = [];
          if (this.fd === null) {
            this._open = fs4.open;
            this._queue.push([this._open, this.path, this.flags, this.mode, void 0]);
            this.flush();
          }
        }
      }
    }
  });

  // ../node_modules/graceful-fs/clone.js
  var require_clone = __commonJS({
    "../node_modules/graceful-fs/clone.js"(exports, module) {
      "use strict";
      module.exports = clone;
      var getPrototypeOf = Object.getPrototypeOf || function(obj) {
        return obj.__proto__;
      };
      function clone(obj) {
        if (obj === null || typeof obj !== "object")
          return obj;
        if (obj instanceof Object)
          var copy = { __proto__: getPrototypeOf(obj) };
        else
          var copy = /* @__PURE__ */ Object.create(null);
        Object.getOwnPropertyNames(obj).forEach(function(key) {
          Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
        });
        return copy;
      }
    }
  });

  // ../node_modules/graceful-fs/graceful-fs.js
  var require_graceful_fs = __commonJS({
    "../node_modules/graceful-fs/graceful-fs.js"(exports, module) {
      var fs4 = __require("fs");
      var polyfills = require_polyfills();
      var legacy = require_legacy_streams();
      var clone = require_clone();
      var util = __require("util");
      var gracefulQueue;
      var previousSymbol;
      if (typeof Symbol === "function" && typeof Symbol.for === "function") {
        gracefulQueue = Symbol.for("graceful-fs.queue");
        previousSymbol = Symbol.for("graceful-fs.previous");
      } else {
        gracefulQueue = "___graceful-fs.queue";
        previousSymbol = "___graceful-fs.previous";
      }
      function noop() {
      }
      function publishQueue(context, queue2) {
        Object.defineProperty(context, gracefulQueue, {
          get: function() {
            return queue2;
          }
        });
      }
      var debug = noop;
      if (util.debuglog)
        debug = util.debuglog("gfs4");
      else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ""))
        debug = function() {
          var m = util.format.apply(util, arguments);
          m = "GFS4: " + m.split(/\n/).join("\nGFS4: ");
          console.error(m);
        };
      if (!fs4[gracefulQueue]) {
        queue = global[gracefulQueue] || [];
        publishQueue(fs4, queue);
        fs4.close = function(fs$close) {
          function close(fd, cb) {
            return fs$close.call(fs4, fd, function(err) {
              if (!err) {
                resetQueue();
              }
              if (typeof cb === "function")
                cb.apply(this, arguments);
            });
          }
          Object.defineProperty(close, previousSymbol, {
            value: fs$close
          });
          return close;
        }(fs4.close);
        fs4.closeSync = function(fs$closeSync) {
          function closeSync(fd) {
            fs$closeSync.apply(fs4, arguments);
            resetQueue();
          }
          Object.defineProperty(closeSync, previousSymbol, {
            value: fs$closeSync
          });
          return closeSync;
        }(fs4.closeSync);
        if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) {
          process.on("exit", function() {
            debug(fs4[gracefulQueue]);
            __require("assert").equal(fs4[gracefulQueue].length, 0);
          });
        }
      }
      var queue;
      if (!global[gracefulQueue]) {
        publishQueue(global, fs4[gracefulQueue]);
      }
      module.exports = patch(clone(fs4));
      if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs4.__patched) {
        module.exports = patch(fs4);
        fs4.__patched = true;
      }
      function patch(fs5) {
        polyfills(fs5);
        fs5.gracefulify = patch;
        fs5.createReadStream = createReadStream;
        fs5.createWriteStream = createWriteStream;
        var fs$readFile = fs5.readFile;
        fs5.readFile = readFile;
        function readFile(path6, options, cb) {
          if (typeof options === "function")
            cb = options, options = null;
          return go$readFile(path6, options, cb);
          function go$readFile(path7, options2, cb2, startTime) {
            return fs$readFile(path7, options2, function(err) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([go$readFile, [path7, options2, cb2], err, startTime || Date.now(), Date.now()]);
              else {
                if (typeof cb2 === "function")
                  cb2.apply(this, arguments);
              }
            });
          }
        }
        var fs$writeFile = fs5.writeFile;
        fs5.writeFile = writeFile2;
        function writeFile2(path6, data, options, cb) {
          if (typeof options === "function")
            cb = options, options = null;
          return go$writeFile(path6, data, options, cb);
          function go$writeFile(path7, data2, options2, cb2, startTime) {
            return fs$writeFile(path7, data2, options2, function(err) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([go$writeFile, [path7, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
              else {
                if (typeof cb2 === "function")
                  cb2.apply(this, arguments);
              }
            });
          }
        }
        var fs$appendFile = fs5.appendFile;
        if (fs$appendFile)
          fs5.appendFile = appendFile;
        function appendFile(path6, data, options, cb) {
          if (typeof options === "function")
            cb = options, options = null;
          return go$appendFile(path6, data, options, cb);
          function go$appendFile(path7, data2, options2, cb2, startTime) {
            return fs$appendFile(path7, data2, options2, function(err) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([go$appendFile, [path7, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
              else {
                if (typeof cb2 === "function")
                  cb2.apply(this, arguments);
              }
            });
          }
        }
        var fs$copyFile = fs5.copyFile;
        if (fs$copyFile)
          fs5.copyFile = copyFile;
        function copyFile(src, dest, flags, cb) {
          if (typeof flags === "function") {
            cb = flags;
            flags = 0;
          }
          return go$copyFile(src, dest, flags, cb);
          function go$copyFile(src2, dest2, flags2, cb2, startTime) {
            return fs$copyFile(src2, dest2, flags2, function(err) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([go$copyFile, [src2, dest2, flags2, cb2], err, startTime || Date.now(), Date.now()]);
              else {
                if (typeof cb2 === "function")
                  cb2.apply(this, arguments);
              }
            });
          }
        }
        var fs$readdir = fs5.readdir;
        fs5.readdir = readdir;
        var noReaddirOptionVersions = /^v[0-5]\./;
        function readdir(path6, options, cb) {
          if (typeof options === "function")
            cb = options, options = null;
          var go$readdir = noReaddirOptionVersions.test(process.version) ? function go$readdir2(path7, options2, cb2, startTime) {
            return fs$readdir(path7, fs$readdirCallback(
              path7,
              options2,
              cb2,
              startTime
            ));
          } : function go$readdir2(path7, options2, cb2, startTime) {
            return fs$readdir(path7, options2, fs$readdirCallback(
              path7,
              options2,
              cb2,
              startTime
            ));
          };
          return go$readdir(path6, options, cb);
          function fs$readdirCallback(path7, options2, cb2, startTime) {
            return function(err, files) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([
                  go$readdir,
                  [path7, options2, cb2],
                  err,
                  startTime || Date.now(),
                  Date.now()
                ]);
              else {
                if (files && files.sort)
                  files.sort();
                if (typeof cb2 === "function")
                  cb2.call(this, err, files);
              }
            };
          }
        }
        if (process.version.substr(0, 4) === "v0.8") {
          var legStreams = legacy(fs5);
          ReadStream = legStreams.ReadStream;
          WriteStream = legStreams.WriteStream;
        }
        var fs$ReadStream = fs5.ReadStream;
        if (fs$ReadStream) {
          ReadStream.prototype = Object.create(fs$ReadStream.prototype);
          ReadStream.prototype.open = ReadStream$open;
        }
        var fs$WriteStream = fs5.WriteStream;
        if (fs$WriteStream) {
          WriteStream.prototype = Object.create(fs$WriteStream.prototype);
          WriteStream.prototype.open = WriteStream$open;
        }
        Object.defineProperty(fs5, "ReadStream", {
          get: function() {
            return ReadStream;
          },
          set: function(val) {
            ReadStream = val;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(fs5, "WriteStream", {
          get: function() {
            return WriteStream;
          },
          set: function(val) {
            WriteStream = val;
          },
          enumerable: true,
          configurable: true
        });
        var FileReadStream = ReadStream;
        Object.defineProperty(fs5, "FileReadStream", {
          get: function() {
            return FileReadStream;
          },
          set: function(val) {
            FileReadStream = val;
          },
          enumerable: true,
          configurable: true
        });
        var FileWriteStream = WriteStream;
        Object.defineProperty(fs5, "FileWriteStream", {
          get: function() {
            return FileWriteStream;
          },
          set: function(val) {
            FileWriteStream = val;
          },
          enumerable: true,
          configurable: true
        });
        function ReadStream(path6, options) {
          if (this instanceof ReadStream)
            return fs$ReadStream.apply(this, arguments), this;
          else
            return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
        }
        function ReadStream$open() {
          var that = this;
          open2(that.path, that.flags, that.mode, function(err, fd) {
            if (err) {
              if (that.autoClose)
                that.destroy();
              that.emit("error", err);
            } else {
              that.fd = fd;
              that.emit("open", fd);
              that.read();
            }
          });
        }
        function WriteStream(path6, options) {
          if (this instanceof WriteStream)
            return fs$WriteStream.apply(this, arguments), this;
          else
            return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
        }
        function WriteStream$open() {
          var that = this;
          open2(that.path, that.flags, that.mode, function(err, fd) {
            if (err) {
              that.destroy();
              that.emit("error", err);
            } else {
              that.fd = fd;
              that.emit("open", fd);
            }
          });
        }
        function createReadStream(path6, options) {
          return new fs5.ReadStream(path6, options);
        }
        function createWriteStream(path6, options) {
          return new fs5.WriteStream(path6, options);
        }
        var fs$open = fs5.open;
        fs5.open = open2;
        function open2(path6, flags, mode, cb) {
          if (typeof mode === "function")
            cb = mode, mode = null;
          return go$open(path6, flags, mode, cb);
          function go$open(path7, flags2, mode2, cb2, startTime) {
            return fs$open(path7, flags2, mode2, function(err, fd) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([go$open, [path7, flags2, mode2, cb2], err, startTime || Date.now(), Date.now()]);
              else {
                if (typeof cb2 === "function")
                  cb2.apply(this, arguments);
              }
            });
          }
        }
        return fs5;
      }
      function enqueue(elem) {
        debug("ENQUEUE", elem[0].name, elem[1]);
        fs4[gracefulQueue].push(elem);
        retry();
      }
      var retryTimer;
      function resetQueue() {
        var now = Date.now();
        for (var i = 0; i < fs4[gracefulQueue].length; ++i) {
          if (fs4[gracefulQueue][i].length > 2) {
            fs4[gracefulQueue][i][3] = now;
            fs4[gracefulQueue][i][4] = now;
          }
        }
        retry();
      }
      function retry() {
        clearTimeout(retryTimer);
        retryTimer = void 0;
        if (fs4[gracefulQueue].length === 0)
          return;
        var elem = fs4[gracefulQueue].shift();
        var fn = elem[0];
        var args = elem[1];
        var err = elem[2];
        var startTime = elem[3];
        var lastTime = elem[4];
        if (startTime === void 0) {
          debug("RETRY", fn.name, args);
          fn.apply(null, args);
        } else if (Date.now() - startTime >= 6e4) {
          debug("TIMEOUT", fn.name, args);
          var cb = args.pop();
          if (typeof cb === "function")
            cb.call(null, err);
        } else {
          var sinceAttempt = Date.now() - lastTime;
          var sinceStart = Math.max(lastTime - startTime, 1);
          var desiredDelay = Math.min(sinceStart * 1.2, 100);
          if (sinceAttempt >= desiredDelay) {
            debug("RETRY", fn.name, args);
            fn.apply(null, args.concat([startTime]));
          } else {
            fs4[gracefulQueue].push(elem);
          }
        }
        if (retryTimer === void 0) {
          retryTimer = setTimeout(retry, 0);
        }
      }
    }
  });

  // ../node_modules/fs-extra/lib/fs/index.js
  var require_fs = __commonJS({
    "../node_modules/fs-extra/lib/fs/index.js"(exports) {
      "use strict";
      var u = require_universalify().fromCallback;
      var fs4 = require_graceful_fs();
      var api = [
        "access",
        "appendFile",
        "chmod",
        "chown",
        "close",
        "copyFile",
        "fchmod",
        "fchown",
        "fdatasync",
        "fstat",
        "fsync",
        "ftruncate",
        "futimes",
        "lchmod",
        "lchown",
        "link",
        "lstat",
        "mkdir",
        "mkdtemp",
        "open",
        "opendir",
        "readdir",
        "readFile",
        "readlink",
        "realpath",
        "rename",
        "rm",
        "rmdir",
        "stat",
        "symlink",
        "truncate",
        "unlink",
        "utimes",
        "writeFile"
      ].filter((key) => {
        return typeof fs4[key] === "function";
      });
      Object.assign(exports, fs4);
      api.forEach((method) => {
        exports[method] = u(fs4[method]);
      });
      exports.exists = function(filename, callback) {
        if (typeof callback === "function") {
          return fs4.exists(filename, callback);
        }
        return new Promise((resolve) => {
          return fs4.exists(filename, resolve);
        });
      };
      exports.read = function(fd, buffer, offset, length, position, callback) {
        if (typeof callback === "function") {
          return fs4.read(fd, buffer, offset, length, position, callback);
        }
        return new Promise((resolve, reject) => {
          fs4.read(fd, buffer, offset, length, position, (err, bytesRead, buffer2) => {
            if (err)
              return reject(err);
            resolve({ bytesRead, buffer: buffer2 });
          });
        });
      };
      exports.write = function(fd, buffer, ...args) {
        if (typeof args[args.length - 1] === "function") {
          return fs4.write(fd, buffer, ...args);
        }
        return new Promise((resolve, reject) => {
          fs4.write(fd, buffer, ...args, (err, bytesWritten, buffer2) => {
            if (err)
              return reject(err);
            resolve({ bytesWritten, buffer: buffer2 });
          });
        });
      };
      if (typeof fs4.writev === "function") {
        exports.writev = function(fd, buffers, ...args) {
          if (typeof args[args.length - 1] === "function") {
            return fs4.writev(fd, buffers, ...args);
          }
          return new Promise((resolve, reject) => {
            fs4.writev(fd, buffers, ...args, (err, bytesWritten, buffers2) => {
              if (err)
                return reject(err);
              resolve({ bytesWritten, buffers: buffers2 });
            });
          });
        };
      }
      if (typeof fs4.realpath.native === "function") {
        exports.realpath.native = u(fs4.realpath.native);
      } else {
        process.emitWarning(
          "fs.realpath.native is not a function. Is fs being monkey-patched?",
          "Warning",
          "fs-extra-WARN0003"
        );
      }
    }
  });

  // ../node_modules/fs-extra/lib/mkdirs/utils.js
  var require_utils = __commonJS({
    "../node_modules/fs-extra/lib/mkdirs/utils.js"(exports, module) {
      "use strict";
      var path6 = __require("path");
      module.exports.checkPath = function checkPath(pth) {
        if (process.platform === "win32") {
          const pathHasInvalidWinCharacters = /[<>:"|?*]/.test(pth.replace(path6.parse(pth).root, ""));
          if (pathHasInvalidWinCharacters) {
            const error = new Error(`Path contains invalid characters: ${pth}`);
            error.code = "EINVAL";
            throw error;
          }
        }
      };
    }
  });

  // ../node_modules/fs-extra/lib/mkdirs/make-dir.js
  var require_make_dir = __commonJS({
    "../node_modules/fs-extra/lib/mkdirs/make-dir.js"(exports, module) {
      "use strict";
      var fs4 = require_fs();
      var { checkPath } = require_utils();
      var getMode = (options) => {
        const defaults = { mode: 511 };
        if (typeof options === "number")
          return options;
        return { ...defaults, ...options }.mode;
      };
      module.exports.makeDir = async (dir, options) => {
        checkPath(dir);
        return fs4.mkdir(dir, {
          mode: getMode(options),
          recursive: true
        });
      };
      module.exports.makeDirSync = (dir, options) => {
        checkPath(dir);
        return fs4.mkdirSync(dir, {
          mode: getMode(options),
          recursive: true
        });
      };
    }
  });

  // ../node_modules/fs-extra/lib/mkdirs/index.js
  var require_mkdirs = __commonJS({
    "../node_modules/fs-extra/lib/mkdirs/index.js"(exports, module) {
      "use strict";
      var u = require_universalify().fromPromise;
      var { makeDir: _makeDir, makeDirSync } = require_make_dir();
      var makeDir = u(_makeDir);
      module.exports = {
        mkdirs: makeDir,
        mkdirsSync: makeDirSync,
        mkdirp: makeDir,
        mkdirpSync: makeDirSync,
        ensureDir: makeDir,
        ensureDirSync: makeDirSync
      };
    }
  });

  // ../node_modules/fs-extra/lib/path-exists/index.js
  var require_path_exists = __commonJS({
    "../node_modules/fs-extra/lib/path-exists/index.js"(exports, module) {
      "use strict";
      var u = require_universalify().fromPromise;
      var fs4 = require_fs();
      function pathExists2(path6) {
        return fs4.access(path6).then(() => true).catch(() => false);
      }
      module.exports = {
        pathExists: u(pathExists2),
        pathExistsSync: fs4.existsSync
      };
    }
  });

  // ../node_modules/fs-extra/lib/util/utimes.js
  var require_utimes = __commonJS({
    "../node_modules/fs-extra/lib/util/utimes.js"(exports, module) {
      "use strict";
      var fs4 = require_graceful_fs();
      function utimesMillis(path6, atime, mtime, callback) {
        fs4.open(path6, "r+", (err, fd) => {
          if (err)
            return callback(err);
          fs4.futimes(fd, atime, mtime, (futimesErr) => {
            fs4.close(fd, (closeErr) => {
              if (callback)
                callback(futimesErr || closeErr);
            });
          });
        });
      }
      function utimesMillisSync(path6, atime, mtime) {
        const fd = fs4.openSync(path6, "r+");
        fs4.futimesSync(fd, atime, mtime);
        return fs4.closeSync(fd);
      }
      module.exports = {
        utimesMillis,
        utimesMillisSync
      };
    }
  });

  // ../node_modules/fs-extra/lib/util/stat.js
  var require_stat = __commonJS({
    "../node_modules/fs-extra/lib/util/stat.js"(exports, module) {
      "use strict";
      var fs4 = require_fs();
      var path6 = __require("path");
      var util = __require("util");
      function getStats(src, dest, opts) {
        const statFunc = opts.dereference ? (file) => fs4.stat(file, { bigint: true }) : (file) => fs4.lstat(file, { bigint: true });
        return Promise.all([
          statFunc(src),
          statFunc(dest).catch((err) => {
            if (err.code === "ENOENT")
              return null;
            throw err;
          })
        ]).then(([srcStat, destStat]) => ({ srcStat, destStat }));
      }
      function getStatsSync(src, dest, opts) {
        let destStat;
        const statFunc = opts.dereference ? (file) => fs4.statSync(file, { bigint: true }) : (file) => fs4.lstatSync(file, { bigint: true });
        const srcStat = statFunc(src);
        try {
          destStat = statFunc(dest);
        } catch (err) {
          if (err.code === "ENOENT")
            return { srcStat, destStat: null };
          throw err;
        }
        return { srcStat, destStat };
      }
      function checkPaths(src, dest, funcName, opts, cb) {
        util.callbackify(getStats)(src, dest, opts, (err, stats) => {
          if (err)
            return cb(err);
          const { srcStat, destStat } = stats;
          if (destStat) {
            if (areIdentical(srcStat, destStat)) {
              const srcBaseName = path6.basename(src);
              const destBaseName = path6.basename(dest);
              if (funcName === "move" && srcBaseName !== destBaseName && srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {
                return cb(null, { srcStat, destStat, isChangingCase: true });
              }
              return cb(new Error("Source and destination must not be the same."));
            }
            if (srcStat.isDirectory() && !destStat.isDirectory()) {
              return cb(new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`));
            }
            if (!srcStat.isDirectory() && destStat.isDirectory()) {
              return cb(new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`));
            }
          }
          if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
            return cb(new Error(errMsg(src, dest, funcName)));
          }
          return cb(null, { srcStat, destStat });
        });
      }
      function checkPathsSync(src, dest, funcName, opts) {
        const { srcStat, destStat } = getStatsSync(src, dest, opts);
        if (destStat) {
          if (areIdentical(srcStat, destStat)) {
            const srcBaseName = path6.basename(src);
            const destBaseName = path6.basename(dest);
            if (funcName === "move" && srcBaseName !== destBaseName && srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {
              return { srcStat, destStat, isChangingCase: true };
            }
            throw new Error("Source and destination must not be the same.");
          }
          if (srcStat.isDirectory() && !destStat.isDirectory()) {
            throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`);
          }
          if (!srcStat.isDirectory() && destStat.isDirectory()) {
            throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`);
          }
        }
        if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
          throw new Error(errMsg(src, dest, funcName));
        }
        return { srcStat, destStat };
      }
      function checkParentPaths(src, srcStat, dest, funcName, cb) {
        const srcParent = path6.resolve(path6.dirname(src));
        const destParent = path6.resolve(path6.dirname(dest));
        if (destParent === srcParent || destParent === path6.parse(destParent).root)
          return cb();
        fs4.stat(destParent, { bigint: true }, (err, destStat) => {
          if (err) {
            if (err.code === "ENOENT")
              return cb();
            return cb(err);
          }
          if (areIdentical(srcStat, destStat)) {
            return cb(new Error(errMsg(src, dest, funcName)));
          }
          return checkParentPaths(src, srcStat, destParent, funcName, cb);
        });
      }
      function checkParentPathsSync(src, srcStat, dest, funcName) {
        const srcParent = path6.resolve(path6.dirname(src));
        const destParent = path6.resolve(path6.dirname(dest));
        if (destParent === srcParent || destParent === path6.parse(destParent).root)
          return;
        let destStat;
        try {
          destStat = fs4.statSync(destParent, { bigint: true });
        } catch (err) {
          if (err.code === "ENOENT")
            return;
          throw err;
        }
        if (areIdentical(srcStat, destStat)) {
          throw new Error(errMsg(src, dest, funcName));
        }
        return checkParentPathsSync(src, srcStat, destParent, funcName);
      }
      function areIdentical(srcStat, destStat) {
        return destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev;
      }
      function isSrcSubdir(src, dest) {
        const srcArr = path6.resolve(src).split(path6.sep).filter((i) => i);
        const destArr = path6.resolve(dest).split(path6.sep).filter((i) => i);
        return srcArr.reduce((acc, cur, i) => acc && destArr[i] === cur, true);
      }
      function errMsg(src, dest, funcName) {
        return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`;
      }
      module.exports = {
        checkPaths,
        checkPathsSync,
        checkParentPaths,
        checkParentPathsSync,
        isSrcSubdir,
        areIdentical
      };
    }
  });

  // ../node_modules/fs-extra/lib/copy/copy.js
  var require_copy = __commonJS({
    "../node_modules/fs-extra/lib/copy/copy.js"(exports, module) {
      "use strict";
      var fs4 = require_graceful_fs();
      var path6 = __require("path");
      var mkdirs = require_mkdirs().mkdirs;
      var pathExists2 = require_path_exists().pathExists;
      var utimesMillis = require_utimes().utimesMillis;
      var stat = require_stat();
      function copy(src, dest, opts, cb) {
        if (typeof opts === "function" && !cb) {
          cb = opts;
          opts = {};
        } else if (typeof opts === "function") {
          opts = { filter: opts };
        }
        cb = cb || function() {
        };
        opts = opts || {};
        opts.clobber = "clobber" in opts ? !!opts.clobber : true;
        opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
        if (opts.preserveTimestamps && process.arch === "ia32") {
          process.emitWarning(
            "Using the preserveTimestamps option in 32-bit node is not recommended;\n\n	see https://github.com/jprichardson/node-fs-extra/issues/269",
            "Warning",
            "fs-extra-WARN0001"
          );
        }
        stat.checkPaths(src, dest, "copy", opts, (err, stats) => {
          if (err)
            return cb(err);
          const { srcStat, destStat } = stats;
          stat.checkParentPaths(src, srcStat, dest, "copy", (err2) => {
            if (err2)
              return cb(err2);
            if (opts.filter)
              return handleFilter(checkParentDir, destStat, src, dest, opts, cb);
            return checkParentDir(destStat, src, dest, opts, cb);
          });
        });
      }
      function checkParentDir(destStat, src, dest, opts, cb) {
        const destParent = path6.dirname(dest);
        pathExists2(destParent, (err, dirExists) => {
          if (err)
            return cb(err);
          if (dirExists)
            return getStats(destStat, src, dest, opts, cb);
          mkdirs(destParent, (err2) => {
            if (err2)
              return cb(err2);
            return getStats(destStat, src, dest, opts, cb);
          });
        });
      }
      function handleFilter(onInclude, destStat, src, dest, opts, cb) {
        Promise.resolve(opts.filter(src, dest)).then((include) => {
          if (include)
            return onInclude(destStat, src, dest, opts, cb);
          return cb();
        }, (error) => cb(error));
      }
      function startCopy(destStat, src, dest, opts, cb) {
        if (opts.filter)
          return handleFilter(getStats, destStat, src, dest, opts, cb);
        return getStats(destStat, src, dest, opts, cb);
      }
      function getStats(destStat, src, dest, opts, cb) {
        const stat2 = opts.dereference ? fs4.stat : fs4.lstat;
        stat2(src, (err, srcStat) => {
          if (err)
            return cb(err);
          if (srcStat.isDirectory())
            return onDir(srcStat, destStat, src, dest, opts, cb);
          else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice())
            return onFile(srcStat, destStat, src, dest, opts, cb);
          else if (srcStat.isSymbolicLink())
            return onLink(destStat, src, dest, opts, cb);
          else if (srcStat.isSocket())
            return cb(new Error(`Cannot copy a socket file: ${src}`));
          else if (srcStat.isFIFO())
            return cb(new Error(`Cannot copy a FIFO pipe: ${src}`));
          return cb(new Error(`Unknown file: ${src}`));
        });
      }
      function onFile(srcStat, destStat, src, dest, opts, cb) {
        if (!destStat)
          return copyFile(srcStat, src, dest, opts, cb);
        return mayCopyFile(srcStat, src, dest, opts, cb);
      }
      function mayCopyFile(srcStat, src, dest, opts, cb) {
        if (opts.overwrite) {
          fs4.unlink(dest, (err) => {
            if (err)
              return cb(err);
            return copyFile(srcStat, src, dest, opts, cb);
          });
        } else if (opts.errorOnExist) {
          return cb(new Error(`'${dest}' already exists`));
        } else
          return cb();
      }
      function copyFile(srcStat, src, dest, opts, cb) {
        fs4.copyFile(src, dest, (err) => {
          if (err)
            return cb(err);
          if (opts.preserveTimestamps)
            return handleTimestampsAndMode(srcStat.mode, src, dest, cb);
          return setDestMode(dest, srcStat.mode, cb);
        });
      }
      function handleTimestampsAndMode(srcMode, src, dest, cb) {
        if (fileIsNotWritable(srcMode)) {
          return makeFileWritable(dest, srcMode, (err) => {
            if (err)
              return cb(err);
            return setDestTimestampsAndMode(srcMode, src, dest, cb);
          });
        }
        return setDestTimestampsAndMode(srcMode, src, dest, cb);
      }
      function fileIsNotWritable(srcMode) {
        return (srcMode & 128) === 0;
      }
      function makeFileWritable(dest, srcMode, cb) {
        return setDestMode(dest, srcMode | 128, cb);
      }
      function setDestTimestampsAndMode(srcMode, src, dest, cb) {
        setDestTimestamps(src, dest, (err) => {
          if (err)
            return cb(err);
          return setDestMode(dest, srcMode, cb);
        });
      }
      function setDestMode(dest, srcMode, cb) {
        return fs4.chmod(dest, srcMode, cb);
      }
      function setDestTimestamps(src, dest, cb) {
        fs4.stat(src, (err, updatedSrcStat) => {
          if (err)
            return cb(err);
          return utimesMillis(dest, updatedSrcStat.atime, updatedSrcStat.mtime, cb);
        });
      }
      function onDir(srcStat, destStat, src, dest, opts, cb) {
        if (!destStat)
          return mkDirAndCopy(srcStat.mode, src, dest, opts, cb);
        return copyDir(src, dest, opts, cb);
      }
      function mkDirAndCopy(srcMode, src, dest, opts, cb) {
        fs4.mkdir(dest, (err) => {
          if (err)
            return cb(err);
          copyDir(src, dest, opts, (err2) => {
            if (err2)
              return cb(err2);
            return setDestMode(dest, srcMode, cb);
          });
        });
      }
      function copyDir(src, dest, opts, cb) {
        fs4.readdir(src, (err, items) => {
          if (err)
            return cb(err);
          return copyDirItems(items, src, dest, opts, cb);
        });
      }
      function copyDirItems(items, src, dest, opts, cb) {
        const item = items.pop();
        if (!item)
          return cb();
        return copyDirItem(items, item, src, dest, opts, cb);
      }
      function copyDirItem(items, item, src, dest, opts, cb) {
        const srcItem = path6.join(src, item);
        const destItem = path6.join(dest, item);
        stat.checkPaths(srcItem, destItem, "copy", opts, (err, stats) => {
          if (err)
            return cb(err);
          const { destStat } = stats;
          startCopy(destStat, srcItem, destItem, opts, (err2) => {
            if (err2)
              return cb(err2);
            return copyDirItems(items, src, dest, opts, cb);
          });
        });
      }
      function onLink(destStat, src, dest, opts, cb) {
        fs4.readlink(src, (err, resolvedSrc) => {
          if (err)
            return cb(err);
          if (opts.dereference) {
            resolvedSrc = path6.resolve(process.cwd(), resolvedSrc);
          }
          if (!destStat) {
            return fs4.symlink(resolvedSrc, dest, cb);
          } else {
            fs4.readlink(dest, (err2, resolvedDest) => {
              if (err2) {
                if (err2.code === "EINVAL" || err2.code === "UNKNOWN")
                  return fs4.symlink(resolvedSrc, dest, cb);
                return cb(err2);
              }
              if (opts.dereference) {
                resolvedDest = path6.resolve(process.cwd(), resolvedDest);
              }
              if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {
                return cb(new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`));
              }
              if (destStat.isDirectory() && stat.isSrcSubdir(resolvedDest, resolvedSrc)) {
                return cb(new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`));
              }
              return copyLink(resolvedSrc, dest, cb);
            });
          }
        });
      }
      function copyLink(resolvedSrc, dest, cb) {
        fs4.unlink(dest, (err) => {
          if (err)
            return cb(err);
          return fs4.symlink(resolvedSrc, dest, cb);
        });
      }
      module.exports = copy;
    }
  });

  // ../node_modules/fs-extra/lib/copy/copy-sync.js
  var require_copy_sync = __commonJS({
    "../node_modules/fs-extra/lib/copy/copy-sync.js"(exports, module) {
      "use strict";
      var fs4 = require_graceful_fs();
      var path6 = __require("path");
      var mkdirsSync = require_mkdirs().mkdirsSync;
      var utimesMillisSync = require_utimes().utimesMillisSync;
      var stat = require_stat();
      function copySync(src, dest, opts) {
        if (typeof opts === "function") {
          opts = { filter: opts };
        }
        opts = opts || {};
        opts.clobber = "clobber" in opts ? !!opts.clobber : true;
        opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
        if (opts.preserveTimestamps && process.arch === "ia32") {
          process.emitWarning(
            "Using the preserveTimestamps option in 32-bit node is not recommended;\n\n	see https://github.com/jprichardson/node-fs-extra/issues/269",
            "Warning",
            "fs-extra-WARN0002"
          );
        }
        const { srcStat, destStat } = stat.checkPathsSync(src, dest, "copy", opts);
        stat.checkParentPathsSync(src, srcStat, dest, "copy");
        return handleFilterAndCopy(destStat, src, dest, opts);
      }
      function handleFilterAndCopy(destStat, src, dest, opts) {
        if (opts.filter && !opts.filter(src, dest))
          return;
        const destParent = path6.dirname(dest);
        if (!fs4.existsSync(destParent))
          mkdirsSync(destParent);
        return getStats(destStat, src, dest, opts);
      }
      function startCopy(destStat, src, dest, opts) {
        if (opts.filter && !opts.filter(src, dest))
          return;
        return getStats(destStat, src, dest, opts);
      }
      function getStats(destStat, src, dest, opts) {
        const statSync = opts.dereference ? fs4.statSync : fs4.lstatSync;
        const srcStat = statSync(src);
        if (srcStat.isDirectory())
          return onDir(srcStat, destStat, src, dest, opts);
        else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice())
          return onFile(srcStat, destStat, src, dest, opts);
        else if (srcStat.isSymbolicLink())
          return onLink(destStat, src, dest, opts);
        else if (srcStat.isSocket())
          throw new Error(`Cannot copy a socket file: ${src}`);
        else if (srcStat.isFIFO())
          throw new Error(`Cannot copy a FIFO pipe: ${src}`);
        throw new Error(`Unknown file: ${src}`);
      }
      function onFile(srcStat, destStat, src, dest, opts) {
        if (!destStat)
          return copyFile(srcStat, src, dest, opts);
        return mayCopyFile(srcStat, src, dest, opts);
      }
      function mayCopyFile(srcStat, src, dest, opts) {
        if (opts.overwrite) {
          fs4.unlinkSync(dest);
          return copyFile(srcStat, src, dest, opts);
        } else if (opts.errorOnExist) {
          throw new Error(`'${dest}' already exists`);
        }
      }
      function copyFile(srcStat, src, dest, opts) {
        fs4.copyFileSync(src, dest);
        if (opts.preserveTimestamps)
          handleTimestamps(srcStat.mode, src, dest);
        return setDestMode(dest, srcStat.mode);
      }
      function handleTimestamps(srcMode, src, dest) {
        if (fileIsNotWritable(srcMode))
          makeFileWritable(dest, srcMode);
        return setDestTimestamps(src, dest);
      }
      function fileIsNotWritable(srcMode) {
        return (srcMode & 128) === 0;
      }
      function makeFileWritable(dest, srcMode) {
        return setDestMode(dest, srcMode | 128);
      }
      function setDestMode(dest, srcMode) {
        return fs4.chmodSync(dest, srcMode);
      }
      function setDestTimestamps(src, dest) {
        const updatedSrcStat = fs4.statSync(src);
        return utimesMillisSync(dest, updatedSrcStat.atime, updatedSrcStat.mtime);
      }
      function onDir(srcStat, destStat, src, dest, opts) {
        if (!destStat)
          return mkDirAndCopy(srcStat.mode, src, dest, opts);
        return copyDir(src, dest, opts);
      }
      function mkDirAndCopy(srcMode, src, dest, opts) {
        fs4.mkdirSync(dest);
        copyDir(src, dest, opts);
        return setDestMode(dest, srcMode);
      }
      function copyDir(src, dest, opts) {
        fs4.readdirSync(src).forEach((item) => copyDirItem(item, src, dest, opts));
      }
      function copyDirItem(item, src, dest, opts) {
        const srcItem = path6.join(src, item);
        const destItem = path6.join(dest, item);
        const { destStat } = stat.checkPathsSync(srcItem, destItem, "copy", opts);
        return startCopy(destStat, srcItem, destItem, opts);
      }
      function onLink(destStat, src, dest, opts) {
        let resolvedSrc = fs4.readlinkSync(src);
        if (opts.dereference) {
          resolvedSrc = path6.resolve(process.cwd(), resolvedSrc);
        }
        if (!destStat) {
          return fs4.symlinkSync(resolvedSrc, dest);
        } else {
          let resolvedDest;
          try {
            resolvedDest = fs4.readlinkSync(dest);
          } catch (err) {
            if (err.code === "EINVAL" || err.code === "UNKNOWN")
              return fs4.symlinkSync(resolvedSrc, dest);
            throw err;
          }
          if (opts.dereference) {
            resolvedDest = path6.resolve(process.cwd(), resolvedDest);
          }
          if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {
            throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`);
          }
          if (fs4.statSync(dest).isDirectory() && stat.isSrcSubdir(resolvedDest, resolvedSrc)) {
            throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`);
          }
          return copyLink(resolvedSrc, dest);
        }
      }
      function copyLink(resolvedSrc, dest) {
        fs4.unlinkSync(dest);
        return fs4.symlinkSync(resolvedSrc, dest);
      }
      module.exports = copySync;
    }
  });

  // ../node_modules/fs-extra/lib/copy/index.js
  var require_copy2 = __commonJS({
    "../node_modules/fs-extra/lib/copy/index.js"(exports, module) {
      "use strict";
      var u = require_universalify().fromCallback;
      module.exports = {
        copy: u(require_copy()),
        copySync: require_copy_sync()
      };
    }
  });

  // ../node_modules/fs-extra/lib/remove/rimraf.js
  var require_rimraf = __commonJS({
    "../node_modules/fs-extra/lib/remove/rimraf.js"(exports, module) {
      "use strict";
      var fs4 = require_graceful_fs();
      var path6 = __require("path");
      var assert = __require("assert");
      var isWindows = process.platform === "win32";
      function defaults(options) {
        const methods = [
          "unlink",
          "chmod",
          "stat",
          "lstat",
          "rmdir",
          "readdir"
        ];
        methods.forEach((m) => {
          options[m] = options[m] || fs4[m];
          m = m + "Sync";
          options[m] = options[m] || fs4[m];
        });
        options.maxBusyTries = options.maxBusyTries || 3;
      }
      function rimraf(p, options, cb) {
        let busyTries = 0;
        if (typeof options === "function") {
          cb = options;
          options = {};
        }
        assert(p, "rimraf: missing path");
        assert.strictEqual(typeof p, "string", "rimraf: path should be a string");
        assert.strictEqual(typeof cb, "function", "rimraf: callback function required");
        assert(options, "rimraf: invalid options argument provided");
        assert.strictEqual(typeof options, "object", "rimraf: options should be object");
        defaults(options);
        rimraf_(p, options, function CB(er) {
          if (er) {
            if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") && busyTries < options.maxBusyTries) {
              busyTries++;
              const time = busyTries * 100;
              return setTimeout(() => rimraf_(p, options, CB), time);
            }
            if (er.code === "ENOENT")
              er = null;
          }
          cb(er);
        });
      }
      function rimraf_(p, options, cb) {
        assert(p);
        assert(options);
        assert(typeof cb === "function");
        options.lstat(p, (er, st) => {
          if (er && er.code === "ENOENT") {
            return cb(null);
          }
          if (er && er.code === "EPERM" && isWindows) {
            return fixWinEPERM(p, options, er, cb);
          }
          if (st && st.isDirectory()) {
            return rmdir(p, options, er, cb);
          }
          options.unlink(p, (er2) => {
            if (er2) {
              if (er2.code === "ENOENT") {
                return cb(null);
              }
              if (er2.code === "EPERM") {
                return isWindows ? fixWinEPERM(p, options, er2, cb) : rmdir(p, options, er2, cb);
              }
              if (er2.code === "EISDIR") {
                return rmdir(p, options, er2, cb);
              }
            }
            return cb(er2);
          });
        });
      }
      function fixWinEPERM(p, options, er, cb) {
        assert(p);
        assert(options);
        assert(typeof cb === "function");
        options.chmod(p, 438, (er2) => {
          if (er2) {
            cb(er2.code === "ENOENT" ? null : er);
          } else {
            options.stat(p, (er3, stats) => {
              if (er3) {
                cb(er3.code === "ENOENT" ? null : er);
              } else if (stats.isDirectory()) {
                rmdir(p, options, er, cb);
              } else {
                options.unlink(p, cb);
              }
            });
          }
        });
      }
      function fixWinEPERMSync(p, options, er) {
        let stats;
        assert(p);
        assert(options);
        try {
          options.chmodSync(p, 438);
        } catch (er2) {
          if (er2.code === "ENOENT") {
            return;
          } else {
            throw er;
          }
        }
        try {
          stats = options.statSync(p);
        } catch (er3) {
          if (er3.code === "ENOENT") {
            return;
          } else {
            throw er;
          }
        }
        if (stats.isDirectory()) {
          rmdirSync(p, options, er);
        } else {
          options.unlinkSync(p);
        }
      }
      function rmdir(p, options, originalEr, cb) {
        assert(p);
        assert(options);
        assert(typeof cb === "function");
        options.rmdir(p, (er) => {
          if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")) {
            rmkids(p, options, cb);
          } else if (er && er.code === "ENOTDIR") {
            cb(originalEr);
          } else {
            cb(er);
          }
        });
      }
      function rmkids(p, options, cb) {
        assert(p);
        assert(options);
        assert(typeof cb === "function");
        options.readdir(p, (er, files) => {
          if (er)
            return cb(er);
          let n = files.length;
          let errState;
          if (n === 0)
            return options.rmdir(p, cb);
          files.forEach((f) => {
            rimraf(path6.join(p, f), options, (er2) => {
              if (errState) {
                return;
              }
              if (er2)
                return cb(errState = er2);
              if (--n === 0) {
                options.rmdir(p, cb);
              }
            });
          });
        });
      }
      function rimrafSync(p, options) {
        let st;
        options = options || {};
        defaults(options);
        assert(p, "rimraf: missing path");
        assert.strictEqual(typeof p, "string", "rimraf: path should be a string");
        assert(options, "rimraf: missing options");
        assert.strictEqual(typeof options, "object", "rimraf: options should be object");
        try {
          st = options.lstatSync(p);
        } catch (er) {
          if (er.code === "ENOENT") {
            return;
          }
          if (er.code === "EPERM" && isWindows) {
            fixWinEPERMSync(p, options, er);
          }
        }
        try {
          if (st && st.isDirectory()) {
            rmdirSync(p, options, null);
          } else {
            options.unlinkSync(p);
          }
        } catch (er) {
          if (er.code === "ENOENT") {
            return;
          } else if (er.code === "EPERM") {
            return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er);
          } else if (er.code !== "EISDIR") {
            throw er;
          }
          rmdirSync(p, options, er);
        }
      }
      function rmdirSync(p, options, originalEr) {
        assert(p);
        assert(options);
        try {
          options.rmdirSync(p);
        } catch (er) {
          if (er.code === "ENOTDIR") {
            throw originalEr;
          } else if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM") {
            rmkidsSync(p, options);
          } else if (er.code !== "ENOENT") {
            throw er;
          }
        }
      }
      function rmkidsSync(p, options) {
        assert(p);
        assert(options);
        options.readdirSync(p).forEach((f) => rimrafSync(path6.join(p, f), options));
        if (isWindows) {
          const startTime = Date.now();
          do {
            try {
              const ret = options.rmdirSync(p, options);
              return ret;
            } catch {
            }
          } while (Date.now() - startTime < 500);
        } else {
          const ret = options.rmdirSync(p, options);
          return ret;
        }
      }
      module.exports = rimraf;
      rimraf.sync = rimrafSync;
    }
  });

  // ../node_modules/fs-extra/lib/remove/index.js
  var require_remove = __commonJS({
    "../node_modules/fs-extra/lib/remove/index.js"(exports, module) {
      "use strict";
      var fs4 = require_graceful_fs();
      var u = require_universalify().fromCallback;
      var rimraf = require_rimraf();
      function remove(path6, callback) {
        if (fs4.rm)
          return fs4.rm(path6, { recursive: true, force: true }, callback);
        rimraf(path6, callback);
      }
      function removeSync(path6) {
        if (fs4.rmSync)
          return fs4.rmSync(path6, { recursive: true, force: true });
        rimraf.sync(path6);
      }
      module.exports = {
        remove: u(remove),
        removeSync
      };
    }
  });

  // ../node_modules/fs-extra/lib/empty/index.js
  var require_empty = __commonJS({
    "../node_modules/fs-extra/lib/empty/index.js"(exports, module) {
      "use strict";
      var u = require_universalify().fromPromise;
      var fs4 = require_fs();
      var path6 = __require("path");
      var mkdir = require_mkdirs();
      var remove = require_remove();
      var emptyDir = u(async function emptyDir2(dir) {
        let items;
        try {
          items = await fs4.readdir(dir);
        } catch {
          return mkdir.mkdirs(dir);
        }
        return Promise.all(items.map((item) => remove.remove(path6.join(dir, item))));
      });
      function emptyDirSync(dir) {
        let items;
        try {
          items = fs4.readdirSync(dir);
        } catch {
          return mkdir.mkdirsSync(dir);
        }
        items.forEach((item) => {
          item = path6.join(dir, item);
          remove.removeSync(item);
        });
      }
      module.exports = {
        emptyDirSync,
        emptydirSync: emptyDirSync,
        emptyDir,
        emptydir: emptyDir
      };
    }
  });

  // ../node_modules/fs-extra/lib/ensure/file.js
  var require_file = __commonJS({
    "../node_modules/fs-extra/lib/ensure/file.js"(exports, module) {
      "use strict";
      var u = require_universalify().fromCallback;
      var path6 = __require("path");
      var fs4 = require_graceful_fs();
      var mkdir = require_mkdirs();
      function createFile(file, callback) {
        function makeFile() {
          fs4.writeFile(file, "", (err) => {
            if (err)
              return callback(err);
            callback();
          });
        }
        fs4.stat(file, (err, stats) => {
          if (!err && stats.isFile())
            return callback();
          const dir = path6.dirname(file);
          fs4.stat(dir, (err2, stats2) => {
            if (err2) {
              if (err2.code === "ENOENT") {
                return mkdir.mkdirs(dir, (err3) => {
                  if (err3)
                    return callback(err3);
                  makeFile();
                });
              }
              return callback(err2);
            }
            if (stats2.isDirectory())
              makeFile();
            else {
              fs4.readdir(dir, (err3) => {
                if (err3)
                  return callback(err3);
              });
            }
          });
        });
      }
      function createFileSync(file) {
        let stats;
        try {
          stats = fs4.statSync(file);
        } catch {
        }
        if (stats && stats.isFile())
          return;
        const dir = path6.dirname(file);
        try {
          if (!fs4.statSync(dir).isDirectory()) {
            fs4.readdirSync(dir);
          }
        } catch (err) {
          if (err && err.code === "ENOENT")
            mkdir.mkdirsSync(dir);
          else
            throw err;
        }
        fs4.writeFileSync(file, "");
      }
      module.exports = {
        createFile: u(createFile),
        createFileSync
      };
    }
  });

  // ../node_modules/fs-extra/lib/ensure/link.js
  var require_link = __commonJS({
    "../node_modules/fs-extra/lib/ensure/link.js"(exports, module) {
      "use strict";
      var u = require_universalify().fromCallback;
      var path6 = __require("path");
      var fs4 = require_graceful_fs();
      var mkdir = require_mkdirs();
      var pathExists2 = require_path_exists().pathExists;
      var { areIdentical } = require_stat();
      function createLink(srcpath, dstpath, callback) {
        function makeLink(srcpath2, dstpath2) {
          fs4.link(srcpath2, dstpath2, (err) => {
            if (err)
              return callback(err);
            callback(null);
          });
        }
        fs4.lstat(dstpath, (_, dstStat) => {
          fs4.lstat(srcpath, (err, srcStat) => {
            if (err) {
              err.message = err.message.replace("lstat", "ensureLink");
              return callback(err);
            }
            if (dstStat && areIdentical(srcStat, dstStat))
              return callback(null);
            const dir = path6.dirname(dstpath);
            pathExists2(dir, (err2, dirExists) => {
              if (err2)
                return callback(err2);
              if (dirExists)
                return makeLink(srcpath, dstpath);
              mkdir.mkdirs(dir, (err3) => {
                if (err3)
                  return callback(err3);
                makeLink(srcpath, dstpath);
              });
            });
          });
        });
      }
      function createLinkSync(srcpath, dstpath) {
        let dstStat;
        try {
          dstStat = fs4.lstatSync(dstpath);
        } catch {
        }
        try {
          const srcStat = fs4.lstatSync(srcpath);
          if (dstStat && areIdentical(srcStat, dstStat))
            return;
        } catch (err) {
          err.message = err.message.replace("lstat", "ensureLink");
          throw err;
        }
        const dir = path6.dirname(dstpath);
        const dirExists = fs4.existsSync(dir);
        if (dirExists)
          return fs4.linkSync(srcpath, dstpath);
        mkdir.mkdirsSync(dir);
        return fs4.linkSync(srcpath, dstpath);
      }
      module.exports = {
        createLink: u(createLink),
        createLinkSync
      };
    }
  });

  // ../node_modules/fs-extra/lib/ensure/symlink-paths.js
  var require_symlink_paths = __commonJS({
    "../node_modules/fs-extra/lib/ensure/symlink-paths.js"(exports, module) {
      "use strict";
      var path6 = __require("path");
      var fs4 = require_graceful_fs();
      var pathExists2 = require_path_exists().pathExists;
      function symlinkPaths(srcpath, dstpath, callback) {
        if (path6.isAbsolute(srcpath)) {
          return fs4.lstat(srcpath, (err) => {
            if (err) {
              err.message = err.message.replace("lstat", "ensureSymlink");
              return callback(err);
            }
            return callback(null, {
              toCwd: srcpath,
              toDst: srcpath
            });
          });
        } else {
          const dstdir = path6.dirname(dstpath);
          const relativeToDst = path6.join(dstdir, srcpath);
          return pathExists2(relativeToDst, (err, exists) => {
            if (err)
              return callback(err);
            if (exists) {
              return callback(null, {
                toCwd: relativeToDst,
                toDst: srcpath
              });
            } else {
              return fs4.lstat(srcpath, (err2) => {
                if (err2) {
                  err2.message = err2.message.replace("lstat", "ensureSymlink");
                  return callback(err2);
                }
                return callback(null, {
                  toCwd: srcpath,
                  toDst: path6.relative(dstdir, srcpath)
                });
              });
            }
          });
        }
      }
      function symlinkPathsSync(srcpath, dstpath) {
        let exists;
        if (path6.isAbsolute(srcpath)) {
          exists = fs4.existsSync(srcpath);
          if (!exists)
            throw new Error("absolute srcpath does not exist");
          return {
            toCwd: srcpath,
            toDst: srcpath
          };
        } else {
          const dstdir = path6.dirname(dstpath);
          const relativeToDst = path6.join(dstdir, srcpath);
          exists = fs4.existsSync(relativeToDst);
          if (exists) {
            return {
              toCwd: relativeToDst,
              toDst: srcpath
            };
          } else {
            exists = fs4.existsSync(srcpath);
            if (!exists)
              throw new Error("relative srcpath does not exist");
            return {
              toCwd: srcpath,
              toDst: path6.relative(dstdir, srcpath)
            };
          }
        }
      }
      module.exports = {
        symlinkPaths,
        symlinkPathsSync
      };
    }
  });

  // ../node_modules/fs-extra/lib/ensure/symlink-type.js
  var require_symlink_type = __commonJS({
    "../node_modules/fs-extra/lib/ensure/symlink-type.js"(exports, module) {
      "use strict";
      var fs4 = require_graceful_fs();
      function symlinkType(srcpath, type, callback) {
        callback = typeof type === "function" ? type : callback;
        type = typeof type === "function" ? false : type;
        if (type)
          return callback(null, type);
        fs4.lstat(srcpath, (err, stats) => {
          if (err)
            return callback(null, "file");
          type = stats && stats.isDirectory() ? "dir" : "file";
          callback(null, type);
        });
      }
      function symlinkTypeSync(srcpath, type) {
        let stats;
        if (type)
          return type;
        try {
          stats = fs4.lstatSync(srcpath);
        } catch {
          return "file";
        }
        return stats && stats.isDirectory() ? "dir" : "file";
      }
      module.exports = {
        symlinkType,
        symlinkTypeSync
      };
    }
  });

  // ../node_modules/fs-extra/lib/ensure/symlink.js
  var require_symlink = __commonJS({
    "../node_modules/fs-extra/lib/ensure/symlink.js"(exports, module) {
      "use strict";
      var u = require_universalify().fromCallback;
      var path6 = __require("path");
      var fs4 = require_fs();
      var _mkdirs = require_mkdirs();
      var mkdirs = _mkdirs.mkdirs;
      var mkdirsSync = _mkdirs.mkdirsSync;
      var _symlinkPaths = require_symlink_paths();
      var symlinkPaths = _symlinkPaths.symlinkPaths;
      var symlinkPathsSync = _symlinkPaths.symlinkPathsSync;
      var _symlinkType = require_symlink_type();
      var symlinkType = _symlinkType.symlinkType;
      var symlinkTypeSync = _symlinkType.symlinkTypeSync;
      var pathExists2 = require_path_exists().pathExists;
      var { areIdentical } = require_stat();
      function createSymlink(srcpath, dstpath, type, callback) {
        callback = typeof type === "function" ? type : callback;
        type = typeof type === "function" ? false : type;
        fs4.lstat(dstpath, (err, stats) => {
          if (!err && stats.isSymbolicLink()) {
            Promise.all([
              fs4.stat(srcpath),
              fs4.stat(dstpath)
            ]).then(([srcStat, dstStat]) => {
              if (areIdentical(srcStat, dstStat))
                return callback(null);
              _createSymlink(srcpath, dstpath, type, callback);
            });
          } else
            _createSymlink(srcpath, dstpath, type, callback);
        });
      }
      function _createSymlink(srcpath, dstpath, type, callback) {
        symlinkPaths(srcpath, dstpath, (err, relative) => {
          if (err)
            return callback(err);
          srcpath = relative.toDst;
          symlinkType(relative.toCwd, type, (err2, type2) => {
            if (err2)
              return callback(err2);
            const dir = path6.dirname(dstpath);
            pathExists2(dir, (err3, dirExists) => {
              if (err3)
                return callback(err3);
              if (dirExists)
                return fs4.symlink(srcpath, dstpath, type2, callback);
              mkdirs(dir, (err4) => {
                if (err4)
                  return callback(err4);
                fs4.symlink(srcpath, dstpath, type2, callback);
              });
            });
          });
        });
      }
      function createSymlinkSync(srcpath, dstpath, type) {
        let stats;
        try {
          stats = fs4.lstatSync(dstpath);
        } catch {
        }
        if (stats && stats.isSymbolicLink()) {
          const srcStat = fs4.statSync(srcpath);
          const dstStat = fs4.statSync(dstpath);
          if (areIdentical(srcStat, dstStat))
            return;
        }
        const relative = symlinkPathsSync(srcpath, dstpath);
        srcpath = relative.toDst;
        type = symlinkTypeSync(relative.toCwd, type);
        const dir = path6.dirname(dstpath);
        const exists = fs4.existsSync(dir);
        if (exists)
          return fs4.symlinkSync(srcpath, dstpath, type);
        mkdirsSync(dir);
        return fs4.symlinkSync(srcpath, dstpath, type);
      }
      module.exports = {
        createSymlink: u(createSymlink),
        createSymlinkSync
      };
    }
  });

  // ../node_modules/fs-extra/lib/ensure/index.js
  var require_ensure = __commonJS({
    "../node_modules/fs-extra/lib/ensure/index.js"(exports, module) {
      "use strict";
      var { createFile, createFileSync } = require_file();
      var { createLink, createLinkSync } = require_link();
      var { createSymlink, createSymlinkSync } = require_symlink();
      module.exports = {
        createFile,
        createFileSync,
        ensureFile: createFile,
        ensureFileSync: createFileSync,
        createLink,
        createLinkSync,
        ensureLink: createLink,
        ensureLinkSync: createLinkSync,
        createSymlink,
        createSymlinkSync,
        ensureSymlink: createSymlink,
        ensureSymlinkSync: createSymlinkSync
      };
    }
  });

  // ../node_modules/jsonfile/utils.js
  var require_utils2 = __commonJS({
    "../node_modules/jsonfile/utils.js"(exports, module) {
      function stringify(obj, { EOL = "\n", finalEOL = true, replacer = null, spaces } = {}) {
        const EOF = finalEOL ? EOL : "";
        const str = JSON.stringify(obj, replacer, spaces);
        return str.replace(/\n/g, EOL) + EOF;
      }
      function stripBom(content) {
        if (Buffer.isBuffer(content))
          content = content.toString("utf8");
        return content.replace(/^\uFEFF/, "");
      }
      module.exports = { stringify, stripBom };
    }
  });

  // ../node_modules/jsonfile/index.js
  var require_jsonfile = __commonJS({
    "../node_modules/jsonfile/index.js"(exports, module) {
      var _fs;
      try {
        _fs = require_graceful_fs();
      } catch (_) {
        _fs = __require("fs");
      }
      var universalify = require_universalify();
      var { stringify, stripBom } = require_utils2();
      async function _readFile(file, options = {}) {
        if (typeof options === "string") {
          options = { encoding: options };
        }
        const fs4 = options.fs || _fs;
        const shouldThrow = "throws" in options ? options.throws : true;
        let data = await universalify.fromCallback(fs4.readFile)(file, options);
        data = stripBom(data);
        let obj;
        try {
          obj = JSON.parse(data, options ? options.reviver : null);
        } catch (err) {
          if (shouldThrow) {
            err.message = `${file}: ${err.message}`;
            throw err;
          } else {
            return null;
          }
        }
        return obj;
      }
      var readFile = universalify.fromPromise(_readFile);
      function readFileSync(file, options = {}) {
        if (typeof options === "string") {
          options = { encoding: options };
        }
        const fs4 = options.fs || _fs;
        const shouldThrow = "throws" in options ? options.throws : true;
        try {
          let content = fs4.readFileSync(file, options);
          content = stripBom(content);
          return JSON.parse(content, options.reviver);
        } catch (err) {
          if (shouldThrow) {
            err.message = `${file}: ${err.message}`;
            throw err;
          } else {
            return null;
          }
        }
      }
      async function _writeFile(file, obj, options = {}) {
        const fs4 = options.fs || _fs;
        const str = stringify(obj, options);
        await universalify.fromCallback(fs4.writeFile)(file, str, options);
      }
      var writeFile2 = universalify.fromPromise(_writeFile);
      function writeFileSync(file, obj, options = {}) {
        const fs4 = options.fs || _fs;
        const str = stringify(obj, options);
        return fs4.writeFileSync(file, str, options);
      }
      var jsonfile = {
        readFile,
        readFileSync,
        writeFile: writeFile2,
        writeFileSync
      };
      module.exports = jsonfile;
    }
  });

  // ../node_modules/fs-extra/lib/json/jsonfile.js
  var require_jsonfile2 = __commonJS({
    "../node_modules/fs-extra/lib/json/jsonfile.js"(exports, module) {
      "use strict";
      var jsonFile = require_jsonfile();
      module.exports = {
        readJson: jsonFile.readFile,
        readJsonSync: jsonFile.readFileSync,
        writeJson: jsonFile.writeFile,
        writeJsonSync: jsonFile.writeFileSync
      };
    }
  });

  // ../node_modules/fs-extra/lib/output-file/index.js
  var require_output_file = __commonJS({
    "../node_modules/fs-extra/lib/output-file/index.js"(exports, module) {
      "use strict";
      var u = require_universalify().fromCallback;
      var fs4 = require_graceful_fs();
      var path6 = __require("path");
      var mkdir = require_mkdirs();
      var pathExists2 = require_path_exists().pathExists;
      function outputFile(file, data, encoding, callback) {
        if (typeof encoding === "function") {
          callback = encoding;
          encoding = "utf8";
        }
        const dir = path6.dirname(file);
        pathExists2(dir, (err, itDoes) => {
          if (err)
            return callback(err);
          if (itDoes)
            return fs4.writeFile(file, data, encoding, callback);
          mkdir.mkdirs(dir, (err2) => {
            if (err2)
              return callback(err2);
            fs4.writeFile(file, data, encoding, callback);
          });
        });
      }
      function outputFileSync(file, ...args) {
        const dir = path6.dirname(file);
        if (fs4.existsSync(dir)) {
          return fs4.writeFileSync(file, ...args);
        }
        mkdir.mkdirsSync(dir);
        fs4.writeFileSync(file, ...args);
      }
      module.exports = {
        outputFile: u(outputFile),
        outputFileSync
      };
    }
  });

  // ../node_modules/fs-extra/lib/json/output-json.js
  var require_output_json = __commonJS({
    "../node_modules/fs-extra/lib/json/output-json.js"(exports, module) {
      "use strict";
      var { stringify } = require_utils2();
      var { outputFile } = require_output_file();
      async function outputJson(file, data, options = {}) {
        const str = stringify(data, options);
        await outputFile(file, str, options);
      }
      module.exports = outputJson;
    }
  });

  // ../node_modules/fs-extra/lib/json/output-json-sync.js
  var require_output_json_sync = __commonJS({
    "../node_modules/fs-extra/lib/json/output-json-sync.js"(exports, module) {
      "use strict";
      var { stringify } = require_utils2();
      var { outputFileSync } = require_output_file();
      function outputJsonSync(file, data, options) {
        const str = stringify(data, options);
        outputFileSync(file, str, options);
      }
      module.exports = outputJsonSync;
    }
  });

  // ../node_modules/fs-extra/lib/json/index.js
  var require_json = __commonJS({
    "../node_modules/fs-extra/lib/json/index.js"(exports, module) {
      "use strict";
      var u = require_universalify().fromPromise;
      var jsonFile = require_jsonfile2();
      jsonFile.outputJson = u(require_output_json());
      jsonFile.outputJsonSync = require_output_json_sync();
      jsonFile.outputJSON = jsonFile.outputJson;
      jsonFile.outputJSONSync = jsonFile.outputJsonSync;
      jsonFile.writeJSON = jsonFile.writeJson;
      jsonFile.writeJSONSync = jsonFile.writeJsonSync;
      jsonFile.readJSON = jsonFile.readJson;
      jsonFile.readJSONSync = jsonFile.readJsonSync;
      module.exports = jsonFile;
    }
  });

  // ../node_modules/fs-extra/lib/move/move.js
  var require_move = __commonJS({
    "../node_modules/fs-extra/lib/move/move.js"(exports, module) {
      "use strict";
      var fs4 = require_graceful_fs();
      var path6 = __require("path");
      var copy = require_copy2().copy;
      var remove = require_remove().remove;
      var mkdirp = require_mkdirs().mkdirp;
      var pathExists2 = require_path_exists().pathExists;
      var stat = require_stat();
      function move(src, dest, opts, cb) {
        if (typeof opts === "function") {
          cb = opts;
          opts = {};
        }
        opts = opts || {};
        const overwrite = opts.overwrite || opts.clobber || false;
        stat.checkPaths(src, dest, "move", opts, (err, stats) => {
          if (err)
            return cb(err);
          const { srcStat, isChangingCase = false } = stats;
          stat.checkParentPaths(src, srcStat, dest, "move", (err2) => {
            if (err2)
              return cb(err2);
            if (isParentRoot(dest))
              return doRename(src, dest, overwrite, isChangingCase, cb);
            mkdirp(path6.dirname(dest), (err3) => {
              if (err3)
                return cb(err3);
              return doRename(src, dest, overwrite, isChangingCase, cb);
            });
          });
        });
      }
      function isParentRoot(dest) {
        const parent = path6.dirname(dest);
        const parsedPath = path6.parse(parent);
        return parsedPath.root === parent;
      }
      function doRename(src, dest, overwrite, isChangingCase, cb) {
        if (isChangingCase)
          return rename(src, dest, overwrite, cb);
        if (overwrite) {
          return remove(dest, (err) => {
            if (err)
              return cb(err);
            return rename(src, dest, overwrite, cb);
          });
        }
        pathExists2(dest, (err, destExists) => {
          if (err)
            return cb(err);
          if (destExists)
            return cb(new Error("dest already exists."));
          return rename(src, dest, overwrite, cb);
        });
      }
      function rename(src, dest, overwrite, cb) {
        fs4.rename(src, dest, (err) => {
          if (!err)
            return cb();
          if (err.code !== "EXDEV")
            return cb(err);
          return moveAcrossDevice(src, dest, overwrite, cb);
        });
      }
      function moveAcrossDevice(src, dest, overwrite, cb) {
        const opts = {
          overwrite,
          errorOnExist: true
        };
        copy(src, dest, opts, (err) => {
          if (err)
            return cb(err);
          return remove(src, cb);
        });
      }
      module.exports = move;
    }
  });

  // ../node_modules/fs-extra/lib/move/move-sync.js
  var require_move_sync = __commonJS({
    "../node_modules/fs-extra/lib/move/move-sync.js"(exports, module) {
      "use strict";
      var fs4 = require_graceful_fs();
      var path6 = __require("path");
      var copySync = require_copy2().copySync;
      var removeSync = require_remove().removeSync;
      var mkdirpSync = require_mkdirs().mkdirpSync;
      var stat = require_stat();
      function moveSync(src, dest, opts) {
        opts = opts || {};
        const overwrite = opts.overwrite || opts.clobber || false;
        const { srcStat, isChangingCase = false } = stat.checkPathsSync(src, dest, "move", opts);
        stat.checkParentPathsSync(src, srcStat, dest, "move");
        if (!isParentRoot(dest))
          mkdirpSync(path6.dirname(dest));
        return doRename(src, dest, overwrite, isChangingCase);
      }
      function isParentRoot(dest) {
        const parent = path6.dirname(dest);
        const parsedPath = path6.parse(parent);
        return parsedPath.root === parent;
      }
      function doRename(src, dest, overwrite, isChangingCase) {
        if (isChangingCase)
          return rename(src, dest, overwrite);
        if (overwrite) {
          removeSync(dest);
          return rename(src, dest, overwrite);
        }
        if (fs4.existsSync(dest))
          throw new Error("dest already exists.");
        return rename(src, dest, overwrite);
      }
      function rename(src, dest, overwrite) {
        try {
          fs4.renameSync(src, dest);
        } catch (err) {
          if (err.code !== "EXDEV")
            throw err;
          return moveAcrossDevice(src, dest, overwrite);
        }
      }
      function moveAcrossDevice(src, dest, overwrite) {
        const opts = {
          overwrite,
          errorOnExist: true
        };
        copySync(src, dest, opts);
        return removeSync(src);
      }
      module.exports = moveSync;
    }
  });

  // ../node_modules/fs-extra/lib/move/index.js
  var require_move2 = __commonJS({
    "../node_modules/fs-extra/lib/move/index.js"(exports, module) {
      "use strict";
      var u = require_universalify().fromCallback;
      module.exports = {
        move: u(require_move()),
        moveSync: require_move_sync()
      };
    }
  });

  // ../node_modules/fs-extra/lib/index.js
  var require_lib2 = __commonJS({
    "../node_modules/fs-extra/lib/index.js"(exports, module) {
      "use strict";
      module.exports = {
        ...require_fs(),
        ...require_copy2(),
        ...require_empty(),
        ...require_ensure(),
        ...require_json(),
        ...require_mkdirs(),
        ...require_move2(),
        ...require_output_file(),
        ...require_path_exists(),
        ...require_remove()
      };
    }
  });

  // ../node_modules/@nodelib/fs.stat/out/providers/async.js
  var require_async = __commonJS({
    "../node_modules/@nodelib/fs.stat/out/providers/async.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.read = void 0;
      function read(path6, settings, callback) {
        settings.fs.lstat(path6, (lstatError, lstat) => {
          if (lstatError !== null) {
            callFailureCallback(callback, lstatError);
            return;
          }
          if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
            callSuccessCallback(callback, lstat);
            return;
          }
          settings.fs.stat(path6, (statError, stat) => {
            if (statError !== null) {
              if (settings.throwErrorOnBrokenSymbolicLink) {
                callFailureCallback(callback, statError);
                return;
              }
              callSuccessCallback(callback, lstat);
              return;
            }
            if (settings.markSymbolicLink) {
              stat.isSymbolicLink = () => true;
            }
            callSuccessCallback(callback, stat);
          });
        });
      }
      exports.read = read;
      function callFailureCallback(callback, error) {
        callback(error);
      }
      function callSuccessCallback(callback, result) {
        callback(null, result);
      }
    }
  });

  // ../node_modules/@nodelib/fs.stat/out/providers/sync.js
  var require_sync = __commonJS({
    "../node_modules/@nodelib/fs.stat/out/providers/sync.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.read = void 0;
      function read(path6, settings) {
        const lstat = settings.fs.lstatSync(path6);
        if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
          return lstat;
        }
        try {
          const stat = settings.fs.statSync(path6);
          if (settings.markSymbolicLink) {
            stat.isSymbolicLink = () => true;
          }
          return stat;
        } catch (error) {
          if (!settings.throwErrorOnBrokenSymbolicLink) {
            return lstat;
          }
          throw error;
        }
      }
      exports.read = read;
    }
  });

  // ../node_modules/@nodelib/fs.stat/out/adapters/fs.js
  var require_fs2 = __commonJS({
    "../node_modules/@nodelib/fs.stat/out/adapters/fs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
      var fs4 = __require("fs");
      exports.FILE_SYSTEM_ADAPTER = {
        lstat: fs4.lstat,
        stat: fs4.stat,
        lstatSync: fs4.lstatSync,
        statSync: fs4.statSync
      };
      function createFileSystemAdapter(fsMethods) {
        if (fsMethods === void 0) {
          return exports.FILE_SYSTEM_ADAPTER;
        }
        return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
      }
      exports.createFileSystemAdapter = createFileSystemAdapter;
    }
  });

  // ../node_modules/@nodelib/fs.stat/out/settings.js
  var require_settings = __commonJS({
    "../node_modules/@nodelib/fs.stat/out/settings.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var fs4 = require_fs2();
      var Settings = class {
        constructor(_options = {}) {
          this._options = _options;
          this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);
          this.fs = fs4.createFileSystemAdapter(this._options.fs);
          this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);
          this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
        }
        _getValue(option, value) {
          return option !== null && option !== void 0 ? option : value;
        }
      };
      exports.default = Settings;
    }
  });

  // ../node_modules/@nodelib/fs.stat/out/index.js
  var require_out = __commonJS({
    "../node_modules/@nodelib/fs.stat/out/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.statSync = exports.stat = exports.Settings = void 0;
      var async = require_async();
      var sync = require_sync();
      var settings_1 = require_settings();
      exports.Settings = settings_1.default;
      function stat(path6, optionsOrSettingsOrCallback, callback) {
        if (typeof optionsOrSettingsOrCallback === "function") {
          async.read(path6, getSettings(), optionsOrSettingsOrCallback);
          return;
        }
        async.read(path6, getSettings(optionsOrSettingsOrCallback), callback);
      }
      exports.stat = stat;
      function statSync(path6, optionsOrSettings) {
        const settings = getSettings(optionsOrSettings);
        return sync.read(path6, settings);
      }
      exports.statSync = statSync;
      function getSettings(settingsOrOptions = {}) {
        if (settingsOrOptions instanceof settings_1.default) {
          return settingsOrOptions;
        }
        return new settings_1.default(settingsOrOptions);
      }
    }
  });

  // ../node_modules/queue-microtask/index.js
  var require_queue_microtask = __commonJS({
    "../node_modules/queue-microtask/index.js"(exports, module) {
      var promise;
      module.exports = typeof queueMicrotask === "function" ? queueMicrotask.bind(typeof window !== "undefined" ? window : global) : (cb) => (promise || (promise = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {
        throw err;
      }, 0));
    }
  });

  // ../node_modules/run-parallel/index.js
  var require_run_parallel = __commonJS({
    "../node_modules/run-parallel/index.js"(exports, module) {
      module.exports = runParallel;
      var queueMicrotask2 = require_queue_microtask();
      function runParallel(tasks, cb) {
        let results, pending, keys;
        let isSync = true;
        if (Array.isArray(tasks)) {
          results = [];
          pending = tasks.length;
        } else {
          keys = Object.keys(tasks);
          results = {};
          pending = keys.length;
        }
        function done(err) {
          function end() {
            if (cb)
              cb(err, results);
            cb = null;
          }
          if (isSync)
            queueMicrotask2(end);
          else
            end();
        }
        function each(i, err, result) {
          results[i] = result;
          if (--pending === 0 || err) {
            done(err);
          }
        }
        if (!pending) {
          done(null);
        } else if (keys) {
          keys.forEach(function(key) {
            tasks[key](function(err, result) {
              each(key, err, result);
            });
          });
        } else {
          tasks.forEach(function(task, i) {
            task(function(err, result) {
              each(i, err, result);
            });
          });
        }
        isSync = false;
      }
    }
  });

  // ../node_modules/@nodelib/fs.scandir/out/constants.js
  var require_constants = __commonJS({
    "../node_modules/@nodelib/fs.scandir/out/constants.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = void 0;
      var NODE_PROCESS_VERSION_PARTS = process.versions.node.split(".");
      if (NODE_PROCESS_VERSION_PARTS[0] === void 0 || NODE_PROCESS_VERSION_PARTS[1] === void 0) {
        throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);
      }
      var MAJOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);
      var MINOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);
      var SUPPORTED_MAJOR_VERSION = 10;
      var SUPPORTED_MINOR_VERSION = 10;
      var IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;
      var IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;
      exports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;
    }
  });

  // ../node_modules/@nodelib/fs.scandir/out/utils/fs.js
  var require_fs3 = __commonJS({
    "../node_modules/@nodelib/fs.scandir/out/utils/fs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createDirentFromStats = void 0;
      var DirentFromStats = class {
        constructor(name, stats) {
          this.name = name;
          this.isBlockDevice = stats.isBlockDevice.bind(stats);
          this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
          this.isDirectory = stats.isDirectory.bind(stats);
          this.isFIFO = stats.isFIFO.bind(stats);
          this.isFile = stats.isFile.bind(stats);
          this.isSocket = stats.isSocket.bind(stats);
          this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
        }
      };
      function createDirentFromStats(name, stats) {
        return new DirentFromStats(name, stats);
      }
      exports.createDirentFromStats = createDirentFromStats;
    }
  });

  // ../node_modules/@nodelib/fs.scandir/out/utils/index.js
  var require_utils3 = __commonJS({
    "../node_modules/@nodelib/fs.scandir/out/utils/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.fs = void 0;
      var fs4 = require_fs3();
      exports.fs = fs4;
    }
  });

  // ../node_modules/@nodelib/fs.scandir/out/providers/common.js
  var require_common = __commonJS({
    "../node_modules/@nodelib/fs.scandir/out/providers/common.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.joinPathSegments = void 0;
      function joinPathSegments(a, b2, separator) {
        if (a.endsWith(separator)) {
          return a + b2;
        }
        return a + separator + b2;
      }
      exports.joinPathSegments = joinPathSegments;
    }
  });

  // ../node_modules/@nodelib/fs.scandir/out/providers/async.js
  var require_async2 = __commonJS({
    "../node_modules/@nodelib/fs.scandir/out/providers/async.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.readdir = exports.readdirWithFileTypes = exports.read = void 0;
      var fsStat = require_out();
      var rpl = require_run_parallel();
      var constants_1 = require_constants();
      var utils = require_utils3();
      var common = require_common();
      function read(directory, settings, callback) {
        if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
          readdirWithFileTypes(directory, settings, callback);
          return;
        }
        readdir(directory, settings, callback);
      }
      exports.read = read;
      function readdirWithFileTypes(directory, settings, callback) {
        settings.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {
          if (readdirError !== null) {
            callFailureCallback(callback, readdirError);
            return;
          }
          const entries = dirents.map((dirent) => ({
            dirent,
            name: dirent.name,
            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
          }));
          if (!settings.followSymbolicLinks) {
            callSuccessCallback(callback, entries);
            return;
          }
          const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));
          rpl(tasks, (rplError, rplEntries) => {
            if (rplError !== null) {
              callFailureCallback(callback, rplError);
              return;
            }
            callSuccessCallback(callback, rplEntries);
          });
        });
      }
      exports.readdirWithFileTypes = readdirWithFileTypes;
      function makeRplTaskEntry(entry, settings) {
        return (done) => {
          if (!entry.dirent.isSymbolicLink()) {
            done(null, entry);
            return;
          }
          settings.fs.stat(entry.path, (statError, stats) => {
            if (statError !== null) {
              if (settings.throwErrorOnBrokenSymbolicLink) {
                done(statError);
                return;
              }
              done(null, entry);
              return;
            }
            entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
            done(null, entry);
          });
        };
      }
      function readdir(directory, settings, callback) {
        settings.fs.readdir(directory, (readdirError, names) => {
          if (readdirError !== null) {
            callFailureCallback(callback, readdirError);
            return;
          }
          const tasks = names.map((name) => {
            const path6 = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
            return (done) => {
              fsStat.stat(path6, settings.fsStatSettings, (error, stats) => {
                if (error !== null) {
                  done(error);
                  return;
                }
                const entry = {
                  name,
                  path: path6,
                  dirent: utils.fs.createDirentFromStats(name, stats)
                };
                if (settings.stats) {
                  entry.stats = stats;
                }
                done(null, entry);
              });
            };
          });
          rpl(tasks, (rplError, entries) => {
            if (rplError !== null) {
              callFailureCallback(callback, rplError);
              return;
            }
            callSuccessCallback(callback, entries);
          });
        });
      }
      exports.readdir = readdir;
      function callFailureCallback(callback, error) {
        callback(error);
      }
      function callSuccessCallback(callback, result) {
        callback(null, result);
      }
    }
  });

  // ../node_modules/@nodelib/fs.scandir/out/providers/sync.js
  var require_sync2 = __commonJS({
    "../node_modules/@nodelib/fs.scandir/out/providers/sync.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.readdir = exports.readdirWithFileTypes = exports.read = void 0;
      var fsStat = require_out();
      var constants_1 = require_constants();
      var utils = require_utils3();
      var common = require_common();
      function read(directory, settings) {
        if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
          return readdirWithFileTypes(directory, settings);
        }
        return readdir(directory, settings);
      }
      exports.read = read;
      function readdirWithFileTypes(directory, settings) {
        const dirents = settings.fs.readdirSync(directory, { withFileTypes: true });
        return dirents.map((dirent) => {
          const entry = {
            dirent,
            name: dirent.name,
            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
          };
          if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {
            try {
              const stats = settings.fs.statSync(entry.path);
              entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
            } catch (error) {
              if (settings.throwErrorOnBrokenSymbolicLink) {
                throw error;
              }
            }
          }
          return entry;
        });
      }
      exports.readdirWithFileTypes = readdirWithFileTypes;
      function readdir(directory, settings) {
        const names = settings.fs.readdirSync(directory);
        return names.map((name) => {
          const entryPath = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
          const stats = fsStat.statSync(entryPath, settings.fsStatSettings);
          const entry = {
            name,
            path: entryPath,
            dirent: utils.fs.createDirentFromStats(name, stats)
          };
          if (settings.stats) {
            entry.stats = stats;
          }
          return entry;
        });
      }
      exports.readdir = readdir;
    }
  });

  // ../node_modules/@nodelib/fs.scandir/out/adapters/fs.js
  var require_fs4 = __commonJS({
    "../node_modules/@nodelib/fs.scandir/out/adapters/fs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
      var fs4 = __require("fs");
      exports.FILE_SYSTEM_ADAPTER = {
        lstat: fs4.lstat,
        stat: fs4.stat,
        lstatSync: fs4.lstatSync,
        statSync: fs4.statSync,
        readdir: fs4.readdir,
        readdirSync: fs4.readdirSync
      };
      function createFileSystemAdapter(fsMethods) {
        if (fsMethods === void 0) {
          return exports.FILE_SYSTEM_ADAPTER;
        }
        return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
      }
      exports.createFileSystemAdapter = createFileSystemAdapter;
    }
  });

  // ../node_modules/@nodelib/fs.scandir/out/settings.js
  var require_settings2 = __commonJS({
    "../node_modules/@nodelib/fs.scandir/out/settings.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var path6 = __require("path");
      var fsStat = require_out();
      var fs4 = require_fs4();
      var Settings = class {
        constructor(_options = {}) {
          this._options = _options;
          this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);
          this.fs = fs4.createFileSystemAdapter(this._options.fs);
          this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path6.sep);
          this.stats = this._getValue(this._options.stats, false);
          this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
          this.fsStatSettings = new fsStat.Settings({
            followSymbolicLink: this.followSymbolicLinks,
            fs: this.fs,
            throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink
          });
        }
        _getValue(option, value) {
          return option !== null && option !== void 0 ? option : value;
        }
      };
      exports.default = Settings;
    }
  });

  // ../node_modules/@nodelib/fs.scandir/out/index.js
  var require_out2 = __commonJS({
    "../node_modules/@nodelib/fs.scandir/out/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Settings = exports.scandirSync = exports.scandir = void 0;
      var async = require_async2();
      var sync = require_sync2();
      var settings_1 = require_settings2();
      exports.Settings = settings_1.default;
      function scandir(path6, optionsOrSettingsOrCallback, callback) {
        if (typeof optionsOrSettingsOrCallback === "function") {
          async.read(path6, getSettings(), optionsOrSettingsOrCallback);
          return;
        }
        async.read(path6, getSettings(optionsOrSettingsOrCallback), callback);
      }
      exports.scandir = scandir;
      function scandirSync(path6, optionsOrSettings) {
        const settings = getSettings(optionsOrSettings);
        return sync.read(path6, settings);
      }
      exports.scandirSync = scandirSync;
      function getSettings(settingsOrOptions = {}) {
        if (settingsOrOptions instanceof settings_1.default) {
          return settingsOrOptions;
        }
        return new settings_1.default(settingsOrOptions);
      }
    }
  });

  // ../node_modules/reusify/reusify.js
  var require_reusify = __commonJS({
    "../node_modules/reusify/reusify.js"(exports, module) {
      "use strict";
      function reusify(Constructor) {
        var head = new Constructor();
        var tail = head;
        function get() {
          var current = head;
          if (current.next) {
            head = current.next;
          } else {
            head = new Constructor();
            tail = head;
          }
          current.next = null;
          return current;
        }
        function release(obj) {
          tail.next = obj;
          tail = obj;
        }
        return {
          get,
          release
        };
      }
      module.exports = reusify;
    }
  });

  // ../node_modules/fastq/queue.js
  var require_queue = __commonJS({
    "../node_modules/fastq/queue.js"(exports, module) {
      "use strict";
      var reusify = require_reusify();
      function fastqueue(context, worker, concurrency) {
        if (typeof context === "function") {
          concurrency = worker;
          worker = context;
          context = null;
        }
        if (concurrency < 1) {
          throw new Error("fastqueue concurrency must be greater than 1");
        }
        var cache = reusify(Task);
        var queueHead = null;
        var queueTail = null;
        var _running = 0;
        var errorHandler = null;
        var self2 = {
          push,
          drain: noop,
          saturated: noop,
          pause,
          paused: false,
          concurrency,
          running,
          resume,
          idle,
          length,
          getQueue,
          unshift,
          empty: noop,
          kill,
          killAndDrain,
          error
        };
        return self2;
        function running() {
          return _running;
        }
        function pause() {
          self2.paused = true;
        }
        function length() {
          var current = queueHead;
          var counter = 0;
          while (current) {
            current = current.next;
            counter++;
          }
          return counter;
        }
        function getQueue() {
          var current = queueHead;
          var tasks = [];
          while (current) {
            tasks.push(current.value);
            current = current.next;
          }
          return tasks;
        }
        function resume() {
          if (!self2.paused)
            return;
          self2.paused = false;
          for (var i = 0; i < self2.concurrency; i++) {
            _running++;
            release();
          }
        }
        function idle() {
          return _running === 0 && self2.length() === 0;
        }
        function push(value, done) {
          var current = cache.get();
          current.context = context;
          current.release = release;
          current.value = value;
          current.callback = done || noop;
          current.errorHandler = errorHandler;
          if (_running === self2.concurrency || self2.paused) {
            if (queueTail) {
              queueTail.next = current;
              queueTail = current;
            } else {
              queueHead = current;
              queueTail = current;
              self2.saturated();
            }
          } else {
            _running++;
            worker.call(context, current.value, current.worked);
          }
        }
        function unshift(value, done) {
          var current = cache.get();
          current.context = context;
          current.release = release;
          current.value = value;
          current.callback = done || noop;
          if (_running === self2.concurrency || self2.paused) {
            if (queueHead) {
              current.next = queueHead;
              queueHead = current;
            } else {
              queueHead = current;
              queueTail = current;
              self2.saturated();
            }
          } else {
            _running++;
            worker.call(context, current.value, current.worked);
          }
        }
        function release(holder) {
          if (holder) {
            cache.release(holder);
          }
          var next = queueHead;
          if (next) {
            if (!self2.paused) {
              if (queueTail === queueHead) {
                queueTail = null;
              }
              queueHead = next.next;
              next.next = null;
              worker.call(context, next.value, next.worked);
              if (queueTail === null) {
                self2.empty();
              }
            } else {
              _running--;
            }
          } else if (--_running === 0) {
            self2.drain();
          }
        }
        function kill() {
          queueHead = null;
          queueTail = null;
          self2.drain = noop;
        }
        function killAndDrain() {
          queueHead = null;
          queueTail = null;
          self2.drain();
          self2.drain = noop;
        }
        function error(handler) {
          errorHandler = handler;
        }
      }
      function noop() {
      }
      function Task() {
        this.value = null;
        this.callback = noop;
        this.next = null;
        this.release = noop;
        this.context = null;
        this.errorHandler = null;
        var self2 = this;
        this.worked = function worked(err, result) {
          var callback = self2.callback;
          var errorHandler = self2.errorHandler;
          var val = self2.value;
          self2.value = null;
          self2.callback = noop;
          if (self2.errorHandler) {
            errorHandler(err, val);
          }
          callback.call(self2.context, err, result);
          self2.release(self2);
        };
      }
      function queueAsPromised(context, worker, concurrency) {
        if (typeof context === "function") {
          concurrency = worker;
          worker = context;
          context = null;
        }
        function asyncWrapper(arg, cb) {
          worker.call(this, arg).then(function(res) {
            cb(null, res);
          }, cb);
        }
        var queue = fastqueue(context, asyncWrapper, concurrency);
        var pushCb = queue.push;
        var unshiftCb = queue.unshift;
        queue.push = push;
        queue.unshift = unshift;
        queue.drained = drained;
        return queue;
        function push(value) {
          var p = new Promise(function(resolve, reject) {
            pushCb(value, function(err, result) {
              if (err) {
                reject(err);
                return;
              }
              resolve(result);
            });
          });
          p.catch(noop);
          return p;
        }
        function unshift(value) {
          var p = new Promise(function(resolve, reject) {
            unshiftCb(value, function(err, result) {
              if (err) {
                reject(err);
                return;
              }
              resolve(result);
            });
          });
          p.catch(noop);
          return p;
        }
        function drained() {
          var previousDrain = queue.drain;
          var p = new Promise(function(resolve) {
            queue.drain = function() {
              previousDrain();
              resolve();
            };
          });
          return p;
        }
      }
      module.exports = fastqueue;
      module.exports.promise = queueAsPromised;
    }
  });

  // ../node_modules/@nodelib/fs.walk/out/readers/common.js
  var require_common2 = __commonJS({
    "../node_modules/@nodelib/fs.walk/out/readers/common.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.joinPathSegments = exports.replacePathSegmentSeparator = exports.isAppliedFilter = exports.isFatalError = void 0;
      function isFatalError(settings, error) {
        if (settings.errorFilter === null) {
          return true;
        }
        return !settings.errorFilter(error);
      }
      exports.isFatalError = isFatalError;
      function isAppliedFilter(filter, value) {
        return filter === null || filter(value);
      }
      exports.isAppliedFilter = isAppliedFilter;
      function replacePathSegmentSeparator(filepath, separator) {
        return filepath.split(/[/\\]/).join(separator);
      }
      exports.replacePathSegmentSeparator = replacePathSegmentSeparator;
      function joinPathSegments(a, b2, separator) {
        if (a === "") {
          return b2;
        }
        if (a.endsWith(separator)) {
          return a + b2;
        }
        return a + separator + b2;
      }
      exports.joinPathSegments = joinPathSegments;
    }
  });

  // ../node_modules/@nodelib/fs.walk/out/readers/reader.js
  var require_reader = __commonJS({
    "../node_modules/@nodelib/fs.walk/out/readers/reader.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var common = require_common2();
      var Reader = class {
        constructor(_root, _settings) {
          this._root = _root;
          this._settings = _settings;
          this._root = common.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);
        }
      };
      exports.default = Reader;
    }
  });

  // ../node_modules/@nodelib/fs.walk/out/readers/async.js
  var require_async3 = __commonJS({
    "../node_modules/@nodelib/fs.walk/out/readers/async.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var events_1 = __require("events");
      var fsScandir = require_out2();
      var fastq = require_queue();
      var common = require_common2();
      var reader_1 = require_reader();
      var AsyncReader = class extends reader_1.default {
        constructor(_root, _settings) {
          super(_root, _settings);
          this._settings = _settings;
          this._scandir = fsScandir.scandir;
          this._emitter = new events_1.EventEmitter();
          this._queue = fastq(this._worker.bind(this), this._settings.concurrency);
          this._isFatalError = false;
          this._isDestroyed = false;
          this._queue.drain = () => {
            if (!this._isFatalError) {
              this._emitter.emit("end");
            }
          };
        }
        read() {
          this._isFatalError = false;
          this._isDestroyed = false;
          setImmediate(() => {
            this._pushToQueue(this._root, this._settings.basePath);
          });
          return this._emitter;
        }
        get isDestroyed() {
          return this._isDestroyed;
        }
        destroy() {
          if (this._isDestroyed) {
            throw new Error("The reader is already destroyed");
          }
          this._isDestroyed = true;
          this._queue.killAndDrain();
        }
        onEntry(callback) {
          this._emitter.on("entry", callback);
        }
        onError(callback) {
          this._emitter.once("error", callback);
        }
        onEnd(callback) {
          this._emitter.once("end", callback);
        }
        _pushToQueue(directory, base) {
          const queueItem = { directory, base };
          this._queue.push(queueItem, (error) => {
            if (error !== null) {
              this._handleError(error);
            }
          });
        }
        _worker(item, done) {
          this._scandir(item.directory, this._settings.fsScandirSettings, (error, entries) => {
            if (error !== null) {
              done(error, void 0);
              return;
            }
            for (const entry of entries) {
              this._handleEntry(entry, item.base);
            }
            done(null, void 0);
          });
        }
        _handleError(error) {
          if (this._isDestroyed || !common.isFatalError(this._settings, error)) {
            return;
          }
          this._isFatalError = true;
          this._isDestroyed = true;
          this._emitter.emit("error", error);
        }
        _handleEntry(entry, base) {
          if (this._isDestroyed || this._isFatalError) {
            return;
          }
          const fullpath = entry.path;
          if (base !== void 0) {
            entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
          }
          if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
            this._emitEntry(entry);
          }
          if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
            this._pushToQueue(fullpath, base === void 0 ? void 0 : entry.path);
          }
        }
        _emitEntry(entry) {
          this._emitter.emit("entry", entry);
        }
      };
      exports.default = AsyncReader;
    }
  });

  // ../node_modules/@nodelib/fs.walk/out/providers/async.js
  var require_async4 = __commonJS({
    "../node_modules/@nodelib/fs.walk/out/providers/async.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var async_1 = require_async3();
      var AsyncProvider = class {
        constructor(_root, _settings) {
          this._root = _root;
          this._settings = _settings;
          this._reader = new async_1.default(this._root, this._settings);
          this._storage = [];
        }
        read(callback) {
          this._reader.onError((error) => {
            callFailureCallback(callback, error);
          });
          this._reader.onEntry((entry) => {
            this._storage.push(entry);
          });
          this._reader.onEnd(() => {
            callSuccessCallback(callback, this._storage);
          });
          this._reader.read();
        }
      };
      exports.default = AsyncProvider;
      function callFailureCallback(callback, error) {
        callback(error);
      }
      function callSuccessCallback(callback, entries) {
        callback(null, entries);
      }
    }
  });

  // ../node_modules/@nodelib/fs.walk/out/providers/stream.js
  var require_stream = __commonJS({
    "../node_modules/@nodelib/fs.walk/out/providers/stream.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var stream_1 = __require("stream");
      var async_1 = require_async3();
      var StreamProvider = class {
        constructor(_root, _settings) {
          this._root = _root;
          this._settings = _settings;
          this._reader = new async_1.default(this._root, this._settings);
          this._stream = new stream_1.Readable({
            objectMode: true,
            read: () => {
            },
            destroy: () => {
              if (!this._reader.isDestroyed) {
                this._reader.destroy();
              }
            }
          });
        }
        read() {
          this._reader.onError((error) => {
            this._stream.emit("error", error);
          });
          this._reader.onEntry((entry) => {
            this._stream.push(entry);
          });
          this._reader.onEnd(() => {
            this._stream.push(null);
          });
          this._reader.read();
          return this._stream;
        }
      };
      exports.default = StreamProvider;
    }
  });

  // ../node_modules/@nodelib/fs.walk/out/readers/sync.js
  var require_sync3 = __commonJS({
    "../node_modules/@nodelib/fs.walk/out/readers/sync.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var fsScandir = require_out2();
      var common = require_common2();
      var reader_1 = require_reader();
      var SyncReader = class extends reader_1.default {
        constructor() {
          super(...arguments);
          this._scandir = fsScandir.scandirSync;
          this._storage = [];
          this._queue = /* @__PURE__ */ new Set();
        }
        read() {
          this._pushToQueue(this._root, this._settings.basePath);
          this._handleQueue();
          return this._storage;
        }
        _pushToQueue(directory, base) {
          this._queue.add({ directory, base });
        }
        _handleQueue() {
          for (const item of this._queue.values()) {
            this._handleDirectory(item.directory, item.base);
          }
        }
        _handleDirectory(directory, base) {
          try {
            const entries = this._scandir(directory, this._settings.fsScandirSettings);
            for (const entry of entries) {
              this._handleEntry(entry, base);
            }
          } catch (error) {
            this._handleError(error);
          }
        }
        _handleError(error) {
          if (!common.isFatalError(this._settings, error)) {
            return;
          }
          throw error;
        }
        _handleEntry(entry, base) {
          const fullpath = entry.path;
          if (base !== void 0) {
            entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
          }
          if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
            this._pushToStorage(entry);
          }
          if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
            this._pushToQueue(fullpath, base === void 0 ? void 0 : entry.path);
          }
        }
        _pushToStorage(entry) {
          this._storage.push(entry);
        }
      };
      exports.default = SyncReader;
    }
  });

  // ../node_modules/@nodelib/fs.walk/out/providers/sync.js
  var require_sync4 = __commonJS({
    "../node_modules/@nodelib/fs.walk/out/providers/sync.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var sync_1 = require_sync3();
      var SyncProvider = class {
        constructor(_root, _settings) {
          this._root = _root;
          this._settings = _settings;
          this._reader = new sync_1.default(this._root, this._settings);
        }
        read() {
          return this._reader.read();
        }
      };
      exports.default = SyncProvider;
    }
  });

  // ../node_modules/@nodelib/fs.walk/out/settings.js
  var require_settings3 = __commonJS({
    "../node_modules/@nodelib/fs.walk/out/settings.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var path6 = __require("path");
      var fsScandir = require_out2();
      var Settings = class {
        constructor(_options = {}) {
          this._options = _options;
          this.basePath = this._getValue(this._options.basePath, void 0);
          this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);
          this.deepFilter = this._getValue(this._options.deepFilter, null);
          this.entryFilter = this._getValue(this._options.entryFilter, null);
          this.errorFilter = this._getValue(this._options.errorFilter, null);
          this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path6.sep);
          this.fsScandirSettings = new fsScandir.Settings({
            followSymbolicLinks: this._options.followSymbolicLinks,
            fs: this._options.fs,
            pathSegmentSeparator: this._options.pathSegmentSeparator,
            stats: this._options.stats,
            throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink
          });
        }
        _getValue(option, value) {
          return option !== null && option !== void 0 ? option : value;
        }
      };
      exports.default = Settings;
    }
  });

  // ../node_modules/@nodelib/fs.walk/out/index.js
  var require_out3 = __commonJS({
    "../node_modules/@nodelib/fs.walk/out/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Settings = exports.walkStream = exports.walkSync = exports.walk = void 0;
      var async_1 = require_async4();
      var stream_1 = require_stream();
      var sync_1 = require_sync4();
      var settings_1 = require_settings3();
      exports.Settings = settings_1.default;
      function walk3(directory, optionsOrSettingsOrCallback, callback) {
        if (typeof optionsOrSettingsOrCallback === "function") {
          new async_1.default(directory, getSettings()).read(optionsOrSettingsOrCallback);
          return;
        }
        new async_1.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);
      }
      exports.walk = walk3;
      function walkSync(directory, optionsOrSettings) {
        const settings = getSettings(optionsOrSettings);
        const provider = new sync_1.default(directory, settings);
        return provider.read();
      }
      exports.walkSync = walkSync;
      function walkStream(directory, optionsOrSettings) {
        const settings = getSettings(optionsOrSettings);
        const provider = new stream_1.default(directory, settings);
        return provider.read();
      }
      exports.walkStream = walkStream;
      function getSettings(settingsOrOptions = {}) {
        if (settingsOrOptions instanceof settings_1.default) {
          return settingsOrOptions;
        }
        return new settings_1.default(settingsOrOptions);
      }
    }
  });

  // ../modules/_NapiModules/HMC/HMC.js
  var require_HMC = __commonJS({
    "../modules/_NapiModules/HMC/HMC.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SystemInfo = exports.getProcessHandleList = exports.confirm = exports.alert = exports.messageBox = exports.ProcessWindowSetTitle = exports.handleWindowSetTitle = exports.ProcessWindowGetTitle = exports.handleWindowGetProcessID = exports.handleWindowGetTitle = exports.ProcessCloseWindow = exports.handleCloseWindow = exports.isProcessIDWindowVisible = exports.isHandleWindowVisible = exports.ProcessIDShowWindow = exports.handleShowWindow = exports.isProcessByName = exports.KillNameList = exports.lookNameList = exports.power = exports.showMonitors = exports.shutMonitors = exports.getStringRegKey = exports.getWin32ApiProcessList = exports.getSystemIdleTime = exports.isProcess = exports.lookProcessPidList = exports.lookNameKill = exports.OpenAppToUAC = exports.OpenApp = exports.getProcessNameFilePath = exports.getPidFilePath = exports.getForegroundWindow = exports.getProcessHandle = exports.getSystemMenu = exports.getWin32DetailsProcessList = exports.getProcessList = exports.KillProcess = exports.Sleep = exports.isAdmin = exports.CallHMC = void 0;
      var path_1 = __importDefault(__require("path"));
      var fs_1 = __require("fs");
      var os = __require("os");
      var child_process_1 = __importDefault(__require("child_process"));
      var child_process_2 = __require("child_process");
      var HMC2;
      var _file_HMC_Path = path_1.default.join(__dirname, "HMC.node");
      var _is_file_HMC__dirname_node = (0, fs_1.existsSync)(_file_HMC_Path);
      var _electron_file_HMC_Path = path_1.default.join(process.resourcesPath || process.cwd() || "", "bin", "HMC.node");
      var _is_electron_file_HMC_Path = (0, fs_1.existsSync)(_electron_file_HMC_Path);
      if (_is_electron_file_HMC_Path) {
        HMC2 = __require(_electron_file_HMC_Path);
      } else if (_is_file_HMC__dirname_node) {
        HMC2 = __require(_file_HMC_Path);
      } else {
        throw new Error("HMC is not binary");
      }
      function AddToDefineProperty(Arrays, Name, Fun) {
        Object.defineProperty(Arrays, Name, {
          value: Fun,
          writable: true,
          enumerable: true,
          configurable: true
        });
      }
      exports.CallHMC = HMC2;
      function isAdmin() {
        return HMC2.isAdmin();
      }
      exports.isAdmin = isAdmin;
      function Sleep2(ms, Sync) {
        let FormatMs = isNaN(Number(ms)) ? 150 : Number(ms);
        if (Sync)
          return HMC2.sleep(FormatMs), void 0;
        return new Promise((resolve) => setTimeout(resolve, Number(FormatMs)));
      }
      exports.Sleep = Sleep2;
      function KillProcess(Pid) {
        if (isNaN(Number(Pid)))
          throw new Error("The parameter(PID) can only be a number");
        return HMC2.killProcess(Number(Pid));
      }
      exports.KillProcess = KillProcess;
      var BackLockProcessList = [];
      function getProcessList() {
        return new Promise(async function(resolve, reject) {
          let cpuSpeedSize = 0;
          for (let cpu of os.cpus()) {
            cpuSpeedSize += cpu.speed;
          }
          try {
            let GetProcessListSystemText = function() {
              return new Promise((resolve2, reject2) => {
                let ps2_GetProcess2 = "";
                let ps2_GetProcess_Buff = /* @__PURE__ */ new Set();
                let cmd_ChildProcess = (0, child_process_2.spawn)("cmd", [`/C chcp 65001>nul && PowerShell Get-Process`], { windowsHide: true });
                cmd_ChildProcess.stdout.on("data", (data) => ps2_GetProcess_Buff.add(data));
                cmd_ChildProcess.stdout.once("close", function() {
                  let size = 0;
                  for (const Buff of ps2_GetProcess_Buff)
                    size += Buff.byteLength;
                  let BuffConcat = Buffer.concat([...ps2_GetProcess_Buff], size);
                  ps2_GetProcess2 = BuffConcat.toString("utf-8");
                  resolve2(ps2_GetProcess2);
                });
                cmd_ChildProcess.once("error", function() {
                  resolve2(ps2_GetProcess2);
                });
              });
            };
            let GetProcessList = /* @__PURE__ */ new Set();
            let ps2_GetProcess = await GetProcessListSystemText();
            for (let Process of ps2_GetProcess?.split(/[\r\n]+/) || [])
              if (Process && !Process?.match(/^[\s\t ]+$/))
                GetProcessList.add(Process);
            let ProcessList = [];
            let index = 0;
            let Hade = ["Handles", "NPM(K)", "PM(K)", "WS(K)", "CPU(s)", "PID", "SI", "ProcessName"];
            for (let Process of GetProcessList) {
              if (index != 0 && index != 1) {
                let match_Process = Process?.match(/^ +([,\d\.]+) +([,\d\.]+) +([,\d\.]+) +([,\d\.]+) +([,\d\.]+) +([,\d\.]+) +([,\d\.]+) (.+?) +$/i) || [];
                let matchProcess = [...match_Process];
                let ProcessCont = {};
                for (let index2 = 0; index2 < matchProcess.length; index2++) {
                  const element = matchProcess[index2];
                  if (element.match(/^[,\d\.]+$/)) {
                    matchProcess[index2] = element.replace(/[,]+/g, "");
                  }
                }
                if (matchProcess) {
                  for (let index2 = 1; index2 < matchProcess.length; index2++) {
                    ProcessCont[Hade[index2 - 1]] = matchProcess[index2];
                    ProcessCont["CPU(s)"] = Number(ProcessCont["CPU(s)"]);
                    ProcessCont["Handles"] = Number(ProcessCont["Handles"]);
                    ProcessCont["PID"] = Number(ProcessCont["PID"]);
                    ProcessCont["NPM(K)"] = Number(ProcessCont["NPM(K)"]);
                    ProcessCont["PM(K)"] = Number(ProcessCont["PM(K)"]);
                    ProcessCont["SI"] = Number(ProcessCont["SI"]);
                    ProcessCont["WS(K)"] = Number(ProcessCont["WS(K)"]);
                    ProcessCont["CmdName"] = ProcessCont["ProcessName"] + ".exe";
                  }
                  ProcessList.push(ProcessCont);
                }
              }
              index++;
            }
            BackLockProcessList.length = 0;
            BackLockProcessList.push(...ProcessList);
            setTimeout(() => BackLockProcessList.length = 0, 500);
            resolve(ProcessList);
          } catch (err) {
            reject(err);
          }
        });
      }
      exports.getProcessList = getProcessList;
      function getWin32DetailsProcessList() {
        return HMC2.getWin32DetailsProcessList();
      }
      exports.getWin32DetailsProcessList = getWin32DetailsProcessList;
      function getSystemMenu(HWND, bRevert) {
        return HMC2.getSystemMenu(HWND, bRevert);
      }
      exports.getSystemMenu = getSystemMenu;
      function getProcessHandle(ProcessID) {
        return HMC2.getProcessHandle(ProcessID);
      }
      exports.getProcessHandle = getProcessHandle;
      function getForegroundWindow() {
        return HMC2.getForegroundWindow();
      }
      exports.getForegroundWindow = getForegroundWindow;
      function getPidFilePath(ProcessID) {
        return HMC2.getPidFilePath(ProcessID);
      }
      exports.getPidFilePath = getPidFilePath;
      function getProcessNameFilePath(Name) {
        let FilePathSetList = /* @__PURE__ */ new Set();
        let GetProcessList = lookNameList([Name]);
        if (GetProcessList.length) {
          for (const ProcessID of GetProcessList) {
            let FilePath = getPidFilePath(ProcessID);
            FilePath && FilePathSetList.add(FilePath);
          }
        }
        return [...FilePathSetList];
      }
      exports.getProcessNameFilePath = getProcessNameFilePath;
      function OpenApp(AppPath, Command, cwd, hide) {
        if (!AppPath) {
          throw new Error("AppPath is Not");
        }
        if (!Command)
          Command = "";
        if (!cwd)
          cwd = null;
        if (Array.isArray(Command)) {
          let command_ToFlag = "";
          for (const Flag of Command) {
            command_ToFlag += `"${Flag}" `;
          }
          Command = command_ToFlag.replace(/ $/, "");
        }
        return HMC2.openApp(String(AppPath), String(Command), String(cwd) || path_1.default.parse(path_1.default.resolve(AppPath)).dir, hide ? true : false);
      }
      exports.OpenApp = OpenApp;
      function OpenAppToUAC(AppPath, Command, cwd, hide) {
        if (!AppPath) {
          throw new Error("AppPath is Not");
        }
        if (!Command)
          Command = "";
        if (!cwd)
          cwd = null;
        if (Array.isArray(Command)) {
          let command_ToFlag = "";
          for (const Flag of Command) {
            command_ToFlag += `"${Flag}"`;
          }
          Command = command_ToFlag;
        }
        return HMC2.openAppToUAC(String(AppPath), String(Command), String(cwd) || path_1.default.parse(path_1.default.resolve(AppPath)).dir, hide ? true : false);
      }
      exports.OpenAppToUAC = OpenAppToUAC;
      function lookNameKill(lookName) {
        HMC2.killProcessByName(String(lookName));
        if (!String(lookName).match(/.exe/i)) {
          HMC2.killProcessByName(String(lookName) + ".exe");
        }
        return;
      }
      exports.lookNameKill = lookNameKill;
      function lookProcessPidList(lookName) {
        let C_lookInfo = HMC2.lookProcessByName(String(lookName));
        let lookInfo = [];
        lookInfo.push(...C_lookInfo);
        AddToDefineProperty(lookInfo, "Kill", function() {
          for (let pid of this)
            HMC2.killProcess(pid);
        });
        return lookInfo;
      }
      exports.lookProcessPidList = lookProcessPidList;
      function isProcess(ProcessName) {
        return lookProcessPidList(ProcessName).length > 0;
      }
      exports.isProcess = isProcess;
      function getSystemIdleTime() {
        return HMC2.getSystemIdleTime();
      }
      exports.getSystemIdleTime = getSystemIdleTime;
      function getWin32ApiProcessList() {
        return HMC2.getProcessList();
      }
      exports.getWin32ApiProcessList = getWin32ApiProcessList;
      function getStringRegKey(HKEY, Path, Name) {
        try {
          return HMC2.getStringRegKey(HKEY, Path, Name);
        } catch (error) {
          return "";
        }
      }
      exports.getStringRegKey = getStringRegKey;
      function shutMonitors() {
        HMC2.shutMonitors();
      }
      exports.shutMonitors = shutMonitors;
      function showMonitors() {
        HMC2.showMonitors();
      }
      exports.showMonitors = showMonitors;
      exports.power = {
        off() {
          HMC2.win32Judge(1001);
        },
        reboot() {
          HMC2.win32Judge(1002);
        },
        logout() {
          HMC2.win32Judge(1003);
        },
        Lock() {
          HMC2.win32Judge(1005);
        },
        showMonitors,
        shutMonitors,
        Monitors(Need) {
          if (Need) {
            showMonitors();
            return;
          }
          shutMonitors();
        }
      };
      function lookNameList(NameList) {
        let Win32ApiProcessList = getWin32ApiProcessList();
        let KillProcessIdList = /* @__PURE__ */ new Set();
        for (let FindProcessName of NameList) {
          if (FindProcessName)
            for (const Win32ApiProcessIterator of Win32ApiProcessList) {
              if (Win32ApiProcessIterator.name?.match(FindProcessName)) {
                KillProcessIdList.add(Win32ApiProcessIterator.pid);
              }
            }
        }
        let lookInfo = [...KillProcessIdList];
        AddToDefineProperty(lookInfo, "Kill", function() {
          for (let pid of this)
            HMC2.killProcess(pid);
        });
        return lookInfo;
      }
      exports.lookNameList = lookNameList;
      function KillNameList(NameList) {
        let KillProcessIdList = lookNameList(NameList);
        let info = 0;
        for (let pid of KillProcessIdList)
          info += HMC2.killProcess(pid);
        return info == KillProcessIdList.length;
      }
      exports.KillNameList = KillNameList;
      function isProcessByName(Name) {
        if (Name instanceof Set || Array.isArray(Name)) {
          let KillProcessIdList2 = lookNameList(Name);
          return KillProcessIdList2.length !== 0;
        }
        let KillProcessIdList = lookNameList([Name]);
        return KillProcessIdList.length !== 0;
      }
      exports.isProcessByName = isProcessByName;
      var win32_STARTUPINFO = {
        SW_HIDE: 0,
        SW_SHOWNORMAL: 1,
        SW_NORMAL: 1,
        SW_SHOWMINIMIZED: 2,
        SW_SHOWMAXIMIZED: 3,
        SW_MAXIMIZE: 3,
        SW_SHOWNOACTIVATE: 4,
        SW_SHOW: 5,
        SW_MINIMIZE: 6,
        SW_SHOWMINNOACTIVE: 7,
        SW_SHOWNA: 8,
        SW_RESTORE: 9,
        SW_SHOWDEFAULT: 10,
        SW_FORCEMINIMIZE: 11
      };
      function handleShowWindow(HWND, nCmdShow) {
        if (typeof HWND != "number")
          return false;
        if (!["string", "number", "boolean"].includes(typeof nCmdShow))
          return false;
        if (typeof nCmdShow == "boolean")
          nCmdShow = nCmdShow ? 9 : 0;
        if (typeof nCmdShow == "number" && !(nCmdShow >= 0 && nCmdShow <= 11))
          return false;
        if (typeof nCmdShow == "string") {
          let _nCmdShow = win32_STARTUPINFO[nCmdShow];
          if (_nCmdShow === void 0)
            return false;
        }
        return HMC2.handleShowWindow(HWND, nCmdShow);
      }
      exports.handleShowWindow = handleShowWindow;
      function ProcessIDShowWindow(ProcessID, nCmdShow) {
        let HWND = getProcessHandle(ProcessID);
        return handleShowWindow(HWND, nCmdShow);
      }
      exports.ProcessIDShowWindow = ProcessIDShowWindow;
      function isHandleWindowVisible(Handle) {
        if (!Handle)
          return false;
        return HMC2.isHandleWindowVisible(Handle);
      }
      exports.isHandleWindowVisible = isHandleWindowVisible;
      function isProcessIDWindowVisible(ProcessID) {
        let HWND = getProcessHandle(ProcessID);
        return isHandleWindowVisible(HWND);
      }
      exports.isProcessIDWindowVisible = isProcessIDWindowVisible;
      function handleCloseWindow(Handle) {
        if (!Handle)
          return false;
        return HMC2.handleCloseWindow(Handle);
      }
      exports.handleCloseWindow = handleCloseWindow;
      function ProcessCloseWindow(ProcessID) {
        let HWND = getProcessHandle(ProcessID);
        return handleCloseWindow(HWND);
      }
      exports.ProcessCloseWindow = ProcessCloseWindow;
      function handleWindowGetTitle(Handle) {
        return HMC2.handleGetTitle(Handle);
      }
      exports.handleWindowGetTitle = handleWindowGetTitle;
      function handleWindowGetProcessID(Handle) {
        return HMC2.handleGetProcessID(Handle);
      }
      exports.handleWindowGetProcessID = handleWindowGetProcessID;
      function ProcessWindowGetTitle(ProcessID) {
        let HWND = getProcessHandle(ProcessID);
        return handleWindowGetTitle(HWND);
      }
      exports.ProcessWindowGetTitle = ProcessWindowGetTitle;
      function handleWindowSetTitle(Handle) {
        return HMC2.handleSetTitle(Handle);
      }
      exports.handleWindowSetTitle = handleWindowSetTitle;
      function ProcessWindowSetTitle(ProcessID) {
        let HWND = getProcessHandle(ProcessID);
        return handleWindowSetTitle(HWND);
      }
      exports.ProcessWindowSetTitle = ProcessWindowSetTitle;
      function messageBox(lpText, lpCaption, UINT_String) {
        if (!lpCaption)
          lpCaption = "\u6765\u81EA\u795E\u5947\u53E3\u888B\u7684\u6D88\u606F";
        return HMC2.messageBox(String(lpText), String(lpCaption), !UINT_String || "MB_OK");
      }
      exports.messageBox = messageBox;
      function alert2(lpText, lpCaption) {
        HMC2.messageBox(String(lpText), String(lpCaption), "MB_OK");
      }
      exports.alert = alert2;
      function confirm2(lpText, lpCaption) {
        let confirm_Info = HMC2.messageBox(String(lpText), String(lpCaption), "MB_OKCANCEL");
        return confirm_Info == 1 || confirm_Info == 6;
      }
      exports.confirm = confirm2;
      function getProcessHandleList(ProcessName) {
        let GetProcessHandleList_data = [];
        for (let pid of lookProcessPidList(ProcessName)) {
          let Handle = getProcessHandle(pid);
          Handle && GetProcessHandleList_data.push(Handle);
        }
        return GetProcessHandleList_data;
      }
      exports.getProcessHandleList = getProcessHandleList;
      function SystemInfo(CmdStr, Configure) {
        if (Array.isArray(CmdStr)) {
          let Str = "";
          for (let ForString of CmdStr)
            Str += ForString;
          CmdStr = Str;
        }
        return new Promise((resolve, reject) => {
          let SystemInfo2 = "";
          let GetSystemChildBuffer = /* @__PURE__ */ new Set();
          let cmd_ChildProcess = child_process_1.default.spawn("cmd", [`/C chcp 65001>nul && ${CmdStr}`], Object.assign({
            windowsHide: true,
            cwd: process.cwd()
          }, Configure || {}));
          cmd_ChildProcess.stdout.on("data", (data) => GetSystemChildBuffer.add(data));
          cmd_ChildProcess.stdout.once("close", function() {
            let size = 0;
            for (const Buff of GetSystemChildBuffer)
              size += Buff.byteLength;
            let BuffConcat = Buffer.concat([...GetSystemChildBuffer], size);
            SystemInfo2 = BuffConcat.toString("utf-8").replace(/(\n\r|\r\n)/g, "\n");
            resolve(SystemInfo2);
          });
          cmd_ChildProcess.once("error", function(error) {
            reject(error);
          });
        });
      }
      exports.SystemInfo = SystemInfo;
      exports.default = {
        CallHMC: exports.CallHMC,
        isAdmin,
        Sleep: Sleep2,
        KillProcess,
        getProcessList,
        getWin32DetailsProcessList,
        getSystemMenu,
        getProcessHandle,
        getForegroundWindow,
        getPidFilePath,
        getProcessNameFilePath,
        OpenApp,
        OpenAppToUAC,
        lookNameKill,
        lookProcessPidList,
        isProcess,
        getSystemIdleTime,
        getWin32ApiProcessList,
        getStringRegKey,
        shutMonitors,
        showMonitors,
        power: exports.power,
        lookNameList,
        KillNameList,
        isProcessByName,
        handleShowWindow,
        ProcessIDShowWindow,
        isHandleWindowVisible,
        isProcessIDWindowVisible,
        handleCloseWindow,
        ProcessCloseWindow,
        handleWindowGetTitle,
        ProcessWindowGetTitle,
        handleWindowSetTitle,
        ProcessWindowSetTitle,
        messageBox,
        alert: alert2,
        confirm: confirm2,
        getProcessHandleList,
        handleWindowGetProcessID
      };
    }
  });

  // ../modules/_NapiModules/sharp/index.js
  var require_sharp = __commonJS({
    "../modules/_NapiModules/sharp/index.js"(exports, module) {
      "use strict";
      var path6 = __require("path");
      module.exports = __require(path6.join(process.resourcesPath, "bin", "sharp"));
    }
  });

  // ../modules/_NapiModules/clip/index.js
  var require_clip = __commonJS({
    "../modules/_NapiModules/clip/index.js"(exports, module) {
      "use strict";
      var { promisify: promisify3 } = __require("util");
      var {
        availableFormats,
        writeText,
        writeRTF,
        writeImage,
        writeHTML,
        writeFindText,
        writeBuffer,
        writeBookmark,
        write,
        readText,
        readRTF,
        readImage,
        readHTML,
        readFindText,
        readBuffer,
        readBookmark,
        read,
        has
      } = __require("electron").clipboard;
      var path6 = __require("path");
      var {
        readFilePaths,
        writeFilePaths,
        clear,
        saveImageAsJpegSync,
        saveImageAsJpegAsync,
        saveImageAsPngSync,
        saveImageAsPngAsync,
        putImageSync,
        putImageAsync,
        hasImage
      } = __require(path6.join(process.resourcesPath, "bin", "clip.node"));
      module.exports = {
        readFilePaths(Index) {
          let FileList = readFilePaths() || [];
          if (typeof Index == "undefined")
            return FileList;
          if (FileList.length < Index)
            return null;
          return FileList[Index];
        },
        writeFilePaths,
        clear,
        saveImageAsJpeg: promisify3(saveImageAsJpegAsync),
        saveImageAsJpegSync,
        saveImageAsPng: promisify3(saveImageAsPngAsync),
        saveImageAsPngSync,
        putImageSync,
        putImage: promisify3(putImageAsync),
        hasImage,
        availableFormats,
        writeText,
        writeRTF,
        writeImage,
        writeHTML,
        writeFindText,
        writeBuffer,
        writeBookmark,
        write,
        readText,
        readRTF,
        readImage,
        readHTML,
        readFindText,
        readBuffer,
        readBookmark,
        read,
        has,
        hasPath() {
          return availableFormats().includes("text/uri-list");
        }
      };
    }
  });

  // ../node_modules/inherits/inherits_browser.js
  var require_inherits_browser = __commonJS({
    "../node_modules/inherits/inherits_browser.js"(exports, module) {
      if (typeof Object.create === "function") {
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          }
        };
      } else {
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function() {
            };
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }
        };
      }
    }
  });

  // ../node_modules/inherits/inherits.js
  var require_inherits = __commonJS({
    "../node_modules/inherits/inherits.js"(exports, module) {
      try {
        util = __require("util");
        if (typeof util.inherits !== "function")
          throw "";
        module.exports = util.inherits;
      } catch (e) {
        module.exports = require_inherits_browser();
      }
      var util;
    }
  });

  // ../node_modules/queue/index.js
  var require_queue2 = __commonJS({
    "../node_modules/queue/index.js"(exports, module) {
      var inherits = require_inherits();
      var EventEmitter = __require("events").EventEmitter;
      module.exports = Queue;
      module.exports.default = Queue;
      function Queue(options) {
        if (!(this instanceof Queue)) {
          return new Queue(options);
        }
        EventEmitter.call(this);
        options = options || {};
        this.concurrency = options.concurrency || Infinity;
        this.timeout = options.timeout || 0;
        this.autostart = options.autostart || false;
        this.results = options.results || null;
        this.pending = 0;
        this.session = 0;
        this.running = false;
        this.jobs = [];
        this.timers = {};
      }
      inherits(Queue, EventEmitter);
      var arrayMethods = [
        "pop",
        "shift",
        "indexOf",
        "lastIndexOf"
      ];
      arrayMethods.forEach(function(method) {
        Queue.prototype[method] = function() {
          return Array.prototype[method].apply(this.jobs, arguments);
        };
      });
      Queue.prototype.slice = function(begin, end) {
        this.jobs = this.jobs.slice(begin, end);
        return this;
      };
      Queue.prototype.reverse = function() {
        this.jobs.reverse();
        return this;
      };
      var arrayAddMethods = [
        "push",
        "unshift",
        "splice"
      ];
      arrayAddMethods.forEach(function(method) {
        Queue.prototype[method] = function() {
          var methodResult = Array.prototype[method].apply(this.jobs, arguments);
          if (this.autostart) {
            this.start();
          }
          return methodResult;
        };
      });
      Object.defineProperty(Queue.prototype, "length", {
        get: function() {
          return this.pending + this.jobs.length;
        }
      });
      Queue.prototype.start = function(cb) {
        if (cb) {
          callOnErrorOrEnd.call(this, cb);
        }
        this.running = true;
        if (this.pending >= this.concurrency) {
          return;
        }
        if (this.jobs.length === 0) {
          if (this.pending === 0) {
            done.call(this);
          }
          return;
        }
        var self2 = this;
        var job = this.jobs.shift();
        var once = true;
        var session = this.session;
        var timeoutId = null;
        var didTimeout = false;
        var resultIndex = null;
        var timeout = job.hasOwnProperty("timeout") ? job.timeout : this.timeout;
        function next(err, result) {
          if (once && self2.session === session) {
            once = false;
            self2.pending--;
            if (timeoutId !== null) {
              delete self2.timers[timeoutId];
              clearTimeout(timeoutId);
            }
            if (err) {
              self2.emit("error", err, job);
            } else if (didTimeout === false) {
              if (resultIndex !== null) {
                self2.results[resultIndex] = Array.prototype.slice.call(arguments, 1);
              }
              self2.emit("success", result, job);
            }
            if (self2.session === session) {
              if (self2.pending === 0 && self2.jobs.length === 0) {
                done.call(self2);
              } else if (self2.running) {
                self2.start();
              }
            }
          }
        }
        if (timeout) {
          timeoutId = setTimeout(function() {
            didTimeout = true;
            if (self2.listeners("timeout").length > 0) {
              self2.emit("timeout", next, job);
            } else {
              next();
            }
          }, timeout);
          this.timers[timeoutId] = timeoutId;
        }
        if (this.results) {
          resultIndex = this.results.length;
          this.results[resultIndex] = null;
        }
        this.pending++;
        self2.emit("start", job);
        var promise = job(next);
        if (promise && promise.then && typeof promise.then === "function") {
          promise.then(function(result) {
            return next(null, result);
          }).catch(function(err) {
            return next(err || true);
          });
        }
        if (this.running && this.jobs.length > 0) {
          this.start();
        }
      };
      Queue.prototype.stop = function() {
        this.running = false;
      };
      Queue.prototype.end = function(err) {
        clearTimers.call(this);
        this.jobs.length = 0;
        this.pending = 0;
        done.call(this, err);
      };
      function clearTimers() {
        for (var key in this.timers) {
          var timeoutId = this.timers[key];
          delete this.timers[key];
          clearTimeout(timeoutId);
        }
      }
      function callOnErrorOrEnd(cb) {
        var self2 = this;
        this.on("error", onerror);
        this.on("end", onend);
        function onerror(err) {
          self2.end(err);
        }
        function onend(err) {
          self2.removeListener("error", onerror);
          self2.removeListener("end", onend);
          cb(err, this.results);
        }
      }
      function done(err) {
        this.session++;
        this.running = false;
        this.emit("end", err);
      }
    }
  });

  // ../node_modules/image-size/dist/types/bmp.js
  var require_bmp = __commonJS({
    "../node_modules/image-size/dist/types/bmp.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BMP = void 0;
      exports.BMP = {
        validate(buffer) {
          return "BM" === buffer.toString("ascii", 0, 2);
        },
        calculate(buffer) {
          return {
            height: Math.abs(buffer.readInt32LE(22)),
            width: buffer.readUInt32LE(18)
          };
        }
      };
    }
  });

  // ../node_modules/image-size/dist/types/ico.js
  var require_ico = __commonJS({
    "../node_modules/image-size/dist/types/ico.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ICO = void 0;
      var TYPE_ICON = 1;
      var SIZE_HEADER = 2 + 2 + 2;
      var SIZE_IMAGE_ENTRY = 1 + 1 + 1 + 1 + 2 + 2 + 4 + 4;
      function getSizeFromOffset(buffer, offset) {
        const value = buffer.readUInt8(offset);
        return value === 0 ? 256 : value;
      }
      function getImageSize(buffer, imageIndex) {
        const offset = SIZE_HEADER + imageIndex * SIZE_IMAGE_ENTRY;
        return {
          height: getSizeFromOffset(buffer, offset + 1),
          width: getSizeFromOffset(buffer, offset)
        };
      }
      exports.ICO = {
        validate(buffer) {
          if (buffer.readUInt16LE(0) !== 0) {
            return false;
          }
          return buffer.readUInt16LE(2) === TYPE_ICON;
        },
        calculate(buffer) {
          const nbImages = buffer.readUInt16LE(4);
          const imageSize = getImageSize(buffer, 0);
          if (nbImages === 1) {
            return imageSize;
          }
          const imgs = [imageSize];
          for (let imageIndex = 1; imageIndex < nbImages; imageIndex += 1) {
            imgs.push(getImageSize(buffer, imageIndex));
          }
          const result = {
            height: imageSize.height,
            images: imgs,
            width: imageSize.width
          };
          return result;
        }
      };
    }
  });

  // ../node_modules/image-size/dist/types/cur.js
  var require_cur = __commonJS({
    "../node_modules/image-size/dist/types/cur.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.CUR = void 0;
      var ico_1 = require_ico();
      var TYPE_CURSOR = 2;
      exports.CUR = {
        validate(buffer) {
          if (buffer.readUInt16LE(0) !== 0) {
            return false;
          }
          return buffer.readUInt16LE(2) === TYPE_CURSOR;
        },
        calculate(buffer) {
          return ico_1.ICO.calculate(buffer);
        }
      };
    }
  });

  // ../node_modules/image-size/dist/types/dds.js
  var require_dds = __commonJS({
    "../node_modules/image-size/dist/types/dds.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DDS = void 0;
      exports.DDS = {
        validate(buffer) {
          return buffer.readUInt32LE(0) === 542327876;
        },
        calculate(buffer) {
          return {
            height: buffer.readUInt32LE(12),
            width: buffer.readUInt32LE(16)
          };
        }
      };
    }
  });

  // ../node_modules/image-size/dist/types/gif.js
  var require_gif = __commonJS({
    "../node_modules/image-size/dist/types/gif.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.GIF = void 0;
      var gifRegexp = /^GIF8[79]a/;
      exports.GIF = {
        validate(buffer) {
          const signature = buffer.toString("ascii", 0, 6);
          return gifRegexp.test(signature);
        },
        calculate(buffer) {
          return {
            height: buffer.readUInt16LE(8),
            width: buffer.readUInt16LE(6)
          };
        }
      };
    }
  });

  // ../node_modules/image-size/dist/types/icns.js
  var require_icns = __commonJS({
    "../node_modules/image-size/dist/types/icns.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ICNS = void 0;
      var SIZE_HEADER = 4 + 4;
      var FILE_LENGTH_OFFSET = 4;
      var ENTRY_LENGTH_OFFSET = 4;
      var ICON_TYPE_SIZE = {
        ICON: 32,
        "ICN#": 32,
        "icm#": 16,
        icm4: 16,
        icm8: 16,
        "ics#": 16,
        ics4: 16,
        ics8: 16,
        is32: 16,
        s8mk: 16,
        icp4: 16,
        icl4: 32,
        icl8: 32,
        il32: 32,
        l8mk: 32,
        icp5: 32,
        ic11: 32,
        ich4: 48,
        ich8: 48,
        ih32: 48,
        h8mk: 48,
        icp6: 64,
        ic12: 32,
        it32: 128,
        t8mk: 128,
        ic07: 128,
        ic08: 256,
        ic13: 256,
        ic09: 512,
        ic14: 512,
        ic10: 1024
      };
      function readImageHeader(buffer, imageOffset) {
        const imageLengthOffset = imageOffset + ENTRY_LENGTH_OFFSET;
        return [
          buffer.toString("ascii", imageOffset, imageLengthOffset),
          buffer.readUInt32BE(imageLengthOffset)
        ];
      }
      function getImageSize(type) {
        const size = ICON_TYPE_SIZE[type];
        return { width: size, height: size, type };
      }
      exports.ICNS = {
        validate(buffer) {
          return "icns" === buffer.toString("ascii", 0, 4);
        },
        calculate(buffer) {
          const bufferLength = buffer.length;
          const fileLength = buffer.readUInt32BE(FILE_LENGTH_OFFSET);
          let imageOffset = SIZE_HEADER;
          let imageHeader = readImageHeader(buffer, imageOffset);
          let imageSize = getImageSize(imageHeader[0]);
          imageOffset += imageHeader[1];
          if (imageOffset === fileLength) {
            return imageSize;
          }
          const result = {
            height: imageSize.height,
            images: [imageSize],
            width: imageSize.width
          };
          while (imageOffset < fileLength && imageOffset < bufferLength) {
            imageHeader = readImageHeader(buffer, imageOffset);
            imageSize = getImageSize(imageHeader[0]);
            imageOffset += imageHeader[1];
            result.images.push(imageSize);
          }
          return result;
        }
      };
    }
  });

  // ../node_modules/image-size/dist/types/j2c.js
  var require_j2c = __commonJS({
    "../node_modules/image-size/dist/types/j2c.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.J2C = void 0;
      exports.J2C = {
        validate(buffer) {
          return buffer.toString("hex", 0, 4) === "ff4fff51";
        },
        calculate(buffer) {
          return {
            height: buffer.readUInt32BE(12),
            width: buffer.readUInt32BE(8)
          };
        }
      };
    }
  });

  // ../node_modules/image-size/dist/types/jp2.js
  var require_jp2 = __commonJS({
    "../node_modules/image-size/dist/types/jp2.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.JP2 = void 0;
      var BoxTypes = {
        ftyp: "66747970",
        ihdr: "69686472",
        jp2h: "6a703268",
        jp__: "6a502020",
        rreq: "72726571",
        xml_: "786d6c20"
      };
      var calculateRREQLength = (box) => {
        const unit = box.readUInt8(0);
        let offset = 1 + 2 * unit;
        const numStdFlags = box.readUInt16BE(offset);
        const flagsLength = numStdFlags * (2 + unit);
        offset = offset + 2 + flagsLength;
        const numVendorFeatures = box.readUInt16BE(offset);
        const featuresLength = numVendorFeatures * (16 + unit);
        return offset + 2 + featuresLength;
      };
      var parseIHDR = (box) => {
        return {
          height: box.readUInt32BE(4),
          width: box.readUInt32BE(8)
        };
      };
      exports.JP2 = {
        validate(buffer) {
          const signature = buffer.toString("hex", 4, 8);
          const signatureLength = buffer.readUInt32BE(0);
          if (signature !== BoxTypes.jp__ || signatureLength < 1) {
            return false;
          }
          const ftypeBoxStart = signatureLength + 4;
          const ftypBoxLength = buffer.readUInt32BE(signatureLength);
          const ftypBox = buffer.slice(ftypeBoxStart, ftypeBoxStart + ftypBoxLength);
          return ftypBox.toString("hex", 0, 4) === BoxTypes.ftyp;
        },
        calculate(buffer) {
          const signatureLength = buffer.readUInt32BE(0);
          const ftypBoxLength = buffer.readUInt16BE(signatureLength + 2);
          let offset = signatureLength + 4 + ftypBoxLength;
          const nextBoxType = buffer.toString("hex", offset, offset + 4);
          switch (nextBoxType) {
            case BoxTypes.rreq:
              const MAGIC = 4;
              offset = offset + 4 + MAGIC + calculateRREQLength(buffer.slice(offset + 4));
              return parseIHDR(buffer.slice(offset + 8, offset + 24));
            case BoxTypes.jp2h:
              return parseIHDR(buffer.slice(offset + 8, offset + 24));
            default:
              throw new TypeError("Unsupported header found: " + buffer.toString("ascii", offset, offset + 4));
          }
        }
      };
    }
  });

  // ../node_modules/image-size/dist/readUInt.js
  var require_readUInt = __commonJS({
    "../node_modules/image-size/dist/readUInt.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.readUInt = void 0;
      function readUInt(buffer, bits, offset, isBigEndian) {
        offset = offset || 0;
        const endian = isBigEndian ? "BE" : "LE";
        const methodName = "readUInt" + bits + endian;
        return buffer[methodName].call(buffer, offset);
      }
      exports.readUInt = readUInt;
    }
  });

  // ../node_modules/image-size/dist/types/jpg.js
  var require_jpg = __commonJS({
    "../node_modules/image-size/dist/types/jpg.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.JPG = void 0;
      var readUInt_1 = require_readUInt();
      var EXIF_MARKER = "45786966";
      var APP1_DATA_SIZE_BYTES = 2;
      var EXIF_HEADER_BYTES = 6;
      var TIFF_BYTE_ALIGN_BYTES = 2;
      var BIG_ENDIAN_BYTE_ALIGN = "4d4d";
      var LITTLE_ENDIAN_BYTE_ALIGN = "4949";
      var IDF_ENTRY_BYTES = 12;
      var NUM_DIRECTORY_ENTRIES_BYTES = 2;
      function isEXIF(buffer) {
        return buffer.toString("hex", 2, 6) === EXIF_MARKER;
      }
      function extractSize(buffer, index) {
        return {
          height: buffer.readUInt16BE(index),
          width: buffer.readUInt16BE(index + 2)
        };
      }
      function extractOrientation(exifBlock, isBigEndian) {
        const idfOffset = 8;
        const offset = EXIF_HEADER_BYTES + idfOffset;
        const idfDirectoryEntries = (0, readUInt_1.readUInt)(exifBlock, 16, offset, isBigEndian);
        for (let directoryEntryNumber = 0; directoryEntryNumber < idfDirectoryEntries; directoryEntryNumber++) {
          const start = offset + NUM_DIRECTORY_ENTRIES_BYTES + directoryEntryNumber * IDF_ENTRY_BYTES;
          const end = start + IDF_ENTRY_BYTES;
          if (start > exifBlock.length) {
            return;
          }
          const block = exifBlock.slice(start, end);
          const tagNumber = (0, readUInt_1.readUInt)(block, 16, 0, isBigEndian);
          if (tagNumber === 274) {
            const dataFormat = (0, readUInt_1.readUInt)(block, 16, 2, isBigEndian);
            if (dataFormat !== 3) {
              return;
            }
            const numberOfComponents = (0, readUInt_1.readUInt)(block, 32, 4, isBigEndian);
            if (numberOfComponents !== 1) {
              return;
            }
            return (0, readUInt_1.readUInt)(block, 16, 8, isBigEndian);
          }
        }
      }
      function validateExifBlock(buffer, index) {
        const exifBlock = buffer.slice(APP1_DATA_SIZE_BYTES, index);
        const byteAlign = exifBlock.toString("hex", EXIF_HEADER_BYTES, EXIF_HEADER_BYTES + TIFF_BYTE_ALIGN_BYTES);
        const isBigEndian = byteAlign === BIG_ENDIAN_BYTE_ALIGN;
        const isLittleEndian = byteAlign === LITTLE_ENDIAN_BYTE_ALIGN;
        if (isBigEndian || isLittleEndian) {
          return extractOrientation(exifBlock, isBigEndian);
        }
      }
      function validateBuffer(buffer, index) {
        if (index > buffer.length) {
          throw new TypeError("Corrupt JPG, exceeded buffer limits");
        }
        if (buffer[index] !== 255) {
          throw new TypeError("Invalid JPG, marker table corrupted");
        }
      }
      exports.JPG = {
        validate(buffer) {
          const SOIMarker = buffer.toString("hex", 0, 2);
          return "ffd8" === SOIMarker;
        },
        calculate(buffer) {
          buffer = buffer.slice(4);
          let orientation;
          let next;
          while (buffer.length) {
            const i = buffer.readUInt16BE(0);
            if (isEXIF(buffer)) {
              orientation = validateExifBlock(buffer, i);
            }
            validateBuffer(buffer, i);
            next = buffer[i + 1];
            if (next === 192 || next === 193 || next === 194) {
              const size = extractSize(buffer, i + 5);
              if (!orientation) {
                return size;
              }
              return {
                height: size.height,
                orientation,
                width: size.width
              };
            }
            buffer = buffer.slice(i + 2);
          }
          throw new TypeError("Invalid JPG, no size found");
        }
      };
    }
  });

  // ../node_modules/image-size/dist/types/ktx.js
  var require_ktx = __commonJS({
    "../node_modules/image-size/dist/types/ktx.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.KTX = void 0;
      var SIGNATURE = "KTX 11";
      exports.KTX = {
        validate(buffer) {
          return SIGNATURE === buffer.toString("ascii", 1, 7);
        },
        calculate(buffer) {
          return {
            height: buffer.readUInt32LE(40),
            width: buffer.readUInt32LE(36)
          };
        }
      };
    }
  });

  // ../node_modules/image-size/dist/types/png.js
  var require_png = __commonJS({
    "../node_modules/image-size/dist/types/png.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PNG = void 0;
      var pngSignature = "PNG\r\n\n";
      var pngImageHeaderChunkName = "IHDR";
      var pngFriedChunkName = "CgBI";
      exports.PNG = {
        validate(buffer) {
          if (pngSignature === buffer.toString("ascii", 1, 8)) {
            let chunkName = buffer.toString("ascii", 12, 16);
            if (chunkName === pngFriedChunkName) {
              chunkName = buffer.toString("ascii", 28, 32);
            }
            if (chunkName !== pngImageHeaderChunkName) {
              throw new TypeError("Invalid PNG");
            }
            return true;
          }
          return false;
        },
        calculate(buffer) {
          if (buffer.toString("ascii", 12, 16) === pngFriedChunkName) {
            return {
              height: buffer.readUInt32BE(36),
              width: buffer.readUInt32BE(32)
            };
          }
          return {
            height: buffer.readUInt32BE(20),
            width: buffer.readUInt32BE(16)
          };
        }
      };
    }
  });

  // ../node_modules/image-size/dist/types/pnm.js
  var require_pnm = __commonJS({
    "../node_modules/image-size/dist/types/pnm.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PNM = void 0;
      var PNMTypes = {
        P1: "pbm/ascii",
        P2: "pgm/ascii",
        P3: "ppm/ascii",
        P4: "pbm",
        P5: "pgm",
        P6: "ppm",
        P7: "pam",
        PF: "pfm"
      };
      var Signatures = Object.keys(PNMTypes);
      var handlers = {
        default: (lines) => {
          let dimensions = [];
          while (lines.length > 0) {
            const line = lines.shift();
            if (line[0] === "#") {
              continue;
            }
            dimensions = line.split(" ");
            break;
          }
          if (dimensions.length === 2) {
            return {
              height: parseInt(dimensions[1], 10),
              width: parseInt(dimensions[0], 10)
            };
          } else {
            throw new TypeError("Invalid PNM");
          }
        },
        pam: (lines) => {
          const size = {};
          while (lines.length > 0) {
            const line = lines.shift();
            if (line.length > 16 || line.charCodeAt(0) > 128) {
              continue;
            }
            const [key, value] = line.split(" ");
            if (key && value) {
              size[key.toLowerCase()] = parseInt(value, 10);
            }
            if (size.height && size.width) {
              break;
            }
          }
          if (size.height && size.width) {
            return {
              height: size.height,
              width: size.width
            };
          } else {
            throw new TypeError("Invalid PAM");
          }
        }
      };
      exports.PNM = {
        validate(buffer) {
          const signature = buffer.toString("ascii", 0, 2);
          return Signatures.includes(signature);
        },
        calculate(buffer) {
          const signature = buffer.toString("ascii", 0, 2);
          const type = PNMTypes[signature];
          const lines = buffer.toString("ascii", 3).split(/[\r\n]+/);
          const handler = handlers[type] || handlers.default;
          return handler(lines);
        }
      };
    }
  });

  // ../node_modules/image-size/dist/types/psd.js
  var require_psd = __commonJS({
    "../node_modules/image-size/dist/types/psd.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PSD = void 0;
      exports.PSD = {
        validate(buffer) {
          return "8BPS" === buffer.toString("ascii", 0, 4);
        },
        calculate(buffer) {
          return {
            height: buffer.readUInt32BE(14),
            width: buffer.readUInt32BE(18)
          };
        }
      };
    }
  });

  // ../node_modules/image-size/dist/types/svg.js
  var require_svg = __commonJS({
    "../node_modules/image-size/dist/types/svg.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SVG = void 0;
      var svgReg = /<svg\s([^>"']|"[^"]*"|'[^']*')*>/;
      var extractorRegExps = {
        height: /\sheight=(['"])([^%]+?)\1/,
        root: svgReg,
        viewbox: /\sviewBox=(['"])(.+?)\1/i,
        width: /\swidth=(['"])([^%]+?)\1/
      };
      var INCH_CM = 2.54;
      var units = {
        in: 96,
        cm: 96 / INCH_CM,
        em: 16,
        ex: 8,
        m: 96 / INCH_CM * 100,
        mm: 96 / INCH_CM / 10,
        pc: 96 / 72 / 12,
        pt: 96 / 72,
        px: 1
      };
      var unitsReg = new RegExp(`^([0-9.]+(?:e\\d+)?)(${Object.keys(units).join("|")})?$`);
      function parseLength(len) {
        const m = unitsReg.exec(len);
        if (!m) {
          return void 0;
        }
        return Math.round(Number(m[1]) * (units[m[2]] || 1));
      }
      function parseViewbox(viewbox) {
        const bounds = viewbox.split(" ");
        return {
          height: parseLength(bounds[3]),
          width: parseLength(bounds[2])
        };
      }
      function parseAttributes(root) {
        const width = root.match(extractorRegExps.width);
        const height = root.match(extractorRegExps.height);
        const viewbox = root.match(extractorRegExps.viewbox);
        return {
          height: height && parseLength(height[2]),
          viewbox: viewbox && parseViewbox(viewbox[2]),
          width: width && parseLength(width[2])
        };
      }
      function calculateByDimensions(attrs) {
        return {
          height: attrs.height,
          width: attrs.width
        };
      }
      function calculateByViewbox(attrs, viewbox) {
        const ratio = viewbox.width / viewbox.height;
        if (attrs.width) {
          return {
            height: Math.floor(attrs.width / ratio),
            width: attrs.width
          };
        }
        if (attrs.height) {
          return {
            height: attrs.height,
            width: Math.floor(attrs.height * ratio)
          };
        }
        return {
          height: viewbox.height,
          width: viewbox.width
        };
      }
      exports.SVG = {
        validate(buffer) {
          const str = String(buffer);
          return svgReg.test(str);
        },
        calculate(buffer) {
          const root = buffer.toString("utf8").match(extractorRegExps.root);
          if (root) {
            const attrs = parseAttributes(root[0]);
            if (attrs.width && attrs.height) {
              return calculateByDimensions(attrs);
            }
            if (attrs.viewbox) {
              return calculateByViewbox(attrs, attrs.viewbox);
            }
          }
          throw new TypeError("Invalid SVG");
        }
      };
    }
  });

  // ../node_modules/image-size/dist/types/tiff.js
  var require_tiff = __commonJS({
    "../node_modules/image-size/dist/types/tiff.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TIFF = void 0;
      var fs4 = __require("fs");
      var readUInt_1 = require_readUInt();
      function readIFD(buffer, filepath, isBigEndian) {
        const ifdOffset = (0, readUInt_1.readUInt)(buffer, 32, 4, isBigEndian);
        let bufferSize = 1024;
        const fileSize = fs4.statSync(filepath).size;
        if (ifdOffset + bufferSize > fileSize) {
          bufferSize = fileSize - ifdOffset - 10;
        }
        const endBuffer = Buffer.alloc(bufferSize);
        const descriptor = fs4.openSync(filepath, "r");
        fs4.readSync(descriptor, endBuffer, 0, bufferSize, ifdOffset);
        fs4.closeSync(descriptor);
        return endBuffer.slice(2);
      }
      function readValue(buffer, isBigEndian) {
        const low = (0, readUInt_1.readUInt)(buffer, 16, 8, isBigEndian);
        const high = (0, readUInt_1.readUInt)(buffer, 16, 10, isBigEndian);
        return (high << 16) + low;
      }
      function nextTag(buffer) {
        if (buffer.length > 24) {
          return buffer.slice(12);
        }
      }
      function extractTags(buffer, isBigEndian) {
        const tags = {};
        let temp = buffer;
        while (temp && temp.length) {
          const code = (0, readUInt_1.readUInt)(temp, 16, 0, isBigEndian);
          const type = (0, readUInt_1.readUInt)(temp, 16, 2, isBigEndian);
          const length = (0, readUInt_1.readUInt)(temp, 32, 4, isBigEndian);
          if (code === 0) {
            break;
          } else {
            if (length === 1 && (type === 3 || type === 4)) {
              tags[code] = readValue(temp, isBigEndian);
            }
            temp = nextTag(temp);
          }
        }
        return tags;
      }
      function determineEndianness(buffer) {
        const signature = buffer.toString("ascii", 0, 2);
        if ("II" === signature) {
          return "LE";
        } else if ("MM" === signature) {
          return "BE";
        }
      }
      var signatures = [
        "49492a00",
        "4d4d002a"
      ];
      exports.TIFF = {
        validate(buffer) {
          return signatures.includes(buffer.toString("hex", 0, 4));
        },
        calculate(buffer, filepath) {
          if (!filepath) {
            throw new TypeError("Tiff doesn't support buffer");
          }
          const isBigEndian = determineEndianness(buffer) === "BE";
          const ifdBuffer = readIFD(buffer, filepath, isBigEndian);
          const tags = extractTags(ifdBuffer, isBigEndian);
          const width = tags[256];
          const height = tags[257];
          if (!width || !height) {
            throw new TypeError("Invalid Tiff. Missing tags");
          }
          return { height, width };
        }
      };
    }
  });

  // ../node_modules/image-size/dist/types/webp.js
  var require_webp = __commonJS({
    "../node_modules/image-size/dist/types/webp.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.WEBP = void 0;
      function calculateExtended(buffer) {
        return {
          height: 1 + buffer.readUIntLE(7, 3),
          width: 1 + buffer.readUIntLE(4, 3)
        };
      }
      function calculateLossless(buffer) {
        return {
          height: 1 + ((buffer[4] & 15) << 10 | buffer[3] << 2 | (buffer[2] & 192) >> 6),
          width: 1 + ((buffer[2] & 63) << 8 | buffer[1])
        };
      }
      function calculateLossy(buffer) {
        return {
          height: buffer.readInt16LE(8) & 16383,
          width: buffer.readInt16LE(6) & 16383
        };
      }
      exports.WEBP = {
        validate(buffer) {
          const riffHeader = "RIFF" === buffer.toString("ascii", 0, 4);
          const webpHeader = "WEBP" === buffer.toString("ascii", 8, 12);
          const vp8Header = "VP8" === buffer.toString("ascii", 12, 15);
          return riffHeader && webpHeader && vp8Header;
        },
        calculate(buffer) {
          const chunkHeader = buffer.toString("ascii", 12, 16);
          buffer = buffer.slice(20, 30);
          if (chunkHeader === "VP8X") {
            const extendedHeader = buffer[0];
            const validStart = (extendedHeader & 192) === 0;
            const validEnd = (extendedHeader & 1) === 0;
            if (validStart && validEnd) {
              return calculateExtended(buffer);
            } else {
              throw new TypeError("Invalid WebP");
            }
          }
          if (chunkHeader === "VP8 " && buffer[0] !== 47) {
            return calculateLossy(buffer);
          }
          const signature = buffer.toString("hex", 3, 6);
          if (chunkHeader === "VP8L" && signature !== "9d012a") {
            return calculateLossless(buffer);
          }
          throw new TypeError("Invalid WebP");
        }
      };
    }
  });

  // ../node_modules/image-size/dist/types.js
  var require_types = __commonJS({
    "../node_modules/image-size/dist/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.typeHandlers = void 0;
      var bmp_1 = require_bmp();
      var cur_1 = require_cur();
      var dds_1 = require_dds();
      var gif_1 = require_gif();
      var icns_1 = require_icns();
      var ico_1 = require_ico();
      var j2c_1 = require_j2c();
      var jp2_1 = require_jp2();
      var jpg_1 = require_jpg();
      var ktx_1 = require_ktx();
      var png_1 = require_png();
      var pnm_1 = require_pnm();
      var psd_1 = require_psd();
      var svg_1 = require_svg();
      var tiff_1 = require_tiff();
      var webp_1 = require_webp();
      exports.typeHandlers = {
        bmp: bmp_1.BMP,
        cur: cur_1.CUR,
        dds: dds_1.DDS,
        gif: gif_1.GIF,
        icns: icns_1.ICNS,
        ico: ico_1.ICO,
        j2c: j2c_1.J2C,
        jp2: jp2_1.JP2,
        jpg: jpg_1.JPG,
        ktx: ktx_1.KTX,
        png: png_1.PNG,
        pnm: pnm_1.PNM,
        psd: psd_1.PSD,
        svg: svg_1.SVG,
        tiff: tiff_1.TIFF,
        webp: webp_1.WEBP
      };
    }
  });

  // ../node_modules/image-size/dist/detector.js
  var require_detector = __commonJS({
    "../node_modules/image-size/dist/detector.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.detector = void 0;
      var types_1 = require_types();
      var keys = Object.keys(types_1.typeHandlers);
      var firstBytes = {
        56: "psd",
        66: "bmp",
        68: "dds",
        71: "gif",
        73: "tiff",
        77: "tiff",
        82: "webp",
        105: "icns",
        137: "png",
        255: "jpg"
      };
      function detector(buffer) {
        const byte = buffer[0];
        if (byte in firstBytes) {
          const type = firstBytes[byte];
          if (type && types_1.typeHandlers[type].validate(buffer)) {
            return type;
          }
        }
        const finder = (key) => types_1.typeHandlers[key].validate(buffer);
        return keys.find(finder);
      }
      exports.detector = detector;
    }
  });

  // ../node_modules/image-size/dist/index.js
  var require_dist = __commonJS({
    "../node_modules/image-size/dist/index.js"(exports, module) {
      "use strict";
      var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.types = exports.setConcurrency = exports.disableTypes = exports.disableFS = exports.imageSize = void 0;
      var fs4 = __require("fs");
      var path6 = __require("path");
      var queue_1 = require_queue2();
      var types_1 = require_types();
      var detector_1 = require_detector();
      var MaxBufferSize = 512 * 1024;
      var queue = new queue_1.default({ concurrency: 100, autostart: true });
      var globalOptions = {
        disabledFS: false,
        disabledTypes: []
      };
      function lookup(buffer, filepath) {
        const type = (0, detector_1.detector)(buffer);
        if (typeof type !== "undefined") {
          if (globalOptions.disabledTypes.indexOf(type) > -1) {
            throw new TypeError("disabled file type: " + type);
          }
          if (type in types_1.typeHandlers) {
            const size = types_1.typeHandlers[type].calculate(buffer, filepath);
            if (size !== void 0) {
              size.type = type;
              return size;
            }
          }
        }
        throw new TypeError("unsupported file type: " + type + " (file: " + filepath + ")");
      }
      function asyncFileToBuffer(filepath) {
        return __awaiter(this, void 0, void 0, function* () {
          const handle = yield fs4.promises.open(filepath, "r");
          try {
            const { size } = yield handle.stat();
            if (size <= 0) {
              throw new Error("Empty file");
            }
            const bufferSize = Math.min(size, MaxBufferSize);
            const buffer = Buffer.alloc(bufferSize);
            yield handle.read(buffer, 0, bufferSize, 0);
            return buffer;
          } finally {
            yield handle.close();
          }
        });
      }
      function syncFileToBuffer(filepath) {
        const descriptor = fs4.openSync(filepath, "r");
        try {
          const { size } = fs4.fstatSync(descriptor);
          if (size <= 0) {
            throw new Error("Empty file");
          }
          const bufferSize = Math.min(size, MaxBufferSize);
          const buffer = Buffer.alloc(bufferSize);
          fs4.readSync(descriptor, buffer, 0, bufferSize, 0);
          return buffer;
        } finally {
          fs4.closeSync(descriptor);
        }
      }
      module.exports = exports = imageSize;
      exports.default = imageSize;
      function imageSize(input, callback) {
        if (Buffer.isBuffer(input)) {
          return lookup(input);
        }
        if (typeof input !== "string" || globalOptions.disabledFS) {
          throw new TypeError("invalid invocation. input should be a Buffer");
        }
        const filepath = path6.resolve(input);
        if (typeof callback === "function") {
          queue.push(() => asyncFileToBuffer(filepath).then((buffer) => process.nextTick(callback, null, lookup(buffer, filepath))).catch(callback));
        } else {
          const buffer = syncFileToBuffer(filepath);
          return lookup(buffer, filepath);
        }
      }
      exports.imageSize = imageSize;
      var disableFS = (v) => {
        globalOptions.disabledFS = v;
      };
      exports.disableFS = disableFS;
      var disableTypes = (types) => {
        globalOptions.disabledTypes = types;
      };
      exports.disableTypes = disableTypes;
      var setConcurrency = (c) => {
        queue.concurrency = c;
      };
      exports.setConcurrency = setConcurrency;
      exports.types = Object.keys(types_1.typeHandlers);
    }
  });

  // ../modules/Vue/vue.global.js
  var Vue = function(exports) {
    "use strict";
    function makeMap(str, expectsLowerCase) {
      const map2 = /* @__PURE__ */ Object.create(null);
      const list = str.split(",");
      for (let i = 0; i < list.length; i++) {
        map2[list[i]] = true;
      }
      return expectsLowerCase ? (val) => !!map2[val.toLowerCase()] : (val) => !!map2[val];
    }
    const PatchFlagNames = {
      [1]: `TEXT`,
      [2]: `CLASS`,
      [4]: `STYLE`,
      [8]: `PROPS`,
      [16]: `FULL_PROPS`,
      [32]: `HYDRATE_EVENTS`,
      [64]: `STABLE_FRAGMENT`,
      [128]: `KEYED_FRAGMENT`,
      [256]: `UNKEYED_FRAGMENT`,
      [512]: `NEED_PATCH`,
      [1024]: `DYNAMIC_SLOTS`,
      [2048]: `DEV_ROOT_FRAGMENT`,
      [-1]: `HOISTED`,
      [-2]: `BAIL`
    };
    const slotFlagsText = {
      [1]: "STABLE",
      [2]: "DYNAMIC",
      [3]: "FORWARDED"
    };
    const GLOBALS_WHITE_LISTED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt";
    const isGloballyWhitelisted = /* @__PURE__ */ makeMap(GLOBALS_WHITE_LISTED);
    const range = 2;
    function generateCodeFrame(source, start = 0, end = source.length) {
      let lines = source.split(/(\r?\n)/);
      const newlineSequences = lines.filter((_, idx) => idx % 2 === 1);
      lines = lines.filter((_, idx) => idx % 2 === 0);
      let count = 0;
      const res = [];
      for (let i = 0; i < lines.length; i++) {
        count += lines[i].length + (newlineSequences[i] && newlineSequences[i].length || 0);
        if (count >= start) {
          for (let j = i - range; j <= i + range || end > count; j++) {
            if (j < 0 || j >= lines.length)
              continue;
            const line = j + 1;
            res.push(`${line}${" ".repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);
            const lineLength = lines[j].length;
            const newLineSeqLength = newlineSequences[j] && newlineSequences[j].length || 0;
            if (j === i) {
              const pad = start - (count - (lineLength + newLineSeqLength));
              const length = Math.max(1, end > count ? lineLength - pad : end - start);
              res.push(`   |  ` + " ".repeat(pad) + "^".repeat(length));
            } else if (j > i) {
              if (end > count) {
                const length = Math.max(Math.min(end - count, lineLength), 1);
                res.push(`   |  ` + "^".repeat(length));
              }
              count += lineLength + newLineSeqLength;
            }
          }
          break;
        }
      }
      return res.join("\n");
    }
    const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
    const isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
    function includeBooleanAttr(value) {
      return !!value || value === "";
    }
    function normalizeStyle(value) {
      if (isArray(value)) {
        const res = {};
        for (let i = 0; i < value.length; i++) {
          const item = value[i];
          const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
          if (normalized) {
            for (const key in normalized) {
              res[key] = normalized[key];
            }
          }
        }
        return res;
      } else if (isString(value)) {
        return value;
      } else if (isObject(value)) {
        return value;
      }
    }
    const listDelimiterRE = /;(?![^(]*\))/g;
    const propertyDelimiterRE = /:(.+)/;
    function parseStringStyle(cssText) {
      const ret = {};
      cssText.split(listDelimiterRE).forEach((item) => {
        if (item) {
          const tmp = item.split(propertyDelimiterRE);
          tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
        }
      });
      return ret;
    }
    function normalizeClass(value) {
      let res = "";
      if (isString(value)) {
        res = value;
      } else if (isArray(value)) {
        for (let i = 0; i < value.length; i++) {
          const normalized = normalizeClass(value[i]);
          if (normalized) {
            res += normalized + " ";
          }
        }
      } else if (isObject(value)) {
        for (const name in value) {
          if (value[name]) {
            res += name + " ";
          }
        }
      }
      return res.trim();
    }
    function normalizeProps(props) {
      if (!props)
        return null;
      let { class: klass, style } = props;
      if (klass && !isString(klass)) {
        props.class = normalizeClass(klass);
      }
      if (style) {
        props.style = normalizeStyle(style);
      }
      return props;
    }
    const HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
    const SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
    const VOID_TAGS = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
    const isHTMLTag = /* @__PURE__ */ makeMap(HTML_TAGS);
    const isSVGTag = /* @__PURE__ */ makeMap(SVG_TAGS);
    const isVoidTag = /* @__PURE__ */ makeMap(VOID_TAGS);
    function looseCompareArrays(a, b2) {
      if (a.length !== b2.length)
        return false;
      let equal = true;
      for (let i = 0; equal && i < a.length; i++) {
        equal = looseEqual(a[i], b2[i]);
      }
      return equal;
    }
    function looseEqual(a, b2) {
      if (a === b2)
        return true;
      let aValidType = isDate(a);
      let bValidType = isDate(b2);
      if (aValidType || bValidType) {
        return aValidType && bValidType ? a.getTime() === b2.getTime() : false;
      }
      aValidType = isSymbol(a);
      bValidType = isSymbol(b2);
      if (aValidType || bValidType) {
        return a === b2;
      }
      aValidType = isArray(a);
      bValidType = isArray(b2);
      if (aValidType || bValidType) {
        return aValidType && bValidType ? looseCompareArrays(a, b2) : false;
      }
      aValidType = isObject(a);
      bValidType = isObject(b2);
      if (aValidType || bValidType) {
        if (!aValidType || !bValidType) {
          return false;
        }
        const aKeysCount = Object.keys(a).length;
        const bKeysCount = Object.keys(b2).length;
        if (aKeysCount !== bKeysCount) {
          return false;
        }
        for (const key in a) {
          const aHasKey = a.hasOwnProperty(key);
          const bHasKey = b2.hasOwnProperty(key);
          if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b2[key])) {
            return false;
          }
        }
      }
      return String(a) === String(b2);
    }
    function looseIndexOf(arr, val) {
      return arr.findIndex((item) => looseEqual(item, val));
    }
    const toDisplayString = (val) => {
      return isString(val) ? val : val == null ? "" : isArray(val) || isObject(val) && (val.toString === objectToString || !isFunction(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
    };
    const replacer = (_key, val) => {
      if (val && val.__v_isRef) {
        return replacer(_key, val.value);
      } else if (isMap(val)) {
        return {
          [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val2]) => {
            entries[`${key} =>`] = val2;
            return entries;
          }, {})
        };
      } else if (isSet(val)) {
        return {
          [`Set(${val.size})`]: [...val.values()]
        };
      } else if (isObject(val) && !isArray(val) && !isPlainObject(val)) {
        return String(val);
      }
      return val;
    };
    const EMPTY_OBJ = Object.freeze({});
    const EMPTY_ARR = Object.freeze([]);
    const NOOP = () => {
    };
    const NO = () => false;
    const onRE = /^on[^a-z]/;
    const isOn = (key) => onRE.test(key);
    const isModelListener = (key) => key.startsWith("onUpdate:");
    const extend = Object.assign;
    const remove = (arr, el) => {
      const i = arr.indexOf(el);
      if (i > -1) {
        arr.splice(i, 1);
      }
    };
    const hasOwnProperty = Object.prototype.hasOwnProperty;
    const hasOwn = (val, key) => hasOwnProperty.call(val, key);
    const isArray = Array.isArray;
    const isMap = (val) => toTypeString(val) === "[object Map]";
    const isSet = (val) => toTypeString(val) === "[object Set]";
    const isDate = (val) => toTypeString(val) === "[object Date]";
    const isFunction = (val) => typeof val === "function";
    const isString = (val) => typeof val === "string";
    const isSymbol = (val) => typeof val === "symbol";
    const isObject = (val) => val !== null && typeof val === "object";
    const isPromise = (val) => {
      return isObject(val) && isFunction(val.then) && isFunction(val.catch);
    };
    const objectToString = Object.prototype.toString;
    const toTypeString = (value) => objectToString.call(value);
    const toRawType = (value) => {
      return toTypeString(value).slice(8, -1);
    };
    const isPlainObject = (val) => toTypeString(val) === "[object Object]";
    const isIntegerKey = (key) => isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
    const isReservedProp = /* @__PURE__ */ makeMap(
      ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
    );
    const isBuiltInDirective = /* @__PURE__ */ makeMap("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo");
    const cacheStringFunction = (fn) => {
      const cache = /* @__PURE__ */ Object.create(null);
      return (str) => {
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
      };
    };
    const camelizeRE = /-(\w)/g;
    const camelize = cacheStringFunction((str) => {
      return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
    });
    const hyphenateRE = /\B([A-Z])/g;
    const hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, "-$1").toLowerCase());
    const capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));
    const toHandlerKey = cacheStringFunction((str) => str ? `on${capitalize(str)}` : ``);
    const hasChanged = (value, oldValue) => !Object.is(value, oldValue);
    const invokeArrayFns = (fns, arg) => {
      for (let i = 0; i < fns.length; i++) {
        fns[i](arg);
      }
    };
    const def = (obj, key, value) => {
      Object.defineProperty(obj, key, {
        configurable: true,
        enumerable: false,
        value
      });
    };
    const toNumber = (val) => {
      const n = parseFloat(val);
      return isNaN(n) ? val : n;
    };
    let _globalThis;
    const getGlobalThis = () => {
      return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    };
    function warn(msg, ...args) {
      console.warn(`[Vue warn] ${msg}`, ...args);
    }
    let activeEffectScope;
    class EffectScope {
      constructor(detached = false) {
        this.active = true;
        this.effects = [];
        this.cleanups = [];
        if (!detached && activeEffectScope) {
          this.parent = activeEffectScope;
          this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
        }
      }
      run(fn) {
        if (this.active) {
          const currentEffectScope = activeEffectScope;
          try {
            activeEffectScope = this;
            return fn();
          } finally {
            activeEffectScope = currentEffectScope;
          }
        } else {
          warn(`cannot run an inactive effect scope.`);
        }
      }
      on() {
        activeEffectScope = this;
      }
      off() {
        activeEffectScope = this.parent;
      }
      stop(fromParent) {
        if (this.active) {
          let i, l;
          for (i = 0, l = this.effects.length; i < l; i++) {
            this.effects[i].stop();
          }
          for (i = 0, l = this.cleanups.length; i < l; i++) {
            this.cleanups[i]();
          }
          if (this.scopes) {
            for (i = 0, l = this.scopes.length; i < l; i++) {
              this.scopes[i].stop(true);
            }
          }
          if (this.parent && !fromParent) {
            const last2 = this.parent.scopes.pop();
            if (last2 && last2 !== this) {
              this.parent.scopes[this.index] = last2;
              last2.index = this.index;
            }
          }
          this.active = false;
        }
      }
    }
    function effectScope(detached) {
      return new EffectScope(detached);
    }
    function recordEffectScope(effect2, scope = activeEffectScope) {
      if (scope && scope.active) {
        scope.effects.push(effect2);
      }
    }
    function getCurrentScope() {
      return activeEffectScope;
    }
    function onScopeDispose(fn) {
      if (activeEffectScope) {
        activeEffectScope.cleanups.push(fn);
      } else {
        warn(`onScopeDispose() is called when there is no active effect scope to be associated with.`);
      }
    }
    const createDep = (effects) => {
      const dep = new Set(effects);
      dep.w = 0;
      dep.n = 0;
      return dep;
    };
    const wasTracked = (dep) => (dep.w & trackOpBit) > 0;
    const newTracked = (dep) => (dep.n & trackOpBit) > 0;
    const initDepMarkers = ({ deps }) => {
      if (deps.length) {
        for (let i = 0; i < deps.length; i++) {
          deps[i].w |= trackOpBit;
        }
      }
    };
    const finalizeDepMarkers = (effect2) => {
      const { deps } = effect2;
      if (deps.length) {
        let ptr = 0;
        for (let i = 0; i < deps.length; i++) {
          const dep = deps[i];
          if (wasTracked(dep) && !newTracked(dep)) {
            dep.delete(effect2);
          } else {
            deps[ptr++] = dep;
          }
          dep.w &= ~trackOpBit;
          dep.n &= ~trackOpBit;
        }
        deps.length = ptr;
      }
    };
    const targetMap = /* @__PURE__ */ new WeakMap();
    let effectTrackDepth = 0;
    let trackOpBit = 1;
    const maxMarkerBits = 30;
    let activeEffect;
    const ITERATE_KEY = Symbol("iterate");
    const MAP_KEY_ITERATE_KEY = Symbol("Map key iterate");
    class ReactiveEffect {
      constructor(fn, scheduler = null, scope) {
        this.fn = fn;
        this.scheduler = scheduler;
        this.active = true;
        this.deps = [];
        this.parent = void 0;
        recordEffectScope(this, scope);
      }
      run() {
        if (!this.active) {
          return this.fn();
        }
        let parent = activeEffect;
        let lastShouldTrack = shouldTrack;
        while (parent) {
          if (parent === this) {
            return;
          }
          parent = parent.parent;
        }
        try {
          this.parent = activeEffect;
          activeEffect = this;
          shouldTrack = true;
          trackOpBit = 1 << ++effectTrackDepth;
          if (effectTrackDepth <= maxMarkerBits) {
            initDepMarkers(this);
          } else {
            cleanupEffect(this);
          }
          return this.fn();
        } finally {
          if (effectTrackDepth <= maxMarkerBits) {
            finalizeDepMarkers(this);
          }
          trackOpBit = 1 << --effectTrackDepth;
          activeEffect = this.parent;
          shouldTrack = lastShouldTrack;
          this.parent = void 0;
          if (this.deferStop) {
            this.stop();
          }
        }
      }
      stop() {
        if (activeEffect === this) {
          this.deferStop = true;
        } else if (this.active) {
          cleanupEffect(this);
          if (this.onStop) {
            this.onStop();
          }
          this.active = false;
        }
      }
    }
    function cleanupEffect(effect2) {
      const { deps } = effect2;
      if (deps.length) {
        for (let i = 0; i < deps.length; i++) {
          deps[i].delete(effect2);
        }
        deps.length = 0;
      }
    }
    function effect(fn, options) {
      if (fn.effect) {
        fn = fn.effect.fn;
      }
      const _effect = new ReactiveEffect(fn);
      if (options) {
        extend(_effect, options);
        if (options.scope)
          recordEffectScope(_effect, options.scope);
      }
      if (!options || !options.lazy) {
        _effect.run();
      }
      const runner = _effect.run.bind(_effect);
      runner.effect = _effect;
      return runner;
    }
    function stop(runner) {
      runner.effect.stop();
    }
    let shouldTrack = true;
    const trackStack = [];
    function pauseTracking() {
      trackStack.push(shouldTrack);
      shouldTrack = false;
    }
    function resetTracking() {
      const last2 = trackStack.pop();
      shouldTrack = last2 === void 0 ? true : last2;
    }
    function track(target, type, key) {
      if (shouldTrack && activeEffect) {
        let depsMap = targetMap.get(target);
        if (!depsMap) {
          targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
        }
        let dep = depsMap.get(key);
        if (!dep) {
          depsMap.set(key, dep = createDep());
        }
        const eventInfo = { effect: activeEffect, target, type, key };
        trackEffects(dep, eventInfo);
      }
    }
    function trackEffects(dep, debuggerEventExtraInfo) {
      let shouldTrack2 = false;
      if (effectTrackDepth <= maxMarkerBits) {
        if (!newTracked(dep)) {
          dep.n |= trackOpBit;
          shouldTrack2 = !wasTracked(dep);
        }
      } else {
        shouldTrack2 = !dep.has(activeEffect);
      }
      if (shouldTrack2) {
        dep.add(activeEffect);
        activeEffect.deps.push(dep);
        if (activeEffect.onTrack) {
          activeEffect.onTrack(Object.assign({ effect: activeEffect }, debuggerEventExtraInfo));
        }
      }
    }
    function trigger(target, type, key, newValue, oldValue, oldTarget) {
      const depsMap = targetMap.get(target);
      if (!depsMap) {
        return;
      }
      let deps = [];
      if (type === "clear") {
        deps = [...depsMap.values()];
      } else if (key === "length" && isArray(target)) {
        depsMap.forEach((dep, key2) => {
          if (key2 === "length" || key2 >= newValue) {
            deps.push(dep);
          }
        });
      } else {
        if (key !== void 0) {
          deps.push(depsMap.get(key));
        }
        switch (type) {
          case "add":
            if (!isArray(target)) {
              deps.push(depsMap.get(ITERATE_KEY));
              if (isMap(target)) {
                deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
              }
            } else if (isIntegerKey(key)) {
              deps.push(depsMap.get("length"));
            }
            break;
          case "delete":
            if (!isArray(target)) {
              deps.push(depsMap.get(ITERATE_KEY));
              if (isMap(target)) {
                deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
              }
            }
            break;
          case "set":
            if (isMap(target)) {
              deps.push(depsMap.get(ITERATE_KEY));
            }
            break;
        }
      }
      const eventInfo = { target, type, key, newValue, oldValue, oldTarget };
      if (deps.length === 1) {
        if (deps[0]) {
          {
            triggerEffects(deps[0], eventInfo);
          }
        }
      } else {
        const effects = [];
        for (const dep of deps) {
          if (dep) {
            effects.push(...dep);
          }
        }
        {
          triggerEffects(createDep(effects), eventInfo);
        }
      }
    }
    function triggerEffects(dep, debuggerEventExtraInfo) {
      const effects = isArray(dep) ? dep : [...dep];
      for (const effect2 of effects) {
        if (effect2.computed) {
          triggerEffect(effect2, debuggerEventExtraInfo);
        }
      }
      for (const effect2 of effects) {
        if (!effect2.computed) {
          triggerEffect(effect2, debuggerEventExtraInfo);
        }
      }
    }
    function triggerEffect(effect2, debuggerEventExtraInfo) {
      if (effect2 !== activeEffect || effect2.allowRecurse) {
        if (effect2.onTrigger) {
          effect2.onTrigger(extend({ effect: effect2 }, debuggerEventExtraInfo));
        }
        if (effect2.scheduler) {
          effect2.scheduler();
        } else {
          effect2.run();
        }
      }
    }
    const isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
    const builtInSymbols = new Set(
      /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(isSymbol)
    );
    const get = /* @__PURE__ */ createGetter();
    const shallowGet = /* @__PURE__ */ createGetter(false, true);
    const readonlyGet = /* @__PURE__ */ createGetter(true);
    const shallowReadonlyGet = /* @__PURE__ */ createGetter(true, true);
    const arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();
    function createArrayInstrumentations() {
      const instrumentations = {};
      ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
        instrumentations[key] = function(...args) {
          const arr = toRaw(this);
          for (let i = 0, l = this.length; i < l; i++) {
            track(arr, "get", i + "");
          }
          const res = arr[key](...args);
          if (res === -1 || res === false) {
            return arr[key](...args.map(toRaw));
          } else {
            return res;
          }
        };
      });
      ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
        instrumentations[key] = function(...args) {
          pauseTracking();
          const res = toRaw(this)[key].apply(this, args);
          resetTracking();
          return res;
        };
      });
      return instrumentations;
    }
    function createGetter(isReadonly2 = false, shallow = false) {
      return function get2(target, key, receiver) {
        if (key === "__v_isReactive") {
          return !isReadonly2;
        } else if (key === "__v_isReadonly") {
          return isReadonly2;
        } else if (key === "__v_isShallow") {
          return shallow;
        } else if (key === "__v_raw" && receiver === (isReadonly2 ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {
          return target;
        }
        const targetIsArray = isArray(target);
        if (!isReadonly2 && targetIsArray && hasOwn(arrayInstrumentations, key)) {
          return Reflect.get(arrayInstrumentations, key, receiver);
        }
        const res = Reflect.get(target, key, receiver);
        if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
          return res;
        }
        if (!isReadonly2) {
          track(target, "get", key);
        }
        if (shallow) {
          return res;
        }
        if (isRef(res)) {
          return targetIsArray && isIntegerKey(key) ? res : res.value;
        }
        if (isObject(res)) {
          return isReadonly2 ? readonly(res) : reactive(res);
        }
        return res;
      };
    }
    const set = /* @__PURE__ */ createSetter();
    const shallowSet = /* @__PURE__ */ createSetter(true);
    function createSetter(shallow = false) {
      return function set2(target, key, value, receiver) {
        let oldValue = target[key];
        if (isReadonly(oldValue) && isRef(oldValue) && !isRef(value)) {
          return false;
        }
        if (!shallow && !isReadonly(value)) {
          if (!isShallow(value)) {
            value = toRaw(value);
            oldValue = toRaw(oldValue);
          }
          if (!isArray(target) && isRef(oldValue) && !isRef(value)) {
            oldValue.value = value;
            return true;
          }
        }
        const hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);
        const result = Reflect.set(target, key, value, receiver);
        if (target === toRaw(receiver)) {
          if (!hadKey) {
            trigger(target, "add", key, value);
          } else if (hasChanged(value, oldValue)) {
            trigger(target, "set", key, value, oldValue);
          }
        }
        return result;
      };
    }
    function deleteProperty(target, key) {
      const hadKey = hasOwn(target, key);
      const oldValue = target[key];
      const result = Reflect.deleteProperty(target, key);
      if (result && hadKey) {
        trigger(target, "delete", key, void 0, oldValue);
      }
      return result;
    }
    function has(target, key) {
      const result = Reflect.has(target, key);
      if (!isSymbol(key) || !builtInSymbols.has(key)) {
        track(target, "has", key);
      }
      return result;
    }
    function ownKeys(target) {
      track(target, "iterate", isArray(target) ? "length" : ITERATE_KEY);
      return Reflect.ownKeys(target);
    }
    const mutableHandlers = {
      get,
      set,
      deleteProperty,
      has,
      ownKeys
    };
    const readonlyHandlers = {
      get: readonlyGet,
      set(target, key) {
        {
          warn(`Set operation on key "${String(key)}" failed: target is readonly.`, target);
        }
        return true;
      },
      deleteProperty(target, key) {
        {
          warn(`Delete operation on key "${String(key)}" failed: target is readonly.`, target);
        }
        return true;
      }
    };
    const shallowReactiveHandlers = /* @__PURE__ */ extend({}, mutableHandlers, {
      get: shallowGet,
      set: shallowSet
    });
    const shallowReadonlyHandlers = /* @__PURE__ */ extend({}, readonlyHandlers, {
      get: shallowReadonlyGet
    });
    const toShallow = (value) => value;
    const getProto = (v) => Reflect.getPrototypeOf(v);
    function get$1(target, key, isReadonly2 = false, isShallow2 = false) {
      target = target["__v_raw"];
      const rawTarget = toRaw(target);
      const rawKey = toRaw(key);
      if (!isReadonly2) {
        if (key !== rawKey) {
          track(rawTarget, "get", key);
        }
        track(rawTarget, "get", rawKey);
      }
      const { has: has2 } = getProto(rawTarget);
      const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
      if (has2.call(rawTarget, key)) {
        return wrap(target.get(key));
      } else if (has2.call(rawTarget, rawKey)) {
        return wrap(target.get(rawKey));
      } else if (target !== rawTarget) {
        target.get(key);
      }
    }
    function has$1(key, isReadonly2 = false) {
      const target = this["__v_raw"];
      const rawTarget = toRaw(target);
      const rawKey = toRaw(key);
      if (!isReadonly2) {
        if (key !== rawKey) {
          track(rawTarget, "has", key);
        }
        track(rawTarget, "has", rawKey);
      }
      return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
    }
    function size(target, isReadonly2 = false) {
      target = target["__v_raw"];
      !isReadonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
      return Reflect.get(target, "size", target);
    }
    function add(value) {
      value = toRaw(value);
      const target = toRaw(this);
      const proto = getProto(target);
      const hadKey = proto.has.call(target, value);
      if (!hadKey) {
        target.add(value);
        trigger(target, "add", value, value);
      }
      return this;
    }
    function set$1(key, value) {
      value = toRaw(value);
      const target = toRaw(this);
      const { has: has2, get: get2 } = getProto(target);
      let hadKey = has2.call(target, key);
      if (!hadKey) {
        key = toRaw(key);
        hadKey = has2.call(target, key);
      } else {
        checkIdentityKeys(target, has2, key);
      }
      const oldValue = get2.call(target, key);
      target.set(key, value);
      if (!hadKey) {
        trigger(target, "add", key, value);
      } else if (hasChanged(value, oldValue)) {
        trigger(target, "set", key, value, oldValue);
      }
      return this;
    }
    function deleteEntry(key) {
      const target = toRaw(this);
      const { has: has2, get: get2 } = getProto(target);
      let hadKey = has2.call(target, key);
      if (!hadKey) {
        key = toRaw(key);
        hadKey = has2.call(target, key);
      } else {
        checkIdentityKeys(target, has2, key);
      }
      const oldValue = get2 ? get2.call(target, key) : void 0;
      const result = target.delete(key);
      if (hadKey) {
        trigger(target, "delete", key, void 0, oldValue);
      }
      return result;
    }
    function clear() {
      const target = toRaw(this);
      const hadItems = target.size !== 0;
      const oldTarget = isMap(target) ? new Map(target) : new Set(target);
      const result = target.clear();
      if (hadItems) {
        trigger(target, "clear", void 0, void 0, oldTarget);
      }
      return result;
    }
    function createForEach(isReadonly2, isShallow2) {
      return function forEach(callback, thisArg) {
        const observed = this;
        const target = observed["__v_raw"];
        const rawTarget = toRaw(target);
        const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
        !isReadonly2 && track(rawTarget, "iterate", ITERATE_KEY);
        return target.forEach((value, key) => {
          return callback.call(thisArg, wrap(value), wrap(key), observed);
        });
      };
    }
    function createIterableMethod(method, isReadonly2, isShallow2) {
      return function(...args) {
        const target = this["__v_raw"];
        const rawTarget = toRaw(target);
        const targetIsMap = isMap(rawTarget);
        const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
        const isKeyOnly = method === "keys" && targetIsMap;
        const innerIterator = target[method](...args);
        const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
        !isReadonly2 && track(rawTarget, "iterate", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
        return {
          next() {
            const { value, done } = innerIterator.next();
            return done ? { value, done } : {
              value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
              done
            };
          },
          [Symbol.iterator]() {
            return this;
          }
        };
      };
    }
    function createReadonlyMethod(type) {
      return function(...args) {
        {
          const key = args[0] ? `on key "${args[0]}" ` : ``;
          console.warn(`${capitalize(type)} operation ${key}failed: target is readonly.`, toRaw(this));
        }
        return type === "delete" ? false : this;
      };
    }
    function createInstrumentations() {
      const mutableInstrumentations2 = {
        get(key) {
          return get$1(this, key);
        },
        get size() {
          return size(this);
        },
        has: has$1,
        add,
        set: set$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, false)
      };
      const shallowInstrumentations2 = {
        get(key) {
          return get$1(this, key, false, true);
        },
        get size() {
          return size(this);
        },
        has: has$1,
        add,
        set: set$1,
        delete: deleteEntry,
        clear,
        forEach: createForEach(false, true)
      };
      const readonlyInstrumentations2 = {
        get(key) {
          return get$1(this, key, true);
        },
        get size() {
          return size(this, true);
        },
        has(key) {
          return has$1.call(this, key, true);
        },
        add: createReadonlyMethod("add"),
        set: createReadonlyMethod("set"),
        delete: createReadonlyMethod("delete"),
        clear: createReadonlyMethod("clear"),
        forEach: createForEach(true, false)
      };
      const shallowReadonlyInstrumentations2 = {
        get(key) {
          return get$1(this, key, true, true);
        },
        get size() {
          return size(this, true);
        },
        has(key) {
          return has$1.call(this, key, true);
        },
        add: createReadonlyMethod("add"),
        set: createReadonlyMethod("set"),
        delete: createReadonlyMethod("delete"),
        clear: createReadonlyMethod("clear"),
        forEach: createForEach(true, true)
      };
      const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
      iteratorMethods.forEach((method) => {
        mutableInstrumentations2[method] = createIterableMethod(method, false, false);
        readonlyInstrumentations2[method] = createIterableMethod(method, true, false);
        shallowInstrumentations2[method] = createIterableMethod(method, false, true);
        shallowReadonlyInstrumentations2[method] = createIterableMethod(method, true, true);
      });
      return [
        mutableInstrumentations2,
        readonlyInstrumentations2,
        shallowInstrumentations2,
        shallowReadonlyInstrumentations2
      ];
    }
    const [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* @__PURE__ */ createInstrumentations();
    function createInstrumentationGetter(isReadonly2, shallow) {
      const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
      return (target, key, receiver) => {
        if (key === "__v_isReactive") {
          return !isReadonly2;
        } else if (key === "__v_isReadonly") {
          return isReadonly2;
        } else if (key === "__v_raw") {
          return target;
        }
        return Reflect.get(hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
      };
    }
    const mutableCollectionHandlers = {
      get: /* @__PURE__ */ createInstrumentationGetter(false, false)
    };
    const shallowCollectionHandlers = {
      get: /* @__PURE__ */ createInstrumentationGetter(false, true)
    };
    const readonlyCollectionHandlers = {
      get: /* @__PURE__ */ createInstrumentationGetter(true, false)
    };
    const shallowReadonlyCollectionHandlers = {
      get: /* @__PURE__ */ createInstrumentationGetter(true, true)
    };
    function checkIdentityKeys(target, has2, key) {
      const rawKey = toRaw(key);
      if (rawKey !== key && has2.call(target, rawKey)) {
        const type = toRawType(target);
        console.warn(`Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`);
      }
    }
    const reactiveMap = /* @__PURE__ */ new WeakMap();
    const shallowReactiveMap = /* @__PURE__ */ new WeakMap();
    const readonlyMap = /* @__PURE__ */ new WeakMap();
    const shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
    function targetTypeMap(rawType) {
      switch (rawType) {
        case "Object":
        case "Array":
          return 1;
        case "Map":
        case "Set":
        case "WeakMap":
        case "WeakSet":
          return 2;
        default:
          return 0;
      }
    }
    function getTargetType(value) {
      return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
    }
    function reactive(target) {
      if (isReadonly(target)) {
        return target;
      }
      return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
    }
    function shallowReactive(target) {
      return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);
    }
    function readonly(target) {
      return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
    }
    function shallowReadonly(target) {
      return createReactiveObject(target, true, shallowReadonlyHandlers, shallowReadonlyCollectionHandlers, shallowReadonlyMap);
    }
    function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
      if (!isObject(target)) {
        {
          console.warn(`value cannot be made reactive: ${String(target)}`);
        }
        return target;
      }
      if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
        return target;
      }
      const existingProxy = proxyMap.get(target);
      if (existingProxy) {
        return existingProxy;
      }
      const targetType = getTargetType(target);
      if (targetType === 0) {
        return target;
      }
      const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
      proxyMap.set(target, proxy);
      return proxy;
    }
    function isReactive(value) {
      if (isReadonly(value)) {
        return isReactive(value["__v_raw"]);
      }
      return !!(value && value["__v_isReactive"]);
    }
    function isReadonly(value) {
      return !!(value && value["__v_isReadonly"]);
    }
    function isShallow(value) {
      return !!(value && value["__v_isShallow"]);
    }
    function isProxy(value) {
      return isReactive(value) || isReadonly(value);
    }
    function toRaw(observed) {
      const raw = observed && observed["__v_raw"];
      return raw ? toRaw(raw) : observed;
    }
    function markRaw(value) {
      def(value, "__v_skip", true);
      return value;
    }
    const toReactive = (value) => isObject(value) ? reactive(value) : value;
    const toReadonly = (value) => isObject(value) ? readonly(value) : value;
    function trackRefValue(ref2) {
      if (shouldTrack && activeEffect) {
        ref2 = toRaw(ref2);
        {
          trackEffects(ref2.dep || (ref2.dep = createDep()), {
            target: ref2,
            type: "get",
            key: "value"
          });
        }
      }
    }
    function triggerRefValue(ref2, newVal) {
      ref2 = toRaw(ref2);
      if (ref2.dep) {
        {
          triggerEffects(ref2.dep, {
            target: ref2,
            type: "set",
            key: "value",
            newValue: newVal
          });
        }
      }
    }
    function isRef(r) {
      return !!(r && r.__v_isRef === true);
    }
    function ref(value) {
      return createRef(value, false);
    }
    function shallowRef(value) {
      return createRef(value, true);
    }
    function createRef(rawValue, shallow) {
      if (isRef(rawValue)) {
        return rawValue;
      }
      return new RefImpl(rawValue, shallow);
    }
    class RefImpl {
      constructor(value, __v_isShallow) {
        this.__v_isShallow = __v_isShallow;
        this.dep = void 0;
        this.__v_isRef = true;
        this._rawValue = __v_isShallow ? value : toRaw(value);
        this._value = __v_isShallow ? value : toReactive(value);
      }
      get value() {
        trackRefValue(this);
        return this._value;
      }
      set value(newVal) {
        newVal = this.__v_isShallow ? newVal : toRaw(newVal);
        if (hasChanged(newVal, this._rawValue)) {
          this._rawValue = newVal;
          this._value = this.__v_isShallow ? newVal : toReactive(newVal);
          triggerRefValue(this, newVal);
        }
      }
    }
    function triggerRef(ref2) {
      triggerRefValue(ref2, ref2.value);
    }
    function unref(ref2) {
      return isRef(ref2) ? ref2.value : ref2;
    }
    const shallowUnwrapHandlers = {
      get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
      set: (target, key, value, receiver) => {
        const oldValue = target[key];
        if (isRef(oldValue) && !isRef(value)) {
          oldValue.value = value;
          return true;
        } else {
          return Reflect.set(target, key, value, receiver);
        }
      }
    };
    function proxyRefs(objectWithRefs) {
      return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
    }
    class CustomRefImpl {
      constructor(factory) {
        this.dep = void 0;
        this.__v_isRef = true;
        const { get: get2, set: set2 } = factory(() => trackRefValue(this), () => triggerRefValue(this));
        this._get = get2;
        this._set = set2;
      }
      get value() {
        return this._get();
      }
      set value(newVal) {
        this._set(newVal);
      }
    }
    function customRef(factory) {
      return new CustomRefImpl(factory);
    }
    function toRefs(object) {
      if (!isProxy(object)) {
        console.warn(`toRefs() expects a reactive object but received a plain one.`);
      }
      const ret = isArray(object) ? new Array(object.length) : {};
      for (const key in object) {
        ret[key] = toRef(object, key);
      }
      return ret;
    }
    class ObjectRefImpl {
      constructor(_object, _key, _defaultValue) {
        this._object = _object;
        this._key = _key;
        this._defaultValue = _defaultValue;
        this.__v_isRef = true;
      }
      get value() {
        const val = this._object[this._key];
        return val === void 0 ? this._defaultValue : val;
      }
      set value(newVal) {
        this._object[this._key] = newVal;
      }
    }
    function toRef(object, key, defaultValue) {
      const val = object[key];
      return isRef(val) ? val : new ObjectRefImpl(object, key, defaultValue);
    }
    class ComputedRefImpl {
      constructor(getter, _setter, isReadonly2, isSSR) {
        this._setter = _setter;
        this.dep = void 0;
        this.__v_isRef = true;
        this._dirty = true;
        this.effect = new ReactiveEffect(getter, () => {
          if (!this._dirty) {
            this._dirty = true;
            triggerRefValue(this);
          }
        });
        this.effect.computed = this;
        this.effect.active = this._cacheable = !isSSR;
        this["__v_isReadonly"] = isReadonly2;
      }
      get value() {
        const self2 = toRaw(this);
        trackRefValue(self2);
        if (self2._dirty || !self2._cacheable) {
          self2._dirty = false;
          self2._value = self2.effect.run();
        }
        return self2._value;
      }
      set value(newValue) {
        this._setter(newValue);
      }
    }
    function computed(getterOrOptions, debugOptions, isSSR = false) {
      let getter;
      let setter;
      const onlyGetter = isFunction(getterOrOptions);
      if (onlyGetter) {
        getter = getterOrOptions;
        setter = () => {
          console.warn("Write operation failed: computed value is readonly");
        };
      } else {
        getter = getterOrOptions.get;
        setter = getterOrOptions.set;
      }
      const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);
      if (debugOptions && !isSSR) {
        cRef.effect.onTrack = debugOptions.onTrack;
        cRef.effect.onTrigger = debugOptions.onTrigger;
      }
      return cRef;
    }
    const stack = [];
    function pushWarningContext(vnode) {
      stack.push(vnode);
    }
    function popWarningContext() {
      stack.pop();
    }
    function warn$1(msg, ...args) {
      pauseTracking();
      const instance = stack.length ? stack[stack.length - 1].component : null;
      const appWarnHandler = instance && instance.appContext.config.warnHandler;
      const trace = getComponentTrace();
      if (appWarnHandler) {
        callWithErrorHandling(appWarnHandler, instance, 11, [
          msg + args.join(""),
          instance && instance.proxy,
          trace.map(({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`).join("\n"),
          trace
        ]);
      } else {
        const warnArgs = [`[Vue warn]: ${msg}`, ...args];
        if (trace.length && true) {
          warnArgs.push(`
`, ...formatTrace(trace));
        }
        console.warn(...warnArgs);
      }
      resetTracking();
    }
    function getComponentTrace() {
      let currentVNode = stack[stack.length - 1];
      if (!currentVNode) {
        return [];
      }
      const normalizedStack = [];
      while (currentVNode) {
        const last2 = normalizedStack[0];
        if (last2 && last2.vnode === currentVNode) {
          last2.recurseCount++;
        } else {
          normalizedStack.push({
            vnode: currentVNode,
            recurseCount: 0
          });
        }
        const parentInstance = currentVNode.component && currentVNode.component.parent;
        currentVNode = parentInstance && parentInstance.vnode;
      }
      return normalizedStack;
    }
    function formatTrace(trace) {
      const logs = [];
      trace.forEach((entry, i) => {
        logs.push(...i === 0 ? [] : [`
`], ...formatTraceEntry(entry));
      });
      return logs;
    }
    function formatTraceEntry({ vnode, recurseCount }) {
      const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
      const isRoot = vnode.component ? vnode.component.parent == null : false;
      const open2 = ` at <${formatComponentName(vnode.component, vnode.type, isRoot)}`;
      const close = `>` + postfix;
      return vnode.props ? [open2, ...formatProps(vnode.props), close] : [open2 + close];
    }
    function formatProps(props) {
      const res = [];
      const keys = Object.keys(props);
      keys.slice(0, 3).forEach((key) => {
        res.push(...formatProp(key, props[key]));
      });
      if (keys.length > 3) {
        res.push(` ...`);
      }
      return res;
    }
    function formatProp(key, value, raw) {
      if (isString(value)) {
        value = JSON.stringify(value);
        return raw ? value : [`${key}=${value}`];
      } else if (typeof value === "number" || typeof value === "boolean" || value == null) {
        return raw ? value : [`${key}=${value}`];
      } else if (isRef(value)) {
        value = formatProp(key, toRaw(value.value), true);
        return raw ? value : [`${key}=Ref<`, value, `>`];
      } else if (isFunction(value)) {
        return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];
      } else {
        value = toRaw(value);
        return raw ? value : [`${key}=`, value];
      }
    }
    const ErrorTypeStrings = {
      ["sp"]: "serverPrefetch hook",
      ["bc"]: "beforeCreate hook",
      ["c"]: "created hook",
      ["bm"]: "beforeMount hook",
      ["m"]: "mounted hook",
      ["bu"]: "beforeUpdate hook",
      ["u"]: "updated",
      ["bum"]: "beforeUnmount hook",
      ["um"]: "unmounted hook",
      ["a"]: "activated hook",
      ["da"]: "deactivated hook",
      ["ec"]: "errorCaptured hook",
      ["rtc"]: "renderTracked hook",
      ["rtg"]: "renderTriggered hook",
      [0]: "setup function",
      [1]: "render function",
      [2]: "watcher getter",
      [3]: "watcher callback",
      [4]: "watcher cleanup function",
      [5]: "native event handler",
      [6]: "component event handler",
      [7]: "vnode hook",
      [8]: "directive hook",
      [9]: "transition hook",
      [10]: "app errorHandler",
      [11]: "app warnHandler",
      [12]: "ref function",
      [13]: "async component loader",
      [14]: "scheduler flush. This is likely a Vue internals bug. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/core"
    };
    function callWithErrorHandling(fn, instance, type, args) {
      let res;
      try {
        res = args ? fn(...args) : fn();
      } catch (err) {
        handleError(err, instance, type);
      }
      return res;
    }
    function callWithAsyncErrorHandling(fn, instance, type, args) {
      if (isFunction(fn)) {
        const res = callWithErrorHandling(fn, instance, type, args);
        if (res && isPromise(res)) {
          res.catch((err) => {
            handleError(err, instance, type);
          });
        }
        return res;
      }
      const values = [];
      for (let i = 0; i < fn.length; i++) {
        values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));
      }
      return values;
    }
    function handleError(err, instance, type, throwInDev = true) {
      const contextVNode = instance ? instance.vnode : null;
      if (instance) {
        let cur = instance.parent;
        const exposedInstance = instance.proxy;
        const errorInfo = ErrorTypeStrings[type];
        while (cur) {
          const errorCapturedHooks = cur.ec;
          if (errorCapturedHooks) {
            for (let i = 0; i < errorCapturedHooks.length; i++) {
              if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {
                return;
              }
            }
          }
          cur = cur.parent;
        }
        const appErrorHandler = instance.appContext.config.errorHandler;
        if (appErrorHandler) {
          callWithErrorHandling(appErrorHandler, null, 10, [err, exposedInstance, errorInfo]);
          return;
        }
      }
      logError(err, type, contextVNode, throwInDev);
    }
    function logError(err, type, contextVNode, throwInDev = true) {
      {
        const info = ErrorTypeStrings[type];
        if (contextVNode) {
          pushWarningContext(contextVNode);
        }
        warn$1(`Unhandled error${info ? ` during execution of ${info}` : ``}`);
        if (contextVNode) {
          popWarningContext();
        }
        if (throwInDev) {
          throw err;
        } else {
          console.error(err);
        }
      }
    }
    let isFlushing = false;
    let isFlushPending = false;
    const queue = [];
    let flushIndex = 0;
    const pendingPreFlushCbs = [];
    let activePreFlushCbs = null;
    let preFlushIndex = 0;
    const pendingPostFlushCbs = [];
    let activePostFlushCbs = null;
    let postFlushIndex = 0;
    const resolvedPromise = /* @__PURE__ */ Promise.resolve();
    let currentFlushPromise = null;
    let currentPreFlushParentJob = null;
    const RECURSION_LIMIT = 100;
    function nextTick(fn) {
      const p2 = currentFlushPromise || resolvedPromise;
      return fn ? p2.then(this ? fn.bind(this) : fn) : p2;
    }
    function findInsertionIndex(id) {
      let start = flushIndex + 1;
      let end = queue.length;
      while (start < end) {
        const middle = start + end >>> 1;
        const middleJobId = getId(queue[middle]);
        middleJobId < id ? start = middle + 1 : end = middle;
      }
      return start;
    }
    function queueJob(job) {
      if ((!queue.length || !queue.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) && job !== currentPreFlushParentJob) {
        if (job.id == null) {
          queue.push(job);
        } else {
          queue.splice(findInsertionIndex(job.id), 0, job);
        }
        queueFlush();
      }
    }
    function queueFlush() {
      if (!isFlushing && !isFlushPending) {
        isFlushPending = true;
        currentFlushPromise = resolvedPromise.then(flushJobs);
      }
    }
    function invalidateJob(job) {
      const i = queue.indexOf(job);
      if (i > flushIndex) {
        queue.splice(i, 1);
      }
    }
    function queueCb(cb, activeQueue, pendingQueue, index) {
      if (!isArray(cb)) {
        if (!activeQueue || !activeQueue.includes(cb, cb.allowRecurse ? index + 1 : index)) {
          pendingQueue.push(cb);
        }
      } else {
        pendingQueue.push(...cb);
      }
      queueFlush();
    }
    function queuePreFlushCb(cb) {
      queueCb(cb, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex);
    }
    function queuePostFlushCb(cb) {
      queueCb(cb, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex);
    }
    function flushPreFlushCbs(seen2, parentJob = null) {
      if (pendingPreFlushCbs.length) {
        currentPreFlushParentJob = parentJob;
        activePreFlushCbs = [...new Set(pendingPreFlushCbs)];
        pendingPreFlushCbs.length = 0;
        {
          seen2 = seen2 || /* @__PURE__ */ new Map();
        }
        for (preFlushIndex = 0; preFlushIndex < activePreFlushCbs.length; preFlushIndex++) {
          if (checkRecursiveUpdates(seen2, activePreFlushCbs[preFlushIndex])) {
            continue;
          }
          activePreFlushCbs[preFlushIndex]();
        }
        activePreFlushCbs = null;
        preFlushIndex = 0;
        currentPreFlushParentJob = null;
        flushPreFlushCbs(seen2, parentJob);
      }
    }
    function flushPostFlushCbs(seen2) {
      flushPreFlushCbs();
      if (pendingPostFlushCbs.length) {
        const deduped = [...new Set(pendingPostFlushCbs)];
        pendingPostFlushCbs.length = 0;
        if (activePostFlushCbs) {
          activePostFlushCbs.push(...deduped);
          return;
        }
        activePostFlushCbs = deduped;
        {
          seen2 = seen2 || /* @__PURE__ */ new Map();
        }
        activePostFlushCbs.sort((a, b2) => getId(a) - getId(b2));
        for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
          if (checkRecursiveUpdates(seen2, activePostFlushCbs[postFlushIndex])) {
            continue;
          }
          activePostFlushCbs[postFlushIndex]();
        }
        activePostFlushCbs = null;
        postFlushIndex = 0;
      }
    }
    const getId = (job) => job.id == null ? Infinity : job.id;
    function flushJobs(seen2) {
      isFlushPending = false;
      isFlushing = true;
      {
        seen2 = seen2 || /* @__PURE__ */ new Map();
      }
      flushPreFlushCbs(seen2);
      queue.sort((a, b2) => getId(a) - getId(b2));
      const check = (job) => checkRecursiveUpdates(seen2, job);
      try {
        for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
          const job = queue[flushIndex];
          if (job && job.active !== false) {
            if (check(job)) {
              continue;
            }
            callWithErrorHandling(job, null, 14);
          }
        }
      } finally {
        flushIndex = 0;
        queue.length = 0;
        flushPostFlushCbs(seen2);
        isFlushing = false;
        currentFlushPromise = null;
        if (queue.length || pendingPreFlushCbs.length || pendingPostFlushCbs.length) {
          flushJobs(seen2);
        }
      }
    }
    function checkRecursiveUpdates(seen2, fn) {
      if (!seen2.has(fn)) {
        seen2.set(fn, 1);
      } else {
        const count = seen2.get(fn);
        if (count > RECURSION_LIMIT) {
          const instance = fn.ownerInstance;
          const componentName = instance && getComponentName(instance.type);
          warn$1(`Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`);
          return true;
        } else {
          seen2.set(fn, count + 1);
        }
      }
    }
    let isHmrUpdating = false;
    const hmrDirtyComponents = /* @__PURE__ */ new Set();
    {
      getGlobalThis().__VUE_HMR_RUNTIME__ = {
        createRecord: tryWrap(createRecord),
        rerender: tryWrap(rerender),
        reload: tryWrap(reload)
      };
    }
    const map = /* @__PURE__ */ new Map();
    function registerHMR(instance) {
      const id = instance.type.__hmrId;
      let record = map.get(id);
      if (!record) {
        createRecord(id, instance.type);
        record = map.get(id);
      }
      record.instances.add(instance);
    }
    function unregisterHMR(instance) {
      map.get(instance.type.__hmrId).instances.delete(instance);
    }
    function createRecord(id, initialDef) {
      if (map.has(id)) {
        return false;
      }
      map.set(id, {
        initialDef: normalizeClassComponent(initialDef),
        instances: /* @__PURE__ */ new Set()
      });
      return true;
    }
    function normalizeClassComponent(component) {
      return isClassComponent(component) ? component.__vccOpts : component;
    }
    function rerender(id, newRender) {
      const record = map.get(id);
      if (!record) {
        return;
      }
      record.initialDef.render = newRender;
      [...record.instances].forEach((instance) => {
        if (newRender) {
          instance.render = newRender;
          normalizeClassComponent(instance.type).render = newRender;
        }
        instance.renderCache = [];
        isHmrUpdating = true;
        instance.update();
        isHmrUpdating = false;
      });
    }
    function reload(id, newComp) {
      const record = map.get(id);
      if (!record)
        return;
      newComp = normalizeClassComponent(newComp);
      updateComponentDef(record.initialDef, newComp);
      const instances = [...record.instances];
      for (const instance of instances) {
        const oldComp = normalizeClassComponent(instance.type);
        if (!hmrDirtyComponents.has(oldComp)) {
          if (oldComp !== record.initialDef) {
            updateComponentDef(oldComp, newComp);
          }
          hmrDirtyComponents.add(oldComp);
        }
        instance.appContext.optionsCache.delete(instance.type);
        if (instance.ceReload) {
          hmrDirtyComponents.add(oldComp);
          instance.ceReload(newComp.styles);
          hmrDirtyComponents.delete(oldComp);
        } else if (instance.parent) {
          queueJob(instance.parent.update);
          if (instance.parent.type.__asyncLoader && instance.parent.ceReload) {
            instance.parent.ceReload(newComp.styles);
          }
        } else if (instance.appContext.reload) {
          instance.appContext.reload();
        } else if (typeof window !== "undefined") {
          window.location.reload();
        } else {
          console.warn("[HMR] Root or manually mounted instance modified. Full reload required.");
        }
      }
      queuePostFlushCb(() => {
        for (const instance of instances) {
          hmrDirtyComponents.delete(normalizeClassComponent(instance.type));
        }
      });
    }
    function updateComponentDef(oldComp, newComp) {
      extend(oldComp, newComp);
      for (const key in oldComp) {
        if (key !== "__file" && !(key in newComp)) {
          delete oldComp[key];
        }
      }
    }
    function tryWrap(fn) {
      return (id, arg) => {
        try {
          return fn(id, arg);
        } catch (e) {
          console.error(e);
          console.warn(`[HMR] Something went wrong during Vue component hot-reload. Full reload required.`);
        }
      };
    }
    let buffer = [];
    let devtoolsNotInstalled = false;
    function emit(event, ...args) {
      if (exports.devtools) {
        exports.devtools.emit(event, ...args);
      } else if (!devtoolsNotInstalled) {
        buffer.push({ event, args });
      }
    }
    function setDevtoolsHook(hook, target) {
      var _a, _b;
      exports.devtools = hook;
      if (exports.devtools) {
        exports.devtools.enabled = true;
        buffer.forEach(({ event, args }) => exports.devtools.emit(event, ...args));
        buffer = [];
      } else if (typeof window !== "undefined" && window.HTMLElement && !((_b = (_a = window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) === null || _b === void 0 ? void 0 : _b.includes("jsdom"))) {
        const replay = target.__VUE_DEVTOOLS_HOOK_REPLAY__ = target.__VUE_DEVTOOLS_HOOK_REPLAY__ || [];
        replay.push((newHook) => {
          setDevtoolsHook(newHook, target);
        });
        setTimeout(() => {
          if (!exports.devtools) {
            target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;
            devtoolsNotInstalled = true;
            buffer = [];
          }
        }, 3e3);
      } else {
        devtoolsNotInstalled = true;
        buffer = [];
      }
    }
    function devtoolsInitApp(app2, version3) {
      emit("app:init", app2, version3, {
        Fragment,
        Text,
        Comment: Comment2,
        Static
      });
    }
    function devtoolsUnmountApp(app2) {
      emit("app:unmount", app2);
    }
    const devtoolsComponentAdded = /* @__PURE__ */ createDevtoolsComponentHook("component:added");
    const devtoolsComponentUpdated = /* @__PURE__ */ createDevtoolsComponentHook("component:updated");
    const devtoolsComponentRemoved = /* @__PURE__ */ createDevtoolsComponentHook("component:removed");
    function createDevtoolsComponentHook(hook) {
      return (component) => {
        emit(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : void 0, component);
      };
    }
    const devtoolsPerfStart = /* @__PURE__ */ createDevtoolsPerformanceHook("perf:start");
    const devtoolsPerfEnd = /* @__PURE__ */ createDevtoolsPerformanceHook("perf:end");
    function createDevtoolsPerformanceHook(hook) {
      return (component, type, time) => {
        emit(hook, component.appContext.app, component.uid, component, type, time);
      };
    }
    function devtoolsComponentEmit(component, event, params) {
      emit("component:emit", component.appContext.app, component, event, params);
    }
    function emit$1(instance, event, ...rawArgs) {
      if (instance.isUnmounted)
        return;
      const props = instance.vnode.props || EMPTY_OBJ;
      {
        const { emitsOptions, propsOptions: [propsOptions] } = instance;
        if (emitsOptions) {
          if (!(event in emitsOptions) && true) {
            if (!propsOptions || !(toHandlerKey(event) in propsOptions)) {
              warn$1(`Component emitted event "${event}" but it is neither declared in the emits option nor as an "${toHandlerKey(event)}" prop.`);
            }
          } else {
            const validator = emitsOptions[event];
            if (isFunction(validator)) {
              const isValid = validator(...rawArgs);
              if (!isValid) {
                warn$1(`Invalid event arguments: event validation failed for event "${event}".`);
              }
            }
          }
        }
      }
      let args = rawArgs;
      const isModelListener2 = event.startsWith("update:");
      const modelArg = isModelListener2 && event.slice(7);
      if (modelArg && modelArg in props) {
        const modifiersKey = `${modelArg === "modelValue" ? "model" : modelArg}Modifiers`;
        const { number, trim } = props[modifiersKey] || EMPTY_OBJ;
        if (trim) {
          args = rawArgs.map((a) => a.trim());
        }
        if (number) {
          args = rawArgs.map(toNumber);
        }
      }
      {
        devtoolsComponentEmit(instance, event, args);
      }
      {
        const lowerCaseEvent = event.toLowerCase();
        if (lowerCaseEvent !== event && props[toHandlerKey(lowerCaseEvent)]) {
          warn$1(`Event "${lowerCaseEvent}" is emitted in component ${formatComponentName(instance, instance.type)} but the handler is registered for "${event}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${hyphenate(event)}" instead of "${event}".`);
        }
      }
      let handlerName;
      let handler = props[handlerName = toHandlerKey(event)] || props[handlerName = toHandlerKey(camelize(event))];
      if (!handler && isModelListener2) {
        handler = props[handlerName = toHandlerKey(hyphenate(event))];
      }
      if (handler) {
        callWithAsyncErrorHandling(handler, instance, 6, args);
      }
      const onceHandler = props[handlerName + `Once`];
      if (onceHandler) {
        if (!instance.emitted) {
          instance.emitted = {};
        } else if (instance.emitted[handlerName]) {
          return;
        }
        instance.emitted[handlerName] = true;
        callWithAsyncErrorHandling(onceHandler, instance, 6, args);
      }
    }
    function normalizeEmitsOptions(comp, appContext, asMixin = false) {
      const cache = appContext.emitsCache;
      const cached = cache.get(comp);
      if (cached !== void 0) {
        return cached;
      }
      const raw = comp.emits;
      let normalized = {};
      let hasExtends = false;
      if (!isFunction(comp)) {
        const extendEmits = (raw2) => {
          const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
          if (normalizedFromExtend) {
            hasExtends = true;
            extend(normalized, normalizedFromExtend);
          }
        };
        if (!asMixin && appContext.mixins.length) {
          appContext.mixins.forEach(extendEmits);
        }
        if (comp.extends) {
          extendEmits(comp.extends);
        }
        if (comp.mixins) {
          comp.mixins.forEach(extendEmits);
        }
      }
      if (!raw && !hasExtends) {
        cache.set(comp, null);
        return null;
      }
      if (isArray(raw)) {
        raw.forEach((key) => normalized[key] = null);
      } else {
        extend(normalized, raw);
      }
      cache.set(comp, normalized);
      return normalized;
    }
    function isEmitListener(options, key) {
      if (!options || !isOn(key)) {
        return false;
      }
      key = key.slice(2).replace(/Once$/, "");
      return hasOwn(options, key[0].toLowerCase() + key.slice(1)) || hasOwn(options, hyphenate(key)) || hasOwn(options, key);
    }
    let currentRenderingInstance = null;
    let currentScopeId = null;
    function setCurrentRenderingInstance(instance) {
      const prev = currentRenderingInstance;
      currentRenderingInstance = instance;
      currentScopeId = instance && instance.type.__scopeId || null;
      return prev;
    }
    function pushScopeId(id) {
      currentScopeId = id;
    }
    function popScopeId() {
      currentScopeId = null;
    }
    const withScopeId = (_id) => withCtx;
    function withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot) {
      if (!ctx)
        return fn;
      if (fn._n) {
        return fn;
      }
      const renderFnWithContext = (...args) => {
        if (renderFnWithContext._d) {
          setBlockTracking(-1);
        }
        const prevInstance = setCurrentRenderingInstance(ctx);
        const res = fn(...args);
        setCurrentRenderingInstance(prevInstance);
        if (renderFnWithContext._d) {
          setBlockTracking(1);
        }
        {
          devtoolsComponentUpdated(ctx);
        }
        return res;
      };
      renderFnWithContext._n = true;
      renderFnWithContext._c = true;
      renderFnWithContext._d = true;
      return renderFnWithContext;
    }
    let accessedAttrs = false;
    function markAttrsAccessed() {
      accessedAttrs = true;
    }
    function renderComponentRoot(instance) {
      const { type: Component, vnode, proxy, withProxy, props, propsOptions: [propsOptions], slots, attrs, emit: emit2, render: render2, renderCache, data, setupState, ctx, inheritAttrs } = instance;
      let result;
      let fallthroughAttrs;
      const prev = setCurrentRenderingInstance(instance);
      {
        accessedAttrs = false;
      }
      try {
        if (vnode.shapeFlag & 4) {
          const proxyToUse = withProxy || proxy;
          result = normalizeVNode(render2.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));
          fallthroughAttrs = attrs;
        } else {
          const render3 = Component;
          if (attrs === props) {
            markAttrsAccessed();
          }
          result = normalizeVNode(render3.length > 1 ? render3(props, true ? {
            get attrs() {
              markAttrsAccessed();
              return attrs;
            },
            slots,
            emit: emit2
          } : { attrs, slots, emit: emit2 }) : render3(props, null));
          fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
        }
      } catch (err) {
        blockStack.length = 0;
        handleError(err, instance, 1);
        result = createVNode(Comment2);
      }
      let root = result;
      let setRoot = void 0;
      if (result.patchFlag > 0 && result.patchFlag & 2048) {
        [root, setRoot] = getChildRoot(result);
      }
      if (fallthroughAttrs && inheritAttrs !== false) {
        const keys = Object.keys(fallthroughAttrs);
        const { shapeFlag } = root;
        if (keys.length) {
          if (shapeFlag & (1 | 6)) {
            if (propsOptions && keys.some(isModelListener)) {
              fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);
            }
            root = cloneVNode(root, fallthroughAttrs);
          } else if (!accessedAttrs && root.type !== Comment2) {
            const allAttrs = Object.keys(attrs);
            const eventAttrs = [];
            const extraAttrs = [];
            for (let i = 0, l = allAttrs.length; i < l; i++) {
              const key = allAttrs[i];
              if (isOn(key)) {
                if (!isModelListener(key)) {
                  eventAttrs.push(key[2].toLowerCase() + key.slice(3));
                }
              } else {
                extraAttrs.push(key);
              }
            }
            if (extraAttrs.length) {
              warn$1(`Extraneous non-props attributes (${extraAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.`);
            }
            if (eventAttrs.length) {
              warn$1(`Extraneous non-emits event listeners (${eventAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`);
            }
          }
        }
      }
      if (vnode.dirs) {
        if (!isElementRoot(root)) {
          warn$1(`Runtime directive used on component with non-element root node. The directives will not function as intended.`);
        }
        root = cloneVNode(root);
        root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
      }
      if (vnode.transition) {
        if (!isElementRoot(root)) {
          warn$1(`Component inside <Transition> renders non-element root node that cannot be animated.`);
        }
        root.transition = vnode.transition;
      }
      if (setRoot) {
        setRoot(root);
      } else {
        result = root;
      }
      setCurrentRenderingInstance(prev);
      return result;
    }
    const getChildRoot = (vnode) => {
      const rawChildren = vnode.children;
      const dynamicChildren = vnode.dynamicChildren;
      const childRoot = filterSingleRoot(rawChildren);
      if (!childRoot) {
        return [vnode, void 0];
      }
      const index = rawChildren.indexOf(childRoot);
      const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;
      const setRoot = (updatedRoot) => {
        rawChildren[index] = updatedRoot;
        if (dynamicChildren) {
          if (dynamicIndex > -1) {
            dynamicChildren[dynamicIndex] = updatedRoot;
          } else if (updatedRoot.patchFlag > 0) {
            vnode.dynamicChildren = [...dynamicChildren, updatedRoot];
          }
        }
      };
      return [normalizeVNode(childRoot), setRoot];
    };
    function filterSingleRoot(children) {
      let singleRoot;
      for (let i = 0; i < children.length; i++) {
        const child = children[i];
        if (isVNode(child)) {
          if (child.type !== Comment2 || child.children === "v-if") {
            if (singleRoot) {
              return;
            } else {
              singleRoot = child;
            }
          }
        } else {
          return;
        }
      }
      return singleRoot;
    }
    const getFunctionalFallthrough = (attrs) => {
      let res;
      for (const key in attrs) {
        if (key === "class" || key === "style" || isOn(key)) {
          (res || (res = {}))[key] = attrs[key];
        }
      }
      return res;
    };
    const filterModelListeners = (attrs, props) => {
      const res = {};
      for (const key in attrs) {
        if (!isModelListener(key) || !(key.slice(9) in props)) {
          res[key] = attrs[key];
        }
      }
      return res;
    };
    const isElementRoot = (vnode) => {
      return vnode.shapeFlag & (6 | 1) || vnode.type === Comment2;
    };
    function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
      const { props: prevProps, children: prevChildren, component } = prevVNode;
      const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
      const emits = component.emitsOptions;
      if ((prevChildren || nextChildren) && isHmrUpdating) {
        return true;
      }
      if (nextVNode.dirs || nextVNode.transition) {
        return true;
      }
      if (optimized && patchFlag >= 0) {
        if (patchFlag & 1024) {
          return true;
        }
        if (patchFlag & 16) {
          if (!prevProps) {
            return !!nextProps;
          }
          return hasPropsChanged(prevProps, nextProps, emits);
        } else if (patchFlag & 8) {
          const dynamicProps = nextVNode.dynamicProps;
          for (let i = 0; i < dynamicProps.length; i++) {
            const key = dynamicProps[i];
            if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) {
              return true;
            }
          }
        }
      } else {
        if (prevChildren || nextChildren) {
          if (!nextChildren || !nextChildren.$stable) {
            return true;
          }
        }
        if (prevProps === nextProps) {
          return false;
        }
        if (!prevProps) {
          return !!nextProps;
        }
        if (!nextProps) {
          return true;
        }
        return hasPropsChanged(prevProps, nextProps, emits);
      }
      return false;
    }
    function hasPropsChanged(prevProps, nextProps, emitsOptions) {
      const nextKeys = Object.keys(nextProps);
      if (nextKeys.length !== Object.keys(prevProps).length) {
        return true;
      }
      for (let i = 0; i < nextKeys.length; i++) {
        const key = nextKeys[i];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) {
          return true;
        }
      }
      return false;
    }
    function updateHOCHostEl({ vnode, parent }, el) {
      while (parent && parent.subTree === vnode) {
        (vnode = parent.vnode).el = el;
        parent = parent.parent;
      }
    }
    const isSuspense = (type) => type.__isSuspense;
    const SuspenseImpl = {
      name: "Suspense",
      __isSuspense: true,
      process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {
        if (n1 == null) {
          mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals);
        } else {
          patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, rendererInternals);
        }
      },
      hydrate: hydrateSuspense,
      create: createSuspenseBoundary,
      normalize: normalizeSuspenseChildren
    };
    const Suspense = SuspenseImpl;
    function triggerEvent(vnode, name) {
      const eventListener = vnode.props && vnode.props[name];
      if (isFunction(eventListener)) {
        eventListener();
      }
    }
    function mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {
      const { p: patch, o: { createElement } } = rendererInternals;
      const hiddenContainer = createElement("div");
      const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals);
      patch(null, suspense.pendingBranch = vnode.ssContent, hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds);
      if (suspense.deps > 0) {
        triggerEvent(vnode, "onPending");
        triggerEvent(vnode, "onFallback");
        patch(
          null,
          vnode.ssFallback,
          container,
          anchor,
          parentComponent,
          null,
          isSVG,
          slotScopeIds
        );
        setActiveBranch(suspense, vnode.ssFallback);
      } else {
        suspense.resolve();
      }
    }
    function patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, { p: patch, um: unmount, o: { createElement } }) {
      const suspense = n2.suspense = n1.suspense;
      suspense.vnode = n2;
      n2.el = n1.el;
      const newBranch = n2.ssContent;
      const newFallback = n2.ssFallback;
      const { activeBranch, pendingBranch, isInFallback, isHydrating } = suspense;
      if (pendingBranch) {
        suspense.pendingBranch = newBranch;
        if (isSameVNodeType(newBranch, pendingBranch)) {
          patch(pendingBranch, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
          if (suspense.deps <= 0) {
            suspense.resolve();
          } else if (isInFallback) {
            patch(
              activeBranch,
              newFallback,
              container,
              anchor,
              parentComponent,
              null,
              isSVG,
              slotScopeIds,
              optimized
            );
            setActiveBranch(suspense, newFallback);
          }
        } else {
          suspense.pendingId++;
          if (isHydrating) {
            suspense.isHydrating = false;
            suspense.activeBranch = pendingBranch;
          } else {
            unmount(pendingBranch, parentComponent, suspense);
          }
          suspense.deps = 0;
          suspense.effects.length = 0;
          suspense.hiddenContainer = createElement("div");
          if (isInFallback) {
            patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
            if (suspense.deps <= 0) {
              suspense.resolve();
            } else {
              patch(
                activeBranch,
                newFallback,
                container,
                anchor,
                parentComponent,
                null,
                isSVG,
                slotScopeIds,
                optimized
              );
              setActiveBranch(suspense, newFallback);
            }
          } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
            patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);
            suspense.resolve(true);
          } else {
            patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
            if (suspense.deps <= 0) {
              suspense.resolve();
            }
          }
        }
      } else {
        if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
          patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);
          setActiveBranch(suspense, newBranch);
        } else {
          triggerEvent(n2, "onPending");
          suspense.pendingBranch = newBranch;
          suspense.pendingId++;
          patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
          if (suspense.deps <= 0) {
            suspense.resolve();
          } else {
            const { timeout, pendingId } = suspense;
            if (timeout > 0) {
              setTimeout(() => {
                if (suspense.pendingId === pendingId) {
                  suspense.fallback(newFallback);
                }
              }, timeout);
            } else if (timeout === 0) {
              suspense.fallback(newFallback);
            }
          }
        }
      }
    }
    let hasWarned = false;
    function createSuspenseBoundary(vnode, parent, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals, isHydrating = false) {
      if (!hasWarned) {
        hasWarned = true;
        console[console.info ? "info" : "log"](`<Suspense> is an experimental feature and its API will likely change.`);
      }
      const { p: patch, m: move, um: unmount, n: next, o: { parentNode, remove: remove2 } } = rendererInternals;
      const timeout = toNumber(vnode.props && vnode.props.timeout);
      const suspense = {
        vnode,
        parent,
        parentComponent,
        isSVG,
        container,
        hiddenContainer,
        anchor,
        deps: 0,
        pendingId: 0,
        timeout: typeof timeout === "number" ? timeout : -1,
        activeBranch: null,
        pendingBranch: null,
        isInFallback: true,
        isHydrating,
        isUnmounted: false,
        effects: [],
        resolve(resume = false) {
          {
            if (!resume && !suspense.pendingBranch) {
              throw new Error(`suspense.resolve() is called without a pending branch.`);
            }
            if (suspense.isUnmounted) {
              throw new Error(`suspense.resolve() is called on an already unmounted suspense boundary.`);
            }
          }
          const { vnode: vnode2, activeBranch, pendingBranch, pendingId, effects, parentComponent: parentComponent2, container: container2 } = suspense;
          if (suspense.isHydrating) {
            suspense.isHydrating = false;
          } else if (!resume) {
            const delayEnter = activeBranch && pendingBranch.transition && pendingBranch.transition.mode === "out-in";
            if (delayEnter) {
              activeBranch.transition.afterLeave = () => {
                if (pendingId === suspense.pendingId) {
                  move(pendingBranch, container2, anchor2, 0);
                }
              };
            }
            let { anchor: anchor2 } = suspense;
            if (activeBranch) {
              anchor2 = next(activeBranch);
              unmount(activeBranch, parentComponent2, suspense, true);
            }
            if (!delayEnter) {
              move(pendingBranch, container2, anchor2, 0);
            }
          }
          setActiveBranch(suspense, pendingBranch);
          suspense.pendingBranch = null;
          suspense.isInFallback = false;
          let parent2 = suspense.parent;
          let hasUnresolvedAncestor = false;
          while (parent2) {
            if (parent2.pendingBranch) {
              parent2.effects.push(...effects);
              hasUnresolvedAncestor = true;
              break;
            }
            parent2 = parent2.parent;
          }
          if (!hasUnresolvedAncestor) {
            queuePostFlushCb(effects);
          }
          suspense.effects = [];
          triggerEvent(vnode2, "onResolve");
        },
        fallback(fallbackVNode) {
          if (!suspense.pendingBranch) {
            return;
          }
          const { vnode: vnode2, activeBranch, parentComponent: parentComponent2, container: container2, isSVG: isSVG2 } = suspense;
          triggerEvent(vnode2, "onFallback");
          const anchor2 = next(activeBranch);
          const mountFallback = () => {
            if (!suspense.isInFallback) {
              return;
            }
            patch(
              null,
              fallbackVNode,
              container2,
              anchor2,
              parentComponent2,
              null,
              isSVG2,
              slotScopeIds,
              optimized
            );
            setActiveBranch(suspense, fallbackVNode);
          };
          const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === "out-in";
          if (delayEnter) {
            activeBranch.transition.afterLeave = mountFallback;
          }
          suspense.isInFallback = true;
          unmount(
            activeBranch,
            parentComponent2,
            null,
            true
          );
          if (!delayEnter) {
            mountFallback();
          }
        },
        move(container2, anchor2, type) {
          suspense.activeBranch && move(suspense.activeBranch, container2, anchor2, type);
          suspense.container = container2;
        },
        next() {
          return suspense.activeBranch && next(suspense.activeBranch);
        },
        registerDep(instance, setupRenderEffect) {
          const isInPendingSuspense = !!suspense.pendingBranch;
          if (isInPendingSuspense) {
            suspense.deps++;
          }
          const hydratedEl = instance.vnode.el;
          instance.asyncDep.catch((err) => {
            handleError(err, instance, 0);
          }).then((asyncSetupResult) => {
            if (instance.isUnmounted || suspense.isUnmounted || suspense.pendingId !== instance.suspenseId) {
              return;
            }
            instance.asyncResolved = true;
            const { vnode: vnode2 } = instance;
            {
              pushWarningContext(vnode2);
            }
            handleSetupResult(instance, asyncSetupResult, false);
            if (hydratedEl) {
              vnode2.el = hydratedEl;
            }
            const placeholder = !hydratedEl && instance.subTree.el;
            setupRenderEffect(
              instance,
              vnode2,
              parentNode(hydratedEl || instance.subTree.el),
              hydratedEl ? null : next(instance.subTree),
              suspense,
              isSVG,
              optimized
            );
            if (placeholder) {
              remove2(placeholder);
            }
            updateHOCHostEl(instance, vnode2.el);
            {
              popWarningContext();
            }
            if (isInPendingSuspense && --suspense.deps === 0) {
              suspense.resolve();
            }
          });
        },
        unmount(parentSuspense, doRemove) {
          suspense.isUnmounted = true;
          if (suspense.activeBranch) {
            unmount(suspense.activeBranch, parentComponent, parentSuspense, doRemove);
          }
          if (suspense.pendingBranch) {
            unmount(suspense.pendingBranch, parentComponent, parentSuspense, doRemove);
          }
        }
      };
      return suspense;
    }
    function hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals, hydrateNode) {
      const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, node.parentNode, document.createElement("div"), null, isSVG, slotScopeIds, optimized, rendererInternals, true);
      const result = hydrateNode(node, suspense.pendingBranch = vnode.ssContent, parentComponent, suspense, slotScopeIds, optimized);
      if (suspense.deps === 0) {
        suspense.resolve();
      }
      return result;
    }
    function normalizeSuspenseChildren(vnode) {
      const { shapeFlag, children } = vnode;
      const isSlotChildren = shapeFlag & 32;
      vnode.ssContent = normalizeSuspenseSlot(isSlotChildren ? children.default : children);
      vnode.ssFallback = isSlotChildren ? normalizeSuspenseSlot(children.fallback) : createVNode(Comment2);
    }
    function normalizeSuspenseSlot(s) {
      let block;
      if (isFunction(s)) {
        const trackBlock = isBlockTreeEnabled && s._c;
        if (trackBlock) {
          s._d = false;
          openBlock();
        }
        s = s();
        if (trackBlock) {
          s._d = true;
          block = currentBlock;
          closeBlock();
        }
      }
      if (isArray(s)) {
        const singleChild = filterSingleRoot(s);
        if (!singleChild) {
          warn$1(`<Suspense> slots expect a single root node.`);
        }
        s = singleChild;
      }
      s = normalizeVNode(s);
      if (block && !s.dynamicChildren) {
        s.dynamicChildren = block.filter((c) => c !== s);
      }
      return s;
    }
    function queueEffectWithSuspense(fn, suspense) {
      if (suspense && suspense.pendingBranch) {
        if (isArray(fn)) {
          suspense.effects.push(...fn);
        } else {
          suspense.effects.push(fn);
        }
      } else {
        queuePostFlushCb(fn);
      }
    }
    function setActiveBranch(suspense, branch) {
      suspense.activeBranch = branch;
      const { vnode, parentComponent } = suspense;
      const el = vnode.el = branch.el;
      if (parentComponent && parentComponent.subTree === vnode) {
        parentComponent.vnode.el = el;
        updateHOCHostEl(parentComponent, el);
      }
    }
    function provide(key, value) {
      if (!currentInstance) {
        {
          warn$1(`provide() can only be used inside setup().`);
        }
      } else {
        let provides = currentInstance.provides;
        const parentProvides = currentInstance.parent && currentInstance.parent.provides;
        if (parentProvides === provides) {
          provides = currentInstance.provides = Object.create(parentProvides);
        }
        provides[key] = value;
      }
    }
    function inject(key, defaultValue, treatDefaultAsFactory = false) {
      const instance = currentInstance || currentRenderingInstance;
      if (instance) {
        const provides = instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides;
        if (provides && key in provides) {
          return provides[key];
        } else if (arguments.length > 1) {
          return treatDefaultAsFactory && isFunction(defaultValue) ? defaultValue.call(instance.proxy) : defaultValue;
        } else {
          warn$1(`injection "${String(key)}" not found.`);
        }
      } else {
        warn$1(`inject() can only be used inside setup() or functional components.`);
      }
    }
    function watchEffect(effect2, options) {
      return doWatch(effect2, null, options);
    }
    function watchPostEffect(effect2, options) {
      return doWatch(effect2, null, Object.assign(Object.assign({}, options), { flush: "post" }));
    }
    function watchSyncEffect(effect2, options) {
      return doWatch(effect2, null, Object.assign(Object.assign({}, options), { flush: "sync" }));
    }
    const INITIAL_WATCHER_VALUE = {};
    function watch(source, cb, options) {
      if (!isFunction(cb)) {
        warn$1(`\`watch(fn, options?)\` signature has been moved to a separate API. Use \`watchEffect(fn, options?)\` instead. \`watch\` now only supports \`watch(source, cb, options?) signature.`);
      }
      return doWatch(source, cb, options);
    }
    function doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ) {
      if (!cb) {
        if (immediate !== void 0) {
          warn$1(`watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.`);
        }
        if (deep !== void 0) {
          warn$1(`watch() "deep" option is only respected when using the watch(source, callback, options?) signature.`);
        }
      }
      const warnInvalidSource = (s) => {
        warn$1(`Invalid watch source: `, s, `A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.`);
      };
      const instance = currentInstance;
      let getter;
      let forceTrigger = false;
      let isMultiSource = false;
      if (isRef(source)) {
        getter = () => source.value;
        forceTrigger = isShallow(source);
      } else if (isReactive(source)) {
        getter = () => source;
        deep = true;
      } else if (isArray(source)) {
        isMultiSource = true;
        forceTrigger = source.some((s) => isReactive(s) || isShallow(s));
        getter = () => source.map((s) => {
          if (isRef(s)) {
            return s.value;
          } else if (isReactive(s)) {
            return traverse(s);
          } else if (isFunction(s)) {
            return callWithErrorHandling(s, instance, 2);
          } else {
            warnInvalidSource(s);
          }
        });
      } else if (isFunction(source)) {
        if (cb) {
          getter = () => callWithErrorHandling(source, instance, 2);
        } else {
          getter = () => {
            if (instance && instance.isUnmounted) {
              return;
            }
            if (cleanup) {
              cleanup();
            }
            return callWithAsyncErrorHandling(source, instance, 3, [onCleanup]);
          };
        }
      } else {
        getter = NOOP;
        warnInvalidSource(source);
      }
      if (cb && deep) {
        const baseGetter = getter;
        getter = () => traverse(baseGetter());
      }
      let cleanup;
      let onCleanup = (fn) => {
        cleanup = effect2.onStop = () => {
          callWithErrorHandling(fn, instance, 4);
        };
      };
      let oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;
      const job = () => {
        if (!effect2.active) {
          return;
        }
        if (cb) {
          const newValue = effect2.run();
          if (deep || forceTrigger || (isMultiSource ? newValue.some((v, i) => hasChanged(v, oldValue[i])) : hasChanged(newValue, oldValue)) || false) {
            if (cleanup) {
              cleanup();
            }
            callWithAsyncErrorHandling(cb, instance, 3, [
              newValue,
              oldValue === INITIAL_WATCHER_VALUE ? void 0 : oldValue,
              onCleanup
            ]);
            oldValue = newValue;
          }
        } else {
          effect2.run();
        }
      };
      job.allowRecurse = !!cb;
      let scheduler;
      if (flush === "sync") {
        scheduler = job;
      } else if (flush === "post") {
        scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);
      } else {
        scheduler = () => queuePreFlushCb(job);
      }
      const effect2 = new ReactiveEffect(getter, scheduler);
      {
        effect2.onTrack = onTrack;
        effect2.onTrigger = onTrigger;
      }
      if (cb) {
        if (immediate) {
          job();
        } else {
          oldValue = effect2.run();
        }
      } else if (flush === "post") {
        queuePostRenderEffect(effect2.run.bind(effect2), instance && instance.suspense);
      } else {
        effect2.run();
      }
      return () => {
        effect2.stop();
        if (instance && instance.scope) {
          remove(instance.scope.effects, effect2);
        }
      };
    }
    function instanceWatch(source, value, options) {
      const publicThis = this.proxy;
      const getter = isString(source) ? source.includes(".") ? createPathGetter(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
      let cb;
      if (isFunction(value)) {
        cb = value;
      } else {
        cb = value.handler;
        options = value;
      }
      const cur = currentInstance;
      setCurrentInstance(this);
      const res = doWatch(getter, cb.bind(publicThis), options);
      if (cur) {
        setCurrentInstance(cur);
      } else {
        unsetCurrentInstance();
      }
      return res;
    }
    function createPathGetter(ctx, path6) {
      const segments = path6.split(".");
      return () => {
        let cur = ctx;
        for (let i = 0; i < segments.length && cur; i++) {
          cur = cur[segments[i]];
        }
        return cur;
      };
    }
    function traverse(value, seen2) {
      if (!isObject(value) || value["__v_skip"]) {
        return value;
      }
      seen2 = seen2 || /* @__PURE__ */ new Set();
      if (seen2.has(value)) {
        return value;
      }
      seen2.add(value);
      if (isRef(value)) {
        traverse(value.value, seen2);
      } else if (isArray(value)) {
        for (let i = 0; i < value.length; i++) {
          traverse(value[i], seen2);
        }
      } else if (isSet(value) || isMap(value)) {
        value.forEach((v) => {
          traverse(v, seen2);
        });
      } else if (isPlainObject(value)) {
        for (const key in value) {
          traverse(value[key], seen2);
        }
      }
      return value;
    }
    function useTransitionState() {
      const state = {
        isMounted: false,
        isLeaving: false,
        isUnmounting: false,
        leavingVNodes: /* @__PURE__ */ new Map()
      };
      onMounted(() => {
        state.isMounted = true;
      });
      onBeforeUnmount(() => {
        state.isUnmounting = true;
      });
      return state;
    }
    const TransitionHookValidator = [Function, Array];
    const BaseTransitionImpl = {
      name: `BaseTransition`,
      props: {
        mode: String,
        appear: Boolean,
        persisted: Boolean,
        onBeforeEnter: TransitionHookValidator,
        onEnter: TransitionHookValidator,
        onAfterEnter: TransitionHookValidator,
        onEnterCancelled: TransitionHookValidator,
        onBeforeLeave: TransitionHookValidator,
        onLeave: TransitionHookValidator,
        onAfterLeave: TransitionHookValidator,
        onLeaveCancelled: TransitionHookValidator,
        onBeforeAppear: TransitionHookValidator,
        onAppear: TransitionHookValidator,
        onAfterAppear: TransitionHookValidator,
        onAppearCancelled: TransitionHookValidator
      },
      setup(props, { slots }) {
        const instance = getCurrentInstance();
        const state = useTransitionState();
        let prevTransitionKey;
        return () => {
          const children = slots.default && getTransitionRawChildren(slots.default(), true);
          if (!children || !children.length) {
            return;
          }
          let child = children[0];
          if (children.length > 1) {
            let hasFound = false;
            for (const c of children) {
              if (c.type !== Comment2) {
                if (hasFound) {
                  warn$1("<transition> can only be used on a single element or component. Use <transition-group> for lists.");
                  break;
                }
                child = c;
                hasFound = true;
              }
            }
          }
          const rawProps = toRaw(props);
          const { mode } = rawProps;
          if (mode && mode !== "in-out" && mode !== "out-in" && mode !== "default") {
            warn$1(`invalid <transition> mode: ${mode}`);
          }
          if (state.isLeaving) {
            return emptyPlaceholder(child);
          }
          const innerChild = getKeepAliveChild(child);
          if (!innerChild) {
            return emptyPlaceholder(child);
          }
          const enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);
          setTransitionHooks(innerChild, enterHooks);
          const oldChild = instance.subTree;
          const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
          let transitionKeyChanged = false;
          const { getTransitionKey } = innerChild.type;
          if (getTransitionKey) {
            const key = getTransitionKey();
            if (prevTransitionKey === void 0) {
              prevTransitionKey = key;
            } else if (key !== prevTransitionKey) {
              prevTransitionKey = key;
              transitionKeyChanged = true;
            }
          }
          if (oldInnerChild && oldInnerChild.type !== Comment2 && (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {
            const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);
            setTransitionHooks(oldInnerChild, leavingHooks);
            if (mode === "out-in") {
              state.isLeaving = true;
              leavingHooks.afterLeave = () => {
                state.isLeaving = false;
                instance.update();
              };
              return emptyPlaceholder(child);
            } else if (mode === "in-out" && innerChild.type !== Comment2) {
              leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {
                const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);
                leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
                el._leaveCb = () => {
                  earlyRemove();
                  el._leaveCb = void 0;
                  delete enterHooks.delayedLeave;
                };
                enterHooks.delayedLeave = delayedLeave;
              };
            }
          }
          return child;
        };
      }
    };
    const BaseTransition = BaseTransitionImpl;
    function getLeavingNodesForType(state, vnode) {
      const { leavingVNodes } = state;
      let leavingVNodesCache = leavingVNodes.get(vnode.type);
      if (!leavingVNodesCache) {
        leavingVNodesCache = /* @__PURE__ */ Object.create(null);
        leavingVNodes.set(vnode.type, leavingVNodesCache);
      }
      return leavingVNodesCache;
    }
    function resolveTransitionHooks(vnode, props, state, instance) {
      const { appear, mode, persisted = false, onBeforeEnter, onEnter, onAfterEnter, onEnterCancelled, onBeforeLeave, onLeave, onAfterLeave, onLeaveCancelled, onBeforeAppear, onAppear, onAfterAppear, onAppearCancelled } = props;
      const key = String(vnode.key);
      const leavingVNodesCache = getLeavingNodesForType(state, vnode);
      const callHook2 = (hook, args) => {
        hook && callWithAsyncErrorHandling(hook, instance, 9, args);
      };
      const callAsyncHook = (hook, args) => {
        const done = args[1];
        callHook2(hook, args);
        if (isArray(hook)) {
          if (hook.every((hook2) => hook2.length <= 1))
            done();
        } else if (hook.length <= 1) {
          done();
        }
      };
      const hooks = {
        mode,
        persisted,
        beforeEnter(el) {
          let hook = onBeforeEnter;
          if (!state.isMounted) {
            if (appear) {
              hook = onBeforeAppear || onBeforeEnter;
            } else {
              return;
            }
          }
          if (el._leaveCb) {
            el._leaveCb(true);
          }
          const leavingVNode = leavingVNodesCache[key];
          if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el._leaveCb) {
            leavingVNode.el._leaveCb();
          }
          callHook2(hook, [el]);
        },
        enter(el) {
          let hook = onEnter;
          let afterHook = onAfterEnter;
          let cancelHook = onEnterCancelled;
          if (!state.isMounted) {
            if (appear) {
              hook = onAppear || onEnter;
              afterHook = onAfterAppear || onAfterEnter;
              cancelHook = onAppearCancelled || onEnterCancelled;
            } else {
              return;
            }
          }
          let called = false;
          const done = el._enterCb = (cancelled) => {
            if (called)
              return;
            called = true;
            if (cancelled) {
              callHook2(cancelHook, [el]);
            } else {
              callHook2(afterHook, [el]);
            }
            if (hooks.delayedLeave) {
              hooks.delayedLeave();
            }
            el._enterCb = void 0;
          };
          if (hook) {
            callAsyncHook(hook, [el, done]);
          } else {
            done();
          }
        },
        leave(el, remove2) {
          const key2 = String(vnode.key);
          if (el._enterCb) {
            el._enterCb(true);
          }
          if (state.isUnmounting) {
            return remove2();
          }
          callHook2(onBeforeLeave, [el]);
          let called = false;
          const done = el._leaveCb = (cancelled) => {
            if (called)
              return;
            called = true;
            remove2();
            if (cancelled) {
              callHook2(onLeaveCancelled, [el]);
            } else {
              callHook2(onAfterLeave, [el]);
            }
            el._leaveCb = void 0;
            if (leavingVNodesCache[key2] === vnode) {
              delete leavingVNodesCache[key2];
            }
          };
          leavingVNodesCache[key2] = vnode;
          if (onLeave) {
            callAsyncHook(onLeave, [el, done]);
          } else {
            done();
          }
        },
        clone(vnode2) {
          return resolveTransitionHooks(vnode2, props, state, instance);
        }
      };
      return hooks;
    }
    function emptyPlaceholder(vnode) {
      if (isKeepAlive(vnode)) {
        vnode = cloneVNode(vnode);
        vnode.children = null;
        return vnode;
      }
    }
    function getKeepAliveChild(vnode) {
      return isKeepAlive(vnode) ? vnode.children ? vnode.children[0] : void 0 : vnode;
    }
    function setTransitionHooks(vnode, hooks) {
      if (vnode.shapeFlag & 6 && vnode.component) {
        setTransitionHooks(vnode.component.subTree, hooks);
      } else if (vnode.shapeFlag & 128) {
        vnode.ssContent.transition = hooks.clone(vnode.ssContent);
        vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
      } else {
        vnode.transition = hooks;
      }
    }
    function getTransitionRawChildren(children, keepComment = false, parentKey) {
      let ret = [];
      let keyedFragmentCount = 0;
      for (let i = 0; i < children.length; i++) {
        let child = children[i];
        const key = parentKey == null ? child.key : String(parentKey) + String(child.key != null ? child.key : i);
        if (child.type === Fragment) {
          if (child.patchFlag & 128)
            keyedFragmentCount++;
          ret = ret.concat(getTransitionRawChildren(child.children, keepComment, key));
        } else if (keepComment || child.type !== Comment2) {
          ret.push(key != null ? cloneVNode(child, { key }) : child);
        }
      }
      if (keyedFragmentCount > 1) {
        for (let i = 0; i < ret.length; i++) {
          ret[i].patchFlag = -2;
        }
      }
      return ret;
    }
    function defineComponent(options) {
      return isFunction(options) ? { setup: options, name: options.name } : options;
    }
    const isAsyncWrapper = (i) => !!i.type.__asyncLoader;
    function defineAsyncComponent(source) {
      if (isFunction(source)) {
        source = { loader: source };
      }
      const {
        loader,
        loadingComponent,
        errorComponent,
        delay = 200,
        timeout,
        suspensible = true,
        onError: userOnError
      } = source;
      let pendingRequest = null;
      let resolvedComp;
      let retries = 0;
      const retry = () => {
        retries++;
        pendingRequest = null;
        return load();
      };
      const load = () => {
        let thisRequest;
        return pendingRequest || (thisRequest = pendingRequest = loader().catch((err) => {
          err = err instanceof Error ? err : new Error(String(err));
          if (userOnError) {
            return new Promise((resolve2, reject) => {
              const userRetry = () => resolve2(retry());
              const userFail = () => reject(err);
              userOnError(err, userRetry, userFail, retries + 1);
            });
          } else {
            throw err;
          }
        }).then((comp) => {
          if (thisRequest !== pendingRequest && pendingRequest) {
            return pendingRequest;
          }
          if (!comp) {
            warn$1(`Async component loader resolved to undefined. If you are using retry(), make sure to return its return value.`);
          }
          if (comp && (comp.__esModule || comp[Symbol.toStringTag] === "Module")) {
            comp = comp.default;
          }
          if (comp && !isObject(comp) && !isFunction(comp)) {
            throw new Error(`Invalid async component load result: ${comp}`);
          }
          resolvedComp = comp;
          return comp;
        }));
      };
      return defineComponent({
        name: "AsyncComponentWrapper",
        __asyncLoader: load,
        get __asyncResolved() {
          return resolvedComp;
        },
        setup() {
          const instance = currentInstance;
          if (resolvedComp) {
            return () => createInnerComp(resolvedComp, instance);
          }
          const onError = (err) => {
            pendingRequest = null;
            handleError(err, instance, 13, !errorComponent);
          };
          if (suspensible && instance.suspense || false) {
            return load().then((comp) => {
              return () => createInnerComp(comp, instance);
            }).catch((err) => {
              onError(err);
              return () => errorComponent ? createVNode(errorComponent, {
                error: err
              }) : null;
            });
          }
          const loaded = ref(false);
          const error = ref();
          const delayed = ref(!!delay);
          if (delay) {
            setTimeout(() => {
              delayed.value = false;
            }, delay);
          }
          if (timeout != null) {
            setTimeout(() => {
              if (!loaded.value && !error.value) {
                const err = new Error(`Async component timed out after ${timeout}ms.`);
                onError(err);
                error.value = err;
              }
            }, timeout);
          }
          load().then(() => {
            loaded.value = true;
            if (instance.parent && isKeepAlive(instance.parent.vnode)) {
              queueJob(instance.parent.update);
            }
          }).catch((err) => {
            onError(err);
            error.value = err;
          });
          return () => {
            if (loaded.value && resolvedComp) {
              return createInnerComp(resolvedComp, instance);
            } else if (error.value && errorComponent) {
              return createVNode(errorComponent, {
                error: error.value
              });
            } else if (loadingComponent && !delayed.value) {
              return createVNode(loadingComponent);
            }
          };
        }
      });
    }
    function createInnerComp(comp, { vnode: { ref: ref2, props, children, shapeFlag }, parent }) {
      const vnode = createVNode(comp, props, children);
      vnode.ref = ref2;
      return vnode;
    }
    const isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
    const KeepAliveImpl = {
      name: `KeepAlive`,
      __isKeepAlive: true,
      props: {
        include: [String, RegExp, Array],
        exclude: [String, RegExp, Array],
        max: [String, Number]
      },
      setup(props, { slots }) {
        const instance = getCurrentInstance();
        const sharedContext = instance.ctx;
        const cache = /* @__PURE__ */ new Map();
        const keys = /* @__PURE__ */ new Set();
        let current = null;
        {
          instance.__v_cache = cache;
        }
        const parentSuspense = instance.suspense;
        const { renderer: { p: patch, m: move, um: _unmount, o: { createElement } } } = sharedContext;
        const storageContainer = createElement("div");
        sharedContext.activate = (vnode, container, anchor, isSVG, optimized) => {
          const instance2 = vnode.component;
          move(vnode, container, anchor, 0, parentSuspense);
          patch(instance2.vnode, vnode, container, anchor, instance2, parentSuspense, isSVG, vnode.slotScopeIds, optimized);
          queuePostRenderEffect(() => {
            instance2.isDeactivated = false;
            if (instance2.a) {
              invokeArrayFns(instance2.a);
            }
            const vnodeHook = vnode.props && vnode.props.onVnodeMounted;
            if (vnodeHook) {
              invokeVNodeHook(vnodeHook, instance2.parent, vnode);
            }
          }, parentSuspense);
          {
            devtoolsComponentAdded(instance2);
          }
        };
        sharedContext.deactivate = (vnode) => {
          const instance2 = vnode.component;
          move(vnode, storageContainer, null, 1, parentSuspense);
          queuePostRenderEffect(() => {
            if (instance2.da) {
              invokeArrayFns(instance2.da);
            }
            const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;
            if (vnodeHook) {
              invokeVNodeHook(vnodeHook, instance2.parent, vnode);
            }
            instance2.isDeactivated = true;
          }, parentSuspense);
          {
            devtoolsComponentAdded(instance2);
          }
        };
        function unmount(vnode) {
          resetShapeFlag(vnode);
          _unmount(vnode, instance, parentSuspense, true);
        }
        function pruneCache(filter) {
          cache.forEach((vnode, key) => {
            const name = getComponentName(vnode.type);
            if (name && (!filter || !filter(name))) {
              pruneCacheEntry(key);
            }
          });
        }
        function pruneCacheEntry(key) {
          const cached = cache.get(key);
          if (!current || cached.type !== current.type) {
            unmount(cached);
          } else if (current) {
            resetShapeFlag(current);
          }
          cache.delete(key);
          keys.delete(key);
        }
        watch(
          () => [props.include, props.exclude],
          ([include, exclude]) => {
            include && pruneCache((name) => matches(include, name));
            exclude && pruneCache((name) => !matches(exclude, name));
          },
          { flush: "post", deep: true }
        );
        let pendingCacheKey = null;
        const cacheSubtree = () => {
          if (pendingCacheKey != null) {
            cache.set(pendingCacheKey, getInnerChild(instance.subTree));
          }
        };
        onMounted(cacheSubtree);
        onUpdated(cacheSubtree);
        onBeforeUnmount(() => {
          cache.forEach((cached) => {
            const { subTree, suspense } = instance;
            const vnode = getInnerChild(subTree);
            if (cached.type === vnode.type) {
              resetShapeFlag(vnode);
              const da = vnode.component.da;
              da && queuePostRenderEffect(da, suspense);
              return;
            }
            unmount(cached);
          });
        });
        return () => {
          pendingCacheKey = null;
          if (!slots.default) {
            return null;
          }
          const children = slots.default();
          const rawVNode = children[0];
          if (children.length > 1) {
            {
              warn$1(`KeepAlive should contain exactly one component child.`);
            }
            current = null;
            return children;
          } else if (!isVNode(rawVNode) || !(rawVNode.shapeFlag & 4) && !(rawVNode.shapeFlag & 128)) {
            current = null;
            return rawVNode;
          }
          let vnode = getInnerChild(rawVNode);
          const comp = vnode.type;
          const name = getComponentName(isAsyncWrapper(vnode) ? vnode.type.__asyncResolved || {} : comp);
          const { include, exclude, max } = props;
          if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {
            current = vnode;
            return rawVNode;
          }
          const key = vnode.key == null ? comp : vnode.key;
          const cachedVNode = cache.get(key);
          if (vnode.el) {
            vnode = cloneVNode(vnode);
            if (rawVNode.shapeFlag & 128) {
              rawVNode.ssContent = vnode;
            }
          }
          pendingCacheKey = key;
          if (cachedVNode) {
            vnode.el = cachedVNode.el;
            vnode.component = cachedVNode.component;
            if (vnode.transition) {
              setTransitionHooks(vnode, vnode.transition);
            }
            vnode.shapeFlag |= 512;
            keys.delete(key);
            keys.add(key);
          } else {
            keys.add(key);
            if (max && keys.size > parseInt(max, 10)) {
              pruneCacheEntry(keys.values().next().value);
            }
          }
          vnode.shapeFlag |= 256;
          current = vnode;
          return isSuspense(rawVNode.type) ? rawVNode : vnode;
        };
      }
    };
    const KeepAlive = KeepAliveImpl;
    function matches(pattern, name) {
      if (isArray(pattern)) {
        return pattern.some((p2) => matches(p2, name));
      } else if (isString(pattern)) {
        return pattern.split(",").includes(name);
      } else if (pattern.test) {
        return pattern.test(name);
      }
      return false;
    }
    function onActivated(hook, target) {
      registerKeepAliveHook(hook, "a", target);
    }
    function onDeactivated(hook, target) {
      registerKeepAliveHook(hook, "da", target);
    }
    function registerKeepAliveHook(hook, type, target = currentInstance) {
      const wrappedHook = hook.__wdc || (hook.__wdc = () => {
        let current = target;
        while (current) {
          if (current.isDeactivated) {
            return;
          }
          current = current.parent;
        }
        return hook();
      });
      injectHook(type, wrappedHook, target);
      if (target) {
        let current = target.parent;
        while (current && current.parent) {
          if (isKeepAlive(current.parent.vnode)) {
            injectToKeepAliveRoot(wrappedHook, type, target, current);
          }
          current = current.parent;
        }
      }
    }
    function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
      const injected = injectHook(type, hook, keepAliveRoot, true);
      onUnmounted(() => {
        remove(keepAliveRoot[type], injected);
      }, target);
    }
    function resetShapeFlag(vnode) {
      let shapeFlag = vnode.shapeFlag;
      if (shapeFlag & 256) {
        shapeFlag -= 256;
      }
      if (shapeFlag & 512) {
        shapeFlag -= 512;
      }
      vnode.shapeFlag = shapeFlag;
    }
    function getInnerChild(vnode) {
      return vnode.shapeFlag & 128 ? vnode.ssContent : vnode;
    }
    function injectHook(type, hook, target = currentInstance, prepend = false) {
      if (target) {
        const hooks = target[type] || (target[type] = []);
        const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
          if (target.isUnmounted) {
            return;
          }
          pauseTracking();
          setCurrentInstance(target);
          const res = callWithAsyncErrorHandling(hook, target, type, args);
          unsetCurrentInstance();
          resetTracking();
          return res;
        });
        if (prepend) {
          hooks.unshift(wrappedHook);
        } else {
          hooks.push(wrappedHook);
        }
        return wrappedHook;
      } else {
        const apiName = toHandlerKey(ErrorTypeStrings[type].replace(/ hook$/, ""));
        warn$1(`${apiName} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`);
      }
    }
    const createHook = (lifecycle) => (hook, target = currentInstance) => (!isInSSRComponentSetup || lifecycle === "sp") && injectHook(lifecycle, hook, target);
    const onBeforeMount = createHook("bm");
    const onMounted = createHook("m");
    const onBeforeUpdate = createHook("bu");
    const onUpdated = createHook("u");
    const onBeforeUnmount = createHook("bum");
    const onUnmounted = createHook("um");
    const onServerPrefetch = createHook("sp");
    const onRenderTriggered = createHook("rtg");
    const onRenderTracked = createHook("rtc");
    function onErrorCaptured(hook, target = currentInstance) {
      injectHook("ec", hook, target);
    }
    function validateDirectiveName(name) {
      if (isBuiltInDirective(name)) {
        warn$1("Do not use built-in directive ids as custom directive id: " + name);
      }
    }
    function withDirectives(vnode, directives) {
      const internalInstance = currentRenderingInstance;
      if (internalInstance === null) {
        warn$1(`withDirectives can only be used inside render functions.`);
        return vnode;
      }
      const instance = getExposeProxy(internalInstance) || internalInstance.proxy;
      const bindings = vnode.dirs || (vnode.dirs = []);
      for (let i = 0; i < directives.length; i++) {
        let [dir, value, arg, modifiers = EMPTY_OBJ] = directives[i];
        if (isFunction(dir)) {
          dir = {
            mounted: dir,
            updated: dir
          };
        }
        if (dir.deep) {
          traverse(value);
        }
        bindings.push({
          dir,
          instance,
          value,
          oldValue: void 0,
          arg,
          modifiers
        });
      }
      return vnode;
    }
    function invokeDirectiveHook(vnode, prevVNode, instance, name) {
      const bindings = vnode.dirs;
      const oldBindings = prevVNode && prevVNode.dirs;
      for (let i = 0; i < bindings.length; i++) {
        const binding = bindings[i];
        if (oldBindings) {
          binding.oldValue = oldBindings[i].value;
        }
        let hook = binding.dir[name];
        if (hook) {
          pauseTracking();
          callWithAsyncErrorHandling(hook, instance, 8, [
            vnode.el,
            binding,
            vnode,
            prevVNode
          ]);
          resetTracking();
        }
      }
    }
    const COMPONENTS = "components";
    const DIRECTIVES = "directives";
    function resolveComponent(name, maybeSelfReference) {
      return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
    }
    const NULL_DYNAMIC_COMPONENT = Symbol();
    function resolveDynamicComponent(component) {
      if (isString(component)) {
        return resolveAsset(COMPONENTS, component, false) || component;
      } else {
        return component || NULL_DYNAMIC_COMPONENT;
      }
    }
    function resolveDirective(name) {
      return resolveAsset(DIRECTIVES, name);
    }
    function resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {
      const instance = currentRenderingInstance || currentInstance;
      if (instance) {
        const Component = instance.type;
        if (type === COMPONENTS) {
          const selfName = getComponentName(Component);
          if (selfName && (selfName === name || selfName === camelize(name) || selfName === capitalize(camelize(name)))) {
            return Component;
          }
        }
        const res = resolve(instance[type] || Component[type], name) || resolve(instance.appContext[type], name);
        if (!res && maybeSelfReference) {
          return Component;
        }
        if (warnMissing && !res) {
          const extra = type === COMPONENTS ? `
If this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.` : ``;
          warn$1(`Failed to resolve ${type.slice(0, -1)}: ${name}${extra}`);
        }
        return res;
      } else {
        warn$1(`resolve${capitalize(type.slice(0, -1))} can only be used in render() or setup().`);
      }
    }
    function resolve(registry, name) {
      return registry && (registry[name] || registry[camelize(name)] || registry[capitalize(camelize(name))]);
    }
    function renderList(source, renderItem, cache, index) {
      let ret;
      const cached = cache && cache[index];
      if (isArray(source) || isString(source)) {
        ret = new Array(source.length);
        for (let i = 0, l = source.length; i < l; i++) {
          ret[i] = renderItem(source[i], i, void 0, cached && cached[i]);
        }
      } else if (typeof source === "number") {
        if (!Number.isInteger(source)) {
          warn$1(`The v-for range expect an integer value but got ${source}.`);
        }
        ret = new Array(source);
        for (let i = 0; i < source; i++) {
          ret[i] = renderItem(i + 1, i, void 0, cached && cached[i]);
        }
      } else if (isObject(source)) {
        if (source[Symbol.iterator]) {
          ret = Array.from(source, (item, i) => renderItem(item, i, void 0, cached && cached[i]));
        } else {
          const keys = Object.keys(source);
          ret = new Array(keys.length);
          for (let i = 0, l = keys.length; i < l; i++) {
            const key = keys[i];
            ret[i] = renderItem(source[key], key, i, cached && cached[i]);
          }
        }
      } else {
        ret = [];
      }
      if (cache) {
        cache[index] = ret;
      }
      return ret;
    }
    function createSlots(slots, dynamicSlots) {
      for (let i = 0; i < dynamicSlots.length; i++) {
        const slot = dynamicSlots[i];
        if (isArray(slot)) {
          for (let j = 0; j < slot.length; j++) {
            slots[slot[j].name] = slot[j].fn;
          }
        } else if (slot) {
          slots[slot.name] = slot.fn;
        }
      }
      return slots;
    }
    function renderSlot(slots, name, props = {}, fallback, noSlotted) {
      if (currentRenderingInstance.isCE || currentRenderingInstance.parent && isAsyncWrapper(currentRenderingInstance.parent) && currentRenderingInstance.parent.isCE) {
        return createVNode("slot", name === "default" ? null : { name }, fallback && fallback());
      }
      let slot = slots[name];
      if (slot && slot.length > 1) {
        warn$1(`SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template.`);
        slot = () => [];
      }
      if (slot && slot._c) {
        slot._d = false;
      }
      openBlock();
      const validSlotContent = slot && ensureValidVNode(slot(props));
      const rendered = createBlock(Fragment, { key: props.key || `_${name}` }, validSlotContent || (fallback ? fallback() : []), validSlotContent && slots._ === 1 ? 64 : -2);
      if (!noSlotted && rendered.scopeId) {
        rendered.slotScopeIds = [rendered.scopeId + "-s"];
      }
      if (slot && slot._c) {
        slot._d = true;
      }
      return rendered;
    }
    function ensureValidVNode(vnodes) {
      return vnodes.some((child) => {
        if (!isVNode(child))
          return true;
        if (child.type === Comment2)
          return false;
        if (child.type === Fragment && !ensureValidVNode(child.children))
          return false;
        return true;
      }) ? vnodes : null;
    }
    function toHandlers(obj) {
      const ret = {};
      if (!isObject(obj)) {
        warn$1(`v-on with no argument expects an object value.`);
        return ret;
      }
      for (const key in obj) {
        ret[toHandlerKey(key)] = obj[key];
      }
      return ret;
    }
    const getPublicInstance = (i) => {
      if (!i)
        return null;
      if (isStatefulComponent(i))
        return getExposeProxy(i) || i.proxy;
      return getPublicInstance(i.parent);
    };
    const publicPropertiesMap = /* @__PURE__ */ extend(/* @__PURE__ */ Object.create(null), {
      $: (i) => i,
      $el: (i) => i.vnode.el,
      $data: (i) => i.data,
      $props: (i) => shallowReadonly(i.props),
      $attrs: (i) => shallowReadonly(i.attrs),
      $slots: (i) => shallowReadonly(i.slots),
      $refs: (i) => shallowReadonly(i.refs),
      $parent: (i) => getPublicInstance(i.parent),
      $root: (i) => getPublicInstance(i.root),
      $emit: (i) => i.emit,
      $options: (i) => resolveMergedOptions(i),
      $forceUpdate: (i) => i.f || (i.f = () => queueJob(i.update)),
      $nextTick: (i) => i.n || (i.n = nextTick.bind(i.proxy)),
      $watch: (i) => instanceWatch.bind(i)
    });
    const isReservedPrefix = (key) => key === "_" || key === "$";
    const PublicInstanceProxyHandlers = {
      get({ _: instance }, key) {
        const { ctx, setupState, data, props, accessCache, type, appContext } = instance;
        if (key === "__isVue") {
          return true;
        }
        if (setupState !== EMPTY_OBJ && setupState.__isScriptSetup && hasOwn(setupState, key)) {
          return setupState[key];
        }
        let normalizedProps;
        if (key[0] !== "$") {
          const n = accessCache[key];
          if (n !== void 0) {
            switch (n) {
              case 1:
                return setupState[key];
              case 2:
                return data[key];
              case 4:
                return ctx[key];
              case 3:
                return props[key];
            }
          } else if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {
            accessCache[key] = 1;
            return setupState[key];
          } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
            accessCache[key] = 2;
            return data[key];
          } else if ((normalizedProps = instance.propsOptions[0]) && hasOwn(normalizedProps, key)) {
            accessCache[key] = 3;
            return props[key];
          } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
            accessCache[key] = 4;
            return ctx[key];
          } else if (shouldCacheAccess) {
            accessCache[key] = 0;
          }
        }
        const publicGetter = publicPropertiesMap[key];
        let cssModule, globalProperties;
        if (publicGetter) {
          if (key === "$attrs") {
            track(instance, "get", key);
            markAttrsAccessed();
          }
          return publicGetter(instance);
        } else if ((cssModule = type.__cssModules) && (cssModule = cssModule[key])) {
          return cssModule;
        } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
          accessCache[key] = 4;
          return ctx[key];
        } else if (globalProperties = appContext.config.globalProperties, hasOwn(globalProperties, key)) {
          {
            return globalProperties[key];
          }
        } else if (currentRenderingInstance && (!isString(key) || key.indexOf("__v") !== 0)) {
          if (data !== EMPTY_OBJ && isReservedPrefix(key[0]) && hasOwn(data, key)) {
            warn$1(`Property ${JSON.stringify(key)} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`);
          } else if (instance === currentRenderingInstance) {
            warn$1(`Property ${JSON.stringify(key)} was accessed during render but is not defined on instance.`);
          }
        }
      },
      set({ _: instance }, key, value) {
        const { data, setupState, ctx } = instance;
        if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {
          setupState[key] = value;
          return true;
        } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
          data[key] = value;
          return true;
        } else if (hasOwn(instance.props, key)) {
          warn$1(`Attempting to mutate prop "${key}". Props are readonly.`, instance);
          return false;
        }
        if (key[0] === "$" && key.slice(1) in instance) {
          warn$1(`Attempting to mutate public property "${key}". Properties starting with $ are reserved and readonly.`, instance);
          return false;
        } else {
          if (key in instance.appContext.config.globalProperties) {
            Object.defineProperty(ctx, key, {
              enumerable: true,
              configurable: true,
              value
            });
          } else {
            ctx[key] = value;
          }
        }
        return true;
      },
      has({ _: { data, setupState, accessCache, ctx, appContext, propsOptions } }, key) {
        let normalizedProps;
        return !!accessCache[key] || data !== EMPTY_OBJ && hasOwn(data, key) || setupState !== EMPTY_OBJ && hasOwn(setupState, key) || (normalizedProps = propsOptions[0]) && hasOwn(normalizedProps, key) || hasOwn(ctx, key) || hasOwn(publicPropertiesMap, key) || hasOwn(appContext.config.globalProperties, key);
      },
      defineProperty(target, key, descriptor) {
        if (descriptor.get != null) {
          target._.accessCache[key] = 0;
        } else if (hasOwn(descriptor, "value")) {
          this.set(target, key, descriptor.value, null);
        }
        return Reflect.defineProperty(target, key, descriptor);
      }
    };
    {
      PublicInstanceProxyHandlers.ownKeys = (target) => {
        warn$1(`Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead.`);
        return Reflect.ownKeys(target);
      };
    }
    const RuntimeCompiledPublicInstanceProxyHandlers = /* @__PURE__ */ extend({}, PublicInstanceProxyHandlers, {
      get(target, key) {
        if (key === Symbol.unscopables) {
          return;
        }
        return PublicInstanceProxyHandlers.get(target, key, target);
      },
      has(_, key) {
        const has2 = key[0] !== "_" && !isGloballyWhitelisted(key);
        if (!has2 && PublicInstanceProxyHandlers.has(_, key)) {
          warn$1(`Property ${JSON.stringify(key)} should not start with _ which is a reserved prefix for Vue internals.`);
        }
        return has2;
      }
    });
    function createDevRenderContext(instance) {
      const target = {};
      Object.defineProperty(target, `_`, {
        configurable: true,
        enumerable: false,
        get: () => instance
      });
      Object.keys(publicPropertiesMap).forEach((key) => {
        Object.defineProperty(target, key, {
          configurable: true,
          enumerable: false,
          get: () => publicPropertiesMap[key](instance),
          set: NOOP
        });
      });
      return target;
    }
    function exposePropsOnRenderContext(instance) {
      const { ctx, propsOptions: [propsOptions] } = instance;
      if (propsOptions) {
        Object.keys(propsOptions).forEach((key) => {
          Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            get: () => instance.props[key],
            set: NOOP
          });
        });
      }
    }
    function exposeSetupStateOnRenderContext(instance) {
      const { ctx, setupState } = instance;
      Object.keys(toRaw(setupState)).forEach((key) => {
        if (!setupState.__isScriptSetup) {
          if (isReservedPrefix(key[0])) {
            warn$1(`setup() return property ${JSON.stringify(key)} should not start with "$" or "_" which are reserved prefixes for Vue internals.`);
            return;
          }
          Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            get: () => setupState[key],
            set: NOOP
          });
        }
      });
    }
    function createDuplicateChecker() {
      const cache = /* @__PURE__ */ Object.create(null);
      return (type, key) => {
        if (cache[key]) {
          warn$1(`${type} property "${key}" is already defined in ${cache[key]}.`);
        } else {
          cache[key] = type;
        }
      };
    }
    let shouldCacheAccess = true;
    function applyOptions(instance) {
      const options = resolveMergedOptions(instance);
      const publicThis = instance.proxy;
      const ctx = instance.ctx;
      shouldCacheAccess = false;
      if (options.beforeCreate) {
        callHook(options.beforeCreate, instance, "bc");
      }
      const {
        data: dataOptions,
        computed: computedOptions,
        methods,
        watch: watchOptions,
        provide: provideOptions,
        inject: injectOptions,
        created,
        beforeMount,
        mounted,
        beforeUpdate,
        updated,
        activated,
        deactivated,
        beforeDestroy,
        beforeUnmount,
        destroyed,
        unmounted,
        render: render2,
        renderTracked,
        renderTriggered,
        errorCaptured,
        serverPrefetch,
        expose,
        inheritAttrs,
        components,
        directives,
        filters
      } = options;
      const checkDuplicateProperties = createDuplicateChecker();
      {
        const [propsOptions] = instance.propsOptions;
        if (propsOptions) {
          for (const key in propsOptions) {
            checkDuplicateProperties("Props", key);
          }
        }
      }
      if (injectOptions) {
        resolveInjections(injectOptions, ctx, checkDuplicateProperties, instance.appContext.config.unwrapInjectedRef);
      }
      if (methods) {
        for (const key in methods) {
          const methodHandler = methods[key];
          if (isFunction(methodHandler)) {
            {
              Object.defineProperty(ctx, key, {
                value: methodHandler.bind(publicThis),
                configurable: true,
                enumerable: true,
                writable: true
              });
            }
            {
              checkDuplicateProperties("Methods", key);
            }
          } else {
            warn$1(`Method "${key}" has type "${typeof methodHandler}" in the component definition. Did you reference the function correctly?`);
          }
        }
      }
      if (dataOptions) {
        if (!isFunction(dataOptions)) {
          warn$1(`The data option must be a function. Plain object usage is no longer supported.`);
        }
        const data = dataOptions.call(publicThis, publicThis);
        if (isPromise(data)) {
          warn$1(`data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>.`);
        }
        if (!isObject(data)) {
          warn$1(`data() should return an object.`);
        } else {
          instance.data = reactive(data);
          {
            for (const key in data) {
              checkDuplicateProperties("Data", key);
              if (!isReservedPrefix(key[0])) {
                Object.defineProperty(ctx, key, {
                  configurable: true,
                  enumerable: true,
                  get: () => data[key],
                  set: NOOP
                });
              }
            }
          }
        }
      }
      shouldCacheAccess = true;
      if (computedOptions) {
        for (const key in computedOptions) {
          const opt = computedOptions[key];
          const get2 = isFunction(opt) ? opt.bind(publicThis, publicThis) : isFunction(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP;
          if (get2 === NOOP) {
            warn$1(`Computed property "${key}" has no getter.`);
          }
          const set2 = !isFunction(opt) && isFunction(opt.set) ? opt.set.bind(publicThis) : () => {
            warn$1(`Write operation failed: computed property "${key}" is readonly.`);
          };
          const c = computed$1({
            get: get2,
            set: set2
          });
          Object.defineProperty(ctx, key, {
            enumerable: true,
            configurable: true,
            get: () => c.value,
            set: (v) => c.value = v
          });
          {
            checkDuplicateProperties("Computed", key);
          }
        }
      }
      if (watchOptions) {
        for (const key in watchOptions) {
          createWatcher(watchOptions[key], ctx, publicThis, key);
        }
      }
      if (provideOptions) {
        const provides = isFunction(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
        Reflect.ownKeys(provides).forEach((key) => {
          provide(key, provides[key]);
        });
      }
      if (created) {
        callHook(created, instance, "c");
      }
      function registerLifecycleHook(register, hook) {
        if (isArray(hook)) {
          hook.forEach((_hook) => register(_hook.bind(publicThis)));
        } else if (hook) {
          register(hook.bind(publicThis));
        }
      }
      registerLifecycleHook(onBeforeMount, beforeMount);
      registerLifecycleHook(onMounted, mounted);
      registerLifecycleHook(onBeforeUpdate, beforeUpdate);
      registerLifecycleHook(onUpdated, updated);
      registerLifecycleHook(onActivated, activated);
      registerLifecycleHook(onDeactivated, deactivated);
      registerLifecycleHook(onErrorCaptured, errorCaptured);
      registerLifecycleHook(onRenderTracked, renderTracked);
      registerLifecycleHook(onRenderTriggered, renderTriggered);
      registerLifecycleHook(onBeforeUnmount, beforeUnmount);
      registerLifecycleHook(onUnmounted, unmounted);
      registerLifecycleHook(onServerPrefetch, serverPrefetch);
      if (isArray(expose)) {
        if (expose.length) {
          const exposed = instance.exposed || (instance.exposed = {});
          expose.forEach((key) => {
            Object.defineProperty(exposed, key, {
              get: () => publicThis[key],
              set: (val) => publicThis[key] = val
            });
          });
        } else if (!instance.exposed) {
          instance.exposed = {};
        }
      }
      if (render2 && instance.render === NOOP) {
        instance.render = render2;
      }
      if (inheritAttrs != null) {
        instance.inheritAttrs = inheritAttrs;
      }
      if (components)
        instance.components = components;
      if (directives)
        instance.directives = directives;
    }
    function resolveInjections(injectOptions, ctx, checkDuplicateProperties = NOOP, unwrapRef = false) {
      if (isArray(injectOptions)) {
        injectOptions = normalizeInject(injectOptions);
      }
      for (const key in injectOptions) {
        const opt = injectOptions[key];
        let injected;
        if (isObject(opt)) {
          if ("default" in opt) {
            injected = inject(opt.from || key, opt.default, true);
          } else {
            injected = inject(opt.from || key);
          }
        } else {
          injected = inject(opt);
        }
        if (isRef(injected)) {
          if (unwrapRef) {
            Object.defineProperty(ctx, key, {
              enumerable: true,
              configurable: true,
              get: () => injected.value,
              set: (v) => injected.value = v
            });
          } else {
            {
              warn$1(`injected property "${key}" is a ref and will be auto-unwrapped and no longer needs \`.value\` in the next minor release. To opt-in to the new behavior now, set \`app.config.unwrapInjectedRef = true\` (this config is temporary and will not be needed in the future.)`);
            }
            ctx[key] = injected;
          }
        } else {
          ctx[key] = injected;
        }
        {
          checkDuplicateProperties("Inject", key);
        }
      }
    }
    function callHook(hook, instance, type) {
      callWithAsyncErrorHandling(isArray(hook) ? hook.map((h2) => h2.bind(instance.proxy)) : hook.bind(instance.proxy), instance, type);
    }
    function createWatcher(raw, ctx, publicThis, key) {
      const getter = key.includes(".") ? createPathGetter(publicThis, key) : () => publicThis[key];
      if (isString(raw)) {
        const handler = ctx[raw];
        if (isFunction(handler)) {
          watch(getter, handler);
        } else {
          warn$1(`Invalid watch handler specified by key "${raw}"`, handler);
        }
      } else if (isFunction(raw)) {
        watch(getter, raw.bind(publicThis));
      } else if (isObject(raw)) {
        if (isArray(raw)) {
          raw.forEach((r) => createWatcher(r, ctx, publicThis, key));
        } else {
          const handler = isFunction(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
          if (isFunction(handler)) {
            watch(getter, handler, raw);
          } else {
            warn$1(`Invalid watch handler specified by key "${raw.handler}"`, handler);
          }
        }
      } else {
        warn$1(`Invalid watch option: "${key}"`, raw);
      }
    }
    function resolveMergedOptions(instance) {
      const base = instance.type;
      const { mixins, extends: extendsOptions } = base;
      const { mixins: globalMixins, optionsCache: cache, config: { optionMergeStrategies } } = instance.appContext;
      const cached = cache.get(base);
      let resolved;
      if (cached) {
        resolved = cached;
      } else if (!globalMixins.length && !mixins && !extendsOptions) {
        {
          resolved = base;
        }
      } else {
        resolved = {};
        if (globalMixins.length) {
          globalMixins.forEach((m) => mergeOptions(resolved, m, optionMergeStrategies, true));
        }
        mergeOptions(resolved, base, optionMergeStrategies);
      }
      cache.set(base, resolved);
      return resolved;
    }
    function mergeOptions(to, from, strats, asMixin = false) {
      const { mixins, extends: extendsOptions } = from;
      if (extendsOptions) {
        mergeOptions(to, extendsOptions, strats, true);
      }
      if (mixins) {
        mixins.forEach((m) => mergeOptions(to, m, strats, true));
      }
      for (const key in from) {
        if (asMixin && key === "expose") {
          warn$1(`"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.`);
        } else {
          const strat = internalOptionMergeStrats[key] || strats && strats[key];
          to[key] = strat ? strat(to[key], from[key]) : from[key];
        }
      }
      return to;
    }
    const internalOptionMergeStrats = {
      data: mergeDataFn,
      props: mergeObjectOptions,
      emits: mergeObjectOptions,
      methods: mergeObjectOptions,
      computed: mergeObjectOptions,
      beforeCreate: mergeAsArray,
      created: mergeAsArray,
      beforeMount: mergeAsArray,
      mounted: mergeAsArray,
      beforeUpdate: mergeAsArray,
      updated: mergeAsArray,
      beforeDestroy: mergeAsArray,
      beforeUnmount: mergeAsArray,
      destroyed: mergeAsArray,
      unmounted: mergeAsArray,
      activated: mergeAsArray,
      deactivated: mergeAsArray,
      errorCaptured: mergeAsArray,
      serverPrefetch: mergeAsArray,
      components: mergeObjectOptions,
      directives: mergeObjectOptions,
      watch: mergeWatchOptions,
      provide: mergeDataFn,
      inject: mergeInject
    };
    function mergeDataFn(to, from) {
      if (!from) {
        return to;
      }
      if (!to) {
        return from;
      }
      return function mergedDataFn() {
        return extend(isFunction(to) ? to.call(this, this) : to, isFunction(from) ? from.call(this, this) : from);
      };
    }
    function mergeInject(to, from) {
      return mergeObjectOptions(normalizeInject(to), normalizeInject(from));
    }
    function normalizeInject(raw) {
      if (isArray(raw)) {
        const res = {};
        for (let i = 0; i < raw.length; i++) {
          res[raw[i]] = raw[i];
        }
        return res;
      }
      return raw;
    }
    function mergeAsArray(to, from) {
      return to ? [...new Set([].concat(to, from))] : from;
    }
    function mergeObjectOptions(to, from) {
      return to ? extend(extend(/* @__PURE__ */ Object.create(null), to), from) : from;
    }
    function mergeWatchOptions(to, from) {
      if (!to)
        return from;
      if (!from)
        return to;
      const merged = extend(/* @__PURE__ */ Object.create(null), to);
      for (const key in from) {
        merged[key] = mergeAsArray(to[key], from[key]);
      }
      return merged;
    }
    function initProps(instance, rawProps, isStateful, isSSR = false) {
      const props = {};
      const attrs = {};
      def(attrs, InternalObjectKey, 1);
      instance.propsDefaults = /* @__PURE__ */ Object.create(null);
      setFullProps(instance, rawProps, props, attrs);
      for (const key in instance.propsOptions[0]) {
        if (!(key in props)) {
          props[key] = void 0;
        }
      }
      {
        validateProps(rawProps || {}, props, instance);
      }
      if (isStateful) {
        instance.props = isSSR ? props : shallowReactive(props);
      } else {
        if (!instance.type.props) {
          instance.props = attrs;
        } else {
          instance.props = props;
        }
      }
      instance.attrs = attrs;
    }
    function updateProps(instance, rawProps, rawPrevProps, optimized) {
      const { props, attrs, vnode: { patchFlag } } = instance;
      const rawCurrentProps = toRaw(props);
      const [options] = instance.propsOptions;
      let hasAttrsChanged = false;
      if (!(instance.type.__hmrId || instance.parent && instance.parent.type.__hmrId) && (optimized || patchFlag > 0) && !(patchFlag & 16)) {
        if (patchFlag & 8) {
          const propsToUpdate = instance.vnode.dynamicProps;
          for (let i = 0; i < propsToUpdate.length; i++) {
            let key = propsToUpdate[i];
            if (isEmitListener(instance.emitsOptions, key)) {
              continue;
            }
            const value = rawProps[key];
            if (options) {
              if (hasOwn(attrs, key)) {
                if (value !== attrs[key]) {
                  attrs[key] = value;
                  hasAttrsChanged = true;
                }
              } else {
                const camelizedKey = camelize(key);
                props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance, false);
              }
            } else {
              if (value !== attrs[key]) {
                attrs[key] = value;
                hasAttrsChanged = true;
              }
            }
          }
        }
      } else {
        if (setFullProps(instance, rawProps, props, attrs)) {
          hasAttrsChanged = true;
        }
        let kebabKey;
        for (const key in rawCurrentProps) {
          if (!rawProps || !hasOwn(rawProps, key) && ((kebabKey = hyphenate(key)) === key || !hasOwn(rawProps, kebabKey))) {
            if (options) {
              if (rawPrevProps && (rawPrevProps[key] !== void 0 || rawPrevProps[kebabKey] !== void 0)) {
                props[key] = resolvePropValue(options, rawCurrentProps, key, void 0, instance, true);
              }
            } else {
              delete props[key];
            }
          }
        }
        if (attrs !== rawCurrentProps) {
          for (const key in attrs) {
            if (!rawProps || !hasOwn(rawProps, key) && true) {
              delete attrs[key];
              hasAttrsChanged = true;
            }
          }
        }
      }
      if (hasAttrsChanged) {
        trigger(instance, "set", "$attrs");
      }
      {
        validateProps(rawProps || {}, props, instance);
      }
    }
    function setFullProps(instance, rawProps, props, attrs) {
      const [options, needCastKeys] = instance.propsOptions;
      let hasAttrsChanged = false;
      let rawCastValues;
      if (rawProps) {
        for (let key in rawProps) {
          if (isReservedProp(key)) {
            continue;
          }
          const value = rawProps[key];
          let camelKey;
          if (options && hasOwn(options, camelKey = camelize(key))) {
            if (!needCastKeys || !needCastKeys.includes(camelKey)) {
              props[camelKey] = value;
            } else {
              (rawCastValues || (rawCastValues = {}))[camelKey] = value;
            }
          } else if (!isEmitListener(instance.emitsOptions, key)) {
            if (!(key in attrs) || value !== attrs[key]) {
              attrs[key] = value;
              hasAttrsChanged = true;
            }
          }
        }
      }
      if (needCastKeys) {
        const rawCurrentProps = toRaw(props);
        const castValues = rawCastValues || EMPTY_OBJ;
        for (let i = 0; i < needCastKeys.length; i++) {
          const key = needCastKeys[i];
          props[key] = resolvePropValue(options, rawCurrentProps, key, castValues[key], instance, !hasOwn(castValues, key));
        }
      }
      return hasAttrsChanged;
    }
    function resolvePropValue(options, props, key, value, instance, isAbsent) {
      const opt = options[key];
      if (opt != null) {
        const hasDefault = hasOwn(opt, "default");
        if (hasDefault && value === void 0) {
          const defaultValue = opt.default;
          if (opt.type !== Function && isFunction(defaultValue)) {
            const { propsDefaults } = instance;
            if (key in propsDefaults) {
              value = propsDefaults[key];
            } else {
              setCurrentInstance(instance);
              value = propsDefaults[key] = defaultValue.call(null, props);
              unsetCurrentInstance();
            }
          } else {
            value = defaultValue;
          }
        }
        if (opt[0]) {
          if (isAbsent && !hasDefault) {
            value = false;
          } else if (opt[1] && (value === "" || value === hyphenate(key))) {
            value = true;
          }
        }
      }
      return value;
    }
    function normalizePropsOptions(comp, appContext, asMixin = false) {
      const cache = appContext.propsCache;
      const cached = cache.get(comp);
      if (cached) {
        return cached;
      }
      const raw = comp.props;
      const normalized = {};
      const needCastKeys = [];
      let hasExtends = false;
      if (!isFunction(comp)) {
        const extendProps = (raw2) => {
          hasExtends = true;
          const [props, keys] = normalizePropsOptions(raw2, appContext, true);
          extend(normalized, props);
          if (keys)
            needCastKeys.push(...keys);
        };
        if (!asMixin && appContext.mixins.length) {
          appContext.mixins.forEach(extendProps);
        }
        if (comp.extends) {
          extendProps(comp.extends);
        }
        if (comp.mixins) {
          comp.mixins.forEach(extendProps);
        }
      }
      if (!raw && !hasExtends) {
        cache.set(comp, EMPTY_ARR);
        return EMPTY_ARR;
      }
      if (isArray(raw)) {
        for (let i = 0; i < raw.length; i++) {
          if (!isString(raw[i])) {
            warn$1(`props must be strings when using array syntax.`, raw[i]);
          }
          const normalizedKey = camelize(raw[i]);
          if (validatePropName(normalizedKey)) {
            normalized[normalizedKey] = EMPTY_OBJ;
          }
        }
      } else if (raw) {
        if (!isObject(raw)) {
          warn$1(`invalid props options`, raw);
        }
        for (const key in raw) {
          const normalizedKey = camelize(key);
          if (validatePropName(normalizedKey)) {
            const opt = raw[key];
            const prop = normalized[normalizedKey] = isArray(opt) || isFunction(opt) ? { type: opt } : opt;
            if (prop) {
              const booleanIndex = getTypeIndex(Boolean, prop.type);
              const stringIndex = getTypeIndex(String, prop.type);
              prop[0] = booleanIndex > -1;
              prop[1] = stringIndex < 0 || booleanIndex < stringIndex;
              if (booleanIndex > -1 || hasOwn(prop, "default")) {
                needCastKeys.push(normalizedKey);
              }
            }
          }
        }
      }
      const res = [normalized, needCastKeys];
      cache.set(comp, res);
      return res;
    }
    function validatePropName(key) {
      if (key[0] !== "$") {
        return true;
      } else {
        warn$1(`Invalid prop name: "${key}" is a reserved property.`);
      }
      return false;
    }
    function getType(ctor) {
      const match = ctor && ctor.toString().match(/^\s*function (\w+)/);
      return match ? match[1] : ctor === null ? "null" : "";
    }
    function isSameType(a, b2) {
      return getType(a) === getType(b2);
    }
    function getTypeIndex(type, expectedTypes) {
      if (isArray(expectedTypes)) {
        return expectedTypes.findIndex((t) => isSameType(t, type));
      } else if (isFunction(expectedTypes)) {
        return isSameType(expectedTypes, type) ? 0 : -1;
      }
      return -1;
    }
    function validateProps(rawProps, props, instance) {
      const resolvedValues = toRaw(props);
      const options = instance.propsOptions[0];
      for (const key in options) {
        let opt = options[key];
        if (opt == null)
          continue;
        validateProp(key, resolvedValues[key], opt, !hasOwn(rawProps, key) && !hasOwn(rawProps, hyphenate(key)));
      }
    }
    function validateProp(name, value, prop, isAbsent) {
      const { type, required, validator } = prop;
      if (required && isAbsent) {
        warn$1('Missing required prop: "' + name + '"');
        return;
      }
      if (value == null && !prop.required) {
        return;
      }
      if (type != null && type !== true) {
        let isValid = false;
        const types = isArray(type) ? type : [type];
        const expectedTypes = [];
        for (let i = 0; i < types.length && !isValid; i++) {
          const { valid, expectedType } = assertType(value, types[i]);
          expectedTypes.push(expectedType || "");
          isValid = valid;
        }
        if (!isValid) {
          warn$1(getInvalidTypeMessage(name, value, expectedTypes));
          return;
        }
      }
      if (validator && !validator(value)) {
        warn$1('Invalid prop: custom validator check failed for prop "' + name + '".');
      }
    }
    const isSimpleType = /* @__PURE__ */ makeMap("String,Number,Boolean,Function,Symbol,BigInt");
    function assertType(value, type) {
      let valid;
      const expectedType = getType(type);
      if (isSimpleType(expectedType)) {
        const t = typeof value;
        valid = t === expectedType.toLowerCase();
        if (!valid && t === "object") {
          valid = value instanceof type;
        }
      } else if (expectedType === "Object") {
        valid = isObject(value);
      } else if (expectedType === "Array") {
        valid = isArray(value);
      } else if (expectedType === "null") {
        valid = value === null;
      } else {
        valid = value instanceof type;
      }
      return {
        valid,
        expectedType
      };
    }
    function getInvalidTypeMessage(name, value, expectedTypes) {
      let message = `Invalid prop: type check failed for prop "${name}". Expected ${expectedTypes.map(capitalize).join(" | ")}`;
      const expectedType = expectedTypes[0];
      const receivedType = toRawType(value);
      const expectedValue = styleValue(value, expectedType);
      const receivedValue = styleValue(value, receivedType);
      if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {
        message += ` with value ${expectedValue}`;
      }
      message += `, got ${receivedType} `;
      if (isExplicable(receivedType)) {
        message += `with value ${receivedValue}.`;
      }
      return message;
    }
    function styleValue(value, type) {
      if (type === "String") {
        return `"${value}"`;
      } else if (type === "Number") {
        return `${Number(value)}`;
      } else {
        return `${value}`;
      }
    }
    function isExplicable(type) {
      const explicitTypes = ["string", "number", "boolean"];
      return explicitTypes.some((elem) => type.toLowerCase() === elem);
    }
    function isBoolean(...args) {
      return args.some((elem) => elem.toLowerCase() === "boolean");
    }
    const isInternalKey = (key) => key[0] === "_" || key === "$stable";
    const normalizeSlotValue = (value) => isArray(value) ? value.map(normalizeVNode) : [normalizeVNode(value)];
    const normalizeSlot = (key, rawSlot, ctx) => {
      if (rawSlot._n) {
        return rawSlot;
      }
      const normalized = withCtx((...args) => {
        if (currentInstance) {
          warn$1(`Slot "${key}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`);
        }
        return normalizeSlotValue(rawSlot(...args));
      }, ctx);
      normalized._c = false;
      return normalized;
    };
    const normalizeObjectSlots = (rawSlots, slots, instance) => {
      const ctx = rawSlots._ctx;
      for (const key in rawSlots) {
        if (isInternalKey(key))
          continue;
        const value = rawSlots[key];
        if (isFunction(value)) {
          slots[key] = normalizeSlot(key, value, ctx);
        } else if (value != null) {
          {
            warn$1(`Non-function value encountered for slot "${key}". Prefer function slots for better performance.`);
          }
          const normalized = normalizeSlotValue(value);
          slots[key] = () => normalized;
        }
      }
    };
    const normalizeVNodeSlots = (instance, children) => {
      if (!isKeepAlive(instance.vnode) && true) {
        warn$1(`Non-function value encountered for default slot. Prefer function slots for better performance.`);
      }
      const normalized = normalizeSlotValue(children);
      instance.slots.default = () => normalized;
    };
    const initSlots = (instance, children) => {
      if (instance.vnode.shapeFlag & 32) {
        const type = children._;
        if (type) {
          instance.slots = toRaw(children);
          def(children, "_", type);
        } else {
          normalizeObjectSlots(children, instance.slots = {});
        }
      } else {
        instance.slots = {};
        if (children) {
          normalizeVNodeSlots(instance, children);
        }
      }
      def(instance.slots, InternalObjectKey, 1);
    };
    const updateSlots = (instance, children, optimized) => {
      const { vnode, slots } = instance;
      let needDeletionCheck = true;
      let deletionComparisonTarget = EMPTY_OBJ;
      if (vnode.shapeFlag & 32) {
        const type = children._;
        if (type) {
          if (isHmrUpdating) {
            extend(slots, children);
          } else if (optimized && type === 1) {
            needDeletionCheck = false;
          } else {
            extend(slots, children);
            if (!optimized && type === 1) {
              delete slots._;
            }
          }
        } else {
          needDeletionCheck = !children.$stable;
          normalizeObjectSlots(children, slots);
        }
        deletionComparisonTarget = children;
      } else if (children) {
        normalizeVNodeSlots(instance, children);
        deletionComparisonTarget = { default: 1 };
      }
      if (needDeletionCheck) {
        for (const key in slots) {
          if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {
            delete slots[key];
          }
        }
      }
    };
    function createAppContext() {
      return {
        app: null,
        config: {
          isNativeTag: NO,
          performance: false,
          globalProperties: {},
          optionMergeStrategies: {},
          errorHandler: void 0,
          warnHandler: void 0,
          compilerOptions: {}
        },
        mixins: [],
        components: {},
        directives: {},
        provides: /* @__PURE__ */ Object.create(null),
        optionsCache: /* @__PURE__ */ new WeakMap(),
        propsCache: /* @__PURE__ */ new WeakMap(),
        emitsCache: /* @__PURE__ */ new WeakMap()
      };
    }
    let uid = 0;
    function createAppAPI(render2, hydrate2) {
      return function createApp2(rootComponent, rootProps = null) {
        if (!isFunction(rootComponent)) {
          rootComponent = Object.assign({}, rootComponent);
        }
        if (rootProps != null && !isObject(rootProps)) {
          warn$1(`root props passed to app.mount() must be an object.`);
          rootProps = null;
        }
        const context = createAppContext();
        const installedPlugins = /* @__PURE__ */ new Set();
        let isMounted = false;
        const app2 = context.app = {
          _uid: uid++,
          _component: rootComponent,
          _props: rootProps,
          _container: null,
          _context: context,
          _instance: null,
          version: version2,
          get config() {
            return context.config;
          },
          set config(v) {
            {
              warn$1(`app.config cannot be replaced. Modify individual options instead.`);
            }
          },
          use(plugin, ...options) {
            if (installedPlugins.has(plugin)) {
              warn$1(`Plugin has already been applied to target app.`);
            } else if (plugin && isFunction(plugin.install)) {
              installedPlugins.add(plugin);
              plugin.install(app2, ...options);
            } else if (isFunction(plugin)) {
              installedPlugins.add(plugin);
              plugin(app2, ...options);
            } else {
              warn$1(`A plugin must either be a function or an object with an "install" function.`);
            }
            return app2;
          },
          mixin(mixin) {
            {
              if (!context.mixins.includes(mixin)) {
                context.mixins.push(mixin);
              } else {
                warn$1("Mixin has already been applied to target app" + (mixin.name ? `: ${mixin.name}` : ""));
              }
            }
            return app2;
          },
          component(name, component) {
            {
              validateComponentName(name, context.config);
            }
            if (!component) {
              return context.components[name];
            }
            if (context.components[name]) {
              warn$1(`Component "${name}" has already been registered in target app.`);
            }
            context.components[name] = component;
            return app2;
          },
          directive(name, directive) {
            {
              validateDirectiveName(name);
            }
            if (!directive) {
              return context.directives[name];
            }
            if (context.directives[name]) {
              warn$1(`Directive "${name}" has already been registered in target app.`);
            }
            context.directives[name] = directive;
            return app2;
          },
          mount(rootContainer, isHydrate, isSVG) {
            if (!isMounted) {
              if (rootContainer.__vue_app__) {
                warn$1(`There is already an app instance mounted on the host container.
 If you want to mount another app on the same host container, you need to unmount the previous app by calling \`app.unmount()\` first.`);
              }
              const vnode = createVNode(rootComponent, rootProps);
              vnode.appContext = context;
              {
                context.reload = () => {
                  render2(cloneVNode(vnode), rootContainer, isSVG);
                };
              }
              if (isHydrate && hydrate2) {
                hydrate2(vnode, rootContainer);
              } else {
                render2(vnode, rootContainer, isSVG);
              }
              isMounted = true;
              app2._container = rootContainer;
              rootContainer.__vue_app__ = app2;
              {
                app2._instance = vnode.component;
                devtoolsInitApp(app2, version2);
              }
              return getExposeProxy(vnode.component) || vnode.component.proxy;
            } else {
              warn$1(`App has already been mounted.
If you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. \`const createMyApp = () => createApp(App)\``);
            }
          },
          unmount() {
            if (isMounted) {
              render2(null, app2._container);
              {
                app2._instance = null;
                devtoolsUnmountApp(app2);
              }
              delete app2._container.__vue_app__;
            } else {
              warn$1(`Cannot unmount an app that is not mounted.`);
            }
          },
          provide(key, value) {
            if (key in context.provides) {
              warn$1(`App already provides property with key "${String(key)}". It will be overwritten with the new value.`);
            }
            context.provides[key] = value;
            return app2;
          }
        };
        return app2;
      };
    }
    function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
      if (isArray(rawRef)) {
        rawRef.forEach((r, i) => setRef(r, oldRawRef && (isArray(oldRawRef) ? oldRawRef[i] : oldRawRef), parentSuspense, vnode, isUnmount));
        return;
      }
      if (isAsyncWrapper(vnode) && !isUnmount) {
        return;
      }
      const refValue = vnode.shapeFlag & 4 ? getExposeProxy(vnode.component) || vnode.component.proxy : vnode.el;
      const value = isUnmount ? null : refValue;
      const { i: owner, r: ref2 } = rawRef;
      if (!owner) {
        warn$1(`Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.`);
        return;
      }
      const oldRef = oldRawRef && oldRawRef.r;
      const refs = owner.refs === EMPTY_OBJ ? owner.refs = {} : owner.refs;
      const setupState = owner.setupState;
      if (oldRef != null && oldRef !== ref2) {
        if (isString(oldRef)) {
          refs[oldRef] = null;
          if (hasOwn(setupState, oldRef)) {
            setupState[oldRef] = null;
          }
        } else if (isRef(oldRef)) {
          oldRef.value = null;
        }
      }
      if (isFunction(ref2)) {
        callWithErrorHandling(ref2, owner, 12, [value, refs]);
      } else {
        const _isString = isString(ref2);
        const _isRef = isRef(ref2);
        if (_isString || _isRef) {
          const doSet = () => {
            if (rawRef.f) {
              const existing = _isString ? refs[ref2] : ref2.value;
              if (isUnmount) {
                isArray(existing) && remove(existing, refValue);
              } else {
                if (!isArray(existing)) {
                  if (_isString) {
                    refs[ref2] = [refValue];
                    if (hasOwn(setupState, ref2)) {
                      setupState[ref2] = refs[ref2];
                    }
                  } else {
                    ref2.value = [refValue];
                    if (rawRef.k)
                      refs[rawRef.k] = ref2.value;
                  }
                } else if (!existing.includes(refValue)) {
                  existing.push(refValue);
                }
              }
            } else if (_isString) {
              refs[ref2] = value;
              if (hasOwn(setupState, ref2)) {
                setupState[ref2] = value;
              }
            } else if (isRef(ref2)) {
              ref2.value = value;
              if (rawRef.k)
                refs[rawRef.k] = value;
            } else {
              warn$1("Invalid template ref type:", ref2, `(${typeof ref2})`);
            }
          };
          if (value) {
            doSet.id = -1;
            queuePostRenderEffect(doSet, parentSuspense);
          } else {
            doSet();
          }
        } else {
          warn$1("Invalid template ref type:", ref2, `(${typeof ref2})`);
        }
      }
    }
    let hasMismatch = false;
    const isSVGContainer = (container) => /svg/.test(container.namespaceURI) && container.tagName !== "foreignObject";
    const isComment = (node) => node.nodeType === 8;
    function createHydrationFunctions(rendererInternals) {
      const { mt: mountComponent, p: patch, o: { patchProp: patchProp2, createText, nextSibling, parentNode, remove: remove2, insert, createComment } } = rendererInternals;
      const hydrate2 = (vnode, container) => {
        if (!container.hasChildNodes()) {
          warn$1(`Attempting to hydrate existing markup but container is empty. Performing full mount instead.`);
          patch(null, vnode, container);
          flushPostFlushCbs();
          return;
        }
        hasMismatch = false;
        hydrateNode(container.firstChild, vnode, null, null, null);
        flushPostFlushCbs();
        if (hasMismatch && true) {
          console.error(`Hydration completed but contains mismatches.`);
        }
      };
      const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false) => {
        const isFragmentStart = isComment(node) && node.data === "[";
        const onMismatch = () => handleMismatch(node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragmentStart);
        const { type, ref: ref2, shapeFlag, patchFlag } = vnode;
        const domType = node.nodeType;
        vnode.el = node;
        if (patchFlag === -2) {
          optimized = false;
          vnode.dynamicChildren = null;
        }
        let nextNode = null;
        switch (type) {
          case Text:
            if (domType !== 3) {
              if (vnode.children === "") {
                insert(vnode.el = createText(""), parentNode(node), node);
                nextNode = node;
              } else {
                nextNode = onMismatch();
              }
            } else {
              if (node.data !== vnode.children) {
                hasMismatch = true;
                warn$1(`Hydration text mismatch:
- Client: ${JSON.stringify(node.data)}
- Server: ${JSON.stringify(vnode.children)}`);
                node.data = vnode.children;
              }
              nextNode = nextSibling(node);
            }
            break;
          case Comment2:
            if (domType !== 8 || isFragmentStart) {
              nextNode = onMismatch();
            } else {
              nextNode = nextSibling(node);
            }
            break;
          case Static:
            if (domType !== 1) {
              nextNode = onMismatch();
            } else {
              nextNode = node;
              const needToAdoptContent = !vnode.children.length;
              for (let i = 0; i < vnode.staticCount; i++) {
                if (needToAdoptContent)
                  vnode.children += nextNode.outerHTML;
                if (i === vnode.staticCount - 1) {
                  vnode.anchor = nextNode;
                }
                nextNode = nextSibling(nextNode);
              }
              return nextNode;
            }
            break;
          case Fragment:
            if (!isFragmentStart) {
              nextNode = onMismatch();
            } else {
              nextNode = hydrateFragment(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
            }
            break;
          default:
            if (shapeFlag & 1) {
              if (domType !== 1 || vnode.type.toLowerCase() !== node.tagName.toLowerCase()) {
                nextNode = onMismatch();
              } else {
                nextNode = hydrateElement(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
              }
            } else if (shapeFlag & 6) {
              vnode.slotScopeIds = slotScopeIds;
              const container = parentNode(node);
              mountComponent(vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), optimized);
              nextNode = isFragmentStart ? locateClosingAsyncAnchor(node) : nextSibling(node);
              if (nextNode && isComment(nextNode) && nextNode.data === "teleport end") {
                nextNode = nextSibling(nextNode);
              }
              if (isAsyncWrapper(vnode)) {
                let subTree;
                if (isFragmentStart) {
                  subTree = createVNode(Fragment);
                  subTree.anchor = nextNode ? nextNode.previousSibling : container.lastChild;
                } else {
                  subTree = node.nodeType === 3 ? createTextVNode("") : createVNode("div");
                }
                subTree.el = node;
                vnode.component.subTree = subTree;
              }
            } else if (shapeFlag & 64) {
              if (domType !== 8) {
                nextNode = onMismatch();
              } else {
                nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, rendererInternals, hydrateChildren);
              }
            } else if (shapeFlag & 128) {
              nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, isSVGContainer(parentNode(node)), slotScopeIds, optimized, rendererInternals, hydrateNode);
            } else {
              warn$1("Invalid HostVNode type:", type, `(${typeof type})`);
            }
        }
        if (ref2 != null) {
          setRef(ref2, null, parentSuspense, vnode);
        }
        return nextNode;
      };
      const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
        optimized = optimized || !!vnode.dynamicChildren;
        const { type, props, patchFlag, shapeFlag, dirs } = vnode;
        const forcePatchValue = type === "input" && dirs || type === "option";
        {
          if (dirs) {
            invokeDirectiveHook(vnode, null, parentComponent, "created");
          }
          if (props) {
            if (forcePatchValue || !optimized || patchFlag & (16 | 32)) {
              for (const key in props) {
                if (forcePatchValue && key.endsWith("value") || isOn(key) && !isReservedProp(key)) {
                  patchProp2(el, key, null, props[key], false, void 0, parentComponent);
                }
              }
            } else if (props.onClick) {
              patchProp2(el, "onClick", null, props.onClick, false, void 0, parentComponent);
            }
          }
          let vnodeHooks;
          if (vnodeHooks = props && props.onVnodeBeforeMount) {
            invokeVNodeHook(vnodeHooks, parentComponent, vnode);
          }
          if (dirs) {
            invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
          }
          if ((vnodeHooks = props && props.onVnodeMounted) || dirs) {
            queueEffectWithSuspense(() => {
              vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);
              dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
            }, parentSuspense);
          }
          if (shapeFlag & 16 && !(props && (props.innerHTML || props.textContent))) {
            let next = hydrateChildren(el.firstChild, vnode, el, parentComponent, parentSuspense, slotScopeIds, optimized);
            let hasWarned2 = false;
            while (next) {
              hasMismatch = true;
              if (!hasWarned2) {
                warn$1(`Hydration children mismatch in <${vnode.type}>: server rendered element contains more child nodes than client vdom.`);
                hasWarned2 = true;
              }
              const cur = next;
              next = next.nextSibling;
              remove2(cur);
            }
          } else if (shapeFlag & 8) {
            if (el.textContent !== vnode.children) {
              hasMismatch = true;
              warn$1(`Hydration text content mismatch in <${vnode.type}>:
- Client: ${el.textContent}
- Server: ${vnode.children}`);
              el.textContent = vnode.children;
            }
          }
        }
        return el.nextSibling;
      };
      const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized) => {
        optimized = optimized || !!parentVNode.dynamicChildren;
        const children = parentVNode.children;
        const l = children.length;
        let hasWarned2 = false;
        for (let i = 0; i < l; i++) {
          const vnode = optimized ? children[i] : children[i] = normalizeVNode(children[i]);
          if (node) {
            node = hydrateNode(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
          } else if (vnode.type === Text && !vnode.children) {
            continue;
          } else {
            hasMismatch = true;
            if (!hasWarned2) {
              warn$1(`Hydration children mismatch in <${container.tagName.toLowerCase()}>: server rendered element contains fewer child nodes than client vdom.`);
              hasWarned2 = true;
            }
            patch(null, vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);
          }
        }
        return node;
      };
      const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
        const { slotScopeIds: fragmentSlotScopeIds } = vnode;
        if (fragmentSlotScopeIds) {
          slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
        }
        const container = parentNode(node);
        const next = hydrateChildren(nextSibling(node), vnode, container, parentComponent, parentSuspense, slotScopeIds, optimized);
        if (next && isComment(next) && next.data === "]") {
          return nextSibling(vnode.anchor = next);
        } else {
          hasMismatch = true;
          insert(vnode.anchor = createComment(`]`), container, next);
          return next;
        }
      };
      const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment) => {
        hasMismatch = true;
        warn$1(`Hydration node mismatch:
- Client vnode:`, vnode.type, `
- Server rendered DOM:`, node, node.nodeType === 3 ? `(text)` : isComment(node) && node.data === "[" ? `(start of fragment)` : ``);
        vnode.el = null;
        if (isFragment) {
          const end = locateClosingAsyncAnchor(node);
          while (true) {
            const next2 = nextSibling(node);
            if (next2 && next2 !== end) {
              remove2(next2);
            } else {
              break;
            }
          }
        }
        const next = nextSibling(node);
        const container = parentNode(node);
        remove2(node);
        patch(null, vnode, container, next, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);
        return next;
      };
      const locateClosingAsyncAnchor = (node) => {
        let match = 0;
        while (node) {
          node = nextSibling(node);
          if (node && isComment(node)) {
            if (node.data === "[")
              match++;
            if (node.data === "]") {
              if (match === 0) {
                return nextSibling(node);
              } else {
                match--;
              }
            }
          }
        }
        return node;
      };
      return [hydrate2, hydrateNode];
    }
    let supported;
    let perf;
    function startMeasure(instance, type) {
      if (instance.appContext.config.performance && isSupported()) {
        perf.mark(`vue-${type}-${instance.uid}`);
      }
      {
        devtoolsPerfStart(instance, type, isSupported() ? perf.now() : Date.now());
      }
    }
    function endMeasure(instance, type) {
      if (instance.appContext.config.performance && isSupported()) {
        const startTag = `vue-${type}-${instance.uid}`;
        const endTag = startTag + `:end`;
        perf.mark(endTag);
        perf.measure(`<${formatComponentName(instance, instance.type)}> ${type}`, startTag, endTag);
        perf.clearMarks(startTag);
        perf.clearMarks(endTag);
      }
      {
        devtoolsPerfEnd(instance, type, isSupported() ? perf.now() : Date.now());
      }
    }
    function isSupported() {
      if (supported !== void 0) {
        return supported;
      }
      if (typeof window !== "undefined" && window.performance) {
        supported = true;
        perf = window.performance;
      } else {
        supported = false;
      }
      return supported;
    }
    const queuePostRenderEffect = queueEffectWithSuspense;
    function createRenderer(options) {
      return baseCreateRenderer(options);
    }
    function createHydrationRenderer(options) {
      return baseCreateRenderer(options, createHydrationFunctions);
    }
    function baseCreateRenderer(options, createHydrationFns) {
      const target = getGlobalThis();
      target.__VUE__ = true;
      {
        setDevtoolsHook(target.__VUE_DEVTOOLS_GLOBAL_HOOK__, target);
      }
      const { insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, setScopeId: hostSetScopeId = NOOP, cloneNode: hostCloneNode, insertStaticContent: hostInsertStaticContent } = options;
      const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = isHmrUpdating ? false : !!n2.dynamicChildren) => {
        if (n1 === n2) {
          return;
        }
        if (n1 && !isSameVNodeType(n1, n2)) {
          anchor = getNextHostNode(n1);
          unmount(n1, parentComponent, parentSuspense, true);
          n1 = null;
        }
        if (n2.patchFlag === -2) {
          optimized = false;
          n2.dynamicChildren = null;
        }
        const { type, ref: ref2, shapeFlag } = n2;
        switch (type) {
          case Text:
            processText(n1, n2, container, anchor);
            break;
          case Comment2:
            processCommentNode(n1, n2, container, anchor);
            break;
          case Static:
            if (n1 == null) {
              mountStaticNode(n2, container, anchor, isSVG);
            } else {
              patchStaticNode(n1, n2, container, isSVG);
            }
            break;
          case Fragment:
            processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            break;
          default:
            if (shapeFlag & 1) {
              processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            } else if (shapeFlag & 6) {
              processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            } else if (shapeFlag & 64) {
              type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
            } else if (shapeFlag & 128) {
              type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
            } else {
              warn$1("Invalid VNode type:", type, `(${typeof type})`);
            }
        }
        if (ref2 != null && parentComponent) {
          setRef(ref2, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
        }
      };
      const processText = (n1, n2, container, anchor) => {
        if (n1 == null) {
          hostInsert(n2.el = hostCreateText(n2.children), container, anchor);
        } else {
          const el = n2.el = n1.el;
          if (n2.children !== n1.children) {
            hostSetText(el, n2.children);
          }
        }
      };
      const processCommentNode = (n1, n2, container, anchor) => {
        if (n1 == null) {
          hostInsert(n2.el = hostCreateComment(n2.children || ""), container, anchor);
        } else {
          n2.el = n1.el;
        }
      };
      const mountStaticNode = (n2, container, anchor, isSVG) => {
        [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG, n2.el, n2.anchor);
      };
      const patchStaticNode = (n1, n2, container, isSVG) => {
        if (n2.children !== n1.children) {
          const anchor = hostNextSibling(n1.anchor);
          removeStaticNode(n1);
          [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
        } else {
          n2.el = n1.el;
          n2.anchor = n1.anchor;
        }
      };
      const moveStaticNode = ({ el, anchor }, container, nextSibling) => {
        let next;
        while (el && el !== anchor) {
          next = hostNextSibling(el);
          hostInsert(el, container, nextSibling);
          el = next;
        }
        hostInsert(anchor, container, nextSibling);
      };
      const removeStaticNode = ({ el, anchor }) => {
        let next;
        while (el && el !== anchor) {
          next = hostNextSibling(el);
          hostRemove(el);
          el = next;
        }
        hostRemove(anchor);
      };
      const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        isSVG = isSVG || n2.type === "svg";
        if (n1 == null) {
          mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else {
          patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
      };
      const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        let el;
        let vnodeHook;
        const { type, props, shapeFlag, transition, patchFlag, dirs } = vnode;
        {
          el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is, props);
          if (shapeFlag & 8) {
            hostSetElementText(el, vnode.children);
          } else if (shapeFlag & 16) {
            mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== "foreignObject", slotScopeIds, optimized);
          }
          if (dirs) {
            invokeDirectiveHook(vnode, null, parentComponent, "created");
          }
          if (props) {
            for (const key in props) {
              if (key !== "value" && !isReservedProp(key)) {
                hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
              }
            }
            if ("value" in props) {
              hostPatchProp(el, "value", null, props.value);
            }
            if (vnodeHook = props.onVnodeBeforeMount) {
              invokeVNodeHook(vnodeHook, parentComponent, vnode);
            }
          }
          setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
        }
        {
          Object.defineProperty(el, "__vnode", {
            value: vnode,
            enumerable: false
          });
          Object.defineProperty(el, "__vueParentComponent", {
            value: parentComponent,
            enumerable: false
          });
        }
        if (dirs) {
          invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
        }
        const needCallTransitionHooks = (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
        if (needCallTransitionHooks) {
          transition.beforeEnter(el);
        }
        hostInsert(el, container, anchor);
        if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
          queuePostRenderEffect(() => {
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
            needCallTransitionHooks && transition.enter(el);
            dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
          }, parentSuspense);
        }
      };
      const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {
        if (scopeId) {
          hostSetScopeId(el, scopeId);
        }
        if (slotScopeIds) {
          for (let i = 0; i < slotScopeIds.length; i++) {
            hostSetScopeId(el, slotScopeIds[i]);
          }
        }
        if (parentComponent) {
          let subTree = parentComponent.subTree;
          if (subTree.patchFlag > 0 && subTree.patchFlag & 2048) {
            subTree = filterSingleRoot(subTree.children) || subTree;
          }
          if (vnode === subTree) {
            const parentVNode = parentComponent.vnode;
            setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);
          }
        }
      };
      const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0) => {
        for (let i = start; i < children.length; i++) {
          const child = children[i] = optimized ? cloneIfMounted(children[i]) : normalizeVNode(children[i]);
          patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
      };
      const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        const el = n2.el = n1.el;
        let { patchFlag, dynamicChildren, dirs } = n2;
        patchFlag |= n1.patchFlag & 16;
        const oldProps = n1.props || EMPTY_OBJ;
        const newProps = n2.props || EMPTY_OBJ;
        let vnodeHook;
        parentComponent && toggleRecurse(parentComponent, false);
        if (vnodeHook = newProps.onVnodeBeforeUpdate) {
          invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        }
        if (dirs) {
          invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
        }
        parentComponent && toggleRecurse(parentComponent, true);
        if (isHmrUpdating) {
          patchFlag = 0;
          optimized = false;
          dynamicChildren = null;
        }
        const areChildrenSVG = isSVG && n2.type !== "foreignObject";
        if (dynamicChildren) {
          patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);
          if (parentComponent && parentComponent.type.__hmrId) {
            traverseStaticChildren(n1, n2);
          }
        } else if (!optimized) {
          patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);
        }
        if (patchFlag > 0) {
          if (patchFlag & 16) {
            patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
          } else {
            if (patchFlag & 2) {
              if (oldProps.class !== newProps.class) {
                hostPatchProp(el, "class", null, newProps.class, isSVG);
              }
            }
            if (patchFlag & 4) {
              hostPatchProp(el, "style", oldProps.style, newProps.style, isSVG);
            }
            if (patchFlag & 8) {
              const propsToUpdate = n2.dynamicProps;
              for (let i = 0; i < propsToUpdate.length; i++) {
                const key = propsToUpdate[i];
                const prev = oldProps[key];
                const next = newProps[key];
                if (next !== prev || key === "value") {
                  hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);
                }
              }
            }
          }
          if (patchFlag & 1) {
            if (n1.children !== n2.children) {
              hostSetElementText(el, n2.children);
            }
          }
        } else if (!optimized && dynamicChildren == null) {
          patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
        }
        if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
          queuePostRenderEffect(() => {
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
            dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
          }, parentSuspense);
        }
      };
      const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {
        for (let i = 0; i < newChildren.length; i++) {
          const oldVNode = oldChildren[i];
          const newVNode = newChildren[i];
          const container = oldVNode.el && (oldVNode.type === Fragment || !isSameVNodeType(oldVNode, newVNode) || oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : fallbackContainer;
          patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);
        }
      };
      const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {
        if (oldProps !== newProps) {
          for (const key in newProps) {
            if (isReservedProp(key))
              continue;
            const next = newProps[key];
            const prev = oldProps[key];
            if (next !== prev && key !== "value") {
              hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
            }
          }
          if (oldProps !== EMPTY_OBJ) {
            for (const key in oldProps) {
              if (!isReservedProp(key) && !(key in newProps)) {
                hostPatchProp(el, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
              }
            }
          }
          if ("value" in newProps) {
            hostPatchProp(el, "value", oldProps.value, newProps.value);
          }
        }
      };
      const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
        const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
        let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
        if (isHmrUpdating || patchFlag & 2048) {
          patchFlag = 0;
          optimized = false;
          dynamicChildren = null;
        }
        if (fragmentSlotScopeIds) {
          slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
        }
        if (n1 == null) {
          hostInsert(fragmentStartAnchor, container, anchor);
          hostInsert(fragmentEndAnchor, container, anchor);
          mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else {
          if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && n1.dynamicChildren) {
            patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);
            if (parentComponent && parentComponent.type.__hmrId) {
              traverseStaticChildren(n1, n2);
            } else if (n2.key != null || parentComponent && n2 === parentComponent.subTree) {
              traverseStaticChildren(n1, n2, true);
            }
          } else {
            patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          }
        }
      };
      const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        n2.slotScopeIds = slotScopeIds;
        if (n1 == null) {
          if (n2.shapeFlag & 512) {
            parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);
          } else {
            mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
          }
        } else {
          updateComponent(n1, n2, optimized);
        }
      };
      const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
        const instance = initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense);
        if (instance.type.__hmrId) {
          registerHMR(instance);
        }
        {
          pushWarningContext(initialVNode);
          startMeasure(instance, `mount`);
        }
        if (isKeepAlive(initialVNode)) {
          instance.ctx.renderer = internals;
        }
        {
          {
            startMeasure(instance, `init`);
          }
          setupComponent(instance);
          {
            endMeasure(instance, `init`);
          }
        }
        if (instance.asyncDep) {
          parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
          if (!initialVNode.el) {
            const placeholder = instance.subTree = createVNode(Comment2);
            processCommentNode(null, placeholder, container, anchor);
          }
          return;
        }
        setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);
        {
          popWarningContext();
          endMeasure(instance, `mount`);
        }
      };
      const updateComponent = (n1, n2, optimized) => {
        const instance = n2.component = n1.component;
        if (shouldUpdateComponent(n1, n2, optimized)) {
          if (instance.asyncDep && !instance.asyncResolved) {
            {
              pushWarningContext(n2);
            }
            updateComponentPreRender(instance, n2, optimized);
            {
              popWarningContext();
            }
            return;
          } else {
            instance.next = n2;
            invalidateJob(instance.update);
            instance.update();
          }
        } else {
          n2.el = n1.el;
          instance.vnode = n2;
        }
      };
      const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {
        const componentUpdateFn = () => {
          if (!instance.isMounted) {
            let vnodeHook;
            const { el, props } = initialVNode;
            const { bm, m, parent } = instance;
            const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
            toggleRecurse(instance, false);
            if (bm) {
              invokeArrayFns(bm);
            }
            if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) {
              invokeVNodeHook(vnodeHook, parent, initialVNode);
            }
            toggleRecurse(instance, true);
            if (el && hydrateNode) {
              const hydrateSubTree = () => {
                {
                  startMeasure(instance, `render`);
                }
                instance.subTree = renderComponentRoot(instance);
                {
                  endMeasure(instance, `render`);
                }
                {
                  startMeasure(instance, `hydrate`);
                }
                hydrateNode(el, instance.subTree, instance, parentSuspense, null);
                {
                  endMeasure(instance, `hydrate`);
                }
              };
              if (isAsyncWrapperVNode) {
                initialVNode.type.__asyncLoader().then(
                  () => !instance.isUnmounted && hydrateSubTree()
                );
              } else {
                hydrateSubTree();
              }
            } else {
              {
                startMeasure(instance, `render`);
              }
              const subTree = instance.subTree = renderComponentRoot(instance);
              {
                endMeasure(instance, `render`);
              }
              {
                startMeasure(instance, `patch`);
              }
              patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);
              {
                endMeasure(instance, `patch`);
              }
              initialVNode.el = subTree.el;
            }
            if (m) {
              queuePostRenderEffect(m, parentSuspense);
            }
            if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
              const scopedInitialVNode = initialVNode;
              queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode), parentSuspense);
            }
            if (initialVNode.shapeFlag & 256 || parent && isAsyncWrapper(parent.vnode) && parent.vnode.shapeFlag & 256) {
              instance.a && queuePostRenderEffect(instance.a, parentSuspense);
            }
            instance.isMounted = true;
            {
              devtoolsComponentAdded(instance);
            }
            initialVNode = container = anchor = null;
          } else {
            let { next, bu, u, parent, vnode } = instance;
            let originNext = next;
            let vnodeHook;
            {
              pushWarningContext(next || instance.vnode);
            }
            toggleRecurse(instance, false);
            if (next) {
              next.el = vnode.el;
              updateComponentPreRender(instance, next, optimized);
            } else {
              next = vnode;
            }
            if (bu) {
              invokeArrayFns(bu);
            }
            if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
              invokeVNodeHook(vnodeHook, parent, next, vnode);
            }
            toggleRecurse(instance, true);
            {
              startMeasure(instance, `render`);
            }
            const nextTree = renderComponentRoot(instance);
            {
              endMeasure(instance, `render`);
            }
            const prevTree = instance.subTree;
            instance.subTree = nextTree;
            {
              startMeasure(instance, `patch`);
            }
            patch(
              prevTree,
              nextTree,
              hostParentNode(prevTree.el),
              getNextHostNode(prevTree),
              instance,
              parentSuspense,
              isSVG
            );
            {
              endMeasure(instance, `patch`);
            }
            next.el = nextTree.el;
            if (originNext === null) {
              updateHOCHostEl(instance, nextTree.el);
            }
            if (u) {
              queuePostRenderEffect(u, parentSuspense);
            }
            if (vnodeHook = next.props && next.props.onVnodeUpdated) {
              queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, next, vnode), parentSuspense);
            }
            {
              devtoolsComponentUpdated(instance);
            }
            {
              popWarningContext();
            }
          }
        };
        const effect2 = instance.effect = new ReactiveEffect(
          componentUpdateFn,
          () => queueJob(update),
          instance.scope
        );
        const update = instance.update = () => effect2.run();
        update.id = instance.uid;
        toggleRecurse(instance, true);
        {
          effect2.onTrack = instance.rtc ? (e) => invokeArrayFns(instance.rtc, e) : void 0;
          effect2.onTrigger = instance.rtg ? (e) => invokeArrayFns(instance.rtg, e) : void 0;
          update.ownerInstance = instance;
        }
        update();
      };
      const updateComponentPreRender = (instance, nextVNode, optimized) => {
        nextVNode.component = instance;
        const prevProps = instance.vnode.props;
        instance.vnode = nextVNode;
        instance.next = null;
        updateProps(instance, nextVNode.props, prevProps, optimized);
        updateSlots(instance, nextVNode.children, optimized);
        pauseTracking();
        flushPreFlushCbs(void 0, instance.update);
        resetTracking();
      };
      const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {
        const c1 = n1 && n1.children;
        const prevShapeFlag = n1 ? n1.shapeFlag : 0;
        const c2 = n2.children;
        const { patchFlag, shapeFlag } = n2;
        if (patchFlag > 0) {
          if (patchFlag & 128) {
            patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            return;
          } else if (patchFlag & 256) {
            patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            return;
          }
        }
        if (shapeFlag & 8) {
          if (prevShapeFlag & 16) {
            unmountChildren(c1, parentComponent, parentSuspense);
          }
          if (c2 !== c1) {
            hostSetElementText(container, c2);
          }
        } else {
          if (prevShapeFlag & 16) {
            if (shapeFlag & 16) {
              patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            } else {
              unmountChildren(c1, parentComponent, parentSuspense, true);
            }
          } else {
            if (prevShapeFlag & 8) {
              hostSetElementText(container, "");
            }
            if (shapeFlag & 16) {
              mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            }
          }
        }
      };
      const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        c1 = c1 || EMPTY_ARR;
        c2 = c2 || EMPTY_ARR;
        const oldLength = c1.length;
        const newLength = c2.length;
        const commonLength = Math.min(oldLength, newLength);
        let i;
        for (i = 0; i < commonLength; i++) {
          const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
          patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
        if (oldLength > newLength) {
          unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);
        } else {
          mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);
        }
      };
      const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
        let i = 0;
        const l2 = c2.length;
        let e1 = c1.length - 1;
        let e2 = l2 - 1;
        while (i <= e1 && i <= e2) {
          const n1 = c1[i];
          const n2 = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
          if (isSameVNodeType(n1, n2)) {
            patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          } else {
            break;
          }
          i++;
        }
        while (i <= e1 && i <= e2) {
          const n1 = c1[e1];
          const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
          if (isSameVNodeType(n1, n2)) {
            patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          } else {
            break;
          }
          e1--;
          e2--;
        }
        if (i > e1) {
          if (i <= e2) {
            const nextPos = e2 + 1;
            const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
            while (i <= e2) {
              patch(null, c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
              i++;
            }
          }
        } else if (i > e2) {
          while (i <= e1) {
            unmount(c1[i], parentComponent, parentSuspense, true);
            i++;
          }
        } else {
          const s1 = i;
          const s2 = i;
          const keyToNewIndexMap = /* @__PURE__ */ new Map();
          for (i = s2; i <= e2; i++) {
            const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
            if (nextChild.key != null) {
              if (keyToNewIndexMap.has(nextChild.key)) {
                warn$1(`Duplicate keys found during update:`, JSON.stringify(nextChild.key), `Make sure keys are unique.`);
              }
              keyToNewIndexMap.set(nextChild.key, i);
            }
          }
          let j;
          let patched = 0;
          const toBePatched = e2 - s2 + 1;
          let moved = false;
          let maxNewIndexSoFar = 0;
          const newIndexToOldIndexMap = new Array(toBePatched);
          for (i = 0; i < toBePatched; i++)
            newIndexToOldIndexMap[i] = 0;
          for (i = s1; i <= e1; i++) {
            const prevChild = c1[i];
            if (patched >= toBePatched) {
              unmount(prevChild, parentComponent, parentSuspense, true);
              continue;
            }
            let newIndex;
            if (prevChild.key != null) {
              newIndex = keyToNewIndexMap.get(prevChild.key);
            } else {
              for (j = s2; j <= e2; j++) {
                if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {
                  newIndex = j;
                  break;
                }
              }
            }
            if (newIndex === void 0) {
              unmount(prevChild, parentComponent, parentSuspense, true);
            } else {
              newIndexToOldIndexMap[newIndex - s2] = i + 1;
              if (newIndex >= maxNewIndexSoFar) {
                maxNewIndexSoFar = newIndex;
              } else {
                moved = true;
              }
              patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
              patched++;
            }
          }
          const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : EMPTY_ARR;
          j = increasingNewIndexSequence.length - 1;
          for (i = toBePatched - 1; i >= 0; i--) {
            const nextIndex = s2 + i;
            const nextChild = c2[nextIndex];
            const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
            if (newIndexToOldIndexMap[i] === 0) {
              patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            } else if (moved) {
              if (j < 0 || i !== increasingNewIndexSequence[j]) {
                move(nextChild, container, anchor, 2);
              } else {
                j--;
              }
            }
          }
        }
      };
      const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
        const { el, type, transition, children, shapeFlag } = vnode;
        if (shapeFlag & 6) {
          move(vnode.component.subTree, container, anchor, moveType);
          return;
        }
        if (shapeFlag & 128) {
          vnode.suspense.move(container, anchor, moveType);
          return;
        }
        if (shapeFlag & 64) {
          type.move(vnode, container, anchor, internals);
          return;
        }
        if (type === Fragment) {
          hostInsert(el, container, anchor);
          for (let i = 0; i < children.length; i++) {
            move(children[i], container, anchor, moveType);
          }
          hostInsert(vnode.anchor, container, anchor);
          return;
        }
        if (type === Static) {
          moveStaticNode(vnode, container, anchor);
          return;
        }
        const needTransition = moveType !== 2 && shapeFlag & 1 && transition;
        if (needTransition) {
          if (moveType === 0) {
            transition.beforeEnter(el);
            hostInsert(el, container, anchor);
            queuePostRenderEffect(() => transition.enter(el), parentSuspense);
          } else {
            const { leave, delayLeave, afterLeave } = transition;
            const remove3 = () => hostInsert(el, container, anchor);
            const performLeave = () => {
              leave(el, () => {
                remove3();
                afterLeave && afterLeave();
              });
            };
            if (delayLeave) {
              delayLeave(el, remove3, performLeave);
            } else {
              performLeave();
            }
          }
        } else {
          hostInsert(el, container, anchor);
        }
      };
      const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
        const { type, props, ref: ref2, children, dynamicChildren, shapeFlag, patchFlag, dirs } = vnode;
        if (ref2 != null) {
          setRef(ref2, null, parentSuspense, vnode, true);
        }
        if (shapeFlag & 256) {
          parentComponent.ctx.deactivate(vnode);
          return;
        }
        const shouldInvokeDirs = shapeFlag & 1 && dirs;
        const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
        let vnodeHook;
        if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) {
          invokeVNodeHook(vnodeHook, parentComponent, vnode);
        }
        if (shapeFlag & 6) {
          unmountComponent(vnode.component, parentSuspense, doRemove);
        } else {
          if (shapeFlag & 128) {
            vnode.suspense.unmount(parentSuspense, doRemove);
            return;
          }
          if (shouldInvokeDirs) {
            invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
          }
          if (shapeFlag & 64) {
            vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);
          } else if (dynamicChildren && (type !== Fragment || patchFlag > 0 && patchFlag & 64)) {
            unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);
          } else if (type === Fragment && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
            unmountChildren(children, parentComponent, parentSuspense);
          }
          if (doRemove) {
            remove2(vnode);
          }
        }
        if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
          queuePostRenderEffect(() => {
            vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
            shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
          }, parentSuspense);
        }
      };
      const remove2 = (vnode) => {
        const { type, el, anchor, transition } = vnode;
        if (type === Fragment) {
          if (vnode.patchFlag > 0 && vnode.patchFlag & 2048 && transition && !transition.persisted) {
            vnode.children.forEach((child) => {
              if (child.type === Comment2) {
                hostRemove(child.el);
              } else {
                remove2(child);
              }
            });
          } else {
            removeFragment(el, anchor);
          }
          return;
        }
        if (type === Static) {
          removeStaticNode(vnode);
          return;
        }
        const performRemove = () => {
          hostRemove(el);
          if (transition && !transition.persisted && transition.afterLeave) {
            transition.afterLeave();
          }
        };
        if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
          const { leave, delayLeave } = transition;
          const performLeave = () => leave(el, performRemove);
          if (delayLeave) {
            delayLeave(vnode.el, performRemove, performLeave);
          } else {
            performLeave();
          }
        } else {
          performRemove();
        }
      };
      const removeFragment = (cur, end) => {
        let next;
        while (cur !== end) {
          next = hostNextSibling(cur);
          hostRemove(cur);
          cur = next;
        }
        hostRemove(end);
      };
      const unmountComponent = (instance, parentSuspense, doRemove) => {
        if (instance.type.__hmrId) {
          unregisterHMR(instance);
        }
        const { bum, scope, update, subTree, um } = instance;
        if (bum) {
          invokeArrayFns(bum);
        }
        scope.stop();
        if (update) {
          update.active = false;
          unmount(subTree, instance, parentSuspense, doRemove);
        }
        if (um) {
          queuePostRenderEffect(um, parentSuspense);
        }
        queuePostRenderEffect(() => {
          instance.isUnmounted = true;
        }, parentSuspense);
        if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
          parentSuspense.deps--;
          if (parentSuspense.deps === 0) {
            parentSuspense.resolve();
          }
        }
        {
          devtoolsComponentRemoved(instance);
        }
      };
      const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
        for (let i = start; i < children.length; i++) {
          unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);
        }
      };
      const getNextHostNode = (vnode) => {
        if (vnode.shapeFlag & 6) {
          return getNextHostNode(vnode.component.subTree);
        }
        if (vnode.shapeFlag & 128) {
          return vnode.suspense.next();
        }
        return hostNextSibling(vnode.anchor || vnode.el);
      };
      const render2 = (vnode, container, isSVG) => {
        if (vnode == null) {
          if (container._vnode) {
            unmount(container._vnode, null, null, true);
          }
        } else {
          patch(container._vnode || null, vnode, container, null, null, null, isSVG);
        }
        flushPostFlushCbs();
        container._vnode = vnode;
      };
      const internals = {
        p: patch,
        um: unmount,
        m: move,
        r: remove2,
        mt: mountComponent,
        mc: mountChildren,
        pc: patchChildren,
        pbc: patchBlockChildren,
        n: getNextHostNode,
        o: options
      };
      let hydrate2;
      let hydrateNode;
      if (createHydrationFns) {
        [hydrate2, hydrateNode] = createHydrationFns(internals);
      }
      return {
        render: render2,
        hydrate: hydrate2,
        createApp: createAppAPI(render2, hydrate2)
      };
    }
    function toggleRecurse({ effect: effect2, update }, allowed) {
      effect2.allowRecurse = update.allowRecurse = allowed;
    }
    function traverseStaticChildren(n1, n2, shallow = false) {
      const ch1 = n1.children;
      const ch2 = n2.children;
      if (isArray(ch1) && isArray(ch2)) {
        for (let i = 0; i < ch1.length; i++) {
          const c1 = ch1[i];
          let c2 = ch2[i];
          if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
            if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
              c2 = ch2[i] = cloneIfMounted(ch2[i]);
              c2.el = c1.el;
            }
            if (!shallow)
              traverseStaticChildren(c1, c2);
          }
          if (c2.type === Comment2 && !c2.el) {
            c2.el = c1.el;
          }
        }
      }
    }
    function getSequence(arr) {
      const p2 = arr.slice();
      const result = [0];
      let i, j, u, v, c;
      const len = arr.length;
      for (i = 0; i < len; i++) {
        const arrI = arr[i];
        if (arrI !== 0) {
          j = result[result.length - 1];
          if (arr[j] < arrI) {
            p2[i] = j;
            result.push(i);
            continue;
          }
          u = 0;
          v = result.length - 1;
          while (u < v) {
            c = u + v >> 1;
            if (arr[result[c]] < arrI) {
              u = c + 1;
            } else {
              v = c;
            }
          }
          if (arrI < arr[result[u]]) {
            if (u > 0) {
              p2[i] = result[u - 1];
            }
            result[u] = i;
          }
        }
      }
      u = result.length;
      v = result[u - 1];
      while (u-- > 0) {
        result[u] = v;
        v = p2[v];
      }
      return result;
    }
    const isTeleport = (type) => type.__isTeleport;
    const isTeleportDisabled = (props) => props && (props.disabled || props.disabled === "");
    const isTargetSVG = (target) => typeof SVGElement !== "undefined" && target instanceof SVGElement;
    const resolveTarget = (props, select) => {
      const targetSelector = props && props.to;
      if (isString(targetSelector)) {
        if (!select) {
          warn$1(`Current renderer does not support string target for Teleports. (missing querySelector renderer option)`);
          return null;
        } else {
          const target = select(targetSelector);
          if (!target) {
            warn$1(`Failed to locate Teleport target with selector "${targetSelector}". Note the target element must exist before the component is mounted - i.e. the target cannot be rendered by the component itself, and ideally should be outside of the entire Vue component tree.`);
          }
          return target;
        }
      } else {
        if (!targetSelector && !isTeleportDisabled(props)) {
          warn$1(`Invalid Teleport target: ${targetSelector}`);
        }
        return targetSelector;
      }
    };
    const TeleportImpl = {
      __isTeleport: true,
      process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals) {
        const { mc: mountChildren, pc: patchChildren, pbc: patchBlockChildren, o: { insert, querySelector, createText, createComment } } = internals;
        const disabled = isTeleportDisabled(n2.props);
        let { shapeFlag, children, dynamicChildren } = n2;
        if (isHmrUpdating) {
          optimized = false;
          dynamicChildren = null;
        }
        if (n1 == null) {
          const placeholder = n2.el = createComment("teleport start");
          const mainAnchor = n2.anchor = createComment("teleport end");
          insert(placeholder, container, anchor);
          insert(mainAnchor, container, anchor);
          const target = n2.target = resolveTarget(n2.props, querySelector);
          const targetAnchor = n2.targetAnchor = createText("");
          if (target) {
            insert(targetAnchor, target);
            isSVG = isSVG || isTargetSVG(target);
          } else if (!disabled) {
            warn$1("Invalid Teleport target on mount:", target, `(${typeof target})`);
          }
          const mount = (container2, anchor2) => {
            if (shapeFlag & 16) {
              mountChildren(children, container2, anchor2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            }
          };
          if (disabled) {
            mount(container, mainAnchor);
          } else if (target) {
            mount(target, targetAnchor);
          }
        } else {
          n2.el = n1.el;
          const mainAnchor = n2.anchor = n1.anchor;
          const target = n2.target = n1.target;
          const targetAnchor = n2.targetAnchor = n1.targetAnchor;
          const wasDisabled = isTeleportDisabled(n1.props);
          const currentContainer = wasDisabled ? container : target;
          const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
          isSVG = isSVG || isTargetSVG(target);
          if (dynamicChildren) {
            patchBlockChildren(n1.dynamicChildren, dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG, slotScopeIds);
            traverseStaticChildren(n1, n2, true);
          } else if (!optimized) {
            patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, false);
          }
          if (disabled) {
            if (!wasDisabled) {
              moveTeleport(n2, container, mainAnchor, internals, 1);
            }
          } else {
            if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
              const nextTarget = n2.target = resolveTarget(n2.props, querySelector);
              if (nextTarget) {
                moveTeleport(n2, nextTarget, null, internals, 0);
              } else {
                warn$1("Invalid Teleport target on update:", target, `(${typeof target})`);
              }
            } else if (wasDisabled) {
              moveTeleport(n2, target, targetAnchor, internals, 1);
            }
          }
        }
      },
      remove(vnode, parentComponent, parentSuspense, optimized, { um: unmount, o: { remove: hostRemove } }, doRemove) {
        const { shapeFlag, children, anchor, targetAnchor, target, props } = vnode;
        if (target) {
          hostRemove(targetAnchor);
        }
        if (doRemove || !isTeleportDisabled(props)) {
          hostRemove(anchor);
          if (shapeFlag & 16) {
            for (let i = 0; i < children.length; i++) {
              const child = children[i];
              unmount(child, parentComponent, parentSuspense, true, !!child.dynamicChildren);
            }
          }
        }
      },
      move: moveTeleport,
      hydrate: hydrateTeleport
    };
    function moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2) {
      if (moveType === 0) {
        insert(vnode.targetAnchor, container, parentAnchor);
      }
      const { el, anchor, shapeFlag, children, props } = vnode;
      const isReorder = moveType === 2;
      if (isReorder) {
        insert(el, container, parentAnchor);
      }
      if (!isReorder || isTeleportDisabled(props)) {
        if (shapeFlag & 16) {
          for (let i = 0; i < children.length; i++) {
            move(children[i], container, parentAnchor, 2);
          }
        }
      }
      if (isReorder) {
        insert(anchor, container, parentAnchor);
      }
    }
    function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, { o: { nextSibling, parentNode, querySelector } }, hydrateChildren) {
      const target = vnode.target = resolveTarget(vnode.props, querySelector);
      if (target) {
        const targetNode = target._lpa || target.firstChild;
        if (vnode.shapeFlag & 16) {
          if (isTeleportDisabled(vnode.props)) {
            vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, slotScopeIds, optimized);
            vnode.targetAnchor = targetNode;
          } else {
            vnode.anchor = nextSibling(node);
            let targetAnchor = targetNode;
            while (targetAnchor) {
              targetAnchor = nextSibling(targetAnchor);
              if (targetAnchor && targetAnchor.nodeType === 8 && targetAnchor.data === "teleport anchor") {
                vnode.targetAnchor = targetAnchor;
                target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
                break;
              }
            }
            hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, slotScopeIds, optimized);
          }
        }
      }
      return vnode.anchor && nextSibling(vnode.anchor);
    }
    const Teleport = TeleportImpl;
    const Fragment = Symbol("Fragment");
    const Text = Symbol("Text");
    const Comment2 = Symbol("Comment");
    const Static = Symbol("Static");
    const blockStack = [];
    let currentBlock = null;
    function openBlock(disableTracking = false) {
      blockStack.push(currentBlock = disableTracking ? null : []);
    }
    function closeBlock() {
      blockStack.pop();
      currentBlock = blockStack[blockStack.length - 1] || null;
    }
    let isBlockTreeEnabled = 1;
    function setBlockTracking(value) {
      isBlockTreeEnabled += value;
    }
    function setupBlock(vnode) {
      vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null;
      closeBlock();
      if (isBlockTreeEnabled > 0 && currentBlock) {
        currentBlock.push(vnode);
      }
      return vnode;
    }
    function createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {
      return setupBlock(createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, true));
    }
    function createBlock(type, props, children, patchFlag, dynamicProps) {
      return setupBlock(createVNode(type, props, children, patchFlag, dynamicProps, true));
    }
    function isVNode(value) {
      return value ? value.__v_isVNode === true : false;
    }
    function isSameVNodeType(n1, n2) {
      if (n2.shapeFlag & 6 && hmrDirtyComponents.has(n2.type)) {
        return false;
      }
      return n1.type === n2.type && n1.key === n2.key;
    }
    let vnodeArgsTransformer;
    function transformVNodeArgs(transformer) {
      vnodeArgsTransformer = transformer;
    }
    const createVNodeWithArgsTransform = (...args) => {
      return _createVNode(...vnodeArgsTransformer ? vnodeArgsTransformer(args, currentRenderingInstance) : args);
    };
    const InternalObjectKey = `__vInternal`;
    const normalizeKey = ({ key }) => key != null ? key : null;
    const normalizeRef = ({ ref: ref2, ref_key, ref_for }) => {
      return ref2 != null ? isString(ref2) || isRef(ref2) || isFunction(ref2) ? { i: currentRenderingInstance, r: ref2, k: ref_key, f: !!ref_for } : ref2 : null;
    };
    function createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
      const vnode = {
        __v_isVNode: true,
        __v_skip: true,
        type,
        props,
        key: props && normalizeKey(props),
        ref: props && normalizeRef(props),
        scopeId: currentScopeId,
        slotScopeIds: null,
        children,
        component: null,
        suspense: null,
        ssContent: null,
        ssFallback: null,
        dirs: null,
        transition: null,
        el: null,
        anchor: null,
        target: null,
        targetAnchor: null,
        staticCount: 0,
        shapeFlag,
        patchFlag,
        dynamicProps,
        dynamicChildren: null,
        appContext: null
      };
      if (needFullChildrenNormalization) {
        normalizeChildren(vnode, children);
        if (shapeFlag & 128) {
          type.normalize(vnode);
        }
      } else if (children) {
        vnode.shapeFlag |= isString(children) ? 8 : 16;
      }
      if (vnode.key !== vnode.key) {
        warn$1(`VNode created with invalid key (NaN). VNode type:`, vnode.type);
      }
      if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock && (vnode.patchFlag > 0 || shapeFlag & 6) && vnode.patchFlag !== 32) {
        currentBlock.push(vnode);
      }
      return vnode;
    }
    const createVNode = createVNodeWithArgsTransform;
    function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
      if (!type || type === NULL_DYNAMIC_COMPONENT) {
        if (!type) {
          warn$1(`Invalid vnode type when creating vnode: ${type}.`);
        }
        type = Comment2;
      }
      if (isVNode(type)) {
        const cloned = cloneVNode(type, props, true);
        if (children) {
          normalizeChildren(cloned, children);
        }
        if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {
          if (cloned.shapeFlag & 6) {
            currentBlock[currentBlock.indexOf(type)] = cloned;
          } else {
            currentBlock.push(cloned);
          }
        }
        cloned.patchFlag |= -2;
        return cloned;
      }
      if (isClassComponent(type)) {
        type = type.__vccOpts;
      }
      if (props) {
        props = guardReactiveProps(props);
        let { class: klass, style } = props;
        if (klass && !isString(klass)) {
          props.class = normalizeClass(klass);
        }
        if (isObject(style)) {
          if (isProxy(style) && !isArray(style)) {
            style = extend({}, style);
          }
          props.style = normalizeStyle(style);
        }
      }
      const shapeFlag = isString(type) ? 1 : isSuspense(type) ? 128 : isTeleport(type) ? 64 : isObject(type) ? 4 : isFunction(type) ? 2 : 0;
      if (shapeFlag & 4 && isProxy(type)) {
        type = toRaw(type);
        warn$1(`Vue received a Component which was made a reactive object. This can lead to unnecessary performance overhead, and should be avoided by marking the component with \`markRaw\` or using \`shallowRef\` instead of \`ref\`.`, `
Component that was made reactive: `, type);
      }
      return createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, isBlockNode, true);
    }
    function guardReactiveProps(props) {
      if (!props)
        return null;
      return isProxy(props) || InternalObjectKey in props ? extend({}, props) : props;
    }
    function cloneVNode(vnode, extraProps, mergeRef = false) {
      const { props, ref: ref2, patchFlag, children } = vnode;
      const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
      const cloned = {
        __v_isVNode: true,
        __v_skip: true,
        type: vnode.type,
        props: mergedProps,
        key: mergedProps && normalizeKey(mergedProps),
        ref: extraProps && extraProps.ref ? mergeRef && ref2 ? isArray(ref2) ? ref2.concat(normalizeRef(extraProps)) : [ref2, normalizeRef(extraProps)] : normalizeRef(extraProps) : ref2,
        scopeId: vnode.scopeId,
        slotScopeIds: vnode.slotScopeIds,
        children: patchFlag === -1 && isArray(children) ? children.map(deepCloneVNode) : children,
        target: vnode.target,
        targetAnchor: vnode.targetAnchor,
        staticCount: vnode.staticCount,
        shapeFlag: vnode.shapeFlag,
        patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
        dynamicProps: vnode.dynamicProps,
        dynamicChildren: vnode.dynamicChildren,
        appContext: vnode.appContext,
        dirs: vnode.dirs,
        transition: vnode.transition,
        component: vnode.component,
        suspense: vnode.suspense,
        ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
        ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
        el: vnode.el,
        anchor: vnode.anchor
      };
      return cloned;
    }
    function deepCloneVNode(vnode) {
      const cloned = cloneVNode(vnode);
      if (isArray(vnode.children)) {
        cloned.children = vnode.children.map(deepCloneVNode);
      }
      return cloned;
    }
    function createTextVNode(text = " ", flag = 0) {
      return createVNode(Text, null, text, flag);
    }
    function createStaticVNode(content, numberOfNodes) {
      const vnode = createVNode(Static, null, content);
      vnode.staticCount = numberOfNodes;
      return vnode;
    }
    function createCommentVNode(text = "", asBlock = false) {
      return asBlock ? (openBlock(), createBlock(Comment2, null, text)) : createVNode(Comment2, null, text);
    }
    function normalizeVNode(child) {
      if (child == null || typeof child === "boolean") {
        return createVNode(Comment2);
      } else if (isArray(child)) {
        return createVNode(
          Fragment,
          null,
          child.slice()
        );
      } else if (typeof child === "object") {
        return cloneIfMounted(child);
      } else {
        return createVNode(Text, null, String(child));
      }
    }
    function cloneIfMounted(child) {
      return child.el === null || child.memo ? child : cloneVNode(child);
    }
    function normalizeChildren(vnode, children) {
      let type = 0;
      const { shapeFlag } = vnode;
      if (children == null) {
        children = null;
      } else if (isArray(children)) {
        type = 16;
      } else if (typeof children === "object") {
        if (shapeFlag & (1 | 64)) {
          const slot = children.default;
          if (slot) {
            slot._c && (slot._d = false);
            normalizeChildren(vnode, slot());
            slot._c && (slot._d = true);
          }
          return;
        } else {
          type = 32;
          const slotFlag = children._;
          if (!slotFlag && !(InternalObjectKey in children)) {
            children._ctx = currentRenderingInstance;
          } else if (slotFlag === 3 && currentRenderingInstance) {
            if (currentRenderingInstance.slots._ === 1) {
              children._ = 1;
            } else {
              children._ = 2;
              vnode.patchFlag |= 1024;
            }
          }
        }
      } else if (isFunction(children)) {
        children = { default: children, _ctx: currentRenderingInstance };
        type = 32;
      } else {
        children = String(children);
        if (shapeFlag & 64) {
          type = 16;
          children = [createTextVNode(children)];
        } else {
          type = 8;
        }
      }
      vnode.children = children;
      vnode.shapeFlag |= type;
    }
    function mergeProps(...args) {
      const ret = {};
      for (let i = 0; i < args.length; i++) {
        const toMerge = args[i];
        for (const key in toMerge) {
          if (key === "class") {
            if (ret.class !== toMerge.class) {
              ret.class = normalizeClass([ret.class, toMerge.class]);
            }
          } else if (key === "style") {
            ret.style = normalizeStyle([ret.style, toMerge.style]);
          } else if (isOn(key)) {
            const existing = ret[key];
            const incoming = toMerge[key];
            if (incoming && existing !== incoming && !(isArray(existing) && existing.includes(incoming))) {
              ret[key] = existing ? [].concat(existing, incoming) : incoming;
            }
          } else if (key !== "") {
            ret[key] = toMerge[key];
          }
        }
      }
      return ret;
    }
    function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
      callWithAsyncErrorHandling(hook, instance, 7, [
        vnode,
        prevVNode
      ]);
    }
    const emptyAppContext = createAppContext();
    let uid$1 = 0;
    function createComponentInstance(vnode, parent, suspense) {
      const type = vnode.type;
      const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
      const instance = {
        uid: uid$1++,
        vnode,
        type,
        parent,
        appContext,
        root: null,
        next: null,
        subTree: null,
        effect: null,
        update: null,
        scope: new EffectScope(true),
        render: null,
        proxy: null,
        exposed: null,
        exposeProxy: null,
        withProxy: null,
        provides: parent ? parent.provides : Object.create(appContext.provides),
        accessCache: null,
        renderCache: [],
        components: null,
        directives: null,
        propsOptions: normalizePropsOptions(type, appContext),
        emitsOptions: normalizeEmitsOptions(type, appContext),
        emit: null,
        emitted: null,
        propsDefaults: EMPTY_OBJ,
        inheritAttrs: type.inheritAttrs,
        ctx: EMPTY_OBJ,
        data: EMPTY_OBJ,
        props: EMPTY_OBJ,
        attrs: EMPTY_OBJ,
        slots: EMPTY_OBJ,
        refs: EMPTY_OBJ,
        setupState: EMPTY_OBJ,
        setupContext: null,
        suspense,
        suspenseId: suspense ? suspense.pendingId : 0,
        asyncDep: null,
        asyncResolved: false,
        isMounted: false,
        isUnmounted: false,
        isDeactivated: false,
        bc: null,
        c: null,
        bm: null,
        m: null,
        bu: null,
        u: null,
        um: null,
        bum: null,
        da: null,
        a: null,
        rtg: null,
        rtc: null,
        ec: null,
        sp: null
      };
      {
        instance.ctx = createDevRenderContext(instance);
      }
      instance.root = parent ? parent.root : instance;
      instance.emit = emit$1.bind(null, instance);
      if (vnode.ce) {
        vnode.ce(instance);
      }
      return instance;
    }
    let currentInstance = null;
    const getCurrentInstance = () => currentInstance || currentRenderingInstance;
    const setCurrentInstance = (instance) => {
      currentInstance = instance;
      instance.scope.on();
    };
    const unsetCurrentInstance = () => {
      currentInstance && currentInstance.scope.off();
      currentInstance = null;
    };
    const isBuiltInTag = /* @__PURE__ */ makeMap("slot,component");
    function validateComponentName(name, config) {
      const appIsNativeTag = config.isNativeTag || NO;
      if (isBuiltInTag(name) || appIsNativeTag(name)) {
        warn$1("Do not use built-in or reserved HTML elements as component id: " + name);
      }
    }
    function isStatefulComponent(instance) {
      return instance.vnode.shapeFlag & 4;
    }
    let isInSSRComponentSetup = false;
    function setupComponent(instance, isSSR = false) {
      isInSSRComponentSetup = isSSR;
      const { props, children } = instance.vnode;
      const isStateful = isStatefulComponent(instance);
      initProps(instance, props, isStateful, isSSR);
      initSlots(instance, children);
      const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
      isInSSRComponentSetup = false;
      return setupResult;
    }
    function setupStatefulComponent(instance, isSSR) {
      var _a;
      const Component = instance.type;
      {
        if (Component.name) {
          validateComponentName(Component.name, instance.appContext.config);
        }
        if (Component.components) {
          const names = Object.keys(Component.components);
          for (let i = 0; i < names.length; i++) {
            validateComponentName(names[i], instance.appContext.config);
          }
        }
        if (Component.directives) {
          const names = Object.keys(Component.directives);
          for (let i = 0; i < names.length; i++) {
            validateDirectiveName(names[i]);
          }
        }
        if (Component.compilerOptions && isRuntimeOnly()) {
          warn$1(`"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.`);
        }
      }
      instance.accessCache = /* @__PURE__ */ Object.create(null);
      instance.proxy = markRaw(new Proxy(instance.ctx, PublicInstanceProxyHandlers));
      {
        exposePropsOnRenderContext(instance);
      }
      const { setup } = Component;
      if (setup) {
        const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
        setCurrentInstance(instance);
        pauseTracking();
        const setupResult = callWithErrorHandling(setup, instance, 0, [shallowReadonly(instance.props), setupContext]);
        resetTracking();
        unsetCurrentInstance();
        if (isPromise(setupResult)) {
          setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
          if (isSSR) {
            return setupResult.then((resolvedResult) => {
              handleSetupResult(instance, resolvedResult, isSSR);
            }).catch((e) => {
              handleError(e, instance, 0);
            });
          } else {
            instance.asyncDep = setupResult;
            if (!instance.suspense) {
              const name = (_a = Component.name) !== null && _a !== void 0 ? _a : "Anonymous";
              warn$1(`Component <${name}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`);
            }
          }
        } else {
          handleSetupResult(instance, setupResult, isSSR);
        }
      } else {
        finishComponentSetup(instance, isSSR);
      }
    }
    function handleSetupResult(instance, setupResult, isSSR) {
      if (isFunction(setupResult)) {
        {
          instance.render = setupResult;
        }
      } else if (isObject(setupResult)) {
        if (isVNode(setupResult)) {
          warn$1(`setup() should not return VNodes directly - return a render function instead.`);
        }
        {
          instance.devtoolsRawSetupState = setupResult;
        }
        instance.setupState = proxyRefs(setupResult);
        {
          exposeSetupStateOnRenderContext(instance);
        }
      } else if (setupResult !== void 0) {
        warn$1(`setup() should return an object. Received: ${setupResult === null ? "null" : typeof setupResult}`);
      }
      finishComponentSetup(instance, isSSR);
    }
    let compile;
    let installWithProxy;
    function registerRuntimeCompiler(_compile) {
      compile = _compile;
      installWithProxy = (i) => {
        if (i.render._rc) {
          i.withProxy = new Proxy(i.ctx, RuntimeCompiledPublicInstanceProxyHandlers);
        }
      };
    }
    const isRuntimeOnly = () => !compile;
    function finishComponentSetup(instance, isSSR, skipOptions) {
      const Component = instance.type;
      if (!instance.render) {
        if (!isSSR && compile && !Component.render) {
          const template = Component.template;
          if (template) {
            {
              startMeasure(instance, `compile`);
            }
            const { isCustomElement, compilerOptions } = instance.appContext.config;
            const { delimiters, compilerOptions: componentCompilerOptions } = Component;
            const finalCompilerOptions = extend(extend({
              isCustomElement,
              delimiters
            }, compilerOptions), componentCompilerOptions);
            Component.render = compile(template, finalCompilerOptions);
            {
              endMeasure(instance, `compile`);
            }
          }
        }
        instance.render = Component.render || NOOP;
        if (installWithProxy) {
          installWithProxy(instance);
        }
      }
      {
        setCurrentInstance(instance);
        pauseTracking();
        applyOptions(instance);
        resetTracking();
        unsetCurrentInstance();
      }
      if (!Component.render && instance.render === NOOP && !isSSR) {
        if (!compile && Component.template) {
          warn$1(`Component provided template option but runtime compilation is not supported in this build of Vue. Use "vue.global.js" instead.`);
        } else {
          warn$1(`Component is missing template or render function.`);
        }
      }
    }
    function createAttrsProxy(instance) {
      return new Proxy(
        instance.attrs,
        {
          get(target, key) {
            markAttrsAccessed();
            track(instance, "get", "$attrs");
            return target[key];
          },
          set() {
            warn$1(`setupContext.attrs is readonly.`);
            return false;
          },
          deleteProperty() {
            warn$1(`setupContext.attrs is readonly.`);
            return false;
          }
        }
      );
    }
    function createSetupContext(instance) {
      const expose = (exposed) => {
        if (instance.exposed) {
          warn$1(`expose() should be called only once per setup().`);
        }
        instance.exposed = exposed || {};
      };
      let attrs;
      {
        return Object.freeze({
          get attrs() {
            return attrs || (attrs = createAttrsProxy(instance));
          },
          get slots() {
            return shallowReadonly(instance.slots);
          },
          get emit() {
            return (event, ...args) => instance.emit(event, ...args);
          },
          expose
        });
      }
    }
    function getExposeProxy(instance) {
      if (instance.exposed) {
        return instance.exposeProxy || (instance.exposeProxy = new Proxy(proxyRefs(markRaw(instance.exposed)), {
          get(target, key) {
            if (key in target) {
              return target[key];
            } else if (key in publicPropertiesMap) {
              return publicPropertiesMap[key](instance);
            }
          }
        }));
      }
    }
    const classifyRE = /(?:^|[-_])(\w)/g;
    const classify = (str) => str.replace(classifyRE, (c) => c.toUpperCase()).replace(/[-_]/g, "");
    function getComponentName(Component) {
      return isFunction(Component) ? Component.displayName || Component.name : Component.name;
    }
    function formatComponentName(instance, Component, isRoot = false) {
      let name = getComponentName(Component);
      if (!name && Component.__file) {
        const match = Component.__file.match(/([^/\\]+)\.\w+$/);
        if (match) {
          name = match[1];
        }
      }
      if (!name && instance && instance.parent) {
        const inferFromRegistry = (registry) => {
          for (const key in registry) {
            if (registry[key] === Component) {
              return key;
            }
          }
        };
        name = inferFromRegistry(instance.components || instance.parent.type.components) || inferFromRegistry(instance.appContext.components);
      }
      return name ? classify(name) : isRoot ? `App` : `Anonymous`;
    }
    function isClassComponent(value) {
      return isFunction(value) && "__vccOpts" in value;
    }
    const computed$1 = (getterOrOptions, debugOptions) => {
      return computed(getterOrOptions, debugOptions, isInSSRComponentSetup);
    };
    const warnRuntimeUsage = (method) => warn$1(`${method}() is a compiler-hint helper that is only usable inside <script setup> of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.`);
    function defineProps() {
      {
        warnRuntimeUsage(`defineProps`);
      }
      return null;
    }
    function defineEmits() {
      {
        warnRuntimeUsage(`defineEmits`);
      }
      return null;
    }
    function defineExpose(exposed) {
      {
        warnRuntimeUsage(`defineExpose`);
      }
    }
    function withDefaults(props, defaults) {
      {
        warnRuntimeUsage(`withDefaults`);
      }
      return null;
    }
    function useSlots() {
      return getContext().slots;
    }
    function useAttrs() {
      return getContext().attrs;
    }
    function getContext() {
      const i = getCurrentInstance();
      if (!i) {
        warn$1(`useContext() called without active instance.`);
      }
      return i.setupContext || (i.setupContext = createSetupContext(i));
    }
    function mergeDefaults(raw, defaults) {
      const props = isArray(raw) ? raw.reduce((normalized, p2) => (normalized[p2] = {}, normalized), {}) : raw;
      for (const key in defaults) {
        const opt = props[key];
        if (opt) {
          if (isArray(opt) || isFunction(opt)) {
            props[key] = { type: opt, default: defaults[key] };
          } else {
            opt.default = defaults[key];
          }
        } else if (opt === null) {
          props[key] = { default: defaults[key] };
        } else {
          warn$1(`props default key "${key}" has no corresponding declaration.`);
        }
      }
      return props;
    }
    function createPropsRestProxy(props, excludedKeys) {
      const ret = {};
      for (const key in props) {
        if (!excludedKeys.includes(key)) {
          Object.defineProperty(ret, key, {
            enumerable: true,
            get: () => props[key]
          });
        }
      }
      return ret;
    }
    function withAsyncContext(getAwaitable) {
      const ctx = getCurrentInstance();
      if (!ctx) {
        warn$1(`withAsyncContext called without active current instance. This is likely a bug.`);
      }
      let awaitable = getAwaitable();
      unsetCurrentInstance();
      if (isPromise(awaitable)) {
        awaitable = awaitable.catch((e) => {
          setCurrentInstance(ctx);
          throw e;
        });
      }
      return [awaitable, () => setCurrentInstance(ctx)];
    }
    function h(type, propsOrChildren, children) {
      const l = arguments.length;
      if (l === 2) {
        if (isObject(propsOrChildren) && !isArray(propsOrChildren)) {
          if (isVNode(propsOrChildren)) {
            return createVNode(type, null, [propsOrChildren]);
          }
          return createVNode(type, propsOrChildren);
        } else {
          return createVNode(type, null, propsOrChildren);
        }
      } else {
        if (l > 3) {
          children = Array.prototype.slice.call(arguments, 2);
        } else if (l === 3 && isVNode(children)) {
          children = [children];
        }
        return createVNode(type, propsOrChildren, children);
      }
    }
    const ssrContextKey = Symbol(`ssrContext`);
    const useSSRContext = () => {
      {
        warn$1(`useSSRContext() is not supported in the global build.`);
      }
    };
    function initCustomFormatter() {
      if (typeof window === "undefined") {
        return;
      }
      const vueStyle = { style: "color:#3ba776" };
      const numberStyle = { style: "color:#0b1bc9" };
      const stringStyle = { style: "color:#b62e24" };
      const keywordStyle = { style: "color:#9d288c" };
      const formatter = {
        header(obj) {
          if (!isObject(obj)) {
            return null;
          }
          if (obj.__isVue) {
            return ["div", vueStyle, `VueInstance`];
          } else if (isRef(obj)) {
            return [
              "div",
              {},
              ["span", vueStyle, genRefFlag(obj)],
              "<",
              formatValue(obj.value),
              `>`
            ];
          } else if (isReactive(obj)) {
            return [
              "div",
              {},
              ["span", vueStyle, isShallow(obj) ? "ShallowReactive" : "Reactive"],
              "<",
              formatValue(obj),
              `>${isReadonly(obj) ? ` (readonly)` : ``}`
            ];
          } else if (isReadonly(obj)) {
            return [
              "div",
              {},
              ["span", vueStyle, isShallow(obj) ? "ShallowReadonly" : "Readonly"],
              "<",
              formatValue(obj),
              ">"
            ];
          }
          return null;
        },
        hasBody(obj) {
          return obj && obj.__isVue;
        },
        body(obj) {
          if (obj && obj.__isVue) {
            return [
              "div",
              {},
              ...formatInstance(obj.$)
            ];
          }
        }
      };
      function formatInstance(instance) {
        const blocks = [];
        if (instance.type.props && instance.props) {
          blocks.push(createInstanceBlock("props", toRaw(instance.props)));
        }
        if (instance.setupState !== EMPTY_OBJ) {
          blocks.push(createInstanceBlock("setup", instance.setupState));
        }
        if (instance.data !== EMPTY_OBJ) {
          blocks.push(createInstanceBlock("data", toRaw(instance.data)));
        }
        const computed2 = extractKeys(instance, "computed");
        if (computed2) {
          blocks.push(createInstanceBlock("computed", computed2));
        }
        const injected = extractKeys(instance, "inject");
        if (injected) {
          blocks.push(createInstanceBlock("injected", injected));
        }
        blocks.push([
          "div",
          {},
          [
            "span",
            {
              style: keywordStyle.style + ";opacity:0.66"
            },
            "$ (internal): "
          ],
          ["object", { object: instance }]
        ]);
        return blocks;
      }
      function createInstanceBlock(type, target) {
        target = extend({}, target);
        if (!Object.keys(target).length) {
          return ["span", {}];
        }
        return [
          "div",
          { style: "line-height:1.25em;margin-bottom:0.6em" },
          [
            "div",
            {
              style: "color:#476582"
            },
            type
          ],
          [
            "div",
            {
              style: "padding-left:1.25em"
            },
            ...Object.keys(target).map((key) => {
              return [
                "div",
                {},
                ["span", keywordStyle, key + ": "],
                formatValue(target[key], false)
              ];
            })
          ]
        ];
      }
      function formatValue(v, asRaw = true) {
        if (typeof v === "number") {
          return ["span", numberStyle, v];
        } else if (typeof v === "string") {
          return ["span", stringStyle, JSON.stringify(v)];
        } else if (typeof v === "boolean") {
          return ["span", keywordStyle, v];
        } else if (isObject(v)) {
          return ["object", { object: asRaw ? toRaw(v) : v }];
        } else {
          return ["span", stringStyle, String(v)];
        }
      }
      function extractKeys(instance, type) {
        const Comp = instance.type;
        if (isFunction(Comp)) {
          return;
        }
        const extracted = {};
        for (const key in instance.ctx) {
          if (isKeyOfType(Comp, key, type)) {
            extracted[key] = instance.ctx[key];
          }
        }
        return extracted;
      }
      function isKeyOfType(Comp, key, type) {
        const opts = Comp[type];
        if (isArray(opts) && opts.includes(key) || isObject(opts) && key in opts) {
          return true;
        }
        if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {
          return true;
        }
        if (Comp.mixins && Comp.mixins.some((m) => isKeyOfType(m, key, type))) {
          return true;
        }
      }
      function genRefFlag(v) {
        if (isShallow(v)) {
          return `ShallowRef`;
        }
        if (v.effect) {
          return `ComputedRef`;
        }
        return `Ref`;
      }
      if (window.devtoolsFormatters) {
        window.devtoolsFormatters.push(formatter);
      } else {
        window.devtoolsFormatters = [formatter];
      }
    }
    function withMemo(memo, render2, cache, index) {
      const cached = cache[index];
      if (cached && isMemoSame(cached, memo)) {
        return cached;
      }
      const ret = render2();
      ret.memo = memo.slice();
      return cache[index] = ret;
    }
    function isMemoSame(cached, memo) {
      const prev = cached.memo;
      if (prev.length != memo.length) {
        return false;
      }
      for (let i = 0; i < prev.length; i++) {
        if (hasChanged(prev[i], memo[i])) {
          return false;
        }
      }
      if (isBlockTreeEnabled > 0 && currentBlock) {
        currentBlock.push(cached);
      }
      return true;
    }
    const version2 = "3.2.36";
    const ssrUtils = null;
    const resolveFilter = null;
    const compatUtils = null;
    const svgNS = "http://www.w3.org/2000/svg";
    const doc = typeof document !== "undefined" ? document : null;
    const templateContainer = doc && /* @__PURE__ */ doc.createElement("template");
    const nodeOps = {
      insert: (child, parent, anchor) => {
        parent.insertBefore(child, anchor || null);
      },
      remove: (child) => {
        const parent = child.parentNode;
        if (parent) {
          parent.removeChild(child);
        }
      },
      createElement: (tag, isSVG, is, props) => {
        const el = isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is ? { is } : void 0);
        if (tag === "select" && props && props.multiple != null) {
          el.setAttribute("multiple", props.multiple);
        }
        return el;
      },
      createText: (text) => doc.createTextNode(text),
      createComment: (text) => doc.createComment(text),
      setText: (node, text) => {
        node.nodeValue = text;
      },
      setElementText: (el, text) => {
        el.textContent = text;
      },
      parentNode: (node) => node.parentNode,
      nextSibling: (node) => node.nextSibling,
      querySelector: (selector) => doc.querySelector(selector),
      setScopeId(el, id) {
        el.setAttribute(id, "");
      },
      cloneNode(el) {
        const cloned = el.cloneNode(true);
        if (`_value` in el) {
          cloned._value = el._value;
        }
        return cloned;
      },
      insertStaticContent(content, parent, anchor, isSVG, start, end) {
        const before = anchor ? anchor.previousSibling : parent.lastChild;
        if (start && (start === end || start.nextSibling)) {
          while (true) {
            parent.insertBefore(start.cloneNode(true), anchor);
            if (start === end || !(start = start.nextSibling))
              break;
          }
        } else {
          templateContainer.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
          const template = templateContainer.content;
          if (isSVG) {
            const wrapper = template.firstChild;
            while (wrapper.firstChild) {
              template.appendChild(wrapper.firstChild);
            }
            template.removeChild(wrapper);
          }
          parent.insertBefore(template, anchor);
        }
        return [
          before ? before.nextSibling : parent.firstChild,
          anchor ? anchor.previousSibling : parent.lastChild
        ];
      }
    };
    function patchClass(el, value, isSVG) {
      const transitionClasses = el._vtc;
      if (transitionClasses) {
        value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(" ");
      }
      if (value == null) {
        el.removeAttribute("class");
      } else if (isSVG) {
        el.setAttribute("class", value);
      } else {
        el.className = value;
      }
    }
    function patchStyle(el, prev, next) {
      const style = el.style;
      const isCssString = isString(next);
      if (next && !isCssString) {
        for (const key in next) {
          setStyle(style, key, next[key]);
        }
        if (prev && !isString(prev)) {
          for (const key in prev) {
            if (next[key] == null) {
              setStyle(style, key, "");
            }
          }
        }
      } else {
        const currentDisplay = style.display;
        if (isCssString) {
          if (prev !== next) {
            style.cssText = next;
          }
        } else if (prev) {
          el.removeAttribute("style");
        }
        if ("_vod" in el) {
          style.display = currentDisplay;
        }
      }
    }
    const importantRE = /\s*!important$/;
    function setStyle(style, name, val) {
      if (isArray(val)) {
        val.forEach((v) => setStyle(style, name, v));
      } else {
        if (val == null)
          val = "";
        if (name.startsWith("--")) {
          style.setProperty(name, val);
        } else {
          const prefixed = autoPrefix(style, name);
          if (importantRE.test(val)) {
            style.setProperty(hyphenate(prefixed), val.replace(importantRE, ""), "important");
          } else {
            style[prefixed] = val;
          }
        }
      }
    }
    const prefixes = ["Webkit", "Moz", "ms"];
    const prefixCache = {};
    function autoPrefix(style, rawName) {
      const cached = prefixCache[rawName];
      if (cached) {
        return cached;
      }
      let name = camelize(rawName);
      if (name !== "filter" && name in style) {
        return prefixCache[rawName] = name;
      }
      name = capitalize(name);
      for (let i = 0; i < prefixes.length; i++) {
        const prefixed = prefixes[i] + name;
        if (prefixed in style) {
          return prefixCache[rawName] = prefixed;
        }
      }
      return rawName;
    }
    const xlinkNS = "http://www.w3.org/1999/xlink";
    function patchAttr(el, key, value, isSVG, instance) {
      if (isSVG && key.startsWith("xlink:")) {
        if (value == null) {
          el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
        } else {
          el.setAttributeNS(xlinkNS, key, value);
        }
      } else {
        const isBoolean2 = isSpecialBooleanAttr(key);
        if (value == null || isBoolean2 && !includeBooleanAttr(value)) {
          el.removeAttribute(key);
        } else {
          el.setAttribute(key, isBoolean2 ? "" : value);
        }
      }
    }
    function patchDOMProp(el, key, value, prevChildren, parentComponent, parentSuspense, unmountChildren) {
      if (key === "innerHTML" || key === "textContent") {
        if (prevChildren) {
          unmountChildren(prevChildren, parentComponent, parentSuspense);
        }
        el[key] = value == null ? "" : value;
        return;
      }
      if (key === "value" && el.tagName !== "PROGRESS" && !el.tagName.includes("-")) {
        el._value = value;
        const newValue = value == null ? "" : value;
        if (el.value !== newValue || el.tagName === "OPTION") {
          el.value = newValue;
        }
        if (value == null) {
          el.removeAttribute(key);
        }
        return;
      }
      let needRemove = false;
      if (value === "" || value == null) {
        const type = typeof el[key];
        if (type === "boolean") {
          value = includeBooleanAttr(value);
        } else if (value == null && type === "string") {
          value = "";
          needRemove = true;
        } else if (type === "number") {
          value = 0;
          needRemove = true;
        }
      }
      try {
        el[key] = value;
      } catch (e) {
        {
          warn$1(`Failed setting prop "${key}" on <${el.tagName.toLowerCase()}>: value ${value} is invalid.`, e);
        }
      }
      needRemove && el.removeAttribute(key);
    }
    const [_getNow, skipTimestampCheck] = /* @__PURE__ */ (() => {
      let _getNow2 = Date.now;
      let skipTimestampCheck2 = false;
      if (typeof window !== "undefined") {
        if (Date.now() > document.createEvent("Event").timeStamp) {
          _getNow2 = performance.now.bind(performance);
        }
        const ffMatch = navigator.userAgent.match(/firefox\/(\d+)/i);
        skipTimestampCheck2 = !!(ffMatch && Number(ffMatch[1]) <= 53);
      }
      return [_getNow2, skipTimestampCheck2];
    })();
    let cachedNow = 0;
    const p = /* @__PURE__ */ Promise.resolve();
    const reset = () => {
      cachedNow = 0;
    };
    const getNow = () => cachedNow || (p.then(reset), cachedNow = _getNow());
    function addEventListener(el, event, handler, options) {
      el.addEventListener(event, handler, options);
    }
    function removeEventListener(el, event, handler, options) {
      el.removeEventListener(event, handler, options);
    }
    function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
      const invokers = el._vei || (el._vei = {});
      const existingInvoker = invokers[rawName];
      if (nextValue && existingInvoker) {
        existingInvoker.value = nextValue;
      } else {
        const [name, options] = parseName(rawName);
        if (nextValue) {
          const invoker = invokers[rawName] = createInvoker(nextValue, instance);
          addEventListener(el, name, invoker, options);
        } else if (existingInvoker) {
          removeEventListener(el, name, existingInvoker, options);
          invokers[rawName] = void 0;
        }
      }
    }
    const optionsModifierRE = /(?:Once|Passive|Capture)$/;
    function parseName(name) {
      let options;
      if (optionsModifierRE.test(name)) {
        options = {};
        let m;
        while (m = name.match(optionsModifierRE)) {
          name = name.slice(0, name.length - m[0].length);
          options[m[0].toLowerCase()] = true;
        }
      }
      return [hyphenate(name.slice(2)), options];
    }
    function createInvoker(initialValue, instance) {
      const invoker = (e) => {
        const timeStamp = e.timeStamp || _getNow();
        if (skipTimestampCheck || timeStamp >= invoker.attached - 1) {
          callWithAsyncErrorHandling(patchStopImmediatePropagation(e, invoker.value), instance, 5, [e]);
        }
      };
      invoker.value = initialValue;
      invoker.attached = getNow();
      return invoker;
    }
    function patchStopImmediatePropagation(e, value) {
      if (isArray(value)) {
        const originalStop = e.stopImmediatePropagation;
        e.stopImmediatePropagation = () => {
          originalStop.call(e);
          e._stopped = true;
        };
        return value.map((fn) => (e2) => !e2._stopped && fn && fn(e2));
      } else {
        return value;
      }
    }
    const nativeOnRE = /^on[a-z]/;
    const patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
      if (key === "class") {
        patchClass(el, nextValue, isSVG);
      } else if (key === "style") {
        patchStyle(el, prevValue, nextValue);
      } else if (isOn(key)) {
        if (!isModelListener(key)) {
          patchEvent(el, key, prevValue, nextValue, parentComponent);
        }
      } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el, key, nextValue, isSVG)) {
        patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);
      } else {
        if (key === "true-value") {
          el._trueValue = nextValue;
        } else if (key === "false-value") {
          el._falseValue = nextValue;
        }
        patchAttr(el, key, nextValue, isSVG);
      }
    };
    function shouldSetAsProp(el, key, value, isSVG) {
      if (isSVG) {
        if (key === "innerHTML" || key === "textContent") {
          return true;
        }
        if (key in el && nativeOnRE.test(key) && isFunction(value)) {
          return true;
        }
        return false;
      }
      if (key === "spellcheck" || key === "draggable" || key === "translate") {
        return false;
      }
      if (key === "form") {
        return false;
      }
      if (key === "list" && el.tagName === "INPUT") {
        return false;
      }
      if (key === "type" && el.tagName === "TEXTAREA") {
        return false;
      }
      if (nativeOnRE.test(key) && isString(value)) {
        return false;
      }
      return key in el;
    }
    function defineCustomElement(options, hydrate2) {
      const Comp = defineComponent(options);
      class VueCustomElement extends VueElement {
        constructor(initialProps) {
          super(Comp, initialProps, hydrate2);
        }
      }
      VueCustomElement.def = Comp;
      return VueCustomElement;
    }
    const defineSSRCustomElement = (options) => {
      return defineCustomElement(options, hydrate);
    };
    const BaseClass = typeof HTMLElement !== "undefined" ? HTMLElement : class {
    };
    class VueElement extends BaseClass {
      constructor(_def, _props = {}, hydrate2) {
        super();
        this._def = _def;
        this._props = _props;
        this._instance = null;
        this._connected = false;
        this._resolved = false;
        this._numberProps = null;
        if (this.shadowRoot && hydrate2) {
          hydrate2(this._createVNode(), this.shadowRoot);
        } else {
          if (this.shadowRoot) {
            warn$1(`Custom element has pre-rendered declarative shadow root but is not defined as hydratable. Use \`defineSSRCustomElement\`.`);
          }
          this.attachShadow({ mode: "open" });
        }
      }
      connectedCallback() {
        this._connected = true;
        if (!this._instance) {
          this._resolveDef();
        }
      }
      disconnectedCallback() {
        this._connected = false;
        nextTick(() => {
          if (!this._connected) {
            render(null, this.shadowRoot);
            this._instance = null;
          }
        });
      }
      _resolveDef() {
        if (this._resolved) {
          return;
        }
        this._resolved = true;
        for (let i = 0; i < this.attributes.length; i++) {
          this._setAttr(this.attributes[i].name);
        }
        new MutationObserver((mutations) => {
          for (const m of mutations) {
            this._setAttr(m.attributeName);
          }
        }).observe(this, { attributes: true });
        const resolve2 = (def2) => {
          const { props, styles } = def2;
          const hasOptions = !isArray(props);
          const rawKeys = props ? hasOptions ? Object.keys(props) : props : [];
          let numberProps;
          if (hasOptions) {
            for (const key in this._props) {
              const opt = props[key];
              if (opt === Number || opt && opt.type === Number) {
                this._props[key] = toNumber(this._props[key]);
                (numberProps || (numberProps = /* @__PURE__ */ Object.create(null)))[key] = true;
              }
            }
          }
          this._numberProps = numberProps;
          for (const key of Object.keys(this)) {
            if (key[0] !== "_") {
              this._setProp(key, this[key], true, false);
            }
          }
          for (const key of rawKeys.map(camelize)) {
            Object.defineProperty(this, key, {
              get() {
                return this._getProp(key);
              },
              set(val) {
                this._setProp(key, val);
              }
            });
          }
          this._applyStyles(styles);
          this._update();
        };
        const asyncDef = this._def.__asyncLoader;
        if (asyncDef) {
          asyncDef().then(resolve2);
        } else {
          resolve2(this._def);
        }
      }
      _setAttr(key) {
        let value = this.getAttribute(key);
        if (this._numberProps && this._numberProps[key]) {
          value = toNumber(value);
        }
        this._setProp(camelize(key), value, false);
      }
      _getProp(key) {
        return this._props[key];
      }
      _setProp(key, val, shouldReflect = true, shouldUpdate = true) {
        if (val !== this._props[key]) {
          this._props[key] = val;
          if (shouldUpdate && this._instance) {
            this._update();
          }
          if (shouldReflect) {
            if (val === true) {
              this.setAttribute(hyphenate(key), "");
            } else if (typeof val === "string" || typeof val === "number") {
              this.setAttribute(hyphenate(key), val + "");
            } else if (!val) {
              this.removeAttribute(hyphenate(key));
            }
          }
        }
      }
      _update() {
        render(this._createVNode(), this.shadowRoot);
      }
      _createVNode() {
        const vnode = createVNode(this._def, extend({}, this._props));
        if (!this._instance) {
          vnode.ce = (instance) => {
            this._instance = instance;
            instance.isCE = true;
            {
              instance.ceReload = (newStyles) => {
                if (this._styles) {
                  this._styles.forEach((s) => this.shadowRoot.removeChild(s));
                  this._styles.length = 0;
                }
                this._applyStyles(newStyles);
                if (!this._def.__asyncLoader) {
                  this._instance = null;
                  this._update();
                }
              };
            }
            instance.emit = (event, ...args) => {
              this.dispatchEvent(new CustomEvent(event, {
                detail: args
              }));
            };
            let parent = this;
            while (parent = parent && (parent.parentNode || parent.host)) {
              if (parent instanceof VueElement) {
                instance.parent = parent._instance;
                break;
              }
            }
          };
        }
        return vnode;
      }
      _applyStyles(styles) {
        if (styles) {
          styles.forEach((css) => {
            const s = document.createElement("style");
            s.textContent = css;
            this.shadowRoot.appendChild(s);
            {
              (this._styles || (this._styles = [])).push(s);
            }
          });
        }
      }
    }
    function useCssModule(name = "$style") {
      {
        {
          warn$1(`useCssModule() is not supported in the global build.`);
        }
        return EMPTY_OBJ;
      }
    }
    function useCssVars(getter) {
      const instance = getCurrentInstance();
      if (!instance) {
        warn$1(`useCssVars is called without current active component instance.`);
        return;
      }
      const setVars = () => setVarsOnVNode(instance.subTree, getter(instance.proxy));
      watchPostEffect(setVars);
      onMounted(() => {
        const ob = new MutationObserver(setVars);
        ob.observe(instance.subTree.el.parentNode, { childList: true });
        onUnmounted(() => ob.disconnect());
      });
    }
    function setVarsOnVNode(vnode, vars) {
      if (vnode.shapeFlag & 128) {
        const suspense = vnode.suspense;
        vnode = suspense.activeBranch;
        if (suspense.pendingBranch && !suspense.isHydrating) {
          suspense.effects.push(() => {
            setVarsOnVNode(suspense.activeBranch, vars);
          });
        }
      }
      while (vnode.component) {
        vnode = vnode.component.subTree;
      }
      if (vnode.shapeFlag & 1 && vnode.el) {
        setVarsOnNode(vnode.el, vars);
      } else if (vnode.type === Fragment) {
        vnode.children.forEach((c) => setVarsOnVNode(c, vars));
      } else if (vnode.type === Static) {
        let { el, anchor } = vnode;
        while (el) {
          setVarsOnNode(el, vars);
          if (el === anchor)
            break;
          el = el.nextSibling;
        }
      }
    }
    function setVarsOnNode(el, vars) {
      if (el.nodeType === 1) {
        const style = el.style;
        for (const key in vars) {
          style.setProperty(`--${key}`, vars[key]);
        }
      }
    }
    const TRANSITION = "transition";
    const ANIMATION = "animation";
    const Transition = (props, { slots }) => h(BaseTransition, resolveTransitionProps(props), slots);
    Transition.displayName = "Transition";
    const DOMTransitionPropsValidators = {
      name: String,
      type: String,
      css: {
        type: Boolean,
        default: true
      },
      duration: [String, Number, Object],
      enterFromClass: String,
      enterActiveClass: String,
      enterToClass: String,
      appearFromClass: String,
      appearActiveClass: String,
      appearToClass: String,
      leaveFromClass: String,
      leaveActiveClass: String,
      leaveToClass: String
    };
    const TransitionPropsValidators = Transition.props = /* @__PURE__ */ extend({}, BaseTransition.props, DOMTransitionPropsValidators);
    const callHook$1 = (hook, args = []) => {
      if (isArray(hook)) {
        hook.forEach((h2) => h2(...args));
      } else if (hook) {
        hook(...args);
      }
    };
    const hasExplicitCallback = (hook) => {
      return hook ? isArray(hook) ? hook.some((h2) => h2.length > 1) : hook.length > 1 : false;
    };
    function resolveTransitionProps(rawProps) {
      const baseProps = {};
      for (const key in rawProps) {
        if (!(key in DOMTransitionPropsValidators)) {
          baseProps[key] = rawProps[key];
        }
      }
      if (rawProps.css === false) {
        return baseProps;
      }
      const { name = "v", type, duration, enterFromClass = `${name}-enter-from`, enterActiveClass = `${name}-enter-active`, enterToClass = `${name}-enter-to`, appearFromClass = enterFromClass, appearActiveClass = enterActiveClass, appearToClass = enterToClass, leaveFromClass = `${name}-leave-from`, leaveActiveClass = `${name}-leave-active`, leaveToClass = `${name}-leave-to` } = rawProps;
      const durations = normalizeDuration(duration);
      const enterDuration = durations && durations[0];
      const leaveDuration = durations && durations[1];
      const { onBeforeEnter, onEnter, onEnterCancelled, onLeave, onLeaveCancelled, onBeforeAppear = onBeforeEnter, onAppear = onEnter, onAppearCancelled = onEnterCancelled } = baseProps;
      const finishEnter = (el, isAppear, done) => {
        removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
        removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
        done && done();
      };
      const finishLeave = (el, done) => {
        el._isLeaving = false;
        removeTransitionClass(el, leaveFromClass);
        removeTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveActiveClass);
        done && done();
      };
      const makeEnterHook = (isAppear) => {
        return (el, done) => {
          const hook = isAppear ? onAppear : onEnter;
          const resolve2 = () => finishEnter(el, isAppear, done);
          callHook$1(hook, [el, resolve2]);
          nextFrame(() => {
            removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
            addTransitionClass(el, isAppear ? appearToClass : enterToClass);
            if (!hasExplicitCallback(hook)) {
              whenTransitionEnds(el, type, enterDuration, resolve2);
            }
          });
        };
      };
      return extend(baseProps, {
        onBeforeEnter(el) {
          callHook$1(onBeforeEnter, [el]);
          addTransitionClass(el, enterFromClass);
          addTransitionClass(el, enterActiveClass);
        },
        onBeforeAppear(el) {
          callHook$1(onBeforeAppear, [el]);
          addTransitionClass(el, appearFromClass);
          addTransitionClass(el, appearActiveClass);
        },
        onEnter: makeEnterHook(false),
        onAppear: makeEnterHook(true),
        onLeave(el, done) {
          el._isLeaving = true;
          const resolve2 = () => finishLeave(el, done);
          addTransitionClass(el, leaveFromClass);
          forceReflow();
          addTransitionClass(el, leaveActiveClass);
          nextFrame(() => {
            if (!el._isLeaving) {
              return;
            }
            removeTransitionClass(el, leaveFromClass);
            addTransitionClass(el, leaveToClass);
            if (!hasExplicitCallback(onLeave)) {
              whenTransitionEnds(el, type, leaveDuration, resolve2);
            }
          });
          callHook$1(onLeave, [el, resolve2]);
        },
        onEnterCancelled(el) {
          finishEnter(el, false);
          callHook$1(onEnterCancelled, [el]);
        },
        onAppearCancelled(el) {
          finishEnter(el, true);
          callHook$1(onAppearCancelled, [el]);
        },
        onLeaveCancelled(el) {
          finishLeave(el);
          callHook$1(onLeaveCancelled, [el]);
        }
      });
    }
    function normalizeDuration(duration) {
      if (duration == null) {
        return null;
      } else if (isObject(duration)) {
        return [NumberOf(duration.enter), NumberOf(duration.leave)];
      } else {
        const n = NumberOf(duration);
        return [n, n];
      }
    }
    function NumberOf(val) {
      const res = toNumber(val);
      validateDuration(res);
      return res;
    }
    function validateDuration(val) {
      if (typeof val !== "number") {
        warn$1(`<transition> explicit duration is not a valid number - got ${JSON.stringify(val)}.`);
      } else if (isNaN(val)) {
        warn$1(`<transition> explicit duration is NaN - the duration expression might be incorrect.`);
      }
    }
    function addTransitionClass(el, cls) {
      cls.split(/\s+/).forEach((c) => c && el.classList.add(c));
      (el._vtc || (el._vtc = /* @__PURE__ */ new Set())).add(cls);
    }
    function removeTransitionClass(el, cls) {
      cls.split(/\s+/).forEach((c) => c && el.classList.remove(c));
      const { _vtc } = el;
      if (_vtc) {
        _vtc.delete(cls);
        if (!_vtc.size) {
          el._vtc = void 0;
        }
      }
    }
    function nextFrame(cb) {
      requestAnimationFrame(() => {
        requestAnimationFrame(cb);
      });
    }
    let endId = 0;
    function whenTransitionEnds(el, expectedType, explicitTimeout, resolve2) {
      const id = el._endId = ++endId;
      const resolveIfNotStale = () => {
        if (id === el._endId) {
          resolve2();
        }
      };
      if (explicitTimeout) {
        return setTimeout(resolveIfNotStale, explicitTimeout);
      }
      const { type, timeout, propCount } = getTransitionInfo(el, expectedType);
      if (!type) {
        return resolve2();
      }
      const endEvent = type + "end";
      let ended = 0;
      const end = () => {
        el.removeEventListener(endEvent, onEnd);
        resolveIfNotStale();
      };
      const onEnd = (e) => {
        if (e.target === el && ++ended >= propCount) {
          end();
        }
      };
      setTimeout(() => {
        if (ended < propCount) {
          end();
        }
      }, timeout + 1);
      el.addEventListener(endEvent, onEnd);
    }
    function getTransitionInfo(el, expectedType) {
      const styles = window.getComputedStyle(el);
      const getStyleProperties = (key) => (styles[key] || "").split(", ");
      const transitionDelays = getStyleProperties(TRANSITION + "Delay");
      const transitionDurations = getStyleProperties(TRANSITION + "Duration");
      const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
      const animationDelays = getStyleProperties(ANIMATION + "Delay");
      const animationDurations = getStyleProperties(ANIMATION + "Duration");
      const animationTimeout = getTimeout(animationDelays, animationDurations);
      let type = null;
      let timeout = 0;
      let propCount = 0;
      if (expectedType === TRANSITION) {
        if (transitionTimeout > 0) {
          type = TRANSITION;
          timeout = transitionTimeout;
          propCount = transitionDurations.length;
        }
      } else if (expectedType === ANIMATION) {
        if (animationTimeout > 0) {
          type = ANIMATION;
          timeout = animationTimeout;
          propCount = animationDurations.length;
        }
      } else {
        timeout = Math.max(transitionTimeout, animationTimeout);
        type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
        propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
      }
      const hasTransform = type === TRANSITION && /\b(transform|all)(,|$)/.test(styles[TRANSITION + "Property"]);
      return {
        type,
        timeout,
        propCount,
        hasTransform
      };
    }
    function getTimeout(delays, durations) {
      while (delays.length < durations.length) {
        delays = delays.concat(delays);
      }
      return Math.max(...durations.map((d, i) => toMs(d) + toMs(delays[i])));
    }
    function toMs(s) {
      return Number(s.slice(0, -1).replace(",", ".")) * 1e3;
    }
    function forceReflow() {
      return document.body.offsetHeight;
    }
    const positionMap = /* @__PURE__ */ new WeakMap();
    const newPositionMap = /* @__PURE__ */ new WeakMap();
    const TransitionGroupImpl = {
      name: "TransitionGroup",
      props: /* @__PURE__ */ extend({}, TransitionPropsValidators, {
        tag: String,
        moveClass: String
      }),
      setup(props, { slots }) {
        const instance = getCurrentInstance();
        const state = useTransitionState();
        let prevChildren;
        let children;
        onUpdated(() => {
          if (!prevChildren.length) {
            return;
          }
          const moveClass = props.moveClass || `${props.name || "v"}-move`;
          if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) {
            return;
          }
          prevChildren.forEach(callPendingCbs);
          prevChildren.forEach(recordPosition);
          const movedChildren = prevChildren.filter(applyTranslation);
          forceReflow();
          movedChildren.forEach((c) => {
            const el = c.el;
            const style = el.style;
            addTransitionClass(el, moveClass);
            style.transform = style.webkitTransform = style.transitionDuration = "";
            const cb = el._moveCb = (e) => {
              if (e && e.target !== el) {
                return;
              }
              if (!e || /transform$/.test(e.propertyName)) {
                el.removeEventListener("transitionend", cb);
                el._moveCb = null;
                removeTransitionClass(el, moveClass);
              }
            };
            el.addEventListener("transitionend", cb);
          });
        });
        return () => {
          const rawProps = toRaw(props);
          const cssTransitionProps = resolveTransitionProps(rawProps);
          let tag = rawProps.tag || Fragment;
          prevChildren = children;
          children = slots.default ? getTransitionRawChildren(slots.default()) : [];
          for (let i = 0; i < children.length; i++) {
            const child = children[i];
            if (child.key != null) {
              setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));
            } else {
              warn$1(`<TransitionGroup> children must be keyed.`);
            }
          }
          if (prevChildren) {
            for (let i = 0; i < prevChildren.length; i++) {
              const child = prevChildren[i];
              setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));
              positionMap.set(child, child.el.getBoundingClientRect());
            }
          }
          return createVNode(tag, null, children);
        };
      }
    };
    const TransitionGroup = TransitionGroupImpl;
    function callPendingCbs(c) {
      const el = c.el;
      if (el._moveCb) {
        el._moveCb();
      }
      if (el._enterCb) {
        el._enterCb();
      }
    }
    function recordPosition(c) {
      newPositionMap.set(c, c.el.getBoundingClientRect());
    }
    function applyTranslation(c) {
      const oldPos = positionMap.get(c);
      const newPos = newPositionMap.get(c);
      const dx = oldPos.left - newPos.left;
      const dy = oldPos.top - newPos.top;
      if (dx || dy) {
        const s = c.el.style;
        s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;
        s.transitionDuration = "0s";
        return c;
      }
    }
    function hasCSSTransform(el, root, moveClass) {
      const clone = el.cloneNode();
      if (el._vtc) {
        el._vtc.forEach((cls) => {
          cls.split(/\s+/).forEach((c) => c && clone.classList.remove(c));
        });
      }
      moveClass.split(/\s+/).forEach((c) => c && clone.classList.add(c));
      clone.style.display = "none";
      const container = root.nodeType === 1 ? root : root.parentNode;
      container.appendChild(clone);
      const { hasTransform } = getTransitionInfo(clone);
      container.removeChild(clone);
      return hasTransform;
    }
    const getModelAssigner = (vnode) => {
      const fn = vnode.props["onUpdate:modelValue"] || false;
      return isArray(fn) ? (value) => invokeArrayFns(fn, value) : fn;
    };
    function onCompositionStart(e) {
      e.target.composing = true;
    }
    function onCompositionEnd(e) {
      const target = e.target;
      if (target.composing) {
        target.composing = false;
        target.dispatchEvent(new Event("input"));
      }
    }
    const vModelText = {
      created(el, { modifiers: { lazy, trim, number } }, vnode) {
        el._assign = getModelAssigner(vnode);
        const castToNumber = number || vnode.props && vnode.props.type === "number";
        addEventListener(el, lazy ? "change" : "input", (e) => {
          if (e.target.composing)
            return;
          let domValue = el.value;
          if (trim) {
            domValue = domValue.trim();
          }
          if (castToNumber) {
            domValue = toNumber(domValue);
          }
          el._assign(domValue);
        });
        if (trim) {
          addEventListener(el, "change", () => {
            el.value = el.value.trim();
          });
        }
        if (!lazy) {
          addEventListener(el, "compositionstart", onCompositionStart);
          addEventListener(el, "compositionend", onCompositionEnd);
          addEventListener(el, "change", onCompositionEnd);
        }
      },
      mounted(el, { value }) {
        el.value = value == null ? "" : value;
      },
      beforeUpdate(el, { value, modifiers: { lazy, trim, number } }, vnode) {
        el._assign = getModelAssigner(vnode);
        if (el.composing)
          return;
        if (document.activeElement === el && el.type !== "range") {
          if (lazy) {
            return;
          }
          if (trim && el.value.trim() === value) {
            return;
          }
          if ((number || el.type === "number") && toNumber(el.value) === value) {
            return;
          }
        }
        const newValue = value == null ? "" : value;
        if (el.value !== newValue) {
          el.value = newValue;
        }
      }
    };
    const vModelCheckbox = {
      deep: true,
      created(el, _, vnode) {
        el._assign = getModelAssigner(vnode);
        addEventListener(el, "change", () => {
          const modelValue = el._modelValue;
          const elementValue = getValue(el);
          const checked = el.checked;
          const assign = el._assign;
          if (isArray(modelValue)) {
            const index = looseIndexOf(modelValue, elementValue);
            const found = index !== -1;
            if (checked && !found) {
              assign(modelValue.concat(elementValue));
            } else if (!checked && found) {
              const filtered = [...modelValue];
              filtered.splice(index, 1);
              assign(filtered);
            }
          } else if (isSet(modelValue)) {
            const cloned = new Set(modelValue);
            if (checked) {
              cloned.add(elementValue);
            } else {
              cloned.delete(elementValue);
            }
            assign(cloned);
          } else {
            assign(getCheckboxValue(el, checked));
          }
        });
      },
      mounted: setChecked,
      beforeUpdate(el, binding, vnode) {
        el._assign = getModelAssigner(vnode);
        setChecked(el, binding, vnode);
      }
    };
    function setChecked(el, { value, oldValue }, vnode) {
      el._modelValue = value;
      if (isArray(value)) {
        el.checked = looseIndexOf(value, vnode.props.value) > -1;
      } else if (isSet(value)) {
        el.checked = value.has(vnode.props.value);
      } else if (value !== oldValue) {
        el.checked = looseEqual(value, getCheckboxValue(el, true));
      }
    }
    const vModelRadio = {
      created(el, { value }, vnode) {
        el.checked = looseEqual(value, vnode.props.value);
        el._assign = getModelAssigner(vnode);
        addEventListener(el, "change", () => {
          el._assign(getValue(el));
        });
      },
      beforeUpdate(el, { value, oldValue }, vnode) {
        el._assign = getModelAssigner(vnode);
        if (value !== oldValue) {
          el.checked = looseEqual(value, vnode.props.value);
        }
      }
    };
    const vModelSelect = {
      deep: true,
      created(el, { value, modifiers: { number } }, vnode) {
        const isSetModel = isSet(value);
        addEventListener(el, "change", () => {
          const selectedVal = Array.prototype.filter.call(el.options, (o) => o.selected).map((o) => number ? toNumber(getValue(o)) : getValue(o));
          el._assign(el.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]);
        });
        el._assign = getModelAssigner(vnode);
      },
      mounted(el, { value }) {
        setSelected(el, value);
      },
      beforeUpdate(el, _binding, vnode) {
        el._assign = getModelAssigner(vnode);
      },
      updated(el, { value }) {
        setSelected(el, value);
      }
    };
    function setSelected(el, value) {
      const isMultiple = el.multiple;
      if (isMultiple && !isArray(value) && !isSet(value)) {
        warn$1(`<select multiple v-model> expects an Array or Set value for its binding, but got ${Object.prototype.toString.call(value).slice(8, -1)}.`);
        return;
      }
      for (let i = 0, l = el.options.length; i < l; i++) {
        const option = el.options[i];
        const optionValue = getValue(option);
        if (isMultiple) {
          if (isArray(value)) {
            option.selected = looseIndexOf(value, optionValue) > -1;
          } else {
            option.selected = value.has(optionValue);
          }
        } else {
          if (looseEqual(getValue(option), value)) {
            if (el.selectedIndex !== i)
              el.selectedIndex = i;
            return;
          }
        }
      }
      if (!isMultiple && el.selectedIndex !== -1) {
        el.selectedIndex = -1;
      }
    }
    function getValue(el) {
      return "_value" in el ? el._value : el.value;
    }
    function getCheckboxValue(el, checked) {
      const key = checked ? "_trueValue" : "_falseValue";
      return key in el ? el[key] : checked;
    }
    const vModelDynamic = {
      created(el, binding, vnode) {
        callModelHook(el, binding, vnode, null, "created");
      },
      mounted(el, binding, vnode) {
        callModelHook(el, binding, vnode, null, "mounted");
      },
      beforeUpdate(el, binding, vnode, prevVNode) {
        callModelHook(el, binding, vnode, prevVNode, "beforeUpdate");
      },
      updated(el, binding, vnode, prevVNode) {
        callModelHook(el, binding, vnode, prevVNode, "updated");
      }
    };
    function resolveDynamicModel(tagName, type) {
      switch (tagName) {
        case "SELECT":
          return vModelSelect;
        case "TEXTAREA":
          return vModelText;
        default:
          switch (type) {
            case "checkbox":
              return vModelCheckbox;
            case "radio":
              return vModelRadio;
            default:
              return vModelText;
          }
      }
    }
    function callModelHook(el, binding, vnode, prevVNode, hook) {
      const modelToUse = resolveDynamicModel(el.tagName, vnode.props && vnode.props.type);
      const fn = modelToUse[hook];
      fn && fn(el, binding, vnode, prevVNode);
    }
    const systemModifiers = ["ctrl", "shift", "alt", "meta"];
    const modifierGuards = {
      stop: (e) => e.stopPropagation(),
      prevent: (e) => e.preventDefault(),
      self: (e) => e.target !== e.currentTarget,
      ctrl: (e) => !e.ctrlKey,
      shift: (e) => !e.shiftKey,
      alt: (e) => !e.altKey,
      meta: (e) => !e.metaKey,
      left: (e) => "button" in e && e.button !== 0,
      middle: (e) => "button" in e && e.button !== 1,
      right: (e) => "button" in e && e.button !== 2,
      exact: (e, modifiers) => systemModifiers.some((m) => e[`${m}Key`] && !modifiers.includes(m))
    };
    const withModifiers = (fn, modifiers) => {
      return (event, ...args) => {
        for (let i = 0; i < modifiers.length; i++) {
          const guard = modifierGuards[modifiers[i]];
          if (guard && guard(event, modifiers))
            return;
        }
        return fn(event, ...args);
      };
    };
    const keyNames = {
      esc: "escape",
      space: " ",
      up: "arrow-up",
      left: "arrow-left",
      right: "arrow-right",
      down: "arrow-down",
      delete: "backspace"
    };
    const withKeys = (fn, modifiers) => {
      return (event) => {
        if (!("key" in event)) {
          return;
        }
        const eventKey = hyphenate(event.key);
        if (modifiers.some((k) => k === eventKey || keyNames[k] === eventKey)) {
          return fn(event);
        }
      };
    };
    const vShow = {
      beforeMount(el, { value }, { transition }) {
        el._vod = el.style.display === "none" ? "" : el.style.display;
        if (transition && value) {
          transition.beforeEnter(el);
        } else {
          setDisplay(el, value);
        }
      },
      mounted(el, { value }, { transition }) {
        if (transition && value) {
          transition.enter(el);
        }
      },
      updated(el, { value, oldValue }, { transition }) {
        if (!value === !oldValue)
          return;
        if (transition) {
          if (value) {
            transition.beforeEnter(el);
            setDisplay(el, true);
            transition.enter(el);
          } else {
            transition.leave(el, () => {
              setDisplay(el, false);
            });
          }
        } else {
          setDisplay(el, value);
        }
      },
      beforeUnmount(el, { value }) {
        setDisplay(el, value);
      }
    };
    function setDisplay(el, value) {
      el.style.display = value ? el._vod : "none";
    }
    const rendererOptions = /* @__PURE__ */ extend({ patchProp }, nodeOps);
    let renderer;
    let enabledHydration = false;
    function ensureRenderer() {
      return renderer || (renderer = createRenderer(rendererOptions));
    }
    function ensureHydrationRenderer() {
      renderer = enabledHydration ? renderer : createHydrationRenderer(rendererOptions);
      enabledHydration = true;
      return renderer;
    }
    const render = (...args) => {
      ensureRenderer().render(...args);
    };
    const hydrate = (...args) => {
      ensureHydrationRenderer().hydrate(...args);
    };
    const createApp = (...args) => {
      const app2 = ensureRenderer().createApp(...args);
      {
        injectNativeTagCheck(app2);
        injectCompilerOptionsCheck(app2);
      }
      const { mount } = app2;
      app2.mount = (containerOrSelector) => {
        const container = normalizeContainer(containerOrSelector);
        if (!container)
          return;
        const component = app2._component;
        if (!isFunction(component) && !component.render && !component.template) {
          component.template = container.innerHTML;
        }
        container.innerHTML = "";
        const proxy = mount(container, false, container instanceof SVGElement);
        if (container instanceof Element) {
          container.removeAttribute("v-cloak");
          container.setAttribute("data-v-app", "");
        }
        return proxy;
      };
      return app2;
    };
    const createSSRApp = (...args) => {
      const app2 = ensureHydrationRenderer().createApp(...args);
      {
        injectNativeTagCheck(app2);
        injectCompilerOptionsCheck(app2);
      }
      const { mount } = app2;
      app2.mount = (containerOrSelector) => {
        const container = normalizeContainer(containerOrSelector);
        if (container) {
          return mount(container, true, container instanceof SVGElement);
        }
      };
      return app2;
    };
    function injectNativeTagCheck(app2) {
      Object.defineProperty(app2.config, "isNativeTag", {
        value: (tag) => isHTMLTag(tag) || isSVGTag(tag),
        writable: false
      });
    }
    function injectCompilerOptionsCheck(app2) {
      if (isRuntimeOnly()) {
        const isCustomElement = app2.config.isCustomElement;
        Object.defineProperty(app2.config, "isCustomElement", {
          get() {
            return isCustomElement;
          },
          set() {
            warn$1(`The \`isCustomElement\` config option is deprecated. Use \`compilerOptions.isCustomElement\` instead.`);
          }
        });
        const compilerOptions = app2.config.compilerOptions;
        const msg = `The \`compilerOptions\` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, \`compilerOptions\` must be passed to \`@vue/compiler-dom\` in the build setup instead.
- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.
- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader
- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-dom`;
        Object.defineProperty(app2.config, "compilerOptions", {
          get() {
            warn$1(msg);
            return compilerOptions;
          },
          set() {
            warn$1(msg);
          }
        });
      }
    }
    function normalizeContainer(container) {
      if (isString(container)) {
        const res = document.querySelector(container);
        if (!res) {
          warn$1(`Failed to mount app: mount target selector "${container}" returned null.`);
        }
        return res;
      }
      if (window.ShadowRoot && container instanceof window.ShadowRoot && container.mode === "closed") {
        warn$1(`mounting on a ShadowRoot with \`{mode: "closed"}\` may lead to unpredictable bugs`);
      }
      return container;
    }
    const initDirectivesForSSR = NOOP;
    function initDev() {
      {
        {
        }
        initCustomFormatter();
      }
    }
    function defaultOnError(error) {
      throw error;
    }
    function defaultOnWarn(msg) {
      console.warn(`[Vue warn] ${msg.message}`);
    }
    function createCompilerError(code, loc, messages, additionalMessage) {
      const msg = (messages || errorMessages)[code] + (additionalMessage || ``);
      const error = new SyntaxError(String(msg));
      error.code = code;
      error.loc = loc;
      return error;
    }
    const errorMessages = {
      [0]: "Illegal comment.",
      [1]: "CDATA section is allowed only in XML context.",
      [2]: "Duplicate attribute.",
      [3]: "End tag cannot have attributes.",
      [4]: "Illegal '/' in tags.",
      [5]: "Unexpected EOF in tag.",
      [6]: "Unexpected EOF in CDATA section.",
      [7]: "Unexpected EOF in comment.",
      [8]: "Unexpected EOF in script.",
      [9]: "Unexpected EOF in tag.",
      [10]: "Incorrectly closed comment.",
      [11]: "Incorrectly opened comment.",
      [12]: "Illegal tag name. Use '&lt;' to print '<'.",
      [13]: "Attribute value was expected.",
      [14]: "End tag name was expected.",
      [15]: "Whitespace was expected.",
      [16]: "Unexpected '<!--' in comment.",
      [17]: `Attribute name cannot contain U+0022 ("), U+0027 ('), and U+003C (<).`,
      [18]: "Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (<), U+003D (=), and U+0060 (`).",
      [19]: "Attribute name cannot start with '='.",
      [21]: "'<?' is allowed only in XML context.",
      [20]: `Unexpected null character.`,
      [22]: "Illegal '/' in tags.",
      [23]: "Invalid end tag.",
      [24]: "Element is missing end tag.",
      [25]: "Interpolation end sign was not found.",
      [27]: "End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.",
      [26]: "Legal directive name was expected.",
      [28]: `v-if/v-else-if is missing expression.`,
      [29]: `v-if/else branches must use unique keys.`,
      [30]: `v-else/v-else-if has no adjacent v-if or v-else-if.`,
      [31]: `v-for is missing expression.`,
      [32]: `v-for has invalid expression.`,
      [33]: `<template v-for> key should be placed on the <template> tag.`,
      [34]: `v-bind is missing expression.`,
      [35]: `v-on is missing expression.`,
      [36]: `Unexpected custom directive on <slot> outlet.`,
      [37]: `Mixed v-slot usage on both the component and nested <template>.When there are multiple named slots, all slots should use <template> syntax to avoid scope ambiguity.`,
      [38]: `Duplicate slot names found. `,
      [39]: `Extraneous children found when component already has explicitly named default slot. These children will be ignored.`,
      [40]: `v-slot can only be used on components or <template> tags.`,
      [41]: `v-model is missing expression.`,
      [42]: `v-model value must be a valid JavaScript member expression.`,
      [43]: `v-model cannot be used on v-for or v-slot scope variables because they are not writable.`,
      [44]: `Error parsing JavaScript expression: `,
      [45]: `<KeepAlive> expects exactly one child component.`,
      [46]: `"prefixIdentifiers" option is not supported in this build of compiler.`,
      [47]: `ES module mode is not supported in this build of compiler.`,
      [48]: `"cacheHandlers" option is only supported when the "prefixIdentifiers" option is enabled.`,
      [49]: `"scopeId" option is only supported in module mode.`,
      [50]: ``
    };
    const FRAGMENT = Symbol(`Fragment`);
    const TELEPORT = Symbol(`Teleport`);
    const SUSPENSE = Symbol(`Suspense`);
    const KEEP_ALIVE = Symbol(`KeepAlive`);
    const BASE_TRANSITION = Symbol(`BaseTransition`);
    const OPEN_BLOCK = Symbol(`openBlock`);
    const CREATE_BLOCK = Symbol(`createBlock`);
    const CREATE_ELEMENT_BLOCK = Symbol(`createElementBlock`);
    const CREATE_VNODE = Symbol(`createVNode`);
    const CREATE_ELEMENT_VNODE = Symbol(`createElementVNode`);
    const CREATE_COMMENT = Symbol(`createCommentVNode`);
    const CREATE_TEXT = Symbol(`createTextVNode`);
    const CREATE_STATIC = Symbol(`createStaticVNode`);
    const RESOLVE_COMPONENT = Symbol(`resolveComponent`);
    const RESOLVE_DYNAMIC_COMPONENT = Symbol(`resolveDynamicComponent`);
    const RESOLVE_DIRECTIVE = Symbol(`resolveDirective`);
    const RESOLVE_FILTER = Symbol(`resolveFilter`);
    const WITH_DIRECTIVES = Symbol(`withDirectives`);
    const RENDER_LIST = Symbol(`renderList`);
    const RENDER_SLOT = Symbol(`renderSlot`);
    const CREATE_SLOTS = Symbol(`createSlots`);
    const TO_DISPLAY_STRING = Symbol(`toDisplayString`);
    const MERGE_PROPS = Symbol(`mergeProps`);
    const NORMALIZE_CLASS = Symbol(`normalizeClass`);
    const NORMALIZE_STYLE = Symbol(`normalizeStyle`);
    const NORMALIZE_PROPS = Symbol(`normalizeProps`);
    const GUARD_REACTIVE_PROPS = Symbol(`guardReactiveProps`);
    const TO_HANDLERS = Symbol(`toHandlers`);
    const CAMELIZE = Symbol(`camelize`);
    const CAPITALIZE = Symbol(`capitalize`);
    const TO_HANDLER_KEY = Symbol(`toHandlerKey`);
    const SET_BLOCK_TRACKING = Symbol(`setBlockTracking`);
    const PUSH_SCOPE_ID = Symbol(`pushScopeId`);
    const POP_SCOPE_ID = Symbol(`popScopeId`);
    const WITH_CTX = Symbol(`withCtx`);
    const UNREF = Symbol(`unref`);
    const IS_REF = Symbol(`isRef`);
    const WITH_MEMO = Symbol(`withMemo`);
    const IS_MEMO_SAME = Symbol(`isMemoSame`);
    const helperNameMap = {
      [FRAGMENT]: `Fragment`,
      [TELEPORT]: `Teleport`,
      [SUSPENSE]: `Suspense`,
      [KEEP_ALIVE]: `KeepAlive`,
      [BASE_TRANSITION]: `BaseTransition`,
      [OPEN_BLOCK]: `openBlock`,
      [CREATE_BLOCK]: `createBlock`,
      [CREATE_ELEMENT_BLOCK]: `createElementBlock`,
      [CREATE_VNODE]: `createVNode`,
      [CREATE_ELEMENT_VNODE]: `createElementVNode`,
      [CREATE_COMMENT]: `createCommentVNode`,
      [CREATE_TEXT]: `createTextVNode`,
      [CREATE_STATIC]: `createStaticVNode`,
      [RESOLVE_COMPONENT]: `resolveComponent`,
      [RESOLVE_DYNAMIC_COMPONENT]: `resolveDynamicComponent`,
      [RESOLVE_DIRECTIVE]: `resolveDirective`,
      [RESOLVE_FILTER]: `resolveFilter`,
      [WITH_DIRECTIVES]: `withDirectives`,
      [RENDER_LIST]: `renderList`,
      [RENDER_SLOT]: `renderSlot`,
      [CREATE_SLOTS]: `createSlots`,
      [TO_DISPLAY_STRING]: `toDisplayString`,
      [MERGE_PROPS]: `mergeProps`,
      [NORMALIZE_CLASS]: `normalizeClass`,
      [NORMALIZE_STYLE]: `normalizeStyle`,
      [NORMALIZE_PROPS]: `normalizeProps`,
      [GUARD_REACTIVE_PROPS]: `guardReactiveProps`,
      [TO_HANDLERS]: `toHandlers`,
      [CAMELIZE]: `camelize`,
      [CAPITALIZE]: `capitalize`,
      [TO_HANDLER_KEY]: `toHandlerKey`,
      [SET_BLOCK_TRACKING]: `setBlockTracking`,
      [PUSH_SCOPE_ID]: `pushScopeId`,
      [POP_SCOPE_ID]: `popScopeId`,
      [WITH_CTX]: `withCtx`,
      [UNREF]: `unref`,
      [IS_REF]: `isRef`,
      [WITH_MEMO]: `withMemo`,
      [IS_MEMO_SAME]: `isMemoSame`
    };
    function registerRuntimeHelpers(helpers) {
      Object.getOwnPropertySymbols(helpers).forEach((s) => {
        helperNameMap[s] = helpers[s];
      });
    }
    const locStub = {
      source: "",
      start: { line: 1, column: 1, offset: 0 },
      end: { line: 1, column: 1, offset: 0 }
    };
    function createRoot(children, loc = locStub) {
      return {
        type: 0,
        children,
        helpers: [],
        components: [],
        directives: [],
        hoists: [],
        imports: [],
        cached: 0,
        temps: 0,
        codegenNode: void 0,
        loc
      };
    }
    function createVNodeCall(context, tag, props, children, patchFlag, dynamicProps, directives, isBlock = false, disableTracking = false, isComponent2 = false, loc = locStub) {
      if (context) {
        if (isBlock) {
          context.helper(OPEN_BLOCK);
          context.helper(getVNodeBlockHelper(context.inSSR, isComponent2));
        } else {
          context.helper(getVNodeHelper(context.inSSR, isComponent2));
        }
        if (directives) {
          context.helper(WITH_DIRECTIVES);
        }
      }
      return {
        type: 13,
        tag,
        props,
        children,
        patchFlag,
        dynamicProps,
        directives,
        isBlock,
        disableTracking,
        isComponent: isComponent2,
        loc
      };
    }
    function createArrayExpression(elements, loc = locStub) {
      return {
        type: 17,
        loc,
        elements
      };
    }
    function createObjectExpression(properties, loc = locStub) {
      return {
        type: 15,
        loc,
        properties
      };
    }
    function createObjectProperty(key, value) {
      return {
        type: 16,
        loc: locStub,
        key: isString(key) ? createSimpleExpression(key, true) : key,
        value
      };
    }
    function createSimpleExpression(content, isStatic = false, loc = locStub, constType = 0) {
      return {
        type: 4,
        loc,
        content,
        isStatic,
        constType: isStatic ? 3 : constType
      };
    }
    function createCompoundExpression(children, loc = locStub) {
      return {
        type: 8,
        loc,
        children
      };
    }
    function createCallExpression(callee, args = [], loc = locStub) {
      return {
        type: 14,
        loc,
        callee,
        arguments: args
      };
    }
    function createFunctionExpression(params, returns = void 0, newline = false, isSlot = false, loc = locStub) {
      return {
        type: 18,
        params,
        returns,
        newline,
        isSlot,
        loc
      };
    }
    function createConditionalExpression(test, consequent, alternate, newline = true) {
      return {
        type: 19,
        test,
        consequent,
        alternate,
        newline,
        loc: locStub
      };
    }
    function createCacheExpression(index, value, isVNode2 = false) {
      return {
        type: 20,
        index,
        value,
        isVNode: isVNode2,
        loc: locStub
      };
    }
    function createBlockStatement(body) {
      return {
        type: 21,
        body,
        loc: locStub
      };
    }
    const isStaticExp = (p2) => p2.type === 4 && p2.isStatic;
    const isBuiltInType = (tag, expected) => tag === expected || tag === hyphenate(expected);
    function isCoreComponent(tag) {
      if (isBuiltInType(tag, "Teleport")) {
        return TELEPORT;
      } else if (isBuiltInType(tag, "Suspense")) {
        return SUSPENSE;
      } else if (isBuiltInType(tag, "KeepAlive")) {
        return KEEP_ALIVE;
      } else if (isBuiltInType(tag, "BaseTransition")) {
        return BASE_TRANSITION;
      }
    }
    const nonIdentifierRE = /^\d|[^\$\w]/;
    const isSimpleIdentifier = (name) => !nonIdentifierRE.test(name);
    const validFirstIdentCharRE = /[A-Za-z_$\xA0-\uFFFF]/;
    const validIdentCharRE = /[\.\?\w$\xA0-\uFFFF]/;
    const whitespaceRE = /\s+[.[]\s*|\s*[.[]\s+/g;
    const isMemberExpressionBrowser = (path6) => {
      path6 = path6.trim().replace(whitespaceRE, (s) => s.trim());
      let state = 0;
      let stateStack = [];
      let currentOpenBracketCount = 0;
      let currentOpenParensCount = 0;
      let currentStringType = null;
      for (let i = 0; i < path6.length; i++) {
        const char = path6.charAt(i);
        switch (state) {
          case 0:
            if (char === "[") {
              stateStack.push(state);
              state = 1;
              currentOpenBracketCount++;
            } else if (char === "(") {
              stateStack.push(state);
              state = 2;
              currentOpenParensCount++;
            } else if (!(i === 0 ? validFirstIdentCharRE : validIdentCharRE).test(char)) {
              return false;
            }
            break;
          case 1:
            if (char === `'` || char === `"` || char === "`") {
              stateStack.push(state);
              state = 3;
              currentStringType = char;
            } else if (char === `[`) {
              currentOpenBracketCount++;
            } else if (char === `]`) {
              if (!--currentOpenBracketCount) {
                state = stateStack.pop();
              }
            }
            break;
          case 2:
            if (char === `'` || char === `"` || char === "`") {
              stateStack.push(state);
              state = 3;
              currentStringType = char;
            } else if (char === `(`) {
              currentOpenParensCount++;
            } else if (char === `)`) {
              if (i === path6.length - 1) {
                return false;
              }
              if (!--currentOpenParensCount) {
                state = stateStack.pop();
              }
            }
            break;
          case 3:
            if (char === currentStringType) {
              state = stateStack.pop();
              currentStringType = null;
            }
            break;
        }
      }
      return !currentOpenBracketCount && !currentOpenParensCount;
    };
    const isMemberExpression = isMemberExpressionBrowser;
    function getInnerRange(loc, offset, length) {
      const source = loc.source.slice(offset, offset + length);
      const newLoc = {
        source,
        start: advancePositionWithClone(loc.start, loc.source, offset),
        end: loc.end
      };
      if (length != null) {
        newLoc.end = advancePositionWithClone(loc.start, loc.source, offset + length);
      }
      return newLoc;
    }
    function advancePositionWithClone(pos, source, numberOfCharacters = source.length) {
      return advancePositionWithMutation(extend({}, pos), source, numberOfCharacters);
    }
    function advancePositionWithMutation(pos, source, numberOfCharacters = source.length) {
      let linesCount = 0;
      let lastNewLinePos = -1;
      for (let i = 0; i < numberOfCharacters; i++) {
        if (source.charCodeAt(i) === 10) {
          linesCount++;
          lastNewLinePos = i;
        }
      }
      pos.offset += numberOfCharacters;
      pos.line += linesCount;
      pos.column = lastNewLinePos === -1 ? pos.column + numberOfCharacters : numberOfCharacters - lastNewLinePos;
      return pos;
    }
    function assert(condition, msg) {
      if (!condition) {
        throw new Error(msg || `unexpected compiler condition`);
      }
    }
    function findDir(node, name, allowEmpty = false) {
      for (let i = 0; i < node.props.length; i++) {
        const p2 = node.props[i];
        if (p2.type === 7 && (allowEmpty || p2.exp) && (isString(name) ? p2.name === name : name.test(p2.name))) {
          return p2;
        }
      }
    }
    function findProp(node, name, dynamicOnly = false, allowEmpty = false) {
      for (let i = 0; i < node.props.length; i++) {
        const p2 = node.props[i];
        if (p2.type === 6) {
          if (dynamicOnly)
            continue;
          if (p2.name === name && (p2.value || allowEmpty)) {
            return p2;
          }
        } else if (p2.name === "bind" && (p2.exp || allowEmpty) && isStaticArgOf(p2.arg, name)) {
          return p2;
        }
      }
    }
    function isStaticArgOf(arg, name) {
      return !!(arg && isStaticExp(arg) && arg.content === name);
    }
    function hasDynamicKeyVBind(node) {
      return node.props.some(
        (p2) => p2.type === 7 && p2.name === "bind" && (!p2.arg || p2.arg.type !== 4 || !p2.arg.isStatic)
      );
    }
    function isText(node) {
      return node.type === 5 || node.type === 2;
    }
    function isVSlot(p2) {
      return p2.type === 7 && p2.name === "slot";
    }
    function isTemplateNode(node) {
      return node.type === 1 && node.tagType === 3;
    }
    function isSlotOutlet(node) {
      return node.type === 1 && node.tagType === 2;
    }
    function getVNodeHelper(ssr, isComponent2) {
      return ssr || isComponent2 ? CREATE_VNODE : CREATE_ELEMENT_VNODE;
    }
    function getVNodeBlockHelper(ssr, isComponent2) {
      return ssr || isComponent2 ? CREATE_BLOCK : CREATE_ELEMENT_BLOCK;
    }
    const propsHelperSet = /* @__PURE__ */ new Set([NORMALIZE_PROPS, GUARD_REACTIVE_PROPS]);
    function getUnnormalizedProps(props, callPath = []) {
      if (props && !isString(props) && props.type === 14) {
        const callee = props.callee;
        if (!isString(callee) && propsHelperSet.has(callee)) {
          return getUnnormalizedProps(props.arguments[0], callPath.concat(props));
        }
      }
      return [props, callPath];
    }
    function injectProp(node, prop, context) {
      let propsWithInjection;
      let props = node.type === 13 ? node.props : node.arguments[2];
      let callPath = [];
      let parentCall;
      if (props && !isString(props) && props.type === 14) {
        const ret = getUnnormalizedProps(props);
        props = ret[0];
        callPath = ret[1];
        parentCall = callPath[callPath.length - 1];
      }
      if (props == null || isString(props)) {
        propsWithInjection = createObjectExpression([prop]);
      } else if (props.type === 14) {
        const first = props.arguments[0];
        if (!isString(first) && first.type === 15) {
          first.properties.unshift(prop);
        } else {
          if (props.callee === TO_HANDLERS) {
            propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
              createObjectExpression([prop]),
              props
            ]);
          } else {
            props.arguments.unshift(createObjectExpression([prop]));
          }
        }
        !propsWithInjection && (propsWithInjection = props);
      } else if (props.type === 15) {
        let alreadyExists = false;
        if (prop.key.type === 4) {
          const propKeyName = prop.key.content;
          alreadyExists = props.properties.some((p2) => p2.key.type === 4 && p2.key.content === propKeyName);
        }
        if (!alreadyExists) {
          props.properties.unshift(prop);
        }
        propsWithInjection = props;
      } else {
        propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
          createObjectExpression([prop]),
          props
        ]);
        if (parentCall && parentCall.callee === GUARD_REACTIVE_PROPS) {
          parentCall = callPath[callPath.length - 2];
        }
      }
      if (node.type === 13) {
        if (parentCall) {
          parentCall.arguments[0] = propsWithInjection;
        } else {
          node.props = propsWithInjection;
        }
      } else {
        if (parentCall) {
          parentCall.arguments[0] = propsWithInjection;
        } else {
          node.arguments[2] = propsWithInjection;
        }
      }
    }
    function toValidAssetId(name, type) {
      return `_${type}_${name.replace(/[^\w]/g, (searchValue, replaceValue) => {
        return searchValue === "-" ? "_" : name.charCodeAt(replaceValue).toString();
      })}`;
    }
    function getMemoedVNodeCall(node) {
      if (node.type === 14 && node.callee === WITH_MEMO) {
        return node.arguments[1].returns;
      } else {
        return node;
      }
    }
    function makeBlock(node, { helper, removeHelper, inSSR }) {
      if (!node.isBlock) {
        node.isBlock = true;
        removeHelper(getVNodeHelper(inSSR, node.isComponent));
        helper(OPEN_BLOCK);
        helper(getVNodeBlockHelper(inSSR, node.isComponent));
      }
    }
    const deprecationData = {
      ["COMPILER_IS_ON_ELEMENT"]: {
        message: `Platform-native elements with "is" prop will no longer be treated as components in Vue 3 unless the "is" value is explicitly prefixed with "vue:".`,
        link: `https://v3-migration.vuejs.org/breaking-changes/custom-elements-interop.html`
      },
      ["COMPILER_V_BIND_SYNC"]: {
        message: (key) => `.sync modifier for v-bind has been removed. Use v-model with argument instead. \`v-bind:${key}.sync\` should be changed to \`v-model:${key}\`.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-model.html`
      },
      ["COMPILER_V_BIND_PROP"]: {
        message: `.prop modifier for v-bind has been removed and no longer necessary. Vue 3 will automatically set a binding as DOM property when appropriate.`
      },
      ["COMPILER_V_BIND_OBJECT_ORDER"]: {
        message: `v-bind="obj" usage is now order sensitive and behaves like JavaScript object spread: it will now overwrite an existing non-mergeable attribute that appears before v-bind in the case of conflict. To retain 2.x behavior, move v-bind to make it the first attribute. You can also suppress this warning if the usage is intended.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-bind.html`
      },
      ["COMPILER_V_ON_NATIVE"]: {
        message: `.native modifier for v-on has been removed as is no longer necessary.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-on-native-modifier-removed.html`
      },
      ["COMPILER_V_IF_V_FOR_PRECEDENCE"]: {
        message: `v-if / v-for precedence when used on the same element has changed in Vue 3: v-if now takes higher precedence and will no longer have access to v-for scope variables. It is best to avoid the ambiguity with <template> tags or use a computed property that filters v-for data source.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/v-if-v-for.html`
      },
      ["COMPILER_NATIVE_TEMPLATE"]: {
        message: `<template> with no special directives will render as a native template element instead of its inner content in Vue 3.`
      },
      ["COMPILER_INLINE_TEMPLATE"]: {
        message: `"inline-template" has been removed in Vue 3.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/inline-template-attribute.html`
      },
      ["COMPILER_FILTER"]: {
        message: `filters have been removed in Vue 3. The "|" symbol will be treated as native JavaScript bitwise OR operator. Use method calls or computed properties instead.`,
        link: `https://v3-migration.vuejs.org/breaking-changes/filters.html`
      }
    };
    function getCompatValue(key, context) {
      const config = context.options ? context.options.compatConfig : context.compatConfig;
      const value = config && config[key];
      if (key === "MODE") {
        return value || 3;
      } else {
        return value;
      }
    }
    function isCompatEnabled(key, context) {
      const mode = getCompatValue("MODE", context);
      const value = getCompatValue(key, context);
      return mode === 3 ? value === true : value !== false;
    }
    function checkCompatEnabled(key, context, loc, ...args) {
      const enabled = isCompatEnabled(key, context);
      if (enabled) {
        warnDeprecation(key, context, loc, ...args);
      }
      return enabled;
    }
    function warnDeprecation(key, context, loc, ...args) {
      const val = getCompatValue(key, context);
      if (val === "suppress-warning") {
        return;
      }
      const { message, link } = deprecationData[key];
      const msg = `(deprecation ${key}) ${typeof message === "function" ? message(...args) : message}${link ? `
  Details: ${link}` : ``}`;
      const err = new SyntaxError(msg);
      err.code = key;
      if (loc)
        err.loc = loc;
      context.onWarn(err);
    }
    const decodeRE = /&(gt|lt|amp|apos|quot);/g;
    const decodeMap = {
      gt: ">",
      lt: "<",
      amp: "&",
      apos: "'",
      quot: '"'
    };
    const defaultParserOptions = {
      delimiters: [`{{`, `}}`],
      getNamespace: () => 0,
      getTextMode: () => 0,
      isVoidTag: NO,
      isPreTag: NO,
      isCustomElement: NO,
      decodeEntities: (rawText) => rawText.replace(decodeRE, (_, p1) => decodeMap[p1]),
      onError: defaultOnError,
      onWarn: defaultOnWarn,
      comments: true
    };
    function baseParse(content, options = {}) {
      const context = createParserContext(content, options);
      const start = getCursor(context);
      return createRoot(parseChildren(context, 0, []), getSelection(context, start));
    }
    function createParserContext(content, rawOptions) {
      const options = extend({}, defaultParserOptions);
      let key;
      for (key in rawOptions) {
        options[key] = rawOptions[key] === void 0 ? defaultParserOptions[key] : rawOptions[key];
      }
      return {
        options,
        column: 1,
        line: 1,
        offset: 0,
        originalSource: content,
        source: content,
        inPre: false,
        inVPre: false,
        onWarn: options.onWarn
      };
    }
    function parseChildren(context, mode, ancestors) {
      const parent = last(ancestors);
      const ns = parent ? parent.ns : 0;
      const nodes = [];
      while (!isEnd(context, mode, ancestors)) {
        const s = context.source;
        let node = void 0;
        if (mode === 0 || mode === 1) {
          if (!context.inVPre && startsWith(s, context.options.delimiters[0])) {
            node = parseInterpolation(context, mode);
          } else if (mode === 0 && s[0] === "<") {
            if (s.length === 1) {
              emitError(context, 5, 1);
            } else if (s[1] === "!") {
              if (startsWith(s, "<!--")) {
                node = parseComment(context);
              } else if (startsWith(s, "<!DOCTYPE")) {
                node = parseBogusComment(context);
              } else if (startsWith(s, "<![CDATA[")) {
                if (ns !== 0) {
                  node = parseCDATA(context, ancestors);
                } else {
                  emitError(context, 1);
                  node = parseBogusComment(context);
                }
              } else {
                emitError(context, 11);
                node = parseBogusComment(context);
              }
            } else if (s[1] === "/") {
              if (s.length === 2) {
                emitError(context, 5, 2);
              } else if (s[2] === ">") {
                emitError(context, 14, 2);
                advanceBy(context, 3);
                continue;
              } else if (/[a-z]/i.test(s[2])) {
                emitError(context, 23);
                parseTag(context, 1, parent);
                continue;
              } else {
                emitError(context, 12, 2);
                node = parseBogusComment(context);
              }
            } else if (/[a-z]/i.test(s[1])) {
              node = parseElement(context, ancestors);
            } else if (s[1] === "?") {
              emitError(context, 21, 1);
              node = parseBogusComment(context);
            } else {
              emitError(context, 12, 1);
            }
          }
        }
        if (!node) {
          node = parseText(context, mode);
        }
        if (isArray(node)) {
          for (let i = 0; i < node.length; i++) {
            pushNode(nodes, node[i]);
          }
        } else {
          pushNode(nodes, node);
        }
      }
      let removedWhitespace = false;
      if (mode !== 2 && mode !== 1) {
        const shouldCondense = context.options.whitespace !== "preserve";
        for (let i = 0; i < nodes.length; i++) {
          const node = nodes[i];
          if (!context.inPre && node.type === 2) {
            if (!/[^\t\r\n\f ]/.test(node.content)) {
              const prev = nodes[i - 1];
              const next = nodes[i + 1];
              if (!prev || !next || shouldCondense && (prev.type === 3 || next.type === 3 || prev.type === 1 && next.type === 1 && /[\r\n]/.test(node.content))) {
                removedWhitespace = true;
                nodes[i] = null;
              } else {
                node.content = " ";
              }
            } else if (shouldCondense) {
              node.content = node.content.replace(/[\t\r\n\f ]+/g, " ");
            }
          } else if (node.type === 3 && !context.options.comments) {
            removedWhitespace = true;
            nodes[i] = null;
          }
        }
        if (context.inPre && parent && context.options.isPreTag(parent.tag)) {
          const first = nodes[0];
          if (first && first.type === 2) {
            first.content = first.content.replace(/^\r?\n/, "");
          }
        }
      }
      return removedWhitespace ? nodes.filter(Boolean) : nodes;
    }
    function pushNode(nodes, node) {
      if (node.type === 2) {
        const prev = last(nodes);
        if (prev && prev.type === 2 && prev.loc.end.offset === node.loc.start.offset) {
          prev.content += node.content;
          prev.loc.end = node.loc.end;
          prev.loc.source += node.loc.source;
          return;
        }
      }
      nodes.push(node);
    }
    function parseCDATA(context, ancestors) {
      advanceBy(context, 9);
      const nodes = parseChildren(context, 3, ancestors);
      if (context.source.length === 0) {
        emitError(context, 6);
      } else {
        advanceBy(context, 3);
      }
      return nodes;
    }
    function parseComment(context) {
      const start = getCursor(context);
      let content;
      const match = /--(\!)?>/.exec(context.source);
      if (!match) {
        content = context.source.slice(4);
        advanceBy(context, context.source.length);
        emitError(context, 7);
      } else {
        if (match.index <= 3) {
          emitError(context, 0);
        }
        if (match[1]) {
          emitError(context, 10);
        }
        content = context.source.slice(4, match.index);
        const s = context.source.slice(0, match.index);
        let prevIndex = 1, nestedIndex = 0;
        while ((nestedIndex = s.indexOf("<!--", prevIndex)) !== -1) {
          advanceBy(context, nestedIndex - prevIndex + 1);
          if (nestedIndex + 4 < s.length) {
            emitError(context, 16);
          }
          prevIndex = nestedIndex + 1;
        }
        advanceBy(context, match.index + match[0].length - prevIndex + 1);
      }
      return {
        type: 3,
        content,
        loc: getSelection(context, start)
      };
    }
    function parseBogusComment(context) {
      const start = getCursor(context);
      const contentStart = context.source[1] === "?" ? 1 : 2;
      let content;
      const closeIndex = context.source.indexOf(">");
      if (closeIndex === -1) {
        content = context.source.slice(contentStart);
        advanceBy(context, context.source.length);
      } else {
        content = context.source.slice(contentStart, closeIndex);
        advanceBy(context, closeIndex + 1);
      }
      return {
        type: 3,
        content,
        loc: getSelection(context, start)
      };
    }
    function parseElement(context, ancestors) {
      const wasInPre = context.inPre;
      const wasInVPre = context.inVPre;
      const parent = last(ancestors);
      const element = parseTag(context, 0, parent);
      const isPreBoundary = context.inPre && !wasInPre;
      const isVPreBoundary = context.inVPre && !wasInVPre;
      if (element.isSelfClosing || context.options.isVoidTag(element.tag)) {
        if (isPreBoundary) {
          context.inPre = false;
        }
        if (isVPreBoundary) {
          context.inVPre = false;
        }
        return element;
      }
      ancestors.push(element);
      const mode = context.options.getTextMode(element, parent);
      const children = parseChildren(context, mode, ancestors);
      ancestors.pop();
      element.children = children;
      if (startsWithEndTagOpen(context.source, element.tag)) {
        parseTag(context, 1, parent);
      } else {
        emitError(context, 24, 0, element.loc.start);
        if (context.source.length === 0 && element.tag.toLowerCase() === "script") {
          const first = children[0];
          if (first && startsWith(first.loc.source, "<!--")) {
            emitError(context, 8);
          }
        }
      }
      element.loc = getSelection(context, element.loc.start);
      if (isPreBoundary) {
        context.inPre = false;
      }
      if (isVPreBoundary) {
        context.inVPre = false;
      }
      return element;
    }
    const isSpecialTemplateDirective = /* @__PURE__ */ makeMap(`if,else,else-if,for,slot`);
    function parseTag(context, type, parent) {
      const start = getCursor(context);
      const match = /^<\/?([a-z][^\t\r\n\f />]*)/i.exec(context.source);
      const tag = match[1];
      const ns = context.options.getNamespace(tag, parent);
      advanceBy(context, match[0].length);
      advanceSpaces(context);
      const cursor = getCursor(context);
      const currentSource = context.source;
      if (context.options.isPreTag(tag)) {
        context.inPre = true;
      }
      let props = parseAttributes(context, type);
      if (type === 0 && !context.inVPre && props.some((p2) => p2.type === 7 && p2.name === "pre")) {
        context.inVPre = true;
        extend(context, cursor);
        context.source = currentSource;
        props = parseAttributes(context, type).filter((p2) => p2.name !== "v-pre");
      }
      let isSelfClosing = false;
      if (context.source.length === 0) {
        emitError(context, 9);
      } else {
        isSelfClosing = startsWith(context.source, "/>");
        if (type === 1 && isSelfClosing) {
          emitError(context, 4);
        }
        advanceBy(context, isSelfClosing ? 2 : 1);
      }
      if (type === 1) {
        return;
      }
      let tagType = 0;
      if (!context.inVPre) {
        if (tag === "slot") {
          tagType = 2;
        } else if (tag === "template") {
          if (props.some((p2) => p2.type === 7 && isSpecialTemplateDirective(p2.name))) {
            tagType = 3;
          }
        } else if (isComponent(tag, props, context)) {
          tagType = 1;
        }
      }
      return {
        type: 1,
        ns,
        tag,
        tagType,
        props,
        isSelfClosing,
        children: [],
        loc: getSelection(context, start),
        codegenNode: void 0
      };
    }
    function isComponent(tag, props, context) {
      const options = context.options;
      if (options.isCustomElement(tag)) {
        return false;
      }
      if (tag === "component" || /^[A-Z]/.test(tag) || isCoreComponent(tag) || options.isBuiltInComponent && options.isBuiltInComponent(tag) || options.isNativeTag && !options.isNativeTag(tag)) {
        return true;
      }
      for (let i = 0; i < props.length; i++) {
        const p2 = props[i];
        if (p2.type === 6) {
          if (p2.name === "is" && p2.value) {
            if (p2.value.content.startsWith("vue:")) {
              return true;
            }
          }
        } else {
          if (p2.name === "is") {
            return true;
          } else if (p2.name === "bind" && isStaticArgOf(p2.arg, "is") && false) {
            return true;
          }
        }
      }
    }
    function parseAttributes(context, type) {
      const props = [];
      const attributeNames = /* @__PURE__ */ new Set();
      while (context.source.length > 0 && !startsWith(context.source, ">") && !startsWith(context.source, "/>")) {
        if (startsWith(context.source, "/")) {
          emitError(context, 22);
          advanceBy(context, 1);
          advanceSpaces(context);
          continue;
        }
        if (type === 1) {
          emitError(context, 3);
        }
        const attr = parseAttribute(context, attributeNames);
        if (attr.type === 6 && attr.value && attr.name === "class") {
          attr.value.content = attr.value.content.replace(/\s+/g, " ").trim();
        }
        if (type === 0) {
          props.push(attr);
        }
        if (/^[^\t\r\n\f />]/.test(context.source)) {
          emitError(context, 15);
        }
        advanceSpaces(context);
      }
      return props;
    }
    function parseAttribute(context, nameSet) {
      const start = getCursor(context);
      const match = /^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(context.source);
      const name = match[0];
      if (nameSet.has(name)) {
        emitError(context, 2);
      }
      nameSet.add(name);
      if (name[0] === "=") {
        emitError(context, 19);
      }
      {
        const pattern = /["'<]/g;
        let m;
        while (m = pattern.exec(name)) {
          emitError(context, 17, m.index);
        }
      }
      advanceBy(context, name.length);
      let value = void 0;
      if (/^[\t\r\n\f ]*=/.test(context.source)) {
        advanceSpaces(context);
        advanceBy(context, 1);
        advanceSpaces(context);
        value = parseAttributeValue(context);
        if (!value) {
          emitError(context, 13);
        }
      }
      const loc = getSelection(context, start);
      if (!context.inVPre && /^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(name)) {
        const match2 = /(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(name);
        let isPropShorthand = startsWith(name, ".");
        let dirName = match2[1] || (isPropShorthand || startsWith(name, ":") ? "bind" : startsWith(name, "@") ? "on" : "slot");
        let arg;
        if (match2[2]) {
          const isSlot = dirName === "slot";
          const startOffset = name.lastIndexOf(match2[2]);
          const loc2 = getSelection(context, getNewPosition(context, start, startOffset), getNewPosition(context, start, startOffset + match2[2].length + (isSlot && match2[3] || "").length));
          let content = match2[2];
          let isStatic = true;
          if (content.startsWith("[")) {
            isStatic = false;
            if (!content.endsWith("]")) {
              emitError(context, 27);
              content = content.slice(1);
            } else {
              content = content.slice(1, content.length - 1);
            }
          } else if (isSlot) {
            content += match2[3] || "";
          }
          arg = {
            type: 4,
            content,
            isStatic,
            constType: isStatic ? 3 : 0,
            loc: loc2
          };
        }
        if (value && value.isQuoted) {
          const valueLoc = value.loc;
          valueLoc.start.offset++;
          valueLoc.start.column++;
          valueLoc.end = advancePositionWithClone(valueLoc.start, value.content);
          valueLoc.source = valueLoc.source.slice(1, -1);
        }
        const modifiers = match2[3] ? match2[3].slice(1).split(".") : [];
        if (isPropShorthand)
          modifiers.push("prop");
        return {
          type: 7,
          name: dirName,
          exp: value && {
            type: 4,
            content: value.content,
            isStatic: false,
            constType: 0,
            loc: value.loc
          },
          arg,
          modifiers,
          loc
        };
      }
      if (!context.inVPre && startsWith(name, "v-")) {
        emitError(context, 26);
      }
      return {
        type: 6,
        name,
        value: value && {
          type: 2,
          content: value.content,
          loc: value.loc
        },
        loc
      };
    }
    function parseAttributeValue(context) {
      const start = getCursor(context);
      let content;
      const quote = context.source[0];
      const isQuoted = quote === `"` || quote === `'`;
      if (isQuoted) {
        advanceBy(context, 1);
        const endIndex = context.source.indexOf(quote);
        if (endIndex === -1) {
          content = parseTextData(context, context.source.length, 4);
        } else {
          content = parseTextData(context, endIndex, 4);
          advanceBy(context, 1);
        }
      } else {
        const match = /^[^\t\r\n\f >]+/.exec(context.source);
        if (!match) {
          return void 0;
        }
        const unexpectedChars = /["'<=`]/g;
        let m;
        while (m = unexpectedChars.exec(match[0])) {
          emitError(context, 18, m.index);
        }
        content = parseTextData(context, match[0].length, 4);
      }
      return { content, isQuoted, loc: getSelection(context, start) };
    }
    function parseInterpolation(context, mode) {
      const [open2, close] = context.options.delimiters;
      const closeIndex = context.source.indexOf(close, open2.length);
      if (closeIndex === -1) {
        emitError(context, 25);
        return void 0;
      }
      const start = getCursor(context);
      advanceBy(context, open2.length);
      const innerStart = getCursor(context);
      const innerEnd = getCursor(context);
      const rawContentLength = closeIndex - open2.length;
      const rawContent = context.source.slice(0, rawContentLength);
      const preTrimContent = parseTextData(context, rawContentLength, mode);
      const content = preTrimContent.trim();
      const startOffset = preTrimContent.indexOf(content);
      if (startOffset > 0) {
        advancePositionWithMutation(innerStart, rawContent, startOffset);
      }
      const endOffset = rawContentLength - (preTrimContent.length - content.length - startOffset);
      advancePositionWithMutation(innerEnd, rawContent, endOffset);
      advanceBy(context, close.length);
      return {
        type: 5,
        content: {
          type: 4,
          isStatic: false,
          constType: 0,
          content,
          loc: getSelection(context, innerStart, innerEnd)
        },
        loc: getSelection(context, start)
      };
    }
    function parseText(context, mode) {
      const endTokens = mode === 3 ? ["]]>"] : ["<", context.options.delimiters[0]];
      let endIndex = context.source.length;
      for (let i = 0; i < endTokens.length; i++) {
        const index = context.source.indexOf(endTokens[i], 1);
        if (index !== -1 && endIndex > index) {
          endIndex = index;
        }
      }
      const start = getCursor(context);
      const content = parseTextData(context, endIndex, mode);
      return {
        type: 2,
        content,
        loc: getSelection(context, start)
      };
    }
    function parseTextData(context, length, mode) {
      const rawText = context.source.slice(0, length);
      advanceBy(context, length);
      if (mode === 2 || mode === 3 || !rawText.includes("&")) {
        return rawText;
      } else {
        return context.options.decodeEntities(rawText, mode === 4);
      }
    }
    function getCursor(context) {
      const { column, line, offset } = context;
      return { column, line, offset };
    }
    function getSelection(context, start, end) {
      end = end || getCursor(context);
      return {
        start,
        end,
        source: context.originalSource.slice(start.offset, end.offset)
      };
    }
    function last(xs) {
      return xs[xs.length - 1];
    }
    function startsWith(source, searchString) {
      return source.startsWith(searchString);
    }
    function advanceBy(context, numberOfCharacters) {
      const { source } = context;
      advancePositionWithMutation(context, source, numberOfCharacters);
      context.source = source.slice(numberOfCharacters);
    }
    function advanceSpaces(context) {
      const match = /^[\t\r\n\f ]+/.exec(context.source);
      if (match) {
        advanceBy(context, match[0].length);
      }
    }
    function getNewPosition(context, start, numberOfCharacters) {
      return advancePositionWithClone(start, context.originalSource.slice(start.offset, numberOfCharacters), numberOfCharacters);
    }
    function emitError(context, code, offset, loc = getCursor(context)) {
      if (offset) {
        loc.offset += offset;
        loc.column += offset;
      }
      context.options.onError(createCompilerError(code, {
        start: loc,
        end: loc,
        source: ""
      }));
    }
    function isEnd(context, mode, ancestors) {
      const s = context.source;
      switch (mode) {
        case 0:
          if (startsWith(s, "</")) {
            for (let i = ancestors.length - 1; i >= 0; --i) {
              if (startsWithEndTagOpen(s, ancestors[i].tag)) {
                return true;
              }
            }
          }
          break;
        case 1:
        case 2: {
          const parent = last(ancestors);
          if (parent && startsWithEndTagOpen(s, parent.tag)) {
            return true;
          }
          break;
        }
        case 3:
          if (startsWith(s, "]]>")) {
            return true;
          }
          break;
      }
      return !s;
    }
    function startsWithEndTagOpen(source, tag) {
      return startsWith(source, "</") && source.slice(2, 2 + tag.length).toLowerCase() === tag.toLowerCase() && /[\t\r\n\f />]/.test(source[2 + tag.length] || ">");
    }
    function hoistStatic(root, context) {
      walk3(
        root,
        context,
        isSingleElementRoot(root, root.children[0])
      );
    }
    function isSingleElementRoot(root, child) {
      const { children } = root;
      return children.length === 1 && child.type === 1 && !isSlotOutlet(child);
    }
    function walk3(node, context, doNotHoistNode = false) {
      const { children } = node;
      const originalCount = children.length;
      let hoistedCount = 0;
      for (let i = 0; i < children.length; i++) {
        const child = children[i];
        if (child.type === 1 && child.tagType === 0) {
          const constantType = doNotHoistNode ? 0 : getConstantType(child, context);
          if (constantType > 0) {
            if (constantType >= 2) {
              child.codegenNode.patchFlag = -1 + ` /* HOISTED */`;
              child.codegenNode = context.hoist(child.codegenNode);
              hoistedCount++;
              continue;
            }
          } else {
            const codegenNode = child.codegenNode;
            if (codegenNode.type === 13) {
              const flag = getPatchFlag(codegenNode);
              if ((!flag || flag === 512 || flag === 1) && getGeneratedPropsConstantType(child, context) >= 2) {
                const props = getNodeProps(child);
                if (props) {
                  codegenNode.props = context.hoist(props);
                }
              }
              if (codegenNode.dynamicProps) {
                codegenNode.dynamicProps = context.hoist(codegenNode.dynamicProps);
              }
            }
          }
        } else if (child.type === 12 && getConstantType(child.content, context) >= 2) {
          child.codegenNode = context.hoist(child.codegenNode);
          hoistedCount++;
        }
        if (child.type === 1) {
          const isComponent2 = child.tagType === 1;
          if (isComponent2) {
            context.scopes.vSlot++;
          }
          walk3(child, context);
          if (isComponent2) {
            context.scopes.vSlot--;
          }
        } else if (child.type === 11) {
          walk3(child, context, child.children.length === 1);
        } else if (child.type === 9) {
          for (let i2 = 0; i2 < child.branches.length; i2++) {
            walk3(child.branches[i2], context, child.branches[i2].children.length === 1);
          }
        }
      }
      if (hoistedCount && context.transformHoist) {
        context.transformHoist(children, context, node);
      }
      if (hoistedCount && hoistedCount === originalCount && node.type === 1 && node.tagType === 0 && node.codegenNode && node.codegenNode.type === 13 && isArray(node.codegenNode.children)) {
        node.codegenNode.children = context.hoist(createArrayExpression(node.codegenNode.children));
      }
    }
    function getConstantType(node, context) {
      const { constantCache } = context;
      switch (node.type) {
        case 1:
          if (node.tagType !== 0) {
            return 0;
          }
          const cached = constantCache.get(node);
          if (cached !== void 0) {
            return cached;
          }
          const codegenNode = node.codegenNode;
          if (codegenNode.type !== 13) {
            return 0;
          }
          if (codegenNode.isBlock && node.tag !== "svg" && node.tag !== "foreignObject") {
            return 0;
          }
          const flag = getPatchFlag(codegenNode);
          if (!flag) {
            let returnType2 = 3;
            const generatedPropsType = getGeneratedPropsConstantType(node, context);
            if (generatedPropsType === 0) {
              constantCache.set(node, 0);
              return 0;
            }
            if (generatedPropsType < returnType2) {
              returnType2 = generatedPropsType;
            }
            for (let i = 0; i < node.children.length; i++) {
              const childType = getConstantType(node.children[i], context);
              if (childType === 0) {
                constantCache.set(node, 0);
                return 0;
              }
              if (childType < returnType2) {
                returnType2 = childType;
              }
            }
            if (returnType2 > 1) {
              for (let i = 0; i < node.props.length; i++) {
                const p2 = node.props[i];
                if (p2.type === 7 && p2.name === "bind" && p2.exp) {
                  const expType = getConstantType(p2.exp, context);
                  if (expType === 0) {
                    constantCache.set(node, 0);
                    return 0;
                  }
                  if (expType < returnType2) {
                    returnType2 = expType;
                  }
                }
              }
            }
            if (codegenNode.isBlock) {
              for (let i = 0; i < node.props.length; i++) {
                const p2 = node.props[i];
                if (p2.type === 7) {
                  constantCache.set(node, 0);
                  return 0;
                }
              }
              context.removeHelper(OPEN_BLOCK);
              context.removeHelper(getVNodeBlockHelper(context.inSSR, codegenNode.isComponent));
              codegenNode.isBlock = false;
              context.helper(getVNodeHelper(context.inSSR, codegenNode.isComponent));
            }
            constantCache.set(node, returnType2);
            return returnType2;
          } else {
            constantCache.set(node, 0);
            return 0;
          }
        case 2:
        case 3:
          return 3;
        case 9:
        case 11:
        case 10:
          return 0;
        case 5:
        case 12:
          return getConstantType(node.content, context);
        case 4:
          return node.constType;
        case 8:
          let returnType = 3;
          for (let i = 0; i < node.children.length; i++) {
            const child = node.children[i];
            if (isString(child) || isSymbol(child)) {
              continue;
            }
            const childType = getConstantType(child, context);
            if (childType === 0) {
              return 0;
            } else if (childType < returnType) {
              returnType = childType;
            }
          }
          return returnType;
        default:
          return 0;
      }
    }
    const allowHoistedHelperSet = /* @__PURE__ */ new Set([
      NORMALIZE_CLASS,
      NORMALIZE_STYLE,
      NORMALIZE_PROPS,
      GUARD_REACTIVE_PROPS
    ]);
    function getConstantTypeOfHelperCall(value, context) {
      if (value.type === 14 && !isString(value.callee) && allowHoistedHelperSet.has(value.callee)) {
        const arg = value.arguments[0];
        if (arg.type === 4) {
          return getConstantType(arg, context);
        } else if (arg.type === 14) {
          return getConstantTypeOfHelperCall(arg, context);
        }
      }
      return 0;
    }
    function getGeneratedPropsConstantType(node, context) {
      let returnType = 3;
      const props = getNodeProps(node);
      if (props && props.type === 15) {
        const { properties } = props;
        for (let i = 0; i < properties.length; i++) {
          const { key, value } = properties[i];
          const keyType = getConstantType(key, context);
          if (keyType === 0) {
            return keyType;
          }
          if (keyType < returnType) {
            returnType = keyType;
          }
          let valueType;
          if (value.type === 4) {
            valueType = getConstantType(value, context);
          } else if (value.type === 14) {
            valueType = getConstantTypeOfHelperCall(value, context);
          } else {
            valueType = 0;
          }
          if (valueType === 0) {
            return valueType;
          }
          if (valueType < returnType) {
            returnType = valueType;
          }
        }
      }
      return returnType;
    }
    function getNodeProps(node) {
      const codegenNode = node.codegenNode;
      if (codegenNode.type === 13) {
        return codegenNode.props;
      }
    }
    function getPatchFlag(node) {
      const flag = node.patchFlag;
      return flag ? parseInt(flag, 10) : void 0;
    }
    function createTransformContext(root, { filename = "", prefixIdentifiers = false, hoistStatic: hoistStatic2 = false, cacheHandlers = false, nodeTransforms = [], directiveTransforms = {}, transformHoist = null, isBuiltInComponent = NOOP, isCustomElement = NOOP, expressionPlugins = [], scopeId = null, slotted = true, ssr = false, inSSR = false, ssrCssVars = ``, bindingMetadata = EMPTY_OBJ, inline = false, isTS = false, onError = defaultOnError, onWarn = defaultOnWarn, compatConfig }) {
      const nameMatch = filename.replace(/\?.*$/, "").match(/([^/\\]+)\.\w+$/);
      const context = {
        selfName: nameMatch && capitalize(camelize(nameMatch[1])),
        prefixIdentifiers,
        hoistStatic: hoistStatic2,
        cacheHandlers,
        nodeTransforms,
        directiveTransforms,
        transformHoist,
        isBuiltInComponent,
        isCustomElement,
        expressionPlugins,
        scopeId,
        slotted,
        ssr,
        inSSR,
        ssrCssVars,
        bindingMetadata,
        inline,
        isTS,
        onError,
        onWarn,
        compatConfig,
        root,
        helpers: /* @__PURE__ */ new Map(),
        components: /* @__PURE__ */ new Set(),
        directives: /* @__PURE__ */ new Set(),
        hoists: [],
        imports: [],
        constantCache: /* @__PURE__ */ new Map(),
        temps: 0,
        cached: 0,
        identifiers: /* @__PURE__ */ Object.create(null),
        scopes: {
          vFor: 0,
          vSlot: 0,
          vPre: 0,
          vOnce: 0
        },
        parent: null,
        currentNode: root,
        childIndex: 0,
        inVOnce: false,
        helper(name) {
          const count = context.helpers.get(name) || 0;
          context.helpers.set(name, count + 1);
          return name;
        },
        removeHelper(name) {
          const count = context.helpers.get(name);
          if (count) {
            const currentCount = count - 1;
            if (!currentCount) {
              context.helpers.delete(name);
            } else {
              context.helpers.set(name, currentCount);
            }
          }
        },
        helperString(name) {
          return `_${helperNameMap[context.helper(name)]}`;
        },
        replaceNode(node) {
          {
            if (!context.currentNode) {
              throw new Error(`Node being replaced is already removed.`);
            }
            if (!context.parent) {
              throw new Error(`Cannot replace root node.`);
            }
          }
          context.parent.children[context.childIndex] = context.currentNode = node;
        },
        removeNode(node) {
          if (!context.parent) {
            throw new Error(`Cannot remove root node.`);
          }
          const list = context.parent.children;
          const removalIndex = node ? list.indexOf(node) : context.currentNode ? context.childIndex : -1;
          if (removalIndex < 0) {
            throw new Error(`node being removed is not a child of current parent`);
          }
          if (!node || node === context.currentNode) {
            context.currentNode = null;
            context.onNodeRemoved();
          } else {
            if (context.childIndex > removalIndex) {
              context.childIndex--;
              context.onNodeRemoved();
            }
          }
          context.parent.children.splice(removalIndex, 1);
        },
        onNodeRemoved: () => {
        },
        addIdentifiers(exp) {
        },
        removeIdentifiers(exp) {
        },
        hoist(exp) {
          if (isString(exp))
            exp = createSimpleExpression(exp);
          context.hoists.push(exp);
          const identifier = createSimpleExpression(`_hoisted_${context.hoists.length}`, false, exp.loc, 2);
          identifier.hoisted = exp;
          return identifier;
        },
        cache(exp, isVNode2 = false) {
          return createCacheExpression(context.cached++, exp, isVNode2);
        }
      };
      return context;
    }
    function transform(root, options) {
      const context = createTransformContext(root, options);
      traverseNode(root, context);
      if (options.hoistStatic) {
        hoistStatic(root, context);
      }
      if (!options.ssr) {
        createRootCodegen(root, context);
      }
      root.helpers = [...context.helpers.keys()];
      root.components = [...context.components];
      root.directives = [...context.directives];
      root.imports = context.imports;
      root.hoists = context.hoists;
      root.temps = context.temps;
      root.cached = context.cached;
    }
    function createRootCodegen(root, context) {
      const { helper } = context;
      const { children } = root;
      if (children.length === 1) {
        const child = children[0];
        if (isSingleElementRoot(root, child) && child.codegenNode) {
          const codegenNode = child.codegenNode;
          if (codegenNode.type === 13) {
            makeBlock(codegenNode, context);
          }
          root.codegenNode = codegenNode;
        } else {
          root.codegenNode = child;
        }
      } else if (children.length > 1) {
        let patchFlag = 64;
        let patchFlagText = PatchFlagNames[64];
        if (children.filter((c) => c.type !== 3).length === 1) {
          patchFlag |= 2048;
          patchFlagText += `, ${PatchFlagNames[2048]}`;
        }
        root.codegenNode = createVNodeCall(context, helper(FRAGMENT), void 0, root.children, patchFlag + ` /* ${patchFlagText} */`, void 0, void 0, true, void 0, false);
      } else
        ;
    }
    function traverseChildren(parent, context) {
      let i = 0;
      const nodeRemoved = () => {
        i--;
      };
      for (; i < parent.children.length; i++) {
        const child = parent.children[i];
        if (isString(child))
          continue;
        context.parent = parent;
        context.childIndex = i;
        context.onNodeRemoved = nodeRemoved;
        traverseNode(child, context);
      }
    }
    function traverseNode(node, context) {
      context.currentNode = node;
      const { nodeTransforms } = context;
      const exitFns = [];
      for (let i2 = 0; i2 < nodeTransforms.length; i2++) {
        const onExit = nodeTransforms[i2](node, context);
        if (onExit) {
          if (isArray(onExit)) {
            exitFns.push(...onExit);
          } else {
            exitFns.push(onExit);
          }
        }
        if (!context.currentNode) {
          return;
        } else {
          node = context.currentNode;
        }
      }
      switch (node.type) {
        case 3:
          if (!context.ssr) {
            context.helper(CREATE_COMMENT);
          }
          break;
        case 5:
          if (!context.ssr) {
            context.helper(TO_DISPLAY_STRING);
          }
          break;
        case 9:
          for (let i2 = 0; i2 < node.branches.length; i2++) {
            traverseNode(node.branches[i2], context);
          }
          break;
        case 10:
        case 11:
        case 1:
        case 0:
          traverseChildren(node, context);
          break;
      }
      context.currentNode = node;
      let i = exitFns.length;
      while (i--) {
        exitFns[i]();
      }
    }
    function createStructuralDirectiveTransform(name, fn) {
      const matches2 = isString(name) ? (n) => n === name : (n) => name.test(n);
      return (node, context) => {
        if (node.type === 1) {
          const { props } = node;
          if (node.tagType === 3 && props.some(isVSlot)) {
            return;
          }
          const exitFns = [];
          for (let i = 0; i < props.length; i++) {
            const prop = props[i];
            if (prop.type === 7 && matches2(prop.name)) {
              props.splice(i, 1);
              i--;
              const onExit = fn(node, prop, context);
              if (onExit)
                exitFns.push(onExit);
            }
          }
          return exitFns;
        }
      };
    }
    const PURE_ANNOTATION = `/*#__PURE__*/`;
    const aliasHelper = (s) => `${helperNameMap[s]}: _${helperNameMap[s]}`;
    function createCodegenContext(ast, { mode = "function", prefixIdentifiers = mode === "module", sourceMap = false, filename = `template.vue.html`, scopeId = null, optimizeImports = false, runtimeGlobalName = `Vue`, runtimeModuleName = `vue`, ssrRuntimeModuleName = "vue/server-renderer", ssr = false, isTS = false, inSSR = false }) {
      const context = {
        mode,
        prefixIdentifiers,
        sourceMap,
        filename,
        scopeId,
        optimizeImports,
        runtimeGlobalName,
        runtimeModuleName,
        ssrRuntimeModuleName,
        ssr,
        isTS,
        inSSR,
        source: ast.loc.source,
        code: ``,
        column: 1,
        line: 1,
        offset: 0,
        indentLevel: 0,
        pure: false,
        map: void 0,
        helper(key) {
          return `_${helperNameMap[key]}`;
        },
        push(code, node) {
          context.code += code;
        },
        indent() {
          newline(++context.indentLevel);
        },
        deindent(withoutNewLine = false) {
          if (withoutNewLine) {
            --context.indentLevel;
          } else {
            newline(--context.indentLevel);
          }
        },
        newline() {
          newline(context.indentLevel);
        }
      };
      function newline(n) {
        context.push("\n" + `  `.repeat(n));
      }
      return context;
    }
    function generate(ast, options = {}) {
      const context = createCodegenContext(ast, options);
      if (options.onContextCreated)
        options.onContextCreated(context);
      const { mode, push, prefixIdentifiers, indent, deindent, newline, scopeId, ssr } = context;
      const hasHelpers = ast.helpers.length > 0;
      const useWithBlock = !prefixIdentifiers && mode !== "module";
      const preambleContext = context;
      {
        genFunctionPreamble(ast, preambleContext);
      }
      const functionName = ssr ? `ssrRender` : `render`;
      const args = ssr ? ["_ctx", "_push", "_parent", "_attrs"] : ["_ctx", "_cache"];
      const signature = args.join(", ");
      {
        push(`function ${functionName}(${signature}) {`);
      }
      indent();
      if (useWithBlock) {
        push(`with (_ctx) {`);
        indent();
        if (hasHelpers) {
          push(`const { ${ast.helpers.map(aliasHelper).join(", ")} } = _Vue`);
          push(`
`);
          newline();
        }
      }
      if (ast.components.length) {
        genAssets(ast.components, "component", context);
        if (ast.directives.length || ast.temps > 0) {
          newline();
        }
      }
      if (ast.directives.length) {
        genAssets(ast.directives, "directive", context);
        if (ast.temps > 0) {
          newline();
        }
      }
      if (ast.temps > 0) {
        push(`let `);
        for (let i = 0; i < ast.temps; i++) {
          push(`${i > 0 ? `, ` : ``}_temp${i}`);
        }
      }
      if (ast.components.length || ast.directives.length || ast.temps) {
        push(`
`);
        newline();
      }
      if (!ssr) {
        push(`return `);
      }
      if (ast.codegenNode) {
        genNode(ast.codegenNode, context);
      } else {
        push(`null`);
      }
      if (useWithBlock) {
        deindent();
        push(`}`);
      }
      deindent();
      push(`}`);
      return {
        ast,
        code: context.code,
        preamble: ``,
        map: context.map ? context.map.toJSON() : void 0
      };
    }
    function genFunctionPreamble(ast, context) {
      const { ssr, prefixIdentifiers, push, newline, runtimeModuleName, runtimeGlobalName, ssrRuntimeModuleName } = context;
      const VueBinding = runtimeGlobalName;
      if (ast.helpers.length > 0) {
        {
          push(`const _Vue = ${VueBinding}
`);
          if (ast.hoists.length) {
            const staticHelpers = [
              CREATE_VNODE,
              CREATE_ELEMENT_VNODE,
              CREATE_COMMENT,
              CREATE_TEXT,
              CREATE_STATIC
            ].filter((helper) => ast.helpers.includes(helper)).map(aliasHelper).join(", ");
            push(`const { ${staticHelpers} } = _Vue
`);
          }
        }
      }
      genHoists(ast.hoists, context);
      newline();
      push(`return `);
    }
    function genAssets(assets, type, { helper, push, newline, isTS }) {
      const resolver = helper(type === "component" ? RESOLVE_COMPONENT : RESOLVE_DIRECTIVE);
      for (let i = 0; i < assets.length; i++) {
        let id = assets[i];
        const maybeSelfReference = id.endsWith("__self");
        if (maybeSelfReference) {
          id = id.slice(0, -6);
        }
        push(`const ${toValidAssetId(id, type)} = ${resolver}(${JSON.stringify(id)}${maybeSelfReference ? `, true` : ``})${isTS ? `!` : ``}`);
        if (i < assets.length - 1) {
          newline();
        }
      }
    }
    function genHoists(hoists, context) {
      if (!hoists.length) {
        return;
      }
      context.pure = true;
      const { push, newline, helper, scopeId, mode } = context;
      newline();
      for (let i = 0; i < hoists.length; i++) {
        const exp = hoists[i];
        if (exp) {
          push(`const _hoisted_${i + 1} = ${``}`);
          genNode(exp, context);
          newline();
        }
      }
      context.pure = false;
    }
    function isText$1(n) {
      return isString(n) || n.type === 4 || n.type === 2 || n.type === 5 || n.type === 8;
    }
    function genNodeListAsArray(nodes, context) {
      const multilines = nodes.length > 3 || nodes.some((n) => isArray(n) || !isText$1(n));
      context.push(`[`);
      multilines && context.indent();
      genNodeList(nodes, context, multilines);
      multilines && context.deindent();
      context.push(`]`);
    }
    function genNodeList(nodes, context, multilines = false, comma = true) {
      const { push, newline } = context;
      for (let i = 0; i < nodes.length; i++) {
        const node = nodes[i];
        if (isString(node)) {
          push(node);
        } else if (isArray(node)) {
          genNodeListAsArray(node, context);
        } else {
          genNode(node, context);
        }
        if (i < nodes.length - 1) {
          if (multilines) {
            comma && push(",");
            newline();
          } else {
            comma && push(", ");
          }
        }
      }
    }
    function genNode(node, context) {
      if (isString(node)) {
        context.push(node);
        return;
      }
      if (isSymbol(node)) {
        context.push(context.helper(node));
        return;
      }
      switch (node.type) {
        case 1:
        case 9:
        case 11:
          assert(node.codegenNode != null, `Codegen node is missing for element/if/for node. Apply appropriate transforms first.`);
          genNode(node.codegenNode, context);
          break;
        case 2:
          genText(node, context);
          break;
        case 4:
          genExpression(node, context);
          break;
        case 5:
          genInterpolation(node, context);
          break;
        case 12:
          genNode(node.codegenNode, context);
          break;
        case 8:
          genCompoundExpression(node, context);
          break;
        case 3:
          genComment(node, context);
          break;
        case 13:
          genVNodeCall(node, context);
          break;
        case 14:
          genCallExpression(node, context);
          break;
        case 15:
          genObjectExpression(node, context);
          break;
        case 17:
          genArrayExpression(node, context);
          break;
        case 18:
          genFunctionExpression(node, context);
          break;
        case 19:
          genConditionalExpression(node, context);
          break;
        case 20:
          genCacheExpression(node, context);
          break;
        case 21:
          genNodeList(node.body, context, true, false);
          break;
        case 22:
          break;
        case 23:
          break;
        case 24:
          break;
        case 25:
          break;
        case 26:
          break;
        case 10:
          break;
        default: {
          assert(false, `unhandled codegen node type: ${node.type}`);
          const exhaustiveCheck = node;
          return exhaustiveCheck;
        }
      }
    }
    function genText(node, context) {
      context.push(JSON.stringify(node.content), node);
    }
    function genExpression(node, context) {
      const { content, isStatic } = node;
      context.push(isStatic ? JSON.stringify(content) : content, node);
    }
    function genInterpolation(node, context) {
      const { push, helper, pure } = context;
      if (pure)
        push(PURE_ANNOTATION);
      push(`${helper(TO_DISPLAY_STRING)}(`);
      genNode(node.content, context);
      push(`)`);
    }
    function genCompoundExpression(node, context) {
      for (let i = 0; i < node.children.length; i++) {
        const child = node.children[i];
        if (isString(child)) {
          context.push(child);
        } else {
          genNode(child, context);
        }
      }
    }
    function genExpressionAsPropertyKey(node, context) {
      const { push } = context;
      if (node.type === 8) {
        push(`[`);
        genCompoundExpression(node, context);
        push(`]`);
      } else if (node.isStatic) {
        const text = isSimpleIdentifier(node.content) ? node.content : JSON.stringify(node.content);
        push(text, node);
      } else {
        push(`[${node.content}]`, node);
      }
    }
    function genComment(node, context) {
      const { push, helper, pure } = context;
      if (pure) {
        push(PURE_ANNOTATION);
      }
      push(`${helper(CREATE_COMMENT)}(${JSON.stringify(node.content)})`, node);
    }
    function genVNodeCall(node, context) {
      const { push, helper, pure } = context;
      const { tag, props, children, patchFlag, dynamicProps, directives, isBlock, disableTracking, isComponent: isComponent2 } = node;
      if (directives) {
        push(helper(WITH_DIRECTIVES) + `(`);
      }
      if (isBlock) {
        push(`(${helper(OPEN_BLOCK)}(${disableTracking ? `true` : ``}), `);
      }
      if (pure) {
        push(PURE_ANNOTATION);
      }
      const callHelper = isBlock ? getVNodeBlockHelper(context.inSSR, isComponent2) : getVNodeHelper(context.inSSR, isComponent2);
      push(helper(callHelper) + `(`, node);
      genNodeList(genNullableArgs([tag, props, children, patchFlag, dynamicProps]), context);
      push(`)`);
      if (isBlock) {
        push(`)`);
      }
      if (directives) {
        push(`, `);
        genNode(directives, context);
        push(`)`);
      }
    }
    function genNullableArgs(args) {
      let i = args.length;
      while (i--) {
        if (args[i] != null)
          break;
      }
      return args.slice(0, i + 1).map((arg) => arg || `null`);
    }
    function genCallExpression(node, context) {
      const { push, helper, pure } = context;
      const callee = isString(node.callee) ? node.callee : helper(node.callee);
      if (pure) {
        push(PURE_ANNOTATION);
      }
      push(callee + `(`, node);
      genNodeList(node.arguments, context);
      push(`)`);
    }
    function genObjectExpression(node, context) {
      const { push, indent, deindent, newline } = context;
      const { properties } = node;
      if (!properties.length) {
        push(`{}`, node);
        return;
      }
      const multilines = properties.length > 1 || properties.some((p2) => p2.value.type !== 4);
      push(multilines ? `{` : `{ `);
      multilines && indent();
      for (let i = 0; i < properties.length; i++) {
        const { key, value } = properties[i];
        genExpressionAsPropertyKey(key, context);
        push(`: `);
        genNode(value, context);
        if (i < properties.length - 1) {
          push(`,`);
          newline();
        }
      }
      multilines && deindent();
      push(multilines ? `}` : ` }`);
    }
    function genArrayExpression(node, context) {
      genNodeListAsArray(node.elements, context);
    }
    function genFunctionExpression(node, context) {
      const { push, indent, deindent } = context;
      const { params, returns, body, newline, isSlot } = node;
      if (isSlot) {
        push(`_${helperNameMap[WITH_CTX]}(`);
      }
      push(`(`, node);
      if (isArray(params)) {
        genNodeList(params, context);
      } else if (params) {
        genNode(params, context);
      }
      push(`) => `);
      if (newline || body) {
        push(`{`);
        indent();
      }
      if (returns) {
        if (newline) {
          push(`return `);
        }
        if (isArray(returns)) {
          genNodeListAsArray(returns, context);
        } else {
          genNode(returns, context);
        }
      } else if (body) {
        genNode(body, context);
      }
      if (newline || body) {
        deindent();
        push(`}`);
      }
      if (isSlot) {
        push(`)`);
      }
    }
    function genConditionalExpression(node, context) {
      const { test, consequent, alternate, newline: needNewline } = node;
      const { push, indent, deindent, newline } = context;
      if (test.type === 4) {
        const needsParens = !isSimpleIdentifier(test.content);
        needsParens && push(`(`);
        genExpression(test, context);
        needsParens && push(`)`);
      } else {
        push(`(`);
        genNode(test, context);
        push(`)`);
      }
      needNewline && indent();
      context.indentLevel++;
      needNewline || push(` `);
      push(`? `);
      genNode(consequent, context);
      context.indentLevel--;
      needNewline && newline();
      needNewline || push(` `);
      push(`: `);
      const isNested = alternate.type === 19;
      if (!isNested) {
        context.indentLevel++;
      }
      genNode(alternate, context);
      if (!isNested) {
        context.indentLevel--;
      }
      needNewline && deindent(true);
    }
    function genCacheExpression(node, context) {
      const { push, helper, indent, deindent, newline } = context;
      push(`_cache[${node.index}] || (`);
      if (node.isVNode) {
        indent();
        push(`${helper(SET_BLOCK_TRACKING)}(-1),`);
        newline();
      }
      push(`_cache[${node.index}] = `);
      genNode(node.value, context);
      if (node.isVNode) {
        push(`,`);
        newline();
        push(`${helper(SET_BLOCK_TRACKING)}(1),`);
        newline();
        push(`_cache[${node.index}]`);
        deindent();
      }
      push(`)`);
    }
    const prohibitedKeywordRE = new RegExp("\\b" + "do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments,typeof,void".split(",").join("\\b|\\b") + "\\b");
    const stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;
    function validateBrowserExpression(node, context, asParams = false, asRawStatements = false) {
      const exp = node.content;
      if (!exp.trim()) {
        return;
      }
      try {
        new Function(asRawStatements ? ` ${exp} ` : `return ${asParams ? `(${exp}) => {}` : `(${exp})`}`);
      } catch (e) {
        let message = e.message;
        const keywordMatch = exp.replace(stripStringRE, "").match(prohibitedKeywordRE);
        if (keywordMatch) {
          message = `avoid using JavaScript keyword as property name: "${keywordMatch[0]}"`;
        }
        context.onError(createCompilerError(44, node.loc, void 0, message));
      }
    }
    const transformExpression = (node, context) => {
      if (node.type === 5) {
        node.content = processExpression(node.content, context);
      } else if (node.type === 1) {
        for (let i = 0; i < node.props.length; i++) {
          const dir = node.props[i];
          if (dir.type === 7 && dir.name !== "for") {
            const exp = dir.exp;
            const arg = dir.arg;
            if (exp && exp.type === 4 && !(dir.name === "on" && arg)) {
              dir.exp = processExpression(
                exp,
                context,
                dir.name === "slot"
              );
            }
            if (arg && arg.type === 4 && !arg.isStatic) {
              dir.arg = processExpression(arg, context);
            }
          }
        }
      }
    };
    function processExpression(node, context, asParams = false, asRawStatements = false, localVars = Object.create(context.identifiers)) {
      {
        {
          validateBrowserExpression(node, context, asParams, asRawStatements);
        }
        return node;
      }
    }
    const transformIf = createStructuralDirectiveTransform(/^(if|else|else-if)$/, (node, dir, context) => {
      return processIf(node, dir, context, (ifNode, branch, isRoot) => {
        const siblings = context.parent.children;
        let i = siblings.indexOf(ifNode);
        let key = 0;
        while (i-- >= 0) {
          const sibling = siblings[i];
          if (sibling && sibling.type === 9) {
            key += sibling.branches.length;
          }
        }
        return () => {
          if (isRoot) {
            ifNode.codegenNode = createCodegenNodeForBranch(branch, key, context);
          } else {
            const parentCondition = getParentCondition(ifNode.codegenNode);
            parentCondition.alternate = createCodegenNodeForBranch(branch, key + ifNode.branches.length - 1, context);
          }
        };
      });
    });
    function processIf(node, dir, context, processCodegen) {
      if (dir.name !== "else" && (!dir.exp || !dir.exp.content.trim())) {
        const loc = dir.exp ? dir.exp.loc : node.loc;
        context.onError(createCompilerError(28, dir.loc));
        dir.exp = createSimpleExpression(`true`, false, loc);
      }
      if (dir.exp) {
        validateBrowserExpression(dir.exp, context);
      }
      if (dir.name === "if") {
        const branch = createIfBranch(node, dir);
        const ifNode = {
          type: 9,
          loc: node.loc,
          branches: [branch]
        };
        context.replaceNode(ifNode);
        if (processCodegen) {
          return processCodegen(ifNode, branch, true);
        }
      } else {
        const siblings = context.parent.children;
        const comments = [];
        let i = siblings.indexOf(node);
        while (i-- >= -1) {
          const sibling = siblings[i];
          if (sibling && sibling.type === 3) {
            context.removeNode(sibling);
            comments.unshift(sibling);
            continue;
          }
          if (sibling && sibling.type === 2 && !sibling.content.trim().length) {
            context.removeNode(sibling);
            continue;
          }
          if (sibling && sibling.type === 9) {
            if (dir.name === "else-if" && sibling.branches[sibling.branches.length - 1].condition === void 0) {
              context.onError(createCompilerError(30, node.loc));
            }
            context.removeNode();
            const branch = createIfBranch(node, dir);
            if (comments.length && !(context.parent && context.parent.type === 1 && isBuiltInType(context.parent.tag, "transition"))) {
              branch.children = [...comments, ...branch.children];
            }
            {
              const key = branch.userKey;
              if (key) {
                sibling.branches.forEach(({ userKey }) => {
                  if (isSameKey(userKey, key)) {
                    context.onError(createCompilerError(29, branch.userKey.loc));
                  }
                });
              }
            }
            sibling.branches.push(branch);
            const onExit = processCodegen && processCodegen(sibling, branch, false);
            traverseNode(branch, context);
            if (onExit)
              onExit();
            context.currentNode = null;
          } else {
            context.onError(createCompilerError(30, node.loc));
          }
          break;
        }
      }
    }
    function createIfBranch(node, dir) {
      const isTemplateIf = node.tagType === 3;
      return {
        type: 10,
        loc: node.loc,
        condition: dir.name === "else" ? void 0 : dir.exp,
        children: isTemplateIf && !findDir(node, "for") ? node.children : [node],
        userKey: findProp(node, `key`),
        isTemplateIf
      };
    }
    function createCodegenNodeForBranch(branch, keyIndex, context) {
      if (branch.condition) {
        return createConditionalExpression(
          branch.condition,
          createChildrenCodegenNode(branch, keyIndex, context),
          createCallExpression(context.helper(CREATE_COMMENT), [
            '"v-if"',
            "true"
          ])
        );
      } else {
        return createChildrenCodegenNode(branch, keyIndex, context);
      }
    }
    function createChildrenCodegenNode(branch, keyIndex, context) {
      const { helper } = context;
      const keyProperty = createObjectProperty(`key`, createSimpleExpression(`${keyIndex}`, false, locStub, 2));
      const { children } = branch;
      const firstChild = children[0];
      const needFragmentWrapper = children.length !== 1 || firstChild.type !== 1;
      if (needFragmentWrapper) {
        if (children.length === 1 && firstChild.type === 11) {
          const vnodeCall = firstChild.codegenNode;
          injectProp(vnodeCall, keyProperty, context);
          return vnodeCall;
        } else {
          let patchFlag = 64;
          let patchFlagText = PatchFlagNames[64];
          if (!branch.isTemplateIf && children.filter((c) => c.type !== 3).length === 1) {
            patchFlag |= 2048;
            patchFlagText += `, ${PatchFlagNames[2048]}`;
          }
          return createVNodeCall(context, helper(FRAGMENT), createObjectExpression([keyProperty]), children, patchFlag + ` /* ${patchFlagText} */`, void 0, void 0, true, false, false, branch.loc);
        }
      } else {
        const ret = firstChild.codegenNode;
        const vnodeCall = getMemoedVNodeCall(ret);
        if (vnodeCall.type === 13) {
          makeBlock(vnodeCall, context);
        }
        injectProp(vnodeCall, keyProperty, context);
        return ret;
      }
    }
    function isSameKey(a, b2) {
      if (!a || a.type !== b2.type) {
        return false;
      }
      if (a.type === 6) {
        if (a.value.content !== b2.value.content) {
          return false;
        }
      } else {
        const exp = a.exp;
        const branchExp = b2.exp;
        if (exp.type !== branchExp.type) {
          return false;
        }
        if (exp.type !== 4 || exp.isStatic !== branchExp.isStatic || exp.content !== branchExp.content) {
          return false;
        }
      }
      return true;
    }
    function getParentCondition(node) {
      while (true) {
        if (node.type === 19) {
          if (node.alternate.type === 19) {
            node = node.alternate;
          } else {
            return node;
          }
        } else if (node.type === 20) {
          node = node.value;
        }
      }
    }
    const transformFor = createStructuralDirectiveTransform("for", (node, dir, context) => {
      const { helper, removeHelper } = context;
      return processFor(node, dir, context, (forNode) => {
        const renderExp = createCallExpression(helper(RENDER_LIST), [
          forNode.source
        ]);
        const isTemplate = isTemplateNode(node);
        const memo = findDir(node, "memo");
        const keyProp = findProp(node, `key`);
        const keyExp = keyProp && (keyProp.type === 6 ? createSimpleExpression(keyProp.value.content, true) : keyProp.exp);
        const keyProperty = keyProp ? createObjectProperty(`key`, keyExp) : null;
        const isStableFragment = forNode.source.type === 4 && forNode.source.constType > 0;
        const fragmentFlag = isStableFragment ? 64 : keyProp ? 128 : 256;
        forNode.codegenNode = createVNodeCall(context, helper(FRAGMENT), void 0, renderExp, fragmentFlag + ` /* ${PatchFlagNames[fragmentFlag]} */`, void 0, void 0, true, !isStableFragment, false, node.loc);
        return () => {
          let childBlock;
          const { children } = forNode;
          if (isTemplate) {
            node.children.some((c) => {
              if (c.type === 1) {
                const key = findProp(c, "key");
                if (key) {
                  context.onError(createCompilerError(33, key.loc));
                  return true;
                }
              }
            });
          }
          const needFragmentWrapper = children.length !== 1 || children[0].type !== 1;
          const slotOutlet = isSlotOutlet(node) ? node : isTemplate && node.children.length === 1 && isSlotOutlet(node.children[0]) ? node.children[0] : null;
          if (slotOutlet) {
            childBlock = slotOutlet.codegenNode;
            if (isTemplate && keyProperty) {
              injectProp(childBlock, keyProperty, context);
            }
          } else if (needFragmentWrapper) {
            childBlock = createVNodeCall(context, helper(FRAGMENT), keyProperty ? createObjectExpression([keyProperty]) : void 0, node.children, 64 + ` /* ${PatchFlagNames[64]} */`, void 0, void 0, true, void 0, false);
          } else {
            childBlock = children[0].codegenNode;
            if (isTemplate && keyProperty) {
              injectProp(childBlock, keyProperty, context);
            }
            if (childBlock.isBlock !== !isStableFragment) {
              if (childBlock.isBlock) {
                removeHelper(OPEN_BLOCK);
                removeHelper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));
              } else {
                removeHelper(getVNodeHelper(context.inSSR, childBlock.isComponent));
              }
            }
            childBlock.isBlock = !isStableFragment;
            if (childBlock.isBlock) {
              helper(OPEN_BLOCK);
              helper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));
            } else {
              helper(getVNodeHelper(context.inSSR, childBlock.isComponent));
            }
          }
          if (memo) {
            const loop = createFunctionExpression(createForLoopParams(forNode.parseResult, [
              createSimpleExpression(`_cached`)
            ]));
            loop.body = createBlockStatement([
              createCompoundExpression([`const _memo = (`, memo.exp, `)`]),
              createCompoundExpression([
                `if (_cached`,
                ...keyExp ? [` && _cached.key === `, keyExp] : [],
                ` && ${context.helperString(IS_MEMO_SAME)}(_cached, _memo)) return _cached`
              ]),
              createCompoundExpression([`const _item = `, childBlock]),
              createSimpleExpression(`_item.memo = _memo`),
              createSimpleExpression(`return _item`)
            ]);
            renderExp.arguments.push(loop, createSimpleExpression(`_cache`), createSimpleExpression(String(context.cached++)));
          } else {
            renderExp.arguments.push(createFunctionExpression(createForLoopParams(forNode.parseResult), childBlock, true));
          }
        };
      });
    });
    function processFor(node, dir, context, processCodegen) {
      if (!dir.exp) {
        context.onError(createCompilerError(31, dir.loc));
        return;
      }
      const parseResult = parseForExpression(
        dir.exp,
        context
      );
      if (!parseResult) {
        context.onError(createCompilerError(32, dir.loc));
        return;
      }
      const { addIdentifiers, removeIdentifiers, scopes } = context;
      const { source, value, key, index } = parseResult;
      const forNode = {
        type: 11,
        loc: dir.loc,
        source,
        valueAlias: value,
        keyAlias: key,
        objectIndexAlias: index,
        parseResult,
        children: isTemplateNode(node) ? node.children : [node]
      };
      context.replaceNode(forNode);
      scopes.vFor++;
      const onExit = processCodegen && processCodegen(forNode);
      return () => {
        scopes.vFor--;
        if (onExit)
          onExit();
      };
    }
    const forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
    const forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
    const stripParensRE = /^\(|\)$/g;
    function parseForExpression(input, context) {
      const loc = input.loc;
      const exp = input.content;
      const inMatch = exp.match(forAliasRE);
      if (!inMatch)
        return;
      const [, LHS, RHS] = inMatch;
      const result = {
        source: createAliasExpression(loc, RHS.trim(), exp.indexOf(RHS, LHS.length)),
        value: void 0,
        key: void 0,
        index: void 0
      };
      {
        validateBrowserExpression(result.source, context);
      }
      let valueContent = LHS.trim().replace(stripParensRE, "").trim();
      const trimmedOffset = LHS.indexOf(valueContent);
      const iteratorMatch = valueContent.match(forIteratorRE);
      if (iteratorMatch) {
        valueContent = valueContent.replace(forIteratorRE, "").trim();
        const keyContent = iteratorMatch[1].trim();
        let keyOffset;
        if (keyContent) {
          keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length);
          result.key = createAliasExpression(loc, keyContent, keyOffset);
          {
            validateBrowserExpression(result.key, context, true);
          }
        }
        if (iteratorMatch[2]) {
          const indexContent = iteratorMatch[2].trim();
          if (indexContent) {
            result.index = createAliasExpression(loc, indexContent, exp.indexOf(indexContent, result.key ? keyOffset + keyContent.length : trimmedOffset + valueContent.length));
            {
              validateBrowserExpression(result.index, context, true);
            }
          }
        }
      }
      if (valueContent) {
        result.value = createAliasExpression(loc, valueContent, trimmedOffset);
        {
          validateBrowserExpression(result.value, context, true);
        }
      }
      return result;
    }
    function createAliasExpression(range2, content, offset) {
      return createSimpleExpression(content, false, getInnerRange(range2, offset, content.length));
    }
    function createForLoopParams({ value, key, index }, memoArgs = []) {
      return createParamsList([value, key, index, ...memoArgs]);
    }
    function createParamsList(args) {
      let i = args.length;
      while (i--) {
        if (args[i])
          break;
      }
      return args.slice(0, i + 1).map((arg, i2) => arg || createSimpleExpression(`_`.repeat(i2 + 1), false));
    }
    const defaultFallback = createSimpleExpression(`undefined`, false);
    const trackSlotScopes = (node, context) => {
      if (node.type === 1 && (node.tagType === 1 || node.tagType === 3)) {
        const vSlot = findDir(node, "slot");
        if (vSlot) {
          vSlot.exp;
          context.scopes.vSlot++;
          return () => {
            context.scopes.vSlot--;
          };
        }
      }
    };
    const buildClientSlotFn = (props, children, loc) => createFunctionExpression(props, children, false, true, children.length ? children[0].loc : loc);
    function buildSlots(node, context, buildSlotFn = buildClientSlotFn) {
      context.helper(WITH_CTX);
      const { children, loc } = node;
      const slotsProperties = [];
      const dynamicSlots = [];
      let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0;
      const onComponentSlot = findDir(node, "slot", true);
      if (onComponentSlot) {
        const { arg, exp } = onComponentSlot;
        if (arg && !isStaticExp(arg)) {
          hasDynamicSlots = true;
        }
        slotsProperties.push(createObjectProperty(arg || createSimpleExpression("default", true), buildSlotFn(exp, children, loc)));
      }
      let hasTemplateSlots = false;
      let hasNamedDefaultSlot = false;
      const implicitDefaultChildren = [];
      const seenSlotNames = /* @__PURE__ */ new Set();
      for (let i = 0; i < children.length; i++) {
        const slotElement = children[i];
        let slotDir;
        if (!isTemplateNode(slotElement) || !(slotDir = findDir(slotElement, "slot", true))) {
          if (slotElement.type !== 3) {
            implicitDefaultChildren.push(slotElement);
          }
          continue;
        }
        if (onComponentSlot) {
          context.onError(createCompilerError(37, slotDir.loc));
          break;
        }
        hasTemplateSlots = true;
        const { children: slotChildren, loc: slotLoc } = slotElement;
        const { arg: slotName = createSimpleExpression(`default`, true), exp: slotProps, loc: dirLoc } = slotDir;
        let staticSlotName;
        if (isStaticExp(slotName)) {
          staticSlotName = slotName ? slotName.content : `default`;
        } else {
          hasDynamicSlots = true;
        }
        const slotFunction = buildSlotFn(slotProps, slotChildren, slotLoc);
        let vIf;
        let vElse;
        let vFor;
        if (vIf = findDir(slotElement, "if")) {
          hasDynamicSlots = true;
          dynamicSlots.push(createConditionalExpression(vIf.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback));
        } else if (vElse = findDir(slotElement, /^else(-if)?$/, true)) {
          let j = i;
          let prev;
          while (j--) {
            prev = children[j];
            if (prev.type !== 3) {
              break;
            }
          }
          if (prev && isTemplateNode(prev) && findDir(prev, "if")) {
            children.splice(i, 1);
            i--;
            let conditional = dynamicSlots[dynamicSlots.length - 1];
            while (conditional.alternate.type === 19) {
              conditional = conditional.alternate;
            }
            conditional.alternate = vElse.exp ? createConditionalExpression(vElse.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback) : buildDynamicSlot(slotName, slotFunction);
          } else {
            context.onError(createCompilerError(30, vElse.loc));
          }
        } else if (vFor = findDir(slotElement, "for")) {
          hasDynamicSlots = true;
          const parseResult = vFor.parseResult || parseForExpression(vFor.exp, context);
          if (parseResult) {
            dynamicSlots.push(createCallExpression(context.helper(RENDER_LIST), [
              parseResult.source,
              createFunctionExpression(createForLoopParams(parseResult), buildDynamicSlot(slotName, slotFunction), true)
            ]));
          } else {
            context.onError(createCompilerError(32, vFor.loc));
          }
        } else {
          if (staticSlotName) {
            if (seenSlotNames.has(staticSlotName)) {
              context.onError(createCompilerError(38, dirLoc));
              continue;
            }
            seenSlotNames.add(staticSlotName);
            if (staticSlotName === "default") {
              hasNamedDefaultSlot = true;
            }
          }
          slotsProperties.push(createObjectProperty(slotName, slotFunction));
        }
      }
      if (!onComponentSlot) {
        const buildDefaultSlotProperty = (props, children2) => {
          const fn = buildSlotFn(props, children2, loc);
          return createObjectProperty(`default`, fn);
        };
        if (!hasTemplateSlots) {
          slotsProperties.push(buildDefaultSlotProperty(void 0, children));
        } else if (implicitDefaultChildren.length && implicitDefaultChildren.some((node2) => isNonWhitespaceContent(node2))) {
          if (hasNamedDefaultSlot) {
            context.onError(createCompilerError(39, implicitDefaultChildren[0].loc));
          } else {
            slotsProperties.push(buildDefaultSlotProperty(void 0, implicitDefaultChildren));
          }
        }
      }
      const slotFlag = hasDynamicSlots ? 2 : hasForwardedSlots(node.children) ? 3 : 1;
      let slots = createObjectExpression(slotsProperties.concat(createObjectProperty(
        `_`,
        createSimpleExpression(slotFlag + ` /* ${slotFlagsText[slotFlag]} */`, false)
      )), loc);
      if (dynamicSlots.length) {
        slots = createCallExpression(context.helper(CREATE_SLOTS), [
          slots,
          createArrayExpression(dynamicSlots)
        ]);
      }
      return {
        slots,
        hasDynamicSlots
      };
    }
    function buildDynamicSlot(name, fn) {
      return createObjectExpression([
        createObjectProperty(`name`, name),
        createObjectProperty(`fn`, fn)
      ]);
    }
    function hasForwardedSlots(children) {
      for (let i = 0; i < children.length; i++) {
        const child = children[i];
        switch (child.type) {
          case 1:
            if (child.tagType === 2 || hasForwardedSlots(child.children)) {
              return true;
            }
            break;
          case 9:
            if (hasForwardedSlots(child.branches))
              return true;
            break;
          case 10:
          case 11:
            if (hasForwardedSlots(child.children))
              return true;
            break;
        }
      }
      return false;
    }
    function isNonWhitespaceContent(node) {
      if (node.type !== 2 && node.type !== 12)
        return true;
      return node.type === 2 ? !!node.content.trim() : isNonWhitespaceContent(node.content);
    }
    const directiveImportMap = /* @__PURE__ */ new WeakMap();
    const transformElement = (node, context) => {
      return function postTransformElement() {
        node = context.currentNode;
        if (!(node.type === 1 && (node.tagType === 0 || node.tagType === 1))) {
          return;
        }
        const { tag, props } = node;
        const isComponent2 = node.tagType === 1;
        let vnodeTag = isComponent2 ? resolveComponentType(node, context) : `"${tag}"`;
        const isDynamicComponent = isObject(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT;
        let vnodeProps;
        let vnodeChildren;
        let vnodePatchFlag;
        let patchFlag = 0;
        let vnodeDynamicProps;
        let dynamicPropNames;
        let vnodeDirectives;
        let shouldUseBlock = isDynamicComponent || vnodeTag === TELEPORT || vnodeTag === SUSPENSE || !isComponent2 && (tag === "svg" || tag === "foreignObject");
        if (props.length > 0) {
          const propsBuildResult = buildProps(node, context, void 0, isComponent2, isDynamicComponent);
          vnodeProps = propsBuildResult.props;
          patchFlag = propsBuildResult.patchFlag;
          dynamicPropNames = propsBuildResult.dynamicPropNames;
          const directives = propsBuildResult.directives;
          vnodeDirectives = directives && directives.length ? createArrayExpression(directives.map((dir) => buildDirectiveArgs(dir, context))) : void 0;
          if (propsBuildResult.shouldUseBlock) {
            shouldUseBlock = true;
          }
        }
        if (node.children.length > 0) {
          if (vnodeTag === KEEP_ALIVE) {
            shouldUseBlock = true;
            patchFlag |= 1024;
            if (node.children.length > 1) {
              context.onError(createCompilerError(45, {
                start: node.children[0].loc.start,
                end: node.children[node.children.length - 1].loc.end,
                source: ""
              }));
            }
          }
          const shouldBuildAsSlots = isComponent2 && vnodeTag !== TELEPORT && vnodeTag !== KEEP_ALIVE;
          if (shouldBuildAsSlots) {
            const { slots, hasDynamicSlots } = buildSlots(node, context);
            vnodeChildren = slots;
            if (hasDynamicSlots) {
              patchFlag |= 1024;
            }
          } else if (node.children.length === 1 && vnodeTag !== TELEPORT) {
            const child = node.children[0];
            const type = child.type;
            const hasDynamicTextChild = type === 5 || type === 8;
            if (hasDynamicTextChild && getConstantType(child, context) === 0) {
              patchFlag |= 1;
            }
            if (hasDynamicTextChild || type === 2) {
              vnodeChildren = child;
            } else {
              vnodeChildren = node.children;
            }
          } else {
            vnodeChildren = node.children;
          }
        }
        if (patchFlag !== 0) {
          {
            if (patchFlag < 0) {
              vnodePatchFlag = patchFlag + ` /* ${PatchFlagNames[patchFlag]} */`;
            } else {
              const flagNames = Object.keys(PatchFlagNames).map(Number).filter((n) => n > 0 && patchFlag & n).map((n) => PatchFlagNames[n]).join(`, `);
              vnodePatchFlag = patchFlag + ` /* ${flagNames} */`;
            }
          }
          if (dynamicPropNames && dynamicPropNames.length) {
            vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames);
          }
        }
        node.codegenNode = createVNodeCall(context, vnodeTag, vnodeProps, vnodeChildren, vnodePatchFlag, vnodeDynamicProps, vnodeDirectives, !!shouldUseBlock, false, isComponent2, node.loc);
      };
    };
    function resolveComponentType(node, context, ssr = false) {
      let { tag } = node;
      const isExplicitDynamic = isComponentTag(tag);
      const isProp = findProp(node, "is");
      if (isProp) {
        if (isExplicitDynamic || false) {
          const exp = isProp.type === 6 ? isProp.value && createSimpleExpression(isProp.value.content, true) : isProp.exp;
          if (exp) {
            return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [
              exp
            ]);
          }
        } else if (isProp.type === 6 && isProp.value.content.startsWith("vue:")) {
          tag = isProp.value.content.slice(4);
        }
      }
      const isDir = !isExplicitDynamic && findDir(node, "is");
      if (isDir && isDir.exp) {
        return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [
          isDir.exp
        ]);
      }
      const builtIn = isCoreComponent(tag) || context.isBuiltInComponent(tag);
      if (builtIn) {
        if (!ssr)
          context.helper(builtIn);
        return builtIn;
      }
      context.helper(RESOLVE_COMPONENT);
      context.components.add(tag);
      return toValidAssetId(tag, `component`);
    }
    function buildProps(node, context, props = node.props, isComponent2, isDynamicComponent, ssr = false) {
      const { tag, loc: elementLoc, children } = node;
      let properties = [];
      const mergeArgs = [];
      const runtimeDirectives = [];
      const hasChildren = children.length > 0;
      let shouldUseBlock = false;
      let patchFlag = 0;
      let hasRef = false;
      let hasClassBinding = false;
      let hasStyleBinding = false;
      let hasHydrationEventBinding = false;
      let hasDynamicKeys = false;
      let hasVnodeHook = false;
      const dynamicPropNames = [];
      const analyzePatchFlag = ({ key, value }) => {
        if (isStaticExp(key)) {
          const name = key.content;
          const isEventHandler = isOn(name);
          if (isEventHandler && (!isComponent2 || isDynamicComponent) && name.toLowerCase() !== "onclick" && name !== "onUpdate:modelValue" && !isReservedProp(name)) {
            hasHydrationEventBinding = true;
          }
          if (isEventHandler && isReservedProp(name)) {
            hasVnodeHook = true;
          }
          if (value.type === 20 || (value.type === 4 || value.type === 8) && getConstantType(value, context) > 0) {
            return;
          }
          if (name === "ref") {
            hasRef = true;
          } else if (name === "class") {
            hasClassBinding = true;
          } else if (name === "style") {
            hasStyleBinding = true;
          } else if (name !== "key" && !dynamicPropNames.includes(name)) {
            dynamicPropNames.push(name);
          }
          if (isComponent2 && (name === "class" || name === "style") && !dynamicPropNames.includes(name)) {
            dynamicPropNames.push(name);
          }
        } else {
          hasDynamicKeys = true;
        }
      };
      for (let i = 0; i < props.length; i++) {
        const prop = props[i];
        if (prop.type === 6) {
          const { loc, name, value } = prop;
          let isStatic = true;
          if (name === "ref") {
            hasRef = true;
            if (context.scopes.vFor > 0) {
              properties.push(createObjectProperty(createSimpleExpression("ref_for", true), createSimpleExpression("true")));
            }
          }
          if (name === "is" && (isComponentTag(tag) || value && value.content.startsWith("vue:") || false)) {
            continue;
          }
          properties.push(createObjectProperty(createSimpleExpression(name, true, getInnerRange(loc, 0, name.length)), createSimpleExpression(value ? value.content : "", isStatic, value ? value.loc : loc)));
        } else {
          const { name, arg, exp, loc } = prop;
          const isVBind = name === "bind";
          const isVOn = name === "on";
          if (name === "slot") {
            if (!isComponent2) {
              context.onError(createCompilerError(40, loc));
            }
            continue;
          }
          if (name === "once" || name === "memo") {
            continue;
          }
          if (name === "is" || isVBind && isStaticArgOf(arg, "is") && (isComponentTag(tag) || false)) {
            continue;
          }
          if (isVOn && ssr) {
            continue;
          }
          if (isVBind && isStaticArgOf(arg, "key") || isVOn && hasChildren && isStaticArgOf(arg, "vue:before-update")) {
            shouldUseBlock = true;
          }
          if (isVBind && isStaticArgOf(arg, "ref") && context.scopes.vFor > 0) {
            properties.push(createObjectProperty(createSimpleExpression("ref_for", true), createSimpleExpression("true")));
          }
          if (!arg && (isVBind || isVOn)) {
            hasDynamicKeys = true;
            if (exp) {
              if (properties.length) {
                mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));
                properties = [];
              }
              if (isVBind) {
                mergeArgs.push(exp);
              } else {
                mergeArgs.push({
                  type: 14,
                  loc,
                  callee: context.helper(TO_HANDLERS),
                  arguments: [exp]
                });
              }
            } else {
              context.onError(createCompilerError(isVBind ? 34 : 35, loc));
            }
            continue;
          }
          const directiveTransform = context.directiveTransforms[name];
          if (directiveTransform) {
            const { props: props2, needRuntime } = directiveTransform(prop, node, context);
            !ssr && props2.forEach(analyzePatchFlag);
            properties.push(...props2);
            if (needRuntime) {
              runtimeDirectives.push(prop);
              if (isSymbol(needRuntime)) {
                directiveImportMap.set(prop, needRuntime);
              }
            }
          } else if (!isBuiltInDirective(name)) {
            runtimeDirectives.push(prop);
            if (hasChildren) {
              shouldUseBlock = true;
            }
          }
        }
      }
      let propsExpression = void 0;
      if (mergeArgs.length) {
        if (properties.length) {
          mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));
        }
        if (mergeArgs.length > 1) {
          propsExpression = createCallExpression(context.helper(MERGE_PROPS), mergeArgs, elementLoc);
        } else {
          propsExpression = mergeArgs[0];
        }
      } else if (properties.length) {
        propsExpression = createObjectExpression(dedupeProperties(properties), elementLoc);
      }
      if (hasDynamicKeys) {
        patchFlag |= 16;
      } else {
        if (hasClassBinding && !isComponent2) {
          patchFlag |= 2;
        }
        if (hasStyleBinding && !isComponent2) {
          patchFlag |= 4;
        }
        if (dynamicPropNames.length) {
          patchFlag |= 8;
        }
        if (hasHydrationEventBinding) {
          patchFlag |= 32;
        }
      }
      if (!shouldUseBlock && (patchFlag === 0 || patchFlag === 32) && (hasRef || hasVnodeHook || runtimeDirectives.length > 0)) {
        patchFlag |= 512;
      }
      if (!context.inSSR && propsExpression) {
        switch (propsExpression.type) {
          case 15:
            let classKeyIndex = -1;
            let styleKeyIndex = -1;
            let hasDynamicKey = false;
            for (let i = 0; i < propsExpression.properties.length; i++) {
              const key = propsExpression.properties[i].key;
              if (isStaticExp(key)) {
                if (key.content === "class") {
                  classKeyIndex = i;
                } else if (key.content === "style") {
                  styleKeyIndex = i;
                }
              } else if (!key.isHandlerKey) {
                hasDynamicKey = true;
              }
            }
            const classProp = propsExpression.properties[classKeyIndex];
            const styleProp = propsExpression.properties[styleKeyIndex];
            if (!hasDynamicKey) {
              if (classProp && !isStaticExp(classProp.value)) {
                classProp.value = createCallExpression(context.helper(NORMALIZE_CLASS), [classProp.value]);
              }
              if (styleProp && (hasStyleBinding || styleProp.value.type === 4 && styleProp.value.content.trim()[0] === `[` || styleProp.value.type === 17)) {
                styleProp.value = createCallExpression(context.helper(NORMALIZE_STYLE), [styleProp.value]);
              }
            } else {
              propsExpression = createCallExpression(context.helper(NORMALIZE_PROPS), [propsExpression]);
            }
            break;
          case 14:
            break;
          default:
            propsExpression = createCallExpression(context.helper(NORMALIZE_PROPS), [
              createCallExpression(context.helper(GUARD_REACTIVE_PROPS), [
                propsExpression
              ])
            ]);
            break;
        }
      }
      return {
        props: propsExpression,
        directives: runtimeDirectives,
        patchFlag,
        dynamicPropNames,
        shouldUseBlock
      };
    }
    function dedupeProperties(properties) {
      const knownProps = /* @__PURE__ */ new Map();
      const deduped = [];
      for (let i = 0; i < properties.length; i++) {
        const prop = properties[i];
        if (prop.key.type === 8 || !prop.key.isStatic) {
          deduped.push(prop);
          continue;
        }
        const name = prop.key.content;
        const existing = knownProps.get(name);
        if (existing) {
          if (name === "style" || name === "class" || isOn(name)) {
            mergeAsArray$1(existing, prop);
          }
        } else {
          knownProps.set(name, prop);
          deduped.push(prop);
        }
      }
      return deduped;
    }
    function mergeAsArray$1(existing, incoming) {
      if (existing.value.type === 17) {
        existing.value.elements.push(incoming.value);
      } else {
        existing.value = createArrayExpression([existing.value, incoming.value], existing.loc);
      }
    }
    function buildDirectiveArgs(dir, context) {
      const dirArgs = [];
      const runtime = directiveImportMap.get(dir);
      if (runtime) {
        dirArgs.push(context.helperString(runtime));
      } else {
        {
          context.helper(RESOLVE_DIRECTIVE);
          context.directives.add(dir.name);
          dirArgs.push(toValidAssetId(dir.name, `directive`));
        }
      }
      const { loc } = dir;
      if (dir.exp)
        dirArgs.push(dir.exp);
      if (dir.arg) {
        if (!dir.exp) {
          dirArgs.push(`void 0`);
        }
        dirArgs.push(dir.arg);
      }
      if (Object.keys(dir.modifiers).length) {
        if (!dir.arg) {
          if (!dir.exp) {
            dirArgs.push(`void 0`);
          }
          dirArgs.push(`void 0`);
        }
        const trueExpression = createSimpleExpression(`true`, false, loc);
        dirArgs.push(createObjectExpression(dir.modifiers.map((modifier) => createObjectProperty(modifier, trueExpression)), loc));
      }
      return createArrayExpression(dirArgs, dir.loc);
    }
    function stringifyDynamicPropNames(props) {
      let propsNamesString = `[`;
      for (let i = 0, l = props.length; i < l; i++) {
        propsNamesString += JSON.stringify(props[i]);
        if (i < l - 1)
          propsNamesString += ", ";
      }
      return propsNamesString + `]`;
    }
    function isComponentTag(tag) {
      return tag === "component" || tag === "Component";
    }
    const transformSlotOutlet = (node, context) => {
      if (isSlotOutlet(node)) {
        const { children, loc } = node;
        const { slotName, slotProps } = processSlotOutlet(node, context);
        const slotArgs = [
          context.prefixIdentifiers ? `_ctx.$slots` : `$slots`,
          slotName,
          "{}",
          "undefined",
          "true"
        ];
        let expectedLen = 2;
        if (slotProps) {
          slotArgs[2] = slotProps;
          expectedLen = 3;
        }
        if (children.length) {
          slotArgs[3] = createFunctionExpression([], children, false, false, loc);
          expectedLen = 4;
        }
        if (context.scopeId && !context.slotted) {
          expectedLen = 5;
        }
        slotArgs.splice(expectedLen);
        node.codegenNode = createCallExpression(context.helper(RENDER_SLOT), slotArgs, loc);
      }
    };
    function processSlotOutlet(node, context) {
      let slotName = `"default"`;
      let slotProps = void 0;
      const nonNameProps = [];
      for (let i = 0; i < node.props.length; i++) {
        const p2 = node.props[i];
        if (p2.type === 6) {
          if (p2.value) {
            if (p2.name === "name") {
              slotName = JSON.stringify(p2.value.content);
            } else {
              p2.name = camelize(p2.name);
              nonNameProps.push(p2);
            }
          }
        } else {
          if (p2.name === "bind" && isStaticArgOf(p2.arg, "name")) {
            if (p2.exp)
              slotName = p2.exp;
          } else {
            if (p2.name === "bind" && p2.arg && isStaticExp(p2.arg)) {
              p2.arg.content = camelize(p2.arg.content);
            }
            nonNameProps.push(p2);
          }
        }
      }
      if (nonNameProps.length > 0) {
        const { props, directives } = buildProps(node, context, nonNameProps, false, false);
        slotProps = props;
        if (directives.length) {
          context.onError(createCompilerError(36, directives[0].loc));
        }
      }
      return {
        slotName,
        slotProps
      };
    }
    const fnExpRE = /^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/;
    const transformOn = (dir, node, context, augmentor) => {
      const { loc, modifiers, arg } = dir;
      if (!dir.exp && !modifiers.length) {
        context.onError(createCompilerError(35, loc));
      }
      let eventName;
      if (arg.type === 4) {
        if (arg.isStatic) {
          let rawName = arg.content;
          if (rawName.startsWith("vue:")) {
            rawName = `vnode-${rawName.slice(4)}`;
          }
          eventName = createSimpleExpression(toHandlerKey(camelize(rawName)), true, arg.loc);
        } else {
          eventName = createCompoundExpression([
            `${context.helperString(TO_HANDLER_KEY)}(`,
            arg,
            `)`
          ]);
        }
      } else {
        eventName = arg;
        eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY)}(`);
        eventName.children.push(`)`);
      }
      let exp = dir.exp;
      if (exp && !exp.content.trim()) {
        exp = void 0;
      }
      let shouldCache = context.cacheHandlers && !exp && !context.inVOnce;
      if (exp) {
        const isMemberExp = isMemberExpression(exp.content);
        const isInlineStatement = !(isMemberExp || fnExpRE.test(exp.content));
        const hasMultipleStatements = exp.content.includes(`;`);
        {
          validateBrowserExpression(exp, context, false, hasMultipleStatements);
        }
        if (isInlineStatement || shouldCache && isMemberExp) {
          exp = createCompoundExpression([
            `${isInlineStatement ? `$event` : `${``}(...args)`} => ${hasMultipleStatements ? `{` : `(`}`,
            exp,
            hasMultipleStatements ? `}` : `)`
          ]);
        }
      }
      let ret = {
        props: [
          createObjectProperty(eventName, exp || createSimpleExpression(`() => {}`, false, loc))
        ]
      };
      if (augmentor) {
        ret = augmentor(ret);
      }
      if (shouldCache) {
        ret.props[0].value = context.cache(ret.props[0].value);
      }
      ret.props.forEach((p2) => p2.key.isHandlerKey = true);
      return ret;
    };
    const transformBind = (dir, _node, context) => {
      const { exp, modifiers, loc } = dir;
      const arg = dir.arg;
      if (arg.type !== 4) {
        arg.children.unshift(`(`);
        arg.children.push(`) || ""`);
      } else if (!arg.isStatic) {
        arg.content = `${arg.content} || ""`;
      }
      if (modifiers.includes("camel")) {
        if (arg.type === 4) {
          if (arg.isStatic) {
            arg.content = camelize(arg.content);
          } else {
            arg.content = `${context.helperString(CAMELIZE)}(${arg.content})`;
          }
        } else {
          arg.children.unshift(`${context.helperString(CAMELIZE)}(`);
          arg.children.push(`)`);
        }
      }
      if (!context.inSSR) {
        if (modifiers.includes("prop")) {
          injectPrefix(arg, ".");
        }
        if (modifiers.includes("attr")) {
          injectPrefix(arg, "^");
        }
      }
      if (!exp || exp.type === 4 && !exp.content.trim()) {
        context.onError(createCompilerError(34, loc));
        return {
          props: [createObjectProperty(arg, createSimpleExpression("", true, loc))]
        };
      }
      return {
        props: [createObjectProperty(arg, exp)]
      };
    };
    const injectPrefix = (arg, prefix) => {
      if (arg.type === 4) {
        if (arg.isStatic) {
          arg.content = prefix + arg.content;
        } else {
          arg.content = `\`${prefix}\${${arg.content}}\``;
        }
      } else {
        arg.children.unshift(`'${prefix}' + (`);
        arg.children.push(`)`);
      }
    };
    const transformText = (node, context) => {
      if (node.type === 0 || node.type === 1 || node.type === 11 || node.type === 10) {
        return () => {
          const children = node.children;
          let currentContainer = void 0;
          let hasText = false;
          for (let i = 0; i < children.length; i++) {
            const child = children[i];
            if (isText(child)) {
              hasText = true;
              for (let j = i + 1; j < children.length; j++) {
                const next = children[j];
                if (isText(next)) {
                  if (!currentContainer) {
                    currentContainer = children[i] = createCompoundExpression([child], child.loc);
                  }
                  currentContainer.children.push(` + `, next);
                  children.splice(j, 1);
                  j--;
                } else {
                  currentContainer = void 0;
                  break;
                }
              }
            }
          }
          if (!hasText || children.length === 1 && (node.type === 0 || node.type === 1 && node.tagType === 0 && !node.props.find((p2) => p2.type === 7 && !context.directiveTransforms[p2.name]) && true)) {
            return;
          }
          for (let i = 0; i < children.length; i++) {
            const child = children[i];
            if (isText(child) || child.type === 8) {
              const callArgs = [];
              if (child.type !== 2 || child.content !== " ") {
                callArgs.push(child);
              }
              if (!context.ssr && getConstantType(child, context) === 0) {
                callArgs.push(1 + ` /* ${PatchFlagNames[1]} */`);
              }
              children[i] = {
                type: 12,
                content: child,
                loc: child.loc,
                codegenNode: createCallExpression(context.helper(CREATE_TEXT), callArgs)
              };
            }
          }
        };
      }
    };
    const seen = /* @__PURE__ */ new WeakSet();
    const transformOnce = (node, context) => {
      if (node.type === 1 && findDir(node, "once", true)) {
        if (seen.has(node) || context.inVOnce) {
          return;
        }
        seen.add(node);
        context.inVOnce = true;
        context.helper(SET_BLOCK_TRACKING);
        return () => {
          context.inVOnce = false;
          const cur = context.currentNode;
          if (cur.codegenNode) {
            cur.codegenNode = context.cache(cur.codegenNode, true);
          }
        };
      }
    };
    const transformModel = (dir, node, context) => {
      const { exp, arg } = dir;
      if (!exp) {
        context.onError(createCompilerError(41, dir.loc));
        return createTransformProps();
      }
      const rawExp = exp.loc.source;
      const expString = exp.type === 4 ? exp.content : rawExp;
      context.bindingMetadata[rawExp];
      const maybeRef = false;
      if (!expString.trim() || !isMemberExpression(expString) && !maybeRef) {
        context.onError(createCompilerError(42, exp.loc));
        return createTransformProps();
      }
      const propName = arg ? arg : createSimpleExpression("modelValue", true);
      const eventName = arg ? isStaticExp(arg) ? `onUpdate:${arg.content}` : createCompoundExpression(['"onUpdate:" + ', arg]) : `onUpdate:modelValue`;
      let assignmentExp;
      const eventArg = context.isTS ? `($event: any)` : `$event`;
      {
        assignmentExp = createCompoundExpression([
          `${eventArg} => ((`,
          exp,
          `) = $event)`
        ]);
      }
      const props = [
        createObjectProperty(propName, dir.exp),
        createObjectProperty(eventName, assignmentExp)
      ];
      if (dir.modifiers.length && node.tagType === 1) {
        const modifiers = dir.modifiers.map((m) => (isSimpleIdentifier(m) ? m : JSON.stringify(m)) + `: true`).join(`, `);
        const modifiersKey = arg ? isStaticExp(arg) ? `${arg.content}Modifiers` : createCompoundExpression([arg, ' + "Modifiers"']) : `modelModifiers`;
        props.push(createObjectProperty(modifiersKey, createSimpleExpression(`{ ${modifiers} }`, false, dir.loc, 2)));
      }
      return createTransformProps(props);
    };
    function createTransformProps(props = []) {
      return { props };
    }
    const seen$1 = /* @__PURE__ */ new WeakSet();
    const transformMemo = (node, context) => {
      if (node.type === 1) {
        const dir = findDir(node, "memo");
        if (!dir || seen$1.has(node)) {
          return;
        }
        seen$1.add(node);
        return () => {
          const codegenNode = node.codegenNode || context.currentNode.codegenNode;
          if (codegenNode && codegenNode.type === 13) {
            if (node.tagType !== 1) {
              makeBlock(codegenNode, context);
            }
            node.codegenNode = createCallExpression(context.helper(WITH_MEMO), [
              dir.exp,
              createFunctionExpression(void 0, codegenNode),
              `_cache`,
              String(context.cached++)
            ]);
          }
        };
      }
    };
    function getBaseTransformPreset(prefixIdentifiers) {
      return [
        [
          transformOnce,
          transformIf,
          transformMemo,
          transformFor,
          ...[],
          ...[transformExpression],
          transformSlotOutlet,
          transformElement,
          trackSlotScopes,
          transformText
        ],
        {
          on: transformOn,
          bind: transformBind,
          model: transformModel
        }
      ];
    }
    function baseCompile(template, options = {}) {
      const onError = options.onError || defaultOnError;
      const isModuleMode = options.mode === "module";
      {
        if (options.prefixIdentifiers === true) {
          onError(createCompilerError(46));
        } else if (isModuleMode) {
          onError(createCompilerError(47));
        }
      }
      const prefixIdentifiers = false;
      if (options.cacheHandlers) {
        onError(createCompilerError(48));
      }
      if (options.scopeId && !isModuleMode) {
        onError(createCompilerError(49));
      }
      const ast = isString(template) ? baseParse(template, options) : template;
      const [nodeTransforms, directiveTransforms] = getBaseTransformPreset();
      transform(ast, extend({}, options, {
        prefixIdentifiers,
        nodeTransforms: [
          ...nodeTransforms,
          ...options.nodeTransforms || []
        ],
        directiveTransforms: extend(
          {},
          directiveTransforms,
          options.directiveTransforms || {}
        )
      }));
      return generate(ast, extend({}, options, {
        prefixIdentifiers
      }));
    }
    const noopDirectiveTransform = () => ({ props: [] });
    const V_MODEL_RADIO = Symbol(`vModelRadio`);
    const V_MODEL_CHECKBOX = Symbol(`vModelCheckbox`);
    const V_MODEL_TEXT = Symbol(`vModelText`);
    const V_MODEL_SELECT = Symbol(`vModelSelect`);
    const V_MODEL_DYNAMIC = Symbol(`vModelDynamic`);
    const V_ON_WITH_MODIFIERS = Symbol(`vOnModifiersGuard`);
    const V_ON_WITH_KEYS = Symbol(`vOnKeysGuard`);
    const V_SHOW = Symbol(`vShow`);
    const TRANSITION$1 = Symbol(`Transition`);
    const TRANSITION_GROUP = Symbol(`TransitionGroup`);
    registerRuntimeHelpers({
      [V_MODEL_RADIO]: `vModelRadio`,
      [V_MODEL_CHECKBOX]: `vModelCheckbox`,
      [V_MODEL_TEXT]: `vModelText`,
      [V_MODEL_SELECT]: `vModelSelect`,
      [V_MODEL_DYNAMIC]: `vModelDynamic`,
      [V_ON_WITH_MODIFIERS]: `withModifiers`,
      [V_ON_WITH_KEYS]: `withKeys`,
      [V_SHOW]: `vShow`,
      [TRANSITION$1]: `Transition`,
      [TRANSITION_GROUP]: `TransitionGroup`
    });
    let decoder;
    function decodeHtmlBrowser(raw, asAttr = false) {
      if (!decoder) {
        decoder = document.createElement("div");
      }
      if (asAttr) {
        decoder.innerHTML = `<div foo="${raw.replace(/"/g, "&quot;")}">`;
        return decoder.children[0].getAttribute("foo");
      } else {
        decoder.innerHTML = raw;
        return decoder.textContent;
      }
    }
    const isRawTextContainer = /* @__PURE__ */ makeMap("style,iframe,script,noscript", true);
    const parserOptions = {
      isVoidTag,
      isNativeTag: (tag) => isHTMLTag(tag) || isSVGTag(tag),
      isPreTag: (tag) => tag === "pre",
      decodeEntities: decodeHtmlBrowser,
      isBuiltInComponent: (tag) => {
        if (isBuiltInType(tag, `Transition`)) {
          return TRANSITION$1;
        } else if (isBuiltInType(tag, `TransitionGroup`)) {
          return TRANSITION_GROUP;
        }
      },
      getNamespace(tag, parent) {
        let ns = parent ? parent.ns : 0;
        if (parent && ns === 2) {
          if (parent.tag === "annotation-xml") {
            if (tag === "svg") {
              return 1;
            }
            if (parent.props.some((a) => a.type === 6 && a.name === "encoding" && a.value != null && (a.value.content === "text/html" || a.value.content === "application/xhtml+xml"))) {
              ns = 0;
            }
          } else if (/^m(?:[ions]|text)$/.test(parent.tag) && tag !== "mglyph" && tag !== "malignmark") {
            ns = 0;
          }
        } else if (parent && ns === 1) {
          if (parent.tag === "foreignObject" || parent.tag === "desc" || parent.tag === "title") {
            ns = 0;
          }
        }
        if (ns === 0) {
          if (tag === "svg") {
            return 1;
          }
          if (tag === "math") {
            return 2;
          }
        }
        return ns;
      },
      getTextMode({ tag, ns }) {
        if (ns === 0) {
          if (tag === "textarea" || tag === "title") {
            return 1;
          }
          if (isRawTextContainer(tag)) {
            return 2;
          }
        }
        return 0;
      }
    };
    const transformStyle = (node) => {
      if (node.type === 1) {
        node.props.forEach((p2, i) => {
          if (p2.type === 6 && p2.name === "style" && p2.value) {
            node.props[i] = {
              type: 7,
              name: `bind`,
              arg: createSimpleExpression(`style`, true, p2.loc),
              exp: parseInlineCSS(p2.value.content, p2.loc),
              modifiers: [],
              loc: p2.loc
            };
          }
        });
      }
    };
    const parseInlineCSS = (cssText, loc) => {
      const normalized = parseStringStyle(cssText);
      return createSimpleExpression(JSON.stringify(normalized), false, loc, 3);
    };
    function createDOMCompilerError(code, loc) {
      return createCompilerError(code, loc, DOMErrorMessages);
    }
    const DOMErrorMessages = {
      [50]: `v-html is missing expression.`,
      [51]: `v-html will override element children.`,
      [52]: `v-text is missing expression.`,
      [53]: `v-text will override element children.`,
      [54]: `v-model can only be used on <input>, <textarea> and <select> elements.`,
      [55]: `v-model argument is not supported on plain elements.`,
      [56]: `v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.`,
      [57]: `Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.`,
      [58]: `v-show is missing expression.`,
      [59]: `<Transition> expects exactly one child element or component.`,
      [60]: `Tags with side effect (<script> and <style>) are ignored in client component templates.`
    };
    const transformVHtml = (dir, node, context) => {
      const { exp, loc } = dir;
      if (!exp) {
        context.onError(createDOMCompilerError(50, loc));
      }
      if (node.children.length) {
        context.onError(createDOMCompilerError(51, loc));
        node.children.length = 0;
      }
      return {
        props: [
          createObjectProperty(createSimpleExpression(`innerHTML`, true, loc), exp || createSimpleExpression("", true))
        ]
      };
    };
    const transformVText = (dir, node, context) => {
      const { exp, loc } = dir;
      if (!exp) {
        context.onError(createDOMCompilerError(52, loc));
      }
      if (node.children.length) {
        context.onError(createDOMCompilerError(53, loc));
        node.children.length = 0;
      }
      return {
        props: [
          createObjectProperty(createSimpleExpression(`textContent`, true), exp ? getConstantType(exp, context) > 0 ? exp : createCallExpression(context.helperString(TO_DISPLAY_STRING), [exp], loc) : createSimpleExpression("", true))
        ]
      };
    };
    const transformModel$1 = (dir, node, context) => {
      const baseResult = transformModel(dir, node, context);
      if (!baseResult.props.length || node.tagType === 1) {
        return baseResult;
      }
      if (dir.arg) {
        context.onError(createDOMCompilerError(55, dir.arg.loc));
      }
      function checkDuplicatedValue() {
        const value = findProp(node, "value");
        if (value) {
          context.onError(createDOMCompilerError(57, value.loc));
        }
      }
      const { tag } = node;
      const isCustomElement = context.isCustomElement(tag);
      if (tag === "input" || tag === "textarea" || tag === "select" || isCustomElement) {
        let directiveToUse = V_MODEL_TEXT;
        let isInvalidType = false;
        if (tag === "input" || isCustomElement) {
          const type = findProp(node, `type`);
          if (type) {
            if (type.type === 7) {
              directiveToUse = V_MODEL_DYNAMIC;
            } else if (type.value) {
              switch (type.value.content) {
                case "radio":
                  directiveToUse = V_MODEL_RADIO;
                  break;
                case "checkbox":
                  directiveToUse = V_MODEL_CHECKBOX;
                  break;
                case "file":
                  isInvalidType = true;
                  context.onError(createDOMCompilerError(56, dir.loc));
                  break;
                default:
                  checkDuplicatedValue();
                  break;
              }
            }
          } else if (hasDynamicKeyVBind(node)) {
            directiveToUse = V_MODEL_DYNAMIC;
          } else {
            checkDuplicatedValue();
          }
        } else if (tag === "select") {
          directiveToUse = V_MODEL_SELECT;
        } else {
          checkDuplicatedValue();
        }
        if (!isInvalidType) {
          baseResult.needRuntime = context.helper(directiveToUse);
        }
      } else {
        context.onError(createDOMCompilerError(54, dir.loc));
      }
      baseResult.props = baseResult.props.filter((p2) => !(p2.key.type === 4 && p2.key.content === "modelValue"));
      return baseResult;
    };
    const isEventOptionModifier = /* @__PURE__ */ makeMap(`passive,once,capture`);
    const isNonKeyModifier = /* @__PURE__ */ makeMap(
      `stop,prevent,self,ctrl,shift,alt,meta,exact,middle`
    );
    const maybeKeyModifier = /* @__PURE__ */ makeMap("left,right");
    const isKeyboardEvent = /* @__PURE__ */ makeMap(`onkeyup,onkeydown,onkeypress`, true);
    const resolveModifiers = (key, modifiers, context, loc) => {
      const keyModifiers = [];
      const nonKeyModifiers = [];
      const eventOptionModifiers = [];
      for (let i = 0; i < modifiers.length; i++) {
        const modifier = modifiers[i];
        if (isEventOptionModifier(modifier)) {
          eventOptionModifiers.push(modifier);
        } else {
          if (maybeKeyModifier(modifier)) {
            if (isStaticExp(key)) {
              if (isKeyboardEvent(key.content)) {
                keyModifiers.push(modifier);
              } else {
                nonKeyModifiers.push(modifier);
              }
            } else {
              keyModifiers.push(modifier);
              nonKeyModifiers.push(modifier);
            }
          } else {
            if (isNonKeyModifier(modifier)) {
              nonKeyModifiers.push(modifier);
            } else {
              keyModifiers.push(modifier);
            }
          }
        }
      }
      return {
        keyModifiers,
        nonKeyModifiers,
        eventOptionModifiers
      };
    };
    const transformClick = (key, event) => {
      const isStaticClick = isStaticExp(key) && key.content.toLowerCase() === "onclick";
      return isStaticClick ? createSimpleExpression(event, true) : key.type !== 4 ? createCompoundExpression([
        `(`,
        key,
        `) === "onClick" ? "${event}" : (`,
        key,
        `)`
      ]) : key;
    };
    const transformOn$1 = (dir, node, context) => {
      return transformOn(dir, node, context, (baseResult) => {
        const { modifiers } = dir;
        if (!modifiers.length)
          return baseResult;
        let { key, value: handlerExp } = baseResult.props[0];
        const { keyModifiers, nonKeyModifiers, eventOptionModifiers } = resolveModifiers(key, modifiers, context, dir.loc);
        if (nonKeyModifiers.includes("right")) {
          key = transformClick(key, `onContextmenu`);
        }
        if (nonKeyModifiers.includes("middle")) {
          key = transformClick(key, `onMouseup`);
        }
        if (nonKeyModifiers.length) {
          handlerExp = createCallExpression(context.helper(V_ON_WITH_MODIFIERS), [
            handlerExp,
            JSON.stringify(nonKeyModifiers)
          ]);
        }
        if (keyModifiers.length && (!isStaticExp(key) || isKeyboardEvent(key.content))) {
          handlerExp = createCallExpression(context.helper(V_ON_WITH_KEYS), [
            handlerExp,
            JSON.stringify(keyModifiers)
          ]);
        }
        if (eventOptionModifiers.length) {
          const modifierPostfix = eventOptionModifiers.map(capitalize).join("");
          key = isStaticExp(key) ? createSimpleExpression(`${key.content}${modifierPostfix}`, true) : createCompoundExpression([`(`, key, `) + "${modifierPostfix}"`]);
        }
        return {
          props: [createObjectProperty(key, handlerExp)]
        };
      });
    };
    const transformShow = (dir, node, context) => {
      const { exp, loc } = dir;
      if (!exp) {
        context.onError(createDOMCompilerError(58, loc));
      }
      return {
        props: [],
        needRuntime: context.helper(V_SHOW)
      };
    };
    const transformTransition = (node, context) => {
      if (node.type === 1 && node.tagType === 1) {
        const component = context.isBuiltInComponent(node.tag);
        if (component === TRANSITION$1) {
          return () => {
            if (!node.children.length) {
              return;
            }
            if (hasMultipleChildren(node)) {
              context.onError(createDOMCompilerError(59, {
                start: node.children[0].loc.start,
                end: node.children[node.children.length - 1].loc.end,
                source: ""
              }));
            }
            const child = node.children[0];
            if (child.type === 1) {
              for (const p2 of child.props) {
                if (p2.type === 7 && p2.name === "show") {
                  node.props.push({
                    type: 6,
                    name: "persisted",
                    value: void 0,
                    loc: node.loc
                  });
                }
              }
            }
          };
        }
      }
    };
    function hasMultipleChildren(node) {
      const children = node.children = node.children.filter((c) => c.type !== 3 && !(c.type === 2 && !c.content.trim()));
      const child = children[0];
      return children.length !== 1 || child.type === 11 || child.type === 9 && child.branches.some(hasMultipleChildren);
    }
    const ignoreSideEffectTags = (node, context) => {
      if (node.type === 1 && node.tagType === 0 && (node.tag === "script" || node.tag === "style")) {
        context.onError(createDOMCompilerError(60, node.loc));
        context.removeNode();
      }
    };
    const DOMNodeTransforms = [
      transformStyle,
      ...[transformTransition]
    ];
    const DOMDirectiveTransforms = {
      cloak: noopDirectiveTransform,
      html: transformVHtml,
      text: transformVText,
      model: transformModel$1,
      on: transformOn$1,
      show: transformShow
    };
    function compile$1(template, options = {}) {
      return baseCompile(template, extend({}, parserOptions, options, {
        nodeTransforms: [
          ignoreSideEffectTags,
          ...DOMNodeTransforms,
          ...options.nodeTransforms || []
        ],
        directiveTransforms: extend({}, DOMDirectiveTransforms, options.directiveTransforms || {}),
        transformHoist: null
      }));
    }
    {
      initDev();
    }
    const compileCache = /* @__PURE__ */ Object.create(null);
    function compileToFunction(template, options) {
      if (!isString(template)) {
        if (template.nodeType) {
          template = template.innerHTML;
        } else {
          warn$1(`invalid template option: `, template);
          return NOOP;
        }
      }
      const key = template;
      const cached = compileCache[key];
      if (cached) {
        return cached;
      }
      if (template[0] === "#") {
        const el = document.querySelector(template);
        if (!el) {
          warn$1(`Template element not found or is empty: ${template}`);
        }
        template = el ? el.innerHTML : ``;
      }
      const { code } = compile$1(template, extend({
        hoistStatic: true,
        onError,
        onWarn: (e) => onError(e, true)
      }, options));
      function onError(err, asWarning = false) {
        const message = asWarning ? err.message : `Template compilation error: ${err.message}`;
        const codeFrame = err.loc && generateCodeFrame(template, err.loc.start.offset, err.loc.end.offset);
        warn$1(codeFrame ? `${message}
${codeFrame}` : message);
      }
      const render2 = new Function(code)();
      render2._rc = true;
      return compileCache[key] = render2;
    }
    registerRuntimeCompiler(compileToFunction);
    exports.BaseTransition = BaseTransition;
    exports.Comment = Comment2;
    exports.EffectScope = EffectScope;
    exports.Fragment = Fragment;
    exports.KeepAlive = KeepAlive;
    exports.ReactiveEffect = ReactiveEffect;
    exports.Static = Static;
    exports.Suspense = Suspense;
    exports.Teleport = Teleport;
    exports.Text = Text;
    exports.Transition = Transition;
    exports.TransitionGroup = TransitionGroup;
    exports.VueElement = VueElement;
    exports.callWithAsyncErrorHandling = callWithAsyncErrorHandling;
    exports.callWithErrorHandling = callWithErrorHandling;
    exports.camelize = camelize;
    exports.capitalize = capitalize;
    exports.cloneVNode = cloneVNode;
    exports.compatUtils = compatUtils;
    exports.compile = compileToFunction;
    exports.computed = computed$1;
    exports.createApp = createApp;
    exports.createBlock = createBlock;
    exports.createCommentVNode = createCommentVNode;
    exports.createElementBlock = createElementBlock;
    exports.createElementVNode = createBaseVNode;
    exports.createHydrationRenderer = createHydrationRenderer;
    exports.createPropsRestProxy = createPropsRestProxy;
    exports.createRenderer = createRenderer;
    exports.createSSRApp = createSSRApp;
    exports.createSlots = createSlots;
    exports.createStaticVNode = createStaticVNode;
    exports.createTextVNode = createTextVNode;
    exports.createVNode = createVNode;
    exports.customRef = customRef;
    exports.defineAsyncComponent = defineAsyncComponent;
    exports.defineComponent = defineComponent;
    exports.defineCustomElement = defineCustomElement;
    exports.defineEmits = defineEmits;
    exports.defineExpose = defineExpose;
    exports.defineProps = defineProps;
    exports.defineSSRCustomElement = defineSSRCustomElement;
    exports.effect = effect;
    exports.effectScope = effectScope;
    exports.getCurrentInstance = getCurrentInstance;
    exports.getCurrentScope = getCurrentScope;
    exports.getTransitionRawChildren = getTransitionRawChildren;
    exports.guardReactiveProps = guardReactiveProps;
    exports.h = h;
    exports.handleError = handleError;
    exports.hydrate = hydrate;
    exports.initCustomFormatter = initCustomFormatter;
    exports.initDirectivesForSSR = initDirectivesForSSR;
    exports.inject = inject;
    exports.isMemoSame = isMemoSame;
    exports.isProxy = isProxy;
    exports.isReactive = isReactive;
    exports.isReadonly = isReadonly;
    exports.isRef = isRef;
    exports.isRuntimeOnly = isRuntimeOnly;
    exports.isShallow = isShallow;
    exports.isVNode = isVNode;
    exports.markRaw = markRaw;
    exports.mergeDefaults = mergeDefaults;
    exports.mergeProps = mergeProps;
    exports.nextTick = nextTick;
    exports.normalizeClass = normalizeClass;
    exports.normalizeProps = normalizeProps;
    exports.normalizeStyle = normalizeStyle;
    exports.onActivated = onActivated;
    exports.onBeforeMount = onBeforeMount;
    exports.onBeforeUnmount = onBeforeUnmount;
    exports.onBeforeUpdate = onBeforeUpdate;
    exports.onDeactivated = onDeactivated;
    exports.onErrorCaptured = onErrorCaptured;
    exports.onMounted = onMounted;
    exports.onRenderTracked = onRenderTracked;
    exports.onRenderTriggered = onRenderTriggered;
    exports.onScopeDispose = onScopeDispose;
    exports.onServerPrefetch = onServerPrefetch;
    exports.onUnmounted = onUnmounted;
    exports.onUpdated = onUpdated;
    exports.openBlock = openBlock;
    exports.popScopeId = popScopeId;
    exports.provide = provide;
    exports.proxyRefs = proxyRefs;
    exports.pushScopeId = pushScopeId;
    exports.queuePostFlushCb = queuePostFlushCb;
    exports.reactive = reactive;
    exports.readonly = readonly;
    exports.ref = ref;
    exports.registerRuntimeCompiler = registerRuntimeCompiler;
    exports.render = render;
    exports.renderList = renderList;
    exports.renderSlot = renderSlot;
    exports.resolveComponent = resolveComponent;
    exports.resolveDirective = resolveDirective;
    exports.resolveDynamicComponent = resolveDynamicComponent;
    exports.resolveFilter = resolveFilter;
    exports.resolveTransitionHooks = resolveTransitionHooks;
    exports.setBlockTracking = setBlockTracking;
    exports.setDevtoolsHook = setDevtoolsHook;
    exports.setTransitionHooks = setTransitionHooks;
    exports.shallowReactive = shallowReactive;
    exports.shallowReadonly = shallowReadonly;
    exports.shallowRef = shallowRef;
    exports.ssrContextKey = ssrContextKey;
    exports.ssrUtils = ssrUtils;
    exports.stop = stop;
    exports.toDisplayString = toDisplayString;
    exports.toHandlerKey = toHandlerKey;
    exports.toHandlers = toHandlers;
    exports.toRaw = toRaw;
    exports.toRef = toRef;
    exports.toRefs = toRefs;
    exports.transformVNodeArgs = transformVNodeArgs;
    exports.triggerRef = triggerRef;
    exports.unref = unref;
    exports.useAttrs = useAttrs;
    exports.useCssModule = useCssModule;
    exports.useCssVars = useCssVars;
    exports.useSSRContext = useSSRContext;
    exports.useSlots = useSlots;
    exports.useTransitionState = useTransitionState;
    exports.vModelCheckbox = vModelCheckbox;
    exports.vModelDynamic = vModelDynamic;
    exports.vModelRadio = vModelRadio;
    exports.vModelSelect = vModelSelect;
    exports.vModelText = vModelText;
    exports.vShow = vShow;
    exports.version = version2;
    exports.warn = warn$1;
    exports.watch = watch;
    exports.watchEffect = watchEffect;
    exports.watchPostEffect = watchPostEffect;
    exports.watchSyncEffect = watchSyncEffect;
    exports.withAsyncContext = withAsyncContext;
    exports.withCtx = withCtx;
    exports.withDefaults = withDefaults;
    exports.withDirectives = withDirectives;
    exports.withKeys = withKeys;
    exports.withMemo = withMemo;
    exports.withModifiers = withModifiers;
    exports.withScopeId = withScopeId;
    Object.defineProperty(exports, "__esModule", { value: true });
    return exports;
  }({});
  window.Vue = Vue;

  // ../view/PhotoshopCli/index.ts
  var import_tdesign2 = __toESM(require_tdesign());
  var import_robotjs = __toESM(require_robotjs());
  var import_open = __toESM(require_open());

  // ../modules/Magick-Cli/index.ts
  init_cmd();
  var import_fs_extra2 = __toESM(require_lib2());
  var import_path3 = __toESM(__require("path"));

  // ../modules/Magick-Cli/ToSpawn.ts
  init_cmd();
  function ToSpawn(ExecPath, arge) {
    let RUN_PushCommand_Promise = null;
    let CommandList = [];
    let RUN_Promise = new Promise(function(resolve, reject) {
      if (!arge.length)
        return reject("Not Command");
      function PushCommand(arge2) {
        for (const ForCommand of arge2) {
          if (Array.isArray(ForCommand)) {
            PushCommand(ForCommand);
            continue;
          }
          ;
          if (typeof ForCommand == "string")
            CommandList.push(ForCommand.replace(/[\\\/]+/g, "/"));
        }
      }
      PushCommand(arge);
      if (CommandList.length <= 1)
        return reject("Not Command");
      let ToSpawn2 = spawn(ExecPath, CommandList);
      ToSpawn2.then((data) => resolve(data));
      ToSpawn2.catch((error) => reject(error));
      RUN_PushCommand_Promise = ToSpawn2;
      return ToSpawn2;
    });
    if (RUN_PushCommand_Promise) {
      let d = RUN_PushCommand_Promise;
      RUN_Promise.ErrorList = d.ErrorList;
      RUN_Promise.GetDataList = d.GetDataList;
      RUN_Promise.Quit = d.Quit;
      RUN_Promise.GetData = d.GetData;
      RUN_Promise.on = d.on;
    }
    return RUN_Promise;
  }

  // ../modules/Magick-Cli/convert.ts
  var import_path2 = __toESM(__require("path"));

  // ../modules/_NapiModules/fswin/fswin.ts
  var BinPath = process?.resourcesPath ? `${process?.resourcesPath}/bin/fswin.node` : `./${process.arch}/fswin.node`;
  var fswin = process.platform === "win32" ? __require(BinPath) : null;
  if (!fswin)
    throw new Error("The current environment cannot complete the initialization");
  var fswin_default = fswin;
  var {
    version,
    dirWatcher,
    splitPath,
    convertPath,
    convertPathSync,
    find,
    findSync,
    getLogicalDriveList,
    getLogicalDriveListSync,
    getDriveDevice,
    getDriveDeviceSync,
    getDeviceCapabilities,
    getDeviceCapabilitiesSync,
    getStorageProperties,
    getStoragePropertiesSync,
    getVolumeInformation,
    getVolumeInformationSync,
    getVolumeSpace,
    getVolumeSpaceSync,
    setVolumeLabel,
    setVolumeLabelSync,
    getAttributes,
    getAttributesSync,
    setAttributes,
    setAttributesSync,
    ejectDrive,
    ejectDriveSync,
    ntfs
  } = fswin;

  // ../modules/_NapiModules/fswin/index.ts
  var import_path = __toESM(__require("path"));
  var import_fs_extra = __toESM(require_lib2());
  if (!fswin_default)
    throw new Error("The current environment cannot complete the initialization");
  var _fswin = fswin_default;
  var StructureFswin = class {
    size(Path, CallBack) {
      if (!CallBack)
        return new Promise(function(resolve, reject) {
          _fswin.getAttributes(Path, function(Attributes) {
            resolve(Attributes?.SIZE || 0);
          });
        });
      _fswin.getAttributes(Path, function(Attributes) {
        CallBack(Attributes?.SIZE || 0);
      });
    }
    sizeSync(Path) {
      return _fswin.getAttributesSync(Path)?.SIZE || 0;
    }
    dirWatcher(Path, callback, Options) {
      let BackUP = Path + "";
      let Attributes = _fswin.getAttributesSync(Path);
      if (!Attributes) {
        throw new Error("The path submitted does not exist \n Path: " + Path);
      }
      Path = import_path.default.resolve(Path);
      let options = Object.assign({
        WATCH_SUB_DIRECTORIES: true,
        CHANGE_FILE_SIZE: true,
        CHANGE_LAST_WRITE: true,
        CHANGE_LAST_ACCESS: false,
        CHANGE_CREATION: false,
        CHANGE_ATTRIBUTES: false,
        CHANGE_SECUTITY: false
      }, Options || {});
      if (!Attributes.IS_DIRECTORY) {
        let HigherPath = import_path.default.resolve(Path, "..");
        if (!_fswin.getAttributesSync(import_path.default.resolve(Path, ".."))?.IS_DIRECTORY) {
          throw new Error(`Not a catalog : ${Path}
Not a catalog :${HigherPath}
 If the watch file will be allowed (done using directory listening)
 but the path submitted is not a directory at the previous level`);
        } else
          Path = HigherPath;
      }
      let StartFileWatcher = new _fswin.dirWatcher(Path, function(Events, Message) {
        let dir = Path;
        let SetQuickApi;
        if (Events == "ADDED" || Events == "MODIFIED")
          SetQuickApi = new QuickApi(import_path.default.join(Path, String(Message)));
        else if ((Events == "RENAMED" || Events == "MOVED") && typeof Message == "object")
          SetQuickApi = new QuickApi(import_path.default.join(Path, String(Message.NEW_NAME)));
        callback.apply(StartFileWatcher, [Events, Message, SetQuickApi, dir]);
      }, options);
      return { close() {
        return StartFileWatcher.close();
      } };
    }
    getAttributes(Path, CallBack) {
      if (!CallBack)
        return new Promise(function(resolve, reject) {
          _fswin.getAttributes(Path, function(Attributes) {
            resolve(Attributes);
          });
        });
      _fswin.getAttributes(Path, function(Attributes) {
        CallBack(Attributes);
      });
    }
    getAttributesSync = _fswin.getAttributesSync;
    exists(Path, CallBack) {
      if (!CallBack)
        return new Promise(function(resolve, reject) {
          _fswin.getAttributes(Path, function(Attributes) {
            resolve(Attributes ? true : false);
          });
        });
    }
    existsSync(Path) {
      return _fswin.getAttributesSync(Path) ? true : false;
    }
    convertPath(pathToConvert, CallBack, Resolve) {
      if (typeof CallBack == "boolean") {
        Resolve = CallBack;
        CallBack = void 0;
      }
      if (typeof CallBack == void 0) {
        CallBack = void 0;
        if (typeof Resolve == void 0) {
          Resolve = false;
        }
      }
      if (!CallBack)
        return new Promise(function(resolve, reject) {
          _fswin.convertPath(pathToConvert, function(_ResolveData) {
            resolve(_ResolveData);
          }, Resolve || false);
        });
      _fswin.convertPath(pathToConvert, function(_ResolveData) {
        CallBack && CallBack(_ResolveData);
      }, Resolve || false);
    }
    convertPathSync = _fswin.convertPathSync;
    getLogicalDriveList(CallBack) {
      if (!CallBack)
        return new Promise(function(resolve, reject) {
          _fswin.getLogicalDriveList(function(LogicalDriveList) {
            resolve(LogicalDriveList);
          });
        });
      _fswin.getLogicalDriveList(function(LogicalDriveList) {
        CallBack(LogicalDriveList);
      });
    }
    getLogicalDriveListSync = _fswin.getLogicalDriveListSync;
    getDriveDevice(id, CallBack) {
      if (!CallBack)
        return new Promise(function(resolve, reject) {
          _fswin.getDriveDevice(id, function(DriveDevice) {
            resolve(DriveDevice);
          });
        });
      _fswin.getDriveDevice(id, function(DriveDevice) {
        CallBack(DriveDevice);
      });
    }
    getDriveDeviceSync = _fswin.getDriveDeviceSync;
    getDeviceCapabilities = _fswin.getDeviceCapabilities;
    getDeviceCapabilitiesSync = _fswin.getDeviceCapabilitiesSync;
    version = _fswin.version;
    splitPath = _fswin.splitPath;
    find = _fswin.find;
    findSync = _fswin.findSync;
    getStorageProperties = _fswin.getStorageProperties;
    getStoragePropertiesSync = _fswin.getStoragePropertiesSync;
    getVolumeInformation = _fswin.getVolumeInformation;
    getVolumeInformationSync = _fswin.getVolumeInformationSync;
    getVolumeSpace = _fswin.getVolumeSpace;
    getVolumeSpaceSync = _fswin.getVolumeSpaceSync;
    setVolumeLabel = _fswin.setVolumeLabel;
    setVolumeLabelSync = _fswin.setVolumeLabelSync;
    setAttributes = _fswin.setAttributes;
    setAttributesSync = _fswin.setAttributesSync;
    ejectDrive = _fswin.ejectDrive;
    ejectDriveSync = _fswin.ejectDriveSync;
    ntfs = {
      setShortName: _fswin.ntfs.setShortName,
      setShortNameSync: _fswin.ntfs.setShortNameSync,
      getCompressedSize: _fswin.ntfs.getCompressedSize,
      getCompressedSizeSync: _fswin.ntfs.getCompressedSizeSync,
      setCompression: _fswin.ntfs.setCompression,
      setCompressionSync: _fswin.ntfs.setCompressionSync,
      setSparse: _fswin.ntfs.setSparse,
      setSparseSync: _fswin.ntfs.setSparseSync
    };
  };
  var fswin2 = new StructureFswin();
  var fswin_default2 = fswin2;
  var FileSystemQuickApi = class {
    __QuickApi;
    __Path;
    constructor(QuickApi2) {
      this.__QuickApi = QuickApi2;
      this.__Path = QuickApi2.path;
    }
    size(callback) {
      if (callback) {
        fswin2.size(this.__Path, callback);
        return;
      }
      return fswin2.size(this.__Path);
    }
    remove(callback) {
      return import_fs_extra.default.remove(this.__Path, callback || void 0);
    }
  };
  var QuickApi = class {
    _Path = "";
    _FileSystemFast;
    NotFile;
    get path() {
      return this._Path;
    }
    get name() {
      return import_path.default.parse(this._Path).name;
    }
    get base() {
      return import_path.default.basename(this._Path);
    }
    get dir() {
      return import_path.default.parse(this._Path).dir;
    }
    get ext() {
      return import_path.default.extname(this._Path);
    }
    get resolve() {
      return import_path.default.resolve(this._Path);
    }
    diff(Path) {
      return import_path.default.resolve(Path) == import_path.default.resolve(this._Path);
    }
    get fs() {
      if (this.NotFile == true)
        return void 0;
      if (!this._FileSystemFast)
        this._FileSystemFast = new FileSystemQuickApi(this);
      return this._FileSystemFast;
    }
    get size() {
      return fswin2.sizeSync(this._Path);
    }
    constructor(Path) {
      this._Path = Path || "";
      _fswin.getAttributes(Path, (Attributes) => {
        if (!Attributes)
          this.NotFile = true;
        else
          this.NotFile = false;
      });
    }
  };

  // ../modules/Magick-Cli/convert.ts
  init_cmd();
  var walk = require_out3();
  var convert = class {
    _ = {
      ConvertPath: "",
      arge: []
    };
    constructor(ConvertCliPath, useMagick) {
      if (!fswin_default2.existsSync(ConvertCliPath))
        throw new Error("Not Cli Convert EXE");
      this.SetConvertCliPath(ConvertCliPath, useMagick);
    }
    SetConvertCliPath(ConvertCliPath, useMagick) {
      if (ConvertCliPath && typeof ConvertCliPath === "string") {
        if (!fswin_default2.existsSync(ConvertCliPath))
          throw new Error("Not Cli Convert EXE");
        this._.ConvertPath = ConvertCliPath.replace(/[\\\/]+/g, "/");
        if (useMagick || ConvertCliPath.match(/magick\.exe/i)) {
          this._.arge.push("convert");
        }
        return;
      }
      throw new Error("Not Cli Convert Path");
    }
    cli(...arge) {
      const Garge = this._.arge;
      return ToSpawn(this._.ConvertPath, Garge.concat(arge));
    }
    GetLevelLength(InputPath) {
      const { ConvertPath, arge: Garge } = this._;
      let ReturnLevelData = [];
      return new Promise(function(resolve, reject) {
        ToSpawn(ConvertPath, Garge.concat([InputPath, "info:"])).then((data) => {
          let MatchLevelList = data.match(/^.+?[\d+] /mig);
          let ForIndex = -1;
          for (const iterator of MatchLevelList || []) {
            if (iterator) {
              let PushData = {
                type: "",
                index: ForIndex += 1,
                size: [0, 0]
              };
              let GetMatchSize = iterator.match(/(\d+)x(\d+) $/);
              if (GetMatchSize)
                PushData.size = [Number(GetMatchSize[1]), Number(GetMatchSize[2])];
              let GetMatchType = iterator.match(/^.+?[\d+] (.+?) /mig);
              if (GetMatchType)
                PushData.type = GetMatchType[1];
              ReturnLevelData.push(PushData);
            }
          }
          resolve(ReturnLevelData);
        }).catch(reject);
      });
    }
    async WilKFormat(IputImagesList, SetExt, Deep, ProcessLimit) {
      if (!ProcessLimit)
        ProcessLimit = Infinity;
      let { ConvertPath, arge: Garge } = this._;
      let HandleError = () => {
      };
      let ProcessingList = /* @__PURE__ */ new Set();
      let MatchFormats = /[.](psd|psb|jpe?g|png|webp|gif|svg|ai)$/;
      let GotuSpawnList = [];
      if (!IputImagesList?.length)
        throw new Error("Not Iput Images Data");
      let HandleListComplete = /* @__PURE__ */ new Set();
      for (const Paths of IputImagesList) {
        let Stats2 = await fswin_default2.getAttributes(Paths) || void 0;
        if (!Stats2)
          continue;
        if (Stats2.IS_DIRECTORY) {
          walk.walkStream(Paths).on("data", function(chunk) {
            if (chunk.name.match(MatchFormats) && chunk.dirent.isFile() && ConvertPath) {
              let Path = import_path2.default.resolve(chunk.path);
              if (!HandleListComplete.has(Path)) {
                ProcessingList.add(Path);
                let ToFormatsPath = Path.replace(MatchFormats, ".".concat(SetExt || ".png").replace(/[.]+([^.]+)/, ".$1"));
                let IputPath = Path.match(/[.](psd|psb|gif|pdf|gif)$/) ? Path.concat("[0]") : Path;
                GotuSpawnList.push(spawn(ConvertPath, Garge.concat([IputPath, ToFormatsPath])).finally(() => ProcessingList.delete(Path)));
                HandleListComplete.add(Path);
              }
            }
          });
        } else if (ConvertPath) {
          let Path = import_path2.default.resolve(Paths);
          if (!HandleListComplete.has(Path)) {
            ProcessingList.add(Path);
            let ToFormatsPath = Path.replace(MatchFormats, ".".concat(SetExt || ".png").replace(/[.]+([^.]+)/, ".$1"));
            let IputPath = Path.match(/[.](psd|psb|gif|pdf|gif)$/) ? Path.concat("[0]") : Path;
            GotuSpawnList.push(spawn(ConvertPath, Garge.concat([IputPath, ToFormatsPath])).finally(() => ProcessingList.delete(Path)));
            HandleListComplete.add(Path);
          }
        }
        if (ProcessingList.size > ProcessLimit) {
          await Promise.allSettled(GotuSpawnList);
        }
      }
      return await Promise.allSettled(GotuSpawnList);
    }
  };

  // ../modules/Magick-Cli/index.ts
  var fsWalk = require_out3();
  function ID() {
    return (Date.now().toString(36) + Math.random().toString(36).slice(2, 7)).toUpperCase();
  }
  var ImageMagick = class {
    convert;
    #_ = {
      MagickBinaryPath: "",
      Ready: false
    };
    SetMagickPath(MagickBinaryPath) {
      if (MagickBinaryPath && !(0, import_fs_extra2.existsSync)(MagickBinaryPath)) {
        throw new Error("Exist Not Magick Binary Path");
      } else {
        this.#_.MagickBinaryPath = MagickBinaryPath.replace(/[\\\/]+/g, "/");
        this.#_.Ready = true;
      }
    }
    constructor(MagickBinaryPath) {
      if (typeof MagickBinaryPath == "string") {
        this.SetMagickPath(MagickBinaryPath);
      } else if (MagickBinaryPath) {
        this.SetMagickPath(MagickBinaryPath.MagickPath);
      }
      const MagickPath = this.MagickPath;
      function ToSpawn2(arge, ExecType) {
        let RUN_PushCommand_Promise = null;
        let CommandList = [ExecType];
        let RUN_Promise = new Promise(function(resolve, reject) {
          if (!arge.length)
            return reject("Not Command");
          function PushCommand(arge2) {
            for (const ForCommand of arge2) {
              if (Array.isArray(ForCommand)) {
                PushCommand(ForCommand);
                continue;
              }
              ;
              if (typeof ForCommand == "string")
                CommandList.push(ForCommand.replace(/[\\\/]+/g, "/"));
            }
          }
          PushCommand(arge);
          if (CommandList.length <= 1)
            return reject("Not Command");
          let ToSpawn3 = spawn(MagickPath, CommandList);
          ToSpawn3.then((data) => resolve(data));
          ToSpawn3.catch((error) => reject(error));
          RUN_PushCommand_Promise = ToSpawn3;
          return ToSpawn3;
        });
        if (RUN_PushCommand_Promise) {
          let d = RUN_PushCommand_Promise;
          RUN_Promise.ErrorList = d.ErrorList;
          RUN_Promise.GetDataList = d.GetDataList;
          RUN_Promise.Quit = d.Quit;
          RUN_Promise.GetData = d.GetData;
          RUN_Promise.on = d.on;
        }
        return RUN_Promise;
      }
      this.convert = new convert(MagickPath, true);
      this.cli = {
        convert(...arge) {
          return ToSpawn2(arge, "convert");
        },
        diff(...arge) {
          return ToSpawn2(arge, "compare");
        },
        composite(...arge) {
          return ToSpawn2(arge, "composite");
        },
        Script(ScriptPath) {
          return ToSpawn2([ScriptPath], "-script");
        },
        EvalScript(ScriptCode) {
          return new Promise(function(resolve, reject) {
            let WriteFilePath = process.env.TEMP ? import_path3.default.join(process.env.TEMP, ID()) : import_path3.default.join(process.execPath, "..", ID());
            (0, import_fs_extra2.writeFile)(WriteFilePath, ScriptCode).then(() => {
              ToSpawn2([WriteFilePath], "-script").then((data) => {
                resolve(data);
              }).catch(reject);
            }).catch(reject);
          });
        }
      };
    }
    get Ready() {
      if (!this.#_.Ready && this.#_.MagickBinaryPath)
        return false;
      return this.#_.Ready;
    }
    cli;
    get MagickPath() {
      return this.#_.MagickBinaryPath;
    }
  };

  // ../view/PhotoshopCli/index.ts
  var import_HMC = __toESM(require_HMC());

  // ../view/PhotoshopCli/plugins/GenerateForDrew.ts
  var import_path4 = __toESM(__require("path"));
  var import_fs_extra3 = __toESM(require_lib2());
  var import_sharp = __toESM(require_sharp());
  var import_util2 = __require("util");
  var walk2 = require_out3();
  var clip = require_clip();
  var imagSize = require_dist();
  async function GenerateForDrew() {
    let PromiseList = [];
    let CopyList = clip.readFilePaths();
    let KeyList = {
      "king": {
        800: /* @__PURE__ */ new Set(),
        1200: /* @__PURE__ */ new Set()
      },
      "drew": {
        800: /* @__PURE__ */ new Set(),
        1200: /* @__PURE__ */ new Set()
      }
    };
    for (let Path of CopyList) {
      let { name, dir } = import_path4.default.parse(Path);
      if (KeyList[name.toLowerCase()]) {
        let NewName = name?.toLowerCase() || "";
        let CopyNewPath = import_path4.default.join(dir, name?.match(/Drew/i) ? "\u4E5F\u76AE" : "KING_Baby");
        await import_fs_extra3.default.copy(Path, CopyNewPath);
        await (0, import_util2.promisify)(walk2.walk)(CopyNewPath).then(function(walkPathList) {
          if (KeyList[NewName]) {
            for (let walkPathCont of walkPathList) {
              if (walkPathCont?.dirent?.isFile()) {
                if (walkPathCont.name?.match(/(jpe?g|png)$/)) {
                  let height = imagSize(walkPathCont.path).height;
                  if (!height || height != 1200 && height != 800)
                    continue;
                  let ToSet = KeyList[NewName][height];
                  if (ToSet)
                    ToSet.add(walkPathCont.path);
                }
              }
            }
          }
        });
      }
    }
    async function AddImagesTo(MainInput, Input, toFile) {
      let readInputBuff = await import_fs_extra3.default.readFile(MainInput);
      await import_fs_extra3.default.remove(toFile);
      let InputSizeOf = await imagSize(Input);
      if (!InputSizeOf.width || !InputSizeOf.height)
        return;
      let { width, height } = InputSizeOf;
      let SharpAddImagesTo = (0, import_sharp.default)(readInputBuff).composite([{ input: Input, top: 0, left: 0 }]);
      if (toFile.match(/[.]jpe?g$/i))
        SharpAddImagesTo.jpeg({ quality: 100, chromaSubsampling: "4:4:4" });
      if (toFile.match(/[.]png$/i))
        SharpAddImagesTo.png({ palette: true });
      return SharpAddImagesTo.toFile(toFile);
    }
    let toFileList = ["M:\\_A_\u5171\u7528\u6A21\u677F\\lib", "F:\\Root\\APortable\\_work_Data\\M_Back\\_A_\u5171\u7528\u6A21\u677F\\lib"];
    let libPath = "M:\\_A_\u5171\u7528\u6A21\u677F\\lib";
    for (const FilePath of toFileList) {
      if (import_fs_extra3.default.existsSync(FilePath)) {
        libPath = FilePath;
        break;
      }
    }
    let SuspensionLayer = {
      "KING_Baby_800": import_path4.default.join(libPath, "KING_Baby_800.png"),
      "KING_Baby_1200": import_path4.default.join(libPath, "KING_Baby_1200.png"),
      "\u4E5F\u76AE\u5E73\u94FAT\u6064\u5E26\u9634\u5F71800": import_path4.default.join(libPath, "\u4E5F\u76AE\u5E73\u94FAT\u6064\u5E26\u9634\u5F71800.png"),
      "\u4E5F\u76AE\u5E73\u94FAT\u6064\u5E26\u9634\u5F71800Logo": import_path4.default.join(libPath, "\u4E5F\u76AE\u5E73\u94FAT\u6064\u5E26\u9634\u5F71800Logo.png"),
      "\u4E5F\u76AE\u5E73\u94FAT\u6064\u5E26\u9634\u5F711200": import_path4.default.join(libPath, "\u4E5F\u76AE\u5E73\u94FAT\u6064\u5E26\u9634\u5F711200.png"),
      "\u4E5F\u76AE\u5E73\u94FAT\u6064\u5E26\u9634\u5F711200Logo": import_path4.default.join(libPath, "\u4E5F\u76AE\u5E73\u94FAT\u6064\u5E26\u9634\u5F711200Logo.png")
    };
    for (let Path of KeyList.king[800]) {
      if (!Path.match(/[\\\/]透明[\\//]/))
        PromiseList.push(AddImagesTo(Path, SuspensionLayer.KING_Baby_800, Path));
    }
    for (let Path of KeyList.king[1200]) {
      PromiseList.push(AddImagesTo(Path, SuspensionLayer.KING_Baby_1200, Path));
    }
    for (let Path of KeyList.drew[1200]) {
      PromiseList.push(AddImagesTo(Path, SuspensionLayer.\u4E5F\u76AE\u5E73\u94FAT\u6064\u5E26\u9634\u5F711200Logo, Path));
    }
    for (let Path of KeyList.drew[800]) {
      if (!Path.match(/[\\\/]透明[\\//]/))
        if (!Path.match(/[\/\\]SKU[\/\\]/i))
          PromiseList.push(AddImagesTo(Path, SuspensionLayer.\u4E5F\u76AE\u5E73\u94FAT\u6064\u5E26\u9634\u5F71800, Path));
        else
          PromiseList.push(AddImagesTo(Path, SuspensionLayer.\u4E5F\u76AE\u5E73\u94FAT\u6064\u5E26\u9634\u5F71800Logo, Path));
    }
    return await Promise.allSettled(PromiseList);
  }

  // ../view/PhotoshopCli/index.ts
  var { clip: clip2, shake, ipcRendererRemoteAPI, path: path5, fs: fs3, GainPath, ipcRenderer, Store } = window;
  var _cmd = (init_cmd(), __toCommonJS(cmd_exports));
  var Photoshop_Path_List = ["D:\\application\\Photoshop2020\\Adobe Photoshop 2020\\Photoshop.exe", "D:\\Program Files (x86)\\Adobe\\Adobe_Photoshop_2020_v21.2.12.215_2021-09\\Photoshop.exe"];
  Photoshop_Path_List.push(...import_HMC.default.getProcessNameFilePath("Photoshop.exe"));
  var PS_Path = Photoshop_Path_List[0];
  for (const iterator of Photoshop_Path_List) {
    let path6 = Photoshop_Path_List.pop() || "";
    if (fs3.existsSync(path6)) {
      PS_Path = path6;
      break;
    }
  }
  function App_Main_VM_Data() {
    return {
      Cli_ToolShow: true,
      AddPlugins: false,
      Top_prompt: false,
      TopBtn: [
        {
          name: "\u5B89\u88C5\u63D2\u69FD",
          color: "#32A7E2",
          icon: "gg-bolt",
          click: () => {
            for (const iterator of this.MainFunctions) {
              if (iterator.name == "\u63D2\u69FD") {
                let PathList = [];
                iterator.FunctionList?.forEach((data) => {
                  PathList.push(data.path);
                });
                NotificationPhotoshop(PathList);
              }
            }
          }
        },
        {
          name: "\u6267\u884C\u65B9\u6CD5",
          color: "#FF8700",
          icon: "gg-ericsson",
          click: () => {
            if (this.SelectMenuFunctions && this.SelectMenuFunctions.path) {
              let Path = this.SelectMenuFunctions.path;
              NotificationPhotoshop(Path);
            } else {
              alert("\u91CD\u65B0\u9009\u62E9\u8BE5\u65B9\u6CD5");
            }
          }
        },
        {
          name: "\u64E6\u9664\u63D2\u69FD",
          color: "#B548C6",
          icon: "gg-erase",
          click() {
          }
        },
        {
          name: "\u5220\u9664\u65B9\u6CD5",
          color: "#22B07D",
          icon: "gg-backspace",
          click: () => {
            if (this.MainFunctionsList.length == 1) {
              this.MainFunctionsList.length = 0;
              return;
            }
            if (app.SelectMenuFunctions && app.MainFunctionsList) {
              let index = app.MainFunctionsList.indexOf(app.SelectMenuFunctions);
              let DataList = new Set(app.MainFunctionsList);
              DataList.delete(app.SelectMenuFunctions);
              app.MainFunctionsList.length = 0;
              for (const data of DataList) {
                if (data.name != app.SelectMenuFunctions?.name && data.path != app.SelectMenuFunctions?.path) {
                  app.MainFunctionsList.push(data);
                }
              }
            } else {
              alert("\u91CD\u65B0\u9009\u62E9\u8BE5\u65B9\u6CD5");
            }
          }
        }
      ],
      MainFunctionsList: [],
      MainFunctions: localStorage.getItem("MainFunctions") ? JSON.parse(String(localStorage.getItem("MainFunctions"))) : [
        {
          name: "T\u6064",
          icon: "",
          FunctionList: []
        },
        {
          name: "\u80CC\u5FC3",
          icon: "",
          FunctionList: []
        },
        {
          name: "\u536B\u8863",
          icon: "",
          FunctionList: []
        },
        {
          name: "\u63D2\u69FD",
          icon: "",
          FunctionList: []
        },
        {
          name: "\u4FBF\u6377",
          icon: "",
          FunctionList: []
        }
      ],
      SelectMenuFunctions: null,
      visible: false,
      Top_prompt_model: ""
    };
  }
  var appMainData = window.Vue.defineComponent({
    data() {
      return App_Main_VM_Data.apply(this, []);
    },
    methods: {
      openCodeEditor(Itme) {
        ipcRendererRemoteAPI.CodeEditorForPath(Itme.path);
      },
      MainFunctionsChange(index) {
      },
      ClickMainFunctions(Itme) {
        if (Itme.name == "\u4FBF\u6377") {
          if (shake.isset(`__SelectMenuClick__`, 300)) {
            this.Top_prompt_modelClick();
          }
        }
        this.SelectMenuFunctions = null;
        for (const iterator of app.MainFunctions) {
          iterator.Select = false;
        }
        app.MainFunctionsList = Itme.FunctionList;
        Itme.Select = true;
      },
      contextmenuMenuFunctionsValue(Itme) {
        if (Itme?.path?.match(/\.js|\.jsx|\.txt/i)) {
          ipcRendererRemoteAPI.CodeEditorForPath(Itme.path);
        }
      },
      SelectMenuFunctionsValue(Itme) {
        let NotJSXNameList = ["\u884C\u52A8\u6587\u4EF6\u5230\u81EA\u52A8\u5316", "\u5F53\u524DAoto\u8F6CAotoX", "\u5BFC\u51FAAoto\u4E2D\u7684\u5185\u5BB9\u4E3AAotoX", "Aoto\u6D4F\u89C8\u5668", "AotoEvalDemo", "\u5BFC\u51FA\u5C0F\u5B9D\u8D1D", "\u9009\u62E9\u9ED1\u8272\u5370\u82B1", "\u9009\u62E9\u767D\u8272\u5370\u82B1", "\u955C\u50CF", "\u6E05\u7A7A\u63D2\u69FD"];
        if (shake.isset(`__SelectMenuFunctionsValue___${Itme.name}`, 300)) {
          NotificationPhotoshop(Itme.path);
        }
        app.SelectMenuFunctions = Itme;
        for (const iterator of app.MainFunctionsList) {
          iterator.Select = false;
        }
        Itme.Select = true;
      },
      async Top_prompt_modelClick() {
        let oid_Photoshop_JSX = await fs3.readFile(path5.join(GainPath.UserData, "Photoshop.jsx"), "utf-8").catch(() => {
        }) || "";
        let data = await ipcRendererRemoteAPI.CodeEditorForCode(oid_Photoshop_JSX);
        if (confirm("\u662F\u5426\u8FD0\u884C\uFF1F")) {
          if (data && !this.SelectMenuFunctions) {
            fs3.writeFile(path5.join(GainPath.UserData, "Photoshop.jsx"), data).then((data2) => {
              NotificationPhotoshop(path5.join(GainPath.UserData, "Photoshop.jsx"));
            }).catch(() => {
            });
          }
        }
      }
    },
    setup(vm, props) {
    },
    created() {
      function Sava() {
        localStorage.setItem("MainFunctions", JSON.stringify(app.MainFunctions));
      }
      this.$watch("MainFunctions.0.FunctionList", Sava, { deep: true });
      this.$watch("MainFunctions.1.FunctionList", Sava, { deep: true });
      this.$watch("MainFunctions.2.FunctionList", Sava, { deep: true });
      this.$watch("MainFunctions.3.FunctionList", Sava, { deep: true });
      this.$watch("MainFunctions.4.FunctionList", Sava, { deep: true });
      this.$watch("Top_prompt", Sava, { deep: true });
    }
  });
  var app = window.Vue.createApp(appMainData).use(window.TDesign).mount("#app");
  app.$nextTick().then(() => {
    app.MainFunctionsList = app.MainFunctions[0].FunctionList;
  });
  document.addEventListener("drop", (Events) => {
    Events.preventDefault();
    const filesList = Events?.dataTransfer?.files;
    if (filesList && filesList.length) {
      for (const iterator of filesList) {
        app.MainFunctionsList.push({
          name: iterator.name.replace(/\.[^.]+$/, ""),
          path: iterator.path
        });
      }
    }
  });
  document.addEventListener("dragover", (Events) => {
    Events.preventDefault();
  });
  function SelectPrint(Path) {
    return new Promise(async function(resolve, reject) {
      let IsBlack = Path.includes("\u9009\u62E9\u9ED1\u8272");
      let IsWhite = Path.includes("\u9009\u62E9\u767D\u8272");
      let Jsx = await fs3.readFile(Path, "utf-8").catch((err) => reject(err)) || "";
      let matchOidName = Jsx.match(/SelectLyr\("(.+?)"\)/gi);
      let oidName = matchOidName ? matchOidName[0].replace(/SelectLyr\(\"(.+)\"\)/, "$1") : IsBlack ? "lee\u9ED1\u82721" : IsWhite ? "lee\u767D\u82721" : "";
      let GetNewName = await ipcRendererRemoteAPI.Prompt(IsBlack ? "\u9009\u62E9\u9ED1\u8272\u5370\u82B1" : "\u9009\u62E9\u767D\u8272\u5370\u82B1", oidName, IsBlack ? "\u9009\u62E9\u9ED1\u8272\u5370\u82B1" : "\u9009\u62E9\u767D\u8272\u5370\u82B1").catch((err) => reject(err)) || "";
      ;
      await fs3.writeFile(Path, Jsx.replace(/SelectLyr\("(.+?)"\)/gi, 'SelectLyr("' + GetNewName + '")')).catch((err) => reject(err));
      resolve("OK");
    });
  }
  async function NotificationPhotoshop(Path, Notclear) {
    let pathSelectBlackPrint = "F:\\Compiler\\PS-lib\\lib\\\u9009\u62E9\u9ED1\u8272\u5370\u82B1.jsx";
    let pathSelectWhitePrint = "F:\\Compiler\\PS-lib\\lib\\\u9009\u62E9\u767D\u8272\u5370\u82B1.jsx";
    let isJSX = false;
    let PathList = [];
    for (const Paths of (Path && Array.isArray(Path) ? Path : [Path]) || [""]) {
      if (Paths.includes("\u632A\u79FB") || Paths.match(/L6D0XYUC7OK3G|导出所有支持格式/)) {
        await SelectPrint(pathSelectBlackPrint);
        await SelectPrint(pathSelectWhitePrint);
      }
      if (Paths.includes("\u9009\u62E9\u9ED1\u8272") || Paths.includes("\u9009\u62E9\u767D\u8272")) {
        if (Paths.includes("\u9009\u62E9\u9ED1\u8272"))
          await SelectPrint(pathSelectBlackPrint);
        if (Paths.includes("\u9009\u62E9\u767D\u8272"))
          await SelectPrint(pathSelectWhitePrint);
      }
      if (Paths.match(/\.jsx/i)) {
        isJSX = true;
      }
      PathList.push(Paths);
    }
    if (PathList)
      return import_open.default.openApp(PS_Path, {
        "arguments": PathList
      });
  }
  document.addEventListener("keydown", (Events) => {
    if (Events.code == "F2") {
      if (app.SelectMenuFunctions) {
        app.Top_prompt = true;
        app.Top_prompt_model = app.SelectMenuFunctions.name;
      }
    }
    if (Events.code == "KeyV") {
      let readPathList = clip2.readFilePaths();
      if (readPathList.length) {
        for (const iterator of readPathList) {
          app.MainFunctionsList.push({
            name: path5.parse(iterator).name.replace(/\.[^.]+$/, ""),
            path: iterator
          });
        }
      }
    }
    function moveElement(arr, n) {
      if (Math.abs(n) > arr.length)
        n = n % arr.length;
      return arr.slice(-n).concat(arr.slice(0, -n));
    }
    if (Events.ctrlKey && Events.key == "ArrowUp") {
      if (app.SelectMenuFunctions && app.MainFunctionsList) {
        let index = app.MainFunctionsList.indexOf(app.SelectMenuFunctions);
        if (index != -1 && index != 0) {
          app.MainFunctionsList.splice(index, 1);
          app.MainFunctionsList.splice(index - 1, 0, app.SelectMenuFunctions);
          let LIs = app.MainFunctionsList;
          app.MainFunctionsList = LIs;
        }
      }
    }
    if (Events.ctrlKey && Events.key == "ArrowDown") {
      if (app.SelectMenuFunctions && app.MainFunctionsList) {
        let index = app.MainFunctionsList.indexOf(app.SelectMenuFunctions);
        if (index != -1 && index != 0) {
          app.MainFunctionsList.splice(index, 1);
          app.MainFunctionsList.splice(index + 1, 0, app.SelectMenuFunctions);
          let LIs = app.MainFunctionsList;
          app.MainFunctionsList = LIs;
        }
      }
    }
  });
  function clipPathMirrorToSave() {
    let ForImagesFileList = [];
    let FileList = clip2.readFilePaths();
    for (let Path of FileList)
      ForImagesFileList.push({ path: path5.resolve(Path), dir: path5.dirname(Path) });
    let ToJSON = JSON.stringify(ForImagesFileList);
    let photoshopCode = `#target photoshop
(function(){var u=${ToJSON};function s(T,p){function a(){}cTID=function(t){return app.charIDToTypeID(t)},sTID=function(t){return app.stringIDToTypeID(t)};function d(t,r){if(!(t!=null&&!t)){var n=r?DialogModes.ALL:DialogModes.NO,e=new ActionDescriptor;e.putBoolean(sTID("dontRecord"),!1),e.putBoolean(sTID("forceNotify"),!0),e.putPath(cTID("null"),new File(T)),e.putInteger(cTID("DocI"),708),executeAction(sTID("open"),e,n)}}function l(t,r){if(!(t!=null&&!t)){var n=r?DialogModes.ALL:DialogModes.NO;executeAction(sTID("copyToLayer"),void 0,n)}}function f(t,r){if(!(t!=null&&!t)){var n=r?DialogModes.ALL:DialogModes.NO,e=new ActionDescriptor,c=new ActionReference;c.putEnumerated(cTID("Lyr "),cTID("Ordn"),cTID("Trgt")),e.putReference(cTID("null"),c),e.putEnumerated(cTID("FTcs"),cTID("QCSt"),sTID("QCSAverage"));var o=new ActionDescriptor;o.putUnitDouble(cTID("Hrzn"),cTID("#Pxl"),0),o.putUnitDouble(cTID("Vrtc"),cTID("#Pxl"),0),e.putObject(cTID("Ofst"),cTID("Ofst"),o),e.putUnitDouble(cTID("Wdth"),cTID("#Prc"),-100),e.putBoolean(cTID("Lnkd"),!0),e.putEnumerated(cTID("Intr"),cTID("Intp"),cTID("Bcbc")),executeAction(sTID("transform"),e,n)}}function g(t,r){if(!(t!=null&&!t)){var n=r?DialogModes.ALL:DialogModes.NO,e=new ActionDescriptor;e.putInteger(cTID("Idnt"),4),e.putPath(cTID("null"),new File("D:\\\\ImagLib\\\\kiic.library\\\\images\\\\L2H1ASXM1EDD6.info\\\\\\u5FAE\\u4FE1\\u56FE\\u7247_20220427114517.png")),e.putEnumerated(cTID("FTcs"),cTID("QCSt"),sTID("QCSAverage"));var c=new ActionDescriptor;c.putUnitDouble(cTID("Hrzn"),cTID("#Pxl"),64.3236994219652),c.putUnitDouble(cTID("Vrtc"),cTID("#Pxl"),95.5518945634267),e.putObject(cTID("Ofst"),cTID("Ofst"),c),e.putUnitDouble(cTID("Wdth"),cTID("#Prc"),18.111753371869),e.putUnitDouble(cTID("Hght"),cTID("#Prc"),18.111753371869),executeAction(sTID("placeEvent"),e,n)}}function v(t,r){if(!(t!=null&&!t)){var n=r?DialogModes.ALL:DialogModes.NO,e=new ActionDescriptor,c=new ActionReference;c.putEnumerated(cTID("Lyr "),cTID("Ordn"),cTID("Trgt")),e.putReference(cTID("null"),c),executeAction(sTID("rasterizeLayer"),e,n)}}function A(t,r){if(!(t!=null&&!t)){var n=r?DialogModes.ALL:DialogModes.NO,e=new ActionDescriptor,c=new ActionList,o=new ActionReference;o.putEnumerated(cTID("Lyr "),cTID("Ordn"),cTID("Trgt")),c.putReference(o),e.putList(cTID("null"),c),executeAction(sTID("hide"),e,n)}}function L(t,r){if(!(t!=null&&!t)){var n=r?DialogModes.ALL:DialogModes.NO,e=new ActionDescriptor,c=new ActionReference;c.putClass(cTID("Lyr ")),e.putReference(cTID("null"),c);var o=new ActionDescriptor;o.putString(cTID("Nm  "),"\\u8986\\u76D6\\u5C42"),e.putObject(cTID("Usng"),cTID("Lyr "),o),e.putInteger(cTID("LyrI"),10),executeAction(sTID("make"),e,n)}}function M(t,r){if(!(t!=null&&!t)){var n=r?DialogModes.ALL:DialogModes.NO,e=new ActionDescriptor,c=new ActionDescriptor;c.putBoolean(sTID("maximizeCompatibility"),!0),e.putObject(cTID("As  "),cTID("Pht3"),c),e.putPath(cTID("In  "),new File(p)),e.putInteger(cTID("DocI"),659),executeAction(sTID("save"),e,n)}}d(),l(),f(),g(),v(),A(),L(),M(),a.main=function(){},a.main();var w=charIDToTypeID("Cls "),D=new ActionDescriptor,O=charIDToTypeID("DocI");D.putInteger(O,719);var y=stringIDToTypeID("forceNotify");D.putBoolean(y,!0),executeAction(w,D,DialogModes.NO)}for(var i=0;i<u.length;i++){var I=u[i];s(I.path,I.dir)}})();
`;
    ipcRendererRemoteAPI.systemTempPathWrite(photoshopCode, "jsx", 1e3 * 60).then((photoshopCodePath) => {
      fs3.writeFileSync(photoshopCodePath, photoshopCode);
      NotificationPhotoshop(photoshopCodePath);
      setTimeout(() => fs3.remove(photoshopCodePath).catch((err) => {
      }), 1e3 * 60);
    });
  }
  async function Clip_PSD_To(SetExt, ProcessLimit) {
    const { cmd } = window;
    if (!ProcessLimit)
      ProcessLimit = Infinity;
    let HandleError = () => {
    };
    let ProcessingList = /* @__PURE__ */ new Set();
    let MatchFormats = /[.](psd|psb|jpe?g|png|webp|gif|svg|ai)$/;
    let GetClipDataType = clip2.availableFormats();
    let GotuSpawnList = [];
    if (!GetClipDataType.length)
      throw new Error("Not Clip Data");
    if (GetClipDataType.includes("text/uri-list")) {
      if (!GetClipDataType.includes("image/png")) {
        let ClipFilePaths = clip2.readFilePaths();
        let HandleListComplete = /* @__PURE__ */ new Set();
        for (const Paths of ClipFilePaths) {
          let Stats2 = await fs3.stat(Paths).catch(HandleError) || void 0;
          if (!Stats2)
            continue;
          if (Stats2.isDirectory()) {
            window.walk.walkStream(Paths).on("data", function(chunk) {
              if (chunk.name.match(MatchFormats) && chunk.dirent.isFile() && GainPath.convert) {
                let Path = path5.resolve(chunk.path);
                if (!HandleListComplete.has(Path)) {
                  ProcessingList.add(Path);
                  let ToFormatsPath = Path.replace(MatchFormats, ".".concat(SetExt || ".png").replace(/[.]+([^.]+)/, ".$1"));
                  let IputPath = Path.match(/[.](psd|psb|gif|pdf|gif)$/) ? Path.concat("[0]") : Path;
                  GotuSpawnList.push(cmd.spawn(GainPath.convert, [IputPath, ToFormatsPath]).finally(() => ProcessingList.delete(Path)));
                  HandleListComplete.add(Path);
                }
              }
            });
          } else if (Stats2.isFile() && GainPath.convert) {
            let Path = path5.resolve(Paths);
            if (!HandleListComplete.has(Path)) {
              ProcessingList.add(Path);
              let ToFormatsPath = Path.replace(MatchFormats, ".".concat(SetExt || ".png").replace(/[.]+([^.]+)/, ".$1"));
              let IputPath = Path.match(/[.](psd|psb|gif|pdf|gif)$/) ? Path.concat("[0]") : Path;
              GotuSpawnList.push(cmd.spawn(GainPath.convert, [IputPath, ToFormatsPath]).finally(() => ProcessingList.delete(Path)));
              HandleListComplete.add(Path);
            }
          }
          if (ProcessingList.size > ProcessLimit) {
            await Promise.allSettled(GotuSpawnList);
          }
        }
      }
    }
    return await Promise.allSettled(GotuSpawnList);
  }
  window.Clip_PSD_To = Clip_PSD_To;
  window.NotificationPhotoshop = NotificationPhotoshop;
  window.Magick = new ImageMagick(window.GainPath.convert || "false");
  window.GenerateForDrew = GenerateForDrew;
  window.app = app;
  window.clipPathMirrorToSave = clipPathMirrorToSave;
  window.robotjs = import_robotjs.default;
  function Clip_To_Link() {
    let FileList = clip2.readFilePaths();
    let photoshopCode = `function OpenLinkSmartObjects(FilePath){if("object"==typeof FilePath)for(var index=0;index<FilePath.length;index++)OpenLinkSmartObjects(FilePath[index]);!function step2(enabled,withDialog){var cTID=function(s){return app.charIDToTypeID(s)},sTID=function(s){return app.stringIDToTypeID(s)};if(null==enabled||enabled){var dialogMode=withDialog?DialogModes.ALL:DialogModes.NO,desc1=new ActionDescriptor;desc1.putInteger(cTID("Idnt"),8),desc1.putPath(cTID("null"),new File(FilePath)),desc1.putBoolean(cTID("Lnkd"),!0),desc1.putEnumerated(cTID("FTcs"),cTID("QCSt"),sTID("QCSAverage"));var desc2=new ActionDescriptor;desc2.putUnitDouble(cTID("Hrzn"),cTID("#Pxl"),0),desc2.putUnitDouble(cTID("Vrtc"),cTID("#Pxl"),0),desc1.putObject(cTID("Ofst"),cTID("Ofst"),desc2);try{executeAction(sTID("placeEvent"),desc1,dialogMode)}catch(err){}}}()}OpenLinkSmartObjects(${JSON.stringify(FileList)});`;
    ipcRendererRemoteAPI.systemTempPathWrite(photoshopCode, "jsx", 1e3 * 60).then((photoshopCodePath) => {
      fs3.writeFileSync(photoshopCodePath, photoshopCode);
      NotificationPhotoshop(photoshopCodePath);
      setTimeout(() => fs3.remove(photoshopCodePath).catch((err) => {
      }), 1e3 * 60);
    });
  }
  window.Clip_To_Link = Clip_To_Link;
})();
/*!
 * clipboard.js v2.0.11
 * https://clipboardjs.com/
 *
 * Licensed MIT © Zeno Rocha
 */
/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
/*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/**
 * tdesign v0.15.4
 * (c) 2022 tdesign
 * @license MIT
 */
/**!
 * Sortable 1.15.0
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */
//# sourceMappingURL=app.map
