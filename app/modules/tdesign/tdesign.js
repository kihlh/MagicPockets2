/**
 * tdesign v0.15.4
 * (c) 2022 tdesign
 * @license MIT
 */

(function (global, factory) {
  // typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vue')) :
  // typeof define === 'function' && define.amd ? define(['exports', 'vue'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.TDesign = {}, global.Vue));
})(this, (function (exports, vue) { 'use strict';

  function _arrayLikeToArray$1(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _unsupportedIterableToArray$1(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread();
  }

  function _defineProperty$3(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest();
  }

  function setStyle$1(el, styles) {
    var keys = Object.keys(styles);
    keys.forEach(function (key) {
      el.style[key] = styles[key];
    });
  }

  function _objectWithoutPropertiesLoose$1(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties$1(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$1(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function getIEVersion() {
    var _navigator = navigator,
        userAgent = _navigator.userAgent;
    var isIE = userAgent.indexOf("compatible") > -1 && userAgent.indexOf("MSIE") > -1;
    var isIE11 = userAgent.indexOf("Trident") > -1 && userAgent.indexOf("rv:11.0") > -1;

    if (isIE) {
      var reIE = new RegExp("MSIE (\\d+\\.\\d+);");
      var match = userAgent.match(reIE);
      if (!match) return -1;
      var fIEVersion = parseFloat(match[1]);
      return fIEVersion < 7 ? 6 : fIEVersion;
    }

    if (isIE11) {
      return 11;
    }

    return Number.MAX_SAFE_INTEGER;
  }

  function ownKeys$2s(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2r(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2s(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2s(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function circleAdapter(circleElem) {
    var _window, _window$getComputedSt2, _window2, _window2$navigator;

    var basicStyle = {};

    if (!circleElem) {
      return;
    }

    var _window$getComputedSt = (_window = window) === null || _window === void 0 ? void 0 : (_window$getComputedSt2 = _window.getComputedStyle) === null || _window$getComputedSt2 === void 0 ? void 0 : _window$getComputedSt2.call(_window, circleElem),
        color = _window$getComputedSt.color,
        fontSize = _window$getComputedSt.fontSize;

    var ua = (_window2 = window) === null || _window2 === void 0 ? void 0 : (_window2$navigator = _window2.navigator) === null || _window2$navigator === void 0 ? void 0 : _window2$navigator.userAgent;
    var isSafari = /Safari/.test(ua) && !/Chrome/.test(ua);

    if (isSafari) {
      basicStyle = {
        transformOrigin: "-1px -1px",
        transform: "scale(".concat(parseInt(fontSize, 10) / 14, ")")
      };
    }

    if (color && getIEVersion() > 11) {
      var matched = color.match(/[\d.]+/g);
      var endColor = matched ? "rgba(".concat(matched[0], ", ").concat(matched[1], ", ").concat(matched[2], ", 0)") : "";
      setStyle$1(circleElem, _objectSpread$2r(_objectSpread$2r({}, basicStyle), {}, {
        background: "conic-gradient(from 90deg at 50% 50%,".concat(endColor, " 0deg, ").concat(color, " 360deg)")
      }));
    } else {
      setStyle$1(circleElem, _objectSpread$2r(_objectSpread$2r({}, basicStyle), {}, {
        background: ""
      }));
    }
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */

  function listCacheClear$1() {
    this.__data__ = [];
    this.size = 0;
  }

  var _listCacheClear = listCacheClear$1;

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */

  function eq$6(value, other) {
    return value === other || value !== value && other !== other;
  }

  var eq_1 = eq$6;

  var eq$5 = eq_1;
  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

  function assocIndexOf$4(array, key) {
    var length = array.length;

    while (length--) {
      if (eq$5(array[length][0], key)) {
        return length;
      }
    }

    return -1;
  }

  var _assocIndexOf = assocIndexOf$4;

  var assocIndexOf$3 = _assocIndexOf;
  /** Used for built-in method references. */

  var arrayProto = Array.prototype;
  /** Built-in value references. */

  var splice = arrayProto.splice;
  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */

  function listCacheDelete$1(key) {
    var data = this.__data__,
        index = assocIndexOf$3(data, key);

    if (index < 0) {
      return false;
    }

    var lastIndex = data.length - 1;

    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }

    --this.size;
    return true;
  }

  var _listCacheDelete = listCacheDelete$1;

  var assocIndexOf$2 = _assocIndexOf;
  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function listCacheGet$1(key) {
    var data = this.__data__,
        index = assocIndexOf$2(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  var _listCacheGet = listCacheGet$1;

  var assocIndexOf$1 = _assocIndexOf;
  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function listCacheHas$1(key) {
    return assocIndexOf$1(this.__data__, key) > -1;
  }

  var _listCacheHas = listCacheHas$1;

  var assocIndexOf = _assocIndexOf;
  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */

  function listCacheSet$1(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }

    return this;
  }

  var _listCacheSet = listCacheSet$1;

  var listCacheClear = _listCacheClear,
      listCacheDelete = _listCacheDelete,
      listCacheGet = _listCacheGet,
      listCacheHas = _listCacheHas,
      listCacheSet = _listCacheSet;
  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function ListCache$4(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  } // Add methods to `ListCache`.


  ListCache$4.prototype.clear = listCacheClear;
  ListCache$4.prototype['delete'] = listCacheDelete;
  ListCache$4.prototype.get = listCacheGet;
  ListCache$4.prototype.has = listCacheHas;
  ListCache$4.prototype.set = listCacheSet;
  var _ListCache = ListCache$4;

  var ListCache$3 = _ListCache;
  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */

  function stackClear$1() {
    this.__data__ = new ListCache$3();
    this.size = 0;
  }

  var _stackClear = stackClear$1;

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */

  function stackDelete$1(key) {
    var data = this.__data__,
        result = data['delete'](key);
    this.size = data.size;
    return result;
  }

  var _stackDelete = stackDelete$1;

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function stackGet$1(key) {
    return this.__data__.get(key);
  }

  var _stackGet = stackGet$1;

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function stackHas$1(key) {
    return this.__data__.has(key);
  }

  var _stackHas = stackHas$1;

  function _typeof$2(obj) {
    "@babel/helpers - typeof";

    return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof$2(obj);
  }

  var freeGlobal$1 = _typeof$2(commonjsGlobal) == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var _freeGlobal = freeGlobal$1;

  var freeGlobal = _freeGlobal;
  /** Detect free variable `self`. */

  var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof$2(self)) == 'object' && self && self.Object === Object && self;
  /** Used as a reference to the global object. */

  var root$a = freeGlobal || freeSelf || Function('return this')();
  var _root = root$a;

  var root$9 = _root;
  /** Built-in value references. */

  var _Symbol2 = root$9.Symbol;
  var _Symbol$6 = _Symbol2;

  var _Symbol$5 = _Symbol$6;
  /** Used for built-in method references. */

  var objectProto$i = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$g = objectProto$i.hasOwnProperty;
  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */

  var nativeObjectToString$1 = objectProto$i.toString;
  /** Built-in value references. */

  var symToStringTag$1 = _Symbol$5 ? _Symbol$5.toStringTag : undefined;
  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */

  function getRawTag$1(value) {
    var isOwn = hasOwnProperty$g.call(value, symToStringTag$1),
        tag = value[symToStringTag$1];

    try {
      value[symToStringTag$1] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString$1.call(value);

    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag;
      } else {
        delete value[symToStringTag$1];
      }
    }

    return result;
  }

  var _getRawTag = getRawTag$1;

  /** Used for built-in method references. */
  var objectProto$h = Object.prototype;
  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */

  var nativeObjectToString = objectProto$h.toString;
  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */

  function objectToString$1(value) {
    return nativeObjectToString.call(value);
  }

  var _objectToString = objectToString$1;

  var _Symbol$4 = _Symbol$6,
      getRawTag = _getRawTag,
      objectToString = _objectToString;
  /** `Object#toString` result references. */

  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';
  /** Built-in value references. */

  var symToStringTag = _Symbol$4 ? _Symbol$4.toStringTag : undefined;
  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */

  function baseGetTag$a(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }

    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  }

  var _baseGetTag = baseGetTag$a;

  function isObject$d(value) {
    var type = _typeof$2(value);

    return value != null && (type == 'object' || type == 'function');
  }

  var isObject_1 = isObject$d;

  var baseGetTag$9 = _baseGetTag,
      isObject$c = isObject_1;
  /** `Object#toString` result references. */

  var asyncTag = '[object AsyncFunction]',
      funcTag$2 = '[object Function]',
      genTag$1 = '[object GeneratorFunction]',
      proxyTag = '[object Proxy]';
  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */

  function isFunction$3(value) {
    if (!isObject$c(value)) {
      return false;
    } // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.


    var tag = baseGetTag$9(value);
    return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
  }

  var isFunction_1 = isFunction$3;

  var root$8 = _root;
  /** Used to detect overreaching core-js shims. */

  var coreJsData$1 = root$8['__core-js_shared__'];
  var _coreJsData = coreJsData$1;

  var coreJsData = _coreJsData;
  /** Used to detect methods masquerading as native. */

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();
  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */


  function isMasked$1(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  var _isMasked = isMasked$1;

  /** Used for built-in method references. */
  var funcProto$2 = Function.prototype;
  /** Used to resolve the decompiled source of functions. */

  var funcToString$2 = funcProto$2.toString;
  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */

  function toSource$2(func) {
    if (func != null) {
      try {
        return funcToString$2.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  var _toSource = toSource$2;

  var isFunction$2 = isFunction_1,
      isMasked = _isMasked,
      isObject$b = isObject_1,
      toSource$1 = _toSource;
  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */

  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  /** Used to detect host constructors (Safari). */

  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  /** Used for built-in method references. */

  var funcProto$1 = Function.prototype,
      objectProto$g = Object.prototype;
  /** Used to resolve the decompiled source of functions. */

  var funcToString$1 = funcProto$1.toString;
  /** Used to check objects for own properties. */

  var hasOwnProperty$f = objectProto$g.hasOwnProperty;
  /** Used to detect if a method is native. */

  var reIsNative = RegExp('^' + funcToString$1.call(hasOwnProperty$f).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */

  function baseIsNative$1(value) {
    if (!isObject$b(value) || isMasked(value)) {
      return false;
    }

    var pattern = isFunction$2(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource$1(value));
  }

  var _baseIsNative = baseIsNative$1;

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */

  function getValue$1(object, key) {
    return object == null ? undefined : object[key];
  }

  var _getValue = getValue$1;

  var baseIsNative = _baseIsNative,
      getValue = _getValue;
  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */

  function getNative$7(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  var _getNative = getNative$7;

  var getNative$6 = _getNative,
      root$7 = _root;
  /* Built-in method references that are verified to be native. */

  var Map$4 = getNative$6(root$7, 'Map');
  var _Map = Map$4;

  var getNative$5 = _getNative;
  /* Built-in method references that are verified to be native. */

  var nativeCreate$4 = getNative$5(Object, 'create');
  var _nativeCreate = nativeCreate$4;

  var nativeCreate$3 = _nativeCreate;
  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */

  function hashClear$1() {
    this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
    this.size = 0;
  }

  var _hashClear = hashClear$1;

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */

  function hashDelete$1(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  var _hashDelete = hashDelete$1;

  var nativeCreate$2 = _nativeCreate;
  /** Used to stand-in for `undefined` hash values. */

  var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';
  /** Used for built-in method references. */

  var objectProto$f = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$e = objectProto$f.hasOwnProperty;
  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function hashGet$1(key) {
    var data = this.__data__;

    if (nativeCreate$2) {
      var result = data[key];
      return result === HASH_UNDEFINED$2 ? undefined : result;
    }

    return hasOwnProperty$e.call(data, key) ? data[key] : undefined;
  }

  var _hashGet = hashGet$1;

  var nativeCreate$1 = _nativeCreate;
  /** Used for built-in method references. */

  var objectProto$e = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$d = objectProto$e.hasOwnProperty;
  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function hashHas$1(key) {
    var data = this.__data__;
    return nativeCreate$1 ? data[key] !== undefined : hasOwnProperty$d.call(data, key);
  }

  var _hashHas = hashHas$1;

  var nativeCreate = _nativeCreate;
  /** Used to stand-in for `undefined` hash values. */

  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';
  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */

  function hashSet$1(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED$1 : value;
    return this;
  }

  var _hashSet = hashSet$1;

  var hashClear = _hashClear,
      hashDelete = _hashDelete,
      hashGet = _hashGet,
      hashHas = _hashHas,
      hashSet = _hashSet;
  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function Hash$1(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  } // Add methods to `Hash`.


  Hash$1.prototype.clear = hashClear;
  Hash$1.prototype['delete'] = hashDelete;
  Hash$1.prototype.get = hashGet;
  Hash$1.prototype.has = hashHas;
  Hash$1.prototype.set = hashSet;
  var _Hash = Hash$1;

  var Hash = _Hash,
      ListCache$2 = _ListCache,
      Map$3 = _Map;
  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */

  function mapCacheClear$1() {
    this.size = 0;
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map$3 || ListCache$2)(),
      'string': new Hash()
    };
  }

  var _mapCacheClear = mapCacheClear$1;

  function isKeyable$1(value) {
    var type = _typeof$2(value);

    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  var _isKeyable = isKeyable$1;

  var isKeyable = _isKeyable;
  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */

  function getMapData$4(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  var _getMapData = getMapData$4;

  var getMapData$3 = _getMapData;
  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */

  function mapCacheDelete$1(key) {
    var result = getMapData$3(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  var _mapCacheDelete = mapCacheDelete$1;

  var getMapData$2 = _getMapData;
  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function mapCacheGet$1(key) {
    return getMapData$2(this, key).get(key);
  }

  var _mapCacheGet = mapCacheGet$1;

  var getMapData$1 = _getMapData;
  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function mapCacheHas$1(key) {
    return getMapData$1(this, key).has(key);
  }

  var _mapCacheHas = mapCacheHas$1;

  var getMapData = _getMapData;
  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */

  function mapCacheSet$1(key, value) {
    var data = getMapData(this, key),
        size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  var _mapCacheSet = mapCacheSet$1;

  var mapCacheClear = _mapCacheClear,
      mapCacheDelete = _mapCacheDelete,
      mapCacheGet = _mapCacheGet,
      mapCacheHas = _mapCacheHas,
      mapCacheSet = _mapCacheSet;
  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function MapCache$3(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  } // Add methods to `MapCache`.


  MapCache$3.prototype.clear = mapCacheClear;
  MapCache$3.prototype['delete'] = mapCacheDelete;
  MapCache$3.prototype.get = mapCacheGet;
  MapCache$3.prototype.has = mapCacheHas;
  MapCache$3.prototype.set = mapCacheSet;
  var _MapCache = MapCache$3;

  var ListCache$1 = _ListCache,
      Map$2 = _Map,
      MapCache$2 = _MapCache;
  /** Used as the size to enable large array optimizations. */

  var LARGE_ARRAY_SIZE$1 = 200;
  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */

  function stackSet$1(key, value) {
    var data = this.__data__;

    if (data instanceof ListCache$1) {
      var pairs = data.__data__;

      if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE$1 - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }

      data = this.__data__ = new MapCache$2(pairs);
    }

    data.set(key, value);
    this.size = data.size;
    return this;
  }

  var _stackSet = stackSet$1;

  var ListCache = _ListCache,
      stackClear = _stackClear,
      stackDelete = _stackDelete,
      stackGet = _stackGet,
      stackHas = _stackHas,
      stackSet = _stackSet;
  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function Stack$4(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  } // Add methods to `Stack`.


  Stack$4.prototype.clear = stackClear;
  Stack$4.prototype['delete'] = stackDelete;
  Stack$4.prototype.get = stackGet;
  Stack$4.prototype.has = stackHas;
  Stack$4.prototype.set = stackSet;
  var _Stack = Stack$4;

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */

  function arrayEach$1(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }

    return array;
  }

  var _arrayEach = arrayEach$1;

  var getNative$4 = _getNative;

  var defineProperty$2 = function () {
    try {
      var func = getNative$4(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }();

  var _defineProperty$2 = defineProperty$2;

  var defineProperty$1 = _defineProperty$2;
  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */

  function baseAssignValue$3(object, key, value) {
    if (key == '__proto__' && defineProperty$1) {
      defineProperty$1(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  var _baseAssignValue = baseAssignValue$3;

  var baseAssignValue$2 = _baseAssignValue,
      eq$4 = eq_1;
  /** Used for built-in method references. */

  var objectProto$d = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$c = objectProto$d.hasOwnProperty;
  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */

  function assignValue$3(object, key, value) {
    var objValue = object[key];

    if (!(hasOwnProperty$c.call(object, key) && eq$4(objValue, value)) || value === undefined && !(key in object)) {
      baseAssignValue$2(object, key, value);
    }
  }

  var _assignValue = assignValue$3;

  var assignValue$2 = _assignValue,
      baseAssignValue$1 = _baseAssignValue;
  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */

  function copyObject$7(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }

      if (isNew) {
        baseAssignValue$1(object, key, newValue);
      } else {
        assignValue$2(object, key, newValue);
      }
    }

    return object;
  }

  var _copyObject = copyObject$7;

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */

  function baseTimes$1(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  var _baseTimes = baseTimes$1;

  function isObjectLike$d(value) {
    return value != null && _typeof$2(value) == 'object';
  }

  var isObjectLike_1 = isObjectLike$d;

  var baseGetTag$8 = _baseGetTag,
      isObjectLike$c = isObjectLike_1;
  /** `Object#toString` result references. */

  var argsTag$3 = '[object Arguments]';
  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */

  function baseIsArguments$1(value) {
    return isObjectLike$c(value) && baseGetTag$8(value) == argsTag$3;
  }

  var _baseIsArguments = baseIsArguments$1;

  var baseIsArguments = _baseIsArguments,
      isObjectLike$b = isObjectLike_1;
  /** Used for built-in method references. */

  var objectProto$c = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$b = objectProto$c.hasOwnProperty;
  /** Built-in value references. */

  var propertyIsEnumerable$1 = objectProto$c.propertyIsEnumerable;
  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */

  var isArguments$5 = baseIsArguments(function () {
    return arguments;
  }()) ? baseIsArguments : function (value) {
    return isObjectLike$b(value) && hasOwnProperty$b.call(value, 'callee') && !propertyIsEnumerable$1.call(value, 'callee');
  };
  var isArguments_1 = isArguments$5;

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray$d = Array.isArray;
  var isArray_1 = isArray$d;

  var isBuffer$5 = {exports: {}};

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */

  function stubFalse() {
    return false;
  }

  var stubFalse_1 = stubFalse;

  (function (module, exports) {
    var root = _root,
        stubFalse = stubFalse_1;
    /** Detect free variable `exports`. */

    var freeExports = exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */

    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */

    var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Built-in value references. */

    var Buffer = moduleExports ? root.Buffer : undefined;
    /* Built-in method references for those with the same name as other `lodash` methods. */

    var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */

    var isBuffer = nativeIsBuffer || stubFalse;
    module.exports = isBuffer;
  })(isBuffer$5, isBuffer$5.exports);

  var MAX_SAFE_INTEGER$1 = 9007199254740991;
  /** Used to detect unsigned integer values. */

  var reIsUint = /^(?:0|[1-9]\d*)$/;
  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */

  function isIndex$4(value, length) {
    var type = _typeof$2(value);

    length = length == null ? MAX_SAFE_INTEGER$1 : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  var _isIndex = isIndex$4;

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;
  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */

  function isLength$3(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  var isLength_1 = isLength$3;

  var baseGetTag$7 = _baseGetTag,
      isLength$2 = isLength_1,
      isObjectLike$a = isObjectLike_1;
  /** `Object#toString` result references. */

  var argsTag$2 = '[object Arguments]',
      arrayTag$2 = '[object Array]',
      boolTag$4 = '[object Boolean]',
      dateTag$3 = '[object Date]',
      errorTag$3 = '[object Error]',
      funcTag$1 = '[object Function]',
      mapTag$6 = '[object Map]',
      numberTag$4 = '[object Number]',
      objectTag$4 = '[object Object]',
      regexpTag$3 = '[object RegExp]',
      setTag$6 = '[object Set]',
      stringTag$4 = '[object String]',
      weakMapTag$2 = '[object WeakMap]';
  var arrayBufferTag$3 = '[object ArrayBuffer]',
      dataViewTag$4 = '[object DataView]',
      float32Tag$2 = '[object Float32Array]',
      float64Tag$2 = '[object Float64Array]',
      int8Tag$2 = '[object Int8Array]',
      int16Tag$2 = '[object Int16Array]',
      int32Tag$2 = '[object Int32Array]',
      uint8Tag$2 = '[object Uint8Array]',
      uint8ClampedTag$2 = '[object Uint8ClampedArray]',
      uint16Tag$2 = '[object Uint16Array]',
      uint32Tag$2 = '[object Uint32Array]';
  /** Used to identify `toStringTag` values of typed arrays. */

  var typedArrayTags = {};
  typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
  typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$4] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] = typedArrayTags[errorTag$3] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$6] = typedArrayTags[numberTag$4] = typedArrayTags[objectTag$4] = typedArrayTags[regexpTag$3] = typedArrayTags[setTag$6] = typedArrayTags[stringTag$4] = typedArrayTags[weakMapTag$2] = false;
  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */

  function baseIsTypedArray$1(value) {
    return isObjectLike$a(value) && isLength$2(value.length) && !!typedArrayTags[baseGetTag$7(value)];
  }

  var _baseIsTypedArray = baseIsTypedArray$1;

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */

  function baseUnary$5(func) {
    return function (value) {
      return func(value);
    };
  }

  var _baseUnary = baseUnary$5;

  var _nodeUtil = {exports: {}};

  (function (module, exports) {
    var freeGlobal = _freeGlobal;
    /** Detect free variable `exports`. */

    var freeExports = exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */

    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */

    var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Detect free variable `process` from Node.js. */

    var freeProcess = moduleExports && freeGlobal.process;
    /** Used to access faster Node.js helpers. */

    var nodeUtil = function () {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        } // Legacy `process.binding('util')` for Node.js < 10.


        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }();

    module.exports = nodeUtil;
  })(_nodeUtil, _nodeUtil.exports);

  var baseIsTypedArray = _baseIsTypedArray,
      baseUnary$4 = _baseUnary,
      nodeUtil$2 = _nodeUtil.exports;
  /* Node.js helper references. */

  var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;
  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */

  var isTypedArray$4 = nodeIsTypedArray ? baseUnary$4(nodeIsTypedArray) : baseIsTypedArray;
  var isTypedArray_1 = isTypedArray$4;

  var baseTimes = _baseTimes,
      isArguments$4 = isArguments_1,
      isArray$c = isArray_1,
      isBuffer$4 = isBuffer$5.exports,
      isIndex$3 = _isIndex,
      isTypedArray$3 = isTypedArray_1;
  /** Used for built-in method references. */

  var objectProto$b = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$a = objectProto$b.hasOwnProperty;
  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */

  function arrayLikeKeys$2(value, inherited) {
    var isArr = isArray$c(value),
        isArg = !isArr && isArguments$4(value),
        isBuff = !isArr && !isArg && isBuffer$4(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray$3(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty$a.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
      key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
      isIndex$3(key, length)))) {
        result.push(key);
      }
    }

    return result;
  }

  var _arrayLikeKeys = arrayLikeKeys$2;

  /** Used for built-in method references. */
  var objectProto$a = Object.prototype;
  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */

  function isPrototype$4(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$a;
    return value === proto;
  }

  var _isPrototype = isPrototype$4;

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */

  function overArg$2(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  var _overArg = overArg$2;

  var overArg$1 = _overArg;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeKeys$1 = overArg$1(Object.keys, Object);
  var _nativeKeys = nativeKeys$1;

  var isPrototype$3 = _isPrototype,
      nativeKeys = _nativeKeys;
  /** Used for built-in method references. */

  var objectProto$9 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$9 = objectProto$9.hasOwnProperty;
  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */

  function baseKeys$2(object) {
    if (!isPrototype$3(object)) {
      return nativeKeys(object);
    }

    var result = [];

    for (var key in Object(object)) {
      if (hasOwnProperty$9.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }

    return result;
  }

  var _baseKeys = baseKeys$2;

  var isFunction$1 = isFunction_1,
      isLength$1 = isLength_1;
  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */

  function isArrayLike$5(value) {
    return value != null && isLength$1(value.length) && !isFunction$1(value);
  }

  var isArrayLike_1 = isArrayLike$5;

  var arrayLikeKeys$1 = _arrayLikeKeys,
      baseKeys$1 = _baseKeys,
      isArrayLike$4 = isArrayLike_1;
  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */

  function keys$5(object) {
    return isArrayLike$4(object) ? arrayLikeKeys$1(object) : baseKeys$1(object);
  }

  var keys_1 = keys$5;

  var copyObject$6 = _copyObject,
      keys$4 = keys_1;
  /**
   * The base implementation of `_.assign` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */

  function baseAssign$1(object, source) {
    return object && copyObject$6(source, keys$4(source), object);
  }

  var _baseAssign = baseAssign$1;

  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */

  function nativeKeysIn$1(object) {
    var result = [];

    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }

    return result;
  }

  var _nativeKeysIn = nativeKeysIn$1;

  var isObject$a = isObject_1,
      isPrototype$2 = _isPrototype,
      nativeKeysIn = _nativeKeysIn;
  /** Used for built-in method references. */

  var objectProto$8 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$8 = objectProto$8.hasOwnProperty;
  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */

  function baseKeysIn$1(object) {
    if (!isObject$a(object)) {
      return nativeKeysIn(object);
    }

    var isProto = isPrototype$2(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty$8.call(object, key)))) {
        result.push(key);
      }
    }

    return result;
  }

  var _baseKeysIn = baseKeysIn$1;

  var arrayLikeKeys = _arrayLikeKeys,
      baseKeysIn = _baseKeysIn,
      isArrayLike$3 = isArrayLike_1;
  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */

  function keysIn$6(object) {
    return isArrayLike$3(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }

  var keysIn_1 = keysIn$6;

  var copyObject$5 = _copyObject,
      keysIn$5 = keysIn_1;
  /**
   * The base implementation of `_.assignIn` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */

  function baseAssignIn$1(object, source) {
    return object && copyObject$5(source, keysIn$5(source), object);
  }

  var _baseAssignIn = baseAssignIn$1;

  var _cloneBuffer = {exports: {}};

  (function (module, exports) {
    var root = _root;
    /** Detect free variable `exports`. */

    var freeExports = exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */

    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */

    var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Built-in value references. */

    var Buffer = moduleExports ? root.Buffer : undefined,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */

    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }

      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }

    module.exports = cloneBuffer;
  })(_cloneBuffer, _cloneBuffer.exports);

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */

  function copyArray$2(source, array) {
    var index = -1,
        length = source.length;
    array || (array = Array(length));

    while (++index < length) {
      array[index] = source[index];
    }

    return array;
  }

  var _copyArray = copyArray$2;

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */

  function arrayFilter$1(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];

      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }

    return result;
  }

  var _arrayFilter = arrayFilter$1;

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */

  function stubArray$2() {
    return [];
  }

  var stubArray_1 = stubArray$2;

  var arrayFilter = _arrayFilter,
      stubArray$1 = stubArray_1;
  /** Used for built-in method references. */

  var objectProto$7 = Object.prototype;
  /** Built-in value references. */

  var propertyIsEnumerable = objectProto$7.propertyIsEnumerable;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */

  var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function (object) {
    if (object == null) {
      return [];
    }

    object = Object(object);
    return arrayFilter(nativeGetSymbols$1(object), function (symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };
  var _getSymbols = getSymbols$3;

  var copyObject$4 = _copyObject,
      getSymbols$2 = _getSymbols;
  /**
   * Copies own symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */

  function copySymbols$1(source, object) {
    return copyObject$4(source, getSymbols$2(source), object);
  }

  var _copySymbols = copySymbols$1;

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */

  function arrayPush$3(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }

    return array;
  }

  var _arrayPush = arrayPush$3;

  var overArg = _overArg;
  /** Built-in value references. */

  var getPrototype$3 = overArg(Object.getPrototypeOf, Object);
  var _getPrototype = getPrototype$3;

  var arrayPush$2 = _arrayPush,
      getPrototype$2 = _getPrototype,
      getSymbols$1 = _getSymbols,
      stubArray = stubArray_1;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeGetSymbols = Object.getOwnPropertySymbols;
  /**
   * Creates an array of the own and inherited enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */

  var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function (object) {
    var result = [];

    while (object) {
      arrayPush$2(result, getSymbols$1(object));
      object = getPrototype$2(object);
    }

    return result;
  };
  var _getSymbolsIn = getSymbolsIn$2;

  var copyObject$3 = _copyObject,
      getSymbolsIn$1 = _getSymbolsIn;
  /**
   * Copies own and inherited symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */

  function copySymbolsIn$1(source, object) {
    return copyObject$3(source, getSymbolsIn$1(source), object);
  }

  var _copySymbolsIn = copySymbolsIn$1;

  var arrayPush$1 = _arrayPush,
      isArray$b = isArray_1;
  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */

  function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray$b(object) ? result : arrayPush$1(result, symbolsFunc(object));
  }

  var _baseGetAllKeys = baseGetAllKeys$2;

  var baseGetAllKeys$1 = _baseGetAllKeys,
      getSymbols = _getSymbols,
      keys$3 = keys_1;
  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */

  function getAllKeys$2(object) {
    return baseGetAllKeys$1(object, keys$3, getSymbols);
  }

  var _getAllKeys = getAllKeys$2;

  var baseGetAllKeys = _baseGetAllKeys,
      getSymbolsIn = _getSymbolsIn,
      keysIn$4 = keysIn_1;
  /**
   * Creates an array of own and inherited enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */

  function getAllKeysIn$2(object) {
    return baseGetAllKeys(object, keysIn$4, getSymbolsIn);
  }

  var _getAllKeysIn = getAllKeysIn$2;

  var getNative$3 = _getNative,
      root$6 = _root;
  /* Built-in method references that are verified to be native. */

  var DataView$1 = getNative$3(root$6, 'DataView');
  var _DataView = DataView$1;

  var getNative$2 = _getNative,
      root$5 = _root;
  /* Built-in method references that are verified to be native. */

  var Promise$2 = getNative$2(root$5, 'Promise');
  var _Promise = Promise$2;

  var getNative$1 = _getNative,
      root$4 = _root;
  /* Built-in method references that are verified to be native. */

  var Set$2 = getNative$1(root$4, 'Set');
  var _Set = Set$2;

  var getNative = _getNative,
      root$3 = _root;
  /* Built-in method references that are verified to be native. */

  var WeakMap$2 = getNative(root$3, 'WeakMap');
  var _WeakMap = WeakMap$2;

  var DataView = _DataView,
      Map$1 = _Map,
      Promise$1 = _Promise,
      Set$1 = _Set,
      WeakMap$1 = _WeakMap,
      baseGetTag$6 = _baseGetTag,
      toSource = _toSource;
  /** `Object#toString` result references. */

  var mapTag$5 = '[object Map]',
      objectTag$3 = '[object Object]',
      promiseTag = '[object Promise]',
      setTag$5 = '[object Set]',
      weakMapTag$1 = '[object WeakMap]';
  var dataViewTag$3 = '[object DataView]';
  /** Used to detect maps, sets, and weakmaps. */

  var dataViewCtorString = toSource(DataView),
      mapCtorString = toSource(Map$1),
      promiseCtorString = toSource(Promise$1),
      setCtorString = toSource(Set$1),
      weakMapCtorString = toSource(WeakMap$1);
  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */

  var getTag$5 = baseGetTag$6; // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

  if (DataView && getTag$5(new DataView(new ArrayBuffer(1))) != dataViewTag$3 || Map$1 && getTag$5(new Map$1()) != mapTag$5 || Promise$1 && getTag$5(Promise$1.resolve()) != promiseTag || Set$1 && getTag$5(new Set$1()) != setTag$5 || WeakMap$1 && getTag$5(new WeakMap$1()) != weakMapTag$1) {
    getTag$5 = function getTag(value) {
      var result = baseGetTag$6(value),
          Ctor = result == objectTag$3 ? value.constructor : undefined,
          ctorString = Ctor ? toSource(Ctor) : '';

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag$3;

          case mapCtorString:
            return mapTag$5;

          case promiseCtorString:
            return promiseTag;

          case setCtorString:
            return setTag$5;

          case weakMapCtorString:
            return weakMapTag$1;
        }
      }

      return result;
    };
  }

  var _getTag = getTag$5;

  /** Used for built-in method references. */
  var objectProto$6 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$7 = objectProto$6.hasOwnProperty;
  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */

  function initCloneArray$1(array) {
    var length = array.length,
        result = new array.constructor(length); // Add properties assigned by `RegExp#exec`.

    if (length && typeof array[0] == 'string' && hasOwnProperty$7.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }

    return result;
  }

  var _initCloneArray = initCloneArray$1;

  var root$2 = _root;
  /** Built-in value references. */

  var Uint8Array$2 = root$2.Uint8Array;
  var _Uint8Array = Uint8Array$2;

  var Uint8Array$1 = _Uint8Array;
  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */

  function cloneArrayBuffer$3(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
    return result;
  }

  var _cloneArrayBuffer = cloneArrayBuffer$3;

  var cloneArrayBuffer$2 = _cloneArrayBuffer;
  /**
   * Creates a clone of `dataView`.
   *
   * @private
   * @param {Object} dataView The data view to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned data view.
   */

  function cloneDataView$1(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer$2(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  var _cloneDataView = cloneDataView$1;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;
  /**
   * Creates a clone of `regexp`.
   *
   * @private
   * @param {Object} regexp The regexp to clone.
   * @returns {Object} Returns the cloned regexp.
   */

  function cloneRegExp$1(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  var _cloneRegExp = cloneRegExp$1;

  var _Symbol$3 = _Symbol$6;
  /** Used to convert symbols to primitives and strings. */

  var symbolProto$2 = _Symbol$3 ? _Symbol$3.prototype : undefined,
      symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;
  /**
   * Creates a clone of the `symbol` object.
   *
   * @private
   * @param {Object} symbol The symbol object to clone.
   * @returns {Object} Returns the cloned symbol object.
   */

  function cloneSymbol$1(symbol) {
    return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
  }

  var _cloneSymbol = cloneSymbol$1;

  var cloneArrayBuffer$1 = _cloneArrayBuffer;
  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */

  function cloneTypedArray$2(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer$1(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  var _cloneTypedArray = cloneTypedArray$2;

  var cloneArrayBuffer = _cloneArrayBuffer,
      cloneDataView = _cloneDataView,
      cloneRegExp = _cloneRegExp,
      cloneSymbol = _cloneSymbol,
      cloneTypedArray$1 = _cloneTypedArray;
  /** `Object#toString` result references. */

  var boolTag$3 = '[object Boolean]',
      dateTag$2 = '[object Date]',
      mapTag$4 = '[object Map]',
      numberTag$3 = '[object Number]',
      regexpTag$2 = '[object RegExp]',
      setTag$4 = '[object Set]',
      stringTag$3 = '[object String]',
      symbolTag$3 = '[object Symbol]';
  var arrayBufferTag$2 = '[object ArrayBuffer]',
      dataViewTag$2 = '[object DataView]',
      float32Tag$1 = '[object Float32Array]',
      float64Tag$1 = '[object Float64Array]',
      int8Tag$1 = '[object Int8Array]',
      int16Tag$1 = '[object Int16Array]',
      int32Tag$1 = '[object Int32Array]',
      uint8Tag$1 = '[object Uint8Array]',
      uint8ClampedTag$1 = '[object Uint8ClampedArray]',
      uint16Tag$1 = '[object Uint16Array]',
      uint32Tag$1 = '[object Uint32Array]';
  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */

  function initCloneByTag$1(object, tag, isDeep) {
    var Ctor = object.constructor;

    switch (tag) {
      case arrayBufferTag$2:
        return cloneArrayBuffer(object);

      case boolTag$3:
      case dateTag$2:
        return new Ctor(+object);

      case dataViewTag$2:
        return cloneDataView(object, isDeep);

      case float32Tag$1:
      case float64Tag$1:
      case int8Tag$1:
      case int16Tag$1:
      case int32Tag$1:
      case uint8Tag$1:
      case uint8ClampedTag$1:
      case uint16Tag$1:
      case uint32Tag$1:
        return cloneTypedArray$1(object, isDeep);

      case mapTag$4:
        return new Ctor();

      case numberTag$3:
      case stringTag$3:
        return new Ctor(object);

      case regexpTag$2:
        return cloneRegExp(object);

      case setTag$4:
        return new Ctor();

      case symbolTag$3:
        return cloneSymbol(object);
    }
  }

  var _initCloneByTag = initCloneByTag$1;

  var isObject$9 = isObject_1;
  /** Built-in value references. */

  var objectCreate = Object.create;
  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */

  var baseCreate$1 = function () {
    function object() {}

    return function (proto) {
      if (!isObject$9(proto)) {
        return {};
      }

      if (objectCreate) {
        return objectCreate(proto);
      }

      object.prototype = proto;
      var result = new object();
      object.prototype = undefined;
      return result;
    };
  }();

  var _baseCreate = baseCreate$1;

  var baseCreate = _baseCreate,
      getPrototype$1 = _getPrototype,
      isPrototype$1 = _isPrototype;
  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */

  function initCloneObject$2(object) {
    return typeof object.constructor == 'function' && !isPrototype$1(object) ? baseCreate(getPrototype$1(object)) : {};
  }

  var _initCloneObject = initCloneObject$2;

  var getTag$4 = _getTag,
      isObjectLike$9 = isObjectLike_1;
  /** `Object#toString` result references. */

  var mapTag$3 = '[object Map]';
  /**
   * The base implementation of `_.isMap` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   */

  function baseIsMap$1(value) {
    return isObjectLike$9(value) && getTag$4(value) == mapTag$3;
  }

  var _baseIsMap = baseIsMap$1;

  var baseIsMap = _baseIsMap,
      baseUnary$3 = _baseUnary,
      nodeUtil$1 = _nodeUtil.exports;
  /* Node.js helper references. */

  var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;
  /**
   * Checks if `value` is classified as a `Map` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   * @example
   *
   * _.isMap(new Map);
   * // => true
   *
   * _.isMap(new WeakMap);
   * // => false
   */

  var isMap$1 = nodeIsMap ? baseUnary$3(nodeIsMap) : baseIsMap;
  var isMap_1 = isMap$1;

  var getTag$3 = _getTag,
      isObjectLike$8 = isObjectLike_1;
  /** `Object#toString` result references. */

  var setTag$3 = '[object Set]';
  /**
   * The base implementation of `_.isSet` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   */

  function baseIsSet$1(value) {
    return isObjectLike$8(value) && getTag$3(value) == setTag$3;
  }

  var _baseIsSet = baseIsSet$1;

  var baseIsSet = _baseIsSet,
      baseUnary$2 = _baseUnary,
      nodeUtil = _nodeUtil.exports;
  /* Node.js helper references. */

  var nodeIsSet = nodeUtil && nodeUtil.isSet;
  /**
   * Checks if `value` is classified as a `Set` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   * @example
   *
   * _.isSet(new Set);
   * // => true
   *
   * _.isSet(new WeakSet);
   * // => false
   */

  var isSet$1 = nodeIsSet ? baseUnary$2(nodeIsSet) : baseIsSet;
  var isSet_1 = isSet$1;

  var Stack$3 = _Stack,
      arrayEach = _arrayEach,
      assignValue$1 = _assignValue,
      baseAssign = _baseAssign,
      baseAssignIn = _baseAssignIn,
      cloneBuffer$1 = _cloneBuffer.exports,
      copyArray$1 = _copyArray,
      copySymbols = _copySymbols,
      copySymbolsIn = _copySymbolsIn,
      getAllKeys$1 = _getAllKeys,
      getAllKeysIn$1 = _getAllKeysIn,
      getTag$2 = _getTag,
      initCloneArray = _initCloneArray,
      initCloneByTag = _initCloneByTag,
      initCloneObject$1 = _initCloneObject,
      isArray$a = isArray_1,
      isBuffer$3 = isBuffer$5.exports,
      isMap = isMap_1,
      isObject$8 = isObject_1,
      isSet = isSet_1,
      keys$2 = keys_1,
      keysIn$3 = keysIn_1;
  /** Used to compose bitmasks for cloning. */

  var CLONE_DEEP_FLAG$2 = 1,
      CLONE_FLAT_FLAG$1 = 2,
      CLONE_SYMBOLS_FLAG$2 = 4;
  /** `Object#toString` result references. */

  var argsTag$1 = '[object Arguments]',
      arrayTag$1 = '[object Array]',
      boolTag$2 = '[object Boolean]',
      dateTag$1 = '[object Date]',
      errorTag$2 = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag$2 = '[object Map]',
      numberTag$2 = '[object Number]',
      objectTag$2 = '[object Object]',
      regexpTag$1 = '[object RegExp]',
      setTag$2 = '[object Set]',
      stringTag$2 = '[object String]',
      symbolTag$2 = '[object Symbol]',
      weakMapTag = '[object WeakMap]';
  var arrayBufferTag$1 = '[object ArrayBuffer]',
      dataViewTag$1 = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  /** Used to identify `toStringTag` values supported by `_.clone`. */

  var cloneableTags = {};
  cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] = cloneableTags[boolTag$2] = cloneableTags[dateTag$1] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$2] = cloneableTags[numberTag$2] = cloneableTags[objectTag$2] = cloneableTags[regexpTag$1] = cloneableTags[setTag$2] = cloneableTags[stringTag$2] = cloneableTags[symbolTag$2] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag$2] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
  /**
   * The base implementation of `_.clone` and `_.cloneDeep` which tracks
   * traversed objects.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Deep clone
   *  2 - Flatten inherited properties
   *  4 - Clone symbols
   * @param {Function} [customizer] The function to customize cloning.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The parent object of `value`.
   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
   * @returns {*} Returns the cloned value.
   */

  function baseClone$2(value, bitmask, customizer, key, object, stack) {
    var result,
        isDeep = bitmask & CLONE_DEEP_FLAG$2,
        isFlat = bitmask & CLONE_FLAT_FLAG$1,
        isFull = bitmask & CLONE_SYMBOLS_FLAG$2;

    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }

    if (result !== undefined) {
      return result;
    }

    if (!isObject$8(value)) {
      return value;
    }

    var isArr = isArray$a(value);

    if (isArr) {
      result = initCloneArray(value);

      if (!isDeep) {
        return copyArray$1(value, result);
      }
    } else {
      var tag = getTag$2(value),
          isFunc = tag == funcTag || tag == genTag;

      if (isBuffer$3(value)) {
        return cloneBuffer$1(value, isDeep);
      }

      if (tag == objectTag$2 || tag == argsTag$1 || isFunc && !object) {
        result = isFlat || isFunc ? {} : initCloneObject$1(value);

        if (!isDeep) {
          return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }

        result = initCloneByTag(value, tag, isDeep);
      }
    } // Check for circular references and return its corresponding clone.


    stack || (stack = new Stack$3());
    var stacked = stack.get(value);

    if (stacked) {
      return stacked;
    }

    stack.set(value, result);

    if (isSet(value)) {
      value.forEach(function (subValue) {
        result.add(baseClone$2(subValue, bitmask, customizer, subValue, value, stack));
      });
    } else if (isMap(value)) {
      value.forEach(function (subValue, key) {
        result.set(key, baseClone$2(subValue, bitmask, customizer, key, value, stack));
      });
    }

    var keysFunc = isFull ? isFlat ? getAllKeysIn$1 : getAllKeys$1 : isFlat ? keysIn$3 : keys$2;
    var props = isArr ? undefined : keysFunc(value);
    arrayEach(props || value, function (subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      } // Recursively populate clone (susceptible to call stack limits).


      assignValue$1(result, key, baseClone$2(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }

  var _baseClone = baseClone$2;

  var baseClone$1 = _baseClone;
  /** Used to compose bitmasks for cloning. */

  var CLONE_DEEP_FLAG$1 = 1,
      CLONE_SYMBOLS_FLAG$1 = 4;
  /**
   * This method is like `_.clone` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @returns {*} Returns the deep cloned value.
   * @see _.clone
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var deep = _.cloneDeep(objects);
   * console.log(deep[0] === objects[0]);
   * // => false
   */

  function cloneDeep(value) {
    return baseClone$1(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$1);
  }

  var cloneDeep_1 = cloneDeep;

  var baseAssignValue = _baseAssignValue,
      eq$3 = eq_1;
  /**
   * This function is like `assignValue` except that it doesn't assign
   * `undefined` values.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */

  function assignMergeValue$2(object, key, value) {
    if (value !== undefined && !eq$3(object[key], value) || value === undefined && !(key in object)) {
      baseAssignValue(object, key, value);
    }
  }

  var _assignMergeValue = assignMergeValue$2;

  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */

  function createBaseFor$1(fromRight) {
    return function (object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];

        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }

      return object;
    };
  }

  var _createBaseFor = createBaseFor$1;

  var createBaseFor = _createBaseFor;
  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */

  var baseFor$1 = createBaseFor();
  var _baseFor = baseFor$1;

  var isArrayLike$2 = isArrayLike_1,
      isObjectLike$7 = isObjectLike_1;
  /**
   * This method is like `_.isArrayLike` except that it also checks if `value`
   * is an object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array-like object,
   *  else `false`.
   * @example
   *
   * _.isArrayLikeObject([1, 2, 3]);
   * // => true
   *
   * _.isArrayLikeObject(document.body.children);
   * // => true
   *
   * _.isArrayLikeObject('abc');
   * // => false
   *
   * _.isArrayLikeObject(_.noop);
   * // => false
   */

  function isArrayLikeObject$4(value) {
    return isObjectLike$7(value) && isArrayLike$2(value);
  }

  var isArrayLikeObject_1 = isArrayLikeObject$4;

  var baseGetTag$5 = _baseGetTag,
      getPrototype = _getPrototype,
      isObjectLike$6 = isObjectLike_1;
  /** `Object#toString` result references. */

  var objectTag$1 = '[object Object]';
  /** Used for built-in method references. */

  var funcProto = Function.prototype,
      objectProto$5 = Object.prototype;
  /** Used to resolve the decompiled source of functions. */

  var funcToString = funcProto.toString;
  /** Used to check objects for own properties. */

  var hasOwnProperty$6 = objectProto$5.hasOwnProperty;
  /** Used to infer the `Object` constructor. */

  var objectCtorString = funcToString.call(Object);
  /**
   * Checks if `value` is a plain object, that is, an object created by the
   * `Object` constructor or one with a `[[Prototype]]` of `null`.
   *
   * @static
   * @memberOf _
   * @since 0.8.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * _.isPlainObject(new Foo);
   * // => false
   *
   * _.isPlainObject([1, 2, 3]);
   * // => false
   *
   * _.isPlainObject({ 'x': 0, 'y': 0 });
   * // => true
   *
   * _.isPlainObject(Object.create(null));
   * // => true
   */

  function isPlainObject$3(value) {
    if (!isObjectLike$6(value) || baseGetTag$5(value) != objectTag$1) {
      return false;
    }

    var proto = getPrototype(value);

    if (proto === null) {
      return true;
    }

    var Ctor = hasOwnProperty$6.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }

  var isPlainObject_1 = isPlainObject$3;

  /**
   * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */

  function safeGet$2(object, key) {
    if (key === 'constructor' && typeof object[key] === 'function') {
      return;
    }

    if (key == '__proto__') {
      return;
    }

    return object[key];
  }

  var _safeGet = safeGet$2;

  var copyObject$2 = _copyObject,
      keysIn$2 = keysIn_1;
  /**
   * Converts `value` to a plain object flattening inherited enumerable string
   * keyed properties of `value` to own properties of the plain object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Object} Returns the converted plain object.
   * @example
   *
   * function Foo() {
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.assign({ 'a': 1 }, new Foo);
   * // => { 'a': 1, 'b': 2 }
   *
   * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
   * // => { 'a': 1, 'b': 2, 'c': 3 }
   */

  function toPlainObject$1(value) {
    return copyObject$2(value, keysIn$2(value));
  }

  var toPlainObject_1 = toPlainObject$1;

  var assignMergeValue$1 = _assignMergeValue,
      cloneBuffer = _cloneBuffer.exports,
      cloneTypedArray = _cloneTypedArray,
      copyArray = _copyArray,
      initCloneObject = _initCloneObject,
      isArguments$3 = isArguments_1,
      isArray$9 = isArray_1,
      isArrayLikeObject$3 = isArrayLikeObject_1,
      isBuffer$2 = isBuffer$5.exports,
      isFunction = isFunction_1,
      isObject$7 = isObject_1,
      isPlainObject$2 = isPlainObject_1,
      isTypedArray$2 = isTypedArray_1,
      safeGet$1 = _safeGet,
      toPlainObject = toPlainObject_1;
  /**
   * A specialized version of `baseMerge` for arrays and objects which performs
   * deep merges and tracks traversed objects enabling objects with circular
   * references to be merged.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {string} key The key of the value to merge.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} mergeFunc The function to merge values.
   * @param {Function} [customizer] The function to customize assigned values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */

  function baseMergeDeep$1(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet$1(object, key),
        srcValue = safeGet$1(source, key),
        stacked = stack.get(srcValue);

    if (stacked) {
      assignMergeValue$1(object, key, stacked);
      return;
    }

    var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
    var isCommon = newValue === undefined;

    if (isCommon) {
      var isArr = isArray$9(srcValue),
          isBuff = !isArr && isBuffer$2(srcValue),
          isTyped = !isArr && !isBuff && isTypedArray$2(srcValue);
      newValue = srcValue;

      if (isArr || isBuff || isTyped) {
        if (isArray$9(objValue)) {
          newValue = objValue;
        } else if (isArrayLikeObject$3(objValue)) {
          newValue = copyArray(objValue);
        } else if (isBuff) {
          isCommon = false;
          newValue = cloneBuffer(srcValue, true);
        } else if (isTyped) {
          isCommon = false;
          newValue = cloneTypedArray(srcValue, true);
        } else {
          newValue = [];
        }
      } else if (isPlainObject$2(srcValue) || isArguments$3(srcValue)) {
        newValue = objValue;

        if (isArguments$3(objValue)) {
          newValue = toPlainObject(objValue);
        } else if (!isObject$7(objValue) || isFunction(objValue)) {
          newValue = initCloneObject(srcValue);
        }
      } else {
        isCommon = false;
      }
    }

    if (isCommon) {
      // Recursively merge objects and arrays (susceptible to call stack limits).
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack['delete'](srcValue);
    }

    assignMergeValue$1(object, key, newValue);
  }

  var _baseMergeDeep = baseMergeDeep$1;

  var Stack$2 = _Stack,
      assignMergeValue = _assignMergeValue,
      baseFor = _baseFor,
      baseMergeDeep = _baseMergeDeep,
      isObject$6 = isObject_1,
      keysIn$1 = keysIn_1,
      safeGet = _safeGet;
  /**
   * The base implementation of `_.merge` without support for multiple sources.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} [customizer] The function to customize merged values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */

  function baseMerge$2(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }

    baseFor(source, function (srcValue, key) {
      stack || (stack = new Stack$2());

      if (isObject$6(srcValue)) {
        baseMergeDeep(object, source, key, srcIndex, baseMerge$2, customizer, stack);
      } else {
        var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;

        if (newValue === undefined) {
          newValue = srcValue;
        }

        assignMergeValue(object, key, newValue);
      }
    }, keysIn$1);
  }

  var _baseMerge = baseMerge$2;

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */

  function identity$3(value) {
    return value;
  }

  var identity_1 = identity$3;

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */

  function apply$2(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);

      case 1:
        return func.call(thisArg, args[0]);

      case 2:
        return func.call(thisArg, args[0], args[1]);

      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }

    return func.apply(thisArg, args);
  }

  var _apply = apply$2;

  var apply$1 = _apply;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeMax$3 = Math.max;
  /**
   * A specialized version of `baseRest` which transforms the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @param {Function} transform The rest array transform.
   * @returns {Function} Returns the new function.
   */

  function overRest$2(func, start, transform) {
    start = nativeMax$3(start === undefined ? func.length - 1 : start, 0);
    return function () {
      var args = arguments,
          index = -1,
          length = nativeMax$3(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }

      index = -1;
      var otherArgs = Array(start + 1);

      while (++index < start) {
        otherArgs[index] = args[index];
      }

      otherArgs[start] = transform(array);
      return apply$1(func, this, otherArgs);
    };
  }

  var _overRest = overRest$2;

  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */

  function constant$1(value) {
    return function () {
      return value;
    };
  }

  var constant_1 = constant$1;

  var constant = constant_1,
      defineProperty = _defineProperty$2,
      identity$2 = identity_1;
  /**
   * The base implementation of `setToString` without support for hot loop shorting.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */

  var baseSetToString$1 = !defineProperty ? identity$2 : function (func, string) {
    return defineProperty(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant(string),
      'writable': true
    });
  };
  var _baseSetToString = baseSetToString$1;

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeNow = Date.now;
  /**
   * Creates a function that'll short out and invoke `identity` instead
   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
   * milliseconds.
   *
   * @private
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new shortable function.
   */

  function shortOut$1(func) {
    var count = 0,
        lastCalled = 0;
    return function () {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;

      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }

      return func.apply(undefined, arguments);
    };
  }

  var _shortOut = shortOut$1;

  var baseSetToString = _baseSetToString,
      shortOut = _shortOut;
  /**
   * Sets the `toString` method of `func` to return `string`.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */

  var setToString$2 = shortOut(baseSetToString);
  var _setToString = setToString$2;

  var identity$1 = identity_1,
      overRest$1 = _overRest,
      setToString$1 = _setToString;
  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */

  function baseRest$5(func, start) {
    return setToString$1(overRest$1(func, start, identity$1), func + '');
  }

  var _baseRest = baseRest$5;

  var eq$2 = eq_1,
      isArrayLike$1 = isArrayLike_1,
      isIndex$2 = _isIndex,
      isObject$5 = isObject_1;
  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */

  function isIterateeCall$3(value, index, object) {
    if (!isObject$5(object)) {
      return false;
    }

    var type = _typeof$2(index);

    if (type == 'number' ? isArrayLike$1(object) && isIndex$2(index, object.length) : type == 'string' && index in object) {
      return eq$2(object[index], value);
    }

    return false;
  }

  var _isIterateeCall = isIterateeCall$3;

  var baseRest$4 = _baseRest,
      isIterateeCall$2 = _isIterateeCall;
  /**
   * Creates a function like `_.assign`.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @returns {Function} Returns the new assigner function.
   */

  function createAssigner$3(assigner) {
    return baseRest$4(function (object, sources) {
      var index = -1,
          length = sources.length,
          customizer = length > 1 ? sources[length - 1] : undefined,
          guard = length > 2 ? sources[2] : undefined;
      customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

      if (guard && isIterateeCall$2(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }

      object = Object(object);

      while (++index < length) {
        var source = sources[index];

        if (source) {
          assigner(object, source, index, customizer);
        }
      }

      return object;
    });
  }

  var _createAssigner = createAssigner$3;

  var baseMerge$1 = _baseMerge,
      createAssigner$2 = _createAssigner;
  /**
   * This method is like `_.merge` except that it accepts `customizer` which
   * is invoked to produce the merged values of the destination and source
   * properties. If `customizer` returns `undefined`, merging is handled by the
   * method instead. The `customizer` is invoked with six arguments:
   * (objValue, srcValue, key, object, source, stack).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} sources The source objects.
   * @param {Function} customizer The function to customize assigned values.
   * @returns {Object} Returns `object`.
   * @example
   *
   * function customizer(objValue, srcValue) {
   *   if (_.isArray(objValue)) {
   *     return objValue.concat(srcValue);
   *   }
   * }
   *
   * var object = { 'a': [1], 'b': [2] };
   * var other = { 'a': [3], 'b': [4] };
   *
   * _.mergeWith(object, other, customizer);
   * // => { 'a': [1, 3], 'b': [2, 4] }
   */

  var mergeWith = createAssigner$2(function (object, source, srcIndex, customizer) {
    baseMerge$1(object, source, srcIndex, customizer);
  });
  var mergeWith_1 = mergeWith;

  var baseMerge = _baseMerge,
      createAssigner$1 = _createAssigner;
  /**
   * This method is like `_.assign` except that it recursively merges own and
   * inherited enumerable string keyed properties of source objects into the
   * destination object. Source properties that resolve to `undefined` are
   * skipped if a destination value exists. Array and plain object properties
   * are merged recursively. Other objects and value types are overridden by
   * assignment. Source objects are applied from left to right. Subsequent
   * sources overwrite property assignments of previous sources.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 0.5.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = {
   *   'a': [{ 'b': 2 }, { 'd': 4 }]
   * };
   *
   * var other = {
   *   'a': [{ 'c': 3 }, { 'e': 5 }]
   * };
   *
   * _.merge(object, other);
   * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
   */

  var merge$2 = createAssigner$1(function (object, source, srcIndex) {
    baseMerge(object, source, srcIndex);
  });
  var merge_1 = merge$2;

  var defaultConfig = {
    classPrefix: "t",
    animation: {
      include: ["ripple", "expand", "fade"],
      exclude: []
    },
    calendar: {
      firstDayOfWeek: 1,
      fillWithZero: true,
      controllerConfig: void 0
    },
    dialog: {
      confirmBtnTheme: {
        "default": "primary",
        info: "primary",
        warning: "primary",
        danger: "primary",
        success: "primary"
      }
    },
    popconfirm: {
      confirmBtnTheme: {
        "default": "primary",
        warning: "primary",
        danger: "primary"
      }
    },
    table: {
      expandIcon: void 0,
      sortIcon: void 0,
      filterIcon: void 0,
      treeExpandAndFoldIcon: void 0,
      hideSortTips: false
    },
    select: {
      clearIcon: void 0
    },
    tree: {
      folderIcon: void 0
    },
    datePicker: {
      firstDayOfWeek: 1
    },
    steps: {
      errorIcon: void 0
    },
    tag: {
      closeIcon: void 0
    },
    form: {
      requiredMark: true
    }
  };

  var defaultZhLocale = {
    pagination: {
      itemsPerPage: "{size} \u6761/\u9875",
      jumpTo: "\u8DF3\u81F3",
      page: "\u9875",
      total: "\u5171 {total} \u9879\u6570\u636E"
    },
    cascader: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    calendar: {
      yearSelection: "{year} \u5E74",
      monthSelection: "{month} \u6708",
      yearRadio: "\u5E74",
      monthRadio: "\u6708",
      hideWeekend: "\u9690\u85CF\u5468\u672B",
      showWeekend: "\u663E\u793A\u5468\u672B",
      today: "\u4ECA\u5929",
      thisMonth: "\u672C\u6708",
      week: "\u4E00,\u4E8C,\u4E09,\u56DB,\u4E94,\u516D,\u65E5",
      cellMonth: "\u4E00\u6708,\u4E8C\u6708,\u4E09\u6708,\u56DB\u6708,\u4E94\u6708,\u516D\u6708,\u4E03\u6708,\u516B\u6708,\u4E5D\u6708,\u5341\u6708,\u5341\u4E00\u6708,\u5341\u4E8C\u6708"
    },
    transfer: {
      title: "{checked} / {total} \u9879",
      empty: "\u6682\u65E0\u6570\u636E",
      placeholder: "\u8BF7\u8F93\u5165\u5173\u952E\u8BCD\u641C\u7D22"
    },
    timePicker: {
      now: "\u6B64\u523B",
      confirm: "\u786E\u5B9A",
      anteMeridiem: "\u4E0A\u5348",
      postMeridiem: "\u4E0B\u5348",
      placeholder: "\u9009\u62E9\u65F6\u95F4"
    },
    dialog: {
      confirm: "\u786E\u8BA4",
      cancel: "\u53D6\u6D88"
    },
    drawer: {
      confirm: "\u786E\u8BA4",
      cancel: "\u53D6\u6D88"
    },
    popconfirm: {
      confirm: {
        content: "\u786E\u5B9A"
      },
      cancel: {
        content: "\u53D6\u6D88"
      }
    },
    table: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u6B63\u5728\u52A0\u8F7D\u4E2D\uFF0C\u8BF7\u7A0D\u540E",
      loadingMoreText: "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A",
      filterInputPlaceholder: "\u8BF7\u8F93\u5165\u5185\u5BB9\uFF08\u65E0\u9ED8\u8BA4\u503C\uFF09",
      sortAscendingOperationText: "\u70B9\u51FB\u5347\u5E8F",
      sortCancelOperationText: "\u70B9\u51FB\u53D6\u6D88\u6392\u5E8F",
      sortDescendingOperationText: "\u70B9\u51FB\u964D\u5E8F",
      clearFilterResultButtonText: "\u6E05\u7A7A\u7B5B\u9009",
      columnConfigButtonText: "\u5217\u914D\u7F6E",
      columnConfigTitleText: "\u8868\u683C\u5217\u914D\u7F6E",
      columnConfigDescriptionText: "\u8BF7\u9009\u62E9\u9700\u8981\u5728\u8868\u683C\u4E2D\u663E\u793A\u7684\u6570\u636E\u5217",
      confirmText: "\u786E\u8BA4",
      cancelText: "\u53D6\u6D88",
      resetText: "\u91CD\u7F6E",
      selectAllText: "\u5168\u9009",
      searchResultText: "\u641C\u7D22\u201C{result}\u201D\uFF0C\u627E\u5230 {count} \u6761\u7ED3\u679C"
    },
    select: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u52A0\u8F7D\u4E2D",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    tree: {
      empty: "\u6682\u65E0\u6570\u636E"
    },
    treeSelect: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u52A0\u8F7D\u4E2D",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    datePicker: {
      placeholder: {
        date: "\u8BF7\u9009\u62E9\u65E5\u671F",
        month: "\u8BF7\u9009\u62E9\u6708\u4EFD",
        year: "\u8BF7\u9009\u62E9\u5E74\u4EFD"
      },
      weekdays: ["\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D", "\u65E5"],
      months: ["1 \u6708", "2 \u6708", "3 \u6708", "4 \u6708", "5 \u6708", "6 \u6708", "7 \u6708", "8 \u6708", "9 \u6708", "10 \u6708", "11 \u6708", "12 \u6708"],
      rangeSeparator: " \u81F3 ",
      direction: "ltr",
      format: "YYYY-MM-DD",
      dayAriaLabel: "\u65E5",
      weekAbbreviation: "\u5468",
      yearAriaLabel: "\u5E74",
      monthAriaLabel: "\u6708",
      confirm: "\u786E\u5B9A",
      selectTime: "\u9009\u62E9\u65F6\u95F4",
      selectDate: "\u9009\u62E9\u65E5\u671F",
      nextYear: "\u4E0B\u4E00\u5E74",
      preYear: "\u4E0A\u4E00\u5E74",
      nextMonth: "\u4E0B\u4E2A\u6708",
      preMonth: "\u4E0A\u4E2A\u6708",
      preDecade: "\u4E0A\u4E2A\u5341\u5E74",
      nextDecade: "\u4E0B\u4E2A\u5341\u5E74",
      now: "\u5F53\u524D"
    },
    upload: {
      sizeLimitMessage: "\u56FE\u7247\u5927\u5C0F\u4E0D\u80FD\u8D85\u8FC7 {sizeLimit}",
      cancelUploadText: "\u53D6\u6D88\u4E0A\u4F20",
      triggerUploadText: {
        fileInput: "\u9009\u62E9\u6587\u4EF6",
        image: "\u70B9\u51FB\u4E0A\u4F20\u56FE\u7247",
        normal: "\u70B9\u51FB\u4E0A\u4F20",
        reupload: "\u91CD\u65B0\u4E0A\u4F20",
        continueUpload: "\u7EE7\u7EED\u4E0A\u4F20",
        "delete": "\u5220\u9664"
      },
      dragger: {
        dragDropText: "\u91CA\u653E\u9F20\u6807",
        draggingText: "\u62D6\u62FD\u5230\u6B64\u533A\u57DF",
        clickAndDragText: "\u70B9\u51FB\u4E0A\u65B9\u201C\u9009\u62E9\u6587\u4EF6\u201D\u6216\u5C06\u6587\u4EF6\u62D6\u62FD\u5230\u6B64\u533A\u57DF"
      },
      file: {
        fileNameText: "\u6587\u4EF6\u540D",
        fileSizeText: "\u6587\u4EF6\u5927\u5C0F",
        fileStatusText: "\u72B6\u6001",
        fileOperationText: "\u64CD\u4F5C",
        fileOperationDateText: "\u4E0A\u4F20\u65E5\u671F"
      },
      progress: {
        uploadingText: "\u4E0A\u4F20\u4E2D",
        waitingText: "\u5F85\u4E0A\u4F20",
        failText: "\u4E0A\u4F20\u5931\u8D25",
        successText: "\u4E0A\u4F20\u6210\u529F"
      }
    },
    form: {
      errorMessage: {
        date: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        url: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        required: "${name}\u5FC5\u586B",
        max: "${name}\u5B57\u7B26\u957F\u5EA6\u4E0D\u80FD\u8D85\u8FC7 ${validate} \u4E2A\u5B57\u7B26\uFF0C\u4E00\u4E2A\u4E2D\u6587\u7B49\u4E8E\u4E24\u4E2A\u5B57\u7B26",
        min: "${name}\u5B57\u7B26\u957F\u5EA6\u4E0D\u80FD\u5C11\u4E8E ${validate} \u4E2A\u5B57\u7B26\uFF0C\u4E00\u4E2A\u4E2D\u6587\u7B49\u4E8E\u4E24\u4E2A\u5B57\u7B26",
        len: "${name}\u5B57\u7B26\u957F\u5EA6\u5FC5\u987B\u662F ${validate}",
        "enum": "${name}\u53EA\u80FD\u662F${validate}\u7B49",
        idcard: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        telnumber: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        pattern: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        validator: "${name}\u4E0D\u7B26\u5408\u8981\u6C42",
        "boolean": "${name}\u6570\u636E\u7C7B\u578B\u5FC5\u987B\u662F\u5E03\u5C14\u7C7B\u578B",
        number: "${name}\u5FC5\u987B\u662F\u6570\u5B57"
      }
    },
    input: {
      placeholder: "\u8BF7\u8F93\u5165"
    },
    list: {
      loadingText: "\u6B63\u5728\u52A0\u8F7D\u4E2D\uFF0C\u8BF7\u7A0D\u7B49",
      loadingMoreText: "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A"
    },
    alert: {
      expandText: "\u5C55\u5F00\u66F4\u591A",
      collapseText: "\u6536\u8D77"
    },
    anchor: {
      copySuccessText: "\u94FE\u63A5\u590D\u5236\u6210\u529F",
      copyText: "\u590D\u5236\u94FE\u63A5"
    },
    colorPicker: {
      swatchColorTitle: "\u7CFB\u7EDF\u9884\u8BBE\u989C\u8272",
      recentColorTitle: "\u6700\u8FD1\u4F7F\u7528\u989C\u8272",
      clearConfirmText: "\u786E\u5B9A\u6E05\u7A7A\u6700\u8FD1\u4F7F\u7528\u7684\u989C\u8272\u5417\uFF1F"
    }
  };

  var EAnimationType = /* @__PURE__ */function (EAnimationType2) {
    EAnimationType2["ripple"] = "ripple";
    EAnimationType2["expand"] = "expand";
    EAnimationType2["fade"] = "fade";
    return EAnimationType2;
  }(EAnimationType || {});
  var defaultGlobalConfig = merge_1(defaultConfig, defaultZhLocale);

  var merge$1 = function merge(defaultGlobalConfig2, injectConfig) {
    return mergeWith_1(defaultGlobalConfig2, injectConfig, function (objValue, srcValue) {
      if (Array.isArray(objValue)) {
        return srcValue;
      }
    });
  };
  function useConfig(componentName) {
    var globalConfig = vue.inject("globalConfig", /* @__PURE__ */Object.create(null));
    var mergedGlobalConfig = vue.computed(function () {
      var mergedGlobalConfig2 = merge$1(cloneDeep_1(defaultGlobalConfig), vue.unref(globalConfig));
      return mergedGlobalConfig2;
    });
    var global = vue.computed(function () {
      return mergedGlobalConfig.value[componentName];
    });
    var classPrefix = vue.computed(function () {
      return mergedGlobalConfig.value.classPrefix;
    });

    var t = function t(pattern) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var data = args[0];

      if (typeof pattern === "string") {
        if (!data) return pattern;
        var regular = /\{\s*([\w-]+)\s*\}/g;
        var translated = pattern.replace(regular, function (match, key) {
          if (data) {
            return String(data[key]);
          }

          return "";
        });
        return translated;
      }

      if (typeof pattern === "function") {
        if (!args.length) return pattern(vue.h);
        return pattern.apply(void 0, args);
      }

      return "";
    };

    return {
      t: t,
      global: global,
      classPrefix: classPrefix
    };
  }

  function usePrefixClass(componentName) {
    var _useConfig = useConfig("classPrefix"),
        classPrefix = _useConfig.classPrefix;

    return vue.computed(function () {
      return componentName ? "".concat(classPrefix.value, "-").concat(componentName) : classPrefix.value;
    });
  }
  function useCommonClassName$2() {
    var _useConfig2 = useConfig("classPrefix"),
        classPrefix = _useConfig2.classPrefix;

    return {
      SIZE: vue.computed(function () {
        return {
          small: "".concat(classPrefix.value, "-size-s"),
          medium: "".concat(classPrefix.value, "-size-m"),
          large: "".concat(classPrefix.value, "-size-l"),
          "default": "",
          xs: "".concat(classPrefix.value, "-size-xs"),
          xl: "".concat(classPrefix.value, "-size-xl"),
          block: "".concat(classPrefix.value, "-size-full-width")
        };
      }),
      STATUS: vue.computed(function () {
        return {
          loading: "".concat(classPrefix.value, "-is-loading"),
          loadMore: "".concat(classPrefix.value, "-is-load-more"),
          disabled: "".concat(classPrefix.value, "-is-disabled"),
          focused: "".concat(classPrefix.value, "-is-focused"),
          success: "".concat(classPrefix.value, "-is-success"),
          error: "".concat(classPrefix.value, "-is-error"),
          warning: "".concat(classPrefix.value, "-is-warning"),
          selected: "".concat(classPrefix.value, "-is-selected"),
          active: "".concat(classPrefix.value, "-is-active"),
          checked: "".concat(classPrefix.value, "-is-checked"),
          current: "".concat(classPrefix.value, "-is-current"),
          hidden: "".concat(classPrefix.value, "-is-hidden"),
          visible: "".concat(classPrefix.value, "-is-visible"),
          expanded: "".concat(classPrefix.value, "-is-expanded"),
          indeterminate: "".concat(classPrefix.value, "-is-indeterminate")
        };
      })
    };
  }

  var GradientIcon = vue.defineComponent({
    name: "TLoadingGradient",
    setup: function setup() {
      var classPrefix = usePrefixClass();
      vue.onMounted(function () {
        var circleElem = vue.getCurrentInstance().refs.circle;
        circleAdapter(circleElem);
      });
      return {
        classPrefix: classPrefix
      };
    },
    render: function render() {
      var classPrefix = this.classPrefix;
      var name = "".concat(classPrefix, "-loading__gradient");
      var classes = [name, "".concat(classPrefix, "-icon-loading")];
      return vue.createVNode("svg", {
        "class": classes,
        "viewBox": "0 0 14 14",
        "version": "1.1",
        "width": "1em",
        "height": "1em",
        "xmlns": "http://www.w3.org/2000/svg"
      }, [vue.createVNode("foreignObject", {
        "x": "1",
        "y": "1",
        "width": "12",
        "height": "12"
      }, [vue.createVNode("div", {
        "class": "".concat(name, "-conic"),
        "ref": "circle"
      }, null)])]);
    }
  });

  var raf$2 = {exports: {}};

  var performanceNow = {exports: {}};

  (function () {
    var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

    if (typeof performance !== "undefined" && performance !== null && performance.now) {
      performanceNow.exports = function () {
        return performance.now();
      };
    } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
      performanceNow.exports = function () {
        return (getNanoSeconds() - nodeLoadTime) / 1e6;
      };

      hrtime = process.hrtime;

      getNanoSeconds = function getNanoSeconds() {
        var hr;
        hr = hrtime();
        return hr[0] * 1e9 + hr[1];
      };

      moduleLoadTime = getNanoSeconds();
      upTime = process.uptime() * 1e9;
      nodeLoadTime = moduleLoadTime - upTime;
    } else if (Date.now) {
      performanceNow.exports = function () {
        return Date.now() - loadTime;
      };

      loadTime = Date.now();
    } else {
      performanceNow.exports = function () {
        return new Date().getTime() - loadTime;
      };

      loadTime = new Date().getTime();
    }
  }).call(commonjsGlobal);

  var now$2 = performanceNow.exports,
      root$1 = typeof window === 'undefined' ? commonjsGlobal : window,
      vendors = ['moz', 'webkit'],
      suffix = 'AnimationFrame',
      raf = root$1['request' + suffix],
      caf = root$1['cancel' + suffix] || root$1['cancelRequest' + suffix];

  for (var i = 0; !raf && i < vendors.length; i++) {
    raf = root$1[vendors[i] + 'Request' + suffix];
    caf = root$1[vendors[i] + 'Cancel' + suffix] || root$1[vendors[i] + 'CancelRequest' + suffix];
  } // Some versions of FF have rAF but not cAF


  if (!raf || !caf) {
    var last$2 = 0,
        id = 0,
        queue = [],
        frameDuration = 1000 / 60;

    raf = function raf(callback) {
      if (queue.length === 0) {
        var _now = now$2(),
            next = Math.max(0, frameDuration - (_now - last$2));

        last$2 = next + _now;
        setTimeout(function () {
          var cp = queue.slice(0); // Clear queue here to prevent
          // callbacks from appending listeners
          // to the current frame's queue

          queue.length = 0;

          for (var i = 0; i < cp.length; i++) {
            if (!cp[i].cancelled) {
              try {
                cp[i].callback(last$2);
              } catch (e) {
                setTimeout(function () {
                  throw e;
                }, 0);
              }
            }
          }
        }, Math.round(next));
      }

      queue.push({
        handle: ++id,
        callback: callback,
        cancelled: false
      });
      return id;
    };

    caf = function caf(handle) {
      for (var i = 0; i < queue.length; i++) {
        if (queue[i].handle === handle) {
          queue[i].cancelled = true;
        }
      }
    };
  }

  raf$2.exports = function (fn) {
    // Wrap in a new function to prevent
    // `cancel` potentially being assigned
    // to the native rAF function
    return raf.call(root$1, fn);
  };

  raf$2.exports.cancel = function () {
    caf.apply(root$1, arguments);
  };

  raf$2.exports.polyfill = function (object) {
    if (!object) {
      object = root$1;
    }

    object.requestAnimationFrame = raf;
    object.cancelAnimationFrame = caf;
  };

  var raf$1 = raf$2.exports;

  var baseGetTag$4 = _baseGetTag,
      isArray$8 = isArray_1,
      isObjectLike$5 = isObjectLike_1;
  /** `Object#toString` result references. */

  var stringTag$1 = '[object String]';
  /**
   * Checks if `value` is classified as a `String` primitive or object.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a string, else `false`.
   * @example
   *
   * _.isString('abc');
   * // => true
   *
   * _.isString(1);
   * // => false
   */

  function isString(value) {
    return typeof value == 'string' || !isArray$8(value) && isObjectLike$5(value) && baseGetTag$4(value) == stringTag$1;
  }

  var isString_1 = isString;

  var easeInOutCubic = function easeInOutCubic(current, start, end, duration) {
    var change = (end - start) / 2;
    var time = current / (duration / 2);

    if (time < 1) {
      return change * time * time * time + start;
    }

    time -= 2;
    return change * (time * time * time + 2) + start;
  };

  var isServer$1 = typeof window === "undefined";

  var trim = function trim(str) {
    return (str || "").replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, "");
  };

  var on$1 = function () {
    if (!isServer$1 && document.addEventListener) {
      return function (element, event, handler) {
        if (element && event && handler) {
          element.addEventListener(event, handler, false);
        }
      };
    }

    return function (element, event, handler) {
      if (element && event && handler) {
        element.attachEvent("on".concat(event), handler);
      }
    };
  }();
  var off$1 = function () {
    if (!isServer$1 && document.removeEventListener) {
      return function (element, event, handler) {
        if (element && event) {
          element.removeEventListener(event, handler, false);
        }
      };
    }

    return function (element, event, handler) {
      if (element && event) {
        element.detachEvent("on".concat(event), handler);
      }
    };
  }();
  function once(element, event, handler) {
    var handlerFn = typeof handler === "function" ? handler : handler.handleEvent;

    var callback = function callback(evt) {
      handlerFn(evt);
      off$1(element, event, callback);
    };

    on$1(element, event, callback);
  }
  function hasClass(el, cls) {
    if (!el || !cls) return false;
    if (cls.indexOf(" ") !== -1) throw new Error("className should not contain space.");

    if (el.classList) {
      return el.classList.contains(cls);
    }

    return " ".concat(el.className, " ").indexOf(" ".concat(cls, " ")) > -1;
  }
  function addClass(el, cls) {
    if (!el) return;
    var curClass = el.className;
    var classes = (cls || "").split(" ");

    for (var i = 0, j = classes.length; i < j; i++) {
      var clsName = classes[i];
      if (!clsName) continue;

      if (el.classList) {
        el.classList.add(clsName);
      } else if (!hasClass(el, clsName)) {
        curClass += " ".concat(clsName);
      }
    }

    if (!el.classList) {
      el.className = curClass;
    }
  }
  function removeClass(el, cls) {
    if (!el || !cls) return;
    var classes = cls.split(" ");
    var curClass = " ".concat(el.className, " ");

    for (var i = 0, j = classes.length; i < j; i++) {
      var clsName = classes[i];
      if (!clsName) continue;

      if (el.classList) {
        el.classList.remove(clsName);
      } else if (hasClass(el, clsName)) {
        curClass = curClass.replace(" ".concat(clsName, " "), " ");
      }
    }

    if (!el.classList) {
      el.className = trim(curClass);
    }
  }
  var getAttach = function getAttach(node) {
    var attachNode = typeof node === "function" ? node() : node;

    if (!attachNode) {
      return document.body;
    }

    if (isString_1(attachNode)) {
      return document.querySelector(attachNode);
    }

    if (attachNode instanceof HTMLElement) {
      return attachNode;
    }

    return document.body;
  };
  var getScrollContainer = function getScrollContainer() {
    var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "body";

    if (isString_1(container)) {
      return document.querySelector(container);
    }

    if (typeof container === "function") {
      return container();
    }

    return container;
  };

  function isWindow(obj) {
    return obj && obj === obj.window;
  }

  function getScroll(target, isLeft) {
    if (isServer$1 || !target) {
      return 0;
    }

    var method = isLeft ? "scrollLeft" : "scrollTop";
    var result = 0;

    if (isWindow(target)) {
      result = target[isLeft ? "pageXOffset" : "pageYOffset"];
    } else if (target instanceof Document) {
      result = target.documentElement[method];
    } else if (target) {
      result = target[method];
    }

    return result;
  }
  function scrollTo(target, opt) {
    var _opt$container = opt.container,
        container = _opt$container === void 0 ? window : _opt$container,
        _opt$duration = opt.duration,
        duration = _opt$duration === void 0 ? 450 : _opt$duration,
        _opt$easing = opt.easing,
        easing = _opt$easing === void 0 ? easeInOutCubic : _opt$easing;
    var scrollTop = getScroll(container);
    var startTime = Date.now();
    return new Promise(function (res) {
      var fnc = function fnc() {
        var timestamp = Date.now();
        var time = timestamp - startTime;
        var nextScrollTop = easing(Math.min(time, duration), scrollTop, target, duration);

        if (isWindow(container)) {
          container.scrollTo(window.pageXOffset, nextScrollTop);
        } else if (container instanceof Document || container.constructor.name === "HTMLDocument") {
          container.documentElement.scrollTop = nextScrollTop;
        } else {
          container.scrollTop = nextScrollTop;
        }

        if (time < duration) {
          raf$1(fnc);
        } else {
          raf$1(res);
        }
      };

      raf$1(fnc);
    });
  }
  var isNodeOverflow = function isNodeOverflow(ele) {
    var _ele$clientWidth = ele.clientWidth,
        clientWidth = _ele$clientWidth === void 0 ? 0 : _ele$clientWidth,
        _ele$scrollWidth = ele.scrollWidth,
        scrollWidth = _ele$scrollWidth === void 0 ? 0 : _ele$scrollWidth;
    return scrollWidth > clientWidth;
  };
  var scrollSelectedIntoView = function scrollSelectedIntoView(parentEle, selected) {
    if (isServer$1) return;

    if (!selected || selected.offsetParent !== parentEle) {
      parentEle.scrollTop = 0;
      return;
    }

    var selectedTop = selected.offsetTop;
    var selectedBottom = selectedTop + selected.offsetHeight;
    var parentScrollTop = parentEle.scrollTop;
    var parentViewBottom = parentScrollTop + parentEle.clientHeight;

    if (selectedTop < parentScrollTop) {
      parentEle.scrollTop = selectedTop;
    } else if (selectedBottom > parentViewBottom) {
      parentEle.scrollTop = selectedBottom - parentEle.clientHeight;
    }
  };

  var baseKeys = _baseKeys,
      getTag$1 = _getTag,
      isArguments$2 = isArguments_1,
      isArray$7 = isArray_1,
      isArrayLike = isArrayLike_1,
      isBuffer$1 = isBuffer$5.exports,
      isPrototype = _isPrototype,
      isTypedArray$1 = isTypedArray_1;
  /** `Object#toString` result references. */

  var mapTag$1 = '[object Map]',
      setTag$1 = '[object Set]';
  /** Used for built-in method references. */

  var objectProto$4 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$5 = objectProto$4.hasOwnProperty;
  /**
   * Checks if `value` is an empty object, collection, map, or set.
   *
   * Objects are considered empty if they have no own enumerable string keyed
   * properties.
   *
   * Array-like values such as `arguments` objects, arrays, buffers, strings, or
   * jQuery-like collections are considered empty if they have a `length` of `0`.
   * Similarly, maps and sets are considered empty if they have a `size` of `0`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is empty, else `false`.
   * @example
   *
   * _.isEmpty(null);
   * // => true
   *
   * _.isEmpty(true);
   * // => true
   *
   * _.isEmpty(1);
   * // => true
   *
   * _.isEmpty([1, 2, 3]);
   * // => false
   *
   * _.isEmpty({ 'a': 1 });
   * // => false
   */

  function isEmpty(value) {
    if (value == null) {
      return true;
    }

    if (isArrayLike(value) && (isArray$7(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer$1(value) || isTypedArray$1(value) || isArguments$2(value))) {
      return !value.length;
    }

    var tag = getTag$1(value);

    if (tag == mapTag$1 || tag == setTag$1) {
      return !value.size;
    }

    if (isPrototype(value)) {
      return !baseKeys(value).length;
    }

    for (var key in value) {
      if (hasOwnProperty$5.call(value, key)) {
        return false;
      }
    }

    return true;
  }

  var isEmpty_1 = isEmpty;

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */

  function arrayMap$6(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }

    return result;
  }

  var _arrayMap = arrayMap$6;

  var baseGetTag$3 = _baseGetTag,
      isObjectLike$4 = isObjectLike_1;
  /** `Object#toString` result references. */

  var symbolTag$1 = '[object Symbol]';
  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */

  function isSymbol$4(value) {
    return _typeof$2(value) == 'symbol' || isObjectLike$4(value) && baseGetTag$3(value) == symbolTag$1;
  }

  var isSymbol_1 = isSymbol$4;

  var _Symbol$2 = _Symbol$6,
      arrayMap$5 = _arrayMap,
      isArray$6 = isArray_1,
      isSymbol$3 = isSymbol_1;
  /** Used as references for various `Number` constants. */

  var INFINITY$2 = 1 / 0;
  /** Used to convert symbols to primitives and strings. */

  var symbolProto$1 = _Symbol$2 ? _Symbol$2.prototype : undefined,
      symbolToString = symbolProto$1 ? symbolProto$1.toString : undefined;
  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */

  function baseToString$1(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }

    if (isArray$6(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return arrayMap$5(value, baseToString$1) + '';
    }

    if (isSymbol$3(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY$2 ? '-0' : result;
  }

  var _baseToString = baseToString$1;

  var baseToString = _baseToString;
  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */

  function toString$8(value) {
    return value == null ? '' : baseToString(value);
  }

  var toString_1 = toString$8;

  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */

  function baseSlice$3(array, start, end) {
    var index = -1,
        length = array.length;

    if (start < 0) {
      start = -start > length ? 0 : length + start;
    }

    end = end > length ? length : end;

    if (end < 0) {
      end += length;
    }

    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);

    while (++index < length) {
      result[index] = array[index + start];
    }

    return result;
  }

  var _baseSlice = baseSlice$3;

  var baseSlice$2 = _baseSlice;
  /**
   * Casts `array` to a slice if it's needed.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {number} start The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the cast slice.
   */

  function castSlice$1(array, start, end) {
    var length = array.length;
    end = end === undefined ? length : end;
    return !start && end >= length ? array : baseSlice$2(array, start, end);
  }

  var _castSlice = castSlice$1;

  /** Used to compose unicode character classes. */
  var rsAstralRange$2 = "\\ud800-\\udfff",
      rsComboMarksRange$3 = "\\u0300-\\u036f",
      reComboHalfMarksRange$3 = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange$3 = "\\u20d0-\\u20ff",
      rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
      rsVarRange$2 = "\\ufe0e\\ufe0f";
  /** Used to compose unicode capture groups. */

  var rsZWJ$2 = "\\u200d";
  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */

  var reHasUnicode = RegExp('[' + rsZWJ$2 + rsAstralRange$2 + rsComboRange$3 + rsVarRange$2 + ']');
  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */

  function hasUnicode$2(string) {
    return reHasUnicode.test(string);
  }

  var _hasUnicode = hasUnicode$2;

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

  function asciiToArray$1(string) {
    return string.split('');
  }

  var _asciiToArray = asciiToArray$1;

  /** Used to compose unicode character classes. */
  var rsAstralRange$1 = "\\ud800-\\udfff",
      rsComboMarksRange$2 = "\\u0300-\\u036f",
      reComboHalfMarksRange$2 = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange$2 = "\\u20d0-\\u20ff",
      rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2,
      rsVarRange$1 = "\\ufe0e\\ufe0f";
  /** Used to compose unicode capture groups. */

  var rsAstral = '[' + rsAstralRange$1 + ']',
      rsCombo$2 = '[' + rsComboRange$2 + ']',
      rsFitz$1 = "\\ud83c[\\udffb-\\udfff]",
      rsModifier$1 = '(?:' + rsCombo$2 + '|' + rsFitz$1 + ')',
      rsNonAstral$1 = '[^' + rsAstralRange$1 + ']',
      rsRegional$1 = "(?:\\ud83c[\\udde6-\\uddff]){2}",
      rsSurrPair$1 = "[\\ud800-\\udbff][\\udc00-\\udfff]",
      rsZWJ$1 = "\\u200d";
  /** Used to compose unicode regexes. */

  var reOptMod$1 = rsModifier$1 + '?',
      rsOptVar$1 = '[' + rsVarRange$1 + ']?',
      rsOptJoin$1 = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
      rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
      rsSymbol = '(?:' + [rsNonAstral$1 + rsCombo$2 + '?', rsCombo$2, rsRegional$1, rsSurrPair$1, rsAstral].join('|') + ')';
  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */

  var reUnicode = RegExp(rsFitz$1 + '(?=' + rsFitz$1 + ')|' + rsSymbol + rsSeq$1, 'g');
  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

  function unicodeToArray$1(string) {
    return string.match(reUnicode) || [];
  }

  var _unicodeToArray = unicodeToArray$1;

  var asciiToArray = _asciiToArray,
      hasUnicode$1 = _hasUnicode,
      unicodeToArray = _unicodeToArray;
  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

  function stringToArray$1(string) {
    return hasUnicode$1(string) ? unicodeToArray(string) : asciiToArray(string);
  }

  var _stringToArray = stringToArray$1;

  var castSlice = _castSlice,
      hasUnicode = _hasUnicode,
      stringToArray = _stringToArray,
      toString$7 = toString_1;
  /**
   * Creates a function like `_.lowerFirst`.
   *
   * @private
   * @param {string} methodName The name of the `String` case method to use.
   * @returns {Function} Returns the new case function.
   */

  function createCaseFirst$1(methodName) {
    return function (string) {
      string = toString$7(string);
      var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
      var chr = strSymbols ? strSymbols[0] : string.charAt(0);
      var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
      return chr[methodName]() + trailing;
    };
  }

  var _createCaseFirst = createCaseFirst$1;

  var createCaseFirst = _createCaseFirst;
  /**
   * Converts the first character of `string` to upper case.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.upperFirst('fred');
   * // => 'Fred'
   *
   * _.upperFirst('FRED');
   * // => 'FRED'
   */

  var upperFirst$1 = createCaseFirst('toUpperCase');
  var upperFirst_1 = upperFirst$1;

  var toString$6 = toString_1,
      upperFirst = upperFirst_1;
  /**
   * Converts the first character of `string` to upper case and the remaining
   * to lower case.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to capitalize.
   * @returns {string} Returns the capitalized string.
   * @example
   *
   * _.capitalize('FRED');
   * // => 'Fred'
   */

  function capitalize$1(string) {
    return upperFirst(toString$6(string).toLowerCase());
  }

  var capitalize_1 = capitalize$1;

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */

  function arrayReduce$1(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }

    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }

    return accumulator;
  }

  var _arrayReduce = arrayReduce$1;

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */

  function basePropertyOf$2(object) {
    return function (key) {
      return object == null ? undefined : object[key];
    };
  }

  var _basePropertyOf = basePropertyOf$2;

  var basePropertyOf$1 = _basePropertyOf;
  /** Used to map Latin Unicode letters to basic Latin letters. */

  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',
    '\xc1': 'A',
    '\xc2': 'A',
    '\xc3': 'A',
    '\xc4': 'A',
    '\xc5': 'A',
    '\xe0': 'a',
    '\xe1': 'a',
    '\xe2': 'a',
    '\xe3': 'a',
    '\xe4': 'a',
    '\xe5': 'a',
    '\xc7': 'C',
    '\xe7': 'c',
    '\xd0': 'D',
    '\xf0': 'd',
    '\xc8': 'E',
    '\xc9': 'E',
    '\xca': 'E',
    '\xcb': 'E',
    '\xe8': 'e',
    '\xe9': 'e',
    '\xea': 'e',
    '\xeb': 'e',
    '\xcc': 'I',
    '\xcd': 'I',
    '\xce': 'I',
    '\xcf': 'I',
    '\xec': 'i',
    '\xed': 'i',
    '\xee': 'i',
    '\xef': 'i',
    '\xd1': 'N',
    '\xf1': 'n',
    '\xd2': 'O',
    '\xd3': 'O',
    '\xd4': 'O',
    '\xd5': 'O',
    '\xd6': 'O',
    '\xd8': 'O',
    '\xf2': 'o',
    '\xf3': 'o',
    '\xf4': 'o',
    '\xf5': 'o',
    '\xf6': 'o',
    '\xf8': 'o',
    '\xd9': 'U',
    '\xda': 'U',
    '\xdb': 'U',
    '\xdc': 'U',
    '\xf9': 'u',
    '\xfa': 'u',
    '\xfb': 'u',
    '\xfc': 'u',
    '\xdd': 'Y',
    '\xfd': 'y',
    '\xff': 'y',
    '\xc6': 'Ae',
    '\xe6': 'ae',
    '\xde': 'Th',
    '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    "\u0100": 'A',
    "\u0102": 'A',
    "\u0104": 'A',
    "\u0101": 'a',
    "\u0103": 'a',
    "\u0105": 'a',
    "\u0106": 'C',
    "\u0108": 'C',
    "\u010A": 'C',
    "\u010C": 'C',
    "\u0107": 'c',
    "\u0109": 'c',
    "\u010B": 'c',
    "\u010D": 'c',
    "\u010E": 'D',
    "\u0110": 'D',
    "\u010F": 'd',
    "\u0111": 'd',
    "\u0112": 'E',
    "\u0114": 'E',
    "\u0116": 'E',
    "\u0118": 'E',
    "\u011A": 'E',
    "\u0113": 'e',
    "\u0115": 'e',
    "\u0117": 'e',
    "\u0119": 'e',
    "\u011B": 'e',
    "\u011C": 'G',
    "\u011E": 'G',
    "\u0120": 'G',
    "\u0122": 'G',
    "\u011D": 'g',
    "\u011F": 'g',
    "\u0121": 'g',
    "\u0123": 'g',
    "\u0124": 'H',
    "\u0126": 'H',
    "\u0125": 'h',
    "\u0127": 'h',
    "\u0128": 'I',
    "\u012A": 'I',
    "\u012C": 'I',
    "\u012E": 'I',
    "\u0130": 'I',
    "\u0129": 'i',
    "\u012B": 'i',
    "\u012D": 'i',
    "\u012F": 'i',
    "\u0131": 'i',
    "\u0134": 'J',
    "\u0135": 'j',
    "\u0136": 'K',
    "\u0137": 'k',
    "\u0138": 'k',
    "\u0139": 'L',
    "\u013B": 'L',
    "\u013D": 'L',
    "\u013F": 'L',
    "\u0141": 'L',
    "\u013A": 'l',
    "\u013C": 'l',
    "\u013E": 'l',
    "\u0140": 'l',
    "\u0142": 'l',
    "\u0143": 'N',
    "\u0145": 'N',
    "\u0147": 'N',
    "\u014A": 'N',
    "\u0144": 'n',
    "\u0146": 'n',
    "\u0148": 'n',
    "\u014B": 'n',
    "\u014C": 'O',
    "\u014E": 'O',
    "\u0150": 'O',
    "\u014D": 'o',
    "\u014F": 'o',
    "\u0151": 'o',
    "\u0154": 'R',
    "\u0156": 'R',
    "\u0158": 'R',
    "\u0155": 'r',
    "\u0157": 'r',
    "\u0159": 'r',
    "\u015A": 'S',
    "\u015C": 'S',
    "\u015E": 'S',
    "\u0160": 'S',
    "\u015B": 's',
    "\u015D": 's',
    "\u015F": 's',
    "\u0161": 's',
    "\u0162": 'T',
    "\u0164": 'T',
    "\u0166": 'T',
    "\u0163": 't',
    "\u0165": 't',
    "\u0167": 't',
    "\u0168": 'U',
    "\u016A": 'U',
    "\u016C": 'U',
    "\u016E": 'U',
    "\u0170": 'U',
    "\u0172": 'U',
    "\u0169": 'u',
    "\u016B": 'u',
    "\u016D": 'u',
    "\u016F": 'u',
    "\u0171": 'u',
    "\u0173": 'u',
    "\u0174": 'W',
    "\u0175": 'w',
    "\u0176": 'Y',
    "\u0177": 'y',
    "\u0178": 'Y',
    "\u0179": 'Z',
    "\u017B": 'Z',
    "\u017D": 'Z',
    "\u017A": 'z',
    "\u017C": 'z',
    "\u017E": 'z',
    "\u0132": 'IJ',
    "\u0133": 'ij',
    "\u0152": 'Oe',
    "\u0153": 'oe',
    "\u0149": "'n",
    "\u017F": 's'
  };
  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */

  var deburrLetter$1 = basePropertyOf$1(deburredLetters);
  var _deburrLetter = deburrLetter$1;

  var deburrLetter = _deburrLetter,
      toString$5 = toString_1;
  /** Used to match Latin Unicode letters (excluding mathematical operators). */

  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
  /** Used to compose unicode character classes. */

  var rsComboMarksRange$1 = "\\u0300-\\u036f",
      reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange$1 = "\\u20d0-\\u20ff",
      rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;
  /** Used to compose unicode capture groups. */

  var rsCombo$1 = '[' + rsComboRange$1 + ']';
  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */

  var reComboMark = RegExp(rsCombo$1, 'g');
  /**
   * Deburrs `string` by converting
   * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
   * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
   * letters to basic Latin letters and removing
   * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to deburr.
   * @returns {string} Returns the deburred string.
   * @example
   *
   * _.deburr('déjà vu');
   * // => 'deja vu'
   */

  function deburr$1(string) {
    string = toString$5(string);
    return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
  }

  var deburr_1 = deburr$1;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */

  function asciiWords$1(string) {
    return string.match(reAsciiWord) || [];
  }

  var _asciiWords = asciiWords$1;

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */

  function hasUnicodeWord$1(string) {
    return reHasUnicodeWord.test(string);
  }

  var _hasUnicodeWord = hasUnicodeWord$1;

  /** Used to compose unicode character classes. */
  var rsAstralRange = "\\ud800-\\udfff",
      rsComboMarksRange = "\\u0300-\\u036f",
      reComboHalfMarksRange = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange = "\\u20d0-\\u20ff",
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = "\\u2700-\\u27bf",
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = "\\u2000-\\u206f",
      rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = "\\ufe0e\\ufe0f",
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
  /** Used to compose unicode capture groups. */

  var rsApos$1 = "['\u2019]",
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = "\\ud83c[\\udffb-\\udfff]",
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
      rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = "\\u200d";
  /** Used to compose unicode regexes. */

  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos$1 + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos$1 + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;
  /** Used to match complex or compound words. */

  var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');
  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */

  function unicodeWords$1(string) {
    return string.match(reUnicodeWord) || [];
  }

  var _unicodeWords = unicodeWords$1;

  var asciiWords = _asciiWords,
      hasUnicodeWord = _hasUnicodeWord,
      toString$4 = toString_1,
      unicodeWords = _unicodeWords;
  /**
   * Splits `string` into an array of its words.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to inspect.
   * @param {RegExp|string} [pattern] The pattern to match words.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the words of `string`.
   * @example
   *
   * _.words('fred, barney, & pebbles');
   * // => ['fred', 'barney', 'pebbles']
   *
   * _.words('fred, barney, & pebbles', /[^, ]+/g);
   * // => ['fred', 'barney', '&', 'pebbles']
   */

  function words$1(string, pattern, guard) {
    string = toString$4(string);
    pattern = guard ? undefined : pattern;

    if (pattern === undefined) {
      return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
    }

    return string.match(pattern) || [];
  }

  var words_1 = words$1;

  var arrayReduce = _arrayReduce,
      deburr = deburr_1,
      words = words_1;
  /** Used to compose unicode capture groups. */

  var rsApos = "['\u2019]";
  /** Used to match apostrophes. */

  var reApos = RegExp(rsApos, 'g');
  /**
   * Creates a function like `_.camelCase`.
   *
   * @private
   * @param {Function} callback The function to combine each word.
   * @returns {Function} Returns the new compounder function.
   */

  function createCompounder$3(callback) {
    return function (string) {
      return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
    };
  }

  var _createCompounder = createCompounder$3;

  var capitalize = capitalize_1,
      createCompounder$2 = _createCompounder;
  /**
   * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the camel cased string.
   * @example
   *
   * _.camelCase('Foo Bar');
   * // => 'fooBar'
   *
   * _.camelCase('--foo-bar--');
   * // => 'fooBar'
   *
   * _.camelCase('__FOO_BAR__');
   * // => 'fooBar'
   */

  var camelCase = createCompounder$2(function (result, word, index) {
    word = word.toLowerCase();
    return result + (index ? capitalize(word) : word);
  });
  var camelCase_1 = camelCase;

  var createCompounder$1 = _createCompounder;
  /**
   * Converts `string` to
   * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the kebab cased string.
   * @example
   *
   * _.kebabCase('Foo Bar');
   * // => 'foo-bar'
   *
   * _.kebabCase('fooBar');
   * // => 'foo-bar'
   *
   * _.kebabCase('__FOO_BAR__');
   * // => 'foo-bar'
   */

  var kebabCase = createCompounder$1(function (result, word, index) {
    return result + (index ? '-' : '') + word.toLowerCase();
  });
  var kebabCase_1 = kebabCase;

  function getDefaultNode(options) {
    var defaultNode;

    if (isObject_1(options) && "defaultNode" in options) {
      defaultNode = options.defaultNode;
    } else if (vue.isVNode(options) || isString_1(options)) {
      defaultNode = options;
    }

    return defaultNode;
  }
  function getParams(options) {
    return isObject_1(options) && "params" in options ? options.params : {};
  }
  function handleSlots$1(instance, params, name) {
    var _instance$$slots$came, _instance$$slots, _instance$$slots$keba, _instance$$slots2;

    var node = (_instance$$slots$came = (_instance$$slots = instance.$slots)[camelCase_1(name)]) === null || _instance$$slots$came === void 0 ? void 0 : _instance$$slots$came.call(_instance$$slots, params);
    if (node) return node;
    node = (_instance$$slots$keba = (_instance$$slots2 = instance.$slots)[kebabCase_1(name)]) === null || _instance$$slots$keba === void 0 ? void 0 : _instance$$slots$keba.call(_instance$$slots2, params);
    if (node) return node;
    return null;
  }
  var renderTNodeJSX = function renderTNodeJSX(instance, name, options) {
    var params = getParams(options);
    var defaultNode = getDefaultNode(options);
    var propsNode;

    if (name in instance) {
      propsNode = instance[name];
    }

    if (propsNode === false) return;

    if (propsNode === true && defaultNode) {
      return handleSlots$1(instance, params, name) || defaultNode;
    }

    if (isFunction_1(propsNode)) return propsNode(vue.h, params);
    var isPropsEmpty = [void 0, params, ""].includes(propsNode);

    if (isPropsEmpty && (instance.$slots[camelCase_1(name)] || instance.$slots[kebabCase_1(name)])) {
      return handleSlots$1(instance, params, name);
    }

    return propsNode;
  };
  var renderTNodeJSXDefault = function renderTNodeJSXDefault(vm, name, options) {
    var defaultNode = getDefaultNode(options);
    return renderTNodeJSX(vm, name, options) || defaultNode;
  };
  var renderContent = function renderContent(vm, name1, name2, options) {
    var params = getParams(options);
    var defaultNode = getDefaultNode(options);
    var toParams = params ? {
      params: params
    } : void 0;
    var node1 = renderTNodeJSX(vm, name1, toParams);
    var node2 = renderTNodeJSX(vm, name2, toParams);
    var res = isEmpty_1(node1) ? node2 : node1;
    return isEmpty_1(res) ? defaultNode : res;
  };

  var TransferDom = {
    mounted: function mounted(el, binding) {
      if (!binding.value) return;
      var parentNode = getAttach(binding.value);
      parentNode === null || parentNode === void 0 ? void 0 : parentNode.appendChild(el);
    }
  };

  var props$19 = {
    attach: {
      type: [String, Function],
      "default": ""
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    delay: {
      type: Number,
      "default": 0
    },
    fullscreen: Boolean,
    indicator: {
      type: [Boolean, Function],
      "default": true
    },
    inheritColor: Boolean,
    loading: {
      type: Boolean,
      "default": true
    },
    preventScrollThrough: {
      type: Boolean,
      "default": true
    },
    showOverlay: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium"
    },
    text: {
      type: [String, Function]
    },
    zIndex: {
      type: Number
    }
  };

  var useComponentClassName$2 = function useComponentClassName() {
    return {
      name: usePrefixClass("loading"),
      centerClass: usePrefixClass("loading--center"),
      fullscreenClass: usePrefixClass("loading__fullscreen"),
      lockClass: usePrefixClass("loading--lock"),
      overlayClass: usePrefixClass("loading__overlay"),
      relativeClass: usePrefixClass("loading__parent"),
      fullClass: usePrefixClass("loading--full"),
      inheritColorClass: usePrefixClass("loading--inherit-color")
    };
  };

  var _Loading = vue.defineComponent({
    name: "TLoading",
    directives: {
      TransferDom: TransferDom
    },
    props: props$19,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var delayShowLoading = vue.ref(false);

      var _useComponentClassNam = useComponentClassName$2(),
          name = _useComponentClassNam.name,
          centerClass = _useComponentClassNam.centerClass,
          fullscreenClass = _useComponentClassNam.fullscreenClass,
          lockClass = _useComponentClassNam.lockClass,
          overlayClass = _useComponentClassNam.overlayClass,
          relativeClass = _useComponentClassNam.relativeClass,
          fullClass = _useComponentClassNam.fullClass,
          inheritColorClass = _useComponentClassNam.inheritColorClass;

      var classPrefix = usePrefixClass();

      var _useCommonClassName = useCommonClassName$2(),
          SIZE = _useCommonClassName.SIZE;

      var countDelay = function countDelay() {
        delayShowLoading.value = false;
        var timer = setTimeout(function () {
          delayShowLoading.value = true;
          clearTimeout(timer);
        }, props2.delay);
      };

      var delayCounted = vue.computed(function () {
        return Boolean(!props2.delay || props2.delay && delayShowLoading.value);
      });
      var styles = vue.computed(function () {
        var styles2 = {};

        if (props2.zIndex !== void 0) {
          styles2.zIndex = props2.zIndex;
        }

        if (!["small", "medium", "large"].includes(props2.size)) {
          styles2["font-size"] = props2.size;
        }

        return styles2;
      });
      var hasContent = vue.computed(function () {
        return Boolean(props2["default"] || slots["default"] || props2.content || slots.content);
      });
      var lockFullscreen = vue.computed(function () {
        return props2.preventScrollThrough && props2.fullscreen;
      });
      var showText = vue.computed(function () {
        return Boolean(props2.text || slots.text);
      });
      var showWrapLoading = vue.computed(function () {
        return hasContent.value && props2.loading && delayCounted.value;
      });
      var showFullScreenLoading = vue.computed(function () {
        return props2.fullscreen && props2.loading && delayCounted.value;
      });
      var showNormalLoading = vue.computed(function () {
        return props2.attach && props2.loading && delayCounted.value;
      });
      var showAttachedLoading = vue.computed(function () {
        return props2.attach && props2.loading && delayCounted.value;
      });
      var classes = vue.computed(function () {
        var baseClasses = [centerClass.value, SIZE.value[props2.size], _defineProperty$3({}, inheritColorClass.value, props2.inheritColor)];
        var fullScreenClasses = [name.value, fullscreenClass.value, centerClass.value, overlayClass.value];
        return {
          baseClasses: baseClasses,
          attachClasses: baseClasses.concat([name.value, fullClass.value, _defineProperty$3({}, overlayClass.value, props2.showOverlay)]),
          withContentClasses: baseClasses.concat([name.value, fullClass.value, _defineProperty$3({}, overlayClass.value, props2.showOverlay)]),
          fullScreenClasses: fullScreenClasses,
          normalClasses: baseClasses.concat([name.value])
        };
      });

      var _toRefs = vue.toRefs(props2),
          loading = _toRefs.loading;

      vue.watch([loading], function (_ref5) {
        var _ref6 = _slicedToArray(_ref5, 1),
            isLoading = _ref6[0];

        if (isLoading) {
          countDelay();
          lockFullscreen.value && addClass(document.body, lockClass.value);
        } else {
          lockFullscreen.value && removeClass(document.body, lockClass.value);
        }
      });
      vue.onMounted(function () {
        props2.delay && countDelay();
      });
      return {
        classPrefix: classPrefix,
        relativeClass: relativeClass,
        delayShowLoading: delayShowLoading,
        styles: styles,
        showText: showText,
        hasContent: hasContent,
        classes: classes,
        lockFullscreen: lockFullscreen,
        showWrapLoading: showWrapLoading,
        showNormalLoading: showNormalLoading,
        showFullScreenLoading: showFullScreenLoading,
        showAttachedLoading: showAttachedLoading
      };
    },
    render: function render() {
      var _this$classes = this.classes,
          fullScreenClasses = _this$classes.fullScreenClasses,
          baseClasses = _this$classes.baseClasses,
          withContentClasses = _this$classes.withContentClasses,
          attachClasses = _this$classes.attachClasses,
          normalClasses = _this$classes.normalClasses;

      var defaultIndicator = vue.createVNode(GradientIcon, {
        "size": this.size
      }, null);

      var indicator = this.loading && renderTNodeJSX(this, "indicator", defaultIndicator);

      var text = this.showText && vue.createVNode("div", {
        "class": "".concat(this.classPrefix, "-loading__text")
      }, [renderTNodeJSX(this, "text")]);

      if (this.fullscreen) {
        if (!this.showFullScreenLoading) return null;
        return vue.withDirectives(vue.createVNode("div", {
          "class": fullScreenClasses,
          "style": this.styles
        }, [vue.createVNode("div", {
          "class": baseClasses
        }, [indicator, text])]), [[vue.resolveDirective("transfer-dom"), this.attach]]);
      }

      if (this.hasContent) {
        return vue.createVNode("div", {
          "class": this.relativeClass
        }, [renderContent(this, "default", "content"), this.showWrapLoading && vue.createVNode("div", {
          "class": withContentClasses,
          "style": this.styles
        }, [indicator, text])]);
      }

      if (this.attach) {
        if (!this.showAttachedLoading) return null;
        return vue.withDirectives(vue.createVNode("div", {
          "class": attachClasses,
          "style": this.styles
        }, [indicator, text]), [[vue.resolveDirective("transfer-dom"), this.attach]]);
      }

      return vue.createVNode("div", {
        "class": normalClasses,
        "style": this.styles
      }, [indicator, text]);
    }
  });

  function withInstall(comp, alias) {
    var componentPlugin = comp;

    componentPlugin.install = function (app, name) {
      var defaultName = componentPlugin.name.includes("-mapprops") ? componentPlugin.name.replace("-mapprops", "") : componentPlugin.name;
      app.component(alias || name || defaultName, comp);
    };

    return componentPlugin;
  }

  function ownKeys$2r(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2r(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2r(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var fullScreenLoadingInstance = null;

  function createLoading(props) {
    var component = vue.defineComponent({
      setup: function setup() {
        var loadingOptions = vue.reactive(props);
        return {
          loadingOptions: loadingOptions
        };
      },
      render: function render() {
        return vue.h(_Loading, _objectSpread$2q({}, this.loadingOptions));
      }
    });
    var attach = getAttach(props.attach);
    var loading = vue.createApp(component).mount(document.createElement("div"));

    if (attach) {
      attach.appendChild(loading.$el);
    } else {
      console.error("attach is not exist");
    }

    var loadingInstance = {
      hide: function hide() {
        loading.loading = false;
        loading.$el.parentNode.removeChild(loading.$el);
      }
    };
    return loadingInstance;
  }

  function produceLoading(props) {
    var lockClass = usePrefixClass("loading--lock");

    if (props === true) {
      fullScreenLoadingInstance = createLoading({
        fullscreen: true,
        loading: true,
        attach: "body"
      });
      return fullScreenLoadingInstance;
    }

    removeClass(document.body, lockClass.value);

    if (props === false) {
      removeClass(document.body, lockClass.value);
      fullScreenLoadingInstance.hide();
      fullScreenLoadingInstance = null;
      return;
    }

    return createLoading(props);
  }

  var LoadingPlugin = produceLoading;

  LoadingPlugin.install = function (app) {
    app.config.globalProperties.$loading = produceLoading;
  };

  var Loading = withInstall(_Loading);

  var props$18 = {
    block: Boolean,
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    ghost: Boolean,
    icon: {
      type: Function
    },
    loading: Boolean,
    shape: {
      type: String,
      "default": "rectangle",
      validator: function validator(val) {
        return ["rectangle", "square", "round", "circle"].includes(val);
      }
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": void 0,
      validator: function validator(val) {
        return ["default", "primary", "danger", "warning", "success"].includes(val);
      }
    },
    type: {
      type: String,
      "default": "button",
      validator: function validator(val) {
        return ["submit", "reset", "button"].includes(val);
      }
    },
    variant: {
      type: String,
      "default": "base",
      validator: function validator(val) {
        return ["base", "outline", "dashed", "text"].includes(val);
      }
    },
    onClick: Function
  };

  var expand = EAnimationType.expand,
      ripple = EAnimationType.ripple,
      fade = EAnimationType.fade;
  function useKeepAnimation() {
    var _useConfig = useConfig("animation"),
        global = _useConfig.global;

    var keepAnimation = function keepAnimation(type) {
      var _animationConfig$excl, _animationConfig$incl;

      var animationConfig = global.value;
      return animationConfig && !((_animationConfig$excl = animationConfig.exclude) !== null && _animationConfig$excl !== void 0 && _animationConfig$excl.includes(type)) && ((_animationConfig$incl = animationConfig.include) === null || _animationConfig$incl === void 0 ? void 0 : _animationConfig$incl.includes(type));
    };

    return {
      keepExpand: keepAnimation(expand),
      keepRipple: keepAnimation(ripple),
      keepFade: keepAnimation(fade)
    };
  }

  function setStyle(el, styles) {
    var keys = Object.keys(styles);
    keys.forEach(function (key) {
      el.style[key] = styles[key];
    });
  }

  var period = 200;
  var noneRippleBg = "rgba(0, 0, 0, 0)";
  var defaultRippleColor = "rgba(0, 0, 0, 0.35)";

  var getRippleColor = function getRippleColor(el, fixedRippleColor) {
    var _el$dataset;

    if (fixedRippleColor) {
      return fixedRippleColor;
    }

    if (el !== null && el !== void 0 && (_el$dataset = el.dataset) !== null && _el$dataset !== void 0 && _el$dataset.ripple) {
      var rippleColor = el.dataset.ripple;
      return rippleColor;
    }

    var cssVariable = getComputedStyle(el).getPropertyValue("--ripple-color");

    if (cssVariable) {
      return cssVariable;
    }

    return defaultRippleColor;
  };

  function useRipple(el, fixedRippleColor) {
    var rippleContainer = vue.ref(null);
    var classPrefix = usePrefixClass();

    var _useKeepAnimation = useKeepAnimation(),
        keepRipple = _useKeepAnimation.keepRipple;

    var handleAddRipple = function handleAddRipple(e) {
      var dom = el.value;
      var rippleColor = getRippleColor(dom, fixedRippleColor === null || fixedRippleColor === void 0 ? void 0 : fixedRippleColor.value);
      if (e.button !== 0 || !el || !keepRipple) return;
      if (dom.classList.contains("".concat(classPrefix.value, "-is-active")) || dom.classList.contains("".concat(classPrefix.value, "-is-disabled")) || dom.classList.contains("".concat(classPrefix.value, "-is-checked"))) return;
      var elStyle = getComputedStyle(dom);
      var elBorder = parseInt(elStyle.borderWidth, 10);
      var border = elBorder > 0 ? elBorder : 0;
      var width = dom.offsetWidth;
      var height = dom.offsetHeight;

      if (rippleContainer.value.parentNode === null) {
        setStyle(rippleContainer.value, {
          position: "absolute",
          left: "".concat(0 - border, "px"),
          top: "".concat(0 - border, "px"),
          width: "".concat(width, "px"),
          height: "".concat(height, "px"),
          borderRadius: elStyle.borderRadius,
          pointerEvents: "none",
          overflow: "hidden"
        });
        dom.appendChild(rippleContainer.value);
      }

      var ripple = document.createElement("div");
      setStyle(ripple, {
        marginTop: "0",
        marginLeft: "0",
        right: "".concat(width, "px"),
        width: "".concat(width + 20, "px"),
        height: "100%",
        transition: "transform ".concat(period, "ms cubic-bezier(.38, 0, .24, 1), background ").concat(period * 2, "ms linear"),
        transform: "skewX(-8deg)",
        pointerEvents: "none",
        position: "absolute",
        zIndex: 0,
        backgroundColor: rippleColor,
        opacity: "0.9"
      });
      var elMap = /* @__PURE__ */new WeakMap();

      for (var n = dom.children.length, i = 0; i < n; ++i) {
        var child = dom.children[i];

        if (child.style.zIndex === "" && child !== rippleContainer.value) {
          child.style.zIndex = "1";
          elMap.set(child, true);
        }
      }

      var initPosition = dom.style.position ? dom.style.position : getComputedStyle(dom).position;

      if (initPosition === "" || initPosition === "static") {
        dom.style.position = "relative";
      }

      rippleContainer.value.insertBefore(ripple, rippleContainer.value.firstChild);
      setTimeout(function () {
        ripple.style.transform = "translateX(".concat(width, "px)");
      }, 0);

      var handleClearRipple = function handleClearRipple() {
        ripple.style.backgroundColor = noneRippleBg;
        if (!el.value) return;
        el.value.removeEventListener("pointerup", handleClearRipple, false);
        el.value.removeEventListener("pointerleave", handleClearRipple, false);
        setTimeout(function () {
          ripple.remove();
          if (rippleContainer.value.children.length === 0) rippleContainer.value.remove();
        }, period * 2 + 100);
      };

      el.value.addEventListener("pointerup", handleClearRipple, false);
      el.value.addEventListener("pointerleave", handleClearRipple, false);
    };

    vue.onMounted(function () {
      var dom = el.value;
      if (!dom) return;
      rippleContainer.value = document.createElement("div");
      dom.addEventListener("pointerdown", handleAddRipple, false);
    });
    vue.onUnmounted(function () {
      var _el$value;

      (_el$value = el.value) === null || _el$value === void 0 ? void 0 : _el$value.removeEventListener("pointerdown", handleAddRipple, false);
    });
  }

  function useFormDisabled(extend) {
    var _getCurrentInstance = vue.getCurrentInstance(),
        props = _getCurrentInstance.props;

    var propsDisabled = vue.computed(function () {
      return props.disabled;
    });

    var _inject = vue.inject("formDisabled", /* @__PURE__ */Object.create(null)),
        disabled = _inject.disabled;

    return vue.computed(function () {
      return propsDisabled.value || (disabled === null || disabled === void 0 ? void 0 : disabled.value) || (extend === null || extend === void 0 ? void 0 : extend.value);
    });
  }

  function handleSlots(instance, name, params) {
    var _instance$slots$camel, _instance$slots, _instance$slots$kebab, _instance$slots2;

    var node = (_instance$slots$camel = (_instance$slots = instance.slots)[camelCase_1(name)]) === null || _instance$slots$camel === void 0 ? void 0 : _instance$slots$camel.call(_instance$slots, params);
    if (node) return node;
    node = (_instance$slots$kebab = (_instance$slots2 = instance.slots)[kebabCase_1(name)]) === null || _instance$slots$kebab === void 0 ? void 0 : _instance$slots$kebab.call(_instance$slots2, params);
    if (node) return node;
    return null;
  }

  var useTNodeJSX = function useTNodeJSX() {
    var instance = vue.getCurrentInstance();
    return function (name, options) {
      var params = getParams(options);
      var defaultNode = getDefaultNode(options);
      var propsNode;

      if (Object.keys(instance.props).includes(name)) {
        propsNode = instance.props[name];
      }

      if (propsNode === false) return;

      if (propsNode === true) {
        return handleSlots(instance, name, params) || defaultNode;
      }

      if (isFunction_1(propsNode)) return propsNode(vue.h, params);
      var isPropsEmpty = [void 0, params, ""].includes(propsNode);

      if (isPropsEmpty && (instance.slots[camelCase_1(name)] || instance.slots[kebabCase_1(name)])) {
        return handleSlots(instance, name, params);
      }

      return propsNode;
    };
  };
  var useTNodeDefault = function useTNodeDefault() {
    var renderTNodeJSX = useTNodeJSX();
    return function (name, options) {
      var defaultNode = getDefaultNode(options);
      return renderTNodeJSX(name, options) || defaultNode;
    };
  };
  var useContent = function useContent() {
    var renderTNodeJSX = useTNodeJSX();
    return function (name1, name2, options) {
      var params = getParams(options);
      var defaultNode = getDefaultNode(options);
      var toParams = params ? {
        params: params
      } : void 0;
      var node1 = renderTNodeJSX(name1, toParams);
      var node2 = renderTNodeJSX(name2, toParams);
      var res = isEmpty_1(node1) ? node2 : node1;
      return isEmpty_1(res) ? defaultNode : res;
    };
  };

  var TButton = vue.defineComponent({
    name: "TButton",
    inheritAttrs: false,
    props: props$18,
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs;
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();
      var COMPONENT_NAME = usePrefixClass("button");

      var _useCommonClassName = useCommonClassName$2(),
          STATUS = _useCommonClassName.STATUS,
          SIZE = _useCommonClassName.SIZE;

      var disabled = useFormDisabled();
      var btnRef = vue.ref();
      useRipple(btnRef);
      var isDisabled = vue.computed(function () {
        return props2.disabled || props2.loading || disabled.value;
      });
      var mergeTheme = vue.computed(function () {
        var theme = props2.theme,
            variant = props2.variant;
        if (theme) return theme;
        if (variant === "base") return "primary";
        return "default";
      });
      var buttonClass = vue.computed(function () {
        var _ref2;

        return ["".concat(COMPONENT_NAME.value), SIZE.value[props2.size], "".concat(COMPONENT_NAME.value, "--variant-").concat(props2.variant), "".concat(COMPONENT_NAME.value, "--theme-").concat(mergeTheme.value), (_ref2 = {}, _defineProperty$3(_ref2, STATUS.value.disabled, isDisabled.value), _defineProperty$3(_ref2, STATUS.value.loading, props2.loading), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "--shape-").concat(props2.shape), props2.shape !== "rectangle"), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "--ghost"), props2.ghost), _defineProperty$3(_ref2, SIZE.value.block, props2.block), _ref2)];
      });
      return function () {
        var buttonContent = renderContent("default", "content");
        var icon = props2.loading ? vue.createVNode(Loading, {
          "inheritColor": true
        }, null) : renderTNodeJSX("icon");
        var iconOnly = icon && !buttonContent;
        buttonContent = buttonContent ? vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__text")
        }, [buttonContent]) : "";

        if (icon) {
          buttonContent = [icon, buttonContent];
        }

        return vue.createVNode("button", vue.mergeProps({
          "ref": btnRef,
          "class": [].concat(_toConsumableArray(buttonClass.value), [_defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--icon-only"), iconOnly)]),
          "type": props2.type,
          "disabled": isDisabled.value
        }, attrs, {
          "onClick": props2.onClick
        }), [buttonContent]);
      };
    }
  });

  var Button = withInstall(TButton);

  var props$17 = {
    align: {
      type: String,
      "default": "center",
      validator: function validator(val) {
        return ["left", "right", "center"].includes(val);
      }
    },
    content: {
      type: [String, Function]
    },
    dashed: Boolean,
    "default": {
      type: [String, Function]
    },
    layout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        return ["horizontal", "vertical"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        return ["horizontal", "vertical"].includes(val);
      }
    }
  };

  function ownKeys$2q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2p(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2q(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Divider = vue.defineComponent({
    name: "TDivider",
    props: _objectSpread$2p({}, props$17),
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("divider");
      var renderContent = useContent();
      return function () {
        var _ref;

        var theme = props2.theme,
            dashed = props2.dashed,
            align = props2.align;
        var children = renderContent("default", "content");
        var dividerClassNames = ["".concat(COMPONENT_NAME.value), ["".concat(COMPONENT_NAME.value, "--").concat(theme)], (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--dashed"), !!dashed), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--with-text"), !!children), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--with-text-").concat(align), !!children), _ref)];
        return vue.createVNode("div", {
          "class": dividerClassNames
        }, [children && vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__inner-text")
        }, [children])]);
      };
    }
  });

  var Divider = withInstall(_Divider);

  function _defineProperty$1(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys$2p(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2o(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2p(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2p(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  function camel2Kebab(camelString) {
    var covertArr = ["fillOpacity", "fillRule", "clipRule"];

    if (covertArr.includes(camelString)) {
      return camelString.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2").toLowerCase();
    }

    return camelString;
  }

  function renderFn(node, props) {
    var kebabAttrs = Object.keys(node.attrs).reduce(function (result, key) {
      result[camel2Kebab(key)] = node.attrs[key];
      return result;
    }, {});
    return vue.h(node.tag, _objectSpread$2o(_objectSpread$2o({}, kebabAttrs), props), (node.children || []).map(function (child) {
      return renderFn(child, {});
    }));
  }

  var DEFAULT_CLASS_PREFIX = "t";
  var DEFAULT_LOCALE = "zh-CN";
  var ConfigContext = {
    classPrefix: DEFAULT_CLASS_PREFIX,
    locale: DEFAULT_LOCALE
  };

  function useCommonClassName$1() {
    var classPrefix = ConfigContext.classPrefix;
    return {
      SIZE: {
        "default": "",
        xs: "".concat(classPrefix, "-size-xs"),
        small: "".concat(classPrefix, "-size-s"),
        medium: "".concat(classPrefix, "-size-m"),
        large: "".concat(classPrefix, "-size-l"),
        xl: "".concat(classPrefix, "-size-xl"),
        block: "".concat(classPrefix, "-size-full-width")
      },
      STATUS: {
        loading: "".concat(classPrefix, "-is-loading"),
        disabled: "".concat(classPrefix, "-is-disabled"),
        focused: "".concat(classPrefix, "-is-focused"),
        success: "".concat(classPrefix, "-is-success"),
        error: "".concat(classPrefix, "-is-error"),
        warning: "".concat(classPrefix, "-is-warning"),
        selected: "".concat(classPrefix, "-is-selected"),
        active: "".concat(classPrefix, "-is-active"),
        checked: "".concat(classPrefix, "-is-checked"),
        current: "".concat(classPrefix, "-is-current"),
        hidden: "".concat(classPrefix, "-is-hidden"),
        visible: "".concat(classPrefix, "-is-visible"),
        expanded: "".concat(classPrefix, "-is-expanded"),
        indeterminate: "".concat(classPrefix, "-is-indeterminate")
      }
    };
  }

  function useSizeProps(size) {
    var COMMON_SIZE_CLASS_NAMES = useCommonClassName$1().SIZE;
    var className = vue.computed(function () {
      if (size.value in COMMON_SIZE_CLASS_NAMES) {
        return COMMON_SIZE_CLASS_NAMES[size.value];
      }

      return "";
    });
    var style = vue.computed(function () {
      if (size.value === void 0 || size.value in COMMON_SIZE_CLASS_NAMES) {
        return {};
      }

      return {
        fontSize: size.value
      };
    });
    return {
      style: style,
      className: className
    };
  }

  function ownKeys$2o(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2n(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2o(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2o(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$z = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 11V8.5H5v-1h2.5V5h1v2.5H11v1H8.5V11h-1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 14a1 1 0 01-1-1V3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3zm0-1h10V3H3v10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var addRectangle = vue.defineComponent({
    name: "AddRectangleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-add-rectangle", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2n(_objectSpread$2n({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$z, finalProps.value);
      };
    }
  });

  function ownKeys$2n(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2m(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2n(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2n(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$y = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.35 8.65v3.85h1.3V8.65h3.85v-1.3H8.65V3.5h-1.3v3.85H3.5v1.3h3.85z",
        "fillOpacity": 0.9
      }
    }]
  };
  var add = vue.defineComponent({
    name: "AddIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-add", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2m(_objectSpread$2m({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$y, finalProps.value);
      };
    }
  });

  function ownKeys$2m(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2l(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2m(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2m(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$x = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.77 11.98l1.38 1.37.7-.7-9.7-9.7-.7.7 1.2 1.21a7.9 7.9 0 00-2.53 2.91L1 8l.12.23a7.72 7.72 0 009.65 3.75zM10 11.2A6.67 6.67 0 012.11 8c.56-1 1.34-1.83 2.26-2.43l1.08 1.09a2.88 2.88 0 003.9 3.9l.64.64zM6.21 7.42l2.37 2.37a1.88 1.88 0 01-2.37-2.37zM14.88 8.23L15 8l-.12-.23a7.73 7.73 0 00-9.35-3.86l.8.8A6.7 6.7 0 0113.9 8a6.87 6.87 0 01-2.02 2.26l.7.7a7.9 7.9 0 002.3-2.73z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.88 8c0 .37-.07.73-.2 1.06l-.82-.82.02-.24a1.88 1.88 0 00-2.12-1.86l-.82-.82A2.87 2.87 0 0110.88 8z",
        "fillOpacity": 0.9
      }
    }]
  };
  var browseOff = vue.defineComponent({
    name: "BrowseOffIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-browse-off", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2l(_objectSpread$2l({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$x, finalProps.value);
      };
    }
  });

  function ownKeys$2l(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2k(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2l(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2l(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$w = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.88 8a2.88 2.88 0 11-5.76 0 2.88 2.88 0 015.76 0zm-1 0a1.88 1.88 0 10-3.76 0 1.88 1.88 0 003.76 0z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1.12 8.23A7.72 7.72 0 008 12.5c2.9 0 5.54-1.63 6.88-4.27L15 8l-.12-.23A7.73 7.73 0 008 3.5a7.74 7.74 0 00-6.88 4.27L1 8l.12.23zM8 11.5A6.73 6.73 0 012.11 8 6.73 6.73 0 0113.9 8 6.74 6.74 0 018 11.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var browse = vue.defineComponent({
    name: "BrowseIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-browse", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2k(_objectSpread$2k({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$w, finalProps.value);
      };
    }
  });

  function ownKeys$2k(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2j(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2k(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2k(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$v = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10 3H6V1.5H5V3H3a1 1 0 00-1 1v9a1 1 0 001 1h10a1 1 0 001-1V4a1 1 0 00-1-1h-2V1.5h-1V3zM5 5h1V4h4v1h1V4h2v2H3V4h2v1zM3 7h10v6H3V7z",
        "fillOpacity": 0.9
      }
    }]
  };
  var calendar = vue.defineComponent({
    name: "CalendarIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-calendar", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2j(_objectSpread$2j({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$v, finalProps.value);
      };
    }
  });

  function ownKeys$2j(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2i(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2j(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2j(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$u = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 5v6l4.5-3L6 5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var caretRightSmall = vue.defineComponent({
    name: "CaretRightSmallIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-caret-right-small", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2i(_objectSpread$2i({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$u, finalProps.value);
      };
    }
  });

  function ownKeys$2i(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2h(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2i(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2i(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$t = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM4.5 8.2l.7-.7L7 9.3l3.8-3.8.7.7L7 10.7 4.5 8.2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var checkCircleFilled = vue.defineComponent({
    name: "CheckCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-check-circle-filled", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2h(_objectSpread$2h({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$t, finalProps.value);
      };
    }
  });

  function ownKeys$2h(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2g(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2h(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2h(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$s = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.43 9.92l6.23-6.22.92.92-7.15 7.14L1.97 7.3l.92-.92 3.54 3.54z",
        "fillOpacity": 0.9
      }
    }]
  };
  var check = vue.defineComponent({
    name: "CheckIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-check", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2g(_objectSpread$2g({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$s, finalProps.value);
      };
    }
  });

  function ownKeys$2g(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2f(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2g(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2g(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$r = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.54 6.46l.92-.92L8 9.08l3.54-3.54.92.92L8 10.92 3.54 6.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronDown = vue.defineComponent({
    name: "ChevronDownIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-chevron-down", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2f(_objectSpread$2f({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$r, finalProps.value);
      };
    }
  });

  function ownKeys$2f(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2e(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2f(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2f(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$q = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M13.04 4.46l-.92-.92L7.66 8l4.46 4.46.92-.92L9.5 8l3.54-3.54z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.04 4.46l-.92-.92L2.66 8l4.46 4.46.92-.92L4.5 8l3.54-3.54z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronLeftDouble = vue.defineComponent({
    name: "ChevronLeftDoubleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-chevron-left-double", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2e(_objectSpread$2e({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$q, finalProps.value);
      };
    }
  });

  function ownKeys$2e(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2d(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2e(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2e(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$p = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.54 3.54l.92.92L6.92 8l3.54 3.54-.92.92L5.08 8l4.46-4.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronLeft = vue.defineComponent({
    name: "ChevronLeftIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-chevron-left", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2d(_objectSpread$2d({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$p, finalProps.value);
      };
    }
  });

  function ownKeys$2d(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2c(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2d(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2d(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$o = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.2 5.2L9 8l-2.8 2.8.71.7 3.5-3.5-3.5-3.5-.7.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 118 1a7 7 0 010 14zm0-1A6 6 0 108 2a6 6 0 000 12z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronRightCircle = vue.defineComponent({
    name: "ChevronRightCircleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-chevron-right-circle", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2c(_objectSpread$2c({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$o, finalProps.value);
      };
    }
  });

  function ownKeys$2c(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2b(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2c(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2c(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$n = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2.96 11.54l.92.92L8.34 8 3.88 3.54l-.92.92L6.5 8l-3.54 3.54zm5 0l.92.92L13.34 8 8.88 3.54l-.92.92L11.5 8l-3.54 3.54z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronRightDouble = vue.defineComponent({
    name: "ChevronRightDoubleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-chevron-right-double", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2b(_objectSpread$2b({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$n, finalProps.value);
      };
    }
  });

  function ownKeys$2b(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2a(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2b(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2b(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$m = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.46 12.46l-.92-.92L9.08 8 5.54 4.46l.92-.92L10.92 8l-4.46 4.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronRight = vue.defineComponent({
    name: "ChevronRightIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-chevron-right", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$2a(_objectSpread$2a({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$m, finalProps.value);
      };
    }
  });

  function ownKeys$2a(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$29(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2a(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2a(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$l = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.46 9.54l-.92.92L8 6.92l-3.54 3.54-.92-.92L8 5.08l4.46 4.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var chevronUp = vue.defineComponent({
    name: "ChevronUpIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-chevron-up", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$29(_objectSpread$29({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$l, finalProps.value);
      };
    }
  });

  function ownKeys$29(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$28(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$29(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$29(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$k = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM5.67 4.95L8 7.29l2.33-2.34.7.7L8.7 8l2.34 2.35-.71.7L8 8.71l-2.33 2.34-.7-.7L7.3 8 4.96 5.65l.71-.7z",
        "fillOpacity": 0.9
      }
    }]
  };
  var closeCircleFilled = vue.defineComponent({
    name: "CloseCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-close-circle-filled", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$28(_objectSpread$28({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$k, finalProps.value);
      };
    }
  });

  function ownKeys$28(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$27(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$28(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$28(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$j = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 8.92L11.08 12l.92-.92L8.92 8 12 4.92 11.08 4 8 7.08 4.92 4 4 4.92 7.08 8 4 11.08l.92.92L8 8.92z",
        "fillOpacity": 0.9
      }
    }]
  };
  var close = vue.defineComponent({
    name: "CloseIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-close", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$27(_objectSpread$27({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$j, finalProps.value);
      };
    }
  });

  function ownKeys$27(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$26(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$27(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$27(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$i = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 12V6h1v6H6zM9 6v6h1V6H9z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.5 3H14v1h-1v10a1 1 0 01-1 1H4a1 1 0 01-1-1V4H2V3h3.5V1.8c0-.44.36-.8.8-.8h3.4c.44 0 .8.36.8.8V3zm-4 0h3V2h-3v1zM4 4v10h8V4H4z",
        "fillOpacity": 0.9
      }
    }]
  };

  var _delete = vue.defineComponent({
    name: "DeleteIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-delete", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$26(_objectSpread$26({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$i, finalProps.value);
      };
    }
  });

  function ownKeys$26(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$25(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$26(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$26(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$h = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "fill": "currentColor",
        "opacity": 0.9,
        "fillOpacity": 0.9
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "d": "M14.13 4.95L10.9 1.71l.7-.71 3.25 3.24-.7.71zM5.97 13.11l-3.61.72a.3.3 0 01-.35-.35l.72-3.61 7.3-7.3 3.24 3.24-7.3 7.3zm5.89-7.3l-1.83-1.83-6.38 6.38-.46 2.29 2.29-.46 6.38-6.38zM15 11h-4v1h4v-1zM15 13H8.5v1H15v-1z"
        }
      }]
    }]
  };
  var edit1 = vue.defineComponent({
    name: "Edit1Icon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-edit-1", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$25(_objectSpread$25({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$h, finalProps.value);
      };
    }
  });

  function ownKeys$25(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$24(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$25(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$25(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$g = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 9a1 1 0 110-2 1 1 0 010 2zM7 8a1 1 0 102 0 1 1 0 00-2 0zM12 8a1 1 0 102 0 1 1 0 00-2 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ellipsis = vue.defineComponent({
    name: "EllipsisIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-ellipsis", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$24(_objectSpread$24({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$g, finalProps.value);
      };
    }
  });

  function ownKeys$24(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$23(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$24(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$24(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$f = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM8.5 4v5.5h-1V4h1zm-1.1 7h1.2v1.2H7.4V11z",
        "fillOpacity": 0.9
      }
    }]
  };
  var errorCircleFilled = vue.defineComponent({
    name: "ErrorCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-error-circle-filled", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$23(_objectSpread$23({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$f, finalProps.value);
      };
    }
  });

  function ownKeys$23(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$22(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$23(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$23(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$e = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.5 2h-1v9h1V2zm.1 10.8H7.4V14h1.2v-1.2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var error = vue.defineComponent({
    name: "ErrorIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-error", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$22(_objectSpread$22({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$e, finalProps.value);
      };
    }
  });

  function ownKeys$22(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$21(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$22(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$22(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$d = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4 1.92C4 1.34 4.52 1 5 1h4.37a1 1 0 01.71.3L13.71 5a1 1 0 01.29.7v6.38c0 .58-.52.92-1 .92H5c-.48 0-1-.34-1-.92V1.92zM5 2v10h8V6.01H9V2H5zm5 .65V5h2.32L10 2.65z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 5v9.01a1 1 0 001 1h8v-1H3V5H2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var fileCopy = vue.defineComponent({
    name: "FileCopyIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-file-copy", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$21(_objectSpread$21({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$d, finalProps.value);
      };
    }
  });

  function ownKeys$21(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$20(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$21(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$21(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$c = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 3a1 1 0 011-1h10a1 1 0 011 1v1.79l-4.25 2.5V14h-3.5V7.29L2 4.79V3zm11 0H3v1.21l4.25 2.5V13h1.5V6.71L13 4.21V3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var filter = vue.defineComponent({
    name: "FilterIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-filter", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$20(_objectSpread$20({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$c, finalProps.value);
      };
    }
  });

  function ownKeys$20(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1$(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$20(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$20(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$b = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM5.8 6.63a2.2 2.2 0 014.39 0c0 .97-.75 1.72-1.49 2.02a.34.34 0 00-.2.32v.8h-1v-.8c0-.56.33-1.04.82-1.24.5-.2.87-.66.87-1.1a1.2 1.2 0 00-2.39 0h-1zm1.67 4.54a.53.53 0 111.05 0 .53.53 0 01-1.05 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var helpCircleFilled = vue.defineComponent({
    name: "HelpCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-help-circle-filled", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$1$(_objectSpread$1$({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$b, finalProps.value);
      };
    }
  });

  function ownKeys$1$(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1_(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1$(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1$(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$a = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM7.4 4h1.2v1.2H7.4V4zm.1 2.5h1V12h-1V6.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var infoCircleFilled = vue.defineComponent({
    name: "InfoCircleFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-info-circle-filled", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$1_(_objectSpread$1_({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$a, finalProps.value);
      };
    }
  });

  function ownKeys$1_(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1Z(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1_(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1_(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$9 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M5 8.5h6v-1H5v1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 14a1 1 0 01-1-1V3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3zm0-1h10V3H3v10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var minusRectangle = vue.defineComponent({
    name: "MinusRectangleIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-minus-rectangle", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$1Z(_objectSpread$1Z({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$9, finalProps.value);
      };
    }
  });

  function ownKeys$1Z(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1Y(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1Z(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Z(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$8 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.4 4.46l-.91-.92L7.03 8l4.46 4.46.92-.92L8.86 8l3.55-3.54zM4.8 4v8h1.3V4H4.8z",
        "fillOpacity": 0.9
      }
    }]
  };
  var pageFirst = vue.defineComponent({
    name: "PageFirstIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-page-first", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$1Y(_objectSpread$1Y({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$8, finalProps.value);
      };
    }
  });

  function ownKeys$1Y(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1X(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1Y(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Y(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$7 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.6 11.54l.91.92L8.97 8 4.51 3.54l-.92.92L7.14 8l-3.55 3.54zm7.6.46V4H9.9v8h1.3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var pageLast = vue.defineComponent({
    name: "PageLastIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-page-last", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$1X(_objectSpread$1X({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$7, finalProps.value);
      };
    }
  });

  function ownKeys$1X(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1W(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1X(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1X(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$6 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.5 7.35h9v1.3h-9v-1.3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var remove = vue.defineComponent({
    name: "RemoveIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-remove", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$1W(_objectSpread$1W({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$6, finalProps.value);
      };
    }
  });

  function ownKeys$1W(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1V(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1W(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1W(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$5 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 11.5a3.5 3.5 0 110-7 3.5 3.5 0 010 7zM8 13A5 5 0 108 3a5 5 0 000 10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var round$1 = vue.defineComponent({
    name: "RoundIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-round", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$1V(_objectSpread$1V({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$5, finalProps.value);
      };
    }
  });

  function ownKeys$1V(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1U(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1V(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1V(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$4 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.51 10.22a4.76 4.76 0 11.7-.7l3.54 3.52-.7.71-3.54-3.53zm.77-3.7a3.76 3.76 0 10-7.53 0 3.76 3.76 0 007.53 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var search = vue.defineComponent({
    name: "SearchIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-search", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$1U(_objectSpread$1U({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$4, finalProps.value);
      };
    }
  });

  function ownKeys$1U(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1T(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1U(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1U(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$3 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11 8a3 3 0 11-6 0 3 3 0 016 0zm-1 0a2 2 0 10-4 0 2 2 0 004 0z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 1.25l6.06 3.38v6.75L8 14.75l-6.06-3.38V4.63L8 1.25zM2.94 5.21v5.58L8 13.6l5.06-2.82V5.2L8 2.4 2.94 5.21z",
        "fillOpacity": 0.9
      }
    }]
  };
  var setting = vue.defineComponent({
    name: "SettingIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-setting", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$1T(_objectSpread$1T({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$3, finalProps.value);
      };
    }
  });

  function ownKeys$1T(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1S(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1T(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1T(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$2 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM7.5 5h1v2.97l2.85 2.86-.7.7L7.5 8.4V5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var timeFilled = vue.defineComponent({
    name: "TimeFilledIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-time-filled", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$1S(_objectSpread$1S({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$2, finalProps.value);
      };
    }
  });

  function ownKeys$1S(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1R(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1S(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1S(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$1 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 4v4.39L10 11l.7-.7-2.2-2.33V4h-1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 111 8a7 7 0 0114 0zm-1 0A6 6 0 102 8a6 6 0 0012 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var time = vue.defineComponent({
    name: "TimeIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-time", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$1R(_objectSpread$1R({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element$1, finalProps.value);
      };
    }
  });

  function ownKeys$1R(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1Q(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1R(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1R(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.74 6.68L7.5 2.9v8.59h1V2.91l3.76 3.77.71-.7-4.62-4.63a.5.5 0 00-.7 0L3.03 5.97l.7.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 11v2a1 1 0 001 1h10a1 1 0 001-1v-2h-1v2H3v-2H2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var upload = vue.defineComponent({
    name: "UploadIcon",
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    setup: function setup(props, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props.size;
      });

      var _useSizeProps = useSizeProps(propsSize),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var finalCls = vue.computed(function () {
        return ["t-icon", "t-icon-upload", className.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$1Q(_objectSpread$1Q({}, style.value), attrs.style);
      });
      var finalProps = vue.computed(function () {
        return {
          "class": finalCls.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props$onClick;

            return (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, {
              e: e
            });
          }
        };
      });
      return function () {
        return renderFn(element, finalProps.value);
      };
    }
  });

  var isServer = typeof window === "undefined";

  function checkScriptAndLoad(url, className) {
    if (isServer) {
      return;
    }

    if (!document || !url || typeof url !== "string") return;

    if (document.querySelectorAll(".".concat(className, "[src=\"").concat(url, "\"]")).length > 0) {
      return;
    }

    var svg = document.createElement("script");
    svg.setAttribute("class", className);
    svg.setAttribute("src", url);
    document.body.appendChild(svg);
  }

  var props$16 = {
    name: {
      type: String,
      "default": ""
    },
    size: {
      type: String,
      "default": void 0
    },
    url: {
      type: [String, Array],
      "default": void 0
    },
    loadDefaultIcons: {
      type: Boolean,
      "default": true
    },
    onClick: Function
  };

  function ownKeys$1Q(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1P(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1Q(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Q(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var classPrefix = ConfigContext.classPrefix;
  var CDN_ICONFONT_URL = "https://tdesign.gtimg.com/icon/0.1.0/fonts/index.js";

  var _Icon = vue.defineComponent({
    name: "Icon",
    props: props$16,
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs;
      var propsSize = vue.computed(function () {
        return props2.size;
      });
      var name = vue.computed(function () {
        return props2.name || "";
      });

      var _useSizeProps = useSizeProps(propsSize),
          sizeClassName = _useSizeProps.className,
          sizeStyle = _useSizeProps.style;

      var finalUrl = vue.computed(function () {
        var url = [];
        url = props2.url instanceof Array ? props2.url.concat() : [props2.url];
        if (props2.loadDefaultIcons) url.push(CDN_ICONFONT_URL);
        return url;
      });
      var classNames = vue.computed(function () {
        return ["".concat(classPrefix, "-icon"), "".concat(classPrefix, "-icon-").concat(name.value), sizeClassName.value];
      });
      var finalStyle = vue.computed(function () {
        return _objectSpread$1P(_objectSpread$1P({}, sizeStyle.value), attrs.style);
      });
      vue.onMounted(function () {
        Array.from(new Set(finalUrl.value)).forEach(function (url) {
          checkScriptAndLoad(url, "".concat(classPrefix, "-svg-js-stylesheet--unique-class"));
        });
      });
      var finalProps = vue.computed(function () {
        return {
          "class": classNames.value,
          style: finalStyle.value,
          onClick: function onClick(e) {
            var _props2$onClick;

            return (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
              e: e
            });
          }
        };
      });
      return function () {
        return vue.h("svg", finalProps.value, vue.h("use", {
          href: props2.url ? "#".concat(name.value) : "#t-icon-".concat(name.value)
        }));
      };
    }
  });

  var Icon$1 = _Icon;

  var Icon = withInstall(Icon$1, "TIcon");

  var props$15 = {
    align: {
      type: String,
      "default": "top",
      validator: function validator(val) {
        return ["top", "middle", "bottom"].includes(val);
      }
    },
    gutter: {
      type: [Number, Object, Array],
      "default": 0
    },
    justify: {
      type: String,
      "default": "start",
      validator: function validator(val) {
        return ["start", "end", "center", "space-around", "space-between"].includes(val);
      }
    },
    tag: {
      type: String,
      "default": "div"
    }
  };

  var calcSize = function calcSize(width) {
    var size = "xs";

    if (width < 768) {
      size = "xs";
    } else if (width >= 768 && width < 992) {
      size = "sm";
    } else if (width >= 992 && width < 1200) {
      size = "md";
    } else if (width >= 1200 && width < 1400) {
      size = "lg";
    } else if (width >= 1400 && width < 1880) {
      size = "xl";
    } else {
      size = "xxl";
    }

    return size;
  };

  function useListener(type, listener) {
    vue.onMounted(function () {
      window.addEventListener(type, listener);
    });
    vue.onBeforeUnmount(function () {
      window.removeEventListener(type, listener);
    });
  }
  function useResize(listener, observer) {
    useListener("resize", listener);
    if (!window.ResizeObserver || !observer) return;
    var resizeObserver = new window.ResizeObserver(listener);
    resizeObserver.observe(observer);
    vue.onBeforeUnmount(function () {
      resizeObserver.disconnect();
    });
  }

  function ownKeys$1P(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1O(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1P(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1P(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useRowSize() {
    var size = vue.ref(calcSize(isServer$1 ? 0 : window.innerWidth));

    var updateSize = function updateSize() {
      size.value = calcSize(isServer$1 ? 0 : window.innerWidth);
    };

    useListener("resize", updateSize);
    return size;
  }
  function getRowClasses(name, props) {
    var _ref;

    var justify = props.justify,
        align = props.align;
    return [name, (_ref = {}, _defineProperty$3(_ref, "".concat(name, "--").concat(justify), justify), _defineProperty$3(_ref, "".concat(name, "--").concat(align), align), _ref)];
  }
  function calcRowStyle(gutter, currentSize) {
    var rowStyle = {};

    var getMarginStyle = function getMarginStyle(gutter2) {
      return Object.assign(rowStyle, {
        marginLeft: "".concat(gutter2 / -2, "px"),
        marginRight: "".concat(gutter2 / -2, "px")
      });
    };

    var getRowGapStyle = function getRowGapStyle(gutter2) {
      return Object.assign(rowStyle, {
        rowGap: "".concat(gutter2, "px")
      });
    };

    var strategyMap = {
      isNumber: function isNumber(gutter2) {
        if (typeof gutter2 === "number") {
          getMarginStyle(gutter2);
        }
      },
      isArray: function isArray(gutter2) {
        if (Array.isArray(gutter2) && gutter2.length) {
          strategyMap.isNumber(gutter2[0]);

          if (typeof gutter2[1] === "number") {
            getRowGapStyle(gutter2[1]);
          }

          if (isObject_1(gutter2[0]) && gutter2[0][currentSize] !== void 0) {
            getMarginStyle(gutter2[0][currentSize]);
          }

          if (isObject_1(gutter2[1]) && gutter2[1][currentSize] !== void 0) {
            getRowGapStyle(gutter2[1][currentSize]);
          }
        }
      },
      isObject: function isObject(gutter2) {
        if (isObject_1(gutter2) && gutter2[currentSize]) {
          if (Array.isArray(gutter2) && gutter2.length) {
            getMarginStyle(gutter2[currentSize][0]);
            getRowGapStyle(gutter2[currentSize][1]);
          } else {
            getMarginStyle(gutter2[currentSize]);
          }
        }
      }
    };
    Object.keys(strategyMap).forEach(function (item) {
      strategyMap[item](gutter);
    });
    return rowStyle;
  }
  function parseFlex(flex) {
    if (typeof flex === "number") {
      return "".concat(flex, " ").concat(flex, " 0");
    }

    if (/^\d+(\.\d+)?(px|r?em|%)$/.test(flex)) {
      return "0 0 ".concat(flex);
    }

    return flex;
  }
  function calcColPadding(gutter, currentSize) {
    var paddingObj = {};

    var getPaddingStyle = function getPaddingStyle(gutter2) {
      return Object.assign(paddingObj, {
        paddingLeft: "".concat(gutter2 / 2, "px"),
        paddingRight: "".concat(gutter2 / 2, "px")
      });
    };

    var strategyMap = {
      isNumber: function isNumber(gutter2) {
        if (typeof gutter2 === "number") {
          getPaddingStyle(gutter2);
        }
      },
      isArray: function isArray(gutter2) {
        if (Array.isArray(gutter2) && gutter2.length) {
          if (typeof gutter2[0] === "number") {
            getPaddingStyle(gutter2[0]);
          }

          if (isObject_1(gutter2[0]) && gutter2[0][currentSize]) {
            getPaddingStyle(gutter2[0][currentSize]);
          }
        }
      },
      isObject: function isObject(gutter2) {
        if (isObject_1(gutter2) && gutter2[currentSize]) {
          getPaddingStyle(gutter2[currentSize]);
        }
      }
    };
    Object.keys(strategyMap).forEach(function (item) {
      strategyMap[item](gutter);
    });
    return paddingObj;
  }
  function getColClasses(name, props) {
    var _objectSpread3;

    var span = props.span,
        order = props.order,
        offset = props.offset,
        push = props.push,
        pull = props.pull;
    var allSizes = ["xs", "sm", "md", "lg", "xl", "xxl"];
    var ColSizeClasses = allSizes.reduce(function (acc, currSize) {
      var _objectSpread2;

      var sizeProp = props[currSize];
      var sizeObject = {};

      if (typeof sizeProp === "number") {
        sizeObject.span = sizeProp;
      } else if (isObject_1(sizeProp)) {
        sizeObject = sizeProp || {};
      }

      return _objectSpread$1O(_objectSpread$1O({}, acc), {}, (_objectSpread2 = {}, _defineProperty$3(_objectSpread2, "".concat(name, "-").concat(currSize, "-").concat(sizeObject.span), sizeObject.span !== void 0), _defineProperty$3(_objectSpread2, "".concat(name, "-").concat(currSize, "-order-").concat(sizeObject.order), parseInt(sizeObject.order, 10) >= 0), _defineProperty$3(_objectSpread2, "".concat(name, "-").concat(currSize, "-offset-").concat(sizeObject.offset), parseInt(sizeObject.offset, 10) >= 0), _defineProperty$3(_objectSpread2, "".concat(name, "-").concat(currSize, "-push-").concat(sizeObject.push), parseInt(sizeObject.push, 10) >= 0), _defineProperty$3(_objectSpread2, "".concat(name, "-").concat(currSize, "-pull-").concat(sizeObject.pull), parseInt(sizeObject.pull, 10) >= 0), _objectSpread2));
    }, {});
    return _objectSpread$1O((_objectSpread3 = {}, _defineProperty$3(_objectSpread3, "".concat(name), true), _defineProperty$3(_objectSpread3, "".concat(name, "-").concat(span), span !== void 0), _defineProperty$3(_objectSpread3, "".concat(name, "-order-").concat(order), order), _defineProperty$3(_objectSpread3, "".concat(name, "-offset-").concat(offset), offset), _defineProperty$3(_objectSpread3, "".concat(name, "-push-").concat(push), push), _defineProperty$3(_objectSpread3, "".concat(name, "-pull-").concat(pull), pull), _objectSpread3), ColSizeClasses);
  }

  function ownKeys$1O(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1N(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1O(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1O(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot$u(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var _Row = vue.defineComponent({
    name: "TRow",
    props: _objectSpread$1N({}, props$15),
    setup: function setup(props2) {
      var _toRefs = vue.toRefs(props2),
          gutter = _toRefs.gutter;

      var renderTNodeJSX = useTNodeJSX();
      vue.provide("rowContext", vue.reactive({
        gutter: gutter
      }));
      var size = useRowSize();
      var COMPONENT_NAME = usePrefixClass("row");
      var rowClasses = vue.computed(function () {
        return getRowClasses(COMPONENT_NAME.value, props2);
      });
      var rowStyle = vue.computed(function () {
        return calcRowStyle(props2.gutter, size.value);
      });
      return function () {
        var _slot;

        var TAG = props2.tag;
        return vue.createVNode(TAG, {
          "class": rowClasses.value,
          "style": rowStyle.value
        }, _isSlot$u(_slot = renderTNodeJSX("default")) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        });
      };
    }
  });

  var props$14 = {
    flex: {
      type: [String, Number]
    },
    lg: {
      type: [Number, Object]
    },
    md: {
      type: [Number, Object]
    },
    offset: {
      type: Number,
      "default": 0
    },
    order: {
      type: Number,
      "default": 0
    },
    pull: {
      type: Number,
      "default": 0
    },
    push: {
      type: Number,
      "default": 0
    },
    sm: {
      type: [Number, Object]
    },
    span: {
      type: Number,
      "default": 12
    },
    tag: {
      type: String,
      "default": "div"
    },
    xl: {
      type: [Number, Object]
    },
    xs: {
      type: [Number, Object]
    },
    xxl: {
      type: [Number, Object]
    }
  };

  function ownKeys$1N(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1M(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1N(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1N(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot$t(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var _Col = vue.defineComponent({
    name: "TCol",
    inject: ["rowContext"],
    props: _objectSpread$1M({}, props$14),
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("col");
      var renderTNodeJSX = useTNodeJSX();
      var rowContext = vue.inject("rowContext", /* @__PURE__ */Object.create(null));
      var size = useRowSize();
      var colClasses = vue.computed(function () {
        return getColClasses(COMPONENT_NAME.value, props2);
      });
      var colStyle = vue.computed(function () {
        var colStyle2 = {};
        var flex = props2.flex;
        flex && (colStyle2.flex = parseFlex(flex));

        if (rowContext) {
          var rowGutter = rowContext.gutter;
          Object.assign(colStyle2, calcColPadding(rowGutter, size.value));
        }

        return colStyle2;
      });
      return function () {
        var _slot;

        var TAG = props2.tag;
        return vue.createVNode(TAG, {
          "class": colClasses.value,
          "style": colStyle.value
        }, _isSlot$t(_slot = renderTNodeJSX("default")) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        });
      };
    }
  });

  var Row = withInstall(_Row);
  var Col = withInstall(_Col);

  var _Layout = vue.defineComponent({
    name: "TLayout",
    setup: function setup() {
      var hasSide = vue.ref(false);
      var renderTNodeJSX = useTNodeJSX();
      var COMPONENT_NAME = usePrefixClass("layout");
      var classes = vue.computed(function () {
        return [COMPONENT_NAME.value, _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--with-sider"), hasSide.value)];
      });
      vue.provide("layout", {
        hasSide: hasSide
      });
      return function () {
        return vue.createVNode("section", {
          "class": classes.value
        }, [renderTNodeJSX("default")]);
      };
    }
  });

  var props$13 = {
    height: {
      type: String,
      "default": ""
    }
  };

  var _Header = vue.defineComponent({
    name: "THeader",
    props: props$13,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("layout__header");
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        return vue.createVNode("header", {
          "class": COMPONENT_NAME.value,
          "style": props2.height ? {
            height: props2.height
          } : {}
        }, [renderTNodeJSX("default")]);
      };
    }
  });

  var props$12 = {
    height: {
      type: String,
      "default": ""
    }
  };

  var _Footer = vue.defineComponent({
    name: "TFooter",
    props: props$12,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("layout__footer");
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        return vue.createVNode("footer", {
          "class": COMPONENT_NAME.value,
          "style": props2.height ? {
            height: props2.height
          } : {}
        }, [renderTNodeJSX("default")]);
      };
    }
  });

  var props$11 = {
    width: {
      type: String,
      "default": ""
    }
  };

  var _Aside = vue.defineComponent({
    name: "TAside",
    props: props$11,
    setup: function setup(props2) {
      var _inject = vue.inject("layout", /* @__PURE__ */Object.create(null)),
          hasSide = _inject.hasSide;

      var COMPONENT_NAME = usePrefixClass("layout__sider");
      var renderTNodeJSX = useTNodeJSX();
      if (!hasSide) return;
      vue.onMounted(function () {
        hasSide.value = true;
      });
      vue.onUnmounted(function () {
        hasSide.value = false;
      });
      return function () {
        var styles = props2.width ? {
          width: props2.width
        } : {};
        return vue.createVNode("aside", {
          "class": COMPONENT_NAME.value,
          "style": styles
        }, [renderTNodeJSX("default")]);
      };
    }
  });

  var _Content = vue.defineComponent({
    name: "TContent",
    setup: function setup() {
      var COMPONENT_NAME = usePrefixClass("layout__content");
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        return vue.createVNode("main", {
          "class": COMPONENT_NAME.value
        }, [renderTNodeJSX("default")]);
      };
    }
  });

  var Aside = withInstall(_Aside);
  var Layout = withInstall(_Layout);
  var Header = withInstall(_Header);
  var Footer = withInstall(_Footer);
  var Content$1 = withInstall(_Content);

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  var regeneratorRuntime$1 = {exports: {}};

  var _typeof$1 = {exports: {}};

  (function (module) {
    function _typeof(obj) {
      "@babel/helpers - typeof";

      return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
    }

    module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(_typeof$1);

  (function (module) {
    var _typeof = _typeof$1.exports["default"];

    function _regeneratorRuntime() {
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;
  })(regeneratorRuntime$1);

  var runtime = regeneratorRuntime$1.exports();
  var regenerator = runtime; // Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    if ((typeof globalThis === "undefined" ? "undefined" : _typeof$2(globalThis)) === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }

  var props$10 = {
    container: {
      type: [String, Function],
      "default": function _default() {
        return function () {
          return window;
        };
      }
    },
    offsetBottom: {
      type: Number,
      "default": 0
    },
    offsetTop: {
      type: Number,
      "default": 0
    },
    zIndex: {
      type: Number
    },
    onFixedChange: Function
  };

  var _Affix = vue.defineComponent({
    name: "TAffix",
    props: props$10,
    emits: ["fixedChange"],
    setup: function setup(props2, context) {
      var COMPONENT_NAME = usePrefixClass("affix");
      var renderTNodeJSX = useTNodeJSX();
      var affixWrapRef = vue.ref(null);
      var affixRef = vue.ref(null);
      var placeholderEL = vue.ref(document.createElement("div"));
      var ticking = vue.ref(false);
      var binded = vue.ref(false);
      var scrollContainer = vue.ref();

      var handleScroll = function handleScroll() {
        if (!ticking.value) {
          window.requestAnimationFrame(function () {
            var _affixWrapRef$value$g;

            var _ref = (_affixWrapRef$value$g = affixWrapRef.value.getBoundingClientRect()) !== null && _affixWrapRef$value$g !== void 0 ? _affixWrapRef$value$g : {
              top: 0,
              width: 0,
              height: 0
            },
                wrapToTop = _ref.top,
                wrapWidth = _ref.width,
                wrapHeight = _ref.height;

            var containerTop = 0;

            if (scrollContainer.value instanceof HTMLElement) {
              containerTop = scrollContainer.value.getBoundingClientRect().top;
            }

            var fixedTop;
            var calcTop = wrapToTop - containerTop;
            var containerHeight = scrollContainer.value[scrollContainer.value instanceof Window ? "innerHeight" : "clientHeight"] - wrapHeight;
            var calcBottom = containerTop + containerHeight - props2.offsetBottom;

            if (props2.offsetTop !== void 0 && calcTop <= props2.offsetTop) {
              fixedTop = containerTop + props2.offsetTop;
            } else if (props2.offsetBottom !== void 0 && wrapToTop >= calcBottom) {
              fixedTop = calcBottom;
            } else {
              fixedTop = false;
            }

            if (affixRef.value) {
              var affixed = fixedTop !== false;
              var placeholderStatus = affixWrapRef.value.contains(placeholderEL.value);

              if (affixed) {
                affixRef.value.className = COMPONENT_NAME.value;
                affixRef.value.style.top = "".concat(fixedTop, "px");
                affixRef.value.style.width = "".concat(wrapWidth, "px");
                affixRef.value.style.height = "".concat(wrapHeight, "px");

                if (props2.zIndex) {
                  affixRef.value.style.zIndex = "".concat(props2.zIndex);
                }

                if (!placeholderStatus) {
                  placeholderEL.value.style.width = "".concat(wrapWidth, "px");
                  placeholderEL.value.style.height = "".concat(wrapHeight, "px");
                  affixWrapRef.value.appendChild(placeholderEL.value);
                }
              } else {
                affixRef.value.removeAttribute("class");
                affixRef.value.removeAttribute("style");
                placeholderStatus && placeholderEL.value.remove();
              }

              context.emit("fixedChange", affixed, {
                top: Number(fixedTop)
              });
              if (isFunction_1(props2.onFixedChange)) props2.onFixedChange(affixed, {
                top: Number(fixedTop)
              });
            }

            ticking.value = false;
          });
          ticking.value = true;
        }
      };

      var bindScroll = /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return vue.nextTick();

                case 2:
                  if (!binded.value) {
                    _context.next = 4;
                    break;
                  }

                  return _context.abrupt("return");

                case 4:
                  scrollContainer.value = getScrollContainer(props2.container);
                  on$1(scrollContainer.value, "scroll", handleScroll);
                  on$1(window, "resize", handleScroll);
                  binded.value = true;

                case 8:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function bindScroll() {
          return _ref2.apply(this, arguments);
        };
      }();

      var unbindScroll = function unbindScroll() {
        if (!scrollContainer.value || !binded.value) return;
        off$1(scrollContainer.value, "scroll", handleScroll);
        off$1(window, "resize", handleScroll);
        binded.value = false;
      };

      vue.watch(function () {
        return props2.offsetTop;
      }, function () {
        handleScroll();
      });
      vue.watch(function () {
        return props2.offsetBottom;
      }, function () {
        handleScroll();
      });
      vue.watch(function () {
        return props2.zIndex;
      }, function () {
        handleScroll();
      });
      vue.onMounted(bindScroll);
      vue.onActivated(bindScroll);
      vue.onDeactivated(unbindScroll);
      vue.onBeforeUnmount(unbindScroll);
      return {
        affixWrapRef: affixWrapRef,
        affixRef: affixRef,
        bindScroll: bindScroll,
        unbindScroll: unbindScroll,
        handleScroll: handleScroll,
        scrollContainer: scrollContainer,
        renderTNodeJSX: renderTNodeJSX
      };
    },
    render: function render() {
      return vue.createVNode("div", {
        "ref": "affixWrapRef"
      }, [vue.createVNode("div", {
        "ref": "affixRef"
      }, [this.renderTNodeJSX("default")])]);
    }
  });

  var Affix = withInstall(_Affix);

  var ANCHOR_SHARP_REGEXP = /#(\S+)$/;
  function getOffsetTop(target, container) {
    var _target$getBoundingCl = target.getBoundingClientRect(),
        top = _target$getBoundingCl.top;

    if (container === window) {
      return top - document.documentElement.clientTop;
    }

    return top - container.getBoundingClientRect().top;
  }

  var props$$ = {
    affixProps: {
      type: Object
    },
    bounds: {
      type: Number,
      "default": 5
    },
    container: {
      type: [String, Function],
      "default": function _default() {
        return function () {
          return window;
        };
      }
    },
    cursor: {
      type: Function
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    targetOffset: {
      type: Number,
      "default": 0
    },
    onChange: Function,
    onClick: Function
  };

  var AnchorInjectionKey = Symbol("AnchorInjectionProvide");

  function _isSlot$s(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var _Anchor = vue.defineComponent({
    name: "TAnchor",
    props: props$$,
    setup: function setup(props2, _ref) {
      _ref.slots;
          var attrs = _ref.attrs;
      var anchorRef = vue.ref(null);
      var links = vue.ref([]);
      var active = vue.ref("");
      var scrollContainer = vue.ref(null);
      var handleScrollLock = vue.ref(false);
      var activeLineStyle = vue.reactive({});
      var COMPONENT_NAME = usePrefixClass("anchor");
      var ANCHOR_LINE_CLASSNAME = usePrefixClass("anchor__line");
      var ANCHOR_LINE_CURSOR_CLASSNAME = usePrefixClass("anchor__line-cursor");

      var _useCommonClassName = useCommonClassName$2(),
          STATUS = _useCommonClassName.STATUS,
          SIZE = _useCommonClassName.SIZE;

      var renderTNodeJSX = useTNodeJSX();

      var getScrollContainer$1 = function getScrollContainer$1() {
        if (isServer$1) {
          return;
        }

        var container = props2.container;
        scrollContainer.value = getScrollContainer(container);
        on$1(scrollContainer.value, "scroll", handleScroll);
        handleScroll();
      };

      var handleScroll = function handleScroll() {
        if (handleScrollLock.value) return;
        var bounds = props2.bounds,
            targetOffset = props2.targetOffset;
        var filters = [];
        var active2 = "";
        links.value.forEach(function (link) {
          var anchor = getAnchorTarget(link);

          if (!anchor) {
            return;
          }

          var top = getOffsetTop(anchor, scrollContainer.value);

          if (top < bounds + targetOffset) {
            filters.push({
              link: link,
              top: top
            });
          }
        });

        if (filters.length) {
          var latest = filters.reduce(function (prev, cur) {
            return prev.top > cur.top ? prev : cur;
          });
          active2 = latest.link;
        }

        setCurrentActiveLink(active2);
      };

      var getAnchorTarget = function getAnchorTarget(link) {
        var matcher = link.match(ANCHOR_SHARP_REGEXP);

        if (!matcher) {
          return;
        }

        var anchor = document.getElementById(matcher[1]);

        if (!anchor) {
          return;
        }

        return anchor;
      };

      var registerLink = function registerLink(link) {
        if (!ANCHOR_SHARP_REGEXP.test(link) || links.value.indexOf(link) !== -1) {
          return;
        }

        links.value.push(link);
      };

      var unregisterLink = function unregisterLink(link) {
        links.value = links.value.filter(function (each) {
          return each !== link;
        });
      };

      var setCurrentActiveLink = /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(link) {
          var _props2$onChange;

          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!(active.value === link)) {
                    _context.next = 2;
                    break;
                  }

                  return _context.abrupt("return");

                case 2:
                  active.value = link;
                  (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 ? void 0 : _props2$onChange.call(props2, link, active.value);
                  _context.next = 6;
                  return vue.nextTick();

                case 6:
                  updateActiveLine();

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function setCurrentActiveLink(_x) {
          return _ref2.apply(this, arguments);
        };
      }();

      var updateActiveLine = function updateActiveLine() {
        var _anchorRef$value;

        var ele = (_anchorRef$value = anchorRef.value) === null || _anchorRef$value === void 0 ? void 0 : _anchorRef$value.querySelector(".".concat(STATUS.value.active, ">a"));

        if (!ele) {
          Object.assign(activeLineStyle, {});
          return;
        }

        var top = ele.offsetTop,
            height = ele.offsetHeight;
        Object.assign(activeLineStyle, {
          top: "".concat(top, "px"),
          height: "".concat(height, "px"),
          opacity: 1
        });
      };

      var handleLinkClick = function handleLinkClick(link) {
        var _props2$onClick;

        (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, link);
      };

      var handleScrollTo = /*#__PURE__*/function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(link) {
          var anchor, targetOffset, scrollTop, offsetTop, top;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  anchor = getAnchorTarget(link);
                  setCurrentActiveLink(link);

                  if (anchor) {
                    _context2.next = 4;
                    break;
                  }

                  return _context2.abrupt("return");

                case 4:
                  handleScrollLock.value = true;
                  targetOffset = props2.targetOffset;
                  scrollTop = getScroll(scrollContainer.value);
                  offsetTop = getOffsetTop(anchor, scrollContainer.value);
                  top = scrollTop + offsetTop - targetOffset;
                  _context2.next = 11;
                  return scrollTo(top, {
                    container: scrollContainer.value
                  });

                case 11:
                  handleScrollLock.value = false;

                case 12:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        return function handleScrollTo(_x2) {
          return _ref3.apply(this, arguments);
        };
      }();

      var renderCursor = function renderCursor() {
        var titleContent = renderTNodeJSX("cursor");
        return titleContent || vue.createVNode("div", {
          "class": ANCHOR_LINE_CURSOR_CLASSNAME.value
        }, null);
      };

      vue.onMounted( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
        return regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                getScrollContainer$1();

                if (!active.value) {
                  _context3.next = 5;
                  break;
                }

                _context3.next = 4;
                return vue.nextTick();

              case 4:
                handleScrollTo(active.value);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      })));
      vue.onUnmounted(function () {
        if (!scrollContainer.value) return;
        off$1(scrollContainer.value, "scroll", handleScroll);
      });
      vue.watchEffect(function () {
        if (scrollContainer.value) {
          off$1(scrollContainer.value, "scroll", handleScroll);
        }

        getScrollContainer$1();
      });
      vue.provide(AnchorInjectionKey, vue.reactive({
        registerLink: registerLink,
        unregisterLink: unregisterLink,
        handleScrollTo: handleScrollTo,
        handleLinkClick: handleLinkClick,
        active: active
      }));
      return function () {
        var size = props2.size,
            affixProps = props2.affixProps;
        var className = [COMPONENT_NAME.value, SIZE.value[size]];

        var content = vue.createVNode("div", vue.mergeProps({
          "ref": anchorRef,
          "class": className
        }, attrs), [vue.createVNode("div", {
          "class": ANCHOR_LINE_CLASSNAME.value
        }, [vue.createVNode("div", {
          "class": "".concat(ANCHOR_LINE_CURSOR_CLASSNAME.value, "-wrapper"),
          "style": activeLineStyle
        }, [renderCursor()])]), renderTNodeJSX("default")]);

        if (affixProps) {
          return vue.createVNode(Affix, affixProps, _isSlot$s(content) ? content : {
            "default": function _default() {
              return [content];
            }
          });
        }

        return content;
      };
    }
  });

  var props$_ = {
    href: {
      type: String,
      "default": "",
      required: true
    },
    target: {
      type: String,
      "default": "_self",
      validator: function validator(val) {
        return ["_self", "_blank", "_parent", "_top"].includes(val);
      }
    },
    title: {
      type: [String, Function],
      "default": ""
    }
  };

  function ownKeys$1M(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1L(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1M(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1M(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var localProps = _objectSpread$1L(_objectSpread$1L({}, props$_), {}, {
    href: {
      type: String,
      required: true,
      validator: function validator(v) {
        return ANCHOR_SHARP_REGEXP.test(v);
      }
    }
  });

  var _AnchorItem = vue.defineComponent({
    name: "TAnchorItem",
    inject: {
      tAnchor: {
        "default": void 0
      }
    },
    props: localProps,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var anchor = vue.inject(AnchorInjectionKey, void 0);
      var CLASSNAME_PREFIX = usePrefixClass("anchor__item");

      var _useCommonClassName = useCommonClassName$2(),
          STATUS = _useCommonClassName.STATUS;

      var register = function register() {
        anchor.registerLink(props2.href);
      };

      var unregister = function unregister() {
        var href = props2.href;
        if (!href) return;
        anchor.unregisterLink(href);
      };

      var handleClick = function handleClick(e) {
        var href = props2.href,
            title = props2.title;
        anchor.handleScrollTo(href);
        anchor.handleLinkClick({
          href: href,
          title: typeof title === "string" ? title : void 0,
          e: e
        });
      };

      var renderTitle = function renderTitle() {
        var title = props2.title;
        var titleSlot = slots.title;
        var titleVal;

        if (typeof title === "string") {
          titleVal = title;
        } else if (typeof title === "function") {
          titleVal = title(vue.h);
        } else if (titleSlot) {
          titleVal = titleSlot(null);
        }

        return titleVal;
      };

      vue.watch(function () {
        return props2.href;
      }, function () {
        unregister();
        register();
      }, {
        immediate: true
      });
      vue.onMounted(function () {
        register();
      });
      vue.onUnmounted(function () {
        register();
      });
      return function () {
        var _wrapperClass;

        var href = props2.href,
            target = props2.target;
        var children = slots["default"],
            titleSlot = slots.title;
        var title = renderTitle();
        var titleAttr = typeof title === "string" ? title : null;
        var active = anchor.active === href;
        var wrapperClass = (_wrapperClass = {}, _defineProperty$3(_wrapperClass, CLASSNAME_PREFIX.value, true), _defineProperty$3(_wrapperClass, STATUS.value.active, active), _wrapperClass);

        var titleClass = _defineProperty$3({}, "".concat(CLASSNAME_PREFIX.value, "-link"), true);

        return vue.createVNode("div", {
          "class": wrapperClass
        }, [vue.createVNode("a", {
          "href": href,
          "title": titleAttr,
          "class": titleClass,
          "target": target,
          "onClick": handleClick
        }, [titleSlot ? titleSlot(null) : title]), children && children(null)]);
      };
    }
  });

  var clipboard = {exports: {}};

  /*!
   * clipboard.js v2.0.11
   * https://clipboardjs.com/
   *
   * Licensed MIT © Zeno Rocha
   */

  (function (module, exports) {
    (function webpackUniversalModuleDefinition(root, factory) {
      module.exports = factory();
    })(commonjsGlobal, function () {
      return (
        /******/
        function () {
          // webpackBootstrap

          /******/
          var __webpack_modules__ = {
            /***/
            686:
            /***/
            function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

              __webpack_require__.d(__webpack_exports__, {
                "default": function _default() {
                  return (
                    /* binding */
                    clipboard
                  );
                }
              }); // EXTERNAL MODULE: ./node_modules/tiny-emitter/index.js


              var tiny_emitter = __webpack_require__(279);

              var tiny_emitter_default = /*#__PURE__*/__webpack_require__.n(tiny_emitter); // EXTERNAL MODULE: ./node_modules/good-listener/src/listen.js


              var listen = __webpack_require__(370);

              var listen_default = /*#__PURE__*/__webpack_require__.n(listen); // EXTERNAL MODULE: ./node_modules/select/src/select.js


              var src_select = __webpack_require__(817);

              var select_default = /*#__PURE__*/__webpack_require__.n(src_select);

              /**
               * Executes a given operation type.
               * @param {String} type
               * @return {Boolean}
               */

              function command(type) {
                try {
                  return document.execCommand(type);
                } catch (err) {
                  return false;
                }
              }

              /**
               * Cut action wrapper.
               * @param {String|HTMLElement} target
               * @return {String}
               */

              var ClipboardActionCut = function ClipboardActionCut(target) {
                var selectedText = select_default()(target);
                command('cut');
                return selectedText;
              };
              /* harmony default export */


              var actions_cut = ClipboardActionCut;

              /**
               * Creates a fake textarea element with a value.
               * @param {String} value
               * @return {HTMLElement}
               */

              function createFakeElement(value) {
                var isRTL = document.documentElement.getAttribute('dir') === 'rtl';
                var fakeElement = document.createElement('textarea'); // Prevent zooming on iOS

                fakeElement.style.fontSize = '12pt'; // Reset box model

                fakeElement.style.border = '0';
                fakeElement.style.padding = '0';
                fakeElement.style.margin = '0'; // Move element out of screen horizontally

                fakeElement.style.position = 'absolute';
                fakeElement.style[isRTL ? 'right' : 'left'] = '-9999px'; // Move element to the same position vertically

                var yPosition = window.pageYOffset || document.documentElement.scrollTop;
                fakeElement.style.top = "".concat(yPosition, "px");
                fakeElement.setAttribute('readonly', '');
                fakeElement.value = value;
                return fakeElement;
              }

              /**
               * Create fake copy action wrapper using a fake element.
               * @param {String} target
               * @param {Object} options
               * @return {String}
               */

              var fakeCopyAction = function fakeCopyAction(value, options) {
                var fakeElement = createFakeElement(value);
                options.container.appendChild(fakeElement);
                var selectedText = select_default()(fakeElement);
                command('copy');
                fakeElement.remove();
                return selectedText;
              };
              /**
               * Copy action wrapper.
               * @param {String|HTMLElement} target
               * @param {Object} options
               * @return {String}
               */


              var ClipboardActionCopy = function ClipboardActionCopy(target) {
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                  container: document.body
                };
                var selectedText = '';

                if (typeof target === 'string') {
                  selectedText = fakeCopyAction(target, options);
                } else if (target instanceof HTMLInputElement && !['text', 'search', 'url', 'tel', 'password'].includes(target === null || target === void 0 ? void 0 : target.type)) {
                  // If input type doesn't support `setSelectionRange`. Simulate it. https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange
                  selectedText = fakeCopyAction(target.value, options);
                } else {
                  selectedText = select_default()(target);
                  command('copy');
                }

                return selectedText;
              };
              /* harmony default export */


              var actions_copy = ClipboardActionCopy;

              function _typeof(obj) {
                "@babel/helpers - typeof";

                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof(obj) {
                    return typeof obj;
                  };
                } else {
                  _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                  };
                }

                return _typeof(obj);
              }
              /**
               * Inner function which performs selection from either `text` or `target`
               * properties and then executes copy or cut operations.
               * @param {Object} options
               */


              var ClipboardActionDefault = function ClipboardActionDefault() {
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; // Defines base properties passed from constructor.

                var _options$action = options.action,
                    action = _options$action === void 0 ? 'copy' : _options$action,
                    container = options.container,
                    target = options.target,
                    text = options.text; // Sets the `action` to be performed which can be either 'copy' or 'cut'.

                if (action !== 'copy' && action !== 'cut') {
                  throw new Error('Invalid "action" value, use either "copy" or "cut"');
                } // Sets the `target` property using an element that will be have its content copied.


                if (target !== undefined) {
                  if (target && _typeof(target) === 'object' && target.nodeType === 1) {
                    if (action === 'copy' && target.hasAttribute('disabled')) {
                      throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                    }

                    if (action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {
                      throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');
                    }
                  } else {
                    throw new Error('Invalid "target" value, use a valid Element');
                  }
                } // Define selection strategy based on `text` property.


                if (text) {
                  return actions_copy(text, {
                    container: container
                  });
                } // Defines which selection strategy based on `target` property.


                if (target) {
                  return action === 'cut' ? actions_cut(target) : actions_copy(target, {
                    container: container
                  });
                }
              };
              /* harmony default export */


              var actions_default = ClipboardActionDefault;

              function clipboard_typeof(obj) {
                "@babel/helpers - typeof";

                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  clipboard_typeof = function _typeof(obj) {
                    return typeof obj;
                  };
                } else {
                  clipboard_typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                  };
                }

                return clipboard_typeof(obj);
              }

              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }

              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                if (staticProps) _defineProperties(Constructor, staticProps);
                return Constructor;
              }

              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }

                subClass.prototype = Object.create(superClass && superClass.prototype, {
                  constructor: {
                    value: subClass,
                    writable: true,
                    configurable: true
                  }
                });
                if (superClass) _setPrototypeOf(subClass, superClass);
              }

              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                  o.__proto__ = p;
                  return o;
                };

                return _setPrototypeOf(o, p);
              }

              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();

                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived),
                      result;

                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;

                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }

                  return _possibleConstructorReturn(this, result);
                };
              }

              function _possibleConstructorReturn(self, call) {
                if (call && (clipboard_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                }

                return _assertThisInitialized(self);
              }

              function _assertThisInitialized(self) {
                if (self === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }

                return self;
              }

              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                if (Reflect.construct.sham) return false;
                if (typeof Proxy === "function") return true;

                try {
                  Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
                  return true;
                } catch (e) {
                  return false;
                }
              }

              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                  return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
              }
              /**
               * Helper function to retrieve attribute value.
               * @param {String} suffix
               * @param {Element} element
               */


              function getAttributeValue(suffix, element) {
                var attribute = "data-clipboard-".concat(suffix);

                if (!element.hasAttribute(attribute)) {
                  return;
                }

                return element.getAttribute(attribute);
              }
              /**
               * Base class which takes one or more elements, adds event listeners to them,
               * and instantiates a new `ClipboardAction` on each click.
               */


              var Clipboard = /*#__PURE__*/function (_Emitter) {
                _inherits(Clipboard, _Emitter);

                var _super = _createSuper(Clipboard);
                /**
                 * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
                 * @param {Object} options
                 */


                function Clipboard(trigger, options) {
                  var _this;

                  _classCallCheck(this, Clipboard);

                  _this = _super.call(this);

                  _this.resolveOptions(options);

                  _this.listenClick(trigger);

                  return _this;
                }
                /**
                 * Defines if attributes would be resolved using internal setter functions
                 * or custom functions that were passed in the constructor.
                 * @param {Object} options
                 */


                _createClass(Clipboard, [{
                  key: "resolveOptions",
                  value: function resolveOptions() {
                    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    this.action = typeof options.action === 'function' ? options.action : this.defaultAction;
                    this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;
                    this.text = typeof options.text === 'function' ? options.text : this.defaultText;
                    this.container = clipboard_typeof(options.container) === 'object' ? options.container : document.body;
                  }
                  /**
                   * Adds a click event listener to the passed trigger.
                   * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
                   */

                }, {
                  key: "listenClick",
                  value: function listenClick(trigger) {
                    var _this2 = this;

                    this.listener = listen_default()(trigger, 'click', function (e) {
                      return _this2.onClick(e);
                    });
                  }
                  /**
                   * Defines a new `ClipboardAction` on each click event.
                   * @param {Event} e
                   */

                }, {
                  key: "onClick",
                  value: function onClick(e) {
                    var trigger = e.delegateTarget || e.currentTarget;
                    var action = this.action(trigger) || 'copy';
                    var text = actions_default({
                      action: action,
                      container: this.container,
                      target: this.target(trigger),
                      text: this.text(trigger)
                    }); // Fires an event based on the copy operation result.

                    this.emit(text ? 'success' : 'error', {
                      action: action,
                      text: text,
                      trigger: trigger,
                      clearSelection: function clearSelection() {
                        if (trigger) {
                          trigger.focus();
                        }

                        window.getSelection().removeAllRanges();
                      }
                    });
                  }
                  /**
                   * Default `action` lookup function.
                   * @param {Element} trigger
                   */

                }, {
                  key: "defaultAction",
                  value: function defaultAction(trigger) {
                    return getAttributeValue('action', trigger);
                  }
                  /**
                   * Default `target` lookup function.
                   * @param {Element} trigger
                   */

                }, {
                  key: "defaultTarget",
                  value: function defaultTarget(trigger) {
                    var selector = getAttributeValue('target', trigger);

                    if (selector) {
                      return document.querySelector(selector);
                    }
                  }
                  /**
                   * Allow fire programmatically a copy action
                   * @param {String|HTMLElement} target
                   * @param {Object} options
                   * @returns Text copied.
                   */

                }, {
                  key: "defaultText",

                  /**
                   * Default `text` lookup function.
                   * @param {Element} trigger
                   */
                  value: function defaultText(trigger) {
                    return getAttributeValue('text', trigger);
                  }
                  /**
                   * Destroy lifecycle.
                   */

                }, {
                  key: "destroy",
                  value: function destroy() {
                    this.listener.destroy();
                  }
                }], [{
                  key: "copy",
                  value: function copy(target) {
                    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                      container: document.body
                    };
                    return actions_copy(target, options);
                  }
                  /**
                   * Allow fire programmatically a cut action
                   * @param {String|HTMLElement} target
                   * @returns Text cutted.
                   */

                }, {
                  key: "cut",
                  value: function cut(target) {
                    return actions_cut(target);
                  }
                  /**
                   * Returns the support of the given action, or all actions if no action is
                   * given.
                   * @param {String} [action]
                   */

                }, {
                  key: "isSupported",
                  value: function isSupported() {
                    var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];
                    var actions = typeof action === 'string' ? [action] : action;
                    var support = !!document.queryCommandSupported;
                    actions.forEach(function (action) {
                      support = support && !!document.queryCommandSupported(action);
                    });
                    return support;
                  }
                }]);

                return Clipboard;
              }(tiny_emitter_default());
              /* harmony default export */


              var clipboard = Clipboard;
              /***/
            },

            /***/
            828:
            /***/
            function _(module) {
              var DOCUMENT_NODE_TYPE = 9;
              /**
               * A polyfill for Element.matches()
               */

              if (typeof Element !== 'undefined' && !Element.prototype.matches) {
                var proto = Element.prototype;
                proto.matches = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;
              }
              /**
               * Finds the closest parent that matches a selector.
               *
               * @param {Element} element
               * @param {String} selector
               * @return {Function}
               */


              function closest(element, selector) {
                while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
                  if (typeof element.matches === 'function' && element.matches(selector)) {
                    return element;
                  }

                  element = element.parentNode;
                }
              }

              module.exports = closest;
              /***/
            },

            /***/
            438:
            /***/
            function _(module, __unused_webpack_exports, __webpack_require__) {
              var closest = __webpack_require__(828);
              /**
               * Delegates event to a selector.
               *
               * @param {Element} element
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @param {Boolean} useCapture
               * @return {Object}
               */


              function _delegate(element, selector, type, callback, useCapture) {
                var listenerFn = listener.apply(this, arguments);
                element.addEventListener(type, listenerFn, useCapture);
                return {
                  destroy: function destroy() {
                    element.removeEventListener(type, listenerFn, useCapture);
                  }
                };
              }
              /**
               * Delegates event to a selector.
               *
               * @param {Element|String|Array} [elements]
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @param {Boolean} useCapture
               * @return {Object}
               */


              function delegate(elements, selector, type, callback, useCapture) {
                // Handle the regular Element usage
                if (typeof elements.addEventListener === 'function') {
                  return _delegate.apply(null, arguments);
                } // Handle Element-less usage, it defaults to global delegation


                if (typeof type === 'function') {
                  // Use `document` as the first parameter, then apply arguments
                  // This is a short way to .unshift `arguments` without running into deoptimizations
                  return _delegate.bind(null, document).apply(null, arguments);
                } // Handle Selector-based usage


                if (typeof elements === 'string') {
                  elements = document.querySelectorAll(elements);
                } // Handle Array-like based usage


                return Array.prototype.map.call(elements, function (element) {
                  return _delegate(element, selector, type, callback, useCapture);
                });
              }
              /**
               * Finds closest match and invokes callback.
               *
               * @param {Element} element
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @return {Function}
               */


              function listener(element, selector, type, callback) {
                return function (e) {
                  e.delegateTarget = closest(e.target, selector);

                  if (e.delegateTarget) {
                    callback.call(element, e);
                  }
                };
              }

              module.exports = delegate;
              /***/
            },

            /***/
            879:
            /***/
            function _(__unused_webpack_module, exports) {
              /**
               * Check if argument is a HTML element.
               *
               * @param {Object} value
               * @return {Boolean}
               */
              exports.node = function (value) {
                return value !== undefined && value instanceof HTMLElement && value.nodeType === 1;
              };
              /**
               * Check if argument is a list of HTML elements.
               *
               * @param {Object} value
               * @return {Boolean}
               */


              exports.nodeList = function (value) {
                var type = Object.prototype.toString.call(value);
                return value !== undefined && (type === '[object NodeList]' || type === '[object HTMLCollection]') && 'length' in value && (value.length === 0 || exports.node(value[0]));
              };
              /**
               * Check if argument is a string.
               *
               * @param {Object} value
               * @return {Boolean}
               */


              exports.string = function (value) {
                return typeof value === 'string' || value instanceof String;
              };
              /**
               * Check if argument is a function.
               *
               * @param {Object} value
               * @return {Boolean}
               */


              exports.fn = function (value) {
                var type = Object.prototype.toString.call(value);
                return type === '[object Function]';
              };
              /***/

            },

            /***/
            370:
            /***/
            function _(module, __unused_webpack_exports, __webpack_require__) {
              var is = __webpack_require__(879);

              var delegate = __webpack_require__(438);
              /**
               * Validates all params and calls the right
               * listener function based on its target type.
               *
               * @param {String|HTMLElement|HTMLCollection|NodeList} target
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */


              function listen(target, type, callback) {
                if (!target && !type && !callback) {
                  throw new Error('Missing required arguments');
                }

                if (!is.string(type)) {
                  throw new TypeError('Second argument must be a String');
                }

                if (!is.fn(callback)) {
                  throw new TypeError('Third argument must be a Function');
                }

                if (is.node(target)) {
                  return listenNode(target, type, callback);
                } else if (is.nodeList(target)) {
                  return listenNodeList(target, type, callback);
                } else if (is.string(target)) {
                  return listenSelector(target, type, callback);
                } else {
                  throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');
                }
              }
              /**
               * Adds an event listener to a HTML element
               * and returns a remove listener function.
               *
               * @param {HTMLElement} node
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */


              function listenNode(node, type, callback) {
                node.addEventListener(type, callback);
                return {
                  destroy: function destroy() {
                    node.removeEventListener(type, callback);
                  }
                };
              }
              /**
               * Add an event listener to a list of HTML elements
               * and returns a remove listener function.
               *
               * @param {NodeList|HTMLCollection} nodeList
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */


              function listenNodeList(nodeList, type, callback) {
                Array.prototype.forEach.call(nodeList, function (node) {
                  node.addEventListener(type, callback);
                });
                return {
                  destroy: function destroy() {
                    Array.prototype.forEach.call(nodeList, function (node) {
                      node.removeEventListener(type, callback);
                    });
                  }
                };
              }
              /**
               * Add an event listener to a selector
               * and returns a remove listener function.
               *
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */


              function listenSelector(selector, type, callback) {
                return delegate(document.body, selector, type, callback);
              }

              module.exports = listen;
              /***/
            },

            /***/
            817:
            /***/
            function _(module) {
              function select(element) {
                var selectedText;

                if (element.nodeName === 'SELECT') {
                  element.focus();
                  selectedText = element.value;
                } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
                  var isReadOnly = element.hasAttribute('readonly');

                  if (!isReadOnly) {
                    element.setAttribute('readonly', '');
                  }

                  element.select();
                  element.setSelectionRange(0, element.value.length);

                  if (!isReadOnly) {
                    element.removeAttribute('readonly');
                  }

                  selectedText = element.value;
                } else {
                  if (element.hasAttribute('contenteditable')) {
                    element.focus();
                  }

                  var selection = window.getSelection();
                  var range = document.createRange();
                  range.selectNodeContents(element);
                  selection.removeAllRanges();
                  selection.addRange(range);
                  selectedText = selection.toString();
                }

                return selectedText;
              }

              module.exports = select;
              /***/
            },

            /***/
            279:
            /***/
            function _(module) {
              function E() {// Keep this empty so it's easier to inherit from
                // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
              }

              E.prototype = {
                on: function on(name, callback, ctx) {
                  var e = this.e || (this.e = {});
                  (e[name] || (e[name] = [])).push({
                    fn: callback,
                    ctx: ctx
                  });
                  return this;
                },
                once: function once(name, callback, ctx) {
                  var self = this;

                  function listener() {
                    self.off(name, listener);
                    callback.apply(ctx, arguments);
                  }
                  listener._ = callback;
                  return this.on(name, listener, ctx);
                },
                emit: function emit(name) {
                  var data = [].slice.call(arguments, 1);
                  var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
                  var i = 0;
                  var len = evtArr.length;

                  for (i; i < len; i++) {
                    evtArr[i].fn.apply(evtArr[i].ctx, data);
                  }

                  return this;
                },
                off: function off(name, callback) {
                  var e = this.e || (this.e = {});
                  var evts = e[name];
                  var liveEvents = [];

                  if (evts && callback) {
                    for (var i = 0, len = evts.length; i < len; i++) {
                      if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);
                    }
                  } // Remove event from queue to prevent memory leak
                  // Suggested by https://github.com/lazd
                  // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910


                  liveEvents.length ? e[name] = liveEvents : delete e[name];
                  return this;
                }
              };
              module.exports = E;
              module.exports.TinyEmitter = E;
              /***/
            }
            /******/

          };
          /************************************************************************/

          /******/
          // The module cache

          /******/

          var __webpack_module_cache__ = {};
          /******/

          /******/
          // The require function

          /******/

          function __webpack_require__(moduleId) {
            /******/
            // Check if module is in cache

            /******/
            if (__webpack_module_cache__[moduleId]) {
              /******/
              return __webpack_module_cache__[moduleId].exports;
              /******/
            }
            /******/
            // Create a new module (and put it into the cache)

            /******/


            var module = __webpack_module_cache__[moduleId] = {
              /******/
              // no module.id needed

              /******/
              // no module.loaded needed

              /******/
              exports: {}
              /******/

            };
            /******/

            /******/
            // Execute the module function

            /******/

            __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
            /******/

            /******/
            // Return the exports of the module

            /******/


            return module.exports;
            /******/
          }
          /******/

          /************************************************************************/

          /******/

          /* webpack/runtime/compat get default export */

          /******/


          !function () {
            /******/
            // getDefaultExport function for compatibility with non-harmony modules

            /******/
            __webpack_require__.n = function (module) {
              /******/
              var getter = module && module.__esModule ?
              /******/
              function () {
                return module['default'];
              } :
              /******/
              function () {
                return module;
              };
              /******/

              __webpack_require__.d(getter, {
                a: getter
              });
              /******/


              return getter;
              /******/
            };
            /******/

          }();
          /******/

          /******/

          /* webpack/runtime/define property getters */

          /******/

          !function () {
            /******/
            // define getter functions for harmony exports

            /******/
            __webpack_require__.d = function (exports, definition) {
              /******/
              for (var key in definition) {
                /******/
                if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
                  /******/
                  Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: definition[key]
                  });
                  /******/
                }
                /******/

              }
              /******/

            };
            /******/

          }();
          /******/

          /******/

          /* webpack/runtime/hasOwnProperty shorthand */

          /******/

          !function () {
            /******/
            __webpack_require__.o = function (obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            };
            /******/

          }();
          /******/

          /************************************************************************/

          /******/
          // module exports must be returned from runtime so entry inlining is disabled

          /******/
          // startup

          /******/
          // Load entry module and return exports

          /******/

          return __webpack_require__(686);
          /******/
        }()["default"]
      );
    });
  })(clipboard);

  var Clipboard = /*@__PURE__*/getDefaultExportFromCjs(clipboard.exports);

  function copyText(_text) {
    var div = document.createElement("div");
    var clip = new Clipboard(div, {
      text: function text() {
        return _text;
      }
    });
    div.click();
    clip.destroy();
    div.remove();
  }

  var THEME_LIST = ["info", "success", "warning", "error", "question", "loading"];
  var DISTANCE$1 = "32px";
  var PLACEMENT_OFFSET$1 = {
    top: {
      top: DISTANCE$1,
      left: "50%",
      transform: "translateX(-50%)"
    },
    center: {
      left: "50%",
      top: "50%",
      transform: "translateX(-50%) translateY(-50%)"
    },
    left: {
      left: DISTANCE$1,
      top: "50%",
      transform: "translateY(-50%)"
    },
    bottom: {
      bottom: DISTANCE$1,
      left: "50%",
      transform: "translateX(-50%)"
    },
    right: {
      right: DISTANCE$1,
      top: "50%",
      transform: "translateY(-50%)",
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-end"
    },
    "top-left": {
      left: DISTANCE$1,
      top: DISTANCE$1
    },
    "top-right": {
      right: DISTANCE$1,
      top: DISTANCE$1,
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-end"
    },
    "bottom-right": {
      right: DISTANCE$1,
      bottom: DISTANCE$1,
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-end"
    },
    "bottom-left": {
      left: DISTANCE$1,
      bottom: DISTANCE$1
    }
  };
  var PLACEMENT_LIST$1 = Object.keys(PLACEMENT_OFFSET$1);

  var props$Z = {
    closeBtn: {
      type: [String, Boolean, Function],
      "default": void 0
    },
    content: {
      type: [String, Function]
    },
    duration: {
      type: Number,
      "default": 3e3
    },
    icon: {
      type: [Boolean, Function],
      "default": true
    },
    theme: {
      type: String,
      "default": "info",
      validator: function validator(val) {
        return ["info", "success", "warning", "error", "question", "loading"].includes(val);
      }
    },
    onCloseBtnClick: Function,
    onDurationEnd: Function
  };

  var ANIMATION_OPTION$1 = {
    duration: 200,
    easing: "linear"
  };

  function fadeIn$1(dom, placement) {
    if (!dom) return;
    var offsetWidth = (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
    var offsetHeight = (dom === null || dom === void 0 ? void 0 : dom.offsetHeight) || 0;
    var fadeInKeyframes = getFadeInKeyframes$1(placement, offsetWidth, offsetHeight);
    if (!fadeInKeyframes) return;
    var styleAfterFadeIn = fadeInKeyframes[fadeInKeyframes.length - 1];
    setDomStyleAfterAnimation(dom, styleAfterFadeIn);
    dom.animate && dom.animate(fadeInKeyframes, ANIMATION_OPTION$1);
  }

  function fadeOut$1(dom, placement, onFinish) {
    if (!dom) return;
    var offsetHeight = (dom === null || dom === void 0 ? void 0 : dom.offsetHeight) || 0;
    var fadeOutKeyframes = getFadeOutKeyframes$1(placement, offsetHeight);
    if (!fadeOutKeyframes) return onFinish();
    var styleAfterFadeOut = fadeOutKeyframes[fadeOutKeyframes.length - 1];
    setDomStyleAfterAnimation(dom, styleAfterFadeOut);
    var animation = dom.animate && dom.animate(fadeOutKeyframes, ANIMATION_OPTION$1);

    if (animation) {
      animation.onfinish = function () {
        dom.style.display = "none";
        onFinish();
      };
    } else {
      dom.style.display = "none";
      onFinish();
    }
  }

  function setDomStyleAfterAnimation(dom, styleAfterAnimation) {
    var keys = Object.keys(styleAfterAnimation);

    for (var i = 0; i < keys.length; i += 1) {
      var key = keys[i];
      dom.style[key] = styleAfterAnimation[key];
    }
  }

  function getFadeInKeyframes$1(placement, offsetWidth, offsetHeight) {
    if (!PLACEMENT_LIST$1.includes(placement)) return null;

    if (["top-left", "left", "bottom-left"].includes(placement)) {
      return [{
        opacity: 0,
        marginLeft: "-".concat(offsetWidth, "px")
      }, {
        opacity: 1,
        marginLeft: "0"
      }];
    }

    if (["top-right", "right", "bottom-right"].includes(placement)) {
      return [{
        opacity: 0,
        marginRight: "-".concat(offsetWidth, "px")
      }, {
        opacity: 1,
        marginRight: "0"
      }];
    }

    if (["top", "center"].includes(placement)) {
      return [{
        opacity: 0,
        marginTop: "-".concat(offsetHeight, "px")
      }, {
        opacity: 1,
        marginTop: "0"
      }];
    }

    if (["bottom"].includes(placement)) {
      return [{
        opacity: 0,
        transform: "translate3d(0, ".concat(offsetHeight, "px, 0)")
      }, {
        opacity: 1,
        transform: "translate3d(0, 0, 0)"
      }];
    }
  }

  function getFadeOutKeyframes$1(placement, offsetHeight) {
    if (!PLACEMENT_LIST$1.includes(placement)) return null;

    if (["bottom-left", "bottom", "bottom-right"].includes(placement)) {
      var marginOffset2 = "".concat(offsetHeight, "px");
      return [{
        opacity: 1,
        marginTop: "0px"
      }, {
        opacity: 0,
        marginTop: marginOffset2
      }];
    }

    var marginOffset = "-".concat(offsetHeight, "px");
    return [{
      opacity: 1,
      marginTop: "0px"
    }, {
      opacity: 0,
      marginTop: marginOffset
    }];
  }

  function ownKeys$1L(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1K(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1L(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1L(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Message = vue.defineComponent({
    name: "TMessage",
    props: _objectSpread$1K(_objectSpread$1K({}, props$Z), {}, {
      placement: String
    }),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots,
          expose = _ref.expose;
      var COMPONENT_NAME = usePrefixClass("message");
      var classPrefix = usePrefixClass();
      var renderTNode = useTNodeJSX();
      var renderContent = useContent();
      var msgRef = vue.ref(null);
      var timer = vue.ref(null);
      var classes = vue.computed(function () {
        var status = {};
        THEME_LIST.forEach(function (t) {
          return status["".concat(classPrefix.value, "-is-").concat(t)] = props2.theme === t;
        });
        return [COMPONENT_NAME.value, status, _defineProperty$3({}, "".concat(classPrefix.value, "-is-closable"), props2.closeBtn || slots.closeBtn)];
      });

      var close$1 = function close(e) {
        var _props2$onCloseBtnCli;

        (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 ? void 0 : _props2$onCloseBtnCli.call(props2, {
          e: e
        });
      };

      var clearTimer = function clearTimer() {
        props2.duration && clearTimeout(timer.value);
      };

      var setTimer = function setTimer() {
        if (!props2.duration) {
          return;
        }

        timer.value = Number(setTimeout(function () {
          clearTimer();
          var msgDom = msgRef.value;
          fadeOut$1(msgDom, props2.placement, function () {
            var _props2$onDurationEnd;

            (_props2$onDurationEnd = props2.onDurationEnd) === null || _props2$onDurationEnd === void 0 ? void 0 : _props2$onDurationEnd.call(props2);
          });
        }, props2.duration));
      };

      var renderClose = function renderClose() {
        var defaultClose = vue.createVNode(close, null, null);

        return vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__close"),
          "onClick": close$1
        }, [renderTNode("closeBtn", defaultClose)]);
      };

      var renderIcon = function renderIcon() {
        if (props2.icon === false) return;
        if (typeof props2.icon === "function") return props2.icon(vue.h);

        if (slots.icon) {
          return slots.icon(null);
        }

        var Icon = {
          info: infoCircleFilled,
          success: checkCircleFilled,
          warning: errorCircleFilled,
          error: errorCircleFilled,
          question: helpCircleFilled,
          loading: Loading
        }[props2.theme];
        return vue.createVNode(Icon, null, null);
      };

      vue.onBeforeMount(function () {
        props2.duration && setTimer();
      });
      vue.onMounted(function () {
        var msgDom = msgRef.value;
        fadeIn$1(msgDom, props2.placement);
      });
      expose({
        close: close$1
      });
      return function () {
        return vue.createVNode("div", {
          "ref": msgRef,
          "class": classes.value,
          "onMouseenter": clearTimer,
          "onMouseleave": setTimer
        }, [renderIcon(), renderContent("content", "default"), renderClose()]);
      };
    }
  });

  function ownKeys$1K(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1J(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1K(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1K(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var DEFAULT_Z_INDEX$1 = 6e3;

  var getUniqueId = function () {
    var id = 0;
    return function () {
      id += 1;
      return id;
    };
  }();

  var MessageList = vue.defineComponent({
    name: "TMessageList",
    props: {
      zIndex: {
        type: Number,
        "default": 0
      },
      placement: {
        type: String,
        "default": ""
      }
    },
    setup: function setup(props, _ref) {
      var expose = _ref.expose;
      var list = vue.ref([]);
      var messageList = vue.ref([]);
      var styles = vue.computed(function () {
        return _objectSpread$1J(_objectSpread$1J({}, PLACEMENT_OFFSET$1[props.placement]), {}, {
          zIndex: props.zIndex !== DEFAULT_Z_INDEX$1 ? props.zIndex : DEFAULT_Z_INDEX$1
        });
      });

      var add = function add(msg) {
        var mg = _objectSpread$1J(_objectSpread$1J({}, msg), {}, {
          key: getUniqueId()
        });

        list.value.push(mg);
        return list.value.length - 1;
      };

      var remove = function remove(index) {
        list.value.splice(index, 1);
      };

      var removeAll = function removeAll() {
        list.value = [];
      };

      var getOffset = function getOffset(val) {
        if (!val) return;
        return isNaN(Number(val)) ? val : "".concat(val, "px");
      };

      var msgStyles = function msgStyles(item) {
        return item.offset && {
          position: "relative",
          left: getOffset(item.offset[0]),
          top: getOffset(item.offset[1])
        };
      };

      var getProps = function getProps(index, item) {
        return _objectSpread$1J(_objectSpread$1J({}, item), {}, {
          onCloseBtnClick: function onCloseBtnClick(e) {
            if (item.onCloseBtnClick) {
              item.onCloseBtnClick(e);
            }

            return remove(index);
          },
          onDurationEnd: function onDurationEnd() {
            if (item.onDurationEnd) {
              item.onDurationEnd();
            }

            return remove(index);
          }
        });
      };

      var addChild = function addChild(el) {
        if (el) {
          messageList.value.push(el);
        }
      };

      expose({
        add: add,
        removeAll: removeAll,
        list: list,
        messageList: messageList
      });
      return function () {
        if (!list.value.length) return;
        return vue.createVNode("div", {
          "class": "t-message__list",
          "style": styles.value
        }, [list.value.map(function (item, index) {
          return vue.createVNode(_Message, vue.mergeProps({
            "key": item.key,
            "style": msgStyles(item),
            "ref": addChild
          }, getProps(index, item)), null);
        })]);
      };
    }
  });

  function ownKeys$1J(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1I(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1J(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1J(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var instanceMap$1 = /* @__PURE__ */new Map();

  function handleParams(params) {
    var options = _objectSpread$1I({
      duration: 3e3,
      attach: "body",
      zIndex: DEFAULT_Z_INDEX$1,
      placement: "top"
    }, params);

    options.content = params.content;
    return options;
  }

  var MessageFunction = function MessageFunction(props) {
    var options = handleParams(props);
    var attach = options.attach,
        placement = options.placement;
    var attachDom = getAttach(attach);

    if (!instanceMap$1.get(attachDom)) {
      instanceMap$1.set(attachDom, {});
    }

    var p = instanceMap$1.get(attachDom)[placement];

    if (!p) {
      var wrapper = document.createElement("div");
      var instance = vue.createApp(MessageList, {
        zIndex: options.zIndex,
        placement: options.placement
      }).mount(wrapper);
      instance.add(options);
      instanceMap$1.get(attachDom)[placement] = instance;
      attachDom.appendChild(wrapper);
    } else {
      p.add(options);
    }

    return new Promise(function (resolve) {
      var ins = instanceMap$1.get(attachDom)[placement];
      vue.nextTick(function () {
        var msg = ins.messageList;
        resolve(msg[msg.length - 1]);
      });
    });
  };

  var showThemeMessage = function showThemeMessage(theme, params, duration) {
    var options = {
      theme: theme
    };

    if (typeof params === "string") {
      options.content = params;
    } else if (_typeof$2(params) === "object" && !(params instanceof Array)) {
      options = _objectSpread$1I(_objectSpread$1I({}, options), params);
    }

    (duration || duration === 0) && (options.duration = duration);
    return MessageFunction(options);
  };

  var extraApi$2 = {
    info: function info(params, duration) {
      return showThemeMessage("info", params, duration);
    },
    success: function success(params, duration) {
      return showThemeMessage("success", params, duration);
    },
    warning: function warning(params, duration) {
      return showThemeMessage("warning", params, duration);
    },
    error: function error(params, duration) {
      return showThemeMessage("error", params, duration);
    },
    question: function question(params, duration) {
      return showThemeMessage("question", params, duration);
    },
    loading: function loading(params, duration) {
      return showThemeMessage("loading", params, duration);
    },
    close: function close(promise) {
      promise.then(function (instance) {
        return instance.close();
      });
    },
    closeAll: function closeAll() {
      if (instanceMap$1 instanceof Map) {
        instanceMap$1.forEach(function (attach) {
          Object.keys(attach).forEach(function (placement) {
            var instance = attach[placement];
            instance.list = [];
          });
        });
      }
    }
  };
  var MessagePlugin = showThemeMessage;

  MessagePlugin.install = function (app) {
    app.config.globalProperties.$message = showThemeMessage;
    Object.keys(extraApi$2).forEach(function (funcName) {
      app.config.globalProperties.$message[funcName] = extraApi$2[funcName];
    });
  };

  Object.keys(extraApi$2).forEach(function (funcName) {
    MessagePlugin[funcName] = extraApi$2[funcName];
  });

  var props$Y = {
    id: {
      type: String,
      "default": "",
      required: true
    },
    tag: {
      type: String,
      "default": "div"
    }
  };

  var _AnchorTarget = vue.defineComponent({
    name: "TAnchorTarget",
    props: props$Y,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;

      var _useConfig = useConfig("anchor"),
          global = _useConfig.global,
          classPrefix = _useConfig.classPrefix;

      var COMPONENT_NAME = usePrefixClass("anchor");

      var toCopyText = function toCopyText() {
        var a = document.createElement("a");
        a.href = "#".concat(props2.id);
        copyText(a.href);
        MessagePlugin.success(global.value.copySuccessText, 1e3);
      };

      return function () {
        var children = slots["default"];
        var TAG = props2.tag,
            id = props2.id;
        var className = ["".concat(COMPONENT_NAME.value, "__target")];
        var iconClassName = "".concat(classPrefix.value, "-copy");
        return vue.createVNode(TAG, {
          "id": id,
          "class": className
        }, {
          "default": function _default() {
            return [children && children(null), vue.createVNode(vue.resolveComponent("t-popup"), {
              "content": global.value.copyText,
              "placement": "top",
              "showArrow": true,
              "class": iconClassName
            }, {
              "default": function _default() {
                return [vue.createVNode(fileCopy, {
                  "onClick": toCopyText
                }, null)];
              }
            })];
          }
        });
      };
    }
  });

  var Anchor = withInstall(_Anchor);
  var AnchorItem = withInstall(_AnchorItem);
  var AnchorTarget = withInstall(_AnchorTarget);

  var props$X = {
    maxItemWidth: {
      type: String,
      "default": void 0
    },
    options: {
      type: Array
    },
    separator: {
      type: [String, Function]
    },
    theme: {
      type: String,
      "default": "light",
      validator: function validator(val) {
        return ["light"].includes(val);
      }
    }
  };

  var props$W = {
    content: {
      type: [String, Number, Function]
    },
    "default": {
      type: [String, Number, Function]
    },
    disabled: Boolean,
    href: {
      type: String,
      "default": ""
    },
    maxWidth: {
      type: String,
      "default": void 0
    },
    replace: Boolean,
    router: {
      type: Object
    },
    target: {
      type: String,
      "default": "_self",
      validator: function validator(val) {
        return ["_blank", "_self", "_parent", "_top"].includes(val);
      }
    },
    to: {
      type: [String, Object]
    }
  };

  var props$V = {
    delay: {
      type: Number
    },
    destroyOnClose: {
      type: Boolean,
      "default": true
    },
    duration: {
      type: Number
    },
    placement: {
      type: String,
      "default": "top"
    },
    showArrow: {
      type: Boolean,
      "default": true
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "primary", "success", "danger", "warning", "light"].includes(val);
      }
    }
  };

  var popupProps = {
    attach: {
      type: [String, Function],
      "default": "body"
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    destroyOnClose: Boolean,
    disabled: Boolean,
    hideEmptyPopup: Boolean,
    overlayClassName: {
      type: [String, Object, Array]
    },
    overlayStyle: {
      type: [Boolean, Object, Function]
    },
    placement: {
      type: String,
      "default": "top"
    },
    showArrow: Boolean,
    trigger: {
      type: String,
      "default": "hover",
      validator: function validator(val) {
        if (!val) return true;
        return ["hover", "click", "focus", "context-menu"].includes(val);
      }
    },
    triggerElement: {
      type: [String, Function]
    },
    visible: {
      type: Boolean,
      "default": void 0
    },
    modelValue: {
      type: Boolean,
      "default": void 0
    },
    defaultVisible: Boolean,
    zIndex: {
      type: Number
    },
    onScroll: Function,
    onVisibleChange: Function
  };

  var top = 'top';
  var bottom = 'bottom';
  var right = 'right';
  var left = 'left';
  var auto = 'auto';
  var basePlacements = [top, bottom, right, left];
  var start = 'start';
  var end = 'end';
  var clippingParents = 'clippingParents';
  var viewport = 'viewport';
  var popper = 'popper';
  var reference = 'reference';
  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []); // modifiers that need to read the DOM

  var beforeRead = 'beforeRead';
  var read = 'read';
  var afterRead = 'afterRead'; // pure-logic modifiers

  var beforeMain = 'beforeMain';
  var main = 'main';
  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

  var beforeWrite = 'beforeWrite';
  var write = 'write';
  var afterWrite = 'afterWrite';
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
  }

  function getWindow(node) {
    if (node == null) {
      return window;
    }

    if (node.toString() !== '[object Window]') {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }

    return node;
  }

  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }

  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }

  function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
      return false;
    }

    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // and applies them to the HTMLElements such as popper and arrow

  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name]; // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      } // Flow doesn't support to extend this property, but it's the most
      // effective way to apply styles to an HTMLElement
      // $FlowFixMe[cannot-write]


      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (name) {
        var value = attributes[name];

        if (value === false) {
          element.removeAttribute(name);
        } else {
          element.setAttribute(name, value === true ? '' : value);
        }
      });
    });
  }

  function effect$2(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: '0',
        top: '0',
        margin: '0'
      },
      arrow: {
        position: 'absolute'
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;

    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }

    return function () {
      Object.keys(state.elements).forEach(function (name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

        var style = styleProperties.reduce(function (style, property) {
          style[property] = '';
          return style;
        }, {}); // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }

        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  } // eslint-disable-next-line import/no-unused-modules


  var applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect$2,
    requires: ['computeStyles']
  };

  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }

  var max = Math.max;
  var min$1 = Math.min;
  var round = Math.round;

  function getBoundingClientRect(element, includeScale) {
    if (includeScale === void 0) {
      includeScale = false;
    }

    var rect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;

    if (isHTMLElement(element) && includeScale) {
      var offsetHeight = element.offsetHeight;
      var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
      // Fallback to 1 in case both values are `0`

      if (offsetWidth > 0) {
        scaleX = round(rect.width) / offsetWidth || 1;
      }

      if (offsetHeight > 0) {
        scaleY = round(rect.height) / offsetHeight || 1;
      }
    }

    return {
      width: rect.width / scaleX,
      height: rect.height / scaleY,
      top: rect.top / scaleY,
      right: rect.right / scaleX,
      bottom: rect.bottom / scaleY,
      left: rect.left / scaleX,
      x: rect.left / scaleX,
      y: rect.top / scaleY
    };
  }

  // means it doesn't take into account transforms.

  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223

    var width = element.offsetWidth;
    var height = element.offsetHeight;

    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }

    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }

    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width,
      height: height
    };
  }

  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

    if (parent.contains(child)) {
      return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


    return false;
  }

  function getComputedStyle$1(element) {
    return getWindow(element).getComputedStyle(element);
  }

  function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
  }

  function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
    element.document) || window.document).documentElement;
  }

  function getParentNode(element) {
    if (getNodeName(element) === 'html') {
      return element;
    }

    return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || ( // DOM Element detected
      isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element) // fallback

    );
  }

  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle$1(element).position === 'fixed') {
      return null;
    }

    return element.offsetParent;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block


  function getContainingBlock(element) {
    var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
    var isIE = navigator.userAgent.indexOf('Trident') !== -1;

    if (isIE && isHTMLElement(element)) {
      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
      var elementCss = getComputedStyle$1(element);

      if (elementCss.position === 'fixed') {
        return null;
      }
    }

    var currentNode = getParentNode(element);

    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }

    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

      if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }

    return null;
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.


  function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);

    while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
      offsetParent = getTrueOffsetParent(offsetParent);
    }

    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {
      return window;
    }

    return offsetParent || getContainingBlock(element) || window;
  }

  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
  }

  function within(min, value, max$1) {
    return max(min, min$1(value, max$1));
  }
  function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
  }

  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  };

  function arrow(_ref) {
    var _state$modifiersData$;

    var state = _ref.state,
        name = _ref.name,
        options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';

    if (!arrowElement || !popperOffsets) {
      return;
    }

    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top : left;
    var maxProp = axis === 'y' ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds

    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within(min, center, max); // Prevents breaking syntax highlighting...

    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
  }

  function effect$1(_ref2) {
    var state = _ref2.state,
        options = _ref2.options;
    var _options$element = options.element,
        arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

    if (arrowElement == null) {
      return;
    } // CSS selector


    if (typeof arrowElement === 'string') {
      arrowElement = state.elements.popper.querySelector(arrowElement);

      if (!arrowElement) {
        return;
      }
    }

    {
      if (!isHTMLElement(arrowElement)) {
        console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
      }
    }

    if (!contains(state.elements.popper, arrowElement)) {
      {
        console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
      }

      return;
    }

    state.elements.arrow = arrowElement;
  } // eslint-disable-next-line import/no-unused-modules


  var arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect$1,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow']
  };

  function getVariation(placement) {
    return placement.split('-')[1];
  }

  var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
  }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.

  function roundOffsetsByDPR(_ref) {
    var x = _ref.x,
        y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0
    };
  }

  function mapToStyles(_ref2) {
    var _Object$assign2;

    var popper = _ref2.popper,
        popperRect = _ref2.popperRect,
        placement = _ref2.placement,
        variation = _ref2.variation,
        offsets = _ref2.offsets,
        position = _ref2.position,
        gpuAcceleration = _ref2.gpuAcceleration,
        adaptive = _ref2.adaptive,
        roundOffsets = _ref2.roundOffsets,
        isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x,
        x = _offsets$x === void 0 ? 0 : _offsets$x,
        _offsets$y = offsets.y,
        y = _offsets$y === void 0 ? 0 : _offsets$y;

    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };

    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left;
    var sideY = top;
    var win = window;

    if (adaptive) {
      var offsetParent = getOffsetParent(popper);
      var heightProp = 'clientHeight';
      var widthProp = 'clientWidth';

      if (offsetParent === getWindow(popper)) {
        offsetParent = getDocumentElement(popper);

        if (getComputedStyle$1(offsetParent).position !== 'static' && position === 'absolute') {
          heightProp = 'scrollHeight';
          widthProp = 'scrollWidth';
        }
      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


      offsetParent = offsetParent;

      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
        offsetParent[heightProp];
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }

      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
        offsetParent[widthProp];
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }

    var commonStyles = Object.assign({
      position: position
    }, adaptive && unsetSides);

    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };

    x = _ref4.x;
    y = _ref4.y;

    if (gpuAcceleration) {
      var _Object$assign;

      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }

    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
  }

  function computeStyles(_ref5) {
    var state = _ref5.state,
        options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration,
        gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
        _options$adaptive = options.adaptive,
        adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
        _options$roundOffsets = options.roundOffsets,
        roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

    {
      var transitionProperty = getComputedStyle$1(state.elements.popper).transitionProperty || '';

      if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
        return transitionProperty.indexOf(property) >= 0;
      })) {
        console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
      }
    }

    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration: gpuAcceleration,
      isFixed: state.options.strategy === 'fixed'
    };

    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
      })));
    }

    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
      })));
    }

    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-placement': state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
  };

  var passive = {
    passive: true
  };

  function effect(_ref) {
    var state = _ref.state,
        instance = _ref.instance,
        options = _ref.options;
    var _options$scroll = options.scroll,
        scroll = _options$scroll === void 0 ? true : _options$scroll,
        _options$resize = options.resize,
        resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.addEventListener('resize', instance.update, passive);
    }

    return function () {
      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.removeEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.removeEventListener('resize', instance.update, passive);
      }
    };
  } // eslint-disable-next-line import/no-unused-modules


  var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect,
    data: {}
  };

  var hash$1 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash$1[matched];
    });
  }

  var hash = {
    start: 'end',
    end: 'start'
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
      return hash[matched];
    });
  }

  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop
    };
  }

  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  function getViewportRect(element) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
    // can be obscured underneath it.
    // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
    // if it isn't open, so if this isn't available, the popper will be detected
    // to overflow the bottom of the screen too early.

    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
      // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
      // errors due to floating point numbers, so we need to check precision.
      // Safari returns a number <= 0, usually < -1 when pinch-zoomed
      // Feature detection fails in mobile emulation mode in Chrome.
      // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
      // 0.001
      // Fallback here: "Not Safari" userAgent

      if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }

    return {
      width: width,
      height: height,
      x: x + getWindowScrollBarX(element),
      y: y
    };
  }

  // of the `<html>` and `<body>` rect bounds if horizontally scrollable

  function getDocumentRect(element) {
    var _element$ownerDocumen;

    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;

    if (getComputedStyle$1(body || html).direction === 'rtl') {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }

    return {
      width: width,
      height: height,
      x: x,
      y: y
    };
  }

  function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle$1(element),
        overflow = _getComputedStyle.overflow,
        overflowX = _getComputedStyle.overflowX,
        overflowY = _getComputedStyle.overflowY;

    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  function getScrollParent(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return node.ownerDocument.body;
    }

    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }

    return getScrollParent(getParentNode(node));
  }

  /*
  given a DOM element, return the list of all scroll parents, up the list of ancesors
  until we get to the top window object. This list is what we attach scroll listeners
  to, because if any of these parent elements scroll, we'll need to re-calculate the
  reference element's position.
  */

  function listScrollParents(element, list) {
    var _element$ownerDocumen;

    if (list === void 0) {
      list = [];
    }

    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)));
  }

  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  function getInnerBoundingClientRect(element) {
    var rect = getBoundingClientRect(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }

  function getClientRectFromMixedType(element, clippingParent) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`


  function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

    if (!isElement(clipperElement)) {
      return [];
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


    return clippingParents.filter(function (clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    });
  } // Gets the maximum area that the element is visible in due to any number of
  // clipping parents


  function getClippingRect(element, boundary, rootBoundary) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min$1(rect.right, accRect.right);
      accRect.bottom = min$1(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  function computeOffsets(_ref) {
    var reference = _ref.reference,
        element = _ref.element,
        placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;

    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference.y - element.height
        };
        break;

      case bottom:
        offsets = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;

      case right:
        offsets = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;

      case left:
        offsets = {
          x: reference.x - element.width,
          y: commonY
        };
        break;

      default:
        offsets = {
          x: reference.x,
          y: reference.y
        };
    }

    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

    if (mainAxis != null) {
      var len = mainAxis === 'y' ? 'height' : 'width';

      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
          break;

        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
          break;
      }
    }

    return offsets;
  }

  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$placement = _options.placement,
        placement = _options$placement === void 0 ? state.placement : _options$placement,
        _options$boundary = _options.boundary,
        boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
        _options$rootBoundary = _options.rootBoundary,
        rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
        _options$elementConte = _options.elementContext,
        elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
        _options$altBoundary = _options.altBoundary,
        altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
        _options$padding = _options.padding,
        padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: 'absolute',
      placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect

    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

    if (elementContext === popper && offsetData) {
      var offset = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function (key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
        overflowOffsets[key] += offset[axis] * multiply;
      });
    }

    return overflowOffsets;
  }

  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        placement = _options.placement,
        boundary = _options.boundary,
        rootBoundary = _options.rootBoundary,
        padding = _options.padding,
        flipVariations = _options.flipVariations,
        _options$allowedAutoP = _options.allowedAutoPlacements,
        allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
      return getVariation(placement) === variation;
    }) : basePlacements;
    var allowedPlacements = placements$1.filter(function (placement) {
      return allowedAutoPlacements.indexOf(placement) >= 0;
    });

    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1;

      {
        console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
      }
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


    var overflows = allowedPlacements.reduce(function (acc, placement) {
      acc[placement] = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding
      })[getBasePlacement(placement)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
      return overflows[a] - overflows[b];
    });
  }

  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }

    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }

  function flip(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;

    if (state.modifiersData[name]._skip) {
      return;
    }

    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
        specifiedFallbackPlacements = options.fallbackPlacements,
        padding = options.padding,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        _options$flipVariatio = options.flipVariations,
        flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
        allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
      return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        flipVariations: flipVariations,
        allowedAutoPlacements: allowedAutoPlacements
      }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];

    for (var i = 0; i < placements.length; i++) {
      var placement = placements[i];

      var _basePlacement = getBasePlacement(placement);

      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? 'width' : 'height';
      var overflow = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        altBoundary: altBoundary,
        padding: padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }

      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];

      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }

      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }

      if (checks.every(function (check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }

      checksMap.set(placement, checks);
    }

    if (makeFallbackChecks) {
      // `2` may be desired in some cases – research later
      var numberOfChecks = flipVariations ? 3 : 1;

      var _loop = function _loop(_i) {
        var fittingPlacement = placements.find(function (placement) {
          var checks = checksMap.get(placement);

          if (checks) {
            return checks.slice(0, _i).every(function (check) {
              return check;
            });
          }
        });

        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };

      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);

        if (_ret === "break") break;
      }
    }

    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  } // eslint-disable-next-line import/no-unused-modules


  var flip$1 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: ['offset'],
    data: {
      _skip: false
    }
  };

  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }

    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }

  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function (side) {
      return overflow[side] >= 0;
    });
  }

  function hide(_ref) {
    var state = _ref.state,
        name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets: referenceClippingOffsets,
      popperEscapeOffsets: popperEscapeOffsets,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-reference-hidden': isReferenceHidden,
      'data-popper-escaped': hasPopperEscaped
    });
  } // eslint-disable-next-line import/no-unused-modules


  var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide
  };

  function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
      placement: placement
    })) : offset,
        skidding = _ref[0],
        distance = _ref[1];

    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }

  function offset(_ref2) {
    var state = _ref2.state,
        options = _ref2.options,
        name = _ref2.name;
    var _options$offset = options.offset,
        offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function (acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement],
        x = _data$state$placement.x,
        y = _data$state$placement.y;

    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset
  };

  function popperOffsets(_ref) {
    var state = _ref.state,
        name = _ref.name; // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step

    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: 'absolute',
      placement: state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
  };

  function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  function preventOverflow(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;
    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        padding = options.padding,
        _options$tether = options.tether,
        tether = _options$tether === void 0 ? true : _options$tether,
        _options$tetherOffset = options.tetherOffset,
        tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };

    if (!popperOffsets) {
      return;
    }

    if (checkMainAxis) {
      var _offsetModifierState$;

      var mainSide = mainAxis === 'y' ? top : left;
      var altSide = mainAxis === 'y' ? bottom : right;
      var len = mainAxis === 'y' ? 'height' : 'width';
      var offset = popperOffsets[mainAxis];
      var min = offset + overflow[mainSide];
      var max$1 = offset - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
      // outside the reference bounds

      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
      // to include its full size in the calculation. If the reference is small
      // and near the edge of a boundary, the popper can overflow even if the
      // reference is not overflowing as well (e.g. virtual elements with no
      // width or height)

      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min$1(min, tetherMin) : min, offset, tether ? max(max$1, tetherMax) : max$1);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }

    if (checkAltAxis) {
      var _offsetModifierState$2;

      var _mainSide = mainAxis === 'x' ? top : left;

      var _altSide = mainAxis === 'x' ? bottom : right;

      var _offset = popperOffsets[altAxis];

      var _len = altAxis === 'y' ? 'height' : 'width';

      var _min = _offset + overflow[_mainSide];

      var _max = _offset - overflow[_altSide];

      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset']
  };

  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  } // Returns the composite rect of an element relative to its offsetParent.
  // Composite means it takes into account transforms as well as layout.


  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }

    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };

    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }

      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }

    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
      map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively

    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function (dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);

          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }

    modifiers.forEach(function (modifier) {
      if (!visited.has(modifier.name)) {
        // check for visited object
        sort(modifier);
      }
    });
    return result;
  }

  function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase

    return modifierPhases.reduce(function (acc, phase) {
      return acc.concat(orderedModifiers.filter(function (modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  function debounce$2(fn) {
    var pending;
    return function () {
      if (!pending) {
        pending = new Promise(function (resolve) {
          Promise.resolve().then(function () {
            pending = undefined;
            resolve(fn());
          });
        });
      }

      return pending;
    };
  }

  function format(str) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return [].concat(args).reduce(function (p, c) {
      return p.replace(/%s/, c);
    }, str);
  }

  var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
  var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
  var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
  function validateModifiers(modifiers) {
    modifiers.forEach(function (modifier) {
      [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
      .filter(function (value, index, self) {
        return self.indexOf(value) === index;
      }).forEach(function (key) {
        switch (key) {
          case 'name':
            if (typeof modifier.name !== 'string') {
              console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
            }

            break;

          case 'enabled':
            if (typeof modifier.enabled !== 'boolean') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
            }

            break;

          case 'phase':
            if (modifierPhases.indexOf(modifier.phase) < 0) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
            }

            break;

          case 'fn':
            if (typeof modifier.fn !== 'function') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
            }

            break;

          case 'effect':
            if (modifier.effect != null && typeof modifier.effect !== 'function') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
            }

            break;

          case 'requires':
            if (modifier.requires != null && !Array.isArray(modifier.requires)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
            }

            break;

          case 'requiresIfExists':
            if (!Array.isArray(modifier.requiresIfExists)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
            }

            break;

          case 'options':
          case 'data':
            break;

          default:
            console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
              return "\"" + s + "\"";
            }).join(', ') + "; but \"" + key + "\" was provided.");
        }

        modifier.requires && modifier.requires.forEach(function (requirement) {
          if (modifiers.find(function (mod) {
            return mod.name === requirement;
          }) == null) {
            console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
          }
        });
      });
    });
  }

  function uniqueBy(arr, fn) {
    var identifiers = new Set();
    return arr.filter(function (item) {
      var identifier = fn(item);

      if (!identifiers.has(identifier)) {
        identifiers.add(identifier);
        return true;
      }
    });
  }

  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
      var existing = merged[current.name];
      merged[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged;
    }, {}); // IE11 does not support Object.values

    return Object.keys(merged).map(function (key) {
      return merged[key];
    });
  }

  var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
  var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
  var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
  };

  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return !args.some(function (element) {
      return !(element && typeof element.getBoundingClientRect === 'function');
    });
  }

  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }

    var _generatorOptions = generatorOptions,
        _generatorOptions$def = _generatorOptions.defaultModifiers,
        defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
        _generatorOptions$def2 = _generatorOptions.defaultOptions,
        defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
      if (options === void 0) {
        options = defaultOptions;
      }

      var state = {
        placement: 'bottom',
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference,
          popper: popper
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state: state,
        setOptions: function setOptions(setOptionsAction) {
          var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options);
          state.scrollParents = {
            reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
            popper: listScrollParents(popper)
          }; // Orders the modifiers based on their dependencies and `phase`
          // properties

          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

          state.orderedModifiers = orderedModifiers.filter(function (m) {
            return m.enabled;
          }); // Validate the provided modifiers so that the consumer will get warned
          // if one of the modifiers is invalid for any reason

          {
            var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
              var name = _ref.name;
              return name;
            });
            validateModifiers(modifiers);

            if (getBasePlacement(state.options.placement) === auto) {
              var flipModifier = state.orderedModifiers.find(function (_ref2) {
                var name = _ref2.name;
                return name === 'flip';
              });

              if (!flipModifier) {
                console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
              }
            }

            var _getComputedStyle = getComputedStyle$1(popper),
                marginTop = _getComputedStyle.marginTop,
                marginRight = _getComputedStyle.marginRight,
                marginBottom = _getComputedStyle.marginBottom,
                marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
            // cause bugs with positioning, so we'll warn the consumer


            if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
              return parseFloat(margin);
            })) {
              console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
            }
          }

          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }

          var _state$elements = state.elements,
              reference = _state$elements.reference,
              popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
          // anymore

          if (!areValidElements(reference, popper)) {
            {
              console.error(INVALID_ELEMENT_ERROR);
            }

            return;
          } // Store the reference and popper rects to be read by modifiers


          state.rects = {
            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
            popper: getLayoutRect(popper)
          }; // Modifiers have the ability to reset the current update cycle. The
          // most common use case for this is the `flip` modifier changing the
          // placement, which then needs to re-run all the modifiers, because the
          // logic was previously ran for the previous placement and is therefore
          // stale/incorrect

          state.reset = false;
          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
          // is filled with the initial data specified by the modifier. This means
          // it doesn't persist and is fresh on each update.
          // To ensure persistent data, use `${name}#persistent`

          state.orderedModifiers.forEach(function (modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          var __debug_loops__ = 0;

          for (var index = 0; index < state.orderedModifiers.length; index++) {
            {
              __debug_loops__ += 1;

              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR);
                break;
              }
            }

            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }

            var _state$orderedModifie = state.orderedModifiers[index],
                fn = _state$orderedModifie.fn,
                _state$orderedModifie2 = _state$orderedModifie.options,
                _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                name = _state$orderedModifie.name;

            if (typeof fn === 'function') {
              state = fn({
                state: state,
                options: _options,
                name: name,
                instance: instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce$2(function () {
          return new Promise(function (resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };

      if (!areValidElements(reference, popper)) {
        {
          console.error(INVALID_ELEMENT_ERROR);
        }

        return instance;
      }

      instance.setOptions(options).then(function (state) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state);
        }
      }); // Modifiers have the ability to execute arbitrary code before the first
      // update cycle runs. They will be executed in the same order as the update
      // cycle. This is useful when a modifier adds some persistent data that
      // other modifiers need to use, but the modifier is run after the dependent
      // one.

      function runModifierEffects() {
        state.orderedModifiers.forEach(function (_ref3) {
          var name = _ref3.name,
              _ref3$options = _ref3.options,
              options = _ref3$options === void 0 ? {} : _ref3$options,
              effect = _ref3.effect;

          if (typeof effect === 'function') {
            var cleanupFn = effect({
              state: state,
              name: name,
              instance: instance,
              options: options
            });

            var noopFn = function noopFn() {};

            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }

      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function (fn) {
          return fn();
        });
        effectCleanupFns = [];
      }

      return instance;
    };
  }

  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
  var createPopper = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers
  }); // eslint-disable-next-line import/no-unused-modules

  function _isSlot$r(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  function filterEmpty() {
    var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var vnodes = [];
    children.forEach(function (child) {
      if (Array.isArray(child)) {
        vnodes.push.apply(vnodes, _toConsumableArray(child));
      } else if (child.type === vue.Fragment) {
        vnodes.push.apply(vnodes, _toConsumableArray(filterEmpty(child.children)));
      } else {
        vnodes.push(child);
      }
    });
    return vnodes.filter(function (c) {
      return !(c && (typeof Comment !== "undefined" && c.type === Comment || c.type === vue.Fragment && c.children.length === 0 || c.type === vue.Text && c.children.trim() === ""));
    });
  }

  function isContentRectChanged(rect1, rect2) {
    if (!rect1 || !rect2) return;

    if (["width", "height", "x", "y"].some(function (k) {
      return rect1[k] !== rect2[k];
    })) {
      return true;
    }

    return false;
  }

  function observeResize(elm, cb) {
    var _window;

    if (!((_window = window) !== null && _window !== void 0 && _window.ResizeObserver) || !elm) return;
    var prevContentRect = null;
    var ro = new ResizeObserver(function () {
      var entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      var _ref = entries[0] || {},
          contentRect = _ref.contentRect;

      if (isContentRectChanged(contentRect, prevContentRect)) {
        prevContentRect = contentRect;
        cb(contentRect);
        return;
      }

      if (!prevContentRect) {
        prevContentRect = contentRect;
      }
    });
    ro.observe(elm);
    return function () {
      ro.unobserve(elm);
    };
  }

  function useObserveResize(elm, cb) {
    var cleanOR;
    vue.onMounted(function () {
      cleanOR = observeResize(elm(), cb);
    });
    vue.onUnmounted(function () {
      var _cleanOR;

      (_cleanOR = cleanOR) === null || _cleanOR === void 0 ? void 0 : _cleanOR();
    });
  }

  var Trigger = vue.defineComponent({
    emits: ["resize"],
    data: function data() {
      return {
        cleanOR: null
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.cleanOR = observeResize(this.$el, function () {
        _this.$emit("resize");
      });
    },
    unmounted: function unmounted() {
      this.cleanOR();
    },
    render: function render() {
      var _children$;

      var children = filterEmpty(this.$slots["default"]());

      if (children.length > 1 || ((_children$ = children[0]) === null || _children$ === void 0 ? void 0 : _children$.type) === vue.Text) {
        return vue.createVNode("span", null, [children]);
      }

      return children[0];
    }
  });
  var Content = vue.defineComponent({
    emits: ["resize"],
    setup: function setup(props2, _ref2) {
      var emit = _ref2.emit;
      var el = vue.ref(null);
      useObserveResize(function () {
        return el.value.children[0];
      }, function () {
        emit("resize");
      });
      return {
        el: el
      };
    },
    render: function render() {
      return vue.createVNode("div", {
        "ref": "el",
        "style": "position: absolute; top: 0px; left: 0px; width: 100%"
      }, [this.$slots["default"]()]);
    }
  });
  var Container = vue.defineComponent({
    inheritAttrs: false,
    props: {
      parent: Object,
      visible: Boolean,
      attach: popupProps.attach,
      forwardRef: Function
    },
    emits: ["resize", "contentMounted"],
    setup: function setup(props2, _ref3) {
      var emit = _ref3.emit;
      var triggerRef = vue.ref(null);
      var mountContent = vue.ref(false);
      vue.onMounted(function () {
        mountContent.value = props2.visible;
        props2.forwardRef(triggerRef.value.$el);
      });
      vue.watch(function () {
        return props2.visible;
      }, function (visible) {
        if (visible) {
          mountContent.value = props2.visible;
        }
      });
      return {
        mountContent: mountContent,
        triggerRef: triggerRef,
        unmountContent: function unmountContent() {
          mountContent.value = false;
        },
        emitResize: function emitResize() {
          emit("resize");
        },
        emitContentMounted: function emitContentMounted() {
          emit("contentMounted");
        }
      };
    },
    render: function render() {
      var _this2 = this;

      var _slot;

      return vue.createVNode(vue.Fragment, null, [vue.createVNode(Trigger, vue.mergeProps({
        "class": this.$attrs["class"]
      }, {
        "ref": "triggerRef",
        "onResize": this.emitResize
      }), _isSlot$r(_slot = this.$slots["default"]()) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      }), this.mountContent && vue.createVNode(vue.Teleport, {
        "to": getAttach(this.attach)
      }, {
        "default": function _default() {
          return [vue.createVNode(Content, {
            "onResize": _this2.emitResize,
            "onVnodeMounted": _this2.emitContentMounted
          }, {
            "default": function _default() {
              return [_this2.$slots.content && _this2.$slots.content()];
            }
          })];
        }
      })]);
    }
  });

  function useVModel(value, modelValue, defaultValue, onChange) {
    var propName = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "value";

    var _getCurrentInstance = vue.getCurrentInstance(),
        emit = _getCurrentInstance.emit,
        attrs = _getCurrentInstance.attrs;

    var internalValue = vue.ref();
    internalValue.value = defaultValue;

    if (typeof value.value !== "undefined") {
      internalValue.value = value.value;
    } else if (typeof modelValue.value !== "undefined") {
      internalValue.value = modelValue.value;
    }

    vue.watch(value, function (newVal) {
      internalValue.value = newVal;
    });
    vue.watch(modelValue, function (newVal) {
      internalValue.value = newVal;
    });
    return [internalValue, function (newValue) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (attrs["onUpdate:".concat(propName)]) {
        emit === null || emit === void 0 ? void 0 : emit.apply(void 0, ["update:".concat(propName), newValue].concat(args));
      } else if (attrs["onUpdate:modelValue"]) {
        emit === null || emit === void 0 ? void 0 : emit.apply(void 0, ["update:modelValue", newValue].concat(args));
      }

      if (typeof value.value === "undefined" && typeof modelValue.value === "undefined") {
        internalValue.value = newValue;
      }

      onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));
    }];
  }

  function ownKeys$1I(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1H(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1I(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1I(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot$q(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var showTimeout = 250;
  var hideTimeout = 150;
  var triggers = ["click", "hover", "focus", "context-menu"];
  var injectionKey = Symbol("popup");

  function getPopperPlacement(placement) {
    return placement.replace(/-(left|top)$/, "-start").replace(/-(right|bottom)$/, "-end");
  }

  var _Popup = vue.defineComponent({
    name: "TPopup",
    props: _objectSpread$1H(_objectSpread$1H({}, popupProps), {}, {
      expandAnimation: {
        type: Boolean
      }
    }),
    setup: function setup(props2, _ref) {
      var expose = _ref.expose;

      var _toRefs = vue.toRefs(props2),
          visible = _toRefs.visible,
          modelValue = _toRefs.modelValue;

      var _useVModel = useVModel(visible, modelValue, props2.defaultVisible, props2.onVisibleChange, "visible"),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          innerVisible = _useVModel2[0],
          setInnerVisible = _useVModel2[1];

      var popper;
      var timeoutId;
      var hasDocumentEvent = false;
      var visibleState = vue.ref(0);
      var mouseInRange = vue.ref(false);
      var contentClicked = vue.ref(false);
      var triggerClicked = vue.ref(false);
      var triggerEl = vue.ref(null);
      var overlayEl = vue.ref(null);
      var popperEl = vue.ref(null);
      var containerRef = vue.ref(null);
      var parent = vue.inject(injectionKey, void 0);
      var prefixCls = usePrefixClass("popup");

      var _useCommonClassName = useCommonClassName$2(),
          commonCls = _useCommonClassName.STATUS;

      var overlayCls = vue.computed(function () {
        var _ref2;

        return ["".concat(prefixCls.value, "__content"), (_ref2 = {}, _defineProperty$3(_ref2, "".concat(prefixCls.value, "__content--text"), typeof props2.content === "string"), _defineProperty$3(_ref2, "".concat(prefixCls.value, "__content--arrow"), props2.showArrow), _defineProperty$3(_ref2, commonCls.value.disabled, props2.disabled), _ref2), props2.overlayClassName];
      });
      var hasTrigger = vue.computed(function () {
        return triggers.reduce(function (map, trigger) {
          return _objectSpread$1H(_objectSpread$1H({}, map), {}, _defineProperty$3({}, trigger, props2.trigger.includes(trigger)));
        }, {});
      });

      function updateOverlayStyle() {
        var overlayStyle = props2.overlayStyle;
        if (!triggerEl.value || !overlayEl.value) return;

        if (typeof overlayStyle === "function") {
          setStyle$1(overlayEl.value, overlayStyle(triggerEl.value, overlayEl.value));
        } else if (_typeof$2(overlayStyle) === "object") {
          setStyle$1(overlayEl.value, overlayStyle);
        }
      }

      function updatePopper() {
        if (!popperEl.value || !innerVisible.value) return;

        if (popper) {
          popper.update();
          return;
        }

        popper = createPopper(triggerEl.value, popperEl.value, {
          placement: getPopperPlacement(props2.placement),
          onFirstUpdate: function onFirstUpdate() {
            vue.nextTick(updatePopper);
          }
        });
      }

      function destroyPopper() {
        if (popper) {
          var _popper;

          (_popper = popper) === null || _popper === void 0 ? void 0 : _popper.destroy();
          popper = null;
        }

        if (props2.destroyOnClose) {
          var _containerRef$value;

          (_containerRef$value = containerRef.value) === null || _containerRef$value === void 0 ? void 0 : _containerRef$value.unmountContent();
        }
      }

      function emitVisible(visible2, context) {
        if (props2.disabled || visible2 === innerVisible.value) return;
        if (!visible2 && visibleState.value > 1) return;
        if (visible2 && mouseInRange.value) return;
        setInnerVisible(visible2, context);
      }

      function preventClosing(preventing) {
        parent === null || parent === void 0 ? void 0 : parent.preventClosing(preventing);

        if (preventing) {
          visibleState.value += 1;
        } else if (visibleState.value) {
          visibleState.value -= 1;

          if (!visibleState.value) {
            emitVisible(false, {});

            if (parent !== null && parent !== void 0 && parent.hasTrigger.value.hover && !(parent !== null && parent !== void 0 && parent.mouseInRange)) {
              parent.emitVisible(false, {});
            }
          }
        }
      }

      function handleToggle(context) {
        emitVisible(!innerVisible.value, context);
      }

      function handleOpen(context) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(function () {
          emitVisible(true, context);
        }, hasTrigger.value.click ? 0 : showTimeout);
      }

      function handleClose(context) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(function () {
          emitVisible(false, context);
        }, hasTrigger.value.click ? 0 : hideTimeout);
      }

      function handleDocumentClick() {
        if (contentClicked.value || triggerClicked.value) {
          triggerClicked.value = false;
          setTimeout(function () {
            contentClicked.value = false;
          });
          return;
        }

        visibleState.value = 0;
        emitVisible(false, {
          trigger: "document"
        });
      }

      function onMouseEnter() {
        mouseInRange.value = true;
        handleOpen({});
      }

      function onMouseLeave(ev) {
        if (visibleState.value > 1) {
          var rect = popperEl.value.getBoundingClientRect();
          if (ev.x > rect.x && ev.x < rect.x + rect.width && ev.y > rect.y && ev.y < rect.y + rect.height) return;
        }

        mouseInRange.value = false;
        handleClose({});

        if (parent !== null && parent !== void 0 && parent.mouseInRange) {
          parent.onMouseLeave(ev);
        }
      }

      vue.onMounted(function () {
        if (hasTrigger.value.hover) {
          on$1(triggerEl.value, "mouseenter", function () {
            return handleOpen({
              trigger: "trigger-element-hover"
            });
          });
          on$1(triggerEl.value, "mouseleave", function () {
            return handleClose({
              trigger: "trigger-element-hover"
            });
          });
        } else if (hasTrigger.value.focus) {
          on$1(triggerEl.value, "focusin", function () {
            return handleOpen({
              trigger: "trigger-element-focus"
            });
          });
          on$1(triggerEl.value, "focusout", function () {
            return handleClose({
              trigger: "trigger-element-blur"
            });
          });
        } else if (hasTrigger.value.click) {
          on$1(triggerEl.value, "click", function (e) {
            visibleState.value = 0;
            handleToggle({
              e: e,
              trigger: "trigger-element-click"
            });
          });
        } else if (hasTrigger.value["context-menu"]) {
          on$1(triggerEl.value, "contextmenu", function (e) {
            e.preventDefault();
            e.button === 2 && handleToggle({
              trigger: "context-menu"
            });
          });
        }

        if (!hasTrigger.value["context-menu"]) {
          on$1(triggerEl.value, "click", function () {
            triggerClicked.value = true;
          });
        }
      });
      vue.onUnmounted(destroyPopper);
      vue.watch(function () {
        return [props2.overlayStyle, overlayEl.value];
      }, function () {
        updateOverlayStyle();

        if (popper) {
          popper.update();
        }
      });
      vue.watch(contentClicked, function (clicked) {
        if (parent) {
          parent.contentClicked.value = clicked;
        }
      });
      vue.watch(function () {
        return innerVisible.value;
      }, function (visible2) {
        if (visible2) {
          preventClosing(true);

          if (!hasDocumentEvent) {
            on$1(document, "click", handleDocumentClick);
            hasDocumentEvent = true;
          }

          if (triggerEl.value && hasTrigger.value.focus) {
            once(triggerEl.value, "keydown", function (ev) {
              if (ev.code === "Escape") {
                handleClose({
                  trigger: "keydown-esc"
                });
              }
            });
          }
        } else {
          preventClosing(false);
          off$1(document, "click", handleDocumentClick);
          hasDocumentEvent = false;
          mouseInRange.value = false;
        }
      });
      vue.provide(injectionKey, {
        preventClosing: preventClosing,
        emitVisible: emitVisible,
        contentClicked: contentClicked,
        mouseInRange: mouseInRange,
        onMouseLeave: onMouseLeave,
        hasTrigger: hasTrigger
      });
      expose({
        handleClose: handleClose,
        updatePopper: updatePopper,
        getOverlay: function getOverlay() {
          return overlayEl.value;
        }
      });
      return {
        innerVisible: innerVisible,
        triggerEl: triggerEl,
        overlayEl: overlayEl,
        popperEl: popperEl,
        prefixCls: prefixCls,
        overlayCls: overlayCls,
        hasTrigger: hasTrigger,
        contentClicked: contentClicked,
        triggerClicked: triggerClicked,
        updatePopper: updatePopper,
        destroyPopper: destroyPopper,
        updateOverlayStyle: updateOverlayStyle,
        emitVisible: emitVisible,
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave
      };
    },
    render: function render() {
      var _this = this;

      var prefixCls = this.prefixCls,
          innerVisible = this.innerVisible,
          destroyOnClose = this.destroyOnClose,
          hasTrigger = this.hasTrigger,
          _onScroll = this.onScroll;
      var content = renderTNodeJSX(this, "content");
      var hidePopup = this.hideEmptyPopup && ["", void 0, null].includes(content);
      var overlay = innerVisible || !destroyOnClose ? vue.withDirectives(vue.createVNode("div", vue.mergeProps({
        "class": prefixCls,
        "ref": "popperEl",
        "style": [hidePopup && {
          visibility: "hidden",
          pointerEvents: "none"
        }, {
          zIndex: this.zIndex
        }],
        "onMousedown": function onMousedown() {
          _this.contentClicked = true;
        },
        "onMouseup": function onMouseup() {
          setTimeout(function () {
            _this.contentClicked = false;
          });
        }
      }, hasTrigger.hover && {
        onMouseenter: this.onMouseEnter,
        onMouseleave: this.onMouseLeave
      }), [vue.createVNode("div", vue.mergeProps({
        "class": this.overlayCls,
        "ref": "overlayEl"
      }, _onScroll && {
        onScroll: function onScroll(e) {
          _onScroll({
            e: e
          });
        }
      }), [content, this.showArrow && vue.createVNode("div", {
        "class": "".concat(prefixCls, "__arrow")
      }, null)])]), [[vue.vShow, innerVisible]]) : null;
      return vue.createVNode(Container, {
        "ref": "containerRef",
        "forwardRef": function forwardRef(ref2) {
          return _this.triggerEl = ref2;
        },
        "onContentMounted": function onContentMounted() {
          if (innerVisible) {
            _this.updatePopper();

            _this.updateOverlayStyle();
          }
        },
        "onResize": function onResize() {
          if (innerVisible) {
            _this.updatePopper();
          }
        },
        "visible": innerVisible,
        "attach": this.attach
      }, {
        content: function content() {
          return vue.createVNode(vue.Transition, {
            "name": _this.expandAnimation ? "".concat(prefixCls, "--animation-expand") : "".concat(prefixCls, "--animation"),
            "appear": true,
            "onEnter": _this.updatePopper,
            "onAfterLeave": _this.destroyPopper
          }, _isSlot$q(overlay) ? overlay : {
            "default": function _default() {
              return [overlay];
            }
          });
        },
        "default": function _default() {
          return renderContent(_this, "default", "triggerElement");
        }
      });
    }
  });

  var Popup = withInstall(_Popup);

  var useMouse = function useMouse() {
    var x = vue.ref(0);
    var y = vue.ref(0);

    var onMouseMove = function onMouseMove(e) {
      x.value = e.clientX;
      y.value = e.clientY;
    };

    if (!isServer$1) {
      vue.onMounted(function () {
        window.addEventListener("mousemove", onMouseMove, {
          passive: true
        });
      });
      vue.onUnmounted(function () {
        window.removeEventListener("mousemove", onMouseMove);
      });
    }

    return {
      x: x,
      y: y
    };
  };

  function ownKeys$1H(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1G(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1H(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1H(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Tooltip = vue.defineComponent({
    name: "TTooltip",
    components: {
      Popup: Popup
    },
    props: _objectSpread$1G(_objectSpread$1G({}, popupProps), props$V),
    setup: function setup(props2, ctx) {
      var timer = vue.ref(null);
      var popupRef = vue.ref(null);

      var _toRefs = vue.toRefs(props2),
          visible = _toRefs.visible,
          modelValue = _toRefs.modelValue;

      var _useVModel = useVModel(visible, modelValue, props2.defaultVisible, props2.onVisibleChange, "visible"),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          innerVisible = _useVModel2[0],
          setInnerVisible = _useVModel2[1];

      var innerTooltipVisible = vue.ref(props2.visible || props2.defaultVisible);
      var classPrefix = usePrefixClass();
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();

      var _useMouse = useMouse(),
          x = _useMouse.x;

      var offsetX = vue.ref(x.value);
      vue.onMounted(function () {
        if (props2.duration && innerTooltipVisible.value) {
          timer.value = setTimeout(function () {
            innerTooltipVisible.value = false;
            clearTimeout(timer.value);
            timer.value = null;
          }, props2.duration);
        }
      });

      var onTipVisibleChange = function onTipVisibleChange(val, ctx2) {
        if (timer.value && (ctx2 === null || ctx2 === void 0 ? void 0 : ctx2.trigger) !== "document") return;

        if (val) {
          offsetX.value = x.value;
        }

        setInnerVisible(val, ctx2);
      };

      var tooltipOverlayClassName = vue.computed(function () {
        return ["".concat(classPrefix.value, "-tooltip"), _defineProperty$3({}, "".concat(classPrefix.value, "-tooltip--").concat(props2.theme), props2.theme), props2.overlayClassName];
      });
      var popupProps2 = vue.computed(function () {
        return _objectSpread$1G(_objectSpread$1G({}, props2), {}, {
          placement: props2.placement === "mouse" ? "bottom-left" : props2.placement,
          showArrow: props2.placement === "mouse" ? false : props2.showArrow,
          content: function content() {
            return renderTNodeJSX("content");
          },
          "default": function _default() {
            return renderContent("default", "triggerElement");
          },
          overlayClassName: tooltipOverlayClassName.value,
          onVisibleChange: onTipVisibleChange
        });
      });
      var overlayStyle = vue.computed(function () {
        if (props2.placement !== "mouse" || offsetX.value === 0) {
          return props2.overlayStyle;
        }

        var offsetStyle = function offsetStyle(triggerEl) {
          return {
            transform: "translateX(".concat(offsetX.value - triggerEl.getBoundingClientRect().left, "px)")
          };
        };

        if (props2.overlayStyle) {
          return function (triggerEl, popupEl) {
            return _objectSpread$1G(_objectSpread$1G({}, offsetStyle(triggerEl)), isFunction_1(props2.overlayStyle) ? props2.overlayStyle(triggerEl, popupEl) : props2.overlayStyle);
          };
        }

        return offsetStyle;
      });
      vue.watch(function () {
        return innerTooltipVisible.value;
      }, function () {
        if (timer.value && !innerTooltipVisible.value) {
          clearTimeout(timer.value);
          timer.value = null;
        }
      });

      var onPopupUpdate = function onPopupUpdate() {
        var _popupRef$value, _popupRef$value$updat;

        (_popupRef$value = popupRef.value) === null || _popupRef$value === void 0 ? void 0 : (_popupRef$value$updat = _popupRef$value.updatePopper) === null || _popupRef$value$updat === void 0 ? void 0 : _popupRef$value$updat.call(_popupRef$value);
      };

      ctx.expose({
        updatePopper: onPopupUpdate
      });
      return function () {
        return vue.createVNode(Popup, vue.mergeProps({
          "ref": popupRef,
          "visible": innerVisible.value
        }, popupProps2.value, {
          "overlayStyle": overlayStyle.value
        }), null);
      };
    }
  });

  var Tooltip = withInstall(_Tooltip);

  function ownKeys$1G(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1F(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1G(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1G(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot$p(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var localTBreadcrumbOrigin = {
    separator: "",
    theme: "light",
    slots: {
      separator: ""
    },
    maxItemWidth: void 0
  };
  var _BreadcrumbItem = vue.defineComponent({
    name: "TBreadcrumbItem",
    props: props$W,
    setup: function setup(props2, _ref) {
      var _localTBreadcrumb$slo;

      var slots = _ref.slots,
          attrs = _ref.attrs;
      var breadcrumbText = vue.ref();
      var localTBreadcrumb = vue.inject("tBreadcrumb", localTBreadcrumbOrigin);
      var themeClassName = vue.ref(localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : localTBreadcrumb.theme);
      var isCutOff = vue.ref(false);
      var COMPONENT_NAME = usePrefixClass("breadcrumb__item");
      var separatorClass = usePrefixClass("breadcrumb__separator");
      var disableClass = usePrefixClass("is-disabled");
      var linkClass = usePrefixClass("link");
      var maxLengthClass = usePrefixClass("breadcrumb__inner");
      var textFlowClass = usePrefixClass("breadcrumb--text-overflow");
      var maxWithStyle = vue.computed(function () {
        var maxItemWidth = localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : localTBreadcrumb.maxItemWidth;
        var maxWith = props2.maxWidth || maxItemWidth || "120";
        return {
          maxWidth: "".concat(maxWith, "px")
        };
      });
      vue.onMounted(function () {
        isCutOff.value = isNodeOverflow(breadcrumbText.value);
      });
      vue.onBeforeUpdate(function () {
        isCutOff.value = isNodeOverflow(breadcrumbText.value);
      });
      var separatorPropContent = localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : localTBreadcrumb.separator;
      var separatorSlot = localTBreadcrumb === null || localTBreadcrumb === void 0 ? void 0 : (_localTBreadcrumb$slo = localTBreadcrumb.slots) === null || _localTBreadcrumb$slo === void 0 ? void 0 : _localTBreadcrumb$slo.separator;

      var separatorContent = separatorPropContent || separatorSlot || vue.createVNode(chevronRight, {
        color: "rgba(0,0,0,.3)"
      }, null);

      var _getCurrentInstance = vue.getCurrentInstance(),
          proxy = _getCurrentInstance.proxy;

      var bindEvent = function bindEvent(e) {
        if (!props2.disabled) {
          e.preventDefault();

          if (props2.href) {
            window.location.href = props2.href;
          }

          var router = props2.router || proxy.$root.$router;

          if (props2.to && router) {
            props2.replace ? router.replace(props2.to) : router.push(props2.to);
          }
        }
      };

      return function () {
        var itemClass = [COMPONENT_NAME.value, themeClassName.value];
        var textClass = [textFlowClass.value];

        if (props2.disabled) {
          textClass.push(disableClass.value);
        }

        var listeners = {
          onClick: function onClick(e) {
            var _props2$onClick;

            (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
              e: e
            });
          }
        };

        var textContent = vue.createVNode("span", vue.mergeProps({
          "ref": breadcrumbText
        }, {
          "class": maxLengthClass.value,
          style: maxWithStyle.value
        }), [slots["default"]()]);

        var itemContent = vue.createVNode("span", _objectSpread$1F({
          "class": textClass
        }, listeners), [textContent]);

        if ((props2.href || props2.to) && !props2.disabled) {
          textClass.push(linkClass.value);
          itemContent = vue.createVNode("a", vue.mergeProps({
            "class": textClass,
            "href": props2.href,
            "target": props2.target
          }, listeners, {
            "onClick": bindEvent
          }), [textContent]);
        }

        return vue.createVNode("div", vue.mergeProps({
          "class": itemClass
        }, attrs), [isCutOff.value ? vue.createVNode(Tooltip, {
          "content": function content() {
            return slots === null || slots === void 0 ? void 0 : slots["default"]();
          }
        }, _isSlot$p(itemContent) ? itemContent : {
          "default": function _default() {
            return [itemContent];
          }
        }) : itemContent, vue.createVNode("span", {
          "class": separatorClass.value
        }, [typeof separatorContent === "function" ? separatorContent() : separatorContent])]);
      };
    }
  });

  var _Breadcrumb = vue.defineComponent({
    name: "TBreadcrumb",
    props: props$X,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;

      var _toRefs = vue.toRefs(props2),
          separator = _toRefs.separator,
          theme = _toRefs.theme,
          maxItemWidth = _toRefs.maxItemWidth;

      vue.provide("tBreadcrumb", vue.reactive({
        separator: separator,
        theme: theme,
        slots: {
          separator: slots.separator
        },
        maxItemWidth: maxItemWidth
      }));
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        var content = renderTNodeJSX("default");

        if (props2.options && props2.options.length) {
          content = props2.options.map(function (option, index) {
            return vue.createVNode(_BreadcrumbItem, vue.mergeProps(option, {
              "key": index
            }), {
              "default": function _default() {
                return [option["default"] || option.content];
              }
            });
          });
        }

        return vue.createVNode("div", {
          "class": "t-breadcrumb"
        }, [content]);
      };
    }
  });

  var Breadcrumb = withInstall(_Breadcrumb);
  var BreadcrumbItem = withInstall(_BreadcrumbItem);

  var itemProps = {
    active: Boolean,
    content: {
      type: [String, Function],
      "default": ""
    },
    disabled: Boolean,
    divider: Boolean,
    value: {
      type: [String, Number, Object]
    },
    onClick: Function
  };

  var injectKey$1 = Symbol("dropdownProvider");

  function ownKeys$1F(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1E(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1F(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1F(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _DropdownItem = vue.defineComponent({
    name: "TDropdownItem",
    props: _objectSpread$1E(_objectSpread$1E({}, itemProps), {}, {
      path: {
        type: String,
        "default": ""
      },
      hasChildren: {
        type: Boolean,
        "default": false
      },
      onHover: {
        type: Function
      }
    }),
    setup: function setup(props) {
      var renderContent = useContent();
      var itemRef = vue.ref();
      useRipple(itemRef);

      var _useCommonClassName = useCommonClassName$2(),
          STATUS = _useCommonClassName.STATUS;

      var COMPONENT_NAME = usePrefixClass("dropdown__item");
      var classPrefix = usePrefixClass();
      var dropdownProvider = vue.inject(injectKey$1);
      var handleMenuClick = dropdownProvider.handleMenuClick;

      var renderSuffix = function renderSuffix() {
        return props.hasChildren ? vue.createVNode(chevronRight, {
          "class": "".concat(COMPONENT_NAME.value, "__item-icon")
        }, null) : null;
      };

      var handleItemClick = function handleItemClick(e) {
        e.stopPropagation();

        if (!props.hasChildren && !props.disabled) {
          var _props$onClick;

          var data = {
            value: props.value,
            path: props.path || "/".concat(props.value),
            content: props.content
          };
          (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, data, {
            e: e
          });
          handleMenuClick(data, {
            e: e
          });
        }
      };

      var handleMouseover = function handleMouseover() {
        var _props$onHover;

        (_props$onHover = props.onHover) === null || _props$onHover === void 0 ? void 0 : _props$onHover.call(props, props.path);
      };

      return function () {
        var _ref;

        var classes = [COMPONENT_NAME.value, (_ref = {}, _defineProperty$3(_ref, "".concat(classPrefix.value, "-dropdown--suffix"), props.hasChildren), _defineProperty$3(_ref, STATUS.value.disabled, props.disabled), _defineProperty$3(_ref, STATUS.value.active, props.active), _ref)];
        return vue.createVNode("div", null, [vue.createVNode("div", {
          "ref": itemRef,
          "class": classes,
          "onClick": handleItemClick,
          "onMouseover": handleMouseover
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-content")
        }, [vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "-text")
        }, [renderContent("content", "default")])]), renderSuffix()]), props.divider ? vue.createVNode(Divider, null, null) : null]);
      };
    }
  });

  var _excluded$5 = ["from", "to", "direction"];

  function ownKeys$1E(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1D(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1E(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1E(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function omit$1(obj, fields) {
    var shallowCopy = _objectSpread$1D({}, obj);

    for (var i = 0; i < fields.length; i++) {
      var key = fields[i];
      delete shallowCopy[key];
    }

    return shallowCopy;
  }
  function firstUpperCase$1(str) {
    return str.toLowerCase().replace(/( |^)[a-z]/g, function (_char) {
      return _char.toUpperCase();
    });
  }
  function getBackgroundColor(color) {
    if (typeof color === "string") {
      return color;
    }

    if (Array.isArray(color)) {
      if (color[0] && color[0][0] === "#") {
        color.unshift("90deg");
      }

      return "linear-gradient( ".concat(color.join(","), " )");
    }

    var from = color.from,
        to = color.to,
        _color$direction = color.direction,
        direction = _color$direction === void 0 ? "to right" : _color$direction,
        rest = _objectWithoutProperties$1(color, _excluded$5);

    var keys = Object.keys(rest);

    if (keys.length) {
      keys = keys.sort(function (a, b) {
        return parseFloat(a.substr(0, a.length - 1)) - parseFloat(b.substr(0, b.length - 1));
      });
      var tempArr = keys.map(function (key) {
        return "".concat(rest[key], " ").concat(key);
      });
      return "linear-gradient(".concat(direction, ", ").concat(tempArr.join(","), ")");
    }

    return "linear-gradient(".concat(direction, ", ").concat(from, ", ").concat(to, ")");
  }
  function getPropsApiByEvent(eventName) {
    return camelCase_1("on-".concat(eventName));
  }
  function getCharacterLength(str, maxCharacter) {
    var hasMaxCharacter = typeof maxCharacter === "number";

    if (!str || str.length === 0) {
      if (hasMaxCharacter) {
        return {
          length: 0,
          characters: str
        };
      }

      return 0;
    }

    var len = 0;

    for (var i = 0; i < str.length; i++) {
      var currentStringLength = 0;

      if (str.charCodeAt(i) > 127 || str.charCodeAt(i) === 94) {
        currentStringLength = 2;
      } else {
        currentStringLength = 1;
      }

      if (hasMaxCharacter && len + currentStringLength > maxCharacter) {
        return {
          length: len,
          characters: str.slice(0, i)
        };
      }

      len += currentStringLength;
    }

    if (hasMaxCharacter) {
      return {
        length: len,
        characters: str
      };
    }

    return len;
  }
  function pxCompat(param) {
    return typeof param === "number" ? "".concat(param, "px") : param;
  }

  var _DropdownMenu = vue.defineComponent({
    name: "TDropdownMenu",
    props: {
      options: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      maxHeight: {
        type: Number,
        "default": 300
      },
      maxColumnWidth: {
        type: Number || String,
        "default": 100
      },
      minColumnWidth: {
        type: Number || String,
        "default": 10
      }
    },
    setup: function setup(props, _ref) {
      var slots = _ref.slots;
      var path = vue.ref("");
      var renderTNode = useTNodeJSX();
      var COMPONENT_NAME = usePrefixClass("dropdown__menu");
      var dropdownProvider = vue.inject(injectKey$1);
      var maxHeight = dropdownProvider.maxHeight,
          maxColumnWidth = dropdownProvider.maxColumnWidth,
          minColumnWidth = dropdownProvider.minColumnWidth;

      var handleHoverItem = function handleHoverItem(p) {
        path.value = p;
      };

      var handleItemClick = function handleItemClick(data, context, idx) {
        var _props$options$idx$on, _props$options$idx, _props$onClick;

        (_props$options$idx$on = (_props$options$idx = props.options[idx]).onClick) === null || _props$options$idx$on === void 0 ? void 0 : _props$options$idx$on.call(_props$options$idx, data, context);
        (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, data, context);
      };

      var isActive = function isActive(item, pathPrefix) {
        var excludeSelf = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var itemPath = "".concat(pathPrefix, "/").concat(item.value);

        if (excludeSelf && path.value === itemPath) {
          return false;
        }

        return path.value.indexOf(itemPath) === 0;
      };

      var renderMenuColumn = function renderMenuColumn(children, showSubmenu, pathPrefix) {
        var menuClass = ["".concat(COMPONENT_NAME.value, "-column"), "narrow-scrollbar", {
          submenu__visible: showSubmenu
        }];
        return vue.createVNode("div", {
          "class": menuClass,
          "style": {
            maxHeight: "".concat(maxHeight, "px"),
            maxWidth: pxCompat(maxColumnWidth),
            minWidth: pxCompat(minColumnWidth)
          }
        }, [children.map(function (item, idx) {
          return vue.createVNode(_DropdownItem, {
            "key": idx,
            "disabled": item.disabled,
            "active": isActive(item, pathPrefix) || item.active,
            "value": item.value,
            "content": item.content,
            "divider": item.divider,
            "hasChildren": item.children && item.children.length > 0,
            "path": "".concat(pathPrefix, "/").concat(item.value),
            "maxColumnWidth": maxColumnWidth,
            "minColumnWidth": minColumnWidth,
            "onHover": handleHoverItem,
            "onClick": function onClick(data, context) {
              return handleItemClick(data, context, idx);
            }
          }, null);
        })]);
      };

      return function () {
        var columns = [];
        var menuItems = props.options;
        var pathPrefix = "";

        if (slots["default"]) {
          return vue.createVNode("div", {
            "class": COMPONENT_NAME.value
          }, [vue.createVNode("div", {
            "class": ["".concat(COMPONENT_NAME.value, "-column"), "narrow-scrollbar"],
            "style": {
              maxHeight: "".concat(maxHeight, "px"),
              maxWidth: "".concat(maxColumnWidth, "px"),
              minWidth: "".concat(minColumnWidth, "px")
            }
          }, [renderTNode("default")])]);
        }

        while (menuItems && menuItems.length) {
          var activeItem = menuItems.find(function (item) {
            return isActive(item, pathPrefix, false);
          });
          columns.push(renderMenuColumn(menuItems, !!activeItem, pathPrefix));

          if (activeItem) {
            pathPrefix = "".concat(pathPrefix, "/").concat(activeItem.value);
            menuItems = activeItem.children || [];
          } else {
            menuItems = [];
          }
        }

        return vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [columns]);
      };
    }
  });

  var props$U = {
    direction: {
      type: String,
      "default": "right",
      validator: function validator(val) {
        return ["left", "right"].includes(val);
      }
    },
    disabled: Boolean,
    hideAfterItemClick: {
      type: Boolean,
      "default": true
    },
    maxColumnWidth: {
      type: [String, Number],
      "default": 100
    },
    maxHeight: {
      type: Number,
      "default": 300
    },
    minColumnWidth: {
      type: [String, Number],
      "default": 10
    },
    options: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    placement: {
      type: String,
      "default": "bottom-left",
      validator: function validator(val) {
        return ["top", "left", "right", "bottom", "top-left", "top-right", "bottom-left", "bottom-right", "left-top", "left-bottom", "right-top", "right-bottom"].includes(val);
      }
    },
    popupProps: {
      type: Object
    },
    trigger: {
      type: String,
      "default": "hover",
      validator: function validator(val) {
        return ["hover", "click", "focus", "context-menu"].includes(val);
      }
    },
    onClick: Function
  };

  function ownKeys$1D(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1C(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1D(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1D(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Dropdown = vue.defineComponent({
    name: "TDropdown",
    props: props$U,
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs;
          _ref.slots;
      var renderTNodeJSX = useTNodeJSX();
      var COMPONENT_NAME = usePrefixClass("dropdown");
      var popupElem = vue.ref(null);

      var handleMenuClick = function handleMenuClick(data, context) {
        var _props2$onClick;

        if (props2.hideAfterItemClick) {
          popupElem.value.handleClose();
        }

        (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, data, context);
      };

      var _toRefs = vue.toRefs(props2),
          maxHeight = _toRefs.maxHeight,
          maxColumnWidth = _toRefs.maxColumnWidth,
          minColumnWidth = _toRefs.minColumnWidth;

      vue.provide(injectKey$1, vue.reactive({
        handleMenuClick: handleMenuClick,
        maxHeight: maxHeight,
        maxColumnWidth: maxColumnWidth,
        minColumnWidth: minColumnWidth
      }));
      return function () {
        var _props2$popupProps;

        var trigger = renderTNodeJSX("default");
        var contentSlot = renderTNodeJSX("dropdown");

        var popupProps = _objectSpread$1C(_objectSpread$1C({}, attrs), {}, {
          disabled: props2.disabled,
          placement: props2.placement,
          trigger: props2.trigger,
          overlayClassName: [COMPONENT_NAME.value, (_props2$popupProps = props2.popupProps) === null || _props2$popupProps === void 0 ? void 0 : _props2$popupProps.overlayClassName]
        });

        return vue.createVNode(Popup, vue.mergeProps(props2.popupProps, popupProps, {
          "destroyOnClose": true,
          "ref": popupElem,
          "expandAnimation": true
        }), {
          "default": function _default() {
            return [trigger];
          },
          content: function content() {
            return contentSlot || vue.createVNode(_DropdownMenu, {
              "options": props2.options,
              "maxHeight": props2.maxHeight,
              "maxColumnWidth": props2.maxColumnWidth,
              "minColumnWidth": props2.minColumnWidth
            }, null);
          }
        });
      };
    }
  });

  var Dropdown = withInstall(_Dropdown);
  var DropdownItem = withInstall(_DropdownItem);
  var DropdownMenu = withInstall(_DropdownMenu);

  var props$T = {
    collapsed: Boolean,
    expanded: {
      type: Array,
      "default": void 0
    },
    defaultExpanded: {
      type: Array,
      "default": []
    },
    expandMutex: Boolean,
    expandType: {
      type: String,
      "default": "normal",
      validator: function validator(val) {
        if (!val) return true;
        return ["normal", "popup"].includes(val);
      }
    },
    logo: {
      type: Function
    },
    operations: {
      type: Function
    },
    theme: {
      type: String,
      "default": "light",
      validator: function validator(val) {
        if (!val) return true;
        return ["light", "dark"].includes(val);
      }
    },
    value: {
      type: [String, Number],
      "default": void 0
    },
    modelValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number]
    },
    width: {
      type: [String, Number, Array],
      "default": "232px"
    },
    onChange: Function,
    onExpand: Function
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  var getTreePaths = function getTreePaths(node, val, ans) {
    if (!node) return;

    for (var i = 0; i < node.children.length; ++i) {
      var child = node.children[i];
      if (child.value === val) return [].concat(_toConsumableArray(ans), [node.value]);
      var target = getTreePaths(child, val, [].concat(_toConsumableArray(ans), [node.value]));
      if (target) return target;
    }
  };

  var getTreeSameParentNodes = function getTreeSameParentNodes(node, val) {
    if (!node) return [];

    for (var i = 0; i < node.children.length; ++i) {
      var child = node.children[i];
      if (child.value === val) return node.children;
      var target = getTreeSameParentNodes(child, val);
      if (target) return target;
    }
  };

  var DFS = function DFS(root, val) {
    if (root.value === val) return root;

    if (root.children.length > 0) {
      for (var i = 0, len = root.children.length; i < len; i++) {
        var res = DFS(root.children[i], val);
        if (res) return res;
      }
    }
  };

  var VMenu = /*#__PURE__*/function () {
    function VMenu(options) {
      _classCallCheck(this, VMenu);

      _defineProperty$3(this, "data", null);

      _defineProperty$3(this, "cache", /* @__PURE__ */new Set());

      _defineProperty$3(this, "isMutex", vue.ref(false));

      _defineProperty$3(this, "expandValues", null);

      var root = {
        value: null,
        parent: null,
        children: []
      };
      this.data = root;
      this.isMutex = options === null || options === void 0 ? void 0 : options.isMutex;
      this.expandValues = new Set(options === null || options === void 0 ? void 0 : options.expandValues);
    }

    _createClass(VMenu, [{
      key: "add",
      value: function add(item) {
        var value = item.value,
            parent = item.parent,
            vnode = item.vnode;
        var node = {
          value: value,
          parent: parent,
          children: [],
          vnode: vnode
        };
        this.cache.forEach(function (data, v2, set) {
          if (item.value === data.parent) {
            node.children.push(data);
            set["delete"](data);
          }
        });

        if (item.parent == null) {
          this.data.children.push(node);
          node.parent = this.data;
        } else if (this.data.children.length > 0) {
          var pNode = DFS(this.data, parent);

          if (pNode) {
            pNode.children.push(node);
          } else {
            this.cache.add(node);
          }
        } else {
          this.cache.add(node);
        }
      }
    }, {
      key: "select",
      value: function select(val) {
        var activeValues = getTreePaths(this.data, val, []) || [];
        activeValues.push(val);
        return activeValues.filter(function (val2) {
          return val2 != null;
        });
      }
    }, {
      key: "expand",
      value: function expand(val) {
        var _this = this;

        if (this.expandValues.has(val)) {
          this.expandValues["delete"](val);
          return _toConsumableArray(this.expandValues);
        }

        this.expandValues.add(val);

        if (!this.isMutex.value) {
          return _toConsumableArray(this.expandValues);
        }

        var sameParentNodes = getTreeSameParentNodes(this.data, val) || [];
        var sameLevelSubmenuValues = new Set(sameParentNodes.filter(function (node) {
          var _node$children;

          return ((_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.length) > 0 && node.value !== val;
        }).map(function (child) {
          return child.value;
        }));
        this.expandValues.forEach(function (val2) {
          var isHit = sameLevelSubmenuValues.has(val2);

          if (isHit) {
            _this.expandValues["delete"](val2);
          }
        });
        return _toConsumableArray(this.expandValues);
      }
    }, {
      key: "getChild",
      value: function getChild(value) {
        var target = DFS(this.data, value);
        return target ? target.children : [];
      }
    }]);

    return VMenu;
  }();

  var logSet = /* @__PURE__ */new Set();
  var log = {
    warn: function warn(componentName, message) {
      console.warn("TDesign ".concat(componentName, " Warn: ").concat(message));
    },
    warnOnce: function warnOnce(componentName, message) {
      var msgContent = "TDesign ".concat(componentName, " Warn: ").concat(message);
      if (logSet.has(msgContent)) return;
      logSet.add(msgContent);
      console.warn(msgContent);
    },
    error: function error(componentName, message) {
      console.error("TDesign ".concat(componentName, " Error: ").concat(message));
    },
    errorOnce: function errorOnce(componentName, message) {
      var msgContent = "TDesign ".concat(componentName, " Error: ").concat(message);
      if (logSet.has(msgContent)) return;
      logSet.add(msgContent);
      console.error(msgContent);
    },
    info: function info(componentName, message) {
      console.info("TDesign ".concat(componentName, " Info: ").concat(message));
    }
  };

  function useDefaultValue(value, defaultValue, onChange, propsName) {
    var _getCurrentInstance = vue.getCurrentInstance(),
        emit = _getCurrentInstance.emit,
        attrs = _getCurrentInstance.attrs;

    var internalValue = vue.ref();
    internalValue.value = defaultValue;

    if (typeof value.value !== "undefined") {
      internalValue.value = value.value;
    }

    vue.watch(value, function (newVal) {
      internalValue.value = newVal;
    });
    return [internalValue, function (newValue) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (attrs["onUpdate:".concat(propsName)]) {
        emit === null || emit === void 0 ? void 0 : emit.apply(void 0, ["update:".concat(propsName), newValue].concat(args));
      }

      if (typeof value.value === "undefined") {
        internalValue.value = newValue;
      }

      onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));
    }];
  }

  function ownKeys$1C(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1B(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1C(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1C(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Menu = vue.defineComponent({
    name: "TMenu",
    props: _objectSpread$1B({}, props$T),
    setup: function setup(props2, ctx) {
      var classPrefix = usePrefixClass();
      vue.watchEffect(function () {
        if (ctx.slots.options) {
          log.warnOnce("TMenu", "`options` slot is going to be deprecated, please use `operations` for slot instead.");
        }
      });
      var mode = vue.ref(props2.expandType);
      var theme = vue.computed(function () {
        return props2.theme;
      });
      var isMutex = vue.computed(function () {
        return props2.expandMutex;
      });
      var menuClass = vue.computed(function () {
        return ["".concat(classPrefix.value, "-default-menu"), "".concat(classPrefix.value, "-menu--").concat(props2.theme), _defineProperty$3({}, "".concat(classPrefix.value, "-is-collapsed"), props2.collapsed)];
      });
      var innerClasses = vue.computed(function () {
        return ["".concat(classPrefix.value, "-menu"), _defineProperty$3({}, "".concat(classPrefix.value, "-menu--scroll"), mode.value !== "popup"), "narrow-scrollbar"];
      });
      var expandWidth = vue.computed(function () {
        var width = props2.width;

        var format = function format(val) {
          return typeof val === "number" ? "".concat(val, "px") : val;
        };

        if (Array.isArray(width)) return width.map(function (item) {
          return format(item);
        });
        return [format(width), "64px"];
      });
      var styles = vue.computed(function () {
        return {
          height: "100%",
          width: props2.collapsed ? expandWidth.value[1] : expandWidth.value[0]
        };
      });

      var _toRefs = vue.toRefs(props2),
          value = _toRefs.value,
          modelValue = _toRefs.modelValue,
          expanded = _toRefs.expanded;

      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          activeValue = _useVModel2[0],
          setActiveValue = _useVModel2[1];

      var _useDefaultValue = useDefaultValue(expanded, props2.defaultExpanded, props2.onExpand, "expanded"),
          _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
          expandValues = _useDefaultValue2[0],
          setExpand = _useDefaultValue2[1];

      var activeValues = vue.ref([]);
      vue.watchEffect(function () {
        var _props2$onCollapsed;

        mode.value = props2.collapsed ? "popup" : props2.expandType;
        (_props2$onCollapsed = props2.onCollapsed) === null || _props2$onCollapsed === void 0 ? void 0 : _props2$onCollapsed.call(props2, {
          collapsed: props2.collapsed
        });
      });
      var vMenu = new VMenu({
        isMutex: isMutex,
        expandValues: expandValues.value ? _toConsumableArray(expandValues.value) : []
      });
      vue.provide("TdMenu", {
        activeValue: activeValue,
        activeValues: activeValues,
        expandValues: expandValues,
        mode: mode,
        theme: theme,
        isHead: false,
        vMenu: vMenu,
        select: function select(value2) {
          setActiveValue(value2);
        },
        open: function open(value2, type) {
          if (mode.value === "normal") {
            setExpand(vMenu.expand(value2));
          } else if (type === "add") {
            if (expandValues.value.indexOf(value2) === -1) {
              setExpand([].concat(_toConsumableArray(expandValues.value), [value2]));
            }
          } else if (type === "remove") {
            var index = expandValues.value.indexOf(value2);

            var tmp = _toConsumableArray(expandValues.value);

            tmp.splice(index, 1);
            setExpand(tmp);
          }
        }
      });
      vue.watch(function () {
        return props2.expanded;
      }, function (value2) {
        vMenu.expandValues = new Set(value2);
      });

      var updateActiveValues = function updateActiveValues(value2) {
        activeValues.value = vMenu.select(value2);
      };

      vue.watch(activeValue, updateActiveValues);
      vue.onMounted(function () {
        activeValues.value = vMenu.select(activeValue.value);
      });
      return {
        styles: styles,
        classPrefix: classPrefix,
        menuClass: menuClass,
        innerClasses: innerClasses,
        activeValue: activeValue,
        activeValues: activeValues,
        expandValues: expandValues
      };
    },
    render: function render() {
      var operations = renderContent(this, "operations", "options");
      var logo = renderTNodeJSX(this, "logo");
      return vue.createVNode("div", {
        "class": this.menuClass,
        "style": this.styles
      }, [vue.createVNode("div", {
        "class": "".concat(this.classPrefix, "-default-menu__inner")
      }, [logo && vue.createVNode("div", {
        "class": "".concat(this.classPrefix, "-menu__logo")
      }, [logo]), vue.createVNode("ul", {
        "class": this.innerClasses
      }, [renderContent(this, "default", "content")]), operations && vue.createVNode("div", {
        "class": "".concat(this.classPrefix, "-menu__operations")
      }, [operations])])]);
    }
  });

  var props$S = {
    expanded: {
      type: Array,
      "default": void 0
    },
    defaultExpanded: {
      type: Array,
      "default": []
    },
    expandType: {
      type: String,
      "default": "normal",
      validator: function validator(val) {
        if (!val) return true;
        return ["normal", "popup"].includes(val);
      }
    },
    logo: {
      type: Function
    },
    operations: {
      type: Function
    },
    theme: {
      type: String,
      "default": "light",
      validator: function validator(val) {
        if (!val) return true;
        return ["light", "dark"].includes(val);
      }
    },
    value: {
      type: [String, Number],
      "default": void 0
    },
    modelValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number]
    },
    onChange: Function,
    onExpand: Function
  };

  var tabPanelProps = {
    "default": {
      type: Function
    },
    destroyOnHide: {
      type: Boolean,
      "default": true
    },
    disabled: Boolean,
    label: {
      type: [String, Function]
    },
    panel: {
      type: [String, Function]
    },
    removable: Boolean,
    value: {
      type: [String, Number]
    },
    onRemove: Function
  };

  var TDisplayNoneElementRefresh = "t-display-none-element-refresh";
  function useDestroyOnClose() {
    var refresh = vue.ref(0);
    vue.provide(TDisplayNoneElementRefresh, refresh);
    vue.onUpdated(function () {
      refresh.value += 1;
    });
  }

  function ownKeys$1B(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1A(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1B(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1B(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _TabPanel = vue.defineComponent({
    name: "TTabPanel",
    props: _objectSpread$1A({}, tabPanelProps),
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("tab-panel");
      var renderTNodeContent = useContent();
      useDestroyOnClose();
      var tabs = vue.inject("tabs");
      return function () {
        var isActive = props2.value === tabs.value.value;
        if (props2.destroyOnHide && !isActive) return null;
        return vue.withDirectives(vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [renderTNodeContent("default", "panel")]), [[vue.vShow, isActive]]);
      };
    }
  });

  var root = _root;
  /**
   * Gets the timestamp of the number of milliseconds that have elapsed since
   * the Unix epoch (1 January 1970 00:00:00 UTC).
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Date
   * @returns {number} Returns the timestamp.
   * @example
   *
   * _.defer(function(stamp) {
   *   console.log(_.now() - stamp);
   * }, _.now());
   * // => Logs the number of milliseconds it took for the deferred invocation.
   */

  var now$1 = function now() {
    return root.Date.now();
  };

  var now_1 = now$1;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;
  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */

  function trimmedEndIndex$1(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}

    return index;
  }

  var _trimmedEndIndex = trimmedEndIndex$1;

  var trimmedEndIndex = _trimmedEndIndex;
  /** Used to match leading whitespace. */

  var reTrimStart = /^\s+/;
  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */

  function baseTrim$1(string) {
    return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;
  }

  var _baseTrim = baseTrim$1;

  var baseTrim = _baseTrim,
      isObject$4 = isObject_1,
      isSymbol$2 = isSymbol_1;
  /** Used as references for various `Number` constants. */

  var NAN = 0 / 0;
  /** Used to detect bad signed hexadecimal string values. */

  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  /** Used to detect binary string values. */

  var reIsBinary = /^0b[01]+$/i;
  /** Used to detect octal string values. */

  var reIsOctal = /^0o[0-7]+$/i;
  /** Built-in method references without a dependency on `root`. */

  var freeParseInt = parseInt;
  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */

  function toNumber$3(value) {
    if (typeof value == 'number') {
      return value;
    }

    if (isSymbol$2(value)) {
      return NAN;
    }

    if (isObject$4(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject$4(other) ? other + '' : other;
    }

    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }

    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }

  var toNumber_1 = toNumber$3;

  var isObject$3 = isObject_1,
      now = now_1,
      toNumber$2 = toNumber_1;
  /** Error message constants. */

  var FUNC_ERROR_TEXT$2 = 'Expected a function';
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeMax$2 = Math.max,
      nativeMin$1 = Math.min;
  /**
   * Creates a debounced function that delays invoking `func` until after `wait`
   * milliseconds have elapsed since the last time the debounced function was
   * invoked. The debounced function comes with a `cancel` method to cancel
   * delayed `func` invocations and a `flush` method to immediately invoke them.
   * Provide `options` to indicate whether `func` should be invoked on the
   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
   * with the last arguments provided to the debounced function. Subsequent
   * calls to the debounced function return the result of the last `func`
   * invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the debounced function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.debounce` and `_.throttle`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to debounce.
   * @param {number} [wait=0] The number of milliseconds to delay.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=false]
   *  Specify invoking on the leading edge of the timeout.
   * @param {number} [options.maxWait]
   *  The maximum time `func` is allowed to be delayed before it's invoked.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new debounced function.
   * @example
   *
   * // Avoid costly calculations while the window size is in flux.
   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
   *
   * // Invoke `sendMail` when clicked, debouncing subsequent calls.
   * jQuery(element).on('click', _.debounce(sendMail, 300, {
   *   'leading': true,
   *   'trailing': false
   * }));
   *
   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
   * var source = new EventSource('/stream');
   * jQuery(source).on('message', debounced);
   *
   * // Cancel the trailing debounced invocation.
   * jQuery(window).on('popstate', debounced.cancel);
   */

  function debounce$1(func, wait, options) {
    var lastArgs,
        lastThis,
        maxWait,
        result,
        timerId,
        lastCallTime,
        lastInvokeTime = 0,
        leading = false,
        maxing = false,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$2);
    }

    wait = toNumber$2(wait) || 0;

    if (isObject$3(options)) {
      leading = !!options.leading;
      maxing = 'maxWait' in options;
      maxWait = maxing ? nativeMax$2(toNumber$2(options.maxWait) || 0, wait) : maxWait;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }

    function invokeFunc(time) {
      var args = lastArgs,
          thisArg = lastThis;
      lastArgs = lastThis = undefined;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }

    function leadingEdge(time) {
      // Reset any `maxWait` timer.
      lastInvokeTime = time; // Start the timer for the trailing edge.

      timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.

      return leading ? invokeFunc(time) : result;
    }

    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime,
          timeWaiting = wait - timeSinceLastCall;
      return maxing ? nativeMin$1(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }

    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the
      // trailing edge, the system time has gone backwards and we're treating
      // it as the trailing edge, or we've hit the `maxWait` limit.

      return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }

    function timerExpired() {
      var time = now();

      if (shouldInvoke(time)) {
        return trailingEdge(time);
      } // Restart the timer.


      timerId = setTimeout(timerExpired, remainingWait(time));
    }

    function trailingEdge(time) {
      timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been
      // debounced at least once.

      if (trailing && lastArgs) {
        return invokeFunc(time);
      }

      lastArgs = lastThis = undefined;
      return result;
    }

    function cancel() {
      if (timerId !== undefined) {
        clearTimeout(timerId);
      }

      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = undefined;
    }

    function flush() {
      return timerId === undefined ? result : trailingEdge(now());
    }

    function debounced() {
      var time = now(),
          isInvoking = shouldInvoke(time);
      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;

      if (isInvoking) {
        if (timerId === undefined) {
          return leadingEdge(lastCallTime);
        }

        if (maxing) {
          // Handle invocations in a tight loop.
          clearTimeout(timerId);
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }

      if (timerId === undefined) {
        timerId = setTimeout(timerExpired, wait);
      }

      return result;
    }

    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }

  var debounce_1 = debounce$1;

  var props$R = {
    addable: Boolean,
    disabled: Boolean,
    dragSort: Boolean,
    list: {
      type: Array
    },
    placement: {
      type: String,
      "default": "top",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "top", "bottom", "right"].includes(val);
      }
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["medium", "large"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "normal",
      validator: function validator(val) {
        if (!val) return true;
        return ["normal", "card"].includes(val);
      }
    },
    value: {
      type: [String, Number],
      "default": void 0
    },
    modelValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number]
    },
    onAdd: Function,
    onChange: Function,
    onDragSort: Function,
    onRemove: Function
  };

  var getDomWidth = function getDomWidth(dom) {
    return (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
  };

  var tabBase = {
    calcScrollLeft: function calcScrollLeft(elements, scrollLeft) {
      var container = elements.navsContainer;
      var wrap = elements.navsWrap;
      var rightOperations = elements.rightOperations;
      var rightOperationsZoneWidth = getDomWidth(rightOperations);
      if (!wrap || !container) return scrollLeft;
      var containerWidth = getDomWidth(container);
      var wrapWidth = getDomWidth(wrap);

      if (wrapWidth <= containerWidth) {
        return 0;
      }

      if (scrollLeft + containerWidth - rightOperationsZoneWidth > wrapWidth) {
        return wrapWidth + rightOperationsZoneWidth - containerWidth;
      }

      return scrollLeft;
    },
    calculateCanToLeft: function calculateCanToLeft(depElement, scrollLeft, placement) {
      if (["left", "right"].includes(placement.toLowerCase())) {
        return false;
      }

      var container = depElement.navsContainer,
          wrap = depElement.navsWrap,
          leftOperations = depElement.leftOperations,
          toLeftBtn = depElement.toLeftBtn;

      if (!wrap || !container) {
        return false;
      }

      var leftOperationsZoneWidth = getDomWidth(leftOperations);
      var leftIconWidth = getDomWidth(toLeftBtn);
      return scrollLeft + Math.round(leftOperationsZoneWidth - leftIconWidth) > 0;
    },
    calculateCanToRight: function calculateCanToRight(depElement, scrollLeft, placement) {
      if (["left", "right"].includes(placement.toLowerCase())) {
        return false;
      }

      var container = depElement.navsContainer,
          wrap = depElement.navsWrap,
          rightOperations = depElement.rightOperations,
          toRightBtn = depElement.toRightBtn;

      if (!wrap || !container) {
        return false;
      }

      var rightOperationsZoneWidth = getDomWidth(rightOperations);
      var rightIconWidth = getDomWidth(toRightBtn);
      return scrollLeft + getDomWidth(container) - (rightOperationsZoneWidth - rightIconWidth) - getDomWidth(wrap) < -1;
    },
    moveActiveTabIntoView: function moveActiveTabIntoView(depElement, scrollLeft) {
      var activeTab = depElement.activeTab,
          container = depElement.navsContainer,
          navsWrap = depElement.navsWrap,
          leftOperations = depElement.leftOperations,
          toLeftBtn = depElement.toLeftBtn,
          rightOperations = depElement.rightOperations,
          toRightBtn = depElement.toRightBtn;
      if (!activeTab) return scrollLeft;
      var totalWidthBeforeActiveTab = activeTab.offsetLeft;
      if (!container) return scrollLeft;

      var _getLeftCoverWidth = function _getLeftCoverWidth() {
        var leftOperationsZoneWidth = getDomWidth(leftOperations);
        var leftIconWidth = getDomWidth(toLeftBtn);

        if (totalWidthBeforeActiveTab === 0) {
          return leftOperationsZoneWidth - leftIconWidth;
        }

        return leftOperationsZoneWidth;
      };

      var leftCoverWidth = _getLeftCoverWidth();

      var isCurrentTabHiddenInLeftZone = scrollLeft + leftCoverWidth > totalWidthBeforeActiveTab;

      if (isCurrentTabHiddenInLeftZone) {
        return totalWidthBeforeActiveTab - leftCoverWidth;
      }

      var activeTabWidth = activeTab.offsetWidth;
      if (!container || !navsWrap) return scrollLeft;
      var containerWidth = getDomWidth(container);

      var _getRightCoverWidth = function _getRightCoverWidth() {
        var rightOperationsZoneWidth = getDomWidth(rightOperations);
        var rightIconWidth = getDomWidth(toRightBtn);
        var wrapWidth = getDomWidth(navsWrap);

        if (Math.abs(totalWidthBeforeActiveTab + activeTabWidth - wrapWidth) < 1) {
          return rightOperationsZoneWidth - rightIconWidth;
        }

        return rightOperationsZoneWidth;
      };

      var rightCoverWidth = _getRightCoverWidth();

      var isHiddenInRightZone = scrollLeft + containerWidth - rightCoverWidth < totalWidthBeforeActiveTab + activeTabWidth;

      if (isHiddenInRightZone) {
        return totalWidthBeforeActiveTab + activeTabWidth - containerWidth + rightCoverWidth;
      }

      return scrollLeft;
    },
    scrollToLeft: function scrollToLeft(depElement, scrollLeft) {
      var container = depElement.navsContainer,
          leftOperations = depElement.leftOperations,
          toLeftBtn = depElement.toLeftBtn;
      if (!container) return 0;
      var leftOperationsZoneWidth = getDomWidth(leftOperations);
      var leftIconWidth = getDomWidth(toLeftBtn);
      var containerWidth = getDomWidth(container);
      return Math.max(-(leftOperationsZoneWidth - leftIconWidth), scrollLeft - containerWidth);
    },
    scrollToRight: function scrollToRight(depElement, scrollLeft) {
      var container = depElement.navsContainer,
          wrap = depElement.navsWrap,
          rightOperations = depElement.rightOperations,
          toRightBtn = depElement.toRightBtn;
      var rightOperationsZoneWidth = getDomWidth(rightOperations);
      var rightIconWidth = getDomWidth(toRightBtn);
      var containerWidth = getDomWidth(container);
      var wrapWidth = getDomWidth(wrap);
      return Math.min(scrollLeft + containerWidth, wrapWidth - containerWidth + rightOperationsZoneWidth - rightIconWidth);
    }
  };

  var TTabNavItem = vue.defineComponent({
    name: "TTabNavItem",
    components: {
      CloseIcon: close
    },
    props: {
      index: Number,
      active: {
        type: Boolean
      },
      theme: props$R.theme,
      size: props$R.size,
      placement: props$R.placement,
      label: {
        type: null
      },
      disabled: tabPanelProps.disabled,
      removable: tabPanelProps.removable,
      value: tabPanelProps.value,
      onClick: Function,
      onRemove: Function
    },
    setup: function setup(props) {
      var itemRef = vue.ref();
      useRipple(itemRef);
      var COMPONENT_NAME = usePrefixClass("tabs__nav-item");
      var classPrefix = usePrefixClass();

      var _useCommonClassName = useCommonClassName$2(),
          STATUS = _useCommonClassName.STATUS,
          SIZE = _useCommonClassName.SIZE;

      var removeBtnClick = function removeBtnClick(_ref) {
        var e = _ref.e;
        e.stopPropagation();
        props.onRemove({
          e: e,
          value: props.value,
          index: props.index
        });
      };

      var onClickNav = function onClickNav(e) {
        if (props.disabled) return;
        props.onClick(e);
      };

      var navItemClass = vue.computed(function () {
        var _ref2;

        return _ref2 = {}, _defineProperty$3(_ref2, COMPONENT_NAME.value, true), _defineProperty$3(_ref2, "".concat(classPrefix.value, "-tabs__nav--card"), props.theme === "card"), _defineProperty$3(_ref2, STATUS.value.disabled, props.disabled), _defineProperty$3(_ref2, STATUS.value.active, props.active), _defineProperty$3(_ref2, "".concat(classPrefix.value, "-is-left"), props.placement === "left"), _defineProperty$3(_ref2, "".concat(classPrefix.value, "-is-right"), props.placement === "right"), _defineProperty$3(_ref2, SIZE.value.medium, props.size === "medium"), _defineProperty$3(_ref2, SIZE.value.large, props.size === "large"), _ref2;
      });

      var renderCardItem = function renderCardItem() {
        return vue.createVNode("div", {
          "class": navItemClass.value,
          "onClick": onClickNav,
          "ref": itemRef
        }, [vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "-text-wrapper")
        }, [props.label]), props.removable && !props.disabled ? vue.createVNode(close, {
          "class": "remove-btn",
          "onClick": removeBtnClick
        }, null) : null]);
      };

      var renderNormalItem = function renderNormalItem() {
        var _ref3;

        return vue.createVNode("div", {
          "class": navItemClass.value,
          "onClick": onClickNav
        }, [vue.createVNode("div", {
          "class": ["".concat(COMPONENT_NAME.value, "-wrapper"), (_ref3 = {}, _defineProperty$3(_ref3, STATUS.value.disabled, props.disabled), _defineProperty$3(_ref3, STATUS.value.active, props.active), _ref3)],
          "ref": itemRef
        }, [vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "-text-wrapper")
        }, [props.label])]), props.removable && !props.disabled ? vue.createVNode(close, {
          "class": "remove-btn",
          "onClick": removeBtnClick
        }, null) : null]);
      };

      return function () {
        return props.theme === "card" ? renderCardItem() : renderNormalItem();
      };
    }
  });

  var TTabNavBar = vue.defineComponent({
    props: {
      navs: {
        type: Array
      },
      placement: props$R.placement,
      value: props$R.value
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("tabs");
      var classPrefix = usePrefixClass();
      var navBarClass = vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__bar"), "".concat(classPrefix.value, "-is-").concat(props.placement)];
      });
      var navBarStyle = vue.ref(null);

      var getStyle = function getStyle() {
        var _props$navs$i$el2, _ref3;

        var isVertical = ["left", "right"].includes(props.placement.toLowerCase());

        var _ref = isVertical ? ["height", "top"] : ["width", "left"],
            _ref2 = _slicedToArray(_ref, 2),
            sizePropName = _ref2[0],
            offsetPropName = _ref2[1];

        var offset = 0;
        var i = 0;

        for (; i < props.navs.length; i++) {
          var _props$navs$i, _props$navs$i$el;

          if (props.navs[i].props.value === props.value) {
            break;
          }

          offset += ((_props$navs$i = props.navs[i]) === null || _props$navs$i === void 0 ? void 0 : (_props$navs$i$el = _props$navs$i.el) === null || _props$navs$i$el === void 0 ? void 0 : _props$navs$i$el["client".concat(firstUpperCase$1(sizePropName))]) || 0;
        }

        if (!props.navs[i]) return {};
        return _ref3 = {}, _defineProperty$3(_ref3, offsetPropName, "".concat(offset, "px")), _defineProperty$3(_ref3, sizePropName, "".concat(((_props$navs$i$el2 = props.navs[i].el) === null || _props$navs$i$el2 === void 0 ? void 0 : _props$navs$i$el2["client".concat(firstUpperCase$1(sizePropName))]) || 0, "px")), _ref3;
      };

      vue.onMounted(function () {
        vue.nextTick(function () {
          navBarStyle.value = getStyle();
        });
      });
      vue.watch([function () {
        return props.navs;
      }, function () {
        return props.value;
      }, function () {
        return props.placement;
      }], function () {
        vue.nextTick(function () {
          navBarStyle.value = getStyle();
        });
      });
      return function () {
        return vue.createVNode("div", {
          "class": navBarClass.value,
          "style": navBarStyle.value
        }, null);
      };
    }
  });

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  var traversalTabNavs = function traversalTabNavs(tabNavs, fn) {
    var _iterator = _createForOfIteratorHelper(tabNavs),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var itemNode = _step.value;

        if (itemNode.getAttribute("draggable")) {
          fn(itemNode);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  };

  var handleTarget = function handleTarget(target, tabNavs) {
    var resultTarget;
    traversalTabNavs(tabNavs, function (itemNode) {
      if (itemNode.contains(target)) {
        resultTarget = itemNode;
      }
    });
    return resultTarget;
  };

  function useDragSort$1(props) {
    var navsWrap = null;
    var dragged;
    var enterTargets = [];

    var dragstart = function dragstart(event) {
      var target = event.target;
      dragged = target;
      target.style.opacity = "0.5";
    };

    var dragend = function dragend(event) {
      event.target.style.opacity = "";
    };

    var dragover = function dragover(event) {
      event.preventDefault();
    };

    var dragenter = function dragenter(event) {
      var target = handleTarget(event.target, navsWrap.children);

      if (target && target !== dragged) {
        target.firstChild.style.outline = "1px dashed #0052d9";

        if (!enterTargets.includes(target)) {
          enterTargets.push(target);
        }
      }
    };

    var dragleave = function dragleave(event) {
      var target = event.target;

      var _iterator2 = _createForOfIteratorHelper(enterTargets),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var enterTarget = _step2.value;

          if (!enterTarget.contains(target)) {
            enterTarget.firstChild.style.outline = "none";
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    };

    var drop = function drop(event) {
      event.preventDefault();
      traversalTabNavs(navsWrap.children, function (tabNav) {
        tabNav.firstChild.style.outline = "none";
      });
      var target = handleTarget(event.target, navsWrap.children);

      if (target && target.parentNode !== dragged) {
        var dragIndex = [].indexOf.call(navsWrap.children, dragged);
        var targetIndex = [].indexOf.call(navsWrap.children, target);

        if (targetIndex > dragIndex) {
          target = navsWrap.children[targetIndex + 1];
        }

        navsWrap.insertBefore(dragged, target);
        var currentIndex = props.theme === "card" ? dragIndex : dragIndex - 1;
        var endIndex = props.theme === "card" ? dragIndex : targetIndex - 1;
        props.onDragSort({
          currentIndex: currentIndex,
          current: props.panels[currentIndex].value,
          targetIndex: endIndex,
          target: props.panels[endIndex].value
        });
      }
    };

    function setNavsWrap(val) {
      navsWrap = val;
      navsWrap.addEventListener("dragstart", dragstart, false);
      navsWrap.addEventListener("dragend", dragend, false);
      navsWrap.addEventListener("dragover", dragover, false);
      navsWrap.addEventListener("dragenter", dragenter, false);
      document.addEventListener("dragleave", dragleave, false);
      document.addEventListener("mousemove", dragleave, false);
      navsWrap.addEventListener("drop", drop, false);
    }

    vue.onUnmounted(function () {
      navsWrap.removeEventListener("dragstart", dragstart);
      navsWrap.removeEventListener("dragend", dragend);
      navsWrap.removeEventListener("dragover", dragover);
      navsWrap.removeEventListener("dragenter", dragenter);
      document.removeEventListener("dragleave", dragleave);
      document.removeEventListener("mousemove", dragleave);
      navsWrap.removeEventListener("drop", drop);
    });
    return {
      setNavsWrap: setNavsWrap
    };
  }

  function ownKeys$1A(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1A(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1A(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var calculateCanToLeft = tabBase.calculateCanToLeft,
      calculateCanToRight = tabBase.calculateCanToRight,
      calcScrollLeft = tabBase.calcScrollLeft,
      scrollToLeft = tabBase.scrollToLeft,
      scrollToRight = tabBase.scrollToRight,
      moveActiveTabIntoView = tabBase.moveActiveTabIntoView;
  var TTabNav = vue.defineComponent(_objectSpread$1z(_objectSpread$1z({
    name: "TTabNav",
    components: {
      TTabNavItem: TTabNavItem,
      TTabNavBar: TTabNavBar,
      ChevronLeftIcon: chevronLeft,
      ChevronRightIcon: chevronRight,
      CloseIcon: close,
      AddIcon: add,
      Transition: vue.Transition
    }
  }, {
    resizeObserver: null
  }), {}, {
    props: {
      theme: props$R.theme,
      panels: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      value: props$R.value,
      placement: props$R.placement,
      size: props$R.size,
      disabled: props$R.disabled,
      addable: props$R.addable,
      onChange: props$R.onChange,
      onAdd: props$R.onAdd,
      onRemove: props$R.onRemove,
      dragSort: props$R.dragSort,
      onDragSort: props$R.onDragSort
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("tabs");
      var classPrefix = usePrefixClass();

      var _useCommonClassName = useCommonClassName$2(),
          SIZE = _useCommonClassName.SIZE;

      var scrollLeft = vue.ref(0);
      var canToLeft = vue.ref(false);
      var canToRight = vue.ref(false);
      var navsContainerRef = vue.ref();
      var navsWrapRef = vue.ref();
      var leftOperationsRef = vue.ref();
      var toLeftBtnRef = vue.ref();
      var rightOperationsRef = vue.ref();
      var toRightBtnRef = vue.ref();
      var activeTabRef = vue.ref();

      var getRefs = function getRefs() {
        return {
          navsContainer: navsContainerRef.value,
          navsWrap: navsWrapRef.value,
          leftOperations: leftOperationsRef.value,
          toLeftBtn: toLeftBtnRef.value,
          rightOperations: rightOperationsRef.value,
          toRightBtn: toRightBtnRef.value
        };
      };

      var wrapTransformStyle = vue.computed(function () {
        if (["left", "right"].includes(props.placement.toLowerCase())) return {};
        return {
          transform: "translate3d(".concat(-scrollLeft.value, "px, 0, 0)")
        };
      });
      var navsContainerStyle = vue.computed(function () {
        return props.addable ? {
          "min-height": "48px"
        } : null;
      });
      var iconBaseClass = vue.computed(function () {
        var _ref;

        return _ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "__btn"), true), _defineProperty$3(_ref, SIZE.value.medium, props.size === "medium"), _defineProperty$3(_ref, SIZE.value.large, props.size === "large"), _ref;
      });
      var leftIconClass = vue.computed(function () {
        return _objectSpread$1z(_defineProperty$3({}, "".concat(COMPONENT_NAME.value, "__btn--left"), true), iconBaseClass.value);
      });
      var rightIconClass = vue.computed(function () {
        return _objectSpread$1z(_defineProperty$3({}, "".concat(COMPONENT_NAME.value, "__btn--right"), true), iconBaseClass.value);
      });
      var addIconClass = vue.computed(function () {
        return _objectSpread$1z(_defineProperty$3({}, "".concat(COMPONENT_NAME.value, "__add-btn"), true), iconBaseClass.value);
      });
      var navContainerClass = vue.computed(function () {
        var _ref2;

        return _ref2 = {}, _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "__nav-container"), true), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "__nav--card"), props.theme === "card"), _defineProperty$3(_ref2, "".concat(classPrefix.value, "-is-").concat(props.placement), true), _defineProperty$3(_ref2, "".concat(classPrefix.value, "-is-addable"), props.theme === "card" && props.addable), _ref2;
      });
      var navScrollContainerClass = vue.computed(function () {
        var _ref3;

        return _ref3 = {}, _defineProperty$3(_ref3, "".concat(COMPONENT_NAME.value, "__nav-scroll"), true), _defineProperty$3(_ref3, "".concat(classPrefix.value, "-is-scrollable"), canToLeft.value || canToRight.value), _ref3;
      });
      var navsWrapClass = vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__nav-wrap"), "".concat(classPrefix.value, "-is-smooth"), _defineProperty$3({}, "".concat(classPrefix.value, "-is-vertical"), props.placement === "left" || props.placement === "right")];
      });

      var totalAdjust = function totalAdjust() {
        adjustArrowDisplay();
        adjustScrollLeft();
      };

      vue.watch([scrollLeft, function () {
        return props.placement;
      }], totalAdjust);
      useResize(debounce_1(totalAdjust), navsContainerRef.value);
      vue.onMounted(totalAdjust);

      var adjustScrollLeft = function adjustScrollLeft() {
        scrollLeft.value = calcScrollLeft(getRefs(), scrollLeft.value);
      };

      var adjustArrowDisplay = function adjustArrowDisplay() {
        canToLeft.value = calculateCanToLeft(getRefs(), scrollLeft.value, props.placement);
        canToRight.value = calculateCanToRight(getRefs(), scrollLeft.value, props.placement);
      };

      var handleScroll = function handleScroll(direction) {
        if (direction === "left") {
          scrollLeft.value = scrollToLeft(getRefs(), scrollLeft.value);
        } else {
          scrollLeft.value = scrollToRight(getRefs(), scrollLeft.value);
        }
      };

      var handleAddTab = function handleAddTab(e) {
        var _props$onAdd;

        (_props$onAdd = props.onAdd) === null || _props$onAdd === void 0 ? void 0 : _props$onAdd.call(props, {
          e: e
        });
      };

      var tabClick = function tabClick(event, nav) {
        var value = nav.value,
            disabled = nav.disabled;

        if (disabled || props.value === value) {
          return false;
        }

        props.onChange(value);
      };

      var removeBtnClick = function removeBtnClick(_ref5) {
        var e = _ref5.e,
            value = _ref5.value,
            index = _ref5.index;
        props.onRemove({
          e: e,
          value: value,
          index: index
        });
      };

      var setActiveTab = function setActiveTab(ref2) {
        if ((ref2 === null || ref2 === void 0 ? void 0 : ref2.value) === props.value && activeTabRef.value !== ref2.$el) {
          activeTabRef.value = ref2.$el;
          scrollLeft.value = moveActiveTabIntoView(_objectSpread$1z({
            activeTab: activeTabRef.value
          }, getRefs()), scrollLeft.value);
        }
      };

      var _useDragSort = useDragSort$1(props),
          setNavsWrap = _useDragSort.setNavsWrap;

      vue.onMounted(function () {
        setNavsWrap(navsWrapRef.value);
      });
      var navs = vue.computed(function () {
        return props.panels.map(function (panel, index) {
          var _panel$children;

          var label;

          if (panel !== null && panel !== void 0 && (_panel$children = panel.children) !== null && _panel$children !== void 0 && _panel$children.label) {
            label = panel.children.label();
          } else {
            label = panel.label || "\u9009\u9879\u5361".concat(index + 1);
          }

          return vue.createVNode(TTabNavItem, {
            "ref": setActiveTab,
            "draggable": props.dragSort,
            "key": panel.value,
            "index": index,
            "theme": props.theme,
            "size": props.size,
            "placement": props.placement,
            "label": label,
            "active": panel.value === props.value,
            "disabled": props.disabled || panel.disabled,
            "removable": panel.removable,
            "value": panel.value,
            "onClick": function onClick(e) {
              return tabClick(e, panel);
            },
            "onRemove": removeBtnClick
          }, null);
        });
      });

      var renderArrows = function renderArrows() {
        return [vue.createVNode("div", {
          "ref": leftOperationsRef,
          "class": ["".concat(COMPONENT_NAME.value, "__operations"), "".concat(COMPONENT_NAME.value, "__operations--left")]
        }, [vue.createVNode(vue.resolveComponent("transition"), {
          "name": "fade",
          "mode": "out-in",
          "appear": true
        }, {
          "default": function _default() {
            return [canToLeft.value ? vue.createVNode("div", {
              "ref": toLeftBtnRef,
              "class": leftIconClass.value,
              "onClick": function onClick() {
                return handleScroll("left");
              }
            }, [vue.createVNode(chevronLeft, null, null)]) : null];
          }
        })]), vue.createVNode("div", {
          "ref": rightOperationsRef,
          "class": ["".concat(COMPONENT_NAME.value, "__operations"), "".concat(COMPONENT_NAME.value, "__operations--right")]
        }, [vue.createVNode(vue.resolveComponent("transition"), {
          "name": "fade",
          "mode": "out-in",
          "appear": true
        }, {
          "default": function _default() {
            return [canToRight.value ? vue.createVNode("div", {
              "ref": toRightBtnRef,
              "class": rightIconClass.value,
              "onClick": function onClick() {
                return handleScroll("right");
              }
            }, [vue.createVNode(chevronRight, null, null)]) : null];
          }
        }), props.addable ? vue.createVNode("div", {
          "class": addIconClass.value,
          "onClick": handleAddTab
        }, [vue.createVNode(add, null, null)]) : null])];
      };

      var renderNavs = function renderNavs() {
        return vue.createVNode("div", {
          "class": navContainerClass.value
        }, [vue.createVNode("div", {
          "class": navScrollContainerClass.value
        }, [vue.createVNode("div", {
          "ref": navsWrapRef,
          "class": navsWrapClass.value,
          "style": wrapTransformStyle.value
        }, [props.theme !== "card" && vue.createVNode(TTabNavBar, {
          "placement": props.placement,
          "value": props.value,
          "navs": navs.value
        }, null), navs.value])])]);
      };

      return function () {
        return vue.createVNode("div", {
          "ref": navsContainerRef,
          "class": ["".concat(COMPONENT_NAME.value, "__nav")],
          "style": navsContainerStyle.value
        }, [renderArrows(), renderNavs()]);
      };
    }
  }));

  var _Tabs = vue.defineComponent({
    name: "TTabs",
    components: {
      TTabPanel: _TabPanel,
      TTabNav: TTabNav
    },
    props: props$R,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("tabs");
      var classPrefix = usePrefixClass();
      var renderTNodeJSX = useTNodeJSX();

      var _toRefs = vue.toRefs(props2),
          value = _toRefs.value,
          modelValue = _toRefs.modelValue;

      var _useVModel = useVModel(value, modelValue, props2.defaultValue || "", props2.onChange),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          tabValue = _useVModel2[0],
          setTabValue = _useVModel2[1];

      vue.provide("tabs", {
        value: tabValue
      });

      var onTabAdd = function onTabAdd(context) {
        var _props2$onAdd;

        (_props2$onAdd = props2.onAdd) === null || _props2$onAdd === void 0 ? void 0 : _props2$onAdd.call(props2, {
          e: context.e
        });
      };

      var onTabChange = function onTabChange(value2) {
        setTabValue(value2);
      };

      var onTabRemove = function onTabRemove(_ref) {
        var e = _ref.e,
            value2 = _ref.value,
            index = _ref.index;
        props2.onRemove({
          value: value2,
          index: index,
          e: e
        });
      };

      var getSlotPanels = function getSlotPanels() {
        var content = renderTNodeJSX("default");
        if (!content) return [];
        content = content.map(function (item) {
          if (item.children && Array.isArray(item.children)) return item.children;
          return item;
        }).flat().filter(function (item) {
          return item.type.name === "TTabPanel";
        });
        return content;
      };

      var renderHeader = function renderHeader() {
        var _props2$list, _ref2;

        var panels = ((_props2$list = props2.list) !== null && _props2$list !== void 0 && _props2$list.length ? props2.list : getSlotPanels()) || [];
        var panelsData = panels.map(function (item) {
          var selfItem = item;

          if (item.props) {
            Object.keys(item.props).forEach(function (key) {
              selfItem[key] = item.props[key];
            });
          }

          return selfItem;
        });
        var tabNavProps = {
          theme: props2.theme,
          value: tabValue.value,
          size: props2.size,
          disabled: props2.disabled,
          placement: props2.placement,
          addable: props2.addable,
          panels: panelsData,
          dragSort: props2.dragSort
        };
        return vue.createVNode("div", {
          "class": (_ref2 = {}, _defineProperty$3(_ref2, "".concat(classPrefix.value, "-tabs__header"), true), _defineProperty$3(_ref2, "".concat(classPrefix.value, "-is-").concat(props2.placement), true), _ref2)
        }, [vue.createVNode(TTabNav, vue.mergeProps(tabNavProps, {
          "onDragSort": props2.onDragSort,
          "onChange": onTabChange,
          "onAdd": onTabAdd,
          "onRemove": onTabRemove
        }), null)]);
      };

      var renderContent = function renderContent() {
        var _props2$list2;

        var panels = getSlotPanels();

        if ((_props2$list2 = props2.list) !== null && _props2$list2 !== void 0 && _props2$list2.length) {
          return props2.list.map(function (item) {
            return vue.createVNode(_TabPanel, vue.mergeProps(item, {
              "onRemove": onTabRemove
            }), null);
          });
        }

        if (panels && panels.length) {
          return vue.createVNode("div", {
            "class": ["".concat(classPrefix.value, "-tabs__content")]
          }, [panels]);
        }

        console.warn("Tdesign error: list or slots is empty");
      };

      return function () {
        return vue.createVNode("div", {
          "class": [COMPONENT_NAME.value]
        }, [props2.placement !== "bottom" ? [renderHeader(), renderContent()] : [renderContent(), renderHeader()]]);
      };
    }
  });

  var Tabs = withInstall(_Tabs);
  var TabPanel = withInstall(_TabPanel);

  function ownKeys$1z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1z(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot$o(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var _HeadMenu = vue.defineComponent({
    name: "THeadMenu",
    props: _objectSpread$1y({}, props$S),
    setup: function setup(props2, ctx) {
      var classPrefix = usePrefixClass();
      vue.watchEffect(function () {
        if (ctx.slots.options) {
          log.warnOnce("TMenu", "`options` slot is going to be deprecated, please use `operations` for slot instead.");
        }
      });

      var _toRefs = vue.toRefs(props2),
          value = _toRefs.value,
          modelValue = _toRefs.modelValue,
          expanded = _toRefs.expanded;

      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          activeValue = _useVModel2[0],
          setActiveValue = _useVModel2[1];

      var _useDefaultValue = useDefaultValue(expanded, props2.defaultExpanded, props2.onExpand, "expanded"),
          _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
          expandValues = _useDefaultValue2[0],
          setExpanded = _useDefaultValue2[1];

      var activeValues = vue.ref([]);
      var theme = vue.computed(function () {
        return props2.theme;
      });
      var menuClass = vue.computed(function () {
        return ["".concat(classPrefix.value, "-menu"), "".concat(classPrefix.value, "-head-menu"), "".concat(classPrefix.value, "-menu--").concat(props2.theme)];
      });
      var mode = vue.ref(props2.expandType);
      var submenu = vue.reactive([]);
      var vMenu = new VMenu({
        isMutex: true,
        expandValues: expandValues.value
      });
      vue.provide("TdMenu", {
        mode: mode,
        theme: theme,
        vMenu: vMenu,
        isHead: true,
        expandValues: expandValues,
        activeValue: activeValue,
        activeValues: activeValues,
        select: function select(value2) {
          setActiveValue(value2);
        },
        open: function open(value2, type) {
          var expanded2 = _toConsumableArray(expandValues.value);

          var index = expanded2.indexOf(value2);

          if (mode.value === "popup") {
            if (type === "add") {
              if (index === -1) {
                expanded2.push(value2);
              }
            } else if (type === "remove") {
              expanded2.splice(index, 1);
            }
          } else {
            expanded2.splice(0, 1);

            if (index === -1) {
              expanded2.push(value2);
            }
          }

          setExpanded(expanded2);
        }
      });

      var handleTabChange = function handleTabChange(value2) {
        setActiveValue(value2);
      };

      var handleSubmenuExpand = function handleSubmenuExpand(value2) {
        var ans = vMenu.getChild(value2);
        submenu.length = 0;
        submenu.push.apply(submenu, _toConsumableArray(ans));
      };

      vue.watch(expandValues, function (value2) {
        if (mode.value === "normal") {
          handleSubmenuExpand(value2[0]);
        }
      });

      var updateActiveValues = function updateActiveValues(value2) {
        activeValues.value = vMenu.select(value2);
      };

      vue.watch(activeValue, updateActiveValues);
      vue.watch(function () {
        return props2.expandType;
      }, function (value2) {
        mode.value = value2;
      });
      vue.onMounted(function () {
        var _expandValues$value;

        activeValues.value = vMenu.select(activeValue.value);

        if (((_expandValues$value = expandValues.value) === null || _expandValues$value === void 0 ? void 0 : _expandValues$value.length) > 0) {
          handleSubmenuExpand(expandValues.value[0]);
        }
      });
      return {
        classPrefix: classPrefix,
        mode: mode,
        menuClass: menuClass,
        expandValues: expandValues,
        activeValue: activeValue,
        activeValues: activeValues,
        submenu: submenu,
        handleTabChange: handleTabChange
      };
    },
    methods: {
      renderNormalSubmenu: function renderNormalSubmenu() {
        var _slot;

        if (this.submenu.length === 0) return null;
        return vue.createVNode("ul", {
          "class": ["".concat(this.classPrefix, "-head-menu__submenu"), "".concat(this.classPrefix, "-submenu")]
        }, [vue.createVNode(Tabs, {
          "value": this.activeValue,
          "onChange": this.handleTabChange
        }, _isSlot$o(_slot = this.submenu.map(function (item) {
          var _item$vnode$;

          return vue.createVNode(TabPanel, {
            "value": item.value,
            "label": (_item$vnode$ = item.vnode()[0]) === null || _item$vnode$ === void 0 ? void 0 : _item$vnode$.children
          }, null);
        })) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        })]);
      }
    },
    render: function render() {
      var classPrefix = this.classPrefix;
      var operations = renderContent(this, "operations", "options");
      var logo = renderTNodeJSX(this, "logo");
      return vue.createVNode("div", {
        "class": this.menuClass
      }, [vue.createVNode("div", {
        "class": "".concat(classPrefix, "-head-menu__inner")
      }, [logo && vue.createVNode("div", {
        "class": "".concat(classPrefix, "-menu__logo")
      }, [logo]), vue.createVNode("ul", {
        "class": "".concat(classPrefix, "-menu")
      }, [renderContent(this, "default", "content")]), operations && vue.createVNode("div", {
        "class": "".concat(classPrefix, "-menu__operations")
      }, [operations])]), this.mode === "normal" && this.renderNormalSubmenu()]);
    }
  });

  var props$Q = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    icon: {
      type: Function
    },
    title: {
      type: [String, Function]
    },
    value: {
      type: [String, Number]
    }
  };

  var FakeArrow = vue.defineComponent({
    name: "TFakeArrow",
    props: {
      isActive: {
        type: Boolean
      },
      overlayClassName: {
        type: [String, Object, Array]
      },
      overlayStyle: {
        type: Object || String
      }
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("fake-arrow");
      var classes = vue.computed(function () {
        return [COMPONENT_NAME.value, _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--active"), props.isActive), props.overlayClassName];
      });
      return {
        classes: classes
      };
    },
    render: function render() {
      return vue.createVNode("svg", {
        "class": this.classes,
        "width": "16",
        "height": "16",
        "viewBox": "0 0 16 16",
        "fill": "none",
        "xmlns": "http://www.w3.org/2000/svg",
        "style": this.overlayStyle
      }, [vue.createVNode("path", {
        "d": "M3.75 5.7998L7.99274 10.0425L12.2361 5.79921",
        "stroke": "black",
        "stroke-opacity": "0.9",
        "stroke-width": "1.3"
      }, null)]);
    }
  });

  function ownKeys$1y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1x(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1y(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Submenu = vue.defineComponent({
    name: "TSubmenu",
    props: props$Q,
    setup: function setup(props2, ctx) {
      var classPrefix = usePrefixClass();
      var menu = vue.inject("TdMenu");
      var theme = menu.theme,
          activeValues = menu.activeValues,
          expandValues = menu.expandValues,
          mode = menu.mode,
          isHead = menu.isHead,
          open = menu.open;
      var submenu = vue.inject("TdSubmenu", null);
      var menuItems = vue.ref([]);
      var isActive = vue.computed(function () {
        return activeValues.value.indexOf(props2.value) > -1;
      });
      var popupVisible = vue.ref(false);
      var isCursorInPopup = vue.ref(false);
      var rippleColor = vue.computed(function () {
        return theme.value === "light" ? "#E7E7E7" : "#383838";
      });
      var isOpen = vue.computed(function () {
        var _expandValues$value;

        if (mode.value === "popup") {
          return popupVisible.value;
        }

        return expandValues ? (_expandValues$value = expandValues.value) === null || _expandValues$value === void 0 ? void 0 : _expandValues$value.includes(props2.value) : false;
      });
      var isNested = vue.ref(false);
      var submenuRef = vue.ref();
      useRipple(submenuRef, rippleColor);
      var classes = vue.computed(function () {
        var _ref;

        return ["".concat(classPrefix.value, "-submenu"), (_ref = {}, _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-disabled"), props2.disabled), _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-opened"), isOpen.value), _ref)];
      });
      var popupClass = vue.computed(function () {
        return ["".concat(classPrefix.value, "-menu__popup"), "".concat(classPrefix.value, "-menu__popup--").concat(theme.value), "".concat(classPrefix.value, "-is-").concat(isHead ? "horizontal" : "vertical"), _defineProperty$3({}, "".concat(classPrefix.value, "-is-opened"), popupVisible.value)];
      });
      var submenuClass = vue.computed(function () {
        var _ref3;

        return ["".concat(classPrefix.value, "-menu__item"), "".concat(classPrefix.value, "-menu__item-spacer"), "".concat(classPrefix.value, "-menu__item-spacer--").concat(isHead && !isNested.value ? "bottom" : "right"), (_ref3 = {}, _defineProperty$3(_ref3, "".concat(classPrefix.value, "-is-disabled"), props2.disabled), _defineProperty$3(_ref3, "".concat(classPrefix.value, "-is-opened"), isOpen.value), _defineProperty$3(_ref3, "".concat(classPrefix.value, "-is-active"), isActive.value), _ref3)];
      });
      var subClass = vue.computed(function () {
        return ["".concat(classPrefix.value, "-menu__sub"), _defineProperty$3({}, "".concat(classPrefix.value, "-is-opened"), isOpen.value)];
      });
      var arrowClass = vue.computed(function () {
        return [_defineProperty$3({}, "".concat(classPrefix.value, "-fake-arrow--active"), isOpen.value)];
      });

      var handleMouseEnter = function handleMouseEnter() {
        if (props2.disabled) return;
        setTimeout(function () {
          if (!popupVisible.value) {
            open(props2.value);
          }

          popupVisible.value = true;
        }, 0);
      };

      var handleMouseLeave = function handleMouseLeave(e) {
        setTimeout(function () {
          var _e$relatedTarget;

          var inPopup = (_e$relatedTarget = e.relatedTarget) === null || _e$relatedTarget === void 0 ? void 0 : _e$relatedTarget.classList.contains("".concat(classPrefix.value, "-menu__popup"));
          if (isCursorInPopup.value || inPopup) return;
          popupVisible.value = false;
        }, 0);
      };

      var handleMouseLeavePopup = function handleMouseLeavePopup(e) {
        var toElement = e.toElement;
        var target = toElement;

        var isSubmenu = function isSubmenu(el) {
          return el === submenuRef.value;
        };

        while (target !== document && !isSubmenu(target)) {
          target = target.parentNode;
        }

        isCursorInPopup.value = false;

        if (!isSubmenu(target)) {
          popupVisible.value = false;
        }
      };

      var handleEnterPopup = function handleEnterPopup() {
        isCursorInPopup.value = true;
      };

      var handleSubmenuItemClick = function handleSubmenuItemClick() {
        if (props2.disabled) return;
        open(props2.value);
      };

      vue.watch(popupVisible, function (visible) {
        menu.open(props2.value, visible ? "add" : "remove");
      });

      var _toRefs = vue.toRefs(props2),
          value = _toRefs.value;

      vue.provide("TdSubmenu", vue.reactive({
        value: value,
        addMenuItem: function addMenuItem(item) {
          menuItems.value.push(item);

          if (submenu) {
            submenu.addMenuItem(item);
          }
        }
      }));
      vue.onMounted(function () {
        var _menu$vMenu;

        menu === null || menu === void 0 ? void 0 : (_menu$vMenu = menu.vMenu) === null || _menu$vMenu === void 0 ? void 0 : _menu$vMenu.add({
          value: props2.value,
          parent: submenu === null || submenu === void 0 ? void 0 : submenu.value,
          vnode: ctx.slots["default"]
        });
        var instance = vue.getCurrentInstance();
        var node = instance.parent;

        while (node && !/^t(head)?menu/i.test((_node = node) === null || _node === void 0 ? void 0 : _node.type.name)) {
          var _node, _node2, _node3;

          if (/submenu/i.test((_node2 = node) === null || _node2 === void 0 ? void 0 : _node2.type.name)) {
            isNested.value = true;
            break;
          }

          node = (_node3 = node) === null || _node3 === void 0 ? void 0 : _node3.parent;
        }
      });
      return {
        classPrefix: classPrefix,
        menuItems: menuItems,
        mode: mode,
        theme: theme,
        isHead: isHead,
        isNested: isNested,
        classes: classes,
        subClass: subClass,
        arrowClass: arrowClass,
        popupClass: popupClass,
        submenuClass: submenuClass,
        submenuRef: submenuRef,
        popupVisible: popupVisible,
        isCursorInPopup: isCursorInPopup,
        handleEnterPopup: handleEnterPopup,
        handleMouseEnter: handleMouseEnter,
        handleMouseLeave: handleMouseLeave,
        handleMouseLeavePopup: handleMouseLeavePopup,
        handleSubmenuItemClick: handleSubmenuItemClick
      };
    },
    methods: {
      renderPopup: function renderPopup(triggerElement) {
        var _this = this;

        var placement = "right-top";

        if (!this.isNested && this.isHead) {
          placement = "bottom-left";
        }

        var overlayStyle = _defineProperty$3({}, "margin-".concat(this.isHead ? "top" : "left"), "20px");

        var popupWrapper = vue.createVNode("div", {
          "class": ["".concat(this.classPrefix, "-menu__spacer"), "".concat(this.classPrefix, "-menu__spacer--").concat(!this.isNested && this.isHead ? "top" : "left")],
          "onMouseenter": this.handleEnterPopup,
          "onMouseleave": this.handleMouseLeavePopup
        }, [vue.createVNode("ul", {
          "class": "".concat(this.classPrefix, "-menu__popup-wrapper")
        }, [renderContent(this, "default", "content")])]);

        var popupInside = vue.createVNode("div", {
          "ref": "submenuRef",
          "class": this.submenuClass
        }, [triggerElement, vue.createVNode("div", {
          "class": this.popupClass
        }, [popupWrapper])]);

        var slots = {
          content: function content() {
            return popupWrapper;
          }
        };

        var realPopup = vue.createVNode(Popup, {
          "overlayClassName": _toConsumableArray(this.popupClass),
          "visible": this.popupVisible,
          "placement": placement,
          "overlayStyle": overlayStyle
        }, _objectSpread$1x({
          "default": function _default() {
            return [vue.createVNode("div", {
              "ref": "submenuRef",
              "class": _this.submenuClass
            }, [triggerElement])];
          }
        }, slots));

        return this.isNested ? popupInside : realPopup;
      },
      renderHeadSubmenu: function renderHeadSubmenu() {
        var icon = renderTNodeJSX(this, "icon");
        var normalSubmenu = [vue.createVNode("div", {
          "ref": "submenuRef",
          "class": this.submenuClass,
          "onClick": this.handleSubmenuItemClick
        }, [icon, vue.createVNode("span", {
          "class": ["".concat(this.classPrefix, "-menu__content")]
        }, [renderTNodeJSX(this, "title", {
          silent: true
        })])]), vue.createVNode("ul", {
          "style": "opacity: 0; width: 0; height: 0; overflow: hidden"
        }, [renderContent(this, "default", "content")])];
        var needRotate = this.mode === "popup" && this.isNested;
        var triggerElement = [icon, vue.createVNode("span", {
          "class": ["".concat(this.classPrefix, "-menu__content")]
        }, [renderTNodeJSX(this, "title", {
          silent: true
        })]), vue.createVNode(FakeArrow, {
          "overlayClassName": this.arrowClass,
          "overlayStyle": {
            transform: "rotate(".concat(needRotate ? -90 : 0, "deg)")
          }
        }, null)];
        return this.mode === "normal" ? normalSubmenu : this.renderPopup(triggerElement);
      },
      renderSubmenu: function renderSubmenu() {
        var hasContent = this.$slots.content || this.$slots["default"];
        var icon = renderTNodeJSX(this, "icon");
        var child = renderContent(this, "default", "content");

        var _getCurrentInstance = vue.getCurrentInstance(),
            parent = _getCurrentInstance.parent;

        var paddingLeft = 44;

        while (parent && parent.type.name !== "TMenu") {
          if (parent.type.name === "TSubmenu") {
            paddingLeft += 16;
          }

          parent = parent.parent;
        }

        var needRotate = this.mode === "popup" && this.isNested;
        var normalSubmenu = [vue.createVNode("div", {
          "ref": "submenuRef",
          "class": this.submenuClass,
          "onClick": this.handleSubmenuItemClick
        }, [icon, vue.createVNode("span", {
          "class": ["".concat(this.classPrefix, "-menu__content")]
        }, [renderTNodeJSX(this, "title", {
          silent: true
        })]), hasContent && vue.createVNode(FakeArrow, {
          "overlayClassName": this.arrowClass,
          "overlayStyle": {
            transform: "rotate(".concat(needRotate ? -90 : 0, "deg)")
          }
        }, null)]), vue.createVNode("ul", {
          "class": this.subClass,
          "style": {
            "--padding-left": "".concat(paddingLeft, "px")
          }
        }, [child])];
        var triggerElement = [icon, vue.createVNode("span", {
          "class": ["".concat(this.classPrefix, "-menu__content")]
        }, [renderTNodeJSX(this, "title", {
          silent: true
        })]), vue.createVNode(FakeArrow, {
          "overlayClassName": this.arrowClass,
          "overlayStyle": {
            transform: "rotate(".concat(needRotate ? -90 : 0, "deg)"),
            "margin-left": "auto"
          }
        }, null)];
        return this.mode === "normal" ? normalSubmenu : this.renderPopup(triggerElement);
      }
    },
    render: function render() {
      var child = null;
      var events = {};

      if (this.mode === "popup") {
        events = {
          onmouseenter: this.handleMouseEnter,
          onmouseleave: this.handleMouseLeave
        };
      }

      if (Object.keys(this.$slots).length > 0) {
        child = this.isHead ? this.renderHeadSubmenu() : this.renderSubmenu();
      }

      return vue.createVNode("li", vue.mergeProps({
        "class": this.classes
      }, events), [child]);
    }
  });

  var props$P = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    href: {
      type: String,
      "default": ""
    },
    icon: {
      type: Function
    },
    replace: Boolean,
    router: {
      type: Object
    },
    target: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["_blank", "_self", "_parent", "_top"].includes(val);
      }
    },
    to: {
      type: [String, Object]
    },
    value: {
      type: [String, Number]
    },
    onClick: Function
  };

  function emitEvent(vm, eventName) {
    var emitEventMethodName;

    if (typeof eventName === "string") {
      emitEventMethodName = getPropsApiByEvent(eventName);
    }

    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (typeof vm.$props[emitEventMethodName] === "function") {
      var _vm$$props;

      (_vm$$props = vm.$props)[emitEventMethodName].apply(_vm$$props, args);
    } else {
      vm.$emit.apply(vm, [eventName].concat(args));
    }
  }

  function ownKeys$1x(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1w(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1x(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1x(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _MenuItem = vue.defineComponent({
    name: "TMenuItem",
    props: _objectSpread$1w({}, props$P),
    emits: ["click"],
    setup: function setup(props2, ctx) {
      var classPrefix = usePrefixClass();
      var menu = vue.inject("TdMenu");
      var itemRef = vue.ref();
      useRipple(itemRef);
      var submenu = vue.inject("TdSubmenu", null);
      var active = vue.computed(function () {
        return menu.activeValue.value === props2.value;
      });
      var classes = vue.computed(function () {
        var _ref;

        return ["".concat(classPrefix.value, "-menu__item"), (_ref = {}, _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-active"), active.value), _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-disabled"), props2.disabled), _defineProperty$3(_ref, "".concat(classPrefix.value, "-menu__item--plain"), !ctx.slots.icon && !props2.icon), _defineProperty$3(_ref, "".concat(classPrefix.value, "-submenu__item"), !!submenu && !menu.isHead), _ref)];
      });
      vue.onMounted(function () {
        var _menu$vMenu;

        menu === null || menu === void 0 ? void 0 : (_menu$vMenu = menu.vMenu) === null || _menu$vMenu === void 0 ? void 0 : _menu$vMenu.add({
          value: props2.value,
          parent: submenu === null || submenu === void 0 ? void 0 : submenu.value,
          vnode: ctx.slots["default"]
        });
      });
      return {
        classPrefix: classPrefix,
        menu: menu,
        active: active,
        classes: classes,
        itemRef: itemRef
      };
    },
    methods: {
      handleClick: function handleClick() {
        if (this.disabled) return;
        this.menu.select(this.value);
        emitEvent(this, "click");

        if (this.href) {
          window.open(this.href, this.target);
        } else if (this.to) {
          var router = this.router || this.$router;
          var methods = this.replace ? "replace" : "push";
          router[methods](this.to)["catch"](function (err) {
            if (err.name !== "NavigationDuplicated" && !err.message.includes("Avoided redundant navigation to current location")) {
              throw err;
            }
          });
        }
      }
    },
    render: function render() {
      return vue.createVNode("li", {
        "ref": "itemRef",
        "class": this.classes,
        "onClick": this.handleClick
      }, [renderTNodeJSX(this, "icon"), vue.createVNode("span", {
        "class": ["".concat(this.classPrefix, "-menu__content")]
      }, [renderContent(this, "default", "content")])]);
    }
  });

  var props$O = {
    title: {
      type: [String, Function]
    }
  };

  var _MenuGroup = vue.defineComponent({
    name: "TMenuGroup",
    props: props$O,
    setup: function setup() {
      var classPrefix = usePrefixClass();
      return {
        classPrefix: classPrefix
      };
    },
    render: function render() {
      var classPrefix = this.classPrefix;
      return vue.createVNode("div", {
        "class": "".concat(classPrefix, "-menu-group")
      }, [vue.createVNode("div", {
        "class": "".concat(classPrefix, "-menu-group__title")
      }, [this.title]), renderTNodeJSX(this, "default")]);
    }
  });

  var Menu = withInstall(_Menu);
  var HeadMenu = withInstall(_HeadMenu);
  var Submenu = withInstall(_Submenu);
  var MenuItem = withInstall(_MenuItem);
  var MenuGroup = withInstall(_MenuGroup);

  var baseGetTag$2 = _baseGetTag,
      isObjectLike$3 = isObjectLike_1;
  /** `Object#toString` result references. */

  var numberTag$1 = '[object Number]';
  /**
   * Checks if `value` is classified as a `Number` primitive or object.
   *
   * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
   * classified as numbers, use the `_.isFinite` method.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a number, else `false`.
   * @example
   *
   * _.isNumber(3);
   * // => true
   *
   * _.isNumber(Number.MIN_VALUE);
   * // => true
   *
   * _.isNumber(Infinity);
   * // => true
   *
   * _.isNumber('3');
   * // => false
   */

  function isNumber$1(value) {
    return typeof value == 'number' || isObjectLike$3(value) && baseGetTag$2(value) == numberTag$1;
  }

  var isNumber_1 = isNumber$1;

  var isNumber = isNumber_1;
  /**
   * Checks if `value` is `NaN`.
   *
   * **Note:** This method is based on
   * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
   * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
   * `undefined` and other non-number values.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   * @example
   *
   * _.isNaN(NaN);
   * // => true
   *
   * _.isNaN(new Number(NaN));
   * // => true
   *
   * isNaN(undefined);
   * // => true
   *
   * _.isNaN(undefined);
   * // => false
   */

  function isNaN$1(value) {
    // An `NaN` primitive is the only value that is not equal to itself.
    // Perform the `toStringTag` check first to avoid errors with some
    // ActiveX objects in IE.
    return isNumber(value) && value != +value;
  }

  var _isNaN = isNaN$1;

  var _Addon = vue.defineComponent({
    name: "TAddon",
    inheritAttrs: false,
    props: {
      prepend: {
        type: [String, Function],
        "default": function _default() {
          return "";
        }
      },
      append: {
        type: [String, Function],
        "default": function _default() {
          return "";
        }
      }
    },
    setup: function setup(props, _ref) {
      var slots = _ref.slots;
      var COMPONENT_NAME = usePrefixClass("addon");
      var renderTNodeJSX = useTNodeJSX();

      var renderAddon = function renderAddon(h2, type, addon) {
        var addonNode;

        if (slots[type]) {
          addonNode = slots[type](null);
        } else if (typeof addon === "string") {
          addonNode = addon;
        } else if (typeof addon === "function") {
          addonNode = addon(h2);
        } else {
          addonNode = null;
        }

        return addonNode ? vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__").concat(type)
        }, [addonNode]) : addonNode;
      };

      return function () {
        var _ref2;

        var prepend = renderAddon(vue.h, "prepend", props.prepend);
        var append = renderAddon(vue.h, "append", props.append);
        var defaultSlot = renderTNodeJSX("default") || [null];
        var className = [COMPONENT_NAME.value, (_ref2 = {}, _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "--prepend"), prepend), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "--append"), append), _ref2)];

        if (!prepend && !append) {
          return defaultSlot[0];
        }

        return vue.createVNode("div", {
          "class": className
        }, [prepend, defaultSlot[0], append]);
      };
    }
  });

  var props$N = {
    align: {
      type: String,
      "default": "left",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "center", "right"].includes(val);
      }
    },
    autocomplete: {
      type: String,
      "default": ""
    },
    autofocus: Boolean,
    autoWidth: Boolean,
    clearable: Boolean,
    disabled: Boolean,
    format: {
      type: Function
    },
    inputClass: {
      type: [String, Object, Array]
    },
    label: {
      type: [String, Function]
    },
    maxcharacter: {
      type: Number
    },
    maxlength: {
      type: Number
    },
    name: {
      type: String,
      "default": ""
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    prefixIcon: {
      type: Function
    },
    readonly: Boolean,
    showClearIconOnEmpty: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["success", "warning", "error"].includes(val);
      }
    },
    suffix: {
      type: [String, Function]
    },
    suffixIcon: {
      type: Function
    },
    tips: {
      type: [String, Function]
    },
    type: {
      type: String,
      "default": "text",
      validator: function validator(val) {
        if (!val) return true;
        return ["text", "number", "url", "tel", "password", "search", "submit", "hidden"].includes(val);
      }
    },
    value: {
      type: [String, Number],
      "default": void 0
    },
    modelValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number]
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onCompositionend: Function,
    onCompositionstart: Function,
    onEnter: Function,
    onFocus: Function,
    onKeydown: Function,
    onKeypress: Function,
    onKeyup: Function,
    onMouseenter: Function,
    onMouseleave: Function,
    onPaste: Function,
    onWheel: Function
  };

  function useIcon() {
    var instance = vue.getCurrentInstance();
    return function renderIconTNode(iconType, defaultIcons) {
      var iconContent;

      if (typeof instance.props[iconType] === "function") {
        iconContent = instance.props[iconType](vue.h);
      } else if (instance.slots[iconType]) {
        iconContent = instance.slots[iconType] && instance.slots[iconType](null)[0];
      } else if (defaultIcons) {
        var Component = defaultIcons[instance.props.theme];
        iconContent = vue.createVNode(Component, null, null);
      }

      return iconContent;
    };
  }

  function useChildComponentSlots() {
    var instance = vue.getCurrentInstance();
    return function (childComponentName, slots) {
      var _slots, _slots$default;

      if (!slots) {
        slots = instance.slots;
      }

      var content = ((_slots = slots) === null || _slots === void 0 ? void 0 : (_slots$default = _slots["default"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(_slots)) || [];
      return content.map(function (item) {
        if (item.children && Array.isArray(item.children)) return item.children;
        return item;
      }).flat().filter(function (item) {
        return item.type.name === childComponentName;
      });
    };
  }

  function useCommonClassName() {
    var _useConfig = useConfig(),
        classPrefix = _useConfig.classPrefix;

    var sizeClassNames = {
      small: "".concat(classPrefix.value, "-size-s"),
      medium: "".concat(classPrefix.value, "-size-m"),
      large: "".concat(classPrefix.value, "-size-l"),
      "default": "",
      xs: "".concat(classPrefix.value, "-size-xs"),
      xl: "".concat(classPrefix.value, "-size-xl"),
      block: "".concat(classPrefix.value, "-size-full-width")
    };
    var statusClassNames = {
      loading: "".concat(classPrefix.value, "-is-loading"),
      loadMore: "".concat(classPrefix.value, "-is-load-more"),
      disabled: "".concat(classPrefix.value, "-is-disabled"),
      focused: "".concat(classPrefix.value, "-is-focused"),
      success: "".concat(classPrefix.value, "-is-success"),
      error: "".concat(classPrefix.value, "-is-error"),
      warning: "".concat(classPrefix.value, "-is-warning"),
      selected: "".concat(classPrefix.value, "-is-selected"),
      active: "".concat(classPrefix.value, "-is-active"),
      checked: "".concat(classPrefix.value, "-is-checked"),
      current: "".concat(classPrefix.value, "-is-current"),
      hidden: "".concat(classPrefix.value, "-is-hidden"),
      visible: "".concat(classPrefix.value, "-is-visible"),
      expanded: "".concat(classPrefix.value, "-is-expanded"),
      indeterminate: "".concat(classPrefix.value, "-is-indeterminate")
    };
    return {
      sizeClassNames: sizeClassNames,
      statusClassNames: statusClassNames,
      classNames: {
        size: sizeClassNames,
        status: statusClassNames
      }
    };
  }

  function ownKeys$1w(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1v(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1w(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1w(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var useVirtualScroll = function useVirtualScroll(_ref) {
    var data = _ref.data,
        container = _ref.container,
        _ref$fixedHeight = _ref.fixedHeight,
        fixedHeight = _ref$fixedHeight === void 0 ? false : _ref$fixedHeight,
        _ref$lineHeight = _ref.lineHeight,
        lineHeight = _ref$lineHeight === void 0 ? 30 : _ref$lineHeight,
        _ref$bufferSize = _ref.bufferSize,
        bufferSize = _ref$bufferSize === void 0 ? 20 : _ref$bufferSize,
        _ref$threshold = _ref.threshold,
        threshold = _ref$threshold === void 0 ? 100 : _ref$threshold;
    var state = vue.reactive({
      visibleData: [],
      cachedHeight: [],
      cachedScrollY: []
    });
    var isVirtual = vue.computed(function () {
      return data.value.length > threshold;
    });
    var updateId = vue.ref(0);
    var trs = /* @__PURE__ */new Map();
    var visibleCount = 0;
    var beforeScrollTop = 0;
    var index = 0;
    var offset = 0;
    var start = 0;
    var last = 0;

    var reset = function reset() {
      data.value.forEach(function (item, i) {
        item.$index = i;

        if (fixedHeight) {
          state.cachedScrollY[i] = i * lineHeight;
        }
      });

      if (!fixedHeight) {
        state.cachedScrollY[data.value.length - 1] = void 0;
      }
    };

    reset();
    var scrollHeight = vue.computed(function () {
      var cachedHeight = state.cachedHeight;
      var length = cachedHeight.length;

      if (length) {
        var maxScrollY = cachedHeight.reduce(function (sum, v) {
          return sum + v || lineHeight;
        }, 0);

        if (cachedHeight.length === data.value.length) {
          return maxScrollY;
        }

        var average = maxScrollY / cachedHeight.length;
        return maxScrollY + (data.value.length - cachedHeight.length) * average;
      }

      return isVirtual.value ? data.value.length * lineHeight : 0;
    });
    var translateY = vue.computed(function () {
      var visibleData = state.visibleData;
      var firstRow = visibleData[0];

      if (firstRow) {
        return visibleData.length === 1 ? 0 : state.cachedScrollY[firstRow.$index];
      }

      return 0;
    });

    var updateVisibleData = function updateVisibleData() {
      last = Math.min(start + visibleCount + bufferSize * 2, data.value.length);
      state.visibleData = data.value.slice(start, last);
    };

    var calculateScrollY = function calculateScrollY() {
      var _anchorDom$getBoundin;

      var anchorDom = trs.get(index);

      if (!anchorDom) {
        return;
      }

      var anchorDomHeight = anchorDom === null || anchorDom === void 0 ? void 0 : (_anchorDom$getBoundin = anchorDom.getBoundingClientRect()) === null || _anchorDom$getBoundin === void 0 ? void 0 : _anchorDom$getBoundin.height;
      state.cachedScrollY[index] = container.value.scrollTop - offset;
      state.cachedHeight[index] = anchorDomHeight;

      for (var i = index + 1; i <= state.visibleData[state.visibleData.length - 1].$index; i++) {
        var tr = trs.get(i);

        var _ref2 = (tr === null || tr === void 0 ? void 0 : tr.getBoundingClientRect()) || {},
            height = _ref2.height;

        state.cachedHeight[i] = height;
        var scrollY = state.cachedScrollY[i - 1] + state.cachedHeight[i - 1];
        state.cachedScrollY.splice(i, 1, scrollY);
      }

      for (var _i = index - 1; _i >= state.visibleData[0].$index; _i--) {
        var _tr = trs.get(_i);

        var _ref3 = (_tr === null || _tr === void 0 ? void 0 : _tr.getBoundingClientRect()) || {},
            _height = _ref3.height;

        state.cachedHeight[_i] = _height;

        var _scrollY = state.cachedScrollY[_i + 1] - state.cachedHeight[_i];

        state.cachedScrollY.splice(_i, 1, _scrollY);
      }

      if (state.cachedScrollY[0] > 0) {
        var distance = state.cachedScrollY[0];
        var length = Math.min(last, data.value.length);

        for (var _i2 = 0; _i2 < length; _i2++) {
          state.cachedScrollY.splice(_i2, 1, state.cachedScrollY[_i2] - distance);
        }

        var scrollTop = state.cachedScrollY[index - 1] ? state.cachedScrollY[index - 1] + offset : offset;
        container.value.scrollTop = scrollTop;
        beforeScrollTop = scrollTop;
      }

      if (state.cachedScrollY[start] < 0) {
        var s = state.cachedHeight.slice(0, Math.max(0, index)).reduce(function (sum, v) {
          return sum + v;
        }, 0) + offset;
        container.value.scrollTop = s;
        beforeScrollTop = s;

        if (s === 0) {
          index = 0;
          offset = 0;
        }
      }

      vue.nextTick(function () {
        var _container$value = container.value,
            scrollTop = _container$value.scrollTop,
            scrollHeight2 = _container$value.scrollHeight,
            clientHeight = _container$value.clientHeight;

        if (scrollTop + clientHeight === scrollHeight2) {
          for (var _i3 = last - 1; _i3 >= start; _i3--) {
            if (_i3 === last - 1) {
              state.cachedScrollY.splice(_i3, 1, scrollHeight2.value - state.cachedHeight[_i3]);
            } else {
              state.cachedScrollY.splice(_i3, 1, state.cachedScrollY[_i3 + 1] - state.cachedHeight[_i3]);
            }
          }
        }
      });
    };

    var handleScroll = function handleScroll() {
      if (!isVirtual.value) return;
      var scrollTop = container.value.scrollTop;
      var distance = scrollTop - beforeScrollTop;
      beforeScrollTop = scrollTop;
      distance += offset;
      var lastIndex = index;
      if (!distance) return;

      if (distance >= 0) {
        while (lastIndex < data.value.length && distance > (state.cachedHeight[lastIndex] || lineHeight)) {
          if (!state.cachedHeight[lastIndex]) {
            state.cachedHeight[lastIndex] = lineHeight;
          }

          distance -= state.cachedHeight[lastIndex];
          lastIndex++;
        }

        if (lastIndex >= data.value.length) {
          index = data.value.length - 1;
          offset = 0;
        } else {
          index = lastIndex;
          offset = distance;
        }

        var _container$value2 = container.value,
            clientHeight = _container$value2.clientHeight,
            scrollHeight2 = _container$value2.scrollHeight;

        if (scrollTop + clientHeight === scrollHeight2) {
          index = data.value.length - visibleCount + 1;
        }

        if (start <= index - bufferSize) {
          start = Math.min(data.value.length - visibleCount, index - bufferSize);

          if (start < 0) {
            start = 0;
          }
        }
      } else {
        while (distance < 0) {
          lastIndex--;

          if (!state.cachedHeight[lastIndex]) {
            state.cachedHeight[lastIndex] = lineHeight;
          }

          distance += state.cachedHeight[lastIndex];
        }

        if (lastIndex < 0) {
          index = 0;
          offset = 0;
        } else {
          index = lastIndex;
          offset = distance;
        }

        calculateScrollY();

        if (start > index - bufferSize) {
          start = Math.max(0, index - bufferSize);
        }
      }

      updateVisibleData();
    };

    !fixedHeight && vue.watch(updateId, calculateScrollY, {
      flush: "post"
    });

    var handleRowMounted = function handleRowMounted() {
      if (!isVirtual.value) return;
      updateId.value++;
    };

    vue.watch(data, function () {
      reset();
      state.visibleData = [];
      state.cachedScrollY = [];
      state.cachedHeight = [];
      beforeScrollTop = 0;
      index = 0;
      offset = 0;
      start = 0;
      trs.clear();

      if (data.value.length <= threshold) {
        state.visibleData = data.value;
      } else {
        updateVisibleData();
      }

      container.value && (container.value.scrollTop = 0);
    });
    var mounted = false;

    var refreshContainer = function refreshContainer() {
      if (mounted) {
        visibleCount = Math.ceil(container.value.offsetHeight / lineHeight);
        updateVisibleData();
      }
    };

    vue.onMounted(function () {
      if (!window || !window.IntersectionObserver) {
        return;
      }

      var ob = new window.IntersectionObserver(function (entries) {
        var entry = entries[0];

        if (entry.isIntersecting || entry.intersectionRatio) {
          mounted = true;
          isVirtual.value && refreshContainer();
          ob.unobserve(container.value);
        }
      });
      container.value && ob.observe(container.value);
    });
    return _objectSpread$1v(_objectSpread$1v({
      trs: trs,
      scrollHeight: scrollHeight
    }, vue.toRefs(state)), {}, {
      translateY: translateY,
      handleScroll: handleScroll,
      handleRowMounted: handleRowMounted,
      refreshContainer: refreshContainer,
      fixedHeight: fixedHeight,
      calculateScrollY: calculateScrollY
    });
  };

  var useCLASSNAMES$1 = function useCLASSNAMES() {
    var classPrefix = usePrefixClass();
    return vue.computed(function () {
      var form = "".concat(classPrefix.value, "-form");
      var input = "".concat(classPrefix.value, "-input");
      var is = "".concat(classPrefix.value, "-is");
      return {
        form: form,
        label: "".concat(form, "__label"),
        labelTop: "".concat(form, "__label--top"),
        inline: "".concat(form, "-inline"),
        formItem: "".concat(form, "__item"),
        formItemWithHelp: "".concat(form, "__item-with-help"),
        formItemWithExtra: "".concat(form, "__item-with-extra"),
        controls: "".concat(form, "__controls"),
        controlsContent: "".concat(form, "__controls-content"),
        status: "".concat(form, "__status"),
        extra: "".concat(input, "__extra"),
        help: "".concat(input, "__help"),
        success: "".concat(is, "-success"),
        successBorder: "".concat(form, "--success-border"),
        error: "".concat(is, "-error"),
        warning: "".concat(is, "-warning")
      };
    });
  };
  var FormInjectionKey = Symbol("FormProvide");
  var FormItemInjectionKey = Symbol("FormItemProvide");

  function useInput(props, expose) {
    var _toRefs = vue.toRefs(props),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue;

    var inputValue = vue.ref();
    var clearIconRef = vue.ref(null);
    var innerClickElement = vue.ref();

    var _useVModel = useVModel(value, modelValue, props.defaultValue, props.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];

    var isHover = vue.ref(false);
    var focused = vue.ref(false);
    var renderType = vue.ref(props.type);
    var inputRef = vue.ref(null);
    var inputPreRef = vue.ref(null);
    var showClear = vue.computed(function () {
      return (innerValue.value && !props.disabled && props.clearable && !props.readonly || props.showClearIconOnEmpty) && isHover.value;
    });

    var focus = function focus() {
      var _inputRef$value;

      return (_inputRef$value = inputRef.value) === null || _inputRef$value === void 0 ? void 0 : _inputRef$value.focus();
    };

    var blur = function blur() {
      var _inputRef$value2;

      return (_inputRef$value2 = inputRef.value) === null || _inputRef$value2 === void 0 ? void 0 : _inputRef$value2.blur();
    };

    var emitFocus = function emitFocus(e) {
      var _props$onFocus;

      inputValue.value = innerValue.value;
      if (props.disabled || props.readonly) return;
      focused.value = true;
      (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, innerValue.value, {
        e: e
      });
    };

    var emitClear = function emitClear(_ref) {
      var _props$onClear;

      var e = _ref.e;
      (_props$onClear = props.onClear) === null || _props$onClear === void 0 ? void 0 : _props$onClear.call(props, {
        e: e
      });
      setInnerValue("");
    };

    var onClearIconMousedown = function onClearIconMousedown(e) {
      innerClickElement.value = e.target;
    };

    var emitPassword = function emitPassword() {
      var toggleType = renderType.value === "password" ? "text" : "password";
      renderType.value = toggleType;
    };

    var setInputElValue = function setInputElValue() {
      var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var inputEl = inputRef.value;
      if (!inputEl) return;
      var sV = String(v);

      if (!inputEl.value) {
        return;
      }

      if (inputEl.value !== sV) {
        inputEl.value = sV;
      }
    };

    var inputValueChangeHandle = function inputValueChangeHandle(e) {
      var target = e.target;
      var val = target.value;

      if (props.maxcharacter && props.maxcharacter >= 0) {
        var stringInfo = getCharacterLength(val, props.maxcharacter);
        val = _typeof$2(stringInfo) === "object" && stringInfo.characters;
      }

      setInnerValue(val, {
        e: e
      });
      vue.nextTick(function () {
        return setInputElValue(innerValue.value);
      });
    };

    var handleInput = function handleInput(e) {
      var checkInputType = e.inputType && e.inputType === "insertCompositionText";
      if (e.isComposing || checkInputType) return;
      inputValueChangeHandle(e);
    };

    var isClearIcon = function isClearIcon() {
      var _clearIconRef$value;

      var tmp = innerClickElement.value;
      if (!tmp || !tmp.tagName || !((_clearIconRef$value = clearIconRef.value) !== null && _clearIconRef$value !== void 0 && _clearIconRef$value.$el) || !["path", "svg"].includes(tmp.tagName)) return false;

      while (tmp) {
        var _clearIconRef$value2;

        if (((_clearIconRef$value2 = clearIconRef.value) === null || _clearIconRef$value2 === void 0 ? void 0 : _clearIconRef$value2.$el) === tmp) {
          return true;
        }

        tmp = tmp.parentNode;
      }

      return false;
    };

    var formItem = vue.inject(FormItemInjectionKey, void 0);

    var formatAndEmitBlur = function formatAndEmitBlur(e) {
      if (props.format) {
        inputValue.value = props.format(innerValue.value);
      }

      focused.value = false;

      if (!isClearIcon()) {
        var _props$onBlur;

        (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, props.value, {
          e: e
        });
        formItem === null || formItem === void 0 ? void 0 : formItem.handleBlur();
      }
    };

    var onHandleCompositionend = function onHandleCompositionend(e) {
      var _props$onCompositione;

      inputValueChangeHandle(e);
      (_props$onCompositione = props.onCompositionend) === null || _props$onCompositione === void 0 ? void 0 : _props$onCompositione.call(props, innerValue.value, {
        e: e
      });
    };

    var onHandleCompositionstart = function onHandleCompositionstart(e) {
      var _props$onCompositions;

      (_props$onCompositions = props.onCompositionstart) === null || _props$onCompositions === void 0 ? void 0 : _props$onCompositions.call(props, innerValue.value, {
        e: e
      });
    };

    var onRootClick = function onRootClick(e) {
      var _inputRef$value3;

      (_inputRef$value3 = inputRef.value) === null || _inputRef$value3 === void 0 ? void 0 : _inputRef$value3.focus();
    };

    vue.watch(function () {
      return props.autofocus;
    }, function (value2) {
      if (value2 === true) {
        vue.nextTick(function () {
          var _inputRef$value4;

          (_inputRef$value4 = inputRef.value) === null || _inputRef$value4 === void 0 ? void 0 : _inputRef$value4.focus();
        });
      }
    }, {
      immediate: true
    });
    vue.watch(innerValue, function (v) {
      inputValue.value = v;
    }, {
      immediate: true
    });
    expose({
      focus: focus,
      blur: blur
    });
    return {
      isHover: isHover,
      focused: focused,
      renderType: renderType,
      showClear: showClear,
      inputRef: inputRef,
      clearIconRef: clearIconRef,
      inputValue: inputValue,
      emitFocus: emitFocus,
      formatAndEmitBlur: formatAndEmitBlur,
      onHandleCompositionend: onHandleCompositionend,
      onHandleCompositionstart: onHandleCompositionstart,
      onRootClick: onRootClick,
      emitPassword: emitPassword,
      handleInput: handleInput,
      emitClear: emitClear,
      onClearIconMousedown: onClearIconMousedown,
      innerValue: innerValue,
      inputPreRef: inputPreRef
    };
  }

  function useInputEventHandler(props, isHover, innerValue) {
    var handleKeydown = function handleKeydown(e) {
      if (props.disabled) return;
      var code = e.code;

      if (code === "Enter" || code === "NumpadEnter") {
        var _props$onEnter;

        (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props, innerValue.value, {
          e: e
        });
      } else {
        var _props$onKeydown;

        (_props$onKeydown = props.onKeydown) === null || _props$onKeydown === void 0 ? void 0 : _props$onKeydown.call(props, innerValue.value, {
          e: e
        });
      }
    };

    var handleKeyUp = function handleKeyUp(e) {
      var _props$onKeyup;

      if (props.disabled) return;
      (_props$onKeyup = props.onKeyup) === null || _props$onKeyup === void 0 ? void 0 : _props$onKeyup.call(props, innerValue.value, {
        e: e
      });
    };

    var handleKeypress = function handleKeypress(e) {
      var _props$onKeypress;

      if (props.disabled) return;
      (_props$onKeypress = props.onKeypress) === null || _props$onKeypress === void 0 ? void 0 : _props$onKeypress.call(props, innerValue.value, {
        e: e
      });
    };

    var onHandlePaste = function onHandlePaste(e) {
      var _props$onPaste;

      if (props.disabled) return;
      var clipData = e.clipboardData || window.clipboardData;
      (_props$onPaste = props.onPaste) === null || _props$onPaste === void 0 ? void 0 : _props$onPaste.call(props, {
        e: e,
        pasteValue: clipData === null || clipData === void 0 ? void 0 : clipData.getData("text/plain")
      });
    };

    var mouseEvent = function mouseEvent(v) {
      return isHover.value = v;
    };

    var onHandleMousewheel = function onHandleMousewheel(e) {
      var _props$onWheel;

      return (_props$onWheel = props.onWheel) === null || _props$onWheel === void 0 ? void 0 : _props$onWheel.call(props, {
        e: e
      });
    };

    var onInputMouseenter = function onInputMouseenter(e) {
      var _props$onMouseenter;

      mouseEvent(true);
      (_props$onMouseenter = props.onMouseenter) === null || _props$onMouseenter === void 0 ? void 0 : _props$onMouseenter.call(props, {
        e: e
      });
    };

    var onInputMouseleave = function onInputMouseleave(e) {
      var _props$onMouseleave;

      mouseEvent(false);
      (_props$onMouseleave = props.onMouseleave) === null || _props$onMouseleave === void 0 ? void 0 : _props$onMouseleave.call(props, {
        e: e
      });
    };

    return {
      handleKeydown: handleKeydown,
      handleKeyUp: handleKeyUp,
      handleKeypress: handleKeypress,
      onHandlePaste: onHandlePaste,
      onHandleMousewheel: onHandleMousewheel,
      onInputMouseenter: onInputMouseenter,
      onInputMouseleave: onInputMouseleave
    };
  }

  function useInputWidth(props, inputPreRef, inputRef, innerValue) {
    var composing = vue.ref(false);

    var updateInputWidth = function updateInputWidth() {
      if (!inputPreRef.value) return;
      var width = inputPreRef.value.offsetWidth;
      inputRef.value.style.width = "".concat(width, "px");
    };

    var addListeners = function addListeners() {
      vue.watch(function () {
        return innerValue.value + props.placeholder;
      }, function () {
        if (!props.autoWidth) return;
        vue.nextTick(function () {
          updateInputWidth();
        });
      }, {
        immediate: true
      });
    };

    vue.onMounted(function () {
      composing.value = false;

      if (props.autoWidth) {
        addListeners();
      }
    });
  }

  var _excluded$4 = ["isHover", "inputRef", "inputPreRef", "renderType", "showClear", "focused", "inputValue", "innerValue"];

  function getValidAttrs$2(obj) {
    var newObj = {};
    Object.keys(obj).forEach(function (key) {
      if (typeof obj[key] !== "undefined") {
        newObj[key] = obj[key];
      }
    });
    return newObj;
  }

  var _Input = vue.defineComponent({
    name: "TInput",
    props: props$N,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots,
          expose = _ref.expose;

      var _useConfig = useConfig("input"),
          global = _useConfig.global;

      var disabled = useFormDisabled();
      var COMPONENT_NAME = usePrefixClass("input");
      var INPUT_WRAP_CLASS = usePrefixClass("input__wrap");
      var INPUT_TIPS_CLASS = usePrefixClass("input__tips");

      var _useCommonClassName = useCommonClassName$2(),
          STATUS = _useCommonClassName.STATUS,
          SIZE = _useCommonClassName.SIZE;

      var classPrefix = usePrefixClass();
      var renderTNodeJSX = useTNodeJSX();

      var _useInput = useInput(props2, expose),
          isHover = _useInput.isHover,
          inputRef = _useInput.inputRef,
          inputPreRef = _useInput.inputPreRef,
          renderType = _useInput.renderType,
          showClear = _useInput.showClear,
          focused = _useInput.focused,
          inputValue = _useInput.inputValue,
          innerValue = _useInput.innerValue,
          inputHandle = _objectWithoutProperties$1(_useInput, _excluded$4);

      useInputWidth(props2, inputPreRef, inputRef, innerValue);
      var inputEventHandler = useInputEventHandler(props2, isHover, innerValue);
      var tPlaceholder = vue.computed(function () {
        var _props2$placeholder;

        return (_props2$placeholder = props2.placeholder) !== null && _props2$placeholder !== void 0 ? _props2$placeholder : global.value.placeholder;
      });
      var inputAttrs = vue.computed(function () {
        return getValidAttrs$2({
          autofocus: props2.autofocus,
          disabled: disabled.value,
          readonly: props2.readonly,
          placeholder: tPlaceholder.value,
          maxlength: props2.maxlength,
          name: props2.name || void 0,
          type: renderType.value,
          autocomplete: renderType.value === "password" ? "on" : void 0
        });
      });

      var renderIcon = function renderIcon(icon, iconType) {
        if (typeof icon === "function") {
          return icon(vue.h);
        }

        if (slots[kebabCase_1(iconType)]) {
          return slots[kebabCase_1(iconType)](null);
        }

        if (slots[camelCase_1(iconType)]) {
          return slots[camelCase_1(iconType)](null);
        }

        return null;
      };

      return function () {
        var _ref2, _inputValue$value;

        var prefixIcon = renderIcon(props2.prefixIcon, "prefix-icon");
        var suffixIcon = renderIcon(props2.suffixIcon, "suffix-icon");
        var label = renderTNodeJSX("label", {
          silent: true
        });
        var suffix = renderTNodeJSX("suffix");
        var labelContent = label ? vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__prefix")
        }, [label]) : null;
        var suffixContent = suffix ? vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__suffix")
        }, [suffix]) : null;

        if (showClear.value) {
          suffixIcon = vue.createVNode(closeCircleFilled, {
            "ref": inputHandle.clearIconRef,
            "class": "".concat(COMPONENT_NAME.value, "__suffix-clear"),
            "onClick": inputHandle.emitClear,
            "onMousedown": inputHandle.onClearIconMousedown
          }, null);
        }

        var classes = [COMPONENT_NAME.value, props2.inputClass, (_ref2 = {}, _defineProperty$3(_ref2, SIZE.value[props2.size], props2.size !== "medium"), _defineProperty$3(_ref2, STATUS.value.disabled, disabled.value), _defineProperty$3(_ref2, STATUS.value.focused, focused.value), _defineProperty$3(_ref2, "".concat(classPrefix.value, "-is-").concat(props2.status), props2.status), _defineProperty$3(_ref2, "".concat(classPrefix.value, "-align-").concat(props2.align), props2.align !== "left"), _defineProperty$3(_ref2, "".concat(classPrefix.value, "-is-readonly"), props2.readonly), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "--prefix"), prefixIcon || labelContent), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "--suffix"), suffixIcon || suffixContent), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "--focused"), focused.value), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "--auto-width"), props2.autoWidth), _ref2)];

        if (props2.type === "password") {
          if (renderType.value === "password") {
            suffixIcon = vue.createVNode(browseOff, {
              "class": "".concat(COMPONENT_NAME.value, "__suffix-clear"),
              "onClick": inputHandle.emitPassword
            }, null);
          } else if (renderType.value === "text") {
            suffixIcon = vue.createVNode(browse, {
              "class": "".concat(COMPONENT_NAME.value, "__suffix-clear"),
              "onClick": inputHandle.emitPassword
            }, null);
          }
        }

        var inputEvents = getValidAttrs$2({
          onFocus: function onFocus(e) {
            return inputHandle.emitFocus(e);
          },
          onBlur: inputHandle.formatAndEmitBlur,
          onKeydown: inputEventHandler.handleKeydown,
          onKeyup: inputEventHandler.handleKeyUp,
          onKeypress: inputEventHandler.handleKeypress,
          onPaste: inputEventHandler.onHandlePaste,
          onCompositionend: inputHandle.onHandleCompositionend,
          onCompositionstart: inputHandle.onHandleCompositionstart
        });
        var tips = renderTNodeJSX("tips");
        return vue.createVNode("div", {
          "class": INPUT_WRAP_CLASS.value
        }, [vue.createVNode("div", {
          "class": classes,
          "onClick": inputHandle.onRootClick,
          "onMouseenter": inputEventHandler.onInputMouseenter,
          "onMouseleave": inputEventHandler.onInputMouseleave,
          "onWheel": inputEventHandler.onHandleMousewheel
        }, [prefixIcon ? vue.createVNode("span", {
          "class": ["".concat(COMPONENT_NAME.value, "__prefix"), "".concat(COMPONENT_NAME.value, "__prefix-icon")]
        }, [prefixIcon]) : null, labelContent, vue.createVNode("input", vue.mergeProps({
          "class": "".concat(COMPONENT_NAME.value, "__inner")
        }, inputAttrs.value, inputEvents, {
          "ref": inputRef,
          "value": (_inputValue$value = inputValue.value) !== null && _inputValue$value !== void 0 ? _inputValue$value : "",
          "onInput": function onInput(e) {
            return inputHandle.handleInput(e);
          }
        }), null), props2.autoWidth && vue.createVNode("span", {
          "ref": inputPreRef,
          "className": "".concat(classPrefix.value, "-input__input-pre")
        }, [innerValue.value || tPlaceholder.value]), suffixContent, suffixIcon ? vue.createVNode("span", {
          "class": ["".concat(COMPONENT_NAME.value, "__suffix"), "".concat(COMPONENT_NAME.value, "__suffix-icon"), _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "__clear"), showClear.value)]
        }, [suffixIcon]) : null]), tips && vue.createVNode("div", {
          "class": "".concat(INPUT_TIPS_CLASS.value, " ").concat(classPrefix.value, "-input__tips--").concat(props2.status || "normal")
        }, [tips])]);
      };
    }
  });

  var _InputGroup = vue.defineComponent({
    name: "TInputGroup",
    props: {
      separate: {
        type: Boolean,
        "default": false
      }
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("input-group");
      var renderTNodeJSX = useTNodeJSX();
      var CLASS = vue.computed(function () {
        return [COMPONENT_NAME.value, _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--separate"), props.separate)];
      });
      return function () {
        return vue.createVNode("div", {
          "class": CLASS.value
        }, [renderTNodeJSX("default")]);
      };
    }
  });

  var Addon = withInstall(_Addon);
  var Input = withInstall(_Input);
  var InputGroup = withInstall(_InputGroup);

  var props$M = {
    align: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "center", "right"].includes(val);
      }
    },
    autoWidth: Boolean,
    decimalPlaces: {
      type: Number,
      "default": void 0
    },
    disabled: Boolean,
    format: {
      type: Function
    },
    inputProps: {
      type: Object
    },
    max: {
      type: Number,
      "default": Infinity
    },
    min: {
      type: Number,
      "default": -Infinity
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    readonly: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["success", "warning", "error"].includes(val);
      }
    },
    step: {
      type: Number,
      "default": 1
    },
    theme: {
      type: String,
      "default": "row",
      validator: function validator(val) {
        if (!val) return true;
        return ["column", "row", "normal"].includes(val);
      }
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: Number,
      "default": void 0
    },
    modelValue: {
      type: Number,
      "default": void 0
    },
    defaultValue: {
      type: Number,
      "default": void 0
    },
    onBlur: Function,
    onChange: Function,
    onEnter: Function,
    onFocus: Function,
    onKeydown: Function,
    onKeypress: Function,
    onKeyup: Function
  };

  function useInputNumberTools(props, digitsNum, isError) {
    var toDecimalPlaces = function toDecimalPlaces(value) {
      var decimalPlaces = props.decimalPlaces === void 0 ? digitsNum.value : props.decimalPlaces;
      var factor = Math.pow(10, decimalPlaces);
      return Math.round(value * factor) / factor;
    };

    var multiNegative = function multiNegative(s) {
      var m = s.match(/[-]/g);
      return m === null ? false : m.length > 2;
    };

    var multiDot = function multiDot(s) {
      var m = s.match(/[.]/g);
      return m === null ? false : m.length > 1;
    };

    var multiE = function multiE(s) {
      var m = s.match(/[e]/gi);
      return m === null ? false : m.length > 1;
    };

    var empty = function empty(v) {
      return !v && !v.replace(" ", "");
    };

    var handleInputError = function handleInputError(visible) {
      return isError.value = visible;
    };

    var isValidNumber = function isValidNumber(v) {
      if (v > props.max) {
        handleInputError(true);
        return false;
      }

      if (v < props.min) {
        handleInputError(true);
        return false;
      }

      if (!isNumber_1(v)) {
        handleInputError(true);
        return false;
      }

      handleInputError(false);
      return true;
    };

    var isValid = function isValid(v) {
      var numV = Number(v);

      if (empty(v)) {
        return false;
      }

      if (Number.isNaN(numV)) {
        handleInputError(true);
        return false;
      }

      return isValidNumber(numV);
    };

    var toValidStringNumber = function toValidStringNumber(s) {
      var filterVal = s.replace(/[^\d.eE。-]/g, "").replace("\u3002", ".");

      if (multiE(filterVal) || multiDot(filterVal) || multiNegative(filterVal)) {
        filterVal = filterVal.substring(0, filterVal.length - 1);
      }

      return filterVal;
    };

    var toValidNumber = function toValidNumber(s) {
      var val = Number(s);
      if (Number.isNaN(val) || Number.isNaN(parseFloat(s))) return props.value;
      if (val > props.max) return props.max;
      if (val < props.min) return props.min;
      return parseFloat(s);
    };

    return {
      toDecimalPlaces: toDecimalPlaces,
      multiNegative: multiNegative,
      multiDot: multiDot,
      multiE: multiE,
      empty: empty,
      isValidNumber: isValidNumber,
      isValid: isValid,
      toValidStringNumber: toValidStringNumber,
      toValidNumber: toValidNumber,
      isError: isError
    };
  }

  function useInputNumberAction(COMPONENT_NAME, props, isError, filterValue) {
    var _useCommonClassName = useCommonClassName$2(),
        STATUS = _useCommonClassName.STATUS;

    var userInput = vue.ref(null);

    var _toRefs = vue.toRefs(props),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue;

    var _useVModel = useVModel(value, modelValue, props.defaultValue, props.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];

    var disabledReduce = vue.computed(function () {
      return props.disabled || isError.value || Number(innerValue.value) - props.step < props.min;
    });
    var disabledAdd = vue.computed(function () {
      return props.disabled || isError.value || Number(innerValue.value) + props.step > props.max;
    });
    var reduceClasses = vue.computed(function () {
      return ["".concat(COMPONENT_NAME.value, "__decrease"), _defineProperty$3({}, STATUS.value.disabled, disabledReduce.value)];
    });
    var addClasses = vue.computed(function () {
      return ["".concat(COMPONENT_NAME.value, "__increase"), _defineProperty$3({}, STATUS.value.disabled, disabledAdd.value)];
    });
    var stepDecimalPlaces = vue.computed(function () {
      var tempVal = String(props.step);
      var tempIndex = tempVal.indexOf(".") + 1;
      return tempIndex > 0 ? tempVal.length - tempIndex : 0;
    });
    var valueDecimalPlaces = vue.computed(function () {
      var tempVal = filterValue.value !== null && !Number.isNaN(Number(filterValue.value)) && !Number.isNaN(parseFloat(filterValue.value)) ? filterValue.value : String(innerValue.value);
      var tempIndex = tempVal.indexOf(".") + 1;
      return tempIndex > 0 ? tempVal.length - tempIndex : 0;
    });
    var digitsNum = vue.computed(function () {
      if (props.decimalPlaces !== void 0) {
        if (props.decimalPlaces < stepDecimalPlaces.value) {
          console.warn("decimal places of step should be less than decimal-places");
        }

        return props.decimalPlaces;
      }

      return valueDecimalPlaces.value > stepDecimalPlaces.value ? valueDecimalPlaces.value : stepDecimalPlaces.value;
    });

    var clearInput = function clearInput() {
      return userInput.value = "";
    };

    var handleChange = function handleChange(value2, ctx) {
      if (value2 !== void 0) {
        var v = Number(value2.toFixed(digitsNum.value));
        setInnerValue(v, {
          type: ctx.type,
          e: ctx.e
        });
      } else {
        setInnerValue(void 0, {
          type: ctx.type,
          e: ctx.e
        });
      }
    };

    var handleAction = function handleAction(value2, actionType, e) {
      if (actionType !== "input") {
        clearInput();
      }

      handleChange(value2, {
        type: actionType,
        e: e
      });
    };

    var toDecimalPlaces = function toDecimalPlaces(value2) {
      var decimalPlaces = props.decimalPlaces === void 0 ? digitsNum.value : props.decimalPlaces;
      var factor = Math.pow(10, decimalPlaces);
      return Math.round(value2 * factor) / factor;
    };

    var clearFilterValue = function clearFilterValue() {
      return filterValue.value = "";
    };

    var handleAdd = function handleAdd(e) {
      if (disabledAdd.value || props.readonly) return;
      var value2 = innerValue.value || 0;
      var factor = Math.pow(10, digitsNum.value);
      handleAction(Number(toDecimalPlaces((value2 * factor + props.step * factor) / factor).toFixed(digitsNum.value)), "add", e);
    };

    var handleReduce = function handleReduce(e) {
      if (disabledReduce.value || props.readonly) return;
      var value2 = innerValue.value || 0;
      var factor = Math.pow(10, digitsNum.value);
      handleAction(Number(toDecimalPlaces((value2 * factor - props.step * factor) / factor).toFixed(digitsNum.value)), "reduce", e);
    };

    var inputNumberTools = useInputNumberTools(props, digitsNum, isError);

    var handleInput = function handleInput(val, e) {
      userInput.value = val;
      filterValue.value = inputNumberTools.toValidStringNumber(userInput.value);
      userInput.value = "";

      if (!inputNumberTools.isValid(filterValue.value)) {
        handleAction(void 0, "input", e);
        return;
      }

      if (Number(filterValue.value) === innerValue.value) return;
      handleAction(Number(filterValue.value), "input", e);
    };

    return {
      reduceClasses: reduceClasses,
      addClasses: addClasses,
      clearFilterValue: clearFilterValue,
      handleAdd: handleAdd,
      handleReduce: handleReduce,
      digitsNum: digitsNum,
      filterValue: filterValue,
      innerValue: innerValue,
      handleAction: handleAction,
      userInput: userInput,
      handleInput: handleInput
    };
  }

  function useKeyboardEvents(props, innerValue) {
    var handleKeydownEnter = function handleKeydownEnter(e) {
      var _props$onEnter;

      if (e.key !== "Enter") return;
      (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props, innerValue.value, {
        e: e
      });
    };

    var handleKeydown = function handleKeydown(e) {
      var _props$onKeydown;

      (_props$onKeydown = props.onKeydown) === null || _props$onKeydown === void 0 ? void 0 : _props$onKeydown.call(props, innerValue.value, {
        e: e
      });
      handleKeydownEnter(e);
    };

    var handleKeyup = function handleKeyup(e) {
      var _props$onKeyup;

      (_props$onKeyup = props.onKeyup) === null || _props$onKeyup === void 0 ? void 0 : _props$onKeyup.call(props, innerValue.value, {
        e: e
      });
    };

    var handleKeypress = function handleKeypress(e) {
      var _props$onKeypress;

      (_props$onKeypress = props.onKeypress) === null || _props$onKeypress === void 0 ? void 0 : _props$onKeypress.call(props, innerValue.value, {
        e: e
      });
    };

    return {
      handleKeydownEnter: handleKeydownEnter,
      handleKeydown: handleKeydown,
      handleKeyup: handleKeyup,
      handleKeypress: handleKeypress
    };
  }

  function useComponentComputed(COMPONENT_NAME, props) {
    var disabled = useFormDisabled();

    var _useCommonClassName = useCommonClassName$2(),
        SIZE = _useCommonClassName.SIZE,
        STATUS = _useCommonClassName.STATUS;

    var classPrefix = usePrefixClass();
    var isError = vue.ref(false);
    var inputting = vue.ref(false);
    var filterValue = vue.ref(null);

    var _useInputNumberAction = useInputNumberAction(COMPONENT_NAME, props, isError, filterValue),
        digitsNum = _useInputNumberAction.digitsNum,
        innerValue = _useInputNumberAction.innerValue,
        handleAction = _useInputNumberAction.handleAction,
        clearFilterValue = _useInputNumberAction.clearFilterValue,
        handleReduce = _useInputNumberAction.handleReduce,
        handleAdd = _useInputNumberAction.handleAdd,
        userInput = _useInputNumberAction.userInput,
        addClasses = _useInputNumberAction.addClasses,
        reduceClasses = _useInputNumberAction.reduceClasses,
        handleInput = _useInputNumberAction.handleInput;

    var inputNumberTools = useInputNumberTools(props, digitsNum, isError);
    var keyboardEvents = useKeyboardEvents(props, innerValue);

    var handleStartInput = function handleStartInput() {
      inputting.value = true;
      if (innerValue.value === void 0) return;
      filterValue.value = Number(innerValue.value).toFixed(digitsNum.value);
    };

    var handleEndInput = function handleEndInput(e) {
      inputting.value = false;
      var value = inputNumberTools.toValidNumber(filterValue.value);

      if (value !== innerValue.value) {
        handleAction(value, "input", e);
      }

      isError.value = false;
    };

    var handleBlur = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(e) {
        var _props$onBlur;

        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return handleEndInput(e);

              case 2:
                clearFilterValue();
                (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, innerValue.value, {
                  e: e
                });

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function handleBlur(_x) {
        return _ref.apply(this, arguments);
      };
    }();

    var handleFocus = function handleFocus(e) {
      var _props$onFocus;

      handleStartInput();
      (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, innerValue.value, {
        e: e
      });
    };

    var reduceEvents = vue.computed(function () {
      return {
        onClick: handleReduce
      };
    });
    var addEvents = vue.computed(function () {
      return {
        onClick: handleAdd
      };
    });
    var componentWrapClasses = vue.computed(function () {
      var _ref2;

      return [COMPONENT_NAME.value, SIZE.value[props.size], (_ref2 = {}, _defineProperty$3(_ref2, STATUS.value.disabled, disabled.value), _defineProperty$3(_ref2, "".concat(classPrefix.value, "-is-controls-right"), props.theme === "column"), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "--").concat(props.theme), props.theme), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "--auto-width"), props.autoWidth), _ref2)];
    });
    var inputEvents = vue.computed(function () {
      return {
        onBlur: handleBlur,
        onFocus: handleFocus,
        onKeydown: keyboardEvents.handleKeydown,
        onKeyup: keyboardEvents.handleKeyup,
        onKeypress: keyboardEvents.handleKeypress
      };
    });
    var inputAttrs = vue.computed(function () {
      return {
        disabled: disabled.value,
        readonly: props.readonly,
        autocomplete: "off",
        ref: "refInputElem",
        placeholder: props.placeholder,
        unselectable: props.readonly ? "on" : "off",
        tips: props.tips,
        autoWidth: props.autoWidth,
        align: props.align || (props.theme === "row" ? "center" : void 0),
        status: isError.value ? "error" : props.status
      };
    });
    var displayValue = vue.computed(function () {
      if (inputting.value && userInput.value !== null) {
        return filterValue.value;
      }

      if ([void 0, null].includes(innerValue.value)) return "";
      return props.format && !inputting.value ? props.format(innerValue.value) : Number(innerValue.value).toFixed(digitsNum.value);
    });
    vue.watch(innerValue, function (v) {
      if (v !== void 0) {
        inputNumberTools.isValidNumber(v);
      }
    }, {
      immediate: true
    });
    return {
      reduceEvents: reduceEvents,
      addEvents: addEvents,
      componentWrapClasses: componentWrapClasses,
      inputEvents: inputEvents,
      inputAttrs: inputAttrs,
      displayValue: displayValue,
      addClasses: addClasses,
      reduceClasses: reduceClasses,
      handleInput: handleInput
    };
  }

  var _InputNumber = vue.defineComponent({
    name: "TInputNumber",
    components: {
      AddIcon: add,
      RemoveIcon: remove,
      ChevronDownIcon: chevronDown,
      ChevronUpIcon: chevronUp,
      TButton: Button,
      TInput: Input
    },
    props: props$M,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("input-number");

      var _useComponentComputed = useComponentComputed(COMPONENT_NAME, props2),
          reduceEvents = _useComponentComputed.reduceEvents,
          addEvents = _useComponentComputed.addEvents,
          componentWrapClasses = _useComponentComputed.componentWrapClasses,
          inputEvents = _useComponentComputed.inputEvents,
          inputAttrs = _useComponentComputed.inputAttrs,
          displayValue = _useComponentComputed.displayValue,
          addClasses = _useComponentComputed.addClasses,
          reduceClasses = _useComponentComputed.reduceClasses,
          handleInput = _useComponentComputed.handleInput;

      var decreaseIcon = vue.computed(function () {
        return props2.theme === "column" ? vue.createVNode(vue.resolveComponent("chevron-down-icon"), {
          "size": props2.size
        }, null) : vue.createVNode(vue.resolveComponent("remove-icon"), {
          "size": props2.size
        }, null);
      });
      var increaseIcon = vue.computed(function () {
        return props2.theme === "column" ? vue.createVNode(vue.resolveComponent("chevron-up-icon"), {
          "size": props2.size
        }, null) : vue.createVNode(vue.resolveComponent("add-icon"), {
          "size": props2.size
        }, null);
      });
      return function () {
        return vue.createVNode("div", {
          "class": componentWrapClasses.value
        }, [props2.theme !== "normal" && vue.createVNode(vue.resolveComponent("t-button"), vue.mergeProps({
          "class": reduceClasses.value
        }, reduceEvents.value, {
          "variant": "outline",
          "shape": "square"
        }), {
          icon: function icon() {
            return decreaseIcon.value;
          }
        }), vue.createVNode(vue.resolveComponent("t-input"), vue.mergeProps(inputAttrs.value, inputEvents.value, props2.inputProps, {
          "value": displayValue.value,
          "onChange": function onChange(val, _ref) {
            var e = _ref.e;
            return handleInput(val, e);
          }
        }), null), props2.theme !== "normal" && vue.createVNode(vue.resolveComponent("t-button"), vue.mergeProps({
          "class": addClasses.value
        }, addEvents.value, {
          "variant": "outline",
          "shape": "square"
        }), {
          icon: function icon() {
            return increaseIcon.value;
          }
        })]);
      };
    }
  });

  var InputNumber = withInstall(_InputNumber);

  var _excluded$3 = ["name", "alias"];

  function ownKeys$1v(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1u(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1v(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1v(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function toCamel(str) {
    return str.replace(/-([a-z])/gi, function (m, letter) {
      return letter.toUpperCase();
    });
  }

  function getPropOptionMap(props) {
    var propOptionMap = {};

    function parseProp(propOption) {
      var propName = propOption.name,
          alias = propOption.alias,
          others = _objectWithoutProperties$1(propOption, _excluded$3);

      var camelName = propName.replace(/^[a-z]/, function (letter) {
        return letter.toUpperCase();
      });
      var defaultName = "default".concat(camelName);
      var dataName = "data".concat(camelName);
      var events = [];

      if (propOption.event) {
        events = events.concat(propOption.event);
      }

      events.push("update:".concat(propName));

      if (alias) {
        events = events.concat(alias.map(function (item) {
          return "update:".concat(item);
        }));
      }

      return _objectSpread$1u({
        events: events,
        defaultName: defaultName,
        dataName: dataName,
        alias: alias
      }, others);
    }

    props.forEach(function (prop) {
      var defaultOption = {
        alias: []
      };
      var propOption;

      if (typeof prop === "string") {
        propOption = _objectSpread$1u(_objectSpread$1u({}, defaultOption), {}, {
          name: prop
        });
      } else {
        propOption = _objectSpread$1u(_objectSpread$1u({}, defaultOption), prop);
      }

      propOptionMap[propOption.name] = parseProp(propOption);
    });
    return propOptionMap;
  }

  function mapProps (props) {
    function mapProps(componentConstructor) {
      var component = componentConstructor;
      var propOptionMap = getPropOptionMap(props);

      var defineProps = _objectSpread$1u({}, component.props);

      var defineWatches = {};
      var defineEvents = [];
      var defineMethods = {};
      var camelPropsKeys = Object.keys(component.props).map(function (key) {
        return toCamel(key);
      });
      Object.keys(propOptionMap).forEach(function (propName) {
        var _propOptionMap$propNa = propOptionMap[propName],
            events = _propOptionMap$propNa.events,
            alias = _propOptionMap$propNa.alias,
            defaultName = _propOptionMap$propNa.defaultName,
            dataName = _propOptionMap$propNa.dataName;
        defineProps[propName] = component.props[propName];
        defineProps[defaultName] = component.props[defaultName];

        if (alias) {
          alias.forEach(function (prop) {
            defineProps[prop] = defineProps[propName];
          });
        }

        defineEvents = defineEvents.concat(events);
        var defaultList = [];
        defineWatches[defaultName] = {
          handler: function handler(v) {
            if (defaultList.indexOf(defaultName + this.$.uid) > -1) return;
            var props2 = this.$.vnode.props;
            var hasDefault = props2 && (defaultName in props2 || kebabCase_1(defaultName) in props2);

            if (hasDefault && !(propName in props2)) {
              this.$data[dataName] = v;
            }

            defaultList.push(defaultName + this.$.uid);
          },
          immediate: true
        };
        alias.forEach(function (aliasItem) {
          defineWatches[aliasItem] = {
            handler: function handler(v) {
              var props2 = this.$.vnode.props;

              if (props2 && aliasItem in props2 && !(propName in props2)) {
                this.$data[dataName] = v;
              }
            },
            immediate: true
          };
        });
        defineWatches[propName] = {
          handler: function handler(v) {
            var props2 = this.$.vnode.props;

            if (props2 && (propName in props2 || kebabCase_1(propName) in props2)) {
              this.$data[dataName] = v;
            }
          },
          immediate: true
        };
      });

      if (component.methods) {
        Object.keys(component.methods).forEach(function (key) {
          defineMethods[key] = function () {
            if (this.$refs.component) {
              var _this$$refs$component;

              return (_this$$refs$component = this.$refs.component)[key].apply(_this$$refs$component, arguments);
            }
          };
        });
      }

      var name = component.name;
      return vue.defineComponent({
        name: "".concat(name, "-mapprops"),
        inheritAttrs: false,
        props: _objectSpread$1u({}, defineProps),
        data: function data() {
          var data = {};
          Object.keys(propOptionMap).forEach(function (propName) {
            var dataName = propOptionMap[propName].dataName;
            data[dataName] = void 0;
          });
          return _objectSpread$1u({}, data);
        },
        computed: {
          _listeners: function _listeners() {
            var _this = this;

            var others = {};
            Object.keys(this.$attrs).forEach(function (attr) {
              var event = attr.startsWith("on") ? attr[2].toLowerCase() + attr.slice(3) : null;

              if (event && defineEvents.indexOf(event) === -1) {
                others[attr] = function () {
                  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                  }

                  _this.$emit.apply(_this, [event].concat(args));
                };
              }
            });
            return others;
          }
        },
        watch: defineWatches,
        methods: _objectSpread$1u({
          updateData: function updateData(propName, v) {
            var _this2 = this;

            for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
              args[_key2 - 2] = arguments[_key2];
            }

            propOptionMap[propName].events.forEach(function (event) {
              var eventName = "on".concat(event.charAt(0).toUpperCase()).concat(event.substr(1));

              if (typeof _this2[eventName] === "function") {
                _this2[eventName].apply(_this2, [v].concat(args));

                return true;
              }

              _this2.$emit.apply(_this2, [event, v].concat(args));
            });
            var props2 = this.$.vnode.props;

            if (!props2 || !(propName in props2)) {
              this[propOptionMap[propName].dataName] = v;
              return true;
            }
          }
        }, defineMethods),
        render: function render() {
          var _this3 = this;

          var propMap = {};
          var handlerMap = {};
          Object.keys(propOptionMap).forEach(function (propName) {
            var _propOptionMap$propNa2 = propOptionMap[propName],
                dataName = _propOptionMap$propNa2.dataName,
                events = _propOptionMap$propNa2.events;
            var eventName = "on".concat(events[0].charAt(0).toUpperCase()).concat(events[0].substr(1));
            var props2 = _this3.$.vnode.props;

            if (props2 && propName in props2 || typeof _this3[dataName] !== "undefined") {
              propMap[propName] = _this3[dataName];
            }

            handlerMap[eventName] = function (v) {
              for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
                args[_key3 - 1] = arguments[_key3];
              }

              return _this3.updateData.apply(_this3, [propName, v].concat(args));
            };
          });
          var attrs = {};
          Object.keys(this.$attrs).forEach(function (attrName) {
            var camelAttrKey = toCamel(attrName);

            if (camelPropsKeys.indexOf(camelAttrKey) === -1) {
              attrs[attrName] = _this3.$attrs[attrName];
            }
          });
          return vue.h(componentConstructor, _objectSpread$1u(_objectSpread$1u(_objectSpread$1u(_objectSpread$1u(_objectSpread$1u(_objectSpread$1u({}, this.$props), propMap), attrs), this._listeners), handlerMap), {}, {
            ref: "component"
          }), this.$slots);
        }
      });
    }

    return mapProps;
  }

  var isArray$5 = isArray_1,
      isSymbol$1 = isSymbol_1;
  /** Used to match property names within property paths. */

  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;
  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */

  function isKey$3(value, object) {
    if (isArray$5(value)) {
      return false;
    }

    var type = _typeof$2(value);

    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol$1(value)) {
      return true;
    }

    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }

  var _isKey = isKey$3;

  var MapCache$1 = _MapCache;
  /** Error message constants. */

  var FUNC_ERROR_TEXT$1 = 'Expected a function';
  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `clear`, `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */

  function memoize$1(func, resolver) {
    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$1);
    }

    var memoized = function memoized() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }

      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };

    memoized.cache = new (memoize$1.Cache || MapCache$1)();
    return memoized;
  } // Expose `MapCache`.


  memoize$1.Cache = MapCache$1;
  var memoize_1 = memoize$1;

  var memoize = memoize_1;
  /** Used as the maximum memoize cache size. */

  var MAX_MEMOIZE_SIZE = 500;
  /**
   * A specialized version of `_.memoize` which clears the memoized function's
   * cache when it exceeds `MAX_MEMOIZE_SIZE`.
   *
   * @private
   * @param {Function} func The function to have its output memoized.
   * @returns {Function} Returns the new memoized function.
   */

  function memoizeCapped$1(func) {
    var result = memoize(func, function (key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }

      return key;
    });
    var cache = result.cache;
    return result;
  }

  var _memoizeCapped = memoizeCapped$1;

  var memoizeCapped = _memoizeCapped;
  /** Used to match property names within property paths. */

  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  /** Used to match backslashes in property paths. */

  var reEscapeChar = /\\(\\)?/g;
  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */

  var stringToPath$1 = memoizeCapped(function (string) {
    var result = [];

    if (string.charCodeAt(0) === 46
    /* . */
    ) {
      result.push('');
    }

    string.replace(rePropName, function (match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  });
  var _stringToPath = stringToPath$1;

  var isArray$4 = isArray_1,
      isKey$2 = _isKey,
      stringToPath = _stringToPath,
      toString$3 = toString_1;
  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {Object} [object] The object to query keys on.
   * @returns {Array} Returns the cast property path array.
   */

  function castPath$6(value, object) {
    if (isArray$4(value)) {
      return value;
    }

    return isKey$2(value, object) ? [value] : stringToPath(toString$3(value));
  }

  var _castPath = castPath$6;

  var isSymbol = isSymbol_1;
  /** Used as references for various `Number` constants. */

  var INFINITY$1 = 1 / 0;
  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */

  function toKey$6(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY$1 ? '-0' : result;
  }

  var _toKey = toKey$6;

  var castPath$5 = _castPath,
      toKey$5 = _toKey;
  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */

  function baseGet$4(object, path) {
    path = castPath$5(path, object);
    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey$5(path[index++])];
    }

    return index && index == length ? object : undefined;
  }

  var _baseGet = baseGet$4;

  var baseGet$3 = _baseGet;
  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is returned in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */

  function get$1(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet$3(object, path);
    return result === undefined ? defaultValue : result;
  }

  var get_1 = get$1;

  var assignValue = _assignValue,
      castPath$4 = _castPath,
      isIndex$1 = _isIndex,
      isObject$2 = isObject_1,
      toKey$4 = _toKey;
  /**
   * The base implementation of `_.set`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @param {Function} [customizer] The function to customize path creation.
   * @returns {Object} Returns `object`.
   */

  function baseSet$2(object, path, value, customizer) {
    if (!isObject$2(object)) {
      return object;
    }

    path = castPath$4(path, object);
    var index = -1,
        length = path.length,
        lastIndex = length - 1,
        nested = object;

    while (nested != null && ++index < length) {
      var key = toKey$4(path[index]),
          newValue = value;

      if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
        return object;
      }

      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : undefined;

        if (newValue === undefined) {
          newValue = isObject$2(objValue) ? objValue : isIndex$1(path[index + 1]) ? [] : {};
        }
      }

      assignValue(nested, key, newValue);
      nested = nested[key];
    }

    return object;
  }

  var _baseSet = baseSet$2;

  var baseSet$1 = _baseSet;
  /**
   * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
   * it's created. Arrays are created for missing index properties while objects
   * are created for all other missing properties. Use `_.setWith` to customize
   * `path` creation.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.set(object, 'a[0].b.c', 4);
   * console.log(object.a[0].b.c);
   * // => 4
   *
   * _.set(object, ['x', '0', 'y', 'z'], 5);
   * console.log(object.x[0].y.z);
   * // => 5
   */

  function set(object, path, value) {
    return object == null ? object : baseSet$1(object, path, value);
  }

  var set_1 = set;

  var props$L = {
    closable: Boolean,
    content: {
      type: [String, Number, Function]
    },
    "default": {
      type: [String, Number, Function]
    },
    disabled: Boolean,
    icon: {
      type: Function,
      "default": void 0
    },
    maxWidth: {
      type: [String, Number]
    },
    shape: {
      type: String,
      "default": "square",
      validator: function validator(val) {
        return ["square", "round", "mark"].includes(val);
      }
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        return ["default", "primary", "warning", "danger", "success"].includes(val);
      }
    },
    variant: {
      type: String,
      "default": "dark",
      validator: function validator(val) {
        return ["dark", "light", "outline", "light-outline"].includes(val);
      }
    },
    onClick: Function,
    onClose: Function
  };

  var _Tag = vue.defineComponent({
    name: "TTag",
    props: props$L,
    setup: function setup(props2) {
      var _useConfig = useConfig("tag"),
          tagGlobalConfig = _useConfig.global;

      var COMPONENT_NAME = usePrefixClass("tag");
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();

      var _useCommonClassName = useCommonClassName$2(),
          SIZE = _useCommonClassName.SIZE;

      var tagClass = vue.computed(function () {
        var _ref;

        return ["".concat(COMPONENT_NAME.value), "".concat(COMPONENT_NAME.value, "--").concat(props2.theme), "".concat(COMPONENT_NAME.value, "--").concat(props2.variant), (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--ellipsis"), props2.maxWidth), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--close"), props2.closable), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--disabled"), props2.disabled), _ref), SIZE.value[props2.size], props2.shape !== "square" && "".concat(COMPONENT_NAME.value, "--").concat(props2.shape)];
      });
      var tagStyle = vue.computed(function () {
        return props2.maxWidth ? {
          maxWidth: "".concat(props2.maxWidth, "px")
        } : {};
      });

      var handleClick = function handleClick(e) {
        var _props2$onClick;

        (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
          e: e
        });
      };

      var getCloseIcon = function getCloseIcon() {
        if (!props2.closable) return null;
        var iconClassName = "".concat(COMPONENT_NAME.value, "__icon-close");

        if (tagGlobalConfig.value.closeIcon) {
          return vue.h(tagGlobalConfig.value.closeIcon(vue.h), {
            "class": iconClassName
          });
        }

        return vue.createVNode(close, {
          "onClick": function onClick(_ref2) {
            var _props2$onClose;

            var e = _ref2.e;
            return (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 ? void 0 : _props2$onClose.call(props2, {
              e: e
            });
          },
          "class": iconClassName
        }, null);
      };

      return function () {
        var closeIcon = getCloseIcon();
        var tagContent = renderContent("default", "content");
        var icon = renderTNodeJSX("icon");
        return vue.createVNode("span", {
          "class": tagClass.value,
          "style": tagStyle.value,
          "onClick": handleClick
        }, [icon, props2.maxWidth ? vue.createVNode("span", {
          "style": tagStyle.value,
          "class": "".concat(COMPONENT_NAME.value, "--text")
        }, [tagContent]) : tagContent, closeIcon]);
      };
    }
  });

  var props$K = {
    checked: {
      type: Boolean,
      "default": void 0
    },
    modelValue: {
      type: Boolean,
      "default": void 0
    },
    defaultChecked: Boolean,
    content: {
      type: [String, Number, Function]
    },
    "default": {
      type: [String, Number, Function]
    },
    disabled: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    onChange: Function,
    onClick: Function
  };

  var _CheckTag = vue.defineComponent({
    name: "TCheckTag",
    props: props$K,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("tag");

      var _useCommonClassName = useCommonClassName$2(),
          SIZE = _useCommonClassName.SIZE;

      var renderContent = useContent();

      var _toRefs = vue.toRefs(props2),
          checked = _toRefs.checked,
          modelValue = _toRefs.modelValue;

      var _useVModel = useVModel(checked, modelValue, props2.defaultChecked, props2.onChange, "checked"),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          innerChecked = _useVModel2[0],
          setInnerChecked = _useVModel2[1];

      var tagClass = vue.computed(function () {
        var _ref;

        return ["".concat(COMPONENT_NAME.value), "".concat(COMPONENT_NAME.value, "--check"), "".concat(COMPONENT_NAME.value, "--default"), SIZE.value[props2.size], (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--checked"), !props2.disabled && innerChecked.value), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--disabled"), props2.disabled), _ref)];
      });

      var handleClick = function handleClick(e) {
        if (!props2.disabled) {
          var _props2$onClick;

          (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
            e: e
          });
          setInnerChecked(!innerChecked.value);
        }
      };

      return function () {
        var tagContent = renderContent("default", "content");
        return vue.createVNode("span", {
          "class": tagClass.value,
          "onClick": handleClick
        }, [tagContent]);
      };
    }
  });

  var Tag = withInstall(_Tag);
  var CheckTag = withInstall(_CheckTag);

  var props$J = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    label: {
      type: String,
      "default": ""
    },
    value: {
      type: [String, Number]
    }
  };

  var props$I = {
    checkAll: Boolean,
    checked: {
      type: Boolean,
      "default": void 0
    },
    modelValue: {
      type: Boolean,
      "default": void 0
    },
    defaultChecked: Boolean,
    "default": {
      type: [String, Function]
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    indeterminate: Boolean,
    label: {
      type: [String, Function]
    },
    name: {
      type: String,
      "default": ""
    },
    readonly: Boolean,
    value: {
      type: [String, Number]
    },
    onChange: Function
  };

  var CheckboxGroupInjectionKey = Symbol("CheckboxGroupProvide");

  function ownKeys$1u(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1t(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1u(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1u(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Checkbox = vue.defineComponent({
    name: "TCheckbox",
    props: _objectSpread$1t(_objectSpread$1t({}, props$I), {}, {
      needRipple: Boolean
    }),
    setup: function setup(props2) {
      var labelRef = vue.ref();

      if (props2.needRipple) {
        useRipple(labelRef);
      }

      var _toRefs = vue.toRefs(props2),
          checked = _toRefs.checked,
          modelValue = _toRefs.modelValue;

      var _useVModel = useVModel(checked, modelValue, props2.defaultChecked, props2.onChange, "checked"),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          innerChecked = _useVModel2[0],
          setInnerChecked = _useVModel2[1];

      var checkboxGroup = vue.inject(CheckboxGroupInjectionKey, void 0);
      var GroupDisabled = vue.computed(function () {
        return props2.disabled || !!(checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.disabled);
      });
      var formDisabled = useFormDisabled(GroupDisabled);
      var name = vue.computed(function () {
        return props2.name || (checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.name);
      });
      var selfChecked = vue.computed(function () {
        if (props2.checkAll) return checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.isCheckAll;
        return checkboxGroup ? !!checkboxGroup.checkedMap[props2.value] : innerChecked.value;
      });
      var disabled = vue.computed(function () {
        if (formDisabled) return formDisabled.value;

        if (!props2.checkAll && !selfChecked.value && checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.maxExceeded) {
          return true;
        }

        if (props2.disabled !== void 0) return props2.disabled;
        return !!(checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.disabled);
      });
      var selfIndeterminate = vue.computed(function () {
        if (props2.checkAll) return checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.indeterminate;
        return props2.indeterminate;
      });
      var classPrefix = usePrefixClass();
      var COMPONENT_NAME = usePrefixClass("checkbox");
      var labelClasses = vue.computed(function () {
        var _ref;

        return ["".concat(COMPONENT_NAME.value), (_ref = {}, _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-checked"), selfChecked.value), _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-disabled"), disabled.value), _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-indeterminate"), selfIndeterminate.value), _ref)];
      });

      var handleChange = function handleChange(e) {
        var checked2 = !selfChecked.value;
        setInnerChecked(checked2, {
          e: e
        });

        if (checkboxGroup && checkboxGroup.handleCheckboxChange) {
          checkboxGroup.onCheckedChange({
            checked: checked2,
            checkAll: props2.checkAll,
            e: e,
            option: props2
          });
        }
      };

      var renderContent = useContent();
      return function () {
        return vue.createVNode("label", {
          "class": labelClasses.value,
          "ref": "labelRef"
        }, [vue.createVNode("input", {
          "type": "checkbox",
          "class": "".concat(COMPONENT_NAME.value, "__former"),
          "disabled": disabled.value,
          "readonly": props2.readonly,
          "indeterminate": props2.indeterminate,
          "name": name.value,
          "value": props2.value,
          "checked": selfChecked.value,
          "onChange": handleChange
        }, null), vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__input")
        }, null), vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__label")
        }, [renderContent("default", "label")])]);
      };
    }
  });

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */

  function setCacheAdd$1(value) {
    this.__data__.set(value, HASH_UNDEFINED);

    return this;
  }

  var _setCacheAdd = setCacheAdd$1;

  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */

  function setCacheHas$1(value) {
    return this.__data__.has(value);
  }

  var _setCacheHas = setCacheHas$1;

  var MapCache = _MapCache,
      setCacheAdd = _setCacheAdd,
      setCacheHas = _setCacheHas;
  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */

  function SetCache$3(values) {
    var index = -1,
        length = values == null ? 0 : values.length;
    this.__data__ = new MapCache();

    while (++index < length) {
      this.add(values[index]);
    }
  } // Add methods to `SetCache`.


  SetCache$3.prototype.add = SetCache$3.prototype.push = setCacheAdd;
  SetCache$3.prototype.has = setCacheHas;
  var _SetCache = SetCache$3;

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

  function baseFindIndex$2(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }

    return -1;
  }

  var _baseFindIndex = baseFindIndex$2;

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */

  function baseIsNaN$1(value) {
    return value !== value;
  }

  var _baseIsNaN = baseIsNaN$1;

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

  function strictIndexOf$1(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }

    return -1;
  }

  var _strictIndexOf = strictIndexOf$1;

  var baseFindIndex$1 = _baseFindIndex,
      baseIsNaN = _baseIsNaN,
      strictIndexOf = _strictIndexOf;
  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

  function baseIndexOf$1(array, value, fromIndex) {
    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex$1(array, baseIsNaN, fromIndex);
  }

  var _baseIndexOf = baseIndexOf$1;

  var baseIndexOf = _baseIndexOf;
  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */

  function arrayIncludes$2(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  var _arrayIncludes = arrayIncludes$2;

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */

  function arrayIncludesWith$2(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }

    return false;
  }

  var _arrayIncludesWith = arrayIncludesWith$2;

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function cacheHas$3(cache, key) {
    return cache.has(key);
  }

  var _cacheHas = cacheHas$3;

  var SetCache$2 = _SetCache,
      arrayIncludes$1 = _arrayIncludes,
      arrayIncludesWith$1 = _arrayIncludesWith,
      arrayMap$4 = _arrayMap,
      baseUnary$1 = _baseUnary,
      cacheHas$2 = _cacheHas;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeMin = Math.min;
  /**
   * The base implementation of methods like `_.intersection`, without support
   * for iteratee shorthands, that accepts an array of arrays to inspect.
   *
   * @private
   * @param {Array} arrays The arrays to inspect.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of shared values.
   */

  function baseIntersection$1(arrays, iteratee, comparator) {
    var includes = comparator ? arrayIncludesWith$1 : arrayIncludes$1,
        length = arrays[0].length,
        othLength = arrays.length,
        othIndex = othLength,
        caches = Array(othLength),
        maxLength = Infinity,
        result = [];

    while (othIndex--) {
      var array = arrays[othIndex];

      if (othIndex && iteratee) {
        array = arrayMap$4(array, baseUnary$1(iteratee));
      }

      maxLength = nativeMin(array.length, maxLength);
      caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache$2(othIndex && array) : undefined;
    }

    array = arrays[0];
    var index = -1,
        seen = caches[0];

    outer: while (++index < length && result.length < maxLength) {
      var value = array[index],
          computed = iteratee ? iteratee(value) : value;
      value = comparator || value !== 0 ? value : 0;

      if (!(seen ? cacheHas$2(seen, computed) : includes(result, computed, comparator))) {
        othIndex = othLength;

        while (--othIndex) {
          var cache = caches[othIndex];

          if (!(cache ? cacheHas$2(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
            continue outer;
          }
        }

        if (seen) {
          seen.push(computed);
        }

        result.push(value);
      }
    }

    return result;
  }

  var _baseIntersection = baseIntersection$1;

  var isArrayLikeObject$2 = isArrayLikeObject_1;
  /**
   * Casts `value` to an empty array if it's not an array like object.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {Array|Object} Returns the cast array-like object.
   */

  function castArrayLikeObject$1(value) {
    return isArrayLikeObject$2(value) ? value : [];
  }

  var _castArrayLikeObject = castArrayLikeObject$1;

  var arrayMap$3 = _arrayMap,
      baseIntersection = _baseIntersection,
      baseRest$3 = _baseRest,
      castArrayLikeObject = _castArrayLikeObject;
  /**
   * Creates an array of unique values that are included in all given arrays
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons. The order and references of result values are
   * determined by the first array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @returns {Array} Returns the new array of intersecting values.
   * @example
   *
   * _.intersection([2, 1], [2, 3]);
   * // => [2]
   */

  var intersection = baseRest$3(function (arrays) {
    var mapped = arrayMap$3(arrays, castArrayLikeObject);
    return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
  });
  var intersection_1 = intersection;

  var props$H = {
    disabled: Boolean,
    max: {
      type: Number,
      "default": void 0
    },
    name: {
      type: String,
      "default": ""
    },
    options: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    onChange: Function
  };

  function ownKeys$1t(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1s(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1t(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1t(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot$n(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var _Group$1 = vue.defineComponent({
    name: "TCheckboxGroup",
    props: props$H,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("checkbox-group");
      var renderTNodeJSX = useTNodeJSX();
      var isArray = Array.isArray;

      var _toRefs = vue.toRefs(props2),
          value = _toRefs.value,
          modelValue = _toRefs.modelValue;

      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          innerValue = _useVModel2[0],
          setInnerValue = _useVModel2[1];

      var checkedMap = vue.computed(function () {
        var map = {};

        if (isArray(innerValue.value)) {
          innerValue.value.forEach(function (item) {
            map[item] = true;
          });
        }

        return map;
      });
      var optionList = vue.ref([]);
      var intersectionLen = vue.computed(function () {
        var values = optionList.value.map(function (item) {
          return item.value;
        });

        if (isArray(innerValue.value)) {
          var n = intersection_1(innerValue.value, values);
          return n.length;
        }

        return 0;
      });
      var isCheckAll = vue.computed(function () {
        if (isArray(innerValue.value) && innerValue.value.length !== optionList.value.length - 1) {
          return false;
        }

        return intersectionLen.value === optionList.value.length - 1;
      });
      var indeterminate = vue.computed(function () {
        return !isCheckAll.value && intersectionLen.value < optionList.value.length && intersectionLen.value !== 0;
      });
      var maxExceeded = vue.computed(function () {
        return props2.max !== void 0 && innerValue.value.length === props2.max;
      });
      vue.watchEffect(function () {
        if (!props2.options) return [];
        optionList.value = props2.options.map(function (item) {
          var r = {};

          if (_typeof$2(item) !== "object") {
            r = {
              label: String(item),
              value: item
            };
          } else {
            r = _objectSpread$1s({}, item);
            r.disabled = r.disabled === void 0 ? props2.disabled : r.disabled;
          }

          return r;
        });
      });

      var getAllCheckboxValue = function getAllCheckboxValue() {
        var val = /* @__PURE__ */new Set();

        for (var i = 0, len = optionList.value.length; i < len; i++) {
          var item = optionList.value[i];
          if (item.checkAll) continue;
          val.add(item.value);
          if (maxExceeded.value) break;
        }

        return _toConsumableArray(val);
      };

      var onCheckAllChange = function onCheckAllChange(checked, context) {
        var value2 = checked ? getAllCheckboxValue() : [];
        setInnerValue(value2, {
          e: context.e,
          type: checked ? "check" : "uncheck",
          current: void 0,
          option: void 0
        });
      };

      var handleCheckboxChange = function handleCheckboxChange(data) {
        var currentValue = data.option.value;

        if (isArray(innerValue.value)) {
          var val = _toConsumableArray(innerValue.value);

          if (data.checked) {
            val.push(currentValue);
          } else {
            var i = val.indexOf(currentValue);
            val.splice(i, 1);
          }

          setInnerValue(val, {
            e: data.e,
            current: data.option.value,
            option: data.option,
            type: data.checked ? "check" : "uncheck"
          });
        } else {
          console.warn("TDesign CheckboxGroup Warn: `value` must be an array, instead of ".concat(_typeof$2(innerValue.value)));
        }
      };

      var onCheckedChange = function onCheckedChange(p) {
        var checked = p.checked,
            checkAll = p.checkAll,
            e = p.e;

        if (checkAll) {
          onCheckAllChange(checked, {
            e: e
          });
        } else {
          handleCheckboxChange(p);
        }
      };

      var getOptionListBySlots = function getOptionListBySlots(nodes) {
        var arr = [];
        nodes === null || nodes === void 0 ? void 0 : nodes.forEach(function (node) {
          var option = node.props;

          if ((option === null || option === void 0 ? void 0 : option["check-all"]) === "" || (option === null || option === void 0 ? void 0 : option["check-all"]) === true) {
            option.checkAll = true;
          }

          option && arr.push(option);
        });
        return arr;
      };

      var renderLabel = function renderLabel(option) {
        if (typeof option.label === "function") {
          return option.label(vue.h);
        }

        return option.label;
      };

      var _toRefs2 = vue.toRefs(props2),
          name = _toRefs2.name,
          disabled = _toRefs2.disabled;

      vue.provide(CheckboxGroupInjectionKey, vue.reactive({
        name: name,
        isCheckAll: isCheckAll,
        checkedMap: checkedMap,
        maxExceeded: maxExceeded,
        disabled: disabled,
        indeterminate: indeterminate,
        handleCheckboxChange: handleCheckboxChange,
        onCheckedChange: onCheckedChange
      }));
      return function () {
        var _props2$options;

        var children = null;

        if ((_props2$options = props2.options) !== null && _props2$options !== void 0 && _props2$options.length) {
          var _optionList$value;

          children = (_optionList$value = optionList.value) === null || _optionList$value === void 0 ? void 0 : _optionList$value.map(function (option, index) {
            var _slot;

            return vue.createVNode(_Checkbox, vue.mergeProps({
              "key": "".concat(option.value).concat(index)
            }, option, {
              "checked": checkedMap.value[option.value]
            }), _isSlot$n(_slot = renderLabel(option)) ? _slot : {
              "default": function _default() {
                return [_slot];
              }
            });
          });
        } else {
          var nodes = renderTNodeJSX("default");
          optionList.value = getOptionListBySlots(nodes);
          children = nodes;
        }

        return vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [children]);
      };
    }
  });

  var Checkbox = withInstall(_Checkbox);
  var CheckboxGroup = withInstall(_Group$1);

  function ownKeys$1s(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1r(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1s(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1s(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot$m(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var _Option = vue.defineComponent({
    name: "TOption",
    components: {
      TCheckbox: Checkbox
    },
    inject: {
      tSelect: {
        "default": void 0
      }
    },
    props: _objectSpread$1r({}, props$J),
    setup: function setup() {
      var disabled = useFormDisabled();
      var selectName = usePrefixClass("select");

      var _useCommonClassName = useCommonClassName$2(),
          STATUS = _useCommonClassName.STATUS,
          SIZE = _useCommonClassName.SIZE;

      var liRef = vue.ref();
      useRipple(liRef);
      return {
        STATUS: STATUS,
        SIZE: SIZE,
        selectName: selectName,
        disabled: disabled,
        liRef: liRef
      };
    },
    data: function data() {
      return {
        isHover: false
      };
    },
    computed: {
      hovering: function hovering() {
        return this.tSelect && this.tSelect.visible && this.tSelect.hoverOptions[this.tSelect.hoverIndex] && this.tSelect.hoverOptions[this.tSelect.hoverIndex][this.tSelect.realValue] === this.value;
      },
      multiLimitDisabled: function multiLimitDisabled() {
        if (this.tSelect && this.tSelect.multiple && this.tSelect.max) {
          if (this.tSelect.value instanceof Array && this.tSelect.value.indexOf(this.value) === -1 && this.tSelect.max <= this.tSelect.value.length) {
            return true;
          }
        }

        return false;
      },
      classes: function classes() {
        var _ref;

        return ["".concat(this.selectName, "-option"), (_ref = {}, _defineProperty$3(_ref, this.STATUS.disabled, this.disabled || this.multiLimitDisabled), _defineProperty$3(_ref, this.STATUS.selected, this.selected), _defineProperty$3(_ref, this.SIZE[this.tSelect && this.tSelect.size], this.tSelect && this.tSelect.size), _defineProperty$3(_ref, "".concat(this.selectName, "-option__hover"), this.hovering), _ref)];
      },
      isCreatedOption: function isCreatedOption() {
        return this.tSelect.creatable && this.value === this.tSelect.searchInput;
      },
      labelText: function labelText() {
        return this.label || String(this.value);
      },
      selected: function selected() {
        var _this = this;

        var flag = false;
        if (!this.tSelect) return false;

        if (this.tSelect.value instanceof Array) {
          if (this.tSelect.labelInValue) {
            flag = this.tSelect.value.map(function (item) {
              return get_1(item, _this.tSelect.realValue);
            }).indexOf(this.value) !== -1;
          } else {
            flag = this.tSelect.value.indexOf(this.value) !== -1;
          }
        } else if (_typeof$2(this.tSelect.value) === "object") {
          flag = get_1(this.tSelect.value, this.tSelect.realValue) === this.value;
        } else {
          flag = this.tSelect.value === this.value;
        }

        return flag;
      }
    },
    watch: {
      value: function value() {
        this.tSelect && this.tSelect.getOptions(this);
      },
      label: function label() {
        this.tSelect && this.tSelect.getOptions(this);
      },
      hovering: function hovering() {
        var _this2 = this;

        if (this.hovering) {
          var timer = setTimeout(function () {
            scrollSelectedIntoView(_this2.tSelect.getOverlayElm(), _this2.$el);
            clearTimeout(timer);
          }, this.tSelect.popupOpenTime);
        }
      }
    },
    mounted: function mounted() {
      this.tSelect && this.tSelect.getOptions(this);
    },
    methods: {
      select: function select(e) {
        e.stopPropagation();

        if (this.disabled || this.multiLimitDisabled) {
          return false;
        }

        var parent = this.$el.parentNode;

        if (parent && parent.className.indexOf("".concat(this.selectName, "__create-option")) !== -1) {
          this.tSelect && this.tSelect.createOption(this.value.toString());
        }

        this.tSelect && this.tSelect.onOptionClick(this.value, e);
      },
      mouseEvent: function mouseEvent(v) {
        this.isHover = v;
      }
    },
    render: function render() {
      var _this3 = this;

      var classes = this.classes,
          labelText = this.labelText,
          selected = this.selected,
          disabled = this.disabled,
          multiLimitDisabled = this.multiLimitDisabled;
      var children = renderContent(this, "default", "content");
      var optionChild = children || labelText;
      return vue.createVNode("li", {
        "ref": "liRef",
        "class": classes,
        "title": labelText,
        "onMouseenter": function onMouseenter() {
          return _this3.mouseEvent(true);
        },
        "onMouseleave": function onMouseleave() {
          return _this3.mouseEvent(false);
        },
        "onClick": function onClick(e) {
          e.preventDefault();

          _this3.select(e);
        }
      }, [this.tSelect && this.tSelect.multiple ? vue.createVNode(vue.resolveComponent("t-checkbox"), {
        "checked": selected,
        "disabled": disabled || multiLimitDisabled
      }, _isSlot$m(optionChild) ? optionChild : {
        "default": function _default() {
          return [optionChild];
        }
      }) : vue.createVNode("span", null, [optionChild])]);
    }
  });

  var props$G = {
    divider: {
      type: Boolean,
      "default": true
    },
    label: {
      type: String,
      "default": ""
    }
  };

  function ownKeys$1r(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1r(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1r(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _OptionGroup = vue.defineComponent({
    name: "TOptionGroup",
    inject: {
      tSelect: {
        "default": void 0
      }
    },
    props: _objectSpread$1q({}, props$G),
    setup: function setup() {
      var COMPONENT_NAME = usePrefixClass("select-option-group");

      var _useCommonClassName = useCommonClassName$2(),
          SIZE = _useCommonClassName.SIZE;

      return {
        SIZE: SIZE,
        COMPONENT_NAME: COMPONENT_NAME
      };
    },
    data: function data() {
      return {
        visible: true
      };
    },
    computed: {
      classes: function classes() {
        var _ref;

        return [this.COMPONENT_NAME, (_ref = {}, _defineProperty$3(_ref, this.SIZE[this.tSelect.size], this.tSelect && this.tSelect.size), _defineProperty$3(_ref, "".concat(this.COMPONENT_NAME, "__divider"), this.divider), _ref)];
      }
    },
    methods: {
      childrenChange: function childrenChange() {
        this.visible = this.$children && Array.isArray(this.$children) && this.$children.some(function (option) {
          return option.show === true;
        });
      }
    },
    render: function render() {
      var children = renderTNodeJSX(this, "default");
      return vue.createVNode("li", {
        "class": this.classes
      }, [vue.createVNode("div", {
        "class": "".concat(this.COMPONENT_NAME, "__header")
      }, [this.label]), vue.createVNode("ul", null, [children])]);
    }
  });

  var props$F = {
    autoWidth: Boolean,
    bordered: {
      type: Boolean,
      "default": true
    },
    borderless: Boolean,
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    creatable: Boolean,
    disabled: Boolean,
    empty: {
      type: [String, Function],
      "default": ""
    },
    filter: {
      type: Function
    },
    filterable: Boolean,
    inputProps: {
      type: Object
    },
    inputValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultInputValue: {
      type: [String, Number]
    },
    keys: {
      type: Object
    },
    loading: Boolean,
    loadingText: {
      type: [String, Function],
      "default": ""
    },
    max: {
      type: Number,
      "default": 0
    },
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    multiple: Boolean,
    options: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    panelBottomContent: {
      type: [String, Function]
    },
    panelTopContent: {
      type: [String, Function]
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    popupVisible: {
      type: Boolean,
      "default": void 0
    },
    prefixIcon: {
      type: Function
    },
    readonly: Boolean,
    reserveKeyword: Boolean,
    selectInputProps: {
      type: Object
    },
    showCheckAlll: Boolean,
    showArrow: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    tagInputProps: {
      type: Object
    },
    tagProps: {
      type: Object
    },
    value: {
      type: [String, Number, Object, Array],
      "default": void 0
    },
    modelValue: {
      type: [String, Number, Object, Array],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number, Object, Array]
    },
    valueDisplay: {
      type: [String, Function]
    },
    valueType: {
      type: String,
      "default": "value",
      validator: function validator(val) {
        if (!val) return true;
        return ["value", "object"].includes(val);
      }
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onCreate: Function,
    onEnter: Function,
    onFocus: Function,
    onInputChange: Function,
    onPopupVisibleChange: Function,
    onRemove: Function,
    onSearch: Function,
    onVisibleChange: Function
  };

  function ownKeys$1q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1p(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1q(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot$l(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var DEFAULT_MAX_OVERLAY_WIDTH = 500;
  var DEFAULT_SCROLLY_WIDTH = 8;
  var _Select = vue.defineComponent({
    name: "TSelect",
    components: {
      CloseCircleFilledIcon: closeCircleFilled,
      TInput: Input,
      Tag: Tag,
      Popup: Popup,
      TOption: _Option,
      TOptionGroup: _OptionGroup
    },
    provide: function provide() {
      return {
        tSelect: this
      };
    },
    inject: {
      formItem: {
        "default": void 0
      }
    },
    props: _objectSpread$1p({}, props$F),
    emits: ["change", "input", "clear", "keydown", "keyup", "keypress", "focus", "blur", "remove", "create", "search", "visible-change", "popup-visible-change"],
    setup: function setup() {
      var disabled = useFormDisabled();
      var COMPONENT_NAME = usePrefixClass("select");
      var classPrefix = usePrefixClass("");
      var listName = usePrefixClass("select__list");

      var _useCommonClassName = useCommonClassName$2(),
          STATUS = _useCommonClassName.STATUS,
          SIZE = _useCommonClassName.SIZE;

      var _useConfig = useConfig("select"),
          global = _useConfig.global,
          t = _useConfig.t;

      return {
        STATUS: STATUS,
        SIZE: SIZE,
        classPrefix: classPrefix,
        listName: listName,
        COMPONENT_NAME: COMPONENT_NAME,
        disabled: disabled,
        global: global,
        t: t
      };
    },
    data: function data() {
      return {
        isHover: false,
        visible: false,
        searchInput: "",
        showCreateOption: false,
        hasOptions: false,
        defaultProps: {
          trigger: "click",
          placement: "bottom-left",
          overlayClassName: "",
          overlayStyle: {}
        },
        focusing: false,
        labelInValue: this.valueType === "object",
        realValue: this.keys && this.keys.value ? this.keys.value : "value",
        realLabel: this.keys && this.keys.label ? this.keys.label : "label",
        realOptions: [],
        hoverIndex: -1,
        popupOpenTime: 250,
        checkScroll: true
      };
    },
    computed: {
      classes: function classes() {
        var _ref;

        return ["".concat(this.COMPONENT_NAME), "".concat(this.COMPONENT_NAME, "-polyfill"), (_ref = {}, _defineProperty$3(_ref, this.STATUS.disabled, this.disabled), _defineProperty$3(_ref, this.STATUS.active, this.visible), _defineProperty$3(_ref, this.SIZE[this.size], this.size), _defineProperty$3(_ref, "".concat(this.classPrefix, "-has-prefix"), this.$slots.prefixIcon), _defineProperty$3(_ref, "".concat(this.classPrefix, "-no-border"), !this.bordered), _ref)];
      },
      popClass: function popClass() {
        var popupObject = this.popupObject;
        return "".concat(popupObject.overlayClassName, " ").concat(this.COMPONENT_NAME, "__dropdown narrow-scrollbar");
      },
      tipsClass: function tipsClass() {
        return ["".concat(this.COMPONENT_NAME, "__loading-tips"), _defineProperty$3({}, this.SIZE[this.size], this.size)];
      },
      emptyClass: function emptyClass() {
        return ["".concat(this.COMPONENT_NAME, "__empty"), _defineProperty$3({}, this.SIZE[this.size], this.size)];
      },
      showPlaceholder: function showPlaceholder() {
        if (!this.showFilter && (!this.multiple && !this.selectedSingle || !this.multiple && _typeof$2(this.value) === "object" && !this.selectedSingle || Array.isArray(this.value) && !this.value.length || this.value === null || this.value === void 0 || this.value === "")) {
          return true;
        }

        return false;
      },
      isGroupOption: function isGroupOption() {
        var _this$options;

        var firstOption = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options[0];
        return !!(firstOption && "group" in firstOption && "children" in firstOption);
      },
      filterPlaceholder: function filterPlaceholder() {
        if (this.multiple && Array.isArray(this.value) && this.value.length) {
          return "";
        }

        if (!this.multiple && this.selectedSingle) {
          return this.selectedSingle;
        }

        return this.placeholder;
      },
      showClose: function showClose() {
        return Boolean(this.clearable && this.isHover && !this.disabled && (!this.multiple && (this.value || this.value === 0) || this.multiple && Array.isArray(this.value) && this.value.length));
      },
      innerShowArrow: function innerShowArrow() {
        return this.showArrow && (!this.clearable || !this.isHover || this.disabled || !this.multiple && !this.value && this.value !== 0 || this.multiple && (!Array.isArray(this.value) || Array.isArray(this.value) && !this.value.length));
      },
      canFilter: function canFilter() {
        return this.filterable || isFunction_1(this.filter);
      },
      showLoading: function showLoading() {
        return this.loading && !this.disabled;
      },
      showFilter: function showFilter() {
        if (this.disabled) return false;

        if (!this.multiple && this.selectedSingle && this.canFilter) {
          return this.visible;
        }

        return this.canFilter;
      },
      selectedSingle: function selectedSingle() {
        var _this = this;

        if (!this.multiple && (typeof this.value === "string" || typeof this.value === "number")) {
          var target = [];

          if (this.realOptions && this.realOptions.length) {
            target = this.realOptions.filter(function (item) {
              return get_1(item, _this.realValue) === _this.value;
            });
          }

          if (target.length) {
            if (get_1(target[target.length - 1], this.realLabel) === "") {
              return get_1(target[target.length - 1], this.realValue);
            }

            return get_1(target[target.length - 1], this.realLabel);
          }

          return this.value.toString();
        }

        var showText = get_1(this.value, this.realLabel);

        if (!this.multiple && _typeof$2(this.value) === "object" && showText !== void 0) {
          return showText === "" ? get_1(this.value, this.realValue) : showText;
        }

        return "";
      },
      selectedMultiple: function selectedMultiple() {
        var _this2 = this;

        if (this.multiple && Array.isArray(this.value) && this.value.length) {
          return this.value.map(function (item) {
            if (_typeof$2(item) === "object") {
              return item;
            }

            var tmp = _this2.realOptions.filter(function (op) {
              return get_1(op, _this2.realValue) === item;
            });

            var valueLabel = {};
            set_1(valueLabel, _this2.realValue, item);
            set_1(valueLabel, _this2.realLabel, tmp.length ? get_1(tmp[tmp.length - 1], _this2.realLabel) : item);
            return tmp.length && tmp[tmp.length - 1].disabled ? _objectSpread$1p(_objectSpread$1p({}, valueLabel), {}, {
              disabled: true
            }) : valueLabel;
          });
        }

        return [];
      },
      popupObject: function popupObject() {
        var propsObject = this.popupProps ? _objectSpread$1p(_objectSpread$1p({}, this.defaultProps), this.popupProps) : this.defaultProps;
        return propsObject;
      },
      filterOptions: function filterOptions() {
        var _this3 = this;

        if (isFunction_1(this.filter)) {
          return this.realOptions.filter(function (option) {
            return _this3.filter(_this3.searchInput, option);
          });
        }

        if (this.filterable) {
          return this.realOptions.filter(function (option) {
            return option[_this3.realLabel].toString().toLowerCase().indexOf(_this3.searchInput.toString().toLowerCase()) !== -1;
          });
        }

        return [];
      },
      displayOptions: function displayOptions() {
        if (isFunction_1(this.onSearch) || this.$attrs.search) {
          return this.realOptions;
        }

        if (this.canFilter && !this.creatable) {
          if (this.searchInput === "") {
            return this.realOptions;
          }

          return this.filterOptions;
        }

        return this.realOptions;
      },
      hoverOptions: function hoverOptions() {
        if (!this.showCreateOption) {
          if (isFunction_1(this.filter) || this.filterable) {
            return this.filterOptions;
          }

          return this.realOptions;
        }

        var willCreateOption = [{
          value: this.searchInput,
          label: this.searchInput
        }];

        if (isFunction_1(this.filter) || this.filterable) {
          return willCreateOption.concat(this.filterOptions);
        }

        return willCreateOption.concat(this.realOptions);
      }
    },
    watch: {
      showFilter: function showFilter(val) {
        var _this4 = this;

        if (val && this.selectedSingle) {
          vue.nextTick(function () {
            _this4.doFocus();
          });
        }
      },
      searchInput: function searchInput(val) {
        var _this5 = this;

        if (!val && !this.visible) return;

        if (isFunction_1(this.onSearch) || this.$attrs.search) {
          this.debounceOnRemote();
        }

        if (this.canFilter && val && this.creatable) {
          var tmp = this.realOptions.filter(function (item) {
            return get_1(item, _this5.realLabel).toString() === val;
          });
          this.showCreateOption = !tmp.length;
        } else {
          this.showCreateOption = false;
        }
      },
      options: {
        immediate: true,
        deep: true,
        handler: function handler(options) {
          if (Array.isArray(options)) {
            this.realOptions = this.getRealOptions(options);
          } else {
            console.error("TDesign Select: options must be an array.");
          }
        }
      },
      visible: function visible() {
        this.visible && document.addEventListener("keydown", this.keydownEvent);
        !this.visible && document.removeEventListener("keydown", this.keydownEvent);
      }
    },
    mounted: function mounted() {
      this.checkVal();
    },
    methods: {
      getRealOptions: function getRealOptions(options) {
        if (this.isGroupOption) {
          var arr = [];
          options.forEach(function (item) {
            if ("children" in item) {
              arr = arr.concat(item.children);
            }
          });
          return arr;
        }

        return _toConsumableArray(options);
      },
      checkVal: function checkVal() {
        var value = this.value,
            multiple = this.multiple;

        if (multiple && !Array.isArray(value) || !multiple && Array.isArray(value)) {
          emitEvent(this, "change", this.multiple ? [] : "");
          console.warn("TDesign Warn:", "select props value invalid, v-model automatic calibration");
        }
      },
      multiLimitDisabled: function multiLimitDisabled(value) {
        if (this.multiple && this.max) {
          if (this.value instanceof Array && this.value.indexOf(value) === -1 && this.max <= this.value.length) {
            return true;
          }
        }

        return false;
      },
      visibleChange: function visibleChange(val, context) {
        this.visible = val;

        if (!val) {
          this.searchInput = "";
          this.showCreateOption = false;
        }

        val && this.monitorWidth();
        val && this.canFilter && this.doFocus();
        emitEvent(this, "visible-change", val);
        emitEvent(this, "popup-visible-change", val, context);
      },
      onOptionClick: function onOptionClick(value, e) {
        var _this6 = this;

        if (this.value !== value) {
          if (this.multiple && this.value instanceof Array) {
            if (this.labelInValue) {
              var index = this.value.map(function (item) {
                return get_1(item, _this6.realValue);
              }).indexOf(value);

              if (index > -1) {
                this.removeTag(index, {
                  e: e
                });
              } else {
                this.value.push(this.realOptions.filter(function (item) {
                  return get_1(item, _this6.realValue) === value;
                })[0]);
                this.emitChange(this.value, "check");
              }
            } else {
              var _index = this.value.indexOf(value);

              if (_index > -1) {
                this.removeTag(_index, {
                  e: e
                });
              } else {
                this.value.push(value);
                this.emitChange(this.value, "check");
              }
            }
          } else {
            this.emitChange(value, "check");
          }
        }

        if (!this.multiple) {
          this.searchInput = "";
          this.hideMenu();
        } else {
          if (!this.reserveKeyword) {
            this.searchInput = "";
          }

          this.canFilter && this.doFocus();
        }
      },
      removeTag: function removeTag(index, context) {
        var _this7 = this;

        var _ref4 = context || {},
            e = _ref4.e;

        e && e.stopPropagation();

        if (this.disabled) {
          return;
        }

        var val = this.value[index];
        var removeOption = this.realOptions.filter(function (item) {
          return get_1(item, _this7.realValue) === val;
        });
        var tempValue = this.value instanceof Array ? [].concat(this.value) : [];
        tempValue.splice(index, 1);
        this.emitChange(tempValue, "tag-remove");
        emitEvent(this, "remove", {
          value: val,
          data: removeOption[0],
          e: e
        });
      },
      hideMenu: function hideMenu() {
        this.visible = false;
      },
      clearSelect: function clearSelect(e) {
        e.stopPropagation();

        if (this.multiple) {
          this.emitChange([], "clear");
        } else {
          this.emitChange("", "clear");
        }

        this.focusing = false;
        this.searchInput = "";
        this.visible = false;
        emitEvent(this, "clear", {
          e: e
        });
      },
      getOptions: function getOptions(option) {
        var _this8 = this;

        if (option.$el && option.$el.className && option.$el.className.indexOf("".concat(this.COMPONENT_NAME, "__create-option--special")) !== -1) return;
        var tmp = this.realOptions.filter(function (item) {
          return get_1(item, _this8.realValue) === option.value;
        });

        if (!tmp.length) {
          this.hasOptions = true;
          var valueLabel = {};
          set_1(valueLabel, this.realValue, option.value);
          set_1(valueLabel, this.realLabel, option.label);
          var valueLabelAble = option.disabled ? _objectSpread$1p(_objectSpread$1p({}, valueLabel), {}, {
            disabled: true
          }) : valueLabel;
          this.realOptions.push(valueLabelAble);
        }
      },
      destroyOptions: function destroyOptions(option) {
        var _this9 = this;

        this.realOptions.forEach(function (item, index) {
          if (item[_this9.realValue] === option.value && item[_this9.realLabel] === option.label) {
            _this9.realOptions.splice(index, 1);
          }
        });
      },
      emitChange: function emitChange(val, trigger) {
        var _this10 = this;

        var value;

        if (this.labelInValue) {
          if (Array.isArray(val)) {
            if (!val.length) {
              value = [];
            } else {
              value = val;
            }
          } else {
            var target = this.realOptions.filter(function (item) {
              return get_1(item, _this10.realValue) === val;
            });
            value = target.length ? target[0] : "";
          }
        } else {
          value = val;
        }

        emitEvent(this, "change", value, {
          trigger: trigger
        });
      },
      createOption: function createOption(value) {
        var _this11 = this;

        this.$nextTick(function () {
          _this11.searchInput = "";
          _this11.showCreateOption = false;
        });
        emitEvent(this, "create", value);
      },
      debounceOnRemote: debounce_1(function () {
        emitEvent(this, "search", this.searchInput);
      }, 300),
      focus: function focus(value, context) {
        this.focusing = true;
        emitEvent(this, "focus", {
          value: this.value,
          e: context === null || context === void 0 ? void 0 : context.e
        });
      },
      blur: function blur(value, context) {
        this.focusing = false;
        emitEvent(this, "blur", {
          value: this.value,
          e: context === null || context === void 0 ? void 0 : context.e
        });
      },
      enter: function enter(value, context) {
        emitEvent(this, "enter", {
          inputValue: this.searchInput,
          value: this.value,
          e: context === null || context === void 0 ? void 0 : context.e
        });
      },
      keydownEvent: function keydownEvent(e) {
        if (!this.hoverOptions.length) return;
        var preventKeys = ["ArrowDown", "ArrowUp", "Enter", "Escape", "Tab"];

        if (preventKeys.includes(e.code)) {
          e.preventDefault();
        }

        switch (e.code) {
          case "ArrowDown":
            if (this.hoverIndex === -1) {
              this.initHoverindex();
              return;
            }

            if (this.hoverIndex < this.hoverOptions.length - 1) {
              this.hoverIndex += 1;
              this.arrowDownOption();
            } else {
              this.hoverIndex = 0;
              this.arrowDownOption();
            }

            break;

          case "ArrowUp":
            if (this.hoverIndex === -1) {
              this.initHoverindex();
              return;
            }

            if (this.hoverIndex > 0) {
              this.hoverIndex -= 1;
              this.arrowUpOption();
            } else {
              this.hoverIndex = this.hoverOptions.length - 1;
              this.arrowUpOption();
            }

            break;

          case "Enter":
            if (this.showCreateOption) {
              this.createOption(this.searchInput);
            }

            this.hoverOptions[this.hoverIndex] && this.onOptionClick(this.hoverOptions[this.hoverIndex][this.realValue], e);
            break;

          case "Escape":
          case "Tab":
            this.visible = false;
            emitEvent(this, "visible-change", false);
            this.searchInput = "";

            if (this.focusing) {
              this.blur(this.searchInput, {
                e: e
              });
            }

            break;
        }
      },
      arrowDownOption: function arrowDownOption() {
        var count = 0;

        while (this.hoverIndex < this.hoverOptions.length) {
          if (!this.hoverOptions[this.hoverIndex] || !this.hoverOptions[this.hoverIndex].disabled) {
            break;
          }

          if (this.hoverIndex === this.hoverOptions.length - 1) {
            this.hoverIndex = 0;
          } else {
            this.hoverIndex += 1;
          }

          count += 1;
          if (count >= this.hoverOptions.length) break;
        }
      },
      arrowUpOption: function arrowUpOption() {
        var count = 0;

        while (this.hoverIndex > -1) {
          if (!this.hoverOptions[this.hoverIndex] || !this.hoverOptions[this.hoverIndex].disabled) {
            break;
          }

          if (this.hoverIndex === 0) {
            this.hoverIndex = this.hoverOptions.length - 1;
          } else {
            this.hoverIndex -= 1;
          }

          count += 1;
          if (count >= this.hoverOptions.length) break;
        }
      },
      hoverEvent: function hoverEvent(v) {
        this.isHover = v;
      },
      getOverlayElm: function getOverlayElm() {
        var r;

        try {
          r = this.$refs.popup.getOverlay();
        } catch (e) {
          console.warn("TDesign Warn:", e);
        }

        return r;
      },
      monitorWidth: function monitorWidth() {
        var _this12 = this;

        this.$nextTick(function () {
          var styles = _this12.popupProps && _this12.popupProps.overlayStyle || {};

          if (_this12.popupProps && isFunction_1(_this12.popupProps.overlayStyle)) {
            styles = _this12.popupProps.overlayStyle(_this12.$refs.select) || {};
          }

          if (_typeof$2(styles) === "object" && !styles.width) {
            var elWidth = _this12.$refs.select.getBoundingClientRect().width;

            var popupWidth = _this12.getOverlayElm().getBoundingClientRect().width;

            var width = elWidth > DEFAULT_MAX_OVERLAY_WIDTH ? elWidth : Math.min(DEFAULT_MAX_OVERLAY_WIDTH, Math.max(elWidth, popupWidth));
            _this12.defaultProps.overlayStyle = {
              width: "".concat(Math.ceil(width), "px")
            };

            if (_this12.checkScroll) {
              var timer = setTimeout(function () {
                var _this12$getOverlayElm = _this12.getOverlayElm(),
                    scrollHeight = _this12$getOverlayElm.scrollHeight,
                    clientHeight = _this12$getOverlayElm.clientHeight;

                if (scrollHeight > clientHeight) {
                  _this12.defaultProps.overlayStyle = {
                    width: "".concat(Math.ceil(width) + DEFAULT_SCROLLY_WIDTH, "px")
                  };
                }

                _this12.checkScroll = false;
                clearTimeout(timer);
              }, _this12.popupOpenTime);
            }
          }
        });
      },
      getEmpty: function getEmpty() {
        var useLocale = !this.empty && !this.$slots.empty;
        return useLocale ? this.t(this.global.empty) : renderTNodeJSX(this, "empty");
      },
      getLoadingText: function getLoadingText() {
        var useLocale = !this.loadingText && !this.$slots.loadingText;
        return useLocale ? this.t(this.global.loadingText) : renderTNodeJSX(this, "loadingText");
      },
      getPlaceholderText: function getPlaceholderText() {
        return this.placeholder || this.t(this.global.placeholder);
      },
      getCloseIcon: function getCloseIcon() {
        var _this13 = this;

        var closeIconClass = ["".concat(this.COMPONENT_NAME, "__right-icon"), "".concat(this.COMPONENT_NAME, "__right-icon-clear"), "".concat(this.COMPONENT_NAME, "__right-icon-polyfill")];

        if (isFunction_1(this.global.clearIcon)) {
          return vue.createVNode("span", {
            "class": closeIconClass,
            "onClick": this.clearSelect
          }, [this.global.clearIcon()]);
        }

        return vue.createVNode(vue.resolveComponent("close-circle-filled-icon"), {
          "class": closeIconClass,
          "size": this.size,
          "onClick": function onClick(_ref5) {
            var e = _ref5.e;
            return _this13.clearSelect(e);
          }
        }, null);
      },
      doFocus: function doFocus() {
        var input = this.$refs.input;
        input === null || input === void 0 ? void 0 : input.focus();
        this.focusing = true;
      },
      renderGroupOptions: function renderGroupOptions(options) {
        var _this14 = this;

        return vue.createVNode("ul", {
          "class": this.listName
        }, [options.map(function (groupList) {
          var _slot;

          var children = groupList.children.filter(function (item) {
            return _this14.displayOptions.find(function (child) {
              return child.value === item.value;
            });
          });
          return vue.createVNode(vue.resolveComponent("t-option-group"), {
            "label": groupList.group,
            "divider": groupList.divider
          }, _isSlot$l(_slot = _this14.renderOptions(children)) ? _slot : {
            "default": function _default() {
              return [_slot];
            }
          });
        })]);
      },
      renderOptions: function renderOptions(options) {
        var _this15 = this;

        return vue.createVNode("ul", {
          "class": this.listName
        }, [options.map(function (item, index) {
          return vue.createVNode(vue.resolveComponent("t-option"), {
            "value": get_1(item, _this15.realValue),
            "label": get_1(item, _this15.realLabel),
            "content": item.content,
            "disabled": item.disabled || _this15.multiLimitDisabled(get_1(item, _this15.realValue)),
            "key": index
          }, null);
        })]);
      },
      renderDataWithOptions: function renderDataWithOptions() {
        return this.isGroupOption ? this.renderGroupOptions(this.options) : this.renderOptions(this.displayOptions);
      },
      initHoverindex: function initHoverindex() {
        var _this16 = this;

        if (!this.multiple && (typeof this.value === "string" || typeof this.value === "number")) {
          var targetIndex = Object.keys(this.hoverOptions).filter(function (i) {
            return get_1(_this16.hoverOptions[i], _this16.realValue) === _this16.value;
          });
          this.hoverIndex = targetIndex.length ? parseInt(targetIndex[targetIndex.length - 1], 10) : -1;
        } else if (this.multiple && Array.isArray(this.value) && this.value.length) {
          this.value.some(function (item) {
            var targetIndex = Object.keys(_this16.hoverOptions).filter(function (i) {
              return _typeof$2(item) === "object" && get_1(_this16.hoverOptions[i], _this16.realValue) === get_1(item, _this16.realValue) || get_1(_this16.hoverOptions[i], _this16.realValue) === item;
            });
            _this16.hoverIndex = targetIndex.length ? parseInt(targetIndex[targetIndex.length - 1], 10) : -1;
            return _this16.hoverIndex !== -1;
          });
        }
      }
    },
    render: function render() {
      var _this17 = this;

      var classes = this.classes,
          popupObject = this.popupObject,
          disabled = this.disabled,
          popClass = this.popClass,
          size = this.size,
          showPlaceholder = this.showPlaceholder,
          selectedMultiple = this.selectedMultiple,
          multiple = this.multiple,
          showFilter = this.showFilter,
          selectedSingle = this.selectedSingle,
          filterPlaceholder = this.filterPlaceholder,
          tipsClass = this.tipsClass,
          loading = this.loading,
          loadingText = this.loadingText,
          emptyClass = this.emptyClass,
          hasOptions = this.hasOptions,
          realLabel = this.realLabel,
          showCreateOption = this.showCreateOption,
          displayOptions = this.displayOptions;
      var children = renderTNodeJSX(this, "default");
      var prefixIconSlot = renderTNodeJSX(this, "prefixIcon");
      var emptySlot = this.getEmpty();
      var loadingTextSlot = this.getLoadingText();
      var placeholderText = this.getPlaceholderText();
      var slots = {
        content: function content() {
          return vue.createVNode("div", {
            "className": "".concat(_this17.COMPONENT_NAME, "__dropdown-inner")
          }, [renderTNodeJSX(_this17, "panelTopContent"), vue.withDirectives(vue.createVNode("ul", {
            "class": ["".concat(_this17.COMPONENT_NAME, "__create-option"), _this17.listName]
          }, [vue.createVNode(vue.resolveComponent("t-option"), {
            "value": _this17.searchInput,
            "label": _this17.searchInput,
            "class": "".concat(_this17.COMPONENT_NAME, "__create-option--special")
          }, null)]), [[vue.vShow, showCreateOption]]), loading && vue.createVNode("div", {
            "class": tipsClass
          }, [loadingTextSlot || loadingText]), !loading && !displayOptions.length && !showCreateOption && vue.createVNode("div", {
            "class": emptyClass
          }, [emptySlot]), !hasOptions && displayOptions.length && !loading ? _this17.renderDataWithOptions() : vue.createVNode("ul", {
            "class": ["".concat(_this17.COMPONENT_NAME, "__groups"), _this17.listName]
          }, [children]), renderTNodeJSX(_this17, "panelBottomContent")]);
        }
      };
      return vue.createVNode("div", {
        "ref": "select",
        "class": "".concat(this.COMPONENT_NAME, "__wrap")
      }, [vue.createVNode(Popup, vue.mergeProps({
        "ref": "popup"
      }, popupObject, {
        "class": "".concat(this.COMPONENT_NAME, "__popup-reference"),
        "visible": this.visible,
        "placement": popupObject.placement,
        "trigger": popupObject.trigger,
        "disabled": disabled,
        "overlayClassName": popClass,
        "overlayStyle": popupObject.overlayStyle,
        "onVisibleChange": this.visibleChange,
        "expandAnimation": true
      }), _objectSpread$1p({
        "default": function _default() {
          return [vue.createVNode("div", {
            "class": classes,
            "onMouseenter": _this17.hoverEvent.bind(null, true),
            "onMouseleave": _this17.hoverEvent.bind(null, false)
          }, [prefixIconSlot && vue.createVNode("span", {
            "class": "".concat(_this17.COMPONENT_NAME, "__left-icon")
          }, [prefixIconSlot[0]]), showPlaceholder && vue.createVNode("span", {
            "class": "".concat(_this17.COMPONENT_NAME, "__placeholder")
          }, [" ", placeholderText]), multiple && (_this17.valueDisplay || _this17.$slots.valueDisplay ? renderTNodeJSX(_this17, "valueDisplay", {
            params: {
              value: selectedMultiple,
              onClose: function onClose(index) {
                return _this17.removeTag(index);
              }
            }
          }) : selectedMultiple.map(function (item, index) {
            var _slot2;

            return vue.withDirectives(vue.createVNode(vue.resolveComponent("tag"), {
              "key": index,
              "size": size,
              "closable": !item.disabled && !disabled,
              "disabled": disabled,
              "style": "max-width: 100%;",
              "maxWidth": "100%",
              "title": get_1(item, realLabel),
              "onClose": _this17.removeTag.bind(null, index)
            }, _isSlot$l(_slot2 = get_1(item, realLabel)) ? _slot2 : {
              "default": function _default() {
                return [_slot2];
              }
            }), [[vue.vShow, _this17.minCollapsedNum <= 0 || index < _this17.minCollapsedNum]]);
          })), _this17.collapsedItems || _this17.$slots.collapsedItems ? renderTNodeJSX(_this17, "collapsedItems", {
            params: {
              value: selectedMultiple,
              collapsedSelectedItems: selectedMultiple.slice(_this17.minCollapsedNum),
              count: selectedMultiple.length - _this17.minCollapsedNum
            }
          }) : vue.withDirectives(vue.createVNode(vue.resolveComponent("tag"), {
            "size": size
          }, {
            "default": function _default() {
              return ["+".concat(selectedMultiple.length - _this17.minCollapsedNum)];
            }
          }), [[vue.vShow, _this17.minCollapsedNum > 0 && selectedMultiple.length > _this17.minCollapsedNum]]), !multiple && !showPlaceholder && !showFilter && (_this17.valueDisplay || _this17.$slots.valueDisplay ? renderTNodeJSX(_this17, "valueDisplay", {
            params: {
              value: selectedSingle
            }
          }) : vue.createVNode("span", {
            "title": selectedSingle,
            "class": "".concat(_this17.COMPONENT_NAME, "__single")
          }, [selectedSingle])), showFilter && vue.createVNode(vue.resolveComponent("t-input"), {
            "ref": "input",
            "modelValue": _this17.searchInput,
            "onUpdate:modelValue": function onUpdateModelValue($event) {
              return _this17.searchInput = $event;
            },
            "size": size,
            "placeholder": filterPlaceholder,
            "disabled": disabled,
            "class": "".concat(_this17.COMPONENT_NAME, "__input"),
            "readonly": !_this17.visible || !_this17.showFilter,
            "onFocus": _this17.focus,
            "onBlur": _this17.blur,
            "onEnter": _this17.enter
          }, null), _this17.innerShowArrow && !_this17.showLoading && vue.createVNode(FakeArrow, {
            "overlayClassName": "".concat(_this17.COMPONENT_NAME, "__right-icon ").concat(_this17.COMPONENT_NAME, "__right-icon-polyfill"),
            "isActive": _this17.visible && !_this17.disabled
          }, null), _this17.showClose && !_this17.showLoading && _this17.getCloseIcon(), _this17.showLoading && vue.createVNode(Loading, {
            "class": "".concat(_this17.COMPONENT_NAME, "__right-icon ").concat(_this17.COMPONENT_NAME, "__active-icon ").concat(_this17.COMPONENT_NAME, "__right-icon-polyfill"),
            "size": "small"
          }, null)])];
        }
      }, slots)), children && !this.visible && !this.hasOptions && vue.withDirectives(vue.createVNode("div", null, [children]), [[vue.vShow, false]])]);
    }
  });

  var Select = withInstall(mapProps([{
    name: "value",
    event: "change",
    alias: ["modelValue"]
  }])(_Select));
  var Option = withInstall(_Option);
  var OptionGroup = withInstall(_OptionGroup);

  var props$E = {
    current: {
      type: Number,
      "default": void 0
    },
    modelValue: {
      type: Number,
      "default": void 0
    },
    defaultCurrent: {
      type: Number,
      "default": 1
    },
    disabled: Boolean,
    foldedMaxPageBtn: {
      type: Number,
      "default": 5
    },
    maxPageBtn: {
      type: Number,
      "default": 10
    },
    pageSize: {
      type: Number,
      "default": void 0
    },
    defaultPageSize: {
      type: Number,
      "default": 10
    },
    pageSizeOptions: {
      type: Array,
      "default": function _default() {
        return [5, 10, 20, 50];
      }
    },
    showFirstAndLastPageBtn: Boolean,
    showJumper: Boolean,
    showPageNumber: {
      type: Boolean,
      "default": true
    },
    showPageSize: {
      type: Boolean,
      "default": true
    },
    showPreviousAndNextBtn: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "simple"].includes(val);
      }
    },
    total: {
      type: Number,
      "default": 0
    },
    totalContent: {
      type: [Boolean, Function],
      "default": true
    },
    onChange: Function,
    onCurrentChange: Function,
    onPageSizeChange: Function
  };

  function usePaginationClasses(props, innerCurrent, innerPageSize, name) {
    var _useCommonClassName = useCommonClassName$2(),
        SIZE = _useCommonClassName.SIZE,
        STATUS = _useCommonClassName.STATUS;

    var pageCount = vue.computed(function () {
      var c = Math.ceil(props.total / innerPageSize.value);
      return c > 0 ? c : 1;
    });
    var paginationClass = vue.computed(function () {
      return ["".concat(name.value), SIZE.value[props.size], _defineProperty$3({}, STATUS.value.disabled, props.disabled)];
    });
    var totalClass = vue.computed(function () {
      return ["".concat(name.value, "__total")];
    });
    var sizerClass = vue.computed(function () {
      return ["".concat(name.value, "__select")];
    });
    var preBtnClass = vue.computed(function () {
      return ["".concat(name.value, "__btn"), "".concat(name.value, "__btn-prev"), _defineProperty$3({}, STATUS.value.disabled, props.disabled || innerCurrent.value === 1)];
    });
    var nextBtnClass = vue.computed(function () {
      return ["".concat(name.value, "__btn"), "".concat(name.value, "__btn-next"), _defineProperty$3({}, STATUS.value.disabled, props.disabled || innerCurrent.value === pageCount.value)];
    });
    var btnWrapClass = vue.computed(function () {
      return ["".concat(name.value, "__pager")];
    });
    var btnMoreClass = vue.computed(function () {
      return ["".concat(name.value, "__number"), "".concat(name.value, "__number--more"), _defineProperty$3({}, STATUS.value.disabled, props.disabled)];
    });
    var jumperClass = vue.computed(function () {
      return ["".concat(name.value, "__jump")];
    });
    var jumperInputClass = vue.computed(function () {
      return ["".concat(name.value, "__input")];
    });
    var simpleClass = vue.computed(function () {
      return ["".concat(name.value, "__select")];
    });

    var getButtonClass = function getButtonClass(index) {
      var _ref5;

      return ["".concat(name.value, "__number"), (_ref5 = {}, _defineProperty$3(_ref5, STATUS.value.disabled, props.disabled), _defineProperty$3(_ref5, STATUS.value.current, innerCurrent.value === index), _ref5)];
    };

    return {
      pageCount: pageCount,
      paginationClass: paginationClass,
      totalClass: totalClass,
      sizerClass: sizerClass,
      preBtnClass: preBtnClass,
      nextBtnClass: nextBtnClass,
      btnWrapClass: btnWrapClass,
      btnMoreClass: btnMoreClass,
      jumperClass: jumperClass,
      jumperInputClass: jumperInputClass,
      simpleClass: simpleClass,
      getButtonClass: getButtonClass
    };
  }

  function useMoreAction(props, pageCount, innerCurrent) {
    var prevMore = vue.ref(false);
    var nextMore = vue.ref(false);
    var curPageLeftCount = vue.computed(function () {
      return Math.ceil((props.foldedMaxPageBtn - 1) / 2);
    });
    var curPageRightCount = vue.computed(function () {
      return Math.ceil((props.foldedMaxPageBtn - 1) / 2);
    });
    var isPrevMoreShow = vue.computed(function () {
      return 2 + curPageLeftCount.value < innerCurrent.value;
    });
    var isNextMoreShow = vue.computed(function () {
      return pageCount.value - 1 - curPageRightCount.value > innerCurrent.value;
    });
    return {
      prevMore: prevMore,
      nextMore: nextMore,
      curPageLeftCount: curPageLeftCount,
      curPageRightCount: curPageRightCount,
      isPrevMoreShow: isPrevMoreShow,
      isNextMoreShow: isNextMoreShow
    };
  }

  var _excluded$2 = ["pageCount"];

  function ownKeys$1p(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1o(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1p(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1p(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot$k(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var min = 1;
  var _Pagination = vue.defineComponent({
    name: "TPagination",
    props: props$E,
    setup: function setup(props2) {
      var _toRefs = vue.toRefs(props2),
          modelValue = _toRefs.modelValue,
          pageSize = _toRefs.pageSize,
          current = _toRefs.current;

      var renderTNodeJSX = useTNodeJSX();

      var _useVModel = useVModel(current, modelValue, props2.defaultCurrent, props2.onCurrentChange, "current"),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          innerCurrent = _useVModel2[0],
          setInnerCurrent = _useVModel2[1];

      var _useDefaultValue = useDefaultValue(pageSize, props2.defaultPageSize, props2.onPageSizeChange, "pageSize"),
          _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
          innerPageSize = _useDefaultValue2[0],
          setInnerPageSize = _useDefaultValue2[1];

      var _useConfig = useConfig("pagination"),
          t = _useConfig.t,
          global = _useConfig.global;

      var COMPONENT_NAME = usePrefixClass("pagination");

      var _usePaginationClasses = usePaginationClasses(props2, innerCurrent, innerPageSize, COMPONENT_NAME),
          pageCount = _usePaginationClasses.pageCount,
          paginationClasses = _objectWithoutProperties$1(_usePaginationClasses, _excluded$2);

      var _useMoreAction = useMoreAction(props2, pageCount, innerCurrent),
          prevMore = _useMoreAction.prevMore,
          isPrevMoreShow = _useMoreAction.isPrevMoreShow,
          curPageLeftCount = _useMoreAction.curPageLeftCount,
          nextMore = _useMoreAction.nextMore,
          isNextMoreShow = _useMoreAction.isNextMoreShow,
          curPageRightCount = _useMoreAction.curPageRightCount;

      var jumpIndex = vue.ref(innerCurrent.value);
      var isSimple = vue.computed(function () {
        return props2.theme === "simple";
      });
      var isFolded = vue.computed(function () {
        return pageCount.value > props2.maxPageBtn;
      });
      var pageCountOption = vue.computed(function () {
        var ans = [];

        for (var i = 1; i <= pageCount.value; i++) {
          ans.push({
            value: i,
            label: "".concat(i, "/").concat(pageCount.value)
          });
        }

        return ans;
      });
      var sizeOptions = vue.computed(function () {
        var pageSizeOptions = props2.pageSizeOptions;
        var options = pageSizeOptions.map(function (option) {
          return _typeof$2(option) === "object" ? option : {
            label: t(global.value.itemsPerPage, {
              size: option
            }),
            value: Number(option)
          };
        });
        return options.sort(function (a, b) {
          return a.value - b.value;
        });
      });
      var pages = vue.computed(function () {
        var array = [];
        var start;
        var end;

        if (isFolded.value) {
          if (isPrevMoreShow.value && isNextMoreShow.value) {
            start = innerCurrent.value - curPageLeftCount.value;
            end = innerCurrent.value + curPageRightCount.value;
          } else {
            start = isPrevMoreShow.value ? pageCount.value - props2.foldedMaxPageBtn + 1 : 2;
            end = isPrevMoreShow.value ? pageCount.value - 1 : props2.foldedMaxPageBtn;
          }
        } else {
          start = 1;
          end = pageCount.value;
        }

        for (var i = start; i <= end; i++) {
          array.push(i);
        }

        return array;
      });
      vue.watch(function () {
        return innerCurrent.value;
      }, function (val) {
        return jumpIndex.value = val;
      });

      var toPage = function toPage(pageIndex, isTriggerChange) {
        if (props2.disabled) {
          return;
        }

        var current2 = pageIndex;

        if (pageIndex < min) {
          current2 = min;
        } else if (pageIndex > pageCount.value) {
          current2 = pageCount.value;
        }

        if (innerCurrent.value !== current2) {
          var prev = innerCurrent.value;
          var pageInfo = {
            current: current2,
            previous: prev,
            pageSize: innerPageSize.value
          };

          if (isTriggerChange !== false) {
            var _props2$onChange;

            (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 ? void 0 : _props2$onChange.call(props2, pageInfo);
          }

          setInnerCurrent(current2, pageInfo);
        }
      };

      var handlePageChange = function handlePageChange(type) {
        var pageChangeMap = {
          prevPage: function prevPage() {
            return toPage(innerCurrent.value - 1);
          },
          nextPage: function nextPage() {
            return toPage(innerCurrent.value + 1);
          },
          prevMorePage: function prevMorePage() {
            return toPage(innerCurrent.value - props2.foldedMaxPageBtn);
          },
          nextMorePage: function nextMorePage() {
            return toPage(innerCurrent.value + props2.foldedMaxPageBtn);
          }
        };
        pageChangeMap[type]();
      };

      var onSelectorChange = function onSelectorChange(e) {
        var _props2$onChange2;

        if (props2.disabled) {
          return;
        }

        var pageSize2 = parseInt(e, 10);
        var pageCount2 = 1;

        if (pageSize2 > 0) {
          pageCount2 = Math.ceil(props2.total / pageSize2);
        }

        var isIndexChange = false;

        if (innerCurrent.value > pageCount2) {
          isIndexChange = true;
        }

        var pageInfo = {
          current: isIndexChange ? pageCount2 : innerCurrent.value,
          previous: innerCurrent.value,
          pageSize: pageSize2
        };
        (_props2$onChange2 = props2.onChange) === null || _props2$onChange2 === void 0 ? void 0 : _props2$onChange2.call(props2, pageInfo);
        setInnerPageSize(pageSize2, pageInfo);

        if (isIndexChange) {
          toPage(pageCount2, false);
        }
      };

      var onJumperChange = function onJumperChange(val) {
        var currentIndex = Math.trunc(+val);
        if (_isNaN(currentIndex)) return;
        jumpIndex.value = currentIndex;
        toPage(currentIndex);
      };

      return _objectSpread$1o(_objectSpread$1o({
        renderTNodeJSX: renderTNodeJSX,
        global: global,
        t: t
      }, paginationClasses), {}, {
        sizeOptions: sizeOptions,
        isSimple: isSimple,
        isFolded: isFolded,
        isPrevMoreShow: isPrevMoreShow,
        prevMore: prevMore,
        pages: pages,
        isNextMoreShow: isNextMoreShow,
        nextMore: nextMore,
        pageCount: pageCount,
        pageCountOption: pageCountOption,
        jumpIndex: jumpIndex,
        toPage: toPage,
        handlePageChange: handlePageChange,
        onSelectorChange: onSelectorChange,
        onJumperChange: onJumperChange,
        innerCurrent: innerCurrent,
        innerPageSize: innerPageSize
      });
    },
    render: function render() {
      var _this = this;

      var _slot;

      var pageCount = this.pageCount,
          innerPageSize = this.innerPageSize,
          innerCurrent = this.innerCurrent,
          renderTNodeJSX = this.renderTNodeJSX;
      var _this$$props = this.$props,
          total = _this$$props.total,
          pageSizeOptions = _this$$props.pageSizeOptions,
          size = _this$$props.size,
          disabled = _this$$props.disabled,
          showJumper = _this$$props.showJumper;
      if (pageCount < 1) return null;
      return vue.createVNode("div", {
        "class": this.paginationClass
      }, [renderTNodeJSX("totalContent", vue.createVNode("div", {
        "class": this.totalClass
      }, [this.t(this.global.total, {
        total: total
      })])), this.showPageSize && pageSizeOptions.length > 0 && vue.createVNode(Select, {
        "size": size,
        "value": innerPageSize,
        "disabled": disabled,
        "class": this.sizerClass,
        "onChange": this.onSelectorChange
      }, _isSlot$k(_slot = this.sizeOptions.map(function (item, index) {
        return vue.createVNode(Option, {
          "value": item.value,
          "label": item.label,
          "key": index
        }, null);
      })) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      }), this.showFirstAndLastPageBtn ? vue.createVNode("div", {
        "class": this.preBtnClass,
        "onClick": function onClick() {
          return _this.toPage(1);
        },
        "disabled": this.disabled || this.current === min
      }, [vue.createVNode(pageFirst, null, null)]) : null, this.showPreviousAndNextBtn ? vue.createVNode("div", {
        "class": this.preBtnClass,
        "onClick": function onClick() {
          return _this.handlePageChange("prevPage");
        },
        "disabled": disabled || innerCurrent === min
      }, [vue.createVNode(chevronLeft, null, null)]) : null, this.showPageNumber && this.theme === "default" ? vue.createVNode("ul", {
        "class": this.btnWrapClass
      }, [this.isFolded && vue.createVNode("li", {
        "class": this.getButtonClass(1),
        "onClick": function onClick() {
          return _this.toPage(min);
        }
      }, [min]), this.isFolded && this.isPrevMoreShow ? vue.createVNode("li", {
        "class": this.btnMoreClass,
        "onClick": function onClick() {
          return _this.handlePageChange("prevMorePage");
        },
        "onMouseOver": function onMouseOver() {
          return _this.prevMore = true;
        },
        "onMouseOut": function onMouseOut() {
          return _this.prevMore = false;
        }
      }, [this.prevMore ? vue.createVNode(chevronLeftDouble, null, null) : vue.createVNode(ellipsis, null, null)]) : null, this.pages.map(function (i) {
        return vue.createVNode("li", {
          "class": _this.getButtonClass(i),
          "key": i,
          "onClick": function onClick() {
            return _this.toPage(i);
          }
        }, [i]);
      }), this.isFolded && this.isNextMoreShow ? vue.createVNode("li", {
        "class": this.btnMoreClass,
        "onClick": function onClick() {
          return _this.handlePageChange("nextMorePage");
        },
        "onMouseOver": function onMouseOver() {
          return _this.nextMore = true;
        },
        "onMouseOut": function onMouseOut() {
          return _this.nextMore = false;
        }
      }, [this.nextMore ? vue.createVNode(chevronRightDouble, null, null) : vue.createVNode(ellipsis, null, null)]) : null, this.isFolded ? vue.createVNode("li", {
        "class": this.getButtonClass(this.pageCount),
        "onClick": function onClick() {
          return _this.toPage(_this.pageCount);
        }
      }, [this.pageCount]) : null]) : null, this.showPageNumber && this.theme === "simple" ? vue.createVNode(Select, {
        "size": size,
        "value": innerCurrent,
        "disabled": disabled,
        "class": this.simpleClass,
        "onChange": this.toPage,
        "options": this.pageCountOption
      }, null) : null, this.showPreviousAndNextBtn ? vue.createVNode("div", {
        "class": this.nextBtnClass,
        "onClick": function onClick() {
          return _this.handlePageChange("nextPage");
        },
        "disabled": disabled || innerCurrent === this.pageCount
      }, [vue.createVNode(chevronRight, null, null)]) : null, this.showFirstAndLastPageBtn ? vue.createVNode("div", {
        "class": this.nextBtnClass,
        "onClick": function onClick() {
          return _this.toPage(_this.pageCount);
        },
        "disabled": this.disabled || this.current === this.pageCount
      }, [vue.createVNode(pageLast, null, null)]) : null, showJumper ? vue.createVNode("div", {
        "class": this.jumperClass
      }, [this.t(this.global.jumpTo), vue.createVNode(InputNumber, {
        "class": this.jumperInputClass,
        "modelValue": _this.jumpIndex,
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return _this.jumpIndex = $event;
        },
        "onBlur": this.onJumperChange,
        "onEnter": this.onJumperChange,
        "max": this.pageCount,
        "min": min,
        "size": size,
        "disabled": this.disabled,
        "theme": "normal",
        "placeholder": ""
      }, null), this.t(this.global.page)]) : null]);
    }
  });

  var Pagination = withInstall(_Pagination);

  var props$D = {
    current: {
      type: [String, Number],
      "default": void 0
    },
    modelValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultCurrent: {
      type: [String, Number]
    },
    layout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        if (!val) return true;
        return ["horizontal", "vertical"].includes(val);
      }
    },
    options: {
      type: Array
    },
    readonly: Boolean,
    separator: {
      type: String,
      "default": "line",
      validator: function validator(val) {
        if (!val) return true;
        return ["line", "dashed", "arrow"].includes(val);
      }
    },
    sequence: {
      type: String,
      "default": "positive",
      validator: function validator(val) {
        if (!val) return true;
        return ["positive", "reverse"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "dot"].includes(val);
      }
    },
    onChange: Function
  };

  var props$C = {
    content: {
      type: [String, Function],
      "default": ""
    },
    "default": {
      type: [String, Function]
    },
    extra: {
      type: [String, Function]
    },
    icon: {
      type: [Boolean, Function],
      "default": true
    },
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "process", "finish", "error"].includes(val);
      }
    },
    title: {
      type: [String, Function],
      "default": ""
    },
    value: {
      type: [String, Number]
    }
  };

  function ownKeys$1o(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1n(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1o(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1o(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Steps = vue.defineComponent({
    name: "TSteps",
    props: _objectSpread$1n({}, props$D),
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("steps");

      var _toRefs = vue.toRefs(props2),
          current = _toRefs.current,
          modelValue = _toRefs.modelValue;

      var _useVModel = useVModel(current, modelValue, props2.defaultCurrent, props2.onChange, "current"),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          innerCurrent = _useVModel2[0],
          setInnerCurrent = _useVModel2[1];

      vue.provide("StepsState", vue.reactive({
        current: innerCurrent,
        setCurrent: setInnerCurrent
      }));
      vue.provide("StepsProps", props2);
      var indexMap = vue.ref({});
      vue.watchEffect(function () {
        var _props2$options;

        if (!props2.options) return;
        (_props2$options = props2.options) === null || _props2$options === void 0 ? void 0 : _props2$options.forEach(function (item, index) {
          if (item.value !== void 0) indexMap.value[item.value] = index;
        });
      });

      var handleStatus = function handleStatus(itemProps, index) {
        if (itemProps.status && itemProps.status !== "default") return itemProps.status;
        if (innerCurrent.value === "FINISH") return "finish";

        if (itemProps.value === void 0) {
          if (props2.sequence === "positive" && index < innerCurrent.value) return "finish";
          if (props2.sequence === "reverse" && index > innerCurrent.value) return "finish";
        }

        if (itemProps.value !== void 0) {
          var matchIndex = indexMap.value[innerCurrent.value];

          if (matchIndex === void 0) {
            console.warn("TDesign Steps Warn: The current `value` is not exist.");
            return "default";
          }

          if (props2.sequence === "positive" && index < matchIndex) return "finish";
          if (props2.sequence === "reverse" && index > matchIndex) return "finish";
        }

        var key = itemProps.value === void 0 ? index : itemProps.value;
        if (key === innerCurrent.value) return "process";
        return "default";
      };

      var getChildComponentByName = useChildComponentSlots();

      var getOptionListBySlots = function getOptionListBySlots(nodes) {
        var arr = [];
        nodes === null || nodes === void 0 ? void 0 : nodes.forEach(function (node) {
          var option = node === null || node === void 0 ? void 0 : node.props;
          var children = node === null || node === void 0 ? void 0 : node.children;
          if (!option && !children) return;

          if (children && isObject_1(children)) {
            for (var key in children) {
              if (key in props$C && !option[key]) {
                option[key] = children[key];
              }
            }
          }

          props2.sequence === "reverse" ? arr.unshift(option) : arr.push(option);
        });
        return arr;
      };

      var getOptions = function getOptions() {
        var _props2$options2;

        var options;

        if ((_props2$options2 = props2.options) !== null && _props2$options2 !== void 0 && _props2$options2.length) {
          options = props2.sequence === "reverse" ? props2.options.slice().reverse() : props2.options;
        } else {
          var nodes = getChildComponentByName("TStepItem");
          options = getOptionListBySlots(nodes);
        }

        return options;
      };

      var renderContent = function renderContent() {
        var content = null;
        var options = getOptions();
        var nodes = getChildComponentByName("TStepItem");
        content = options.map(function (item, index) {
          var stepIndex = props2.sequence === "reverse" ? options.length - index - 1 : index;

          var stepItem = vue.createVNode(vue.resolveComponent("t-step-item"), vue.mergeProps(item, {
            "index": stepIndex,
            "status": handleStatus(item, index),
            "key": item.value || index
          }), null);

          if (nodes && nodes[index]) {
            var vnode = nodes[index];
            vnode.props = _objectSpread$1n(_objectSpread$1n({}, item), {}, {
              index: stepIndex,
              status: handleStatus(item, index)
            });
            return vnode;
          }

          return stepItem;
        });
        return content;
      };

      var handleTheme = function handleTheme() {
        var theme = props2.theme;
        var options = getOptions();
        options.forEach(function (item) {
          if ((item === null || item === void 0 ? void 0 : item.icon) !== void 0) {
            theme = "default";
          }
        });
        return theme;
      };

      var baseClass = vue.computed(function () {
        return [COMPONENT_NAME.value, "".concat(COMPONENT_NAME.value, "--").concat(props2.layout), "".concat(COMPONENT_NAME.value, "--").concat(handleTheme(), "-anchor"), "".concat(COMPONENT_NAME.value, "--").concat(props2.sequence), "".concat(COMPONENT_NAME.value, "--").concat(props2.separator, "-separator")];
      });
      return function () {
        return vue.createVNode("div", {
          "class": baseClass.value
        }, [renderContent()]);
      };
    }
  });

  function ownKeys$1n(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1m(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1n(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1n(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _StepItem = vue.defineComponent({
    name: "TStepItem",
    props: _objectSpread$1m(_objectSpread$1m({}, props$C), {}, {
      index: Number
    }),
    setup: function setup(props2) {
      var stepsState = vue.inject("StepsState", void 0);
      var stepsProps = vue.inject("StepsProps", void 0);

      var _useConfig = useConfig("steps"),
          global = _useConfig.global;

      var canClick = vue.computed(function () {
        return props2.status !== "process" && !(stepsProps !== null && stepsProps !== void 0 && stepsProps.readonly);
      });

      var onStepClick = function onStepClick(e) {
        if (!canClick.value) return;
        var val = props2.value === void 0 ? props2.index : props2.value;
        stepsState.setCurrent(val, stepsState.current, {
          e: e
        });
      };

      var COMPONENT_NAME = usePrefixClass("steps-item");
      var statusClass = vue.computed(function () {
        return _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--").concat(props2.status), props2.status);
      });
      var baseClass = vue.computed(function () {
        return [COMPONENT_NAME.value, statusClass.value];
      });
      var iconClass = vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__icon"), statusClass.value];
      });
      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();

      var renderIcon = function renderIcon() {
        var defaultIcon;

        if (stepsProps.theme === "default") {
          var icon = "";

          switch (props2.status) {
            case "finish":
              icon = vue.createVNode(check, null, null);
              break;

            case "error":
              if (isFunction_1(global.value.errorIcon)) {
                icon = global.value.errorIcon(vue.h);
              } else {
                icon = vue.createVNode(close, null, null);
              }

              break;

            default:
              icon = String(props2.index + 1);
              break;
          }

          defaultIcon = vue.createVNode("span", {
            "class": "".concat(COMPONENT_NAME.value, "__icon--number")
          }, [icon]);
        }

        return renderTNodeJSX("icon", defaultIcon);
      };

      return function () {
        return vue.createVNode("div", {
          "class": baseClass.value
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__inner ").concat(canClick.value ? "".concat(COMPONENT_NAME.value, "--clickable") : ""),
          "onClick": onStepClick
        }, [vue.createVNode("div", {
          "class": iconClass.value
        }, [renderIcon()]), vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__content")
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__title")
        }, [renderTNodeJSX("title")]), vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__description")
        }, [renderContent("default", "content")]), vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__extra")
        }, [renderTNodeJSX("extra")])])])]);
      };
    }
  });

  var Steps = withInstall(_Steps);
  var StepItem = withInstall(_StepItem);

  function getSingleContent(cascaderContext) {
    var value = cascaderContext.value,
        multiple = cascaderContext.multiple,
        treeStore = cascaderContext.treeStore,
        showAllLevels = cascaderContext.showAllLevels,
        setValue = cascaderContext.setValue;
    if (multiple || !value) return "";
    if (Array.isArray(value)) return "";
    var node = treeStore && treeStore.getNodes(value);

    if (!(node && node.length)) {
      if (value) {
        setValue(multiple ? [] : "", "invalid-value");
      }

      return "";
    }

    var path = node && node[0].getPath();

    if (path && path.length) {
      return showAllLevels ? path.map(function (node2) {
        return node2.label;
      }).join(" / ") : path[path.length - 1].label;
    }

    return value;
  }
  function getMultipleContent(cascaderContext) {
    var value = cascaderContext.value,
        multiple = cascaderContext.multiple,
        treeStore = cascaderContext.treeStore,
        showAllLevels = cascaderContext.showAllLevels;
    if (!multiple) return [];
    if (multiple && !Array.isArray(value)) return [];
    var node = treeStore && treeStore.getNodes(value);
    if (!node) return [];
    return value.map(function (item) {
      var node2 = treeStore.getNodes(item);
      return showAllLevels ? getFullPathLabel(node2[0]) : node2[0].label;
    });
  }
  function getPanels(treeNodes) {
    var panels = [];
    treeNodes.forEach(function (node) {
      if (panels[node.level]) {
        panels[node.level].push(node);
      } else {
        panels[node.level] = [node];
      }
    });
    return panels;
  }
  function getFullPathLabel(node) {
    return node.getPath().map(function (node2) {
      return node2.label;
    }).join("/");
  }
  var getTreeValue = function getTreeValue(value) {
    var treeValue = [];

    if (Array.isArray(value)) {
      if (value.length > 0 && _typeof$2(value[0]) === "object") {
        treeValue = value.map(function (val) {
          return val.value;
        });
      } else if (value.length) {
        treeValue = value;
      }
    } else if (value) {
      if (_typeof$2(value) === "object") {
        treeValue = [value.value];
      } else {
        treeValue = [value];
      }
    }

    return treeValue;
  };
  var getCascaderValue = function getCascaderValue(value, valueType, multiple) {
    if (valueType === "single") {
      return value;
    }

    if (multiple) {
      return value.map(function (item) {
        return item[item.length - 1];
      });
    }

    return value[value.length - 1];
  };
  function isEmptyValues(value) {
    if (typeof value === "number" && !isNaN(value)) return false;
    return isEmpty_1(value);
  }
  function isValueInvalid(value, cascaderContext) {
    var multiple = cascaderContext.multiple,
        showAllLevels = cascaderContext.showAllLevels;
    return multiple && !Array.isArray(value) || !multiple && Array.isArray(value) && !showAllLevels;
  }

  function getFakeArrowIconClass(prefix, STATUS, cascaderContext) {
    var disabled = cascaderContext.disabled;
    return ["".concat(prefix, "-cascader__icon"), _defineProperty$3({}, STATUS.disabled, disabled)];
  }
  function getNodeStatusClass(node, STATUS, cascaderContext) {
    var _ref2;

    var checkStrictly = cascaderContext.checkStrictly,
        multiple = cascaderContext.multiple,
        value = cascaderContext.value,
        max = cascaderContext.max;
    var expandedActive = !checkStrictly && node.expanded && (multiple ? !node.isLeaf() : true) || checkStrictly && node.expanded;
    var isLeaf = node.isLeaf();
    var isDisabled = node.disabled || multiple && value.length >= max && max !== 0;
    var isSelected = node.checked || multiple && !checkStrictly && node.expanded && !isLeaf;
    return [(_ref2 = {}, _defineProperty$3(_ref2, STATUS.selected, !isDisabled && isSelected), _defineProperty$3(_ref2, STATUS.expanded, !isDisabled && expandedActive), _defineProperty$3(_ref2, STATUS.disabled, isDisabled), _ref2)];
  }
  function getCascaderItemClass(prefix, node, SIZE, STATUS, cascaderContext) {
    var _ref3;

    var size = cascaderContext.size;
    return ["".concat(prefix, "-cascader__item")].concat(_toConsumableArray(getNodeStatusClass(node, STATUS, cascaderContext)), [SIZE[size], (_ref3 = {}, _defineProperty$3(_ref3, "".concat(prefix, "-cascader__item--with-icon"), !!node.children), _defineProperty$3(_ref3, "".concat(prefix, "-cascader__item--leaf"), node.isLeaf()), _ref3)]);
  }
  function getCascaderItemIconClass(prefix, node, STATUS, cascaderContext) {
    return ["".concat(prefix, "-cascader__item-icon")].concat(_toConsumableArray(getNodeStatusClass(node, STATUS, cascaderContext)));
  }

  function _isSlot$j(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var props$B = {
    node: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    cascaderContext: {
      type: Object
    },
    onChange: Function,
    onClick: Function,
    onMouseenter: Function
  };
  var Item = vue.defineComponent({
    name: "TCascaderItem",
    props: props$B,
    setup: function setup(props2) {
      var liRef = vue.ref();
      var liRef2 = vue.ref();
      useRipple(liRef);
      var COMPONENT_NAME = usePrefixClass("cascader__item");
      var classPrefix = usePrefixClass();

      var _useCommonClassName = useCommonClassName$2(),
          STATUS = _useCommonClassName.STATUS,
          SIZE = _useCommonClassName.SIZE;

      var itemClass = vue.computed(function () {
        return getCascaderItemClass(classPrefix.value, props2.node, SIZE.value, STATUS.value, props2.cascaderContext);
      });
      var iconClass = vue.computed(function () {
        return getCascaderItemIconClass(classPrefix.value, props2.node, STATUS.value, props2.cascaderContext);
      });

      function RenderLabelInner(node, cascaderContext) {
        var inputVal = cascaderContext.inputVal;
        var labelText = inputVal ? getFullPathLabel(node) : node.label;

        if (inputVal) {
          var texts = labelText.split(inputVal);
          var doms = [];

          for (var index = 0; index < texts.length; index++) {
            doms.push(vue.createVNode("span", {
              "key": index
            }, [texts[index]]));
            if (index === texts.length - 1) break;
            doms.push(vue.createVNode("span", {
              "key": "".concat(index, "filter"),
              "class": "".concat(COMPONENT_NAME.value, "-label--filter")
            }, [inputVal]));
          }

          return doms;
        }

        return labelText;
      }

      function RenderLabelContent(node, cascaderContext) {
        var label = RenderLabelInner(node, cascaderContext);

        var labelCont = vue.createVNode("span", {
          "title": cascaderContext.inputVal ? getFullPathLabel(node) : node.label,
          "ref": liRef2,
          "class": ["".concat(COMPONENT_NAME.value, "-label"), "".concat(COMPONENT_NAME.value, "-label--ellipsis")],
          "role": "label"
        }, [label]);

        return labelCont;
      }

      function RenderCheckBox(node, cascaderContext) {
        var checkProps = cascaderContext.checkProps,
            value = cascaderContext.value,
            max = cascaderContext.max,
            inputVal = cascaderContext.inputVal,
            size = cascaderContext.size;
        var label = RenderLabelInner(node, cascaderContext);
        return vue.createVNode(Checkbox, vue.mergeProps({
          "checked": node.checked,
          "indeterminate": node.indeterminate,
          "disabled": node.isDisabled() || value.length >= max && max !== 0,
          "name": node.value,
          "size": size,
          "title": inputVal ? getFullPathLabel(node) : node.label,
          "onChange": function onChange() {
            props2.onChange(node);
          }
        }, checkProps), _isSlot$j(label) ? label : {
          "default": function _default() {
            return [label];
          }
        });
      }

      return function () {
        var cascaderContext = props2.cascaderContext,
            node = props2.node;
        return vue.createVNode("li", {
          "ref": liRef,
          "class": itemClass.value,
          "onClick": function onClick(e) {
            e.stopPropagation();
            props2.onClick(node);
          },
          "onMouseenter": function onMouseenter(e) {
            e.stopPropagation();
            props2.onMouseenter(node);
          }
        }, [cascaderContext.multiple ? RenderCheckBox(node, cascaderContext) : RenderLabelContent(node, cascaderContext), node.children && (node.loading ? vue.createVNode(Loading, {
          "class": iconClass.value,
          "size": "small"
        }, null) : vue.createVNode(chevronRight, {
          "class": iconClass.value
        }, null))]);
      };
    }
  });

  var props$A = {
    checkProps: {
      type: Object
    },
    checkStrictly: Boolean,
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    disabled: Boolean,
    empty: {
      type: [String, Function]
    },
    filterable: Boolean,
    keys: {
      type: Object
    },
    lazy: {
      type: Boolean,
      "default": true
    },
    load: {
      type: Function
    },
    loading: Boolean,
    loadingText: {
      type: [String, Function],
      "default": ""
    },
    max: {
      type: Number,
      "default": 0
    },
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    multiple: Boolean,
    options: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    popupVisible: {
      type: Boolean,
      "default": void 0
    },
    readonly: Boolean,
    selectInputProps: {
      type: Object
    },
    showAllLevels: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["large", "medium", "small"].includes(val);
      }
    },
    trigger: {
      type: String,
      "default": "click",
      validator: function validator(val) {
        if (!val) return true;
        return ["click", "hover"].includes(val);
      }
    },
    value: {
      type: [String, Number, Array],
      defaultValue: void 0
    },
    modelValue: {
      type: [String, Number, Array],
      defaultValue: void 0
    },
    defaultValue: {
      type: [String, Number, Array],
      "default": function _default() {
        return [];
      }
    },
    valueMode: {
      type: String,
      "default": "onlyLeaf",
      validator: function validator(val) {
        if (!val) return true;
        return ["onlyLeaf", "parentFirst", "all"].includes(val);
      }
    },
    valueType: {
      type: String,
      "default": "single",
      validator: function validator(val) {
        if (!val) return true;
        return ["single", "full"].includes(val);
      }
    },
    onBlur: Function,
    onChange: Function,
    onFocus: Function,
    onPopupVisibleChange: Function,
    onRemove: Function
  };

  function expendClickEffect(propsTrigger, trigger, node, cascaderContext) {
    var checkStrictly = cascaderContext.checkStrictly,
        multiple = cascaderContext.multiple,
        treeStore = cascaderContext.treeStore,
        setVisible = cascaderContext.setVisible,
        setValue = cascaderContext.setValue,
        setTreeNodes = cascaderContext.setTreeNodes,
        setExpend = cascaderContext.setExpend,
        value = cascaderContext.value,
        max = cascaderContext.max,
        valueType = cascaderContext.valueType;
    var isDisabled = node.disabled || multiple && value.length >= max && max !== 0;
    if (isDisabled) return;

    if (propsTrigger === trigger && !node.isLeaf()) {
      var expanded = node.setExpanded(true);
      treeStore.refreshNodes();
      treeStore.replaceExpanded(expanded);
      var nodes = treeStore.getNodes().filter(function (node2) {
        return node2.visible;
      });
      setTreeNodes(nodes);

      if (multiple) {
        setExpend(expanded);
      }
    }

    if (!multiple && (node.isLeaf() || checkStrictly) && trigger === "click") {
      treeStore.resetChecked();
      var checked = node.setChecked(!node.checked);

      var _checked = _slicedToArray(checked, 1),
          value2 = _checked[0];

      setValue(valueType === "single" ? value2 : node.getPath().map(function (item) {
        return item.value;
      }), "check", node.getModel());

      if (!checkStrictly) {
        setVisible(false, {});
      }
    }
  }
  function valueChangeEffect(node, cascaderContext) {
    var disabled = cascaderContext.disabled,
        max = cascaderContext.max,
        inputVal = cascaderContext.inputVal,
        multiple = cascaderContext.multiple,
        setVisible = cascaderContext.setVisible,
        setValue = cascaderContext.setValue,
        treeNodes = cascaderContext.treeNodes,
        treeStore = cascaderContext.treeStore,
        valueType = cascaderContext.valueType;

    if (!node || disabled || node.disabled) {
      return;
    }

    var checked = node.setChecked(!node.isChecked());

    if (isNumber_1(max) && max < 0) {
      console.warn("TDesign Warn:", "max should > 0");
    }

    if (checked.length > max && isNumber_1(max) && max > 0) {
      return;
    }

    if (checked.length === 0) {
      var expanded = treeStore.getExpanded();
      setTimeout(function () {
        treeStore.replaceExpanded(expanded);
        treeStore.refreshNodes();
      }, 0);
    }

    if (!multiple) {
      setVisible(false, {});
    }

    var isSelectAll = treeNodes.every(function (item) {
      return checked.indexOf(item.value) > -1;
    });

    if (inputVal && isSelectAll) {
      setVisible(false, {});
    }

    var resValue = valueType === "single" ? checked : checked.map(function (val) {
      return treeStore.getNode(val).getPath().map(function (item) {
        return item.value;
      });
    });
    setValue(resValue, "check", node.getModel());
  }
  function closeIconClickEffect(cascaderContext) {
    var setVisible = cascaderContext.setVisible,
        multiple = cascaderContext.multiple,
        setExpend = cascaderContext.setExpend,
        setValue = cascaderContext.setValue;
    setVisible(false, {});

    if (multiple) {
      setExpend([]);
    }

    setValue(multiple ? [] : "", "clear");
  }
  function handleRemoveTagEffect(cascaderContext, index, onRemove) {
    var disabled = cascaderContext.disabled,
        setValue = cascaderContext.setValue,
        value = cascaderContext.value,
        valueType = cascaderContext.valueType,
        treeStore = cascaderContext.treeStore;
    if (disabled) return;
    var newValue = cloneDeep_1(value);
    var res = newValue.splice(index, 1);
    var node = treeStore.getNodes(res[0])[0];
    setValue(newValue, "uncheck", node.getModel());
    var checked = node.setChecked(!node.isChecked());
    var resValue = valueType === "single" ? checked : checked.map(function (val) {
      return treeStore.getNode(val).getPath().map(function (item) {
        return item.value;
      });
    });
    setValue(resValue, "uncheck", node.getModel());

    if (isFunction_1(onRemove)) {
      onRemove({
        value: checked,
        node: node
      });
    }
  }
  var treeNodesEffect = function treeNodesEffect(inputVal, treeStore, setTreeNodes) {
    if (!treeStore) return;
    var nodes = [];

    if (inputVal) {
      nodes = treeStore.nodes.filter(function (node) {
        var fullPathLabel = getFullPathLabel(node);
        return fullPathLabel.toLocaleLowerCase().indexOf("".concat(inputVal).toLocaleLowerCase()) > -1 && node.isLeaf();
      });
    } else {
      nodes = treeStore.getNodes().filter(function (node) {
        return node.visible;
      });
    }

    setTreeNodes(nodes);
  };
  var treeStoreExpendEffect = function treeStoreExpendEffect(treeStore, value, expend) {
    var treeValue = getTreeValue(value);
    if (!treeStore) return;

    if (Array.isArray(treeValue) && expend.length === 0) {
      var expandedMap = /* @__PURE__ */new Map();

      var _treeValue = _slicedToArray(treeValue, 1),
          val = _treeValue[0];

      if (val) {
        expandedMap.set(val, true);
        var node = treeStore.getNode(val);

        if (!node) {
          treeStore.refreshNodes();
          return;
        }

        node.getParents().forEach(function (tn) {
          expandedMap.set(tn.value, true);
        });
        var expandedArr = Array.from(expandedMap.keys());
        treeStore.replaceExpanded(expandedArr);
      } else {
        treeStore.resetExpanded();
      }
    }

    if (treeStore.getExpanded() && expend.length) {
      treeStore.replaceExpanded(expend);
    }

    treeStore.refreshNodes();
  };

  var Panel = vue.defineComponent({
    name: "TCascaderSubPanel",
    props: {
      empty: props$A.empty,
      trigger: props$A.trigger,
      onChange: props$A.onChange,
      visible: {
        type: Boolean,
        "default": true
      },
      cascaderContext: {
        type: Object
      }
    },
    setup: function setup(props) {
      var renderTNodeJSXDefault = useTNodeDefault();
      var COMPONENT_NAME = usePrefixClass("cascader");

      var _useConfig = useConfig("cascader"),
          global = _useConfig.global,
          t = _useConfig.t;

      var itemShow = vue.ref(props.visible);
      var panels = vue.computed(function () {
        return getPanels(props.cascaderContext.treeNodes);
      });

      var handleExpand = function handleExpand(node, trigger) {
        var propsTrigger = props.trigger,
            cascaderContext = props.cascaderContext;
        expendClickEffect(propsTrigger, trigger, node, cascaderContext);
      };

      vue.watch(function () {
        return props.visible;
      }, function () {
        vue.nextTick(function () {
          itemShow.value = props.visible;
        });
      });

      var renderItem = function renderItem(node) {
        return vue.createVNode(Item, {
          "key": node.value,
          "node": node,
          "cascaderContext": props.cascaderContext,
          "onClick": function onClick(node2) {
            handleExpand(node2, "click");
          },
          "onMouseenter": function onMouseenter(node2) {
            handleExpand(node2, "hover");
          },
          "onChange": function onChange(node2) {
            valueChangeEffect(node2, props.cascaderContext);
          }
        }, null);
      };

      var renderList = function renderList(treeNodes) {
        var _ref;

        var isFilter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var segment = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "1";
        return vue.createVNode("ul", {
          "class": ["".concat(COMPONENT_NAME.value, "__menu"), "narrow-scrollbar", (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "__menu--segment"), segment), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "__menu--filter"), isFilter), _ref)],
          "key": key
        }, [treeNodes.map(function (node) {
          return renderItem(node);
        })]);
      };

      var renderPanels = function renderPanels() {
        var _props$cascaderContex = props.cascaderContext,
            inputVal = _props$cascaderContex.inputVal,
            treeNodes = _props$cascaderContex.treeNodes;
        return inputVal ? renderList(treeNodes, true) : panels.value.map(function (treeNodes2, index) {
          return renderList(treeNodes2, false, index !== panels.value.length - 1, "".concat(COMPONENT_NAME.value, "__menu").concat(index));
        });
      };

      return function () {
        return vue.createVNode("div", {
          "class": ["".concat(COMPONENT_NAME.value, "__panel"), _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--normal"), panels.value.length)]
        }, [panels.value.length ? renderPanels() : renderTNodeJSXDefault("empty", vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__panel--empty")
        }, [t(global.value.empty)]))]);
      };
    }
  });

  var props$z = {
    allowInput: Boolean,
    autoWidth: Boolean,
    borderless: Boolean,
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    disabled: Boolean,
    inputProps: {
      type: Object
    },
    inputValue: {
      type: [String, Number]
    },
    defaultInputValue: {
      type: [String, Number]
    },
    keys: {
      type: Object
    },
    label: {
      type: [String, Function]
    },
    loading: Boolean,
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    multiple: Boolean,
    panel: {
      type: [String, Function]
    },
    placeholder: {
      type: String,
      "default": ""
    },
    popupProps: {
      type: Object
    },
    popupVisible: {
      type: Boolean,
      "default": void 0
    },
    readonly: Boolean,
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["success", "warning", "error"].includes(val);
      }
    },
    suffix: {
      type: [String, Function]
    },
    suffixIcon: {
      type: Function
    },
    tag: {
      type: [String, Function]
    },
    tagInputProps: {
      type: Object
    },
    tagProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: [String, Number, Boolean, Object, Array, Date]
    },
    valueDisplay: {
      type: [String, Function]
    },
    onBlur: Function,
    onClear: Function,
    onEnter: Function,
    onFocus: Function,
    onInputChange: Function,
    onMouseenter: Function,
    onMouseleave: Function,
    onPaste: Function,
    onPopupVisibleChange: Function,
    onTagChange: Function
  };

  var baseGet$2 = _baseGet,
      baseSet = _baseSet,
      castPath$3 = _castPath;
  /**
   * The base implementation of  `_.pickBy` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @param {Function} predicate The function invoked per property.
   * @returns {Object} Returns the new object.
   */

  function basePickBy$1(object, paths, predicate) {
    var index = -1,
        length = paths.length,
        result = {};

    while (++index < length) {
      var path = paths[index],
          value = baseGet$2(object, path);

      if (predicate(value, path)) {
        baseSet(result, castPath$3(path, object), value);
      }
    }

    return result;
  }

  var _basePickBy = basePickBy$1;

  /**
   * The base implementation of `_.hasIn` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */

  function baseHasIn$1(object, key) {
    return object != null && key in Object(object);
  }

  var _baseHasIn = baseHasIn$1;

  var castPath$2 = _castPath,
      isArguments$1 = isArguments_1,
      isArray$3 = isArray_1,
      isIndex = _isIndex,
      isLength = isLength_1,
      toKey$3 = _toKey;
  /**
   * Checks if `path` exists on `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @param {Function} hasFunc The function to check properties.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   */

  function hasPath$1(object, path, hasFunc) {
    path = castPath$2(path, object);
    var index = -1,
        length = path.length,
        result = false;

    while (++index < length) {
      var key = toKey$3(path[index]);

      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }

      object = object[key];
    }

    if (result || ++index != length) {
      return result;
    }

    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex(key, length) && (isArray$3(object) || isArguments$1(object));
  }

  var _hasPath = hasPath$1;

  var baseHasIn = _baseHasIn,
      hasPath = _hasPath;
  /**
   * Checks if `path` is a direct or inherited property of `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.hasIn(object, 'a');
   * // => true
   *
   * _.hasIn(object, 'a.b');
   * // => true
   *
   * _.hasIn(object, ['a', 'b']);
   * // => true
   *
   * _.hasIn(object, 'b');
   * // => false
   */

  function hasIn$2(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }

  var hasIn_1 = hasIn$2;

  var basePickBy = _basePickBy,
      hasIn$1 = hasIn_1;
  /**
   * The base implementation of `_.pick` without support for individual
   * property identifiers.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @returns {Object} Returns the new object.
   */

  function basePick$1(object, paths) {
    return basePickBy(object, paths, function (value, path) {
      return hasIn$1(object, path);
    });
  }

  var _basePick = basePick$1;

  var _Symbol$1 = _Symbol$6,
      isArguments = isArguments_1,
      isArray$2 = isArray_1;
  /** Built-in value references. */

  var spreadableSymbol = _Symbol$1 ? _Symbol$1.isConcatSpreadable : undefined;
  /**
   * Checks if `value` is a flattenable `arguments` object or array.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
   */

  function isFlattenable$1(value) {
    return isArray$2(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }

  var _isFlattenable = isFlattenable$1;

  var arrayPush = _arrayPush,
      isFlattenable = _isFlattenable;
  /**
   * The base implementation of `_.flatten` with support for restricting flattening.
   *
   * @private
   * @param {Array} array The array to flatten.
   * @param {number} depth The maximum recursion depth.
   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
   * @param {Array} [result=[]] The initial result value.
   * @returns {Array} Returns the new flattened array.
   */

  function baseFlatten$2(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];

      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          // Recursively flatten arrays (susceptible to call stack limits).
          baseFlatten$2(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }

    return result;
  }

  var _baseFlatten = baseFlatten$2;

  var baseFlatten$1 = _baseFlatten;
  /**
   * Flattens `array` a single level deep.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flatten([1, [2, [3, [4]], 5]]);
   * // => [1, 2, [3, [4]], 5]
   */

  function flatten$1(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten$1(array, 1) : [];
  }

  var flatten_1 = flatten$1;

  var flatten = flatten_1,
      overRest = _overRest,
      setToString = _setToString;
  /**
   * A specialized version of `baseRest` which flattens the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @returns {Function} Returns the new function.
   */

  function flatRest$2(func) {
    return setToString(overRest(func, undefined, flatten), func + '');
  }

  var _flatRest = flatRest$2;

  var basePick = _basePick,
      flatRest$1 = _flatRest;
  /**
   * Creates an object composed of the picked `object` properties.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to pick.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.pick(object, ['a', 'c']);
   * // => { 'a': 1, 'c': 3 }
   */

  var pick = flatRest$1(function (object, paths) {
    return object == null ? {} : basePick(object, paths);
  });
  var pick_1 = pick;

  function ownKeys$1m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1l(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1m(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var COMMON_PROPERTIES = ["status", "clearable", "disabled", "label", "placeholder", "readonly", "suffix", "suffixIcon", "onPaste", "onEnter", "onMouseenter", "onMouseleave"];
  var DEFAULT_KEYS$1 = {
    label: "label",
    value: "value"
  };

  function getInputValue(value, keys) {
    var iKeys = keys || DEFAULT_KEYS$1;
    return isObject_1(value) ? value[iKeys.label] : value;
  }

  function useSingle(props, context) {
    var _props$defaultInputVa;

    var _toRefs = vue.toRefs(props),
        value = _toRefs.value,
        keys = _toRefs.keys,
        propsInputValue = _toRefs.inputValue;

    var classPrefix = usePrefixClass();
    var inputRef = vue.ref();

    var _useDefaultValue = useDefaultValue(propsInputValue, (_props$defaultInputVa = props.defaultInputValue) !== null && _props$defaultInputVa !== void 0 ? _props$defaultInputVa : "", props.onInputChange, "inputValue"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        inputValue = _useDefaultValue2[0],
        setInputValue = _useDefaultValue2[1];

    var renderTNode = useTNodeJSX();
    var commonInputProps = vue.computed(function () {
      return pick_1(props, COMMON_PROPERTIES);
    });

    var onInnerClear = function onInnerClear(context2) {
      var _context2$e, _props$onClear;

      context2 === null || context2 === void 0 ? void 0 : (_context2$e = context2.e) === null || _context2$e === void 0 ? void 0 : _context2$e.stopPropagation();
      (_props$onClear = props.onClear) === null || _props$onClear === void 0 ? void 0 : _props$onClear.call(props, context2);
      setInputValue("", {
        trigger: "clear"
      });
    };

    var onInnerInputChange = function onInnerInputChange(value2, context2) {
      if (props.allowInput) {
        setInputValue(value2, _objectSpread$1l(_objectSpread$1l({}, context2), {}, {
          trigger: "input"
        }));
      }
    };

    var renderSelectSingle = function renderSelectSingle(popupVisible) {
      var singleValueDisplay = renderTNode("valueDisplay");
      var displayedValue = popupVisible && props.allowInput ? inputValue.value : getInputValue(value.value, keys.value);
      var prefixContent = [singleValueDisplay, renderTNode("label")];

      var inputProps = _objectSpread$1l(_objectSpread$1l(_objectSpread$1l({}, commonInputProps.value), props.inputProps), {}, {
        value: singleValueDisplay ? void 0 : displayedValue,
        label: prefixContent.length ? function () {
          return prefixContent;
        } : void 0,
        autoWidth: props.autoWidth,
        readonly: !props.allowInput,
        placeholder: singleValueDisplay ? "" : props.placeholder,
        suffixIcon: !props.disabled && props.loading ? function () {
          return vue.createVNode(Loading, {
            "loading": true,
            "size": "small"
          }, null);
        } : props.suffixIcon,
        showClearIconOnEmpty: Boolean(props.clearable && (inputValue.value || displayedValue))
      });

      return vue.createVNode(Input, vue.mergeProps({
        "ref": "inputRef"
      }, inputProps, {
        "onChange": onInnerInputChange,
        "onClear": onInnerClear,
        "onBlur": function onBlur(val, context2) {
          var _props$onBlur;

          (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, value.value, _objectSpread$1l(_objectSpread$1l({}, context2), {}, {
            inputValue: val
          }));
        },
        "onEnter": function onEnter(val, context2) {
          var _props$onEnter;

          (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props, value.value, _objectSpread$1l(_objectSpread$1l({}, context2), {}, {
            inputValue: val
          }));
        },
        "onFocus": function onFocus(val, context2) {
          var _props$onFocus;

          (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, value.value, _objectSpread$1l(_objectSpread$1l({}, context2), {}, {
            inputValue: val
          }));
          !popupVisible && setInputValue(getInputValue(value.value, keys.value), _objectSpread$1l(_objectSpread$1l({}, context2), {}, {
            trigger: "input"
          }));
        },
        "inputClass": _defineProperty$3({}, "".concat(classPrefix.value, "-input--focused"), popupVisible)
      }), context.slots);
    };

    return {
      inputRef: inputRef,
      commonInputProps: commonInputProps,
      onInnerClear: onInnerClear,
      renderSelectSingle: renderSelectSingle
    };
  }

  var props$y = {
    autoWidth: Boolean,
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    disabled: Boolean,
    dragSort: Boolean,
    excessTagsDisplayType: {
      type: String,
      "default": "scroll",
      validator: function validator(val) {
        if (!val) return true;
        return ["scroll", "break-line"].includes(val);
      }
    },
    inputProps: {
      type: Object
    },
    inputValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultInputValue: {
      type: [String, Number],
      "default": ""
    },
    label: {
      type: [String, Function]
    },
    max: {
      type: Number
    },
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    readonly: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["success", "warning", "error"].includes(val);
      }
    },
    suffix: {
      type: [String, Function]
    },
    suffixIcon: {
      type: Function
    },
    tag: {
      type: [String, Function]
    },
    tagProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array
    },
    valueDisplay: {
      type: [String, Function]
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onDragSort: Function,
    onEnter: Function,
    onFocus: Function,
    onInputChange: Function,
    onMouseenter: Function,
    onMouseleave: Function,
    onPaste: Function,
    onRemove: Function
  };

  function useTagScroll(props) {
    var tagInputRef = vue.ref();

    var _toRefs = vue.toRefs(props),
        excessTagsDisplayType = _toRefs.excessTagsDisplayType,
        readonly = _toRefs.readonly,
        disabled = _toRefs.disabled;

    var scrollDistance = vue.ref(0);
    var scrollElement = vue.ref();
    var mouseEnterTimer = vue.ref();

    var updateScrollElement = function updateScrollElement(element) {
      var inputElement = element.children[0];
      scrollElement.value = inputElement;
    };

    var updateScrollDistance = function updateScrollDistance() {
      scrollDistance.value = scrollElement.value.scrollWidth - scrollElement.value.clientWidth;
    };

    var scrollTo = function scrollTo(distance) {
      var _scrollElement$value;

      (_scrollElement$value = scrollElement.value) === null || _scrollElement$value === void 0 ? void 0 : _scrollElement$value.scroll({
        left: distance,
        behavior: "smooth"
      });
    };

    var scrollToRight = function scrollToRight() {
      updateScrollDistance();
      scrollTo(scrollDistance.value);
    };

    var scrollToLeft = function scrollToLeft() {
      scrollTo(0);
    };

    var onWheel = function onWheel(_ref) {
      var e = _ref.e;
      if (readonly.value || disabled.value) return;
      if (!scrollElement.value) return;

      if (e.deltaX > 0) {
        var distance = Math.min(scrollElement.value.scrollLeft + 120, scrollDistance.value);
        scrollTo(distance);
      } else {
        var _distance = Math.max(scrollElement.value.scrollLeft - 120, 0);

        scrollTo(_distance);
      }
    };

    var scrollToRightOnEnter = function scrollToRightOnEnter() {
      if (excessTagsDisplayType.value !== "scroll") return;
      mouseEnterTimer.value = setTimeout(function () {
        scrollToRight();
        clearTimeout(mouseEnterTimer.value);
      }, 100);
    };

    var scrollToLeftOnLeave = function scrollToLeftOnLeave() {
      if (excessTagsDisplayType.value !== "scroll") return;
      scrollTo(0);
      clearTimeout(mouseEnterTimer.value);
    };

    var init = function init() {
      var _tagInputRef$value;

      var element = (_tagInputRef$value = tagInputRef.value) === null || _tagInputRef$value === void 0 ? void 0 : _tagInputRef$value.$el;
      if (!element) return;
      updateScrollElement(element);
    };

    var clear = function clear() {
      clearTimeout(mouseEnterTimer.value);
    };

    vue.onMounted(init);
    vue.onUnmounted(clear);
    return {
      tagInputRef: tagInputRef,
      scrollElement: scrollElement,
      scrollDistance: scrollDistance,
      scrollTo: scrollTo,
      scrollToRight: scrollToRight,
      scrollToLeft: scrollToLeft,
      updateScrollElement: updateScrollElement,
      updateScrollDistance: updateScrollDistance,
      onWheel: onWheel,
      scrollToRightOnEnter: scrollToRightOnEnter,
      scrollToLeftOnLeave: scrollToLeftOnLeave
    };
  }

  function ownKeys$1l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1k(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1l(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useTagList(props) {
    var renderTNode = useTNodeJSX();
    var classPrefix = usePrefixClass();

    var _toRefs = vue.toRefs(props),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue,
        onRemove = _toRefs.onRemove,
        max = _toRefs.max,
        minCollapsedNum = _toRefs.minCollapsedNum,
        size = _toRefs.size,
        disabled = _toRefs.disabled,
        readonly = _toRefs.readonly,
        tagProps = _toRefs.tagProps;

    var _useVModel = useVModel(value, modelValue, props.defaultValue || [], props.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        tagValue = _useVModel2[0],
        setTagValue = _useVModel2[1];

    var oldInputValue = vue.ref();

    var _onClose = function onClose(p) {
      var _onRemove$value;

      var arr = _toConsumableArray(tagValue.value);

      arr.splice(p.index, 1);
      setTagValue(arr, _objectSpread$1k({
        trigger: "tag-remove"
      }, p));
      (_onRemove$value = onRemove.value) === null || _onRemove$value === void 0 ? void 0 : _onRemove$value.call(onRemove, _objectSpread$1k(_objectSpread$1k({}, p), {}, {
        trigger: "tag-remove",
        value: arr
      }));
    };

    var clearAll = function clearAll(context) {
      setTagValue([], {
        trigger: "clear",
        e: context.e
      });
    };

    var onInnerEnter = function onInnerEnter(value2, context) {
      var _tagValue$value, _props$onEnter;

      var valueStr = value2 ? String(value2).trim() : "";
      if (!valueStr) return;
      var isLimitExceeded = max && ((_tagValue$value = tagValue.value) === null || _tagValue$value === void 0 ? void 0 : _tagValue$value.length) >= max.value;
      var newValue = tagValue.value;

      if (!isLimitExceeded) {
        newValue = tagValue.value instanceof Array ? tagValue.value.concat(String(valueStr)) : [valueStr];
        setTagValue(newValue, {
          trigger: "enter",
          index: newValue.length - 1,
          item: valueStr,
          e: context.e
        });
      }

      props === null || props === void 0 ? void 0 : (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props, newValue, _objectSpread$1k(_objectSpread$1k({}, context), {}, {
        inputValue: value2
      }));
    };

    var onInputBackspaceKeyUp = function onInputBackspaceKeyUp(value2, context) {
      var e = context.e;
      if (!tagValue.value || !tagValue.value.length) return;

      if (!oldInputValue.value && ["Backspace", "NumpadDelete"].includes(e.code)) {
        var _onRemove$value2;

        var index = tagValue.value.length - 1;
        var item = tagValue.value[index];
        var trigger = "backspace";
        setTagValue(tagValue.value.slice(0, -1), {
          e: e,
          index: index,
          item: item,
          trigger: trigger
        });
        (_onRemove$value2 = onRemove.value) === null || _onRemove$value2 === void 0 ? void 0 : _onRemove$value2.call(onRemove, {
          e: e,
          index: index,
          item: item,
          trigger: trigger,
          value: tagValue.value
        });
      }

      oldInputValue.value = value2;
    };

    var renderLabel = function renderLabel(_ref) {
      var displayNode = _ref.displayNode,
          label = _ref.label;
      var newList = minCollapsedNum.value ? tagValue.value.slice(0, minCollapsedNum.value) : tagValue.value;
      var list = displayNode ? [displayNode] : newList === null || newList === void 0 ? void 0 : newList.map(function (item, index) {
        var tagContent = renderTNode("tag", {
          params: {
            value: item
          }
        });
        return vue.createVNode(Tag, vue.mergeProps({
          "key": "".concat(item).concat(index),
          "size": size.value,
          "disabled": disabled.value,
          "onClose": function onClose(context) {
            return _onClose({
              e: context.e,
              item: item,
              index: index
            });
          },
          "closable": !readonly.value && !disabled.value
        }, tagProps.value), {
          "default": function _default() {
            return [tagContent !== null && tagContent !== void 0 ? tagContent : item];
          }
        });
      });

      if (![null, void 0, ""].includes(label)) {
        list.unshift(vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-tag-input__prefix"),
          "key": "label"
        }, [label]));
      }

      if (newList.length !== tagValue.value.length) {
        var len = tagValue.value.length - newList.length;
        var more = renderTNode("collapsedItems", {
          params: {
            value: tagValue.value,
            count: tagValue.value.length,
            collapsedTags: tagValue.value.slice(minCollapsedNum.value, tagValue.value.length)
          }
        });
        list.push(more !== null && more !== void 0 ? more : vue.createVNode(Tag, {
          "key": "more"
        }, {
          "default": function _default() {
            return ["+", len];
          }
        }));
      }

      return list;
    };

    return {
      tagValue: tagValue,
      clearAll: clearAll,
      onClose: _onClose,
      onInnerEnter: onInnerEnter,
      onInputBackspaceKeyUp: onInputBackspaceKeyUp,
      renderLabel: renderLabel
    };
  }

  function useHover(props) {
    var disabled = props.disabled,
        readonly = props.readonly,
        onMouseenter = props.onMouseenter,
        onMouseleave = props.onMouseleave;
    var isHover = vue.ref(false);

    var addHover = function addHover(context) {
      if (readonly || disabled) return;
      isHover.value = true;
      onMouseenter === null || onMouseenter === void 0 ? void 0 : onMouseenter(context);
    };

    var cancelHover = function cancelHover(context) {
      if (readonly || disabled) return;
      isHover.value = false;
      onMouseleave === null || onMouseleave === void 0 ? void 0 : onMouseleave(context);
    };

    return {
      isHover: isHover,
      addHover: addHover,
      cancelHover: cancelHover
    };
  }

  function ownKeys$1k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1j(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1k(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var useComponentClassName$1 = function useComponentClassName() {
    return {
      NAME_CLASS: usePrefixClass("tag-input"),
      CLEAR_CLASS: usePrefixClass("tag-input__suffix-clear"),
      BREAK_LINE_CLASS: usePrefixClass("tag-input--break-line")
    };
  };

  var _TagInput = vue.defineComponent({
    name: "TTagInput",
    props: _objectSpread$1j({}, props$y),
    setup: function setup(props2) {
      var _useComponentClassNam = useComponentClassName$1(),
          NAME_CLASS = _useComponentClassNam.NAME_CLASS,
          CLEAR_CLASS = _useComponentClassNam.CLEAR_CLASS,
          BREAK_LINE_CLASS = _useComponentClassNam.BREAK_LINE_CLASS;

      var _toRefs = vue.toRefs(props2),
          inputValue = _toRefs.inputValue;

      var _useDefault = useDefaultValue(inputValue, props2.defaultInputValue, props2.onInputChange, "inputValue"),
          _useDefault2 = _slicedToArray(_useDefault, 2),
          tInputValue = _useDefault2[0],
          setTInputValue = _useDefault2[1];

      var _toRefs2 = vue.toRefs(props2),
          excessTagsDisplayType = _toRefs2.excessTagsDisplayType,
          readonly = _toRefs2.readonly,
          disabled = _toRefs2.disabled,
          clearable = _toRefs2.clearable,
          placeholder = _toRefs2.placeholder;

      var _useHover = useHover({
        readonly: props2.readonly,
        disabled: props2.disabled,
        onMouseenter: props2.onMouseenter,
        onMouseleave: props2.onMouseleave
      }),
          isHover = _useHover.isHover,
          addHover = _useHover.addHover,
          cancelHover = _useHover.cancelHover;

      var _useTagScroll = useTagScroll(props2),
          scrollToRight = _useTagScroll.scrollToRight,
          onWheel = _useTagScroll.onWheel,
          scrollToRightOnEnter = _useTagScroll.scrollToRightOnEnter,
          scrollToLeftOnLeave = _useTagScroll.scrollToLeftOnLeave,
          tagInputRef = _useTagScroll.tagInputRef;

      var _useTagList = useTagList(props2),
          tagValue = _useTagList.tagValue,
          onInnerEnter = _useTagList.onInnerEnter,
          onInputBackspaceKeyUp = _useTagList.onInputBackspaceKeyUp,
          clearAll = _useTagList.clearAll,
          renderLabel = _useTagList.renderLabel,
          onClose = _useTagList.onClose;

      var classes = vue.computed(function () {
        return [NAME_CLASS.value, _defineProperty$3({}, BREAK_LINE_CLASS.value, excessTagsDisplayType.value === "break-line")];
      });
      var tagInputPlaceholder = vue.computed(function () {
        var _tagValue$value;

        return !((_tagValue$value = tagValue.value) !== null && _tagValue$value !== void 0 && _tagValue$value.length) ? placeholder.value : "";
      });
      var showClearIcon = vue.computed(function () {
        var _tagValue$value2;

        return Boolean(!readonly.value && !disabled.value && clearable.value && isHover.value && (((_tagValue$value2 = tagValue.value) === null || _tagValue$value2 === void 0 ? void 0 : _tagValue$value2.length) || tInputValue.value));
      });

      var onInputEnter = function onInputEnter(value, context) {
        setTInputValue("", {
          e: context.e,
          trigger: "enter"
        });
        onInnerEnter(value, context);
        vue.nextTick(function () {
          scrollToRight();
        });
      };

      var onClick = function onClick() {
        tagInputRef.value.focus();
      };

      var onClearClick = function onClearClick(context) {
        var _props2$onClear;

        clearAll(context);
        setTInputValue("", {
          e: context.e,
          trigger: "clear"
        });
        (_props2$onClear = props2.onClear) === null || _props2$onClear === void 0 ? void 0 : _props2$onClear.call(props2, context);
      };

      return {
        CLEAR_CLASS: CLEAR_CLASS,
        tagValue: tagValue,
        tInputValue: tInputValue,
        isHover: isHover,
        tagInputPlaceholder: tagInputPlaceholder,
        showClearIcon: showClearIcon,
        tagInputRef: tagInputRef,
        setTInputValue: setTInputValue,
        addHover: addHover,
        cancelHover: cancelHover,
        onInputEnter: onInputEnter,
        onInnerEnter: onInnerEnter,
        onInputBackspaceKeyUp: onInputBackspaceKeyUp,
        renderLabel: renderLabel,
        onWheel: onWheel,
        scrollToRightOnEnter: scrollToRightOnEnter,
        scrollToLeftOnLeave: scrollToLeftOnLeave,
        onClick: onClick,
        onClearClick: onClearClick,
        onClose: onClose,
        classes: classes
      };
    },
    render: function render() {
      var _this = this;

      var suffixIconNode = this.showClearIcon ? vue.createVNode(closeCircleFilled, {
        "class": this.CLEAR_CLASS,
        "onClick": this.onClearClick
      }, null) : renderTNodeJSX(this, "suffixIcon");
      var displayNode = renderTNodeJSX(this, "valueDisplay", {
        params: {
          value: this.tagValue,
          onClose: function onClose(index, item) {
            return _this.onClose({
              index: index,
              item: item
            });
          }
        }
      });

      var _label = renderTNodeJSX(this, "label", {
        silent: true
      });

      return vue.createVNode(Input, vue.mergeProps({
        "ref": "tagInputRef",
        "readonly": this.readonly
      }, this.inputProps, {
        "value": this.tInputValue,
        "onWheel": this.onWheel,
        "autoWidth": this.autoWidth,
        "size": this.size,
        "disabled": this.disabled,
        "label": function label() {
          return _this.renderLabel({
            displayNode: displayNode,
            label: _label
          });
        },
        "class": this.classes,
        "tips": this.tips,
        "status": this.status,
        "placeholder": this.tagInputPlaceholder,
        "suffix": this.suffix,
        "suffixIcon": function suffixIcon() {
          return suffixIconNode;
        },
        "onChange": function onChange(val, context) {
          _this.setTInputValue(val, _objectSpread$1j(_objectSpread$1j({}, context), {}, {
            trigger: "input"
          }));
        },
        "onPaste": this.onPaste,
        "onEnter": this.onInputEnter,
        "onKeyup": this.onInputBackspaceKeyUp,
        "onMouseenter": function onMouseenter(context) {
          _this.addHover(context);

          _this.scrollToRightOnEnter();
        },
        "onMouseleave": function onMouseleave(context) {
          _this.cancelHover(context);

          _this.scrollToLeftOnLeave();
        },
        "onFocus": function onFocus(inputValue, context) {
          var _this$onFocus;

          (_this$onFocus = _this.onFocus) === null || _this$onFocus === void 0 ? void 0 : _this$onFocus.call(_this, _this.tagValue, {
            e: context.e,
            inputValue: inputValue
          });
        },
        "onBlur": function onBlur(inputValue, context) {
          var _this$onBlur;

          (_this$onBlur = _this.onBlur) === null || _this$onBlur === void 0 ? void 0 : _this$onBlur.call(_this, _this.tagValue, {
            e: context.e,
            inputValue: inputValue
          });
        },
        "onClick": this.onClick
      }), null);
    }
  });

  var TagInput = withInstall(_TagInput);

  function ownKeys$1j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1i(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1j(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var DEFAULT_KEYS = {
    label: "label",
    key: "key",
    children: "children"
  };
  function useMultiple(props, context) {
    var _toRefs = vue.toRefs(props),
        inputValue = _toRefs.inputValue;

    var classPrefix = usePrefixClass();
    var tagInputRef = vue.ref();

    var _useDefault = useDefaultValue(inputValue, props.defaultInputValue, props.onInputChange, "inputValue"),
        _useDefault2 = _slicedToArray(_useDefault, 2),
        tInputValue = _useDefault2[0],
        setTInputValue = _useDefault2[1];

    var iKeys = vue.computed(function () {
      return _objectSpread$1i(_objectSpread$1i({}, DEFAULT_KEYS), props.keys);
    });
    var tags = vue.computed(function () {
      if (!(props.value instanceof Array)) {
        return isObject_1(props.value) ? [props.value[iKeys.value.label]] : [props.value];
      }

      return props.value.map(function (item) {
        return isObject_1(item) ? item[iKeys.value.label] : item;
      });
    });
    var tPlaceholder = vue.computed(function () {
      return !tags.value || !tags.value.length ? props.placeholder : "";
    });

    var onTagInputChange = function onTagInputChange(val, context2) {
      var _props$onTagChange;

      if (context2.trigger === "tag-remove") {
        var _context2$e;

        (_context2$e = context2.e) === null || _context2$e === void 0 ? void 0 : _context2$e.stopPropagation();
      }

      (_props$onTagChange = props.onTagChange) === null || _props$onTagChange === void 0 ? void 0 : _props$onTagChange.call(props, val, context2);
    };

    var renderSelectMultiple = function renderSelectMultiple(p) {
      var tagInputProps = _objectSpread$1i(_objectSpread$1i(_objectSpread$1i({}, p.commonInputProps), props.tagInputProps), {}, {
        tagProps: props.tagProps,
        label: props.label,
        autoWidth: props.autoWidth,
        placeholder: tPlaceholder.value,
        minCollapsedNum: props.minCollapsedNum,
        collapsedItems: props.collapsedItems,
        tag: props.tag,
        value: tags.value,
        valueDisplay: props.valueDisplay,
        inputValue: tInputValue.value || "",
        inputProps: {
          readonly: !props.allowInput || props.readonly,
          inputClass: _defineProperty$3({}, "".concat(classPrefix.value, "-input--focused"), p.popupVisible)
        },
        suffixIcon: !props.disabled && props.loading ? function () {
          return vue.createVNode(Loading, {
            "loading": true,
            "size": "small"
          }, null);
        } : props.suffixIcon
      });

      return vue.createVNode(TagInput, vue.mergeProps({
        "ref": "tagInputRef"
      }, tagInputProps, {
        "onInputChange": function onInputChange(val, context2) {
          if ((context2 === null || context2 === void 0 ? void 0 : context2.trigger) === "enter") return;
          setTInputValue(val, {
            trigger: context2.trigger,
            e: context2.e
          });
        },
        "onChange": onTagInputChange,
        "onClear": p.onInnerClear,
        "onBlur": function onBlur(val, context2) {
          var _props$onBlur;

          (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, props.value, _objectSpread$1i(_objectSpread$1i({}, context2), {}, {
            tagInputValue: val
          }));
        },
        "onFocus": function onFocus(val, context2) {
          var _props$onFocus;

          (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, props.value, _objectSpread$1i(_objectSpread$1i({}, context2), {}, {
            tagInputValue: val
          }));
        }
      }), context.slots);
    };

    return {
      tags: tags,
      tPlaceholder: tPlaceholder,
      tagInputRef: tagInputRef,
      renderSelectMultiple: renderSelectMultiple
    };
  }

  function ownKeys$1i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1h(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1i(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var MAX_POPUP_WIDTH = 1e3;
  function useOverlayStyle(props) {
    var _toRefs = vue.toRefs(props),
        popupProps = _toRefs.popupProps,
        autoWidth = _toRefs.autoWidth;

    var innerPopupVisible = vue.ref(false);

    var macthWidthFunc = function macthWidthFunc(triggerElement, popupElement) {
      var SCROLLBAR_WIDTH = popupElement.scrollHeight > popupElement.offsetHeight ? 8 : 0;
      var width = popupElement.offsetWidth + SCROLLBAR_WIDTH >= triggerElement.offsetWidth ? popupElement.offsetWidth : triggerElement.offsetWidth;
      var otherOverlayStyle = {};

      if (popupProps.value && _typeof$2(popupProps.value.overlayStyle) === "object" && !popupProps.value.overlayStyle.width) {
        otherOverlayStyle = popupProps.value.overlayStyle;
      }

      return _objectSpread$1h({
        width: "".concat(Math.min(width, MAX_POPUP_WIDTH), "px")
      }, otherOverlayStyle);
    };

    var onInnerPopupVisibleChange = function onInnerPopupVisibleChange(visible, context) {
      var _props$onPopupVisible;

      if (props.disabled || props.readonly) return;
      var newVisible = context.trigger === "trigger-element-click" ? true : visible;
      innerPopupVisible.value = newVisible;
      (_props$onPopupVisible = props.onPopupVisibleChange) === null || _props$onPopupVisible === void 0 ? void 0 : _props$onPopupVisible.call(props, newVisible, context);
    };

    var tOverlayStyle = vue.computed(function () {
      var _popupProps$value;

      var result = {};
      var overlayStyle = ((_popupProps$value = popupProps.value) === null || _popupProps$value === void 0 ? void 0 : _popupProps$value.overlayStyle) || {};

      if (isFunction_1(overlayStyle) || isObject_1(overlayStyle) && overlayStyle.width) {
        result = overlayStyle;
      } else if (!autoWidth.value) {
        result = macthWidthFunc;
      }

      return result;
    });
    return {
      tOverlayStyle: tOverlayStyle,
      innerPopupVisible: innerPopupVisible,
      onInnerPopupVisibleChange: onInnerPopupVisibleChange
    };
  }

  function ownKeys$1h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1h(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var useComponentClassName = function useComponentClassName() {
    return {
      NAME_CLASS: usePrefixClass("select-input"),
      BASE_CLASS_BORDERLESS: usePrefixClass("select-input--borderless"),
      BASE_CLASS_MULTIPLE: usePrefixClass("select-input--multiple"),
      BASE_CLASS_POPUP_VISIBLE: usePrefixClass("select-input--popup-visible"),
      BASE_CLASS_EMPTY: usePrefixClass("select-input--empty")
    };
  };

  var _SelectInput = vue.defineComponent({
    name: "TSelectInput",
    props: _objectSpread$1g({}, props$z),
    setup: function setup(props2, context) {
      var _useComponentClassNam = useComponentClassName(),
          NAME_CLASS = _useComponentClassNam.NAME_CLASS,
          BASE_CLASS_BORDERLESS = _useComponentClassNam.BASE_CLASS_BORDERLESS,
          BASE_CLASS_MULTIPLE = _useComponentClassNam.BASE_CLASS_MULTIPLE,
          BASE_CLASS_POPUP_VISIBLE = _useComponentClassNam.BASE_CLASS_POPUP_VISIBLE,
          BASE_CLASS_EMPTY = _useComponentClassNam.BASE_CLASS_EMPTY;

      var classPrefix = usePrefixClass();
      var selectInputRef = vue.ref();
      var selectInputWrapRef = vue.ref();

      var _toRefs = vue.toRefs(props2),
          multiple = _toRefs.multiple,
          value = _toRefs.value,
          popupVisible = _toRefs.popupVisible,
          borderless = _toRefs.borderless;

      var _useSingle = useSingle(props2, context),
          commonInputProps = _useSingle.commonInputProps,
          onInnerClear = _useSingle.onInnerClear,
          renderSelectSingle = _useSingle.renderSelectSingle;

      var _useMultiple = useMultiple(props2, context),
          renderSelectMultiple = _useMultiple.renderSelectMultiple;

      var _useOverlayStyle = useOverlayStyle(props2),
          tOverlayStyle = _useOverlayStyle.tOverlayStyle,
          innerPopupVisible = _useOverlayStyle.innerPopupVisible,
          onInnerPopupVisibleChange = _useOverlayStyle.onInnerPopupVisibleChange;

      var popupClasses = vue.computed(function () {
        var _popupVisible$value, _ref;

        return [NAME_CLASS.value, (_ref = {}, _defineProperty$3(_ref, BASE_CLASS_BORDERLESS.value, borderless.value), _defineProperty$3(_ref, BASE_CLASS_MULTIPLE.value, multiple.value), _defineProperty$3(_ref, BASE_CLASS_POPUP_VISIBLE.value, (_popupVisible$value = popupVisible.value) !== null && _popupVisible$value !== void 0 ? _popupVisible$value : innerPopupVisible.value), _defineProperty$3(_ref, BASE_CLASS_EMPTY.value, value.value instanceof Array ? !value.value.length : !value.value), _ref)];
      });
      return {
        classPrefix: classPrefix,
        NAME_CLASS: NAME_CLASS,
        selectInputWrapRef: selectInputWrapRef,
        innerPopupVisible: innerPopupVisible,
        commonInputProps: commonInputProps,
        tOverlayStyle: tOverlayStyle,
        selectInputRef: selectInputRef,
        popupClasses: popupClasses,
        onInnerClear: onInnerClear,
        renderSelectSingle: renderSelectSingle,
        renderSelectMultiple: renderSelectMultiple,
        onInnerPopupVisibleChange: onInnerPopupVisibleChange
      };
    },
    render: function render() {
      var _this$popupVisible,
          _this$popupProps,
          _this = this;

      var visibleProps = {
        visible: (_this$popupVisible = this.popupVisible) !== null && _this$popupVisible !== void 0 ? _this$popupVisible : this.innerPopupVisible
      };

      var mainContent = vue.createVNode(Popup, vue.mergeProps({
        "ref": "selectInputRef",
        "class": this.popupClasses,
        "trigger": ((_this$popupProps = this.popupProps) === null || _this$popupProps === void 0 ? void 0 : _this$popupProps.trigger) || "click",
        "placement": "bottom-left"
      }, visibleProps, {
        "content": this.panel,
        "hideEmptyPopup": true,
        "onVisibleChange": this.onInnerPopupVisibleChange
      }, this.popupProps, {
        "overlayStyle": this.tOverlayStyle
      }), _objectSpread$1g({
        "default": function _default() {
          return [_this.multiple ? _this.renderSelectMultiple({
            commonInputProps: _this.commonInputProps,
            onInnerClear: _this.onInnerClear,
            popupVisible: visibleProps.visible
          }) : _this.renderSelectSingle(visibleProps.visible)];
        }
      }, _objectSpread$1g(_objectSpread$1g({}, this.$slots), {}, {
        content: this.$slots.panel
      })));

      if (!this.tips) return mainContent;
      return vue.createVNode("div", {
        "ref": "selectInputWrapRef",
        "class": "".concat(this.NAME_CLASS, "__wrap")
      }, [mainContent, vue.createVNode("div", {
        "class": "".concat(this.classPrefix, "-input__tips ").concat(this.classPrefix, "-input__tips--").concat(this.status || "normal")
      }, [this.tips])]);
    }
  });

  var SelectInput = withInstall(_SelectInput);

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */

  function arraySome$1(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }

    return false;
  }

  var _arraySome = arraySome$1;

  var SetCache$1 = _SetCache,
      arraySome = _arraySome,
      cacheHas$1 = _cacheHas;
  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$5 = 1,
      COMPARE_UNORDERED_FLAG$3 = 2;
  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */

  function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    } // Check that cyclic values are equal.


    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);

    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }

    var index = -1,
        result = true,
        seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache$1() : undefined;
    stack.set(array, other);
    stack.set(other, array); // Ignore non-index properties.

    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }

      if (compared !== undefined) {
        if (compared) {
          continue;
        }

        result = false;
        break;
      } // Recursively compare arrays (susceptible to call stack limits).


      if (seen) {
        if (!arraySome(other, function (othValue, othIndex) {
          if (!cacheHas$1(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }

    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  var _equalArrays = equalArrays$2;

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */

  function mapToArray$1(map) {
    var index = -1,
        result = Array(map.size);
    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  var _mapToArray = mapToArray$1;

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */

  function setToArray$1(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  var _setToArray = setToArray$1;

  var _Symbol = _Symbol$6,
      Uint8Array = _Uint8Array,
      eq$1 = eq_1,
      equalArrays$1 = _equalArrays,
      mapToArray = _mapToArray,
      setToArray = _setToArray;
  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$4 = 1,
      COMPARE_UNORDERED_FLAG$2 = 2;
  /** `Object#toString` result references. */

  var boolTag$1 = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag$1 = '[object Error]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]';
  /** Used to convert symbols to primitives and strings. */

  var symbolProto = _Symbol ? _Symbol.prototype : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */

  function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }

        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
          return false;
        }

        return true;

      case boolTag$1:
      case dateTag:
      case numberTag:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq$1(+object, +other);

      case errorTag$1:
        return object.name == other.name && object.message == other.message;

      case regexpTag:
      case stringTag:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == other + '';

      case mapTag:
        var convert = mapToArray;

      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        } // Assume cyclic values are equal.


        var stacked = stack.get(object);

        if (stacked) {
          return stacked == other;
        }

        bitmask |= COMPARE_UNORDERED_FLAG$2; // Recursively compare objects (susceptible to call stack limits).

        stack.set(object, other);
        var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }

    }

    return false;
  }

  var _equalByTag = equalByTag$1;

  var getAllKeys = _getAllKeys;
  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$3 = 1;
  /** Used for built-in method references. */

  var objectProto$3 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$4 = objectProto$3.hasOwnProperty;
  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */

  function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
        objProps = getAllKeys(object),
        objLength = objProps.length,
        othProps = getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }

    var index = objLength;

    while (index--) {
      var key = objProps[index];

      if (!(isPartial ? key in other : hasOwnProperty$4.call(other, key))) {
        return false;
      }
    } // Check that cyclic values are equal.


    var objStacked = stack.get(object);
    var othStacked = stack.get(other);

    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }

    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;

    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      } // Recursively compare objects (susceptible to call stack limits).


      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }

      skipCtor || (skipCtor = key == 'constructor');
    }

    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.

      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }

    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  var _equalObjects = equalObjects$1;

  var Stack$1 = _Stack,
      equalArrays = _equalArrays,
      equalByTag = _equalByTag,
      equalObjects = _equalObjects,
      getTag = _getTag,
      isArray$1 = isArray_1,
      isBuffer = isBuffer$5.exports,
      isTypedArray = isTypedArray_1;
  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$2 = 1;
  /** `Object#toString` result references. */

  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      objectTag = '[object Object]';
  /** Used for built-in method references. */

  var objectProto$2 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$3 = objectProto$2.hasOwnProperty;
  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */

  function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray$1(object),
        othIsArr = isArray$1(other),
        objTag = objIsArr ? arrayTag : getTag(object),
        othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag,
        othIsObj = othTag == objectTag,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer(object)) {
      if (!isBuffer(other)) {
        return false;
      }

      objIsArr = true;
      objIsObj = false;
    }

    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack$1());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }

    if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
      var objIsWrapped = objIsObj && hasOwnProperty$3.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty$3.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack$1());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }

    if (!isSameTag) {
      return false;
    }

    stack || (stack = new Stack$1());
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  var _baseIsEqualDeep = baseIsEqualDeep$1;

  var baseIsEqualDeep = _baseIsEqualDeep,
      isObjectLike$2 = isObjectLike_1;
  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */

  function baseIsEqual$3(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }

    if (value == null || other == null || !isObjectLike$2(value) && !isObjectLike$2(other)) {
      return value !== value && other !== other;
    }

    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual$3, stack);
  }

  var _baseIsEqual = baseIsEqual$3;

  var baseIsEqual$2 = _baseIsEqual;
  /**
   * Performs a deep comparison between two values to determine if they are
   * equivalent.
   *
   * **Note:** This method supports comparing arrays, array buffers, booleans,
   * date objects, error objects, maps, numbers, `Object` objects, regexes,
   * sets, strings, symbols, and typed arrays. `Object` objects are compared
   * by their own, not inherited, enumerable properties. Functions and DOM
   * nodes are compared by strict equality, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.isEqual(object, other);
   * // => true
   *
   * object === other;
   * // => false
   */

  function isEqual(value, other) {
    return baseIsEqual$2(value, other);
  }

  var isEqual_1 = isEqual;

  var SetCache = _SetCache,
      arrayIncludes = _arrayIncludes,
      arrayIncludesWith = _arrayIncludesWith,
      arrayMap$2 = _arrayMap,
      baseUnary = _baseUnary,
      cacheHas = _cacheHas;
  /** Used as the size to enable large array optimizations. */

  var LARGE_ARRAY_SIZE = 200;
  /**
   * The base implementation of methods like `_.difference` without support
   * for excluding multiple arrays or iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Array} values The values to exclude.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of filtered values.
   */

  function baseDifference$2(array, values, iteratee, comparator) {
    var index = -1,
        includes = arrayIncludes,
        isCommon = true,
        length = array.length,
        result = [],
        valuesLength = values.length;

    if (!length) {
      return result;
    }

    if (iteratee) {
      values = arrayMap$2(values, baseUnary(iteratee));
    }

    if (comparator) {
      includes = arrayIncludesWith;
      isCommon = false;
    } else if (values.length >= LARGE_ARRAY_SIZE) {
      includes = cacheHas;
      isCommon = false;
      values = new SetCache(values);
    }

    outer: while (++index < length) {
      var value = array[index],
          computed = iteratee == null ? value : iteratee(value);
      value = comparator || value !== 0 ? value : 0;

      if (isCommon && computed === computed) {
        var valuesIndex = valuesLength;

        while (valuesIndex--) {
          if (values[valuesIndex] === computed) {
            continue outer;
          }
        }

        result.push(value);
      } else if (!includes(values, computed, comparator)) {
        result.push(value);
      }
    }

    return result;
  }

  var _baseDifference = baseDifference$2;

  var baseDifference$1 = _baseDifference,
      baseFlatten = _baseFlatten,
      baseRest$2 = _baseRest,
      isArrayLikeObject$1 = isArrayLikeObject_1;
  /**
   * Creates an array of `array` values not included in the other given arrays
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons. The order and references of result values are
   * determined by the first array.
   *
   * **Note:** Unlike `_.pullAll`, this method returns a new array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {...Array} [values] The values to exclude.
   * @returns {Array} Returns the new array of filtered values.
   * @see _.without, _.xor
   * @example
   *
   * _.difference([2, 1], [2, 3]);
   * // => [1]
   */

  var difference = baseRest$2(function (array, values) {
    return isArrayLikeObject$1(array) ? baseDifference$1(array, baseFlatten(values, 1, isArrayLikeObject$1, true)) : [];
  });
  var difference_1 = difference;

  var toString$2 = toString_1;
  /** Used to generate unique IDs. */

  var idCounter = 0;
  /**
   * Generates a unique ID. If `prefix` is given, the ID is appended to it.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {string} [prefix=''] The value to prefix the ID with.
   * @returns {string} Returns the unique ID.
   * @example
   *
   * _.uniqueId('contact_');
   * // => 'contact_104'
   *
   * _.uniqueId();
   * // => '105'
   */

  function uniqueId(prefix) {
    var id = ++idCounter;
    return toString$2(prefix) + id;
  }

  var uniqueId_1 = uniqueId;

  function ownKeys$1g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1f(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1g(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function getExposedProps(node) {
    var props = pick_1(node, ["value", "label", "data", "actived", "expanded", "checked", "indeterminate", "loading"]);
    return props;
  }

  function createNodeModel(node) {
    var props = getExposedProps(node);

    var model = _objectSpread$1f(_objectSpread$1f({}, props), {}, {
      getLevel: function getLevel() {
        return node.getLevel();
      },
      getIndex: function getIndex() {
        return node.getIndex();
      },
      isFirst: function isFirst() {
        return node.isFirst();
      },
      isLast: function isLast() {
        return node.isLast();
      },
      isLeaf: function isLeaf() {
        return node.isLeaf();
      },
      insertBefore: function insertBefore(newData) {
        return node.insertBefore(newData);
      },
      insertAfter: function insertAfter(newData) {
        return node.insertAfter(newData);
      },
      appendData: function appendData(data) {
        return node.append(data);
      },
      getPath: function getPath() {
        var nodes = node.getPath();
        return nodes.map(function (item) {
          return item.getModel();
        });
      },
      getParent: function getParent() {
        var _node$parent;

        return (_node$parent = node.parent) === null || _node$parent === void 0 ? void 0 : _node$parent.getModel();
      },
      getParents: function getParents() {
        var nodes = node.getParents();
        return nodes.map(function (item) {
          return item.getModel();
        });
      },
      getRoot: function getRoot() {
        var root = node.getRoot();
        return root === null || root === void 0 ? void 0 : root.getModel();
      },
      getSiblings: function getSiblings() {
        var nodes = node.getSiblings();
        return nodes.map(function (item) {
          return item.getModel();
        });
      },
      getChildren: function getChildren(deep) {
        var childrenModel = false;
        var children = node.children;

        if (Array.isArray(children)) {
          if (children.length > 0) {
            if (deep) {
              var nodes = node.walk();
              nodes.shift();
              childrenModel = nodes.map(function (item) {
                return item.getModel();
              });
            } else {
              childrenModel = children.map(function (item) {
                return item.getModel();
              });
            }
          } else {
            childrenModel = false;
          }
        } else if (typeof children === "boolean") {
          childrenModel = children;
        }

        return childrenModel;
      },
      remove: function remove(value) {
        if (!value) {
          node.remove();
          return;
        }

        var tree = node.tree;
        var targetNode = tree.getNode(value);

        if (!targetNode) {
          log.warnOnce("Tree", "`".concat(value, "` is not exist"));
          return;
        }

        var parents = targetNode.getParents();
        var parentValues = parents.map(function (pnode) {
          return pnode.value;
        });

        if (parentValues.indexOf(node.value) < 0) {
          log.warnOnce("Tree", "`".concat(value, "` is not a childNode of current node"));
          return;
        }

        targetNode.remove();
      },
      setData: function setData(data) {
        Object.assign(node.data, data);
      }
    });

    return model;
  }
  function updateNodeModel(model, node) {
    var props = getExposedProps(node);
    Object.assign(model, props);
  }

  function ownKeys$1f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1e(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1f(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
  var defaultStatus = {
    expandMutex: false,
    activable: false,
    checkable: false,
    disabled: false,
    draggable: false,
    loading: false
  };
  var TreeNode = /*#__PURE__*/function () {
    function TreeNode(tree, data, parent) {
      _classCallCheck(this, TreeNode);

      _defineProperty$3(this, "tree", void 0);

      _defineProperty$3(this, "value", void 0);

      _defineProperty$3(this, "label", void 0);

      _defineProperty$3(this, "data", void 0);

      _defineProperty$3(this, "parent", void 0);

      _defineProperty$3(this, "children", void 0);

      _defineProperty$3(this, "model", void 0);

      _defineProperty$3(this, "vmIsLeaf", void 0);

      _defineProperty$3(this, "vmIsFirst", void 0);

      _defineProperty$3(this, "vmIsLast", void 0);

      _defineProperty$3(this, "vmIsRest", void 0);

      _defineProperty$3(this, "vmIsLocked", void 0);

      _defineProperty$3(this, "expanded", void 0);

      _defineProperty$3(this, "expandMutex", void 0);

      _defineProperty$3(this, "actived", void 0);

      _defineProperty$3(this, "activable", void 0);

      _defineProperty$3(this, "checkable", void 0);

      _defineProperty$3(this, "vmCheckable", void 0);

      _defineProperty$3(this, "checked", void 0);

      _defineProperty$3(this, "indeterminate", void 0);

      _defineProperty$3(this, "disabled", void 0);

      _defineProperty$3(this, "draggable", void 0);

      _defineProperty$3(this, "visible", void 0);

      _defineProperty$3(this, "level", void 0);

      _defineProperty$3(this, "loading", void 0);

      this.data = data;
      this.tree = tree;
      var config = tree.config || {};
      var prefix = config.prefix || "t";
      var keys = get_1(tree, "config.keys") || {};
      var propChildren = keys.children || "children";
      var propLabel = keys.label || "label";
      var propValue = keys.value || "value";
      this.model = null;
      this.children = null;
      this.vmCheckable = false;
      this.vmIsLeaf = false;
      this.vmIsFirst = false;
      this.vmIsLast = false;
      this.vmIsRest = true;
      this.vmIsLocked = false;

      var spec = _objectSpread$1e(_objectSpread$1e({}, defaultStatus), {}, {
        actived: false,
        expanded: false,
        checked: false
      }, data);

      var children = spec[propChildren];
      this.set(spec);
      this.label = spec[propLabel] || "";
      this.value = spec[propValue] || uniqueId_1(prefix);
      this.tree.nodeMap.set(this.value, this);

      if (parent && parent instanceof TreeNode) {
        this.parent = parent;
      } else {
        this.parent = null;
      }

      if (children === true) {
        this.children = children;
      }

      this.level = 0;
      this.visible = true;
      this.actived = spec.actived;
      this.initActived();
      this.expanded = spec.expanded;
      this.initExpanded();
      this.checked = spec.checked;
      this.initChecked();
      this.update();
      tree.reflow(this);

      if (Array.isArray(children)) {
        this.append(children);
      } else if (children === true && !config.lazy) {
        this.loadChildren();
      }

      this.checked = false;
      this.indeterminate = false;
      this.updateChecked();
    }

    _createClass(TreeNode, [{
      key: "initChecked",
      value: function initChecked() {
        var tree = this.tree,
            value = this.value,
            parent = this.parent;
        var checkStrictly = tree.config.checkStrictly;
        var checked = this.checked;
        checked = parent === null || parent === void 0 ? void 0 : parent.isChecked();

        if (checked && !checkStrictly) {
          tree.checkedMap.set(value, true);
        }

        this.checked = checked;
      }
    }, {
      key: "initExpanded",
      value: function initExpanded() {
        var tree = this.tree;
        var expanded = this.expanded;
        var config = tree.config;

        if (typeof config.expandLevel === "number" && this.getLevel() < config.expandLevel) {
          tree.expandedMap.set(this.value, true);
          expanded = true;
        }

        if (config.expandAll) {
          expanded = true;
        }

        if (this.children === true && config.lazy) {
          expanded = false;
        }

        if (expanded) {
          tree.expandedMap.set(this.value, true);
        } else {
          tree.expandedMap["delete"](this.value);
        }

        this.expanded = expanded;
      }
    }, {
      key: "initActived",
      value: function initActived() {
        var tree = this.tree,
            actived = this.actived;

        if (actived) {
          tree.activedMap.set(this.value, true);
        }
      }
    }, {
      key: "append",
      value: function append(data) {
        var _this = this;

        var list = [];

        if (!Array.isArray(data)) {
          list.push(data);
        } else {
          list.push.apply(list, _toConsumableArray(data));
        }

        if (list.length <= 0) {
          return;
        }

        if (!Array.isArray(this.children)) {
          this.children = [];
        }

        var children = this.children,
            tree = this.tree;
        list.forEach(function (item) {
          var node = null;

          if (item instanceof TreeNode) {
            node = item;
            node.appendTo(_this.tree, _this);
          } else {
            node = new TreeNode(_this.tree, item, _this);
            children.push(node);
          }
        });
        tree.reflow(this);
        this.updateRelated();
      }
    }, {
      key: "appendTo",
      value: function appendTo(tree, parent, index) {
        var _this2 = this;

        var parentNode = parent;
        if (!parentNode) return;
        var targetParents = parentNode.getParents();
        var includeCurrent = targetParents.some(function (node) {
          return node.value === _this2.value;
        });

        if (includeCurrent) {
          return;
        }

        if (Array.isArray(parentNode.children)) {
          var targetIndex = 0;

          if (typeof index === "number") {
            targetIndex = index;
          }

          var targetPosNode = parentNode.children[targetIndex];

          if (targetPosNode.value === this.value) {
            return;
          }
        }

        this.remove();
        this.parent = parentNode;
        var siblings = null;

        if (parentNode instanceof TreeNode) {
          if (!Array.isArray(parentNode.children)) {
            parentNode.children = [];
          }

          siblings = parent.children;
        } else {
          siblings = tree.children;
        }

        if (Array.isArray(siblings)) {
          if (typeof index === "number") {
            siblings.splice(index, 0, this);
          } else {
            siblings.push(this);
          }
        }

        var nodes = this.walk();
        nodes.forEach(function (item) {
          var node = item;
          node.tree = tree;
          tree.nodeMap.set(node.value, node);

          if (node.expanded) {
            tree.expandedMap.set(node.value, true);
          }
        });
        var updateNodes = parentNode.walk();
        updateNodes.forEach(function (node) {
          node.update();
          node.updateChecked();
        });
        tree.reflow();
      }
    }, {
      key: "insert",
      value: function insert(item, index) {
        var tree = this.tree,
            parent = this.parent;
        var siblings = this.getSiblings();
        var node = null;

        if (item instanceof TreeNode) {
          node = item;
          node.appendTo(tree, parent, index);
        } else if (item) {
          node = new TreeNode(tree, item, parent);

          if (typeof index === "number") {
            siblings.splice(index, 0, node);
          }

          siblings.forEach(function (sibling) {
            sibling.update();
          });
        }

        tree.reflow();
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(newData) {
        var index = this.getIndex();
        this.insert(newData, index);
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(newData) {
        var index = this.getIndex();
        this.insert(newData, index + 1);
      }
    }, {
      key: "remove",
      value: function remove() {
        var tree = this.tree;
        var nodes = this.walk();
        var siblings = this.getSiblings();
        var index = this.getIndex();

        if (Array.isArray(siblings)) {
          siblings.splice(index, 1);
        }

        nodes.forEach(function (node) {
          node.clean();
        });
        siblings.forEach(function (node) {
          node.update();
        });
        this.updateParents();
        tree.reflow();
      }
    }, {
      key: "clean",
      value: function clean() {
        var tree = this.tree,
            value = this.value;
        tree.activedMap["delete"](value);
        tree.checkedMap["delete"](value);
        tree.expandedMap["delete"](value);
        tree.nodeMap["delete"](value);
      }
    }, {
      key: "loadChildren",
      value: function () {
        var _loadChildren = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var config, list;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  config = get_1(this, "tree.config") || {};

                  if (!(this.children === true && !this.loading)) {
                    _context.next = 13;
                    break;
                  }

                  if (!(typeof config.load === "function")) {
                    _context.next = 13;
                    break;
                  }

                  this.loading = true;
                  this.update();
                  list = [];
                  _context.next = 8;
                  return config.load(this);

                case 8:
                  list = _context.sent;
                  this.tree.emit("load", {
                    node: this,
                    data: list
                  });
                  this.loading = false;

                  if (Array.isArray(list) && list.length > 0) {
                    this.append(list);
                  } else {
                    this.children = false;
                  }

                  this.update();

                case 13:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function loadChildren() {
          return _loadChildren.apply(this, arguments);
        }

        return loadChildren;
      }()
    }, {
      key: "set",
      value: function set(item) {
        var _this3 = this;

        var tree = this.tree;
        var keys = Object.keys(item);
        keys.forEach(function (key) {
          if (hasOwnProperty$2.call(defaultStatus, key) || key === "label") {
            _this3[key] = item[key];
          }
        });
        tree.updated(this);
      }
    }, {
      key: "getParent",
      value: function getParent() {
        return this.parent;
      }
    }, {
      key: "getParents",
      value: function getParents() {
        var parents = [];
        var node = this.parent;

        while (node) {
          parents.push(node);
          node = node.parent;
        }

        return parents;
      }
    }, {
      key: "getSiblings",
      value: function getSiblings() {
        var parent = this.parent,
            tree = this.tree;
        var list = [];

        if (parent) {
          if (Array.isArray(parent.children)) {
            list = parent.children;
          }
        } else if (tree) {
          list = tree.children;
        }

        return list;
      }
    }, {
      key: "getRoot",
      value: function getRoot() {
        var parents = this.getParents();
        return parents[parents.length - 1] || null;
      }
    }, {
      key: "getIndex",
      value: function getIndex() {
        var list = this.getSiblings();
        return list.indexOf(this);
      }
    }, {
      key: "getPath",
      value: function getPath() {
        var nodes = this.getParents();
        nodes.unshift(this);
        return nodes.reverse();
      }
    }, {
      key: "getLevel",
      value: function getLevel() {
        var parents = this.getParents();
        return parents.length;
      }
    }, {
      key: "isRest",
      value: function isRest() {
        var _this$tree = this.tree,
            config = _this$tree.config,
            filterMap = _this$tree.filterMap;
        var rest = true;

        if (typeof config.filter === "function") {
          var nodeModel = this.getModel();
          rest = config.filter(nodeModel);
        }

        if (rest) {
          filterMap.set(this.value, true);
        } else if (filterMap.get(this.value)) {
          filterMap["delete"](this.value);
        }

        return rest;
      }
    }, {
      key: "isVisible",
      value: function isVisible() {
        var nodeMap = this.tree.nodeMap;
        var visible = true;

        if (this.vmIsLocked) {
          return true;
        }

        if (nodeMap.get(this.value)) {
          var filterVisible = this.isRest();
          var expandVisible = true;
          var parents = this.getParents();

          if (parents.length > 0) {
            expandVisible = parents.every(function (node) {
              return node.isExpanded();
            });
          }

          visible = expandVisible && filterVisible;
        } else {
          visible = false;
        }

        return visible;
      }
    }, {
      key: "isDisabled",
      value: function isDisabled() {
        if (this.vmIsLocked) return true;
        var treeDisabled = get_1(this, "tree.config.disabled");
        return !!(treeDisabled || this.disabled);
      }
    }, {
      key: "isExpandMutex",
      value: function isExpandMutex() {
        return !!(get_1(this, "tree.config.expandMutex") || this.expandMutex);
      }
    }, {
      key: "isActivable",
      value: function isActivable() {
        return !!(get_1(this, "tree.config.activable") || this.activable);
      }
    }, {
      key: "isCheckable",
      value: function isCheckable() {
        return !!(get_1(this, "tree.config.checkable") || this.checkable);
      }
    }, {
      key: "isActived",
      value: function isActived(map) {
        var tree = this.tree,
            value = this.value;
        var activedMap = map || tree.activedMap;
        return !!(tree.nodeMap.get(value) && activedMap.get(value));
      }
    }, {
      key: "isExpanded",
      value: function isExpanded(map) {
        var tree = this.tree,
            value = this.value,
            vmIsLocked = this.vmIsLocked;
        if (vmIsLocked) return true;
        var expandedMap = map || tree.expandedMap;
        return !!(tree.nodeMap.get(value) && expandedMap.get(value));
      }
    }, {
      key: "isChecked",
      value: function isChecked(map) {
        var children = this.children,
            tree = this.tree;
        var checkStrictly = tree.config.checkStrictly;
        var checked = false;
        var checkedMap = map || tree.checkedMap;

        if (tree.nodeMap.get(this.value)) {
          if (checkedMap.get(this.value)) {
            checked = true;
          } else if (Array.isArray(children) && children.length > 0 && !checkStrictly) {
            checked = children.every(function (node) {
              var childIsChecked = node.isChecked(checkedMap);
              return childIsChecked;
            });
          } else if (!checkStrictly) {
            var parents = this.getParents();
            checked = parents.some(function (node) {
              return checkedMap.get(node.value);
            });
          }
        }

        return !!checked;
      }
    }, {
      key: "isIndeterminate",
      value: function isIndeterminate() {
        var children = this.children,
            tree = this.tree;
        var checkStrictly = tree.config.checkStrictly;

        if (checkStrictly) {
          return false;
        }

        var indeterminate = false;

        if (Array.isArray(children)) {
          var childChecked = null;
          indeterminate = children.some(function (node) {
            if (node.isIndeterminate()) {
              return true;
            }

            if (childChecked === null) {
              childChecked = node.isChecked();
            }

            if (childChecked !== node.isChecked()) {
              return true;
            }

            return false;
          });
        }

        return indeterminate;
      }
    }, {
      key: "isFirst",
      value: function isFirst() {
        var siblings = this.getSiblings();
        return siblings[0] === this;
      }
    }, {
      key: "isLast",
      value: function isLast() {
        var siblings = this.getSiblings();
        return siblings[siblings.length - 1] === this;
      }
    }, {
      key: "isLeaf",
      value: function isLeaf() {
        var isLeaf = false;

        if (Array.isArray(this.children)) {
          isLeaf = this.children.length <= 0;
        } else {
          isLeaf = !this.children;
        }

        return isLeaf;
      }
    }, {
      key: "lock",
      value: function lock(lockState) {
        this.vmIsLocked = lockState;
        this.expanded = this.isExpanded();
        this.visible = this.isVisible();
      }
    }, {
      key: "afterExpanded",
      value: function afterExpanded() {
        this.update();

        if (this.expanded && this.children === true) {
          this.loadChildren();
        }
      }
    }, {
      key: "toggleExpanded",
      value: function toggleExpanded() {
        return this.setExpanded(!this.isExpanded());
      }
    }, {
      key: "setExpanded",
      value: function setExpanded(expanded, opts) {
        var tree = this.tree;

        var options = _objectSpread$1e({
          directly: false
        }, opts);

        var map = tree.expandedMap;

        if (!options.directly) {
          map = new Map(tree.expandedMap);
        }

        if (expanded) {
          var shouldExpandNodes = [];
          shouldExpandNodes.push(this);

          if (get_1(tree, "config.expandParent")) {
            this.getParents().forEach(function (node) {
              shouldExpandNodes.push(node);
            });
          }

          shouldExpandNodes.forEach(function (node) {
            var isExpandMutex = false;

            if (node.parent) {
              isExpandMutex = node.parent.isExpandMutex();
            } else {
              var _tree$config;

              isExpandMutex = tree === null || tree === void 0 ? void 0 : (_tree$config = tree.config) === null || _tree$config === void 0 ? void 0 : _tree$config.expandMutex;
            }

            if (isExpandMutex) {
              var siblings = node.getSiblings();
              siblings.forEach(function (snode) {
                map["delete"](snode.value);
              });
            }

            map.set(node.value, true);
          });
        } else {
          map["delete"](this.value);
        }

        if (options.directly) {
          this.afterExpanded();
          this.update();
          this.updateChildren();
        }

        return tree.getExpanded(map);
      }
    }, {
      key: "toggleActived",
      value: function toggleActived() {
        return this.setActived(!this.isActived());
      }
    }, {
      key: "setActived",
      value: function setActived(actived, opts) {
        var tree = this.tree;

        var options = _objectSpread$1e({
          directly: false
        }, opts);

        var config = tree.config || {};
        var map = tree.activedMap;

        if (!options.directly) {
          map = new Map(tree.activedMap);
        }

        if (this.isActivable()) {
          if (actived) {
            if (!config.activeMultiple) {
              map.clear();
            }

            map.set(this.value, true);
          } else {
            map["delete"](this.value);
          }
        }

        if (options.directly) {
          this.update();
        }

        return tree.getActived(map);
      }
    }, {
      key: "toggleChecked",
      value: function toggleChecked() {
        return this.setChecked(!this.isChecked());
      }
    }, {
      key: "setChecked",
      value: function setChecked(checked, opts) {
        var tree = this.tree;
        var config = tree.config || {};

        var options = _objectSpread$1e({
          directly: false
        }, opts);

        var map = tree.checkedMap;

        if (!options.directly) {
          map = new Map(tree.checkedMap);
        }

        if (this.isCheckable() && checked !== this.isChecked()) {
          if (config.checkStrictly) {
            if (checked) {
              map.set(this.value, true);
            } else {
              map["delete"](this.value);
            }
          } else {
            var children = this.walk();
            children.forEach(function (node) {
              if (checked) {
                map.set(node.value, true);
              } else {
                map["delete"](node.value);
              }
            });
            var parents = this.getParents();
            parents.forEach(function (node) {
              map["delete"](node.value);
            });
          }
        }

        if (options.directly) {
          if (config.checkStrictly) {
            this.updateChecked();
          } else {
            var relatedNodes = tree.getRelatedNodes([this.value]);
            relatedNodes.forEach(function (node) {
              node.updateChecked();
            });
          }
        }

        return tree.getChecked(map);
      }
    }, {
      key: "update",
      value: function update() {
        this.level = this.getLevel();
        this.actived = this.isActived();
        this.expanded = this.isExpanded();
        this.vmCheckable = this.isCheckable();
        this.visible = this.isVisible();
        this.vmIsRest = this.isRest();
        this.vmIsFirst = this.isFirst();
        this.vmIsLast = this.isLast();
        this.vmIsLeaf = this.isLeaf();
        this.tree.updated(this);
      }
    }, {
      key: "updateChecked",
      value: function updateChecked() {
        var tree = this.tree;
        this.vmCheckable = this.isCheckable();

        if (this.vmCheckable && !this.disabled) {
          this.checked = this.isChecked();

          if (this.checked) {
            tree.checkedMap.set(this.value, true);
          }

          this.indeterminate = this.isIndeterminate();
          tree.updated(this);
        }
      }
    }, {
      key: "updateChildren",
      value: function updateChildren() {
        var children = this.children;

        if (Array.isArray(children)) {
          children.forEach(function (node) {
            node.update();
            node.updateChecked();
            node.updateChildren();
          });
        }
      }
    }, {
      key: "updateParents",
      value: function updateParents() {
        var parent = this.parent;

        if (parent) {
          parent.update();
          parent.updateChecked();
          parent.updateParents();
        }
      }
    }, {
      key: "updateRelated",
      value: function updateRelated() {
        var tree = this.tree;
        var relatedNodes = tree.getRelatedNodes([this.value]);
        relatedNodes.forEach(function (node) {
          node.update();
          node.updateChecked();
        });
        tree.reflow();
      }
    }, {
      key: "walk",
      value: function walk() {
        var children = this.children;
        var list = [];
        list.push(this);

        if (Array.isArray(children) && children.length > 0) {
          children.forEach(function (node) {
            list = list.concat(node.walk());
          });
        }

        return list;
      }
    }, {
      key: "getModel",
      value: function getModel() {
        var model = this.model;

        if (!model) {
          model = createNodeModel(this);
          this.model = model;
        }

        updateNodeModel(model, this);
        return model;
      }
    }]);

    return TreeNode;
  }();

  function ownKeys$1e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1e(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TreeStore = /*#__PURE__*/function () {
    function TreeStore(options) {
      _classCallCheck(this, TreeStore);

      _defineProperty$3(this, "children", void 0);

      _defineProperty$3(this, "nodes", void 0);

      _defineProperty$3(this, "nodeMap", void 0);

      _defineProperty$3(this, "config", void 0);

      _defineProperty$3(this, "activedMap", void 0);

      _defineProperty$3(this, "updatedMap", void 0);

      _defineProperty$3(this, "checkedMap", void 0);

      _defineProperty$3(this, "expandedMap", void 0);

      _defineProperty$3(this, "filterMap", void 0);

      _defineProperty$3(this, "updateTimer", void 0);

      _defineProperty$3(this, "shouldReflow", void 0);

      _defineProperty$3(this, "prevFilter", void 0);

      var config = _objectSpread$1d({
        prefix: "t",
        keys: {},
        expandAll: false,
        expandLevel: 0,
        expandMutex: false,
        expandParent: false,
        activable: false,
        activeMultiple: false,
        checkable: false,
        checkStrictly: false,
        disabled: false,
        load: null,
        lazy: false,
        valueMode: "onlyLeaf",
        filter: null,
        onLoad: null,
        onReflow: null,
        onUpdate: null,
        allowFoldNodeOnFilter: false
      }, options);

      this.config = config;
      this.nodes = [];
      this.children = [];
      this.nodeMap = /* @__PURE__ */new Map();
      this.activedMap = /* @__PURE__ */new Map();
      this.expandedMap = /* @__PURE__ */new Map();
      this.checkedMap = /* @__PURE__ */new Map();
      this.updatedMap = /* @__PURE__ */new Map();
      this.filterMap = /* @__PURE__ */new Map();
      this.prevFilter = null;
      this.updateTimer = null;
      this.shouldReflow = false;
    }

    _createClass(TreeStore, [{
      key: "setConfig",
      value: function setConfig(options) {
        var _this = this;

        var hasChanged = false;
        Object.keys(options).forEach(function (key) {
          var val = options[key];

          if (val !== _this.config[key]) {
            hasChanged = true;
            _this.config[key] = val;
          }
        });

        if (hasChanged) {
          this.refreshState();
        }
      }
    }, {
      key: "getChildren",
      value: function getChildren() {
        return this.children;
      }
    }, {
      key: "getNode",
      value: function getNode(item) {
        var node = null;

        if (typeof item === "string" || typeof item === "number") {
          node = this.nodeMap.get(item);
        } else if (item instanceof TreeNode) {
          node = this.nodeMap.get(item.value);
        }

        return node;
      }
    }, {
      key: "getIndex",
      value: function getIndex(node) {
        return this.nodes.indexOf(node);
      }
    }, {
      key: "getParent",
      value: function getParent(value) {
        var parent = null;
        var node = this.getNode(value);

        if (node) {
          parent = node.getParent();
        }

        return parent;
      }
    }, {
      key: "getParents",
      value: function getParents(value) {
        var node = this.getNode(value);
        var parents = [];

        if (node) {
          parents = node.getParents();
        }

        return parents;
      }
    }, {
      key: "getNodeIndex",
      value: function getNodeIndex(value) {
        var node = this.getNode(value);
        var index = -1;

        if (node) {
          index = node.getIndex();
        }

        return index;
      }
    }, {
      key: "getNodes",
      value: function getNodes(item, options) {
        var nodes = [];
        var val = "";

        if (typeof item === "string" || typeof item === "number") {
          val = item;
        } else if (item instanceof TreeNode) {
          val = item.value;
        }

        if (!val) {
          nodes = this.nodes.slice(0);
        } else {
          var node = this.getNode(val);

          if (node) {
            nodes = node.walk();
          }
        }

        if (options) {
          var conf = _objectSpread$1d({
            filter: null,
            level: Infinity
          }, options);

          if (typeof conf.level === "number" && conf.level !== Infinity) {
            nodes = nodes.filter(function (node) {
              return node.level <= conf.level;
            });
          }

          if (typeof conf.filter === "function") {
            nodes = nodes.filter(function (node) {
              var nodeModel = node.getModel();
              return conf.filter(nodeModel);
            });
          }

          if (isPlainObject_1(conf.props)) {
            nodes = nodes.filter(function (node) {
              var result = Object.keys(conf.props).every(function (key) {
                var propEqual = node[key] === conf.props[key];
                return propEqual;
              });
              return result;
            });
          }
        }

        return nodes;
      }
    }, {
      key: "append",
      value: function append(list) {
        var _this2 = this;

        list.forEach(function (item) {
          var node = new TreeNode(_this2, item);

          _this2.children.push(node);
        });
        this.reflow();
      }
    }, {
      key: "reload",
      value: function reload(list) {
        this.expandedMap.clear();
        this.checkedMap.clear();
        this.activedMap.clear();
        this.filterMap.clear();
        this.removeAll();
        this.append(list);
      }
    }, {
      key: "parseNodeData",
      value: function parseNodeData(para, item) {
        var value = "";
        var node = null;
        var data = null;

        if (typeof para === "string" || typeof para === "number") {
          value = para;
          data = item;
          node = this.getNode(value);
        } else if (para instanceof TreeNode) {
          node = para;
          data = item;
        } else {
          data = para;
        }

        var spec = {
          node: node,
          data: data
        };
        return spec;
      }
    }, {
      key: "appendNodes",
      value: function appendNodes(para, item) {
        var spec = this.parseNodeData(para, item);

        if (spec.data) {
          if (!spec.node) {
            if (spec.data instanceof TreeNode) {
              spec.data.appendTo(this);
            } else if (Array.isArray(spec.data)) {
              this.append(spec.data);
            } else {
              this.append([spec.data]);
            }
          } else {
            if (spec.data instanceof TreeNode) {
              spec.data.appendTo(this, spec.node);
            } else if (Array.isArray(spec.data)) {
              spec.node.append(spec.data);
            } else {
              spec.node.append([spec.data]);
            }

            spec.node.updateRelated();
          }
        }
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(value, item) {
        var node = this.getNode(value);

        if (node) {
          node.insertBefore(item);
        }
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(value, item) {
        var node = this.getNode(value);

        if (node) {
          node.insertAfter(item);
        }
      }
    }, {
      key: "refreshNodes",
      value: function refreshNodes() {
        var children = this.children,
            nodes = this.nodes;
        nodes.length = 0;
        children.forEach(function (node) {
          var list = node.walk();
          Array.prototype.push.apply(nodes, list);
        });
      }
    }, {
      key: "refreshState",
      value: function refreshState() {
        var nodes = this.nodes;
        nodes.forEach(function (node) {
          node.update();
          node.updateChecked();
        });
      }
    }, {
      key: "reflow",
      value: function reflow(node) {
        this.shouldReflow = true;
        this.updated(node);
      }
    }, {
      key: "updated",
      value: function updated(node) {
        var _this3 = this;

        if (node !== null && node !== void 0 && node.value) {
          this.updatedMap.set(node.value, true);
        }

        if (this.updateTimer) return;
        this.updateTimer = +setTimeout(function () {
          var _this3$config;

          clearTimeout(_this3.updateTimer);
          _this3.updateTimer = null;

          if (_this3.shouldReflow) {
            _this3.refreshNodes();

            _this3.emit("reflow");
          }

          if (!((_this3$config = _this3.config) !== null && _this3$config !== void 0 && _this3$config.allowFoldNodeOnFilter)) _this3.lockFilterPathNodes();
          var updatedList = Array.from(_this3.updatedMap.keys());

          if (updatedList.length > 0) {
            var updatedNodes = updatedList.map(function (value) {
              return _this3.getNode(value);
            });

            _this3.emit("update", {
              nodes: updatedNodes,
              map: _this3.updatedMap
            });
          } else if (_this3.shouldReflow) {
            _this3.emit("update", {
              nodes: [],
              map: _this3.updatedMap
            });
          }

          _this3.shouldReflow = false;

          _this3.updatedMap.clear();
        });
      }
    }, {
      key: "getActived",
      value: function getActived(map) {
        var activedMap = map || this.activedMap;
        return Array.from(activedMap.keys());
      }
    }, {
      key: "getActivedNodes",
      value: function getActivedNodes(item) {
        var nodes = this.getNodes(item);
        nodes = nodes.filter(function (node) {
          return node.isActived();
        });
        return nodes;
      }
    }, {
      key: "replaceActived",
      value: function replaceActived(list) {
        this.resetActived();
        this.setActived(list);
      }
    }, {
      key: "setActived",
      value: function setActived(actived) {
        var _this4 = this;

        var activeMultiple = this.config.activeMultiple;
        var list = actived.slice(0);

        if (!activeMultiple) {
          list.length = 1;
        }

        list.forEach(function (val) {
          _this4.activedMap.set(val, true);

          var node = _this4.getNode(val);

          if (node) {
            node.update();
          }
        });
      }
    }, {
      key: "resetActived",
      value: function resetActived() {
        var actived = this.getActived();
        this.activedMap.clear();
        var relatedNodes = this.getRelatedNodes(actived);
        relatedNodes.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "getExpanded",
      value: function getExpanded(map) {
        var expandedMap = map || this.expandedMap;
        return Array.from(expandedMap.keys());
      }
    }, {
      key: "replaceExpanded",
      value: function replaceExpanded(list) {
        var expanded = this.getExpanded();
        var added = difference_1(list, expanded);
        var removed = difference_1(expanded, list);
        this.setExpandedDirectly(removed, false);
        this.updateExpanded(removed);
        this.setExpanded(added);
      }
    }, {
      key: "setExpanded",
      value: function setExpanded(list) {
        this.setExpandedDirectly(list);
        this.updateExpanded(list);
      }
    }, {
      key: "setExpandedDirectly",
      value: function setExpandedDirectly(list) {
        var _this5 = this;

        var expanded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        list.forEach(function (val) {
          if (expanded) {
            _this5.expandedMap.set(val, true);

            var node = _this5.getNode(val);

            if (node) {
              node.afterExpanded();
            }
          } else {
            _this5.expandedMap["delete"](val);
          }
        });
      }
    }, {
      key: "resetExpanded",
      value: function resetExpanded() {
        var expanded = this.getExpanded();
        this.expandedMap.clear();
        this.updateExpanded(expanded);
      }
    }, {
      key: "updateExpanded",
      value: function updateExpanded(list) {
        var relatedNodes = this.getRelatedNodes(list, {
          withParents: false
        });
        relatedNodes.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "getChecked",
      value: function getChecked(map) {
        var nodes = this.nodes,
            config = this.config;
        var valueMode = config.valueMode,
            checkStrictly = config.checkStrictly;
        var list = [];
        var checkedMap = map || this.checkedMap;
        nodes.forEach(function (node) {
          if (node.isChecked(checkedMap)) {
            if (valueMode === "parentFirst" && !checkStrictly) {
              if (!node.parent || !node.parent.isChecked(checkedMap)) {
                list.push(node.value);
              }
            } else if (valueMode === "onlyLeaf" && !checkStrictly) {
              if (node.isLeaf()) {
                list.push(node.value);
              }
            } else {
              list.push(node.value);
            }
          }
        });
        return list;
      }
    }, {
      key: "getCheckedNodes",
      value: function getCheckedNodes(item) {
        var nodes = this.getNodes(item);
        nodes = nodes.filter(function (node) {
          return node.isChecked();
        });
        return nodes;
      }
    }, {
      key: "replaceChecked",
      value: function replaceChecked(list) {
        this.resetChecked();
        this.setChecked(list);
      }
    }, {
      key: "setChecked",
      value: function setChecked(list) {
        var _this6 = this;

        var _this$config = this.config,
            valueMode = _this$config.valueMode,
            checkStrictly = _this$config.checkStrictly,
            checkable = _this$config.checkable;
        if (!checkable) return;
        list.forEach(function (val) {
          var node = _this6.getNode(val);

          if (node) {
            if (valueMode === "parentFirst" && !checkStrictly) {
              var childrenNodes = node.walk();
              childrenNodes.forEach(function (childNode) {
                _this6.checkedMap.set(childNode.value, true);
              });
            } else {
              _this6.checkedMap.set(val, true);

              node.updateChecked();
            }
          }
        });

        if (!checkStrictly) {
          var checked = this.getChecked();
          var relatedNodes = this.getRelatedNodes(checked);
          relatedNodes.forEach(function (node) {
            node.updateChecked();
          });
        }
      }
    }, {
      key: "resetChecked",
      value: function resetChecked() {
        var checked = this.getChecked();
        var relatedNodes = this.getRelatedNodes(checked);
        this.checkedMap.clear();
        relatedNodes.forEach(function (node) {
          node.updateChecked();
        });
      }
    }, {
      key: "updateAll",
      value: function updateAll() {
        var nodes = this.getNodes();
        nodes.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "remove",
      value: function remove(value) {
        var node = this.getNode(value);

        if (node) {
          node.remove();
        }
      }
    }, {
      key: "removeAll",
      value: function removeAll() {
        var nodes = this.getNodes();
        nodes.forEach(function (node) {
          node.remove();
        });
      }
    }, {
      key: "getRelatedNodes",
      value: function getRelatedNodes(list, options) {
        var _this7 = this;

        var conf = _objectSpread$1d({
          withParents: true
        }, options);

        var map = /* @__PURE__ */new Map();
        list.forEach(function (value) {
          if (map.get(value)) return;

          var node = _this7.getNode(value);

          if (node) {
            var parents = node.getParents();
            var children = node.walk();
            var related = [];

            if (conf.withParents) {
              related = parents.concat(children);
            } else {
              related = children;
            }

            related.forEach(function (relatedNode) {
              map.set(relatedNode.value, relatedNode);
            });
          }
        });
        var relatedNodes = Array.from(map.values());
        return relatedNodes;
      }
    }, {
      key: "emit",
      value: function emit(name, state) {
        var config = this.config || {};
        var methodName = camelCase_1("on-".concat(name));
        var method = config[methodName];

        if (typeof method === "function") {
          method(state);
        }
      }
    }, {
      key: "lockFilterPathNodes",
      value: function lockFilterPathNodes() {
        var _this8 = this;

        var config = this.config;
        var allNodes = this.getNodes();

        if (this.prevFilter) {
          allNodes.forEach(function (node) {
            node.lock(false);
          });
        }

        if (!config.filter) {
          return;
        }

        this.prevFilter = config.filter;
        var map = /* @__PURE__ */new Map();
        allNodes.reverse().forEach(function (item) {
          var node = item;
          var parent = node.getParent();

          if (node.vmIsRest) {
            if (parent) {
              parent.expanded = true;
            }

            node.visible = true;
          }

          if (node.vmIsRest || map.get(node.value)) {
            if (parent && !parent.vmIsRest) {
              map.set(parent.value, true);
            }
          }
        });
        var filterPathValues = Array.from(map.keys());
        filterPathValues.forEach(function (value) {
          var node = _this8.getNode(value);

          if (node) {
            node.lock(true);
          }
        });
      }
    }]);

    return TreeStore;
  }();

  function ownKeys$1d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1d(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var useContext = function useContext(props, setInnerValue, innerPopupVisible, setPopupVisible) {
    var statusContext = vue.reactive({
      treeStore: null,
      inputVal: null,
      scopeVal: void 0,
      treeNodes: [],
      expend: []
    });
    return {
      statusContext: statusContext,
      cascaderContext: vue.computed(function () {
        var size = props.size,
            checkStrictly = props.checkStrictly,
            lazy = props.lazy,
            multiple = props.multiple,
            filterable = props.filterable,
            clearable = props.clearable,
            checkProps = props.checkProps,
            max = props.max,
            disabled = props.disabled,
            showAllLevels = props.showAllLevels,
            minCollapsedNum = props.minCollapsedNum,
            loading = props.loading,
            valueType = props.valueType;
        return _objectSpread$1c(_objectSpread$1c({
          value: statusContext.scopeVal,
          size: size,
          checkStrictly: checkStrictly,
          lazy: lazy,
          multiple: multiple,
          filterable: filterable,
          clearable: clearable,
          checkProps: checkProps,
          max: max,
          disabled: disabled,
          showAllLevels: showAllLevels,
          minCollapsedNum: minCollapsedNum,
          loading: loading,
          valueType: valueType,
          visible: innerPopupVisible.value
        }, statusContext), {}, {
          setTreeNodes: function setTreeNodes(nodes) {
            statusContext.treeNodes = nodes;
          },
          setValue: function setValue(val, source, node) {
            if (isEqual_1(val, statusContext.scopeVal)) return;
            setInnerValue(val, {
              source: source,
              node: node
            });
          },
          setVisible: setPopupVisible,
          setInputVal: function setInputVal(val) {
            statusContext.inputVal = val;
          },
          setExpend: function setExpend(val) {
            statusContext.expend = val;
          }
        });
      })
    };
  };
  var useCascaderContext = function useCascaderContext(props) {
    var disabled = useFormDisabled();

    var _toRefs = vue.toRefs(props),
        value = _toRefs.value,
        modelValue = _toRefs.modelValue,
        popupVisible = _toRefs.popupVisible;

    var _useVModel = useVModel(value, modelValue, props.defaultValue, props.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];

    var _useDefaultValue = useDefaultValue(popupVisible, false, props.onPopupVisibleChange, "popupVisible"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        innerPopupVisible = _useDefaultValue2[0],
        setPopupVisible = _useDefaultValue2[1];

    var _useContext = useContext(props, setInnerValue, innerPopupVisible, setPopupVisible),
        cascaderContext = _useContext.cascaderContext,
        statusContext = _useContext.statusContext;

    var updatedTreeNodes = function updatedTreeNodes() {
      var _cascaderContext$valu = cascaderContext.value,
          inputVal = _cascaderContext$valu.inputVal,
          treeStore = _cascaderContext$valu.treeStore,
          setTreeNodes = _cascaderContext$valu.setTreeNodes;
      treeNodesEffect(inputVal, treeStore, setTreeNodes);
    };

    var updateExpend = function updateExpend() {
      var _cascaderContext$valu2 = cascaderContext.value,
          value2 = _cascaderContext$valu2.value,
          treeStore = _cascaderContext$valu2.treeStore;
      var expend = statusContext.expend;
      treeStoreExpendEffect(treeStore, value2, expend);
      treeStore.replaceChecked(getTreeValue(value2));
    };

    vue.watch(function () {
      return props.options;
    }, function () {
      var options = props.options,
          _props$keys = props.keys,
          keys = _props$keys === void 0 ? {} : _props$keys,
          checkStrictly = props.checkStrictly;
      var treeStore = statusContext.treeStore;
      if (!options.length && !treeStore) return;

      if (!treeStore) {
        var treeStore2 = new TreeStore({
          keys: _objectSpread$1c(_objectSpread$1c({}, keys), {}, {
            children: typeof keys.children === "string" ? keys.children : "children"
          }),
          checkable: true,
          expandMutex: true,
          expandParent: true,
          checkStrictly: checkStrictly,
          onLoad: function onLoad() {
            vue.nextTick(function () {
              treeStore2.refreshNodes();
              updatedTreeNodes();
            });
          }
        });
        treeStore2.append(options);
        statusContext.treeStore = treeStore2;
      } else {
        treeStore.reload(options);
        treeStore.refreshNodes();
      }

      updateExpend();
      updatedTreeNodes();
    }, {
      immediate: true
    });
    vue.watch(function () {
      var checkStrictly = props.checkStrictly,
          lazy = props.lazy,
          load = props.load,
          valueMode = props.valueMode;
      return JSON.stringify({
        valueMode: valueMode,
        checkStrictly: checkStrictly,
        lazy: lazy,
        load: load
      });
    }, function () {
      var treeStore = statusContext.treeStore;
      if (!treeStore) return;
      var checkStrictly = props.checkStrictly,
          lazy = props.lazy,
          load = props.load,
          valueMode = props.valueMode;
      var treeProps = {
        checkStrictly: checkStrictly,
        disabled: disabled,
        load: load,
        lazy: lazy,
        valueMode: valueMode
      };
      treeStore.setConfig(treeProps);
    }, {
      immediate: true
    });
    vue.watch(innerValue, function () {
      var _cascaderContext$valu3 = cascaderContext.value,
          setValue = _cascaderContext$valu3.setValue,
          multiple = _cascaderContext$valu3.multiple,
          valueType = _cascaderContext$valu3.valueType;

      if (isValueInvalid(innerValue.value, cascaderContext.value)) {
        setValue(multiple ? [] : "", "invalid-value");
        console.warn("TDesign Cascader Warn:", "cascader props value invalid, v-model automatic calibration");
      }

      if (!isEmptyValues(innerValue)) {
        statusContext.scopeVal = getCascaderValue(innerValue.value, valueType, multiple);
      }

      if (!statusContext.treeStore) return;
      updateExpend();
      updatedTreeNodes();
    }, {
      immediate: true
    });
    vue.watch(function () {
      return innerPopupVisible.value && props.filterable;
    }, function (visible) {
      var setInputVal = cascaderContext.value.setInputVal;

      if (visible) {
        setInputVal("");
      }
    });
    vue.watch(function () {
      return statusContext.inputVal;
    }, function () {
      updatedTreeNodes();
    });
    return {
      setInnerValue: setInnerValue,
      cascaderContext: cascaderContext
    };
  };

  function ownKeys$1c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1c(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Cascader = vue.defineComponent({
    name: "TCascader",
    props: _objectSpread$1b({}, props$A),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var disabled = useFormDisabled();
      var COMPONENT_NAME = usePrefixClass("cascader");
      var classPrefix = usePrefixClass();

      var _useCommonClassName = useCommonClassName$2(),
          STATUS = _useCommonClassName.STATUS;

      var overlayClassName = usePrefixClass("cascader__popup");

      var _useConfig = useConfig("cascader"),
          global = _useConfig.global;

      var _useCascaderContext = useCascaderContext(props2),
          cascaderContext = _useCascaderContext.cascaderContext;

      var displayValue = vue.computed(function () {
        return props2.multiple ? getMultipleContent(cascaderContext.value) : getSingleContent(cascaderContext.value);
      });
      var panels = vue.computed(function () {
        return getPanels(cascaderContext.value.treeNodes);
      });
      var inputPlaceholder = vue.computed(function () {
        return cascaderContext.value.visible && !props2.multiple && getSingleContent(cascaderContext.value) || global.value.placeholder;
      });

      var renderSuffixIcon = function renderSuffixIcon() {
        var _cascaderContext$valu = cascaderContext.value,
            visible = _cascaderContext$valu.visible,
            disabled2 = _cascaderContext$valu.disabled;
        return vue.createVNode(FakeArrow, {
          "overlayClassName": getFakeArrowIconClass(classPrefix.value, STATUS.value, cascaderContext.value),
          "isActive": visible,
          "disabled": disabled2
        }, null);
      };

      return function () {
        var _cascaderContext$valu2 = cascaderContext.value,
            setVisible = _cascaderContext$valu2.setVisible,
            visible = _cascaderContext$valu2.visible,
            inputVal = _cascaderContext$valu2.inputVal,
            setInputVal = _cascaderContext$valu2.setInputVal;
        return vue.createVNode(SelectInput, vue.mergeProps({
          "class": COMPONENT_NAME.value,
          "value": displayValue.value,
          "inputValue": visible ? inputVal : "",
          "popupVisible": visible,
          "keys": props2.keys,
          "allowInput": visible && props2.filterable,
          "min-collapsed-num": props2.minCollapsedNum,
          "collapsed-items": props2.collapsedItems,
          "readonly": props2.readonly,
          "disabled": props2.disabled,
          "clearable": props2.clearable,
          "placeholder": inputPlaceholder.value,
          "multiple": props2.multiple,
          "loading": props2.loading,
          "overlayClassName": overlayClassName.value,
          "suffixIcon": function suffixIcon() {
            return renderSuffixIcon();
          },
          "popup-props": panels.value.length ? {
            overlayStyle: {
              width: "auto"
            }
          } : {},
          "popupProps": props2.popupProps,
          "inputProps": {
            size: props2.size
          }
        }, props2.selectInputProps, {
          "onInputChange": function onInputChange(value) {
            setInputVal(value);
          },
          "onTagChange": function onTagChange(val, ctx) {
            handleRemoveTagEffect(cascaderContext.value, ctx.index, props2.onRemove);
          },
          "onPopupVisibleChange": function onPopupVisibleChange(val, context) {
            if (disabled.value) return;
            setVisible(val, context);
          },
          "onClear": function onClear(_ref2) {
            _ref2.e;
            closeIconClickEffect(cascaderContext.value);
          }
        }, props2.selectInputProps), {
          panel: function panel() {
            return vue.createVNode(Panel, {
              "empty": props2.empty,
              "visible": visible,
              "trigger": props2.trigger,
              "cascaderContext": cascaderContext.value
            }, {
              empty: slots.empty
            });
          },
          collapsedItems: slots.collapsedItems
        });
      };
    }
  });

  var Cascader = withInstall(_Cascader);

  var dayjs_min = {exports: {}};

  (function (module, exports) {
    !function (t, e) {
      module.exports = e() ;
    }(commonjsGlobal, function () {

      var t = 1e3,
          e = 6e4,
          n = 36e5,
          r = "millisecond",
          i = "second",
          s = "minute",
          u = "hour",
          a = "day",
          o = "week",
          f = "month",
          h = "quarter",
          c = "year",
          d = "date",
          $ = "Invalid Date",
          l = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,
          y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,
          M = {
        name: "en",
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_")
      },
          m = function m(t, e, n) {
        var r = String(t);
        return !r || r.length >= e ? t : "" + Array(e + 1 - r.length).join(n) + t;
      },
          g = {
        s: m,
        z: function z(t) {
          var e = -t.utcOffset(),
              n = Math.abs(e),
              r = Math.floor(n / 60),
              i = n % 60;
          return (e <= 0 ? "+" : "-") + m(r, 2, "0") + ":" + m(i, 2, "0");
        },
        m: function t(e, n) {
          if (e.date() < n.date()) return -t(n, e);
          var r = 12 * (n.year() - e.year()) + (n.month() - e.month()),
              i = e.clone().add(r, f),
              s = n - i < 0,
              u = e.clone().add(r + (s ? -1 : 1), f);
          return +(-(r + (n - i) / (s ? i - u : u - i)) || 0);
        },
        a: function a(t) {
          return t < 0 ? Math.ceil(t) || 0 : Math.floor(t);
        },
        p: function p(t) {
          return {
            M: f,
            y: c,
            w: o,
            d: a,
            D: d,
            h: u,
            m: s,
            s: i,
            ms: r,
            Q: h
          }[t] || String(t || "").toLowerCase().replace(/s$/, "");
        },
        u: function u(t) {
          return void 0 === t;
        }
      },
          v = "en",
          D = {};

      D[v] = M;

      var p = function p(t) {
        return t instanceof _;
      },
          S = function t(e, n, r) {
        var i;
        if (!e) return v;

        if ("string" == typeof e) {
          var s = e.toLowerCase();
          D[s] && (i = s), n && (D[s] = n, i = s);
          var u = e.split("-");
          if (!i && u.length > 1) return t(u[0]);
        } else {
          var a = e.name;
          D[a] = e, i = a;
        }

        return !r && i && (v = i), i || !r && v;
      },
          w = function w(t, e) {
        if (p(t)) return t.clone();
        var n = "object" == _typeof$2(e) ? e : {};
        return n.date = t, n.args = arguments, new _(n);
      },
          O = g;

      O.l = S, O.i = p, O.w = function (t, e) {
        return w(t, {
          locale: e.$L,
          utc: e.$u,
          x: e.$x,
          $offset: e.$offset
        });
      };

      var _ = function () {
        function M(t) {
          this.$L = S(t.locale, null, !0), this.parse(t);
        }

        var m = M.prototype;
        return m.parse = function (t) {
          this.$d = function (t) {
            var e = t.date,
                n = t.utc;
            if (null === e) return new Date(NaN);
            if (O.u(e)) return new Date();
            if (e instanceof Date) return new Date(e);

            if ("string" == typeof e && !/Z$/i.test(e)) {
              var r = e.match(l);

              if (r) {
                var i = r[2] - 1 || 0,
                    s = (r[7] || "0").substring(0, 3);
                return n ? new Date(Date.UTC(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s)) : new Date(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s);
              }
            }

            return new Date(e);
          }(t), this.$x = t.x || {}, this.init();
        }, m.init = function () {
          var t = this.$d;
          this.$y = t.getFullYear(), this.$M = t.getMonth(), this.$D = t.getDate(), this.$W = t.getDay(), this.$H = t.getHours(), this.$m = t.getMinutes(), this.$s = t.getSeconds(), this.$ms = t.getMilliseconds();
        }, m.$utils = function () {
          return O;
        }, m.isValid = function () {
          return !(this.$d.toString() === $);
        }, m.isSame = function (t, e) {
          var n = w(t);
          return this.startOf(e) <= n && n <= this.endOf(e);
        }, m.isAfter = function (t, e) {
          return w(t) < this.startOf(e);
        }, m.isBefore = function (t, e) {
          return this.endOf(e) < w(t);
        }, m.$g = function (t, e, n) {
          return O.u(t) ? this[e] : this.set(n, t);
        }, m.unix = function () {
          return Math.floor(this.valueOf() / 1e3);
        }, m.valueOf = function () {
          return this.$d.getTime();
        }, m.startOf = function (t, e) {
          var n = this,
              r = !!O.u(e) || e,
              h = O.p(t),
              $ = function $(t, e) {
            var i = O.w(n.$u ? Date.UTC(n.$y, e, t) : new Date(n.$y, e, t), n);
            return r ? i : i.endOf(a);
          },
              l = function l(t, e) {
            return O.w(n.toDate()[t].apply(n.toDate("s"), (r ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e)), n);
          },
              y = this.$W,
              M = this.$M,
              m = this.$D,
              g = "set" + (this.$u ? "UTC" : "");

          switch (h) {
            case c:
              return r ? $(1, 0) : $(31, 11);

            case f:
              return r ? $(1, M) : $(0, M + 1);

            case o:
              var v = this.$locale().weekStart || 0,
                  D = (y < v ? y + 7 : y) - v;
              return $(r ? m - D : m + (6 - D), M);

            case a:
            case d:
              return l(g + "Hours", 0);

            case u:
              return l(g + "Minutes", 1);

            case s:
              return l(g + "Seconds", 2);

            case i:
              return l(g + "Milliseconds", 3);

            default:
              return this.clone();
          }
        }, m.endOf = function (t) {
          return this.startOf(t, !1);
        }, m.$set = function (t, e) {
          var n,
              o = O.p(t),
              h = "set" + (this.$u ? "UTC" : ""),
              $ = (n = {}, n[a] = h + "Date", n[d] = h + "Date", n[f] = h + "Month", n[c] = h + "FullYear", n[u] = h + "Hours", n[s] = h + "Minutes", n[i] = h + "Seconds", n[r] = h + "Milliseconds", n)[o],
              l = o === a ? this.$D + (e - this.$W) : e;

          if (o === f || o === c) {
            var y = this.clone().set(d, 1);
            y.$d[$](l), y.init(), this.$d = y.set(d, Math.min(this.$D, y.daysInMonth())).$d;
          } else $ && this.$d[$](l);

          return this.init(), this;
        }, m.set = function (t, e) {
          return this.clone().$set(t, e);
        }, m.get = function (t) {
          return this[O.p(t)]();
        }, m.add = function (r, h) {
          var d,
              $ = this;
          r = Number(r);

          var l = O.p(h),
              y = function y(t) {
            var e = w($);
            return O.w(e.date(e.date() + Math.round(t * r)), $);
          };

          if (l === f) return this.set(f, this.$M + r);
          if (l === c) return this.set(c, this.$y + r);
          if (l === a) return y(1);
          if (l === o) return y(7);
          var M = (d = {}, d[s] = e, d[u] = n, d[i] = t, d)[l] || 1,
              m = this.$d.getTime() + r * M;
          return O.w(m, this);
        }, m.subtract = function (t, e) {
          return this.add(-1 * t, e);
        }, m.format = function (t) {
          var e = this,
              n = this.$locale();
          if (!this.isValid()) return n.invalidDate || $;

          var r = t || "YYYY-MM-DDTHH:mm:ssZ",
              i = O.z(this),
              s = this.$H,
              u = this.$m,
              a = this.$M,
              o = n.weekdays,
              f = n.months,
              h = function h(t, n, i, s) {
            return t && (t[n] || t(e, r)) || i[n].slice(0, s);
          },
              c = function c(t) {
            return O.s(s % 12 || 12, t, "0");
          },
              d = n.meridiem || function (t, e, n) {
            var r = t < 12 ? "AM" : "PM";
            return n ? r.toLowerCase() : r;
          },
              l = {
            YY: String(this.$y).slice(-2),
            YYYY: this.$y,
            M: a + 1,
            MM: O.s(a + 1, 2, "0"),
            MMM: h(n.monthsShort, a, f, 3),
            MMMM: h(f, a),
            D: this.$D,
            DD: O.s(this.$D, 2, "0"),
            d: String(this.$W),
            dd: h(n.weekdaysMin, this.$W, o, 2),
            ddd: h(n.weekdaysShort, this.$W, o, 3),
            dddd: o[this.$W],
            H: String(s),
            HH: O.s(s, 2, "0"),
            h: c(1),
            hh: c(2),
            a: d(s, u, !0),
            A: d(s, u, !1),
            m: String(u),
            mm: O.s(u, 2, "0"),
            s: String(this.$s),
            ss: O.s(this.$s, 2, "0"),
            SSS: O.s(this.$ms, 3, "0"),
            Z: i
          };

          return r.replace(y, function (t, e) {
            return e || l[t] || i.replace(":", "");
          });
        }, m.utcOffset = function () {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m.diff = function (r, d, $) {
          var l,
              y = O.p(d),
              M = w(r),
              m = (M.utcOffset() - this.utcOffset()) * e,
              g = this - M,
              v = O.m(this, M);
          return v = (l = {}, l[c] = v / 12, l[f] = v, l[h] = v / 3, l[o] = (g - m) / 6048e5, l[a] = (g - m) / 864e5, l[u] = g / n, l[s] = g / e, l[i] = g / t, l)[y] || g, $ ? v : O.a(v);
        }, m.daysInMonth = function () {
          return this.endOf(f).$D;
        }, m.$locale = function () {
          return D[this.$L];
        }, m.locale = function (t, e) {
          if (!t) return this.$L;
          var n = this.clone(),
              r = S(t, e, !0);
          return r && (n.$L = r), n;
        }, m.clone = function () {
          return O.w(this.$d, this);
        }, m.toDate = function () {
          return new Date(this.valueOf());
        }, m.toJSON = function () {
          return this.isValid() ? this.toISOString() : null;
        }, m.toISOString = function () {
          return this.$d.toISOString();
        }, m.toString = function () {
          return this.$d.toUTCString();
        }, M;
      }(),
          T = _.prototype;

      return w.prototype = T, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", f], ["$y", c], ["$D", d]].forEach(function (t) {
        T[t[1]] = function (e) {
          return this.$g(e, t[0], t[1]);
        };
      }), w.extend = function (t, e) {
        return t.$i || (t(e, _, w), t.$i = !0), w;
      }, w.locale = S, w.isDayjs = p, w.unix = function (t) {
        return w(1e3 * t);
      }, w.en = D[v], w.Ls = D, w.p = {}, w;
    });
  })(dayjs_min);

  var dayjs = dayjs_min.exports;

  var isBetween$2 = {exports: {}};

  (function (module, exports) {
    !function (e, i) {
      module.exports = i() ;
    }(commonjsGlobal, function () {

      return function (e, i, t) {
        i.prototype.isBetween = function (e, i, s, f) {
          var n = t(e),
              o = t(i),
              r = "(" === (f = f || "()")[0],
              u = ")" === f[1];
          return (r ? this.isAfter(n, s) : !this.isBefore(n, s)) && (u ? this.isBefore(o, s) : !this.isAfter(o, s)) || (r ? this.isBefore(n, s) : !this.isAfter(n, s)) && (u ? this.isAfter(o, s) : !this.isBefore(o, s));
        };
      };
    });
  })(isBetween$2);

  var isBetween$1 = isBetween$2.exports;

  var props$x = {
    allowInput: Boolean,
    clearable: Boolean,
    disabled: Boolean,
    disableDate: {
      type: [Object, Array, Function]
    },
    enableTimePicker: Boolean,
    firstDayOfWeek: {
      type: Number,
      validator: function validator(val) {
        return [1, 2, 3, 4, 5, 6, 7].includes(val);
      }
    },
    format: {
      type: String,
      "default": void 0
    },
    inputProps: {
      type: Object
    },
    mode: {
      type: String,
      "default": "month",
      validator: function validator(val) {
        return ["year", "month", "date"].includes(val);
      }
    },
    placeholder: {
      type: [String, Array],
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    prefixIcon: {
      type: Function
    },
    presets: {
      type: Object
    },
    range: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    suffixIcon: {
      type: Function
    },
    timePickerProps: Boolean,
    value: {
      type: [String, Array, Date]
    },
    modelValue: {
      type: [String, Array, Date]
    },
    defaultValue: {
      type: [String, Array, Date]
    },
    onBlur: Function,
    onChange: Function,
    onFocus: Function,
    onInput: Function,
    onPick: Function,
    onApply: Function
  };

  var TCalendarPresets = vue.defineComponent({
    name: "TCalendarPresets",
    components: {
      TButton: Button
    },
    props: {
      global: {
        type: Object
      },
      presets: {
        type: Object
      },
      onClick: Function
    },
    setup: function setup() {
      var COMPONENT_NAME = usePrefixClass("date-picker__presets");
      return {
        COMPONENT_NAME: COMPONENT_NAME
      };
    },
    methods: {
      _isDate: function _isDate(obj) {
        return obj.$d instanceof Date && !isNaN(obj.valueOf());
      },
      clickPreset: function clickPreset(value) {
        var dateCheckResult = true;

        if (value instanceof Array) {
          for (var i = 0; i < value.length; i++) {
            if (!this._isDate(value[i])) {
              dateCheckResult = false;
              break;
            }
          }
        } else if (_typeof$2(value) === "object") {
          dateCheckResult = this._isDate(value);
        } else {
          dateCheckResult = false;
        }

        if (dateCheckResult) {
          this.onClick(value);
        } else {
          this.$message.info("\u65E5\u671F\u683C\u5F0F\u9519\u8BEF");
        }
      }
    },
    render: function render() {
      var _this = this;

      var presets = this.presets;
      return vue.createVNode("div", {
        "class": this.COMPONENT_NAME
      }, [vue.createVNode("ul", null, [presets && Object.keys(presets).map(function (key) {
        return vue.createVNode("li", {
          "key": key
        }, [vue.createVNode("a", {
          "onClick": function onClick() {
            return _this.clickPreset(presets[key]);
          }
        }, [key])]);
      })])]);
    }
  });

  var TDateHeader = vue.defineComponent({
    name: "TDatePickerHeader",
    components: {
      TButton: TButton,
      RoundIcon: round$1,
      ChevronLeftIcon: chevronLeft,
      ChevronRightIcon: chevronRight
    },
    props: {
      year: Number,
      month: Number,
      type: {
        type: String,
        "default": "date",
        validator: function validator(v) {
          return ["year", "month", "date"].indexOf(v) > -1;
        }
      },
      onBtnClick: Function,
      onTypeChange: Function
    },
    setup: function setup() {
      var COMPONENT_NAME = usePrefixClass("date-picker__header");

      var _useConfig = useConfig("datePicker"),
          global = _useConfig.global;

      return {
        global: global,
        COMPONENT_NAME: COMPONENT_NAME
      };
    },
    render: function render() {
      var _this = this;

      var COMPONENT_NAME = this.COMPONENT_NAME;
      var _this$$props = this.$props,
          type = _this$$props.type,
          year = _this$$props.year,
          month = _this$$props.month,
          onBtnClick = _this$$props.onBtnClick,
          onTypeChange = _this$$props.onTypeChange;
      var startYear = parseInt((this.year / 10).toString(), 10) * 10;
      var _this$global = this.global,
          rangeSeparator = _this$global.rangeSeparator,
          yearAriaLabel = _this$global.yearAriaLabel,
          now = _this$global.now,
          preMonth = _this$global.preMonth,
          preYear = _this$global.preYear,
          nextMonth = _this$global.nextMonth,
          nextYear = _this$global.nextYear,
          preDecade = _this$global.preDecade,
          nextDecade = _this$global.nextDecade;
      var preLabel;
      var nextLabel;

      if (type === "year") {
        preLabel = preDecade;
        nextLabel = nextDecade;
      } else if (type === "date") {
        preLabel = preMonth;
        nextLabel = nextMonth;
      } else {
        preLabel = preYear;
        nextLabel = nextYear;
      }

      return vue.createVNode("div", {
        "class": COMPONENT_NAME
      }, [vue.createVNode("span", {
        "class": "".concat(COMPONENT_NAME, "-title")
      }, [type === "year" && vue.createVNode("span", null, [vue.createVNode("span", null, [startYear]), rangeSeparator, vue.createVNode("span", null, [startYear + 9])]), type !== "year" && vue.createVNode(vue.resolveComponent("t-button"), {
        "class": "".concat(COMPONENT_NAME, "-btn"),
        "variant": "text",
        "size": "small",
        "onClick": function onClick() {
          return onTypeChange("year");
        }
      }, {
        "default": function _default() {
          return ["".concat(year, " ").concat(yearAriaLabel)];
        }
      }), type === "date" && vue.createVNode(vue.resolveComponent("t-button"), {
        "class": "".concat(COMPONENT_NAME, "-btn"),
        "variant": "text",
        "size": "small",
        "onClick": function onClick() {
          return onTypeChange("month");
        }
      }, {
        "default": function _default() {
          return [_this.global.months[month]];
        }
      })]), vue.createVNode("span", {
        "class": "".concat(COMPONENT_NAME, "-controller")
      }, [vue.createVNode(vue.resolveComponent("t-button"), {
        "class": "".concat(COMPONENT_NAME, "-controller__btn"),
        "variant": "text",
        "onClick": function onClick() {
          return onBtnClick(-1);
        },
        "title": preLabel
      }, {
        icon: function icon() {
          return vue.createVNode(vue.resolveComponent("chevron-left-icon"), null, null);
        }
      }), vue.createVNode(vue.resolveComponent("t-button"), {
        "class": ["".concat(COMPONENT_NAME, "-controller__btn"), "".concat(COMPONENT_NAME, "-controller__btn--now")],
        "variant": "text",
        "onClick": function onClick() {
          return onBtnClick(0);
        },
        "title": now
      }, {
        icon: function icon() {
          return vue.createVNode(vue.resolveComponent("round-icon"), null, null);
        }
      }), vue.createVNode(vue.resolveComponent("t-button"), {
        "class": "".concat(COMPONENT_NAME, "-controller__btn"),
        "variant": "text",
        "onClick": function onClick() {
          return onBtnClick(1);
        },
        "title": nextLabel
      }, {
        icon: function icon() {
          return vue.createVNode(vue.resolveComponent("chevron-right-icon"), null, null);
        }
      })])]);
    }
  });

  var TDatePickerCell = vue.defineComponent({
    name: "TDatePickerCell",
    props: {
      text: [String, Number],
      value: Date,
      active: Boolean,
      highlight: Boolean,
      disabled: Boolean,
      startOfRange: Boolean,
      endOfRange: Boolean,
      additional: Boolean,
      now: Boolean,
      firstDayOfMonth: Boolean,
      lastDayOfMonth: Boolean,
      onClick: Function,
      onMouseEnter: {
        type: Function
      }
    },
    setup: function setup() {
      var COMPONENT_NAME = usePrefixClass("date-picker__cell");
      var name = usePrefixClass("date-picker-cell");
      return {
        name: name,
        COMPONENT_NAME: COMPONENT_NAME
      };
    },
    render: function render() {
      var _ref;

      var name = this.name,
          COMPONENT_NAME = this.COMPONENT_NAME,
          text = this.text,
          value = this.value,
          active = this.active,
          highlight = this.highlight,
          disabled = this.disabled,
          startOfRange = this.startOfRange,
          endOfRange = this.endOfRange,
          additional = this.additional,
          now = this.now,
          firstDayOfMonth = this.firstDayOfMonth,
          lastDayOfMonth = this.lastDayOfMonth,
          _onClick = this.onClick,
          onMouseEnter = this.onMouseEnter;
      var cellClass = [name, (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME, "--now"), now), _defineProperty$3(_ref, "".concat(COMPONENT_NAME, "--active"), active), _defineProperty$3(_ref, "".concat(COMPONENT_NAME, "--disabled"), disabled), _defineProperty$3(_ref, "".concat(COMPONENT_NAME, "--highlight"), highlight), _defineProperty$3(_ref, "".concat(COMPONENT_NAME, "--active-start"), startOfRange), _defineProperty$3(_ref, "".concat(COMPONENT_NAME, "--active-end"), endOfRange), _defineProperty$3(_ref, "".concat(COMPONENT_NAME, "--additional"), additional), _defineProperty$3(_ref, "".concat(COMPONENT_NAME, "--first-day-of-month"), firstDayOfMonth), _defineProperty$3(_ref, "".concat(COMPONENT_NAME, "--last-day-of-month"), lastDayOfMonth), _ref)];
      return vue.createVNode("td", {
        "class": cellClass
      }, [vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME, "-wrapper"),
        "onClick": function onClick(e) {
          if (!disabled) {
            _onClick(value, {
              e: e
            });
          }
        },
        "onMouseenter": function onMouseenter() {
          return onMouseEnter && onMouseEnter(value);
        }
      }, [vue.createVNode("span", {
        "class": "".concat(COMPONENT_NAME, "-text")
      }, [text])])]);
    }
  });

  var DAY_NAMES = ["\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D", "\u65E5"];
  var TDateTable = vue.defineComponent({
    name: "TDatePickerTable",
    components: {
      TDatePickerCell: TDatePickerCell
    },
    props: {
      type: {
        type: String,
        "default": "day"
      },
      data: Array,
      firstDayOfWeek: Number,
      dayNames: {
        type: Array,
        "default": function _default() {
          return DAY_NAMES;
        }
      },
      onCellClick: {
        type: Function
      },
      onCellMouseEnter: {
        type: Function
      }
    },
    setup: function setup() {
      var _useConfig = useConfig("datePicker"),
          global = _useConfig.global;

      return {
        global: global
      };
    },
    render: function render() {
      var _this = this;

      var _this$$props = this.$props,
          type = _this$$props.type,
          data = _this$$props.data,
          onCellClick = _this$$props.onCellClick,
          onCellMouseEnter = _this$$props.onCellMouseEnter,
          firstDayOfWeek = _this$$props.firstDayOfWeek;
      var weekdays = this.global.weekdays;
      var weekArr = [];
      var wi = firstDayOfWeek - 1;
      var len = weekdays.length;

      while (weekArr.length < len) {
        weekArr.push(weekdays[wi]);
        wi = (wi + len + 1) % len;
      }

      var panelClass = "t-date-picker--".concat(type);
      return vue.createVNode("div", {
        "class": panelClass
      }, [vue.createVNode("table", null, [type === "date" && vue.createVNode("thead", null, [vue.createVNode("tr", null, [weekArr.map(function (value, i) {
        return vue.createVNode("th", {
          "key": i
        }, [value]);
      })])]), vue.createVNode("tbody", null, [data.map(function (row, i) {
        return vue.createVNode("tr", {
          "key": i
        }, [row.map(function (col, j) {
          return vue.createVNode(vue.resolveComponent("t-date-picker-cell"), vue.mergeProps(col, _this.$attrs, {
            "key": j,
            "onClick": onCellClick,
            "onMouseEnter": onCellMouseEnter
          }), null);
        })]);
      })])])]);
    }
  });

  function _extends$1() {
    _extends$1 = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };
    return _extends$1.apply(this, arguments);
  }

  var toNumber$1 = toNumber_1;
  /** Used as references for various `Number` constants. */

  var INFINITY = 1 / 0,
      MAX_INTEGER = 1.7976931348623157e+308;
  /**
   * Converts `value` to a finite number.
   *
   * @static
   * @memberOf _
   * @since 4.12.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted number.
   * @example
   *
   * _.toFinite(3.2);
   * // => 3.2
   *
   * _.toFinite(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toFinite(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toFinite('3.2');
   * // => 3.2
   */

  function toFinite$1(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }

    value = toNumber$1(value);

    if (value === INFINITY || value === -INFINITY) {
      var sign = value < 0 ? -1 : 1;
      return sign * MAX_INTEGER;
    }

    return value === value ? value : 0;
  }

  var toFinite_1 = toFinite$1;

  var toFinite = toFinite_1;
  /**
   * Converts `value` to an integer.
   *
   * **Note:** This method is loosely based on
   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.toInteger(3.2);
   * // => 3
   *
   * _.toInteger(Number.MIN_VALUE);
   * // => 0
   *
   * _.toInteger(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toInteger('3.2');
   * // => 3
   */

  function toInteger$2(value) {
    var result = toFinite(value),
        remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
  }

  var toInteger_1 = toInteger$2;

  var baseSlice$1 = _baseSlice,
      isIterateeCall$1 = _isIterateeCall,
      toInteger$1 = toInteger_1;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeCeil = Math.ceil,
      nativeMax$1 = Math.max;
  /**
   * Creates an array of elements split into groups the length of `size`.
   * If `array` can't be split evenly, the final chunk will be the remaining
   * elements.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to process.
   * @param {number} [size=1] The length of each chunk
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the new array of chunks.
   * @example
   *
   * _.chunk(['a', 'b', 'c', 'd'], 2);
   * // => [['a', 'b'], ['c', 'd']]
   *
   * _.chunk(['a', 'b', 'c', 'd'], 3);
   * // => [['a', 'b', 'c'], ['d']]
   */

  function chunk(array, size, guard) {
    if (guard ? isIterateeCall$1(array, size, guard) : size === undefined) {
      size = 1;
    } else {
      size = nativeMax$1(toInteger$1(size), 0);
    }

    var length = array == null ? 0 : array.length;

    if (!length || size < 1) {
      return [];
    }

    var index = 0,
        resIndex = 0,
        result = Array(nativeCeil(length / size));

    while (index < length) {
      result[resIndex++] = baseSlice$1(array, index, index += size);
    }

    return result;
  }

  var chunk_1 = chunk;

  function firstUpperCase(str) {
    if (!str) return str;
    return str[0].toUpperCase().concat(str.substring(1, str.length));
  }

  function getFirstDayOfMonth(_ref) {
    var year = _ref.year,
        month = _ref.month;
    return new Date(year, month, 1);
  }

  function getDaysInMonth(_ref2) {
    var year = _ref2.year,
        month = _ref2.month;
    return new Date(year, month + 1, 0).getDate();
  }

  function getLastDayOfMonth(_ref3) {
    var year = _ref3.year,
        month = _ref3.month;
    return new Date(year, month, getDaysInMonth({
      year: year,
      month: month
    }));
  }

  function isSameYear(date1, date2) {
    return date1.getFullYear() === date2.getFullYear();
  }

  function isSameMonth(date1, date2) {
    return isSameYear(date1, date2) && date1.getMonth() === date2.getMonth();
  }

  function isSameDate(date1, date2) {
    return isSameMonth(date1, date2) && date1.getDate() === date2.getDate();
  }

  function isBetween(value, _ref4) {
    var start = _ref4.start,
        end = _ref4.end;
    var date = new Date(value.getFullYear(), value.getMonth(), value.getDate());
    var startTime = new Date(start.getFullYear(), start.getMonth(), start.getDate());
    var endTime = new Date(end.getFullYear(), end.getMonth(), end.getDate());
    return startTime <= date && endTime >= date;
  }

  function compareAsc(date1, date2) {
    var d1 = date1.getTime();
    var d2 = date2.getTime();
    if (d1 < d2) return -1;
    if (d1 > d2) return 1;
    return 0;
  }

  function isSame(date1, date2) {
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "date";
    var func = {
      isSameYear: isSameYear,
      isSameMonth: isSameMonth,
      isSameDate: isSameDate
    };
    return func["isSame".concat(firstUpperCase(type))](date1, date2);
  }
  function outOfRanges(d, min, max) {
    return min && compareAsc(d, min) === -1 || max && compareAsc(d, max) === 1;
  }
  function getToday() {
    var now = new Date();
    return new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);
  }
  function getDateObj(date) {
    var tempDate = date;

    if (!(date instanceof Date)) {
      tempDate = getToday();
    }

    return {
      year: tempDate.getFullYear(),
      month: tempDate.getMonth(),
      date: tempDate.getDate(),
      hours: tempDate.getHours(),
      minutes: tempDate.getMinutes(),
      seconds: tempDate.getSeconds(),
      meridiem: tempDate.getHours() > 11 ? "PM" : "AM"
    };
  }
  function setDateTime(d, hour, min, sec) {
    var _getDateObj = getDateObj(d),
        year = _getDateObj.year,
        month = _getDateObj.month,
        date = _getDateObj.date;

    return new Date(year, month, date, hour, min, sec, 0);
  }
  function subtractMonth(date, num) {
    var day = date.getDate();
    var newDate = new Date(date);
    var _num = num;

    while (_num--) {
      newDate.setDate(0);
    }

    newDate.setDate(day);
    return newDate;
  }
  function addMonth(date, num) {
    var _num = num;
    if (num < 0) _num = 0;
    var newDate = new Date(date);
    var year = date.getFullYear();

    var month = date.getMonth() + _num;

    var day = newDate.getDate();
    newDate.setDate(1);
    newDate.setMonth(month);
    newDate.setDate(Math.min(day, getDaysInMonth({
      year: year,
      month: month
    })));
    return newDate;
  }
  function getWeeks(_ref5, _ref6) {
    var year = _ref5.year,
        month = _ref5.month;
    var firstDayOfWeek = _ref6.firstDayOfWeek,
        _ref6$disableDate = _ref6.disableDate,
        disableDate = _ref6$disableDate === void 0 ? function () {
      return false;
    } : _ref6$disableDate,
        minDate = _ref6.minDate,
        maxDate = _ref6.maxDate;
    var prependDay = getFirstDayOfMonth({
      year: year,
      month: month
    });
    var appendDay = getLastDayOfMonth({
      year: year,
      month: month
    });
    var maxDays = getDaysInMonth({
      year: year,
      month: month
    });
    var daysArr = [];
    var i = 1;
    var today = getToday();

    for (i; i <= maxDays; i++) {
      var currentDay = new Date(year, month, i);
      daysArr.push({
        text: i,
        active: false,
        value: currentDay,
        disabled: typeof disableDate === "function" && disableDate(currentDay) || outOfRanges(currentDay, minDate, maxDate),
        now: isSame(today, currentDay),
        firstDayOfMonth: i === 1,
        lastDayOfMonth: i === maxDays,
        type: "current-month"
      });
    }

    if (prependDay.getDay() !== firstDayOfWeek) {
      prependDay.setDate(0);

      while (true) {
        daysArr.unshift({
          text: prependDay.getDate().toString(),
          active: false,
          value: new Date(prependDay),
          disabled: typeof disableDate === "function" && disableDate(prependDay) || outOfRanges(prependDay, minDate, maxDate),
          additional: true,
          type: "prev-month"
        });
        prependDay.setDate(prependDay.getDate() - 1);
        if (prependDay.getDay() === Math.abs(firstDayOfWeek + 6) % 7) break;
      }
    }

    var LEN = 42;

    while (daysArr.length < LEN) {
      appendDay.setDate(appendDay.getDate() + 1);
      daysArr.push({
        text: appendDay.getDate(),
        active: false,
        value: new Date(appendDay),
        disabled: typeof disableDate === "function" && disableDate(appendDay) || outOfRanges(appendDay, minDate, maxDate),
        additional: true,
        type: "next-month"
      });
    }

    return chunk_1(daysArr, 7);
  }
  function getYears(year, _ref7) {
    var _ref7$disableDate = _ref7.disableDate,
        disableDate = _ref7$disableDate === void 0 ? function () {
      return false;
    } : _ref7$disableDate,
        minDate = _ref7.minDate,
        maxDate = _ref7.maxDate;
    var startYear = parseInt((year / 10).toString(), 10) * 10;
    var endYear = startYear + 9;
    var yearArr = [];
    var today = getToday();

    for (var i = startYear; i <= endYear; i++) {
      var date = new Date(i, 1);
      var disabledMonth = 0;
      var outOfRangeMonth = 0;

      for (var j = 0; j < 12; j++) {
        var d = new Date(i, j);
        if (typeof disableDate === "function" && disableDate(d)) disabledMonth += 1;
        if (outOfRanges(d, minDate, maxDate)) outOfRangeMonth += 1;
      }

      yearArr.push({
        value: date,
        now: isSame(date, today, "year"),
        disabled: disabledMonth === 12 || outOfRangeMonth === 12,
        active: false,
        text: "".concat(date.getFullYear())
      });
    }

    return chunk_1(yearArr, 4);
  }
  function getMonths(year, params) {
    var _params$disableDate = params.disableDate,
        disableDate = _params$disableDate === void 0 ? function () {
      return false;
    } : _params$disableDate,
        minDate = params.minDate,
        maxDate = params.maxDate,
        monthLocal = params.monthLocal;
    var MonthArr = [];
    var today = getToday();

    for (var i = 0; i <= 11; i++) {
      var date = new Date(year, i);
      var disabledDay = 0;
      var outOfRangeDay = 0;
      var daysInMonth = getDaysInMonth({
        year: year,
        month: i
      });

      for (var j = 1; j <= daysInMonth; j++) {
        var d = new Date(year, i, j);
        if (typeof disableDate === "function" && disableDate(d)) disabledDay += 1;
        if (outOfRanges(d, minDate, maxDate)) outOfRangeDay += 1;
      }

      MonthArr.push({
        value: date,
        now: isSame(date, today, "month"),
        disabled: disabledDay === daysInMonth || outOfRangeDay === daysInMonth,
        active: false,
        text: monthLocal[date.getMonth()]
      });
    }

    return chunk_1(MonthArr, 4);
  }
  function flagActive(data, _ref8) {
    var args = _extends$1({}, _ref8);

    var start = args.start,
        end = args.end,
        _args$type = args.type,
        type = _args$type === void 0 ? "date" : _args$type;

    if (!end) {
      return data.map(function (row) {
        return row.map(function (item) {
          var _item = item;
          _item.active = isSame(item.value, start, type);
          return _item;
        });
      });
    }

    return data.map(function (row) {
      return row.map(function (item) {
        var _item = item;
        var date = item.value;
        var isStart = isSame(start, date, type);
        var isEnd = isSame(end, date, type);
        _item.active = isStart || isEnd;
        _item.highlight = isBetween(date, {
          start: start,
          end: end
        });
        _item.startOfRange = isStart;
        _item.endOfRange = isEnd;
        return _item;
      });
    });
  }
  function extractTimeFormat(dateFormat) {
    var res = dateFormat.match(/(a\s)?h{1,2}:m{1,2}(:s{1,2})?(\sa)?/i);
    if (!res) return null;
    return res[0];
  }

  var TDate = vue.defineComponent({
    name: "TDatePickerPanel",
    components: {
      TDateHeader: TDateHeader,
      TDateTable: TDateTable
    },
    inheritAttrs: false,
    props: {
      global: {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      value: {
        type: Date,
        "default": function _default() {
          return getToday();
        }
      },
      mode: props$x.mode,
      minDate: Date,
      maxDate: Date,
      firstDayOfWeek: props$x.firstDayOfWeek,
      disableDate: props$x.disableDate,
      onChange: props$x.onChange
    },
    emits: ["change"],
    setup: function setup() {
      var COMPONENT_NAME = usePrefixClass("date-picker__panel");
      return {
        COMPONENT_NAME: COMPONENT_NAME
      };
    },
    data: function data() {
      return {
        year: this.value.getFullYear(),
        month: this.value.getMonth(),
        type: this.mode
      };
    },
    computed: {
      tableData: function tableData() {
        var year = this.year,
            month = this.month,
            type = this.type,
            value = this.value,
            mode = this.mode,
            disableDate = this.disableDate,
            minDate = this.minDate,
            maxDate = this.maxDate,
            firstDayOfWeek = this.firstDayOfWeek,
            global = this.global;
        var data;
        var options = {
          disableDate: disableDate,
          minDate: minDate,
          maxDate: maxDate,
          firstDayOfWeek: firstDayOfWeek,
          monthLocal: global.months
        };

        switch (type) {
          case "date":
            data = getWeeks({
              year: year,
              month: month
            }, options);
            break;

          case "month":
            data = getMonths(year, options);
            break;

          case "year":
            data = getYears(year, options);
            break;
        }

        var start = type === "date" || type === mode ? value : new Date(year, month);
        return flagActive(data, {
          start: start,
          type: type
        });
      }
    },
    watch: {
      mode: function mode(value) {
        this.type = value;
      },
      value: function value(_value) {
        this.year = _value.getFullYear();
        this.month = _value.getMonth();
      }
    },
    methods: {
      getClickHandler: function getClickHandler() {
        return this["click".concat(firstUpperCase(this.type))];
      },
      clickDate: function clickDate(date) {
        this.$emit("change", date);
      },
      clickMonth: function clickMonth(date) {
        if (this.mode === "month") {
          this.$emit("change", date);
        } else {
          this.type = "date";
          this.year = date.getFullYear();
          this.month = date.getMonth();
        }
      },
      clickYear: function clickYear(date) {
        if (this.mode === "year") {
          this.$emit("change", date);
        } else {
          this.type = "month";
          this.year = date.getFullYear();
        }
      },
      clickHeader: function clickHeader(flag) {
        var monthCount = 0;
        var next = null;

        switch (this.type) {
          case "date":
            monthCount = 1;
            break;

          case "month":
            monthCount = 12;
            break;

          case "year":
            monthCount = 120;
        }

        var current = new Date(this.year, this.month);

        switch (flag) {
          case 1:
            next = addMonth(current, monthCount);
            break;

          case -1:
            next = subtractMonth(current, monthCount);
            break;

          case 0:
            next = new Date();
            break;
        }

        this.year = next.getFullYear();
        this.month = next.getMonth();
      },
      onTypeChange: function onTypeChange(type) {
        this.type = type;
      }
    },
    render: function render() {
      var year = this.year,
          month = this.month,
          type = this.type,
          tableData = this.tableData,
          firstDayOfWeek = this.firstDayOfWeek,
          COMPONENT_NAME = this.COMPONENT_NAME;
      return vue.createVNode("div", {
        "class": COMPONENT_NAME,
        "onClick": function onClick(e) {
          return e.stopPropagation();
        }
      }, [vue.createVNode(vue.resolveComponent("t-date-header"), {
        "year": year,
        "month": month,
        "type": type,
        "onBtnClick": this.clickHeader,
        "onTypeChange": this.onTypeChange
      }, null), vue.createVNode(vue.resolveComponent("t-date-table"), {
        "type": type,
        "firstDayOfWeek": firstDayOfWeek,
        "data": tableData,
        "onCellClick": this.getClickHandler()
      }, null)]);
    }
  });

  var TODAY = getToday();
  var LEFT = "left";
  var RIGHT = "right";
  var TDateRange = vue.defineComponent({
    name: "TDatePickerDateRange",
    components: {
      TDateHeader: TDateHeader,
      TDateTable: TDateTable
    },
    inheritAttrs: false,
    props: {
      global: {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      mode: {
        type: String,
        "default": "date",
        validator: function validator(v) {
          return ["year", "month", "date"].indexOf(v) > -1;
        }
      },
      value: {
        type: Array,
        "default": function _default() {
          return [TODAY, TODAY];
        }
      },
      minDate: Date,
      maxDate: Date,
      firstDayOfWeek: props$x.firstDayOfWeek,
      disableDate: props$x.disableDate,
      onChange: props$x.onChange,
      onPick: Function
    },
    emits: ["change"],
    setup: function setup() {
      var COMPONENT_NAME = usePrefixClass("date-picker");
      return {
        COMPONENT_NAME: COMPONENT_NAME
      };
    },
    data: function data() {
      return {
        leftYear: null,
        leftMonth: null,
        rightMonth: null,
        rightYear: null,
        leftType: this.mode,
        rightType: this.mode,
        startValue: null,
        endValue: null,
        isFirstClick: true,
        firstClickValue: null
      };
    },
    computed: {
      leftData: function leftData() {
        return this.getData({
          year: this.leftYear,
          month: this.leftMonth,
          type: this.leftType
        });
      },
      rightData: function rightData() {
        return this.getData({
          year: this.rightYear,
          month: this.rightMonth,
          type: this.rightType
        });
      }
    },
    watch: {
      value: {
        handler: function handler(value) {
          var _value = _slicedToArray(value, 2),
              _value$ = _value[0],
              startValue = _value$ === void 0 ? TODAY : _value$,
              _value$2 = _value[1],
              endValue = _value$2 === void 0 ? TODAY : _value$2;

          this.startValue = startValue;
          this.endValue = endValue;
        },
        immediate: true
      },
      mode: function mode(value) {
        this.leftType = value;
        this.rightType = value;
      }
    },
    created: function created() {
      this.initialPicker();
    },
    beforeUnmount: function beforeUnmount() {
      this.initialPicker();
    },
    methods: {
      initialPicker: function initialPicker() {
        var data = this.getLeftAndRightDataFromValue(this.value);
        this.leftYear = data.leftYear;
        this.leftMonth = data.leftMonth;
        this.rightYear = data.rightYear;
        this.rightMonth = data.rightMonth;
        this.leftType = this.mode;
        this.rightType = this.mode;

        var _this$value = _slicedToArray(this.value, 2),
            startValue = _this$value[0],
            endValue = _this$value[1];

        this.startValue = startValue;
        this.endValue = endValue;
        this.isFirstClick = true;
        this.firstClickValue = TODAY;
      },
      getLeftAndRightDataFromValue: function getLeftAndRightDataFromValue(value) {
        var _ref = value || this.value,
            _ref2 = _slicedToArray(_ref, 2),
            _ref2$ = _ref2[0],
            startValue = _ref2$ === void 0 ? TODAY : _ref2$,
            _ref2$2 = _ref2[1],
            endValue = _ref2$2 === void 0 ? TODAY : _ref2$2;

        var leftYear = startValue.getFullYear();
        var leftMonth = startValue.getMonth();
        var rightMonth = endValue.getMonth();
        var rightYear = endValue.getFullYear();

        if (this.mode === "date" && isSame(startValue, endValue, "month")) {
          var next = addMonth(endValue, 1);
          rightMonth = addMonth(endValue, 1).getMonth();
          rightYear = next.getFullYear();
        }

        if (this.mode === "month" && isSame(startValue, endValue, "year")) {
          rightYear = leftYear + 1;
        }

        if (this.mode === "year" && isSame(startValue, endValue, "year")) {
          rightYear = leftYear + 10;
        }

        return {
          leftYear: leftYear,
          leftMonth: leftMonth,
          rightMonth: rightMonth,
          rightYear: rightYear
        };
      },
      getData: function getData(_ref3) {
        var year = _ref3.year,
            month = _ref3.month,
            type = _ref3.type;
        var disableDate = this.disableDate,
            minDate = this.minDate,
            maxDate = this.maxDate,
            startValue = this.startValue,
            endValue = this.endValue,
            firstDayOfWeek = this.firstDayOfWeek;
        var data;
        var start = startValue;
        var end = endValue;
        var options = {
          disableDate: disableDate,
          minDate: minDate,
          maxDate: maxDate,
          firstDayOfWeek: firstDayOfWeek,
          monthLocal: this.global.months
        };

        switch (type) {
          case "date":
            data = getWeeks({
              year: year,
              month: month
            }, options);
            break;

          case "month":
            data = getMonths(year, options);
            break;

          case "year":
            data = getYears(year, options);
            break;
        }

        return flagActive(data, {
          start: start,
          end: end,
          type: type
        });
      },
      getClickHandler: function getClickHandler(direction, date, e) {
        var type = this["".concat(direction, "Type")];
        return this["click".concat(firstUpperCase(type))](date, e, direction);
      },
      clickHeader: function clickHeader(flag, direction) {
        var year = this["".concat(direction, "Year")];
        var month = this["".concat(direction, "Month")];
        var type = this["".concat(direction, "Type")];
        var monthCount;
        var next;

        switch (type) {
          case "date":
            monthCount = 1;
            break;

          case "month":
            monthCount = 12;
            break;

          case "year":
            monthCount = 120;
        }

        var current = new Date(year, month);

        if (flag === 1) {
          next = addMonth(current, monthCount);
        } else if (flag === -1) {
          next = subtractMonth(current, monthCount);
        } else {
          next = new Date();
        }

        this["".concat(direction, "Year")] = next.getFullYear();
        this["".concat(direction, "Month")] = next.getMonth();
      },
      clickDate: function clickDate(date, e) {
        var partial = "start";

        if (this.isFirstClick) {
          this.startValue = date;
          this.endValue = date;
          this.isFirstClick = false;
          this.firstClickValue = date;
        } else {
          if (dayjs(this.firstClickValue).isBefore(dayjs(date), "day")) {
            this.endValue = date;
          } else {
            this.endValue = this.firstClickValue;
            this.startValue = date;
          }

          this.$props.onChange([setDateTime(this.startValue, 0, 0, 0), setDateTime(this.endValue, 23, 59, 59)]);
          this.isFirstClick = true;
          partial = "end";
        }

        this.$props.onPick && this.$props.onPick(date, {
          e: e,
          partial: partial
        });
      },
      clickYear: function clickYear(date, e, type) {
        if (this.mode === "year") {
          if (this.isFirstClick) {
            this.startValue = date;
            this.isFirstClick = false;
            this.firstClickValue = date;
          } else {
            this.$props.onChange([this.startValue, this.endValue]);
            this.isFirstClick = true;
          }
        } else {
          this["".concat(type, "Type")] = "month";
          this["".concat(type, "Year")] = date.getFullYear();
        }
      },
      clickMonth: function clickMonth(date, e, type) {
        if (this.mode === "month") {
          if (this.isFirstClick) {
            this.startValue = date;
            this.isFirstClick = false;
            this.firstClickValue = date;
          } else {
            if (this.endValue < this.startValue) {
              this.endValue = this.startValue;
            }

            this.$props.onChange([this.startValue, this.endValue]);
            this.isFirstClick = true;
          }
        } else {
          this["".concat(type, "Type")] = "date";
          this["".concat(type, "Month")] = date.getMonth();
          this["".concat(type, "Year")] = date.getFullYear();
        }
      },
      onMouseEnter: function onMouseEnter(date) {
        if (this.isFirstClick) {
          return;
        }

        if (this.firstClickValue.getTime() > date.getTime()) {
          this.startValue = date;
          this.endValue = this.firstClickValue;
        } else {
          this.startValue = this.firstClickValue;
          this.endValue = date;
        }
      },
      onTypeChange: function onTypeChange() {
        this.startValue = this.firstClickValue;
        this.endValue = this.firstClickValue;
      },
      handleTypeChange: function handleTypeChange(direction, type) {
        this["".concat(direction, "Type")] = type;
      }
    },
    render: function render() {
      var _this = this;

      var COMPONENT_NAME = this.COMPONENT_NAME,
          leftYear = this.leftYear,
          leftMonth = this.leftMonth,
          leftType = this.leftType,
          leftData = this.leftData,
          rightYear = this.rightYear,
          rightMonth = this.rightMonth,
          rightType = this.rightType,
          rightData = this.rightData,
          firstDayOfWeek = this.firstDayOfWeek;
      return vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME, "__panels"),
        "onClick": function onClick(e) {
          return e.stopPropagation();
        }
      }, [vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME, "__panel")
      }, [vue.createVNode(vue.resolveComponent("t-date-header"), {
        "year": leftYear,
        "month": leftMonth,
        "type": leftType,
        "onBtnClick": function onBtnClick(flag) {
          return _this.clickHeader(flag, LEFT);
        },
        "onTypeChange": function onTypeChange(type) {
          return _this.handleTypeChange(LEFT, type);
        }
      }, null), vue.createVNode(vue.resolveComponent("t-date-table"), {
        "type": leftType,
        "first-day-of-week": firstDayOfWeek,
        "data": leftData,
        "onCellClick": function onCellClick(date, e) {
          return _this.getClickHandler(LEFT, date, e);
        },
        "onCellMouseEnter": this.onMouseEnter
      }, null)]), vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME, "__panel")
      }, [vue.createVNode(vue.resolveComponent("t-date-header"), {
        "year": rightYear,
        "month": rightMonth,
        "type": rightType,
        "onBtnClick": function onBtnClick(flag) {
          return _this.clickHeader(flag, RIGHT);
        },
        "onTypeChange": function onTypeChange(type) {
          return _this.handleTypeChange(RIGHT, type);
        }
      }, null), vue.createVNode(vue.resolveComponent("t-date-table"), {
        "type": rightType,
        "first-day-of-week": firstDayOfWeek,
        "data": rightData,
        "onUpdateType": this.onTypeChange,
        "onCellClick": function onCellClick(date, e) {
          return _this.getClickHandler(RIGHT, date, e);
        },
        "onCellMouseEnter": this.onMouseEnter
      }, null)])]);
    }
  });

  var customParseFormat$1 = {exports: {}};

  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      var e = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
      },
          t = /(\[[^[]*\])|([-:/.()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,
          n = /\d\d/,
          r = /\d\d?/,
          i = /\d*[^\s\d-_:/()]+/,
          o = {},
          s = function s(e) {
        return (e = +e) + (e > 68 ? 1900 : 2e3);
      };

      var a = function a(e) {
        return function (t) {
          this[e] = +t;
        };
      },
          f = [/[+-]\d\d:?(\d\d)?|Z/, function (e) {
        (this.zone || (this.zone = {})).offset = function (e) {
          if (!e) return 0;
          if ("Z" === e) return 0;
          var t = e.match(/([+-]|\d\d)/g),
              n = 60 * t[1] + (+t[2] || 0);
          return 0 === n ? 0 : "+" === t[0] ? -n : n;
        }(e);
      }],
          h = function h(e) {
        var t = o[e];
        return t && (t.indexOf ? t : t.s.concat(t.f));
      },
          u = function u(e, t) {
        var n,
            r = o.meridiem;

        if (r) {
          for (var i = 1; i <= 24; i += 1) {
            if (e.indexOf(r(i, 0, t)) > -1) {
              n = i > 12;
              break;
            }
          }
        } else n = e === (t ? "pm" : "PM");

        return n;
      },
          d = {
        A: [i, function (e) {
          this.afternoon = u(e, !1);
        }],
        a: [i, function (e) {
          this.afternoon = u(e, !0);
        }],
        S: [/\d/, function (e) {
          this.milliseconds = 100 * +e;
        }],
        SS: [n, function (e) {
          this.milliseconds = 10 * +e;
        }],
        SSS: [/\d{3}/, function (e) {
          this.milliseconds = +e;
        }],
        s: [r, a("seconds")],
        ss: [r, a("seconds")],
        m: [r, a("minutes")],
        mm: [r, a("minutes")],
        H: [r, a("hours")],
        h: [r, a("hours")],
        HH: [r, a("hours")],
        hh: [r, a("hours")],
        D: [r, a("day")],
        DD: [n, a("day")],
        Do: [i, function (e) {
          var t = o.ordinal,
              n = e.match(/\d+/);
          if (this.day = n[0], t) for (var r = 1; r <= 31; r += 1) {
            t(r).replace(/\[|\]/g, "") === e && (this.day = r);
          }
        }],
        M: [r, a("month")],
        MM: [n, a("month")],
        MMM: [i, function (e) {
          var t = h("months"),
              n = (h("monthsShort") || t.map(function (e) {
            return e.slice(0, 3);
          })).indexOf(e) + 1;
          if (n < 1) throw new Error();
          this.month = n % 12 || n;
        }],
        MMMM: [i, function (e) {
          var t = h("months").indexOf(e) + 1;
          if (t < 1) throw new Error();
          this.month = t % 12 || t;
        }],
        Y: [/[+-]?\d+/, a("year")],
        YY: [n, function (e) {
          this.year = s(e);
        }],
        YYYY: [/\d{4}/, a("year")],
        Z: f,
        ZZ: f
      };

      function c(n) {
        var r, i;
        r = n, i = o && o.formats;

        for (var s = (n = r.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function (t, n, r) {
          var o = r && r.toUpperCase();
          return n || i[r] || e[r] || i[o].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function (e, t, n) {
            return t || n.slice(1);
          });
        })).match(t), a = s.length, f = 0; f < a; f += 1) {
          var h = s[f],
              u = d[h],
              c = u && u[0],
              l = u && u[1];
          s[f] = l ? {
            regex: c,
            parser: l
          } : h.replace(/^\[|\]$/g, "");
        }

        return function (e) {
          for (var t = {}, n = 0, r = 0; n < a; n += 1) {
            var i = s[n];
            if ("string" == typeof i) r += i.length;else {
              var o = i.regex,
                  f = i.parser,
                  h = e.slice(r),
                  u = o.exec(h)[0];
              f.call(t, u), e = e.replace(u, "");
            }
          }

          return function (e) {
            var t = e.afternoon;

            if (void 0 !== t) {
              var n = e.hours;
              t ? n < 12 && (e.hours += 12) : 12 === n && (e.hours = 0), delete e.afternoon;
            }
          }(t), t;
        };
      }

      return function (e, t, n) {
        n.p.customParseFormat = !0, e && e.parseTwoDigitYear && (s = e.parseTwoDigitYear);
        var r = t.prototype,
            i = r.parse;

        r.parse = function (e) {
          var t = e.date,
              r = e.utc,
              s = e.args;
          this.$u = r;
          var a = s[1];

          if ("string" == typeof a) {
            var f = !0 === s[2],
                h = !0 === s[3],
                u = f || h,
                d = s[2];
            h && (d = s[2]), o = this.$locale(), !f && d && (o = n.Ls[d]), this.$d = function (e, t, n) {
              try {
                if (["x", "X"].indexOf(t) > -1) return new Date(("X" === t ? 1e3 : 1) * e);
                var r = c(t)(e),
                    i = r.year,
                    o = r.month,
                    s = r.day,
                    a = r.hours,
                    f = r.minutes,
                    h = r.seconds,
                    u = r.milliseconds,
                    d = r.zone,
                    l = new Date(),
                    m = s || (i || o ? 1 : l.getDate()),
                    M = i || l.getFullYear(),
                    Y = 0;
                i && !o || (Y = o > 0 ? o - 1 : l.getMonth());
                var p = a || 0,
                    v = f || 0,
                    D = h || 0,
                    g = u || 0;
                return d ? new Date(Date.UTC(M, Y, m, p, v, D, g + 60 * d.offset * 1e3)) : n ? new Date(Date.UTC(M, Y, m, p, v, D, g)) : new Date(M, Y, m, p, v, D, g);
              } catch (e) {
                return new Date("");
              }
            }(t, a, r), this.init(), d && !0 !== d && (this.$L = this.locale(d).$L), u && t != this.format(a) && (this.$d = new Date("")), o = {};
          } else if (a instanceof Array) for (var l = a.length, m = 1; m <= l; m += 1) {
            s[1] = a[m - 1];
            var M = n.apply(this, s);

            if (M.isValid()) {
              this.$d = M.$d, this.$L = M.$L, this.init();
              break;
            }

            m === l && (this.$d = new Date(""));
          } else i.call(this, e);
        };
      };
    });
  })(customParseFormat$1);

  var customParseFormat = customParseFormat$1.exports;

  var EPickerCols = /* @__PURE__ */function (EPickerCols2) {
    EPickerCols2["hour"] = "hour";
    EPickerCols2["minute"] = "minute";
    EPickerCols2["second"] = "second";
    EPickerCols2["meridiem"] = "meridiem";
    return EPickerCols2;
  }(EPickerCols || {});
  var AM = "AM";
  var PM = "PM";
  var MERIDIEM_LIST = [AM, PM];
  var amFormat = /^(a|A)\s+?[h]{1,2}(:[m]{1,2}(:[s]{1,2})?)?$/;
  var pmFormat = /^[h]{1,2}(:[m]{1,2}(:[s]{1,2})?)?(\s+(a|A))?$/;
  var TIME_PICKER_EMPTY = [void 0, void 0];
  var KeyboardDirection = /* @__PURE__ */function (KeyboardDirection2) {
    KeyboardDirection2[KeyboardDirection2["left"] = 37] = "left";
    KeyboardDirection2[KeyboardDirection2["up"] = 38] = "up";
    KeyboardDirection2[KeyboardDirection2["right"] = 39] = "right";
    KeyboardDirection2[KeyboardDirection2["down"] = 40] = "down";
    return KeyboardDirection2;
  }(KeyboardDirection || {});
  var EMPTY_VALUE = -1;

  var props$w = {
    allowInput: Boolean,
    clearable: Boolean,
    disabled: Boolean,
    disableTime: {
      type: Function
    },
    format: {
      type: String,
      "default": "HH:mm:ss"
    },
    hideDisabledTime: {
      type: Boolean,
      "default": true
    },
    placeholder: {
      type: String,
      "default": ""
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    steps: {
      type: Array,
      "default": function _default() {
        return [1, 1, 1];
      }
    },
    value: {
      type: String,
      "default": ""
    },
    modelValue: {
      type: String,
      "default": ""
    },
    defaultValue: {
      type: String,
      "default": ""
    },
    onBlur: Function,
    onChange: Function,
    onClose: Function,
    onFocus: Function,
    onInput: Function,
    onOpen: Function
  };

  function ownKeys$1b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1b(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var BooleanType = {
    type: Boolean,
    "default": true,
    validator: function validator(v) {
      return typeof v === "boolean";
    }
  };
  var panelProps = function panelProps() {
    return {
      disabled: _objectSpread$1a(_objectSpread$1a({}, BooleanType), {
        "default": false
      }),
      isFocus: _objectSpread$1a(_objectSpread$1a({}, BooleanType), {
        "default": false
      }),
      value: {
        type: Array,
        "default": function _default() {
          return [dayjs()];
        }
      },
      format: {
        type: String,
        "default": "HH:mm:ss"
      },
      steps: _objectSpread$1a({
        type: Array
      }, {
        "default": [1, 1, 1]
      }),
      isShowPanel: _objectSpread$1a(_objectSpread$1a({}, BooleanType), {
        "default": false
      }),
      hideDisabledTime: _objectSpread$1a({}, props$w.hideDisabledTime),
      disableTime: _objectSpread$1a({}, props$w.disableTime),
      isFooterDisplay: _objectSpread$1a({}, BooleanType)
    };
  };
  var panelColProps = function panelColProps() {
    return {
      format: {
        type: String,
        "default": "HH:mm:ss"
      },
      cols: {
        type: Array,
        "default": function _default() {
          return [EPickerCols.hour, EPickerCols.minute, EPickerCols.second];
        }
      },
      value: _objectSpread$1a({
        type: Object
      }, {
        "default": function _default() {
          return dayjs();
        }
      }),
      range: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      steps: _objectSpread$1a({
        type: Array
      }, {
        "default": [1, 1, 1]
      }),
      hideDisabledTime: _objectSpread$1a({}, props$w.hideDisabledTime),
      disableTime: _objectSpread$1a({}, props$w.disableTime),
      localeMeridiems: {
        type: Array
      }
    };
  };

  dayjs.extend(customParseFormat);
  var PanelCol = vue.defineComponent({
    name: "TTimePickerPanelCol",
    props: panelColProps(),
    emits: ["time-pick"],
    setup: function setup() {
      var COMPONENT_NAME = usePrefixClass("time-picker");

      var _useCommonClassName = useCommonClassName$2(),
          STATUS = _useCommonClassName.STATUS;

      return {
        COMPONENT_NAME: COMPONENT_NAME,
        STATUS: STATUS
      };
    },
    data: function data() {
      return {
        splitValue: /* @__PURE__ */Object.create(null),
        timeArr: [EPickerCols.hour, EPickerCols.minute, EPickerCols.second]
      };
    },
    computed: {
      valStr: function valStr() {
        return dayjs(this.value, this.format).format(this.format);
      },
      isPm: function isPm() {
        return dayjs(this.valStr, this.format).hour() >= 12;
      },
      currentTimes: function currentTimes() {
        return [Number(this.value.get("hour")), Number(this.value.get("minute")), Number(this.value.get("second"))];
      },
      timeItemMargin: function timeItemMargin() {
        var _this$$el, _this$$el$querySelect;

        var maskDom = (_this$$el = this.$el) === null || _this$$el === void 0 ? void 0 : (_this$$el$querySelect = _this$$el.querySelector) === null || _this$$el$querySelect === void 0 ? void 0 : _this$$el$querySelect.call(_this$$el, ".".concat(this.COMPONENT_NAME, "__panel-body-active-mask > div"));
        return maskDom && parseInt(getComputedStyle(maskDom).margin, 10);
      }
    },
    methods: {
      getTimeItemHeight: function getTimeItemHeight(col) {
        var cols = this.$refs["".concat(col, "_scroller")];
        return cols.querySelector("li").offsetHeight;
      },
      generateColTime: function generateColTime(col) {
        var res;
        var count;

        if (this.timeArr.includes(col)) {
          var colIdx = this.timeArr.indexOf(col);

          if (col === EPickerCols.hour) {
            count = /[h]{1}/.test(this.format) ? 11 : 23;
          } else {
            count = 59;
          }

          res = this.generateTimeList(count, Number(this.steps[colIdx]));
        } else {
          res = this.localeMeridiems;
        }

        return res;
      },
      generateTimeList: function generateTimeList(num, step) {
        var res = [];
        var count = 0;

        while (count <= num) {
          if (!/[h]{1}/.test(this.format) && count < 10) {
            res.push("0".concat(count));
          } else {
            res.push(count);
          }

          count += step;
        }

        return res;
      },
      disableFilter: function disableFilter(preIdx, col) {
        var _this = this;

        var filteredIdx = preIdx;

        if (this.hideDisabledTime && this.disableTime) {
          var timeList = this.generateColTime(col);
          var index = this.timeArr.indexOf(col);
          filteredIdx = timeList.filter(function (t) {
            var params = _this.currentTimes;
            params[index] = Number(t);
            return _this.disableTime && !_this.disableTime.apply(_this, params);
          }).indexOf(preIdx);
        }

        return filteredIdx;
      },
      calculateTimeIdx: function calculateTimeIdx(time, step, type) {
        var timeIdx = time;
        timeIdx = this.disableFilter(Number(timeIdx), type);
        return Math.floor(Number(timeIdx) / Number(step));
      },
      getScrollDistance: function getScrollDistance(col, time) {
        var timeIndex;

        if (this.timeArr.includes(col)) {
          var colIdx = this.timeArr.indexOf(col);
          timeIndex = this.calculateTimeIdx(time, this.steps[colIdx], col);

          if (col === EPickerCols.hour && /[h]{1}/.test(this.format)) {
            timeIndex %= 12;
          }
        } else {
          timeIndex = this.localeMeridiems.indexOf(time.toUpperCase());
        }

        var timeItemTotalHeight = this.getTimeItemHeight(col) + this.timeItemMargin;
        var distance = timeIndex * timeItemTotalHeight + timeItemTotalHeight / 2;
        return distance;
      },
      scrollToTime: function scrollToTime(col, time) {
        var behavior = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "auto";
        var distance = this.getScrollDistance(col, time);
        var scroller = this.$refs["".concat(col, "_scroller")];
        if (!distance || !scroller) return;
        if (scroller.scrollTop === distance) return;
        scroller.scrollTo({
          top: distance,
          behavior: behavior
        });
      },
      updateTimeScrollPos: function updateTimeScrollPos() {
        var _this2 = this;

        var hour = EPickerCols.hour,
            minute = EPickerCols.minute,
            second = EPickerCols.second;
        var isNormalScroll = this.steps.filter(function (step) {
          return step !== 1;
        }).length < 1 || Number(this.splitValue[hour]) !== Number(this.steps[0]) - 1 || Number(this.splitValue[minute]) !== Number(this.steps[1]) - 1 || Number(this.splitValue[second]) !== Number(this.steps[2]) - 1;
        this.cols.forEach(function (col) {
          isNormalScroll ? _this2.scrollToTime(col, _this2.splitValue[col]) : _this2.scrollToTime(col, 0);
        });
      },
      generateColRows: function generateColRows(col) {
        var _this3 = this;

        return this.generateColTime(col).map(function (el) {
          var _ref;

          if (!_this3.timeItemCanUsed(col, el) && _this3.hideDisabledTime) return null;

          var isCurrent = _this3.isCurrent(col, el);

          if (isCurrent) {
            _this3.splitValue[col] = el;
          }

          var classNames = ["".concat(_this3.COMPONENT_NAME, "__panel-body-scroll-item"), (_ref = {}, _defineProperty$3(_ref, _this3.STATUS.disabled, !_this3.timeItemCanUsed(col, el)), _defineProperty$3(_ref, _this3.STATUS.current, isCurrent), _ref)];
          return vue.createVNode("li", {
            "class": classNames,
            "onClick": function onClick(e) {
              return _this3.handleTimeItemClick(e, col, el);
            }
          }, [el]);
        });
      },
      handleTimeItemClick: function handleTimeItemClick(_e, col, time) {
        var canUse = this.timeItemCanUsed(col, time);

        if (canUse) {
          this.scrollToTime(col, time, "smooth");
          this.$emit("time-pick", col, time);
        }
      },
      isCurrent: function isCurrent(col, colItem) {
        var colVal;

        switch (col) {
          case EPickerCols.meridiem:
            return this.isPm === (colItem === this.localeMeridiems[1]);

          case EPickerCols.hour:
          case EPickerCols.minute:
          case EPickerCols.second:
            colVal = this.value.get(col);

            if (col === EPickerCols.hour && /[h]{1}/.test(this.format)) {
              colVal %= 12;
            }

            return colVal === Number(colItem);
        }
      },
      timeItemCanUsed: function timeItemCanUsed(col, time) {
        if (this.timeArr.includes(col)) {
          var index = this.timeArr.indexOf(col);
          var params = this.currentTimes;
          params[index] = Number(time);
          return !(this.disableTime && this.disableTime.apply(this, params));
        }

        return true;
      },
      renderScrollers: function renderScrollers() {
        var _this4 = this;

        return this.cols.map(function (col) {
          return _this4.renderScroller(col);
        });
      },
      renderScroller: function renderScroller(col) {
        var _this5 = this;

        return vue.createVNode("ul", {
          "class": "".concat(this.COMPONENT_NAME, "__panel-body-scroll"),
          "ref": "".concat(col, "_scroller"),
          "onScroll": debounce_1(function () {
            return _this5.handleScroll(col);
          }, 50)
        }, [this.generateColRows(col)]);
      },
      closestLookup: function closestLookup(availableArr, calcVal, step) {
        if (step <= 1) return calcVal;
        if (calcVal < step) return 0;
        return availableArr.sort(function (a, b) {
          return Math.abs(calcVal + 1 - a) - Math.abs(calcVal + 1 - b);
        })[0];
      },
      handleScroll: function handleScroll(col) {
        var _this6 = this;

        var scrollVal;
        var cols = this.$refs["".concat(col, "_scroller")];
        var availableList = this.generateColTime(col);
        var scrollTop = cols.scrollTop;
        var itemHeight = this.getTimeItemHeight(col);

        if (this.timeArr.includes(col)) {
          var colIdx = this.timeArr.indexOf(col);
          var max = 59;

          if (col === EPickerCols.hour) {
            max = /[h]{1}/.test(this.format) ? 11 : 23;
          }

          scrollVal = Math.min(Math.abs(Math.round((scrollTop - itemHeight / 2) / (itemHeight + this.timeItemMargin) * Number(this.steps[colIdx]))), max);
          scrollVal = this.closestLookup(availableList, scrollVal, Number(this.steps[colIdx]));

          if (this.disableTime && this.hideDisabledTime) {
            scrollVal = availableList.filter(function (t) {
              var _this6$disableTime;

              var params = _this6.currentTimes;
              params[colIdx] = Number(t);
              return !((_this6$disableTime = _this6.disableTime) !== null && _this6$disableTime !== void 0 && _this6$disableTime.apply(_this6, params));
            })[scrollVal];
          }
        } else {
          scrollVal = Math.min(Math.abs(Math.round((scrollTop - itemHeight / 2) / (itemHeight + this.timeItemMargin))), 1);
          scrollVal = this.localeMeridiems[scrollVal];
        }

        var distance = this.getScrollDistance(col, scrollVal);

        if (distance !== scrollTop) {
          var scroller = this.$refs["".concat(col, "_scroller")];
          scroller.scrollTo({
            top: distance,
            behavior: "smooth"
          });
        }

        this.timeItemCanUsed(col, scrollVal) && this.$emit("time-pick", col, scrollVal);
      },
      renderActiveMask: function renderActiveMask() {
        return vue.createVNode("div", {
          "class": "".concat(this.COMPONENT_NAME, "__panel-body-active-mask")
        }, [this.cols.map(function (_col, idx) {
          return vue.createVNode("div", {
            "key": idx
          }, null);
        })]);
      }
    },
    render: function render() {
      return vue.createVNode("div", {
        "class": "".concat(this.COMPONENT_NAME, "__panel-body")
      }, [this.renderActiveMask(), this.renderScrollers()]);
    }
  });

  function _isSlot$i(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  dayjs.extend(customParseFormat);
  var PickerPanel = vue.defineComponent({
    name: "TimePickerPanel",
    components: {
      PanelCol: PanelCol,
      TButton: TButton
    },
    props: panelProps(),
    emits: ["sure", "now-action", "time-pick"],
    setup: function setup() {
      var COMPONENT_NAME = usePrefixClass("time-picker");
      var COMPONENT_NAME_PANEL = usePrefixClass("time-picker__panel");

      var _useCommonClassName = useCommonClassName$2(),
          STATUS = _useCommonClassName.STATUS;

      var _useConfig = useConfig("timePicker"),
          t = _useConfig.t,
          global = _useConfig.global;

      return {
        t: t,
        global: global,
        COMPONENT_NAME_PANEL: COMPONENT_NAME_PANEL,
        COMPONENT_NAME: COMPONENT_NAME,
        STATUS: STATUS
      };
    },
    data: function data() {
      return {
        panel: null,
        isSetup: false
      };
    },
    computed: {
      sectionComponentName: function sectionComponentName() {
        return "".concat(this.COMPONENT_NAME_PANEL, "-section");
      },
      classNames: function classNames() {
        return this.rangePicker ? [this.COMPONENT_NAME_PANEL, this.sectionComponentName] : [this.COMPONENT_NAME_PANEL];
      },
      colValues: function colValues() {
        return this.value.map(function (el) {
          return el || dayjs();
        });
      },
      rangePicker: function rangePicker() {
        return this.colValues.length > 1;
      },
      formatField: function formatField() {
        var match = this.format.match(/(a\s+|A\s+)?(h+|H+)?:?(m+)?:?(s+)?(\s+a|\s+A)?/);

        var _match = _slicedToArray(match, 6),
            startAChart = _match[1],
            hour = _match[2],
            minute = _match[3],
            second = _match[4],
            endAChart = _match[5];

        return {
          startAChart: startAChart,
          hour: hour,
          minute: minute,
          second: second,
          endAChart: endAChart
        };
      },
      cols: function cols() {
        if (!this.formatField) {
          return [EPickerCols.hour, EPickerCols.minute, EPickerCols.second];
        }

        var _this$formatField = this.formatField,
            startAChart = _this$formatField.startAChart,
            hour = _this$formatField.hour,
            minute = _this$formatField.minute,
            second = _this$formatField.second,
            endAChart = _this$formatField.endAChart;
        var res = [];
        startAChart && res.push(EPickerCols.meridiem);
        hour && res.push(EPickerCols.hour);
        minute && res.push(EPickerCols.minute);
        second && res.push(EPickerCols.second);
        endAChart && res.push(EPickerCols.meridiem);
        return res;
      },
      localeMeridiems: function localeMeridiems() {
        return [this.global.anteMeridiem, this.global.postMeridiem];
      }
    },
    watch: {
      isShowPanel: {
        handler: function handler(val) {
          if (val) {
            this.panelColUpdate();
          }
        },
        immediate: true
      }
    },
    methods: {
      panelColUpdate: function panelColUpdate() {
        var _this = this;

        vue.nextTick(function () {
          var panelCol0 = _this.$refs.panelCol_0;
          var panelCol1 = _this.$refs.panelCol_1;
          panelCol0 && panelCol0.updateTimeScrollPos();
          panelCol1 && panelCol1.updateTimeScrollPos();
        });
      },
      scrollToTime: function scrollToTime(colIndex, col, time, behavior) {
        var scroller = this.$refs["panelCol_".concat(colIndex)];
        scroller && scroller.scrollToTime(col, time, behavior);
      },
      renderFooter: function renderFooter() {
        var _slot, _slot2;

        var confirmAction = this.confirmBtnClick.bind(this);
        return vue.createVNode("div", {
          "class": "".concat(this.sectionComponentName, "-footer")
        }, [vue.createVNode(vue.resolveComponent("t-button"), {
          "theme": "primary",
          "variant": "base",
          "onClick": confirmAction
        }, _isSlot$i(_slot = this.t(this.global.confirm)) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        }), this.rangePicker || vue.createVNode(vue.resolveComponent("t-button"), {
          "theme": "primary",
          "variant": "text",
          "onClick": this.nowAction
        }, _isSlot$i(_slot2 = this.t(this.global.now)) ? _slot2 : {
          "default": function _default() {
            return [_slot2];
          }
        })]);
      },
      renderBody: function renderBody() {
        return vue.createVNode("div", {
          "class": "".concat(this.sectionComponentName, "-body")
        }, [this.renderSinglePicker(0), this.rangePicker && this.renderSinglePicker(1)]);
      },
      renderSinglePicker: function renderSinglePicker(index) {
        var _this2 = this;

        var val = this.colValues[index];
        var ref = "panelCol_".concat(index);
        return vue.createVNode(vue.resolveComponent("panel-col"), {
          "ref": ref,
          "value": val,
          "cols": this.cols,
          "steps": this.steps,
          "hideDisabledTime": this.hideDisabledTime,
          "disableTime": this.disableTime,
          "format": this.format,
          "onTimePick": function onTimePick(col, time) {
            return _this2.handleTimePick(col, time, index);
          },
          "localeMeridiems": this.localeMeridiems
        }, null);
      },
      confirmBtnClick: function confirmBtnClick(e) {
        this.$emit("sure", e);
      },
      nowAction: function nowAction() {
        this.$emit("now-action");
        this.panelColUpdate();
      },
      handleTimePick: function handleTimePick(col, time, index) {
        this.$emit("time-pick", col, time, index, this.colValues[index]);
      }
    },
    render: function render() {
      var isFooterDisplay = this.isFooterDisplay,
          classNames = this.classNames;
      return vue.createVNode("div", {
        "class": classNames
      }, [this.renderBody(), isFooterDisplay ? this.renderFooter() : null]);
    }
  });

  function ownKeys$1a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$19(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1a(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  dayjs.extend(isBetween$1);
  var _DatePicker = vue.defineComponent({
    name: "TDatePicker",
    components: {
      TPopup: Popup,
      TButton: Button,
      TInput: Input,
      TCalendarPresets: TCalendarPresets,
      TDate: TDate,
      TDateRange: TDateRange,
      TTimePickerPanel: PickerPanel
    },
    props: props$x,
    emits: ["input", "open", "close", "focus", "click", "change", "pick"],
    setup: function setup() {
      var disabled = useFormDisabled();
      var classPrefix = usePrefixClass();
      var COMPONENT_NAME = usePrefixClass("date-picker");

      var _useCommonClassName = useCommonClassName$2(),
          SIZE = _useCommonClassName.SIZE,
          STATUS = _useCommonClassName.STATUS;

      var _useConfig = useConfig("datePicker"),
          global = _useConfig.global;

      return {
        global: global,
        classPrefix: classPrefix,
        COMPONENT_NAME: COMPONENT_NAME,
        SIZE: SIZE,
        STATUS: STATUS,
        disabled: disabled
      };
    },
    data: function data() {
      return {
        tempValue: "",
        monthDate: new Date(),
        start: new Date(),
        end: new Date(),
        selectedDates: [],
        inSelection: false,
        inline: false,
        dateFormat: "",
        multiSeparator: ",",
        inlineView: false,
        showTime: false,
        isOpen: false,
        startTimeValue: dayjs(),
        endTimeValue: dayjs()
      };
    },
    computed: {
      startText: function startText() {
        return this.formatDate(this.start);
      },
      endText: function endText() {
        return this.formatDate(this.end);
      },
      formattedValue: {
        get: function get() {
          var _this = this;

          var tempValue = this.tempValue,
              range = this.range,
              mode = this.mode,
              isOpen = this.isOpen,
              startText = this.startText,
              endText = this.endText,
              global = this.global,
              outValue = this.value;
          var selectedDates = this.getDates(outValue);
          var selectedFmtDates = selectedDates.map(function (d) {
            return _this.formatDate(d);
          });

          if (tempValue) {
            return tempValue;
          }

          var strMode = range ? "range" : mode;
          var value = "";

          switch (strMode) {
            case "time":
            case "date":
            case "month":
            case "year":
              value = selectedFmtDates.join("");
              break;

            case "range":
              if (isOpen) {
                value = [startText, endText].join(global.rangeSeparator);
              } else if (selectedFmtDates.length > 1) {
                value = [selectedFmtDates[0], selectedFmtDates[1]].join(global.rangeSeparator);
              }

              break;
          }

          return value;
        },
        set: function set(value) {
          var min = this.min,
              dateFormat = this.dateFormat;

          if (value) {
            if (String(value).length >= String(this.formatDate(min || new Date())).length && dayjs(value, dateFormat)) {
              this.tempValue = "";
              this.setDate(value, true);
            } else {
              this.tempValue = value;
            }
          }
        }
      },
      rangeText: {
        get: function get() {
          var range = this.startText;

          if (this.range) {
            range += " ".concat(this.global.rangeSeparator, " ").concat(this.endText);
          }

          return range;
        },
        set: function set(value) {
          if (this.value) {
            this.setDate(value, false);
          }
        }
      },
      min: function min() {
        var disableDate = this.disableDate || {};
        var before = disableDate.before;
        return before ? new Date(before) : null;
      },
      max: function max() {
        var disableDate = this.disableDate || {};
        var after = disableDate.after;
        return after ? new Date(after) : null;
      },
      classes: function classes() {
        var _ref;

        return [this.COMPONENT_NAME, this.SIZE[this.size] || "", (_ref = {}, _defineProperty$3(_ref, "".concat(this.COMPONENT_NAME, "--month-picker"), this.mode === "year" || this.mode === "month"), _defineProperty$3(_ref, "".concat(this.classPrefix, "-inline"), this.inline || this.inlineView), _ref)];
      },
      pickerStyles: function pickerStyles() {
        var _ref2;

        return _ref2 = {}, _defineProperty$3(_ref2, "".concat(this.COMPONENT_NAME, "__container"), true), _defineProperty$3(_ref2, "".concat(this.COMPONENT_NAME, "--open"), this.isOpen || this.inlineView), _defineProperty$3(_ref2, "".concat(this.COMPONENT_NAME, "--calendar-inline-view"), this.inlineView), _defineProperty$3(_ref2, "".concat(this.COMPONENT_NAME, "--range"), this.range), _ref2;
      }
    },
    mounted: function mounted() {
      this.attachDatePicker();
    },
    methods: {
      handleTimePick: function handleTimePick(col, time, index) {
        if (!this.range || index === 0) {
          var start = new Date(this.start);
          start["set".concat(firstUpperCase(col), "s")](time);
          this.start = start;
          this.startTimeValue = dayjs(start);
          this.dateClick(new Date(start));
        } else {
          var end = new Date(this.end);
          end["set".concat(firstUpperCase(col), "s")](time);
          this.end = end;
          this.endTimeValue = dayjs(end);
          this.dateClick(new Date(end));
        }
      },
      attachDatePicker: function attachDatePicker() {
        var startDate = new Date();
        var endDate = new Date();
        this.dateFormat = this.format;
        var start = new Date(startDate);
        var end = new Date(endDate);

        if (!this.range) {
          end = new Date(startDate);
        }

        this.start = start;
        this.end = end;
        var val = this.value || this.defaultValue || "";
        this.setDate(val, false);

        if (this.inlineView) {
          this.open();
        }
      },
      onNativeInput: function onNativeInput(event) {
        var val = event.target.value;
        this.formattedValue = val;
        var d1 = this.parseDate(val);

        if (d1 instanceof Date) {
          var d2 = this.formatDate(d1);
          emitEvent(this, "input", d2);
        }
      },
      onNativeFocus: function onNativeFocus(event) {
        if (!this.isOpen) {
          this.open();
        }

        emitEvent(this, "focus", event);
      },
      onClick: function onClick(event) {
        if (!this.isOpen) {
          this.open();
        }

        emitEvent(this, "click", event);
      },
      normalizeDateTime: function normalizeDateTime(value, oldValue) {
        var newDate = dayjs(value);
        var oldDate = dayjs(oldValue);

        if (this.enableTimePicker) {
          newDate.hour(oldDate.hour());
          newDate.minute(oldDate.minute());
          newDate.second(oldDate.second());
          newDate.millisecond(oldDate.millisecond());
        }

        return newDate.toDate();
      },
      dateClick: function dateClick(value) {
        var mode = this.range ? "range" : this.mode;
        var start = this.start;
        var end = this.end;

        if (this.showTime) {
          mode = "time";
        }

        switch (mode) {
          case "time":
            this.selectedDates = this.range ? [this.start, this.end] : [value];
            this.clickedApply(false);
            break;

          case "year":
          case "month":
          case "date":
            this.start = this.normalizeDateTime(value, start);
            this.selectedDates = [this.start];
            this.clickedApply(!this.enableTimePicker);
            break;

          case "range":
            if (this.inSelection) {
              this.inSelection = false;
              this.start = this.normalizeDateTime(value[0], end);
              this.end = this.normalizeDateTime(value[1], end);

              if (this.end < this.start) {
                this.inSelection = true;
                this.start = this.normalizeDateTime(value[0], start);
              }
            } else {
              this.start = this.normalizeDateTime(value[0], start);
              this.end = this.normalizeDateTime(value[1], end);
              this.inSelection = true;
            }

            this.clickedApply(!this.enableTimePicker);
            break;
        }
      },
      toggle: function toggle() {
        if (!this.disabled) {
          if (this.isOpen) {
            this.close();
          } else {
            this.open();
          }
        }
      },
      open: function open() {
        var _this2 = this;

        if (!this.disabled) {
          var formattedValue = this.formattedValue;

          if (formattedValue) {
            this.setDate(formattedValue);
          }

          this.tempValue = "";
          this.isOpen = true;
          vue.nextTick().then(function () {
            return emitEvent(_this2, "open", _this2.selectedDates);
          });
        }
      },
      close: function close() {
        if (!this.disabled) {
          this.tempValue = "";
          this.isOpen = false;
          this.showTime = false;
          emitEvent(this, "close", this.selectedDates);
        }
      },
      clickedApply: function clickedApply() {
        var _this3 = this;

        var closePicker = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        if (this.range) {
          this.selectedDates = [this.start, this.end];
        }

        var selectedDates = this.selectedDates.map(function (d) {
          var fd = _this3.formatDate(d);

          return fd;
        });
        this.submitInput(selectedDates, true);

        if (closePicker) {
          var mode = this.range ? "range" : this.mode;
          var multiSeparator = this.multiSeparator;

          switch (mode) {
            case "date":
            case "month":
            case "year":
              emitEvent(this, "apply", selectedDates.join(multiSeparator));
              break;

            case "range":
              emitEvent(this, "apply", selectedDates);
              break;
          }

          this.close();
        }
      },
      toggleTime: function toggleTime() {
        this.startTimeValue = dayjs(this.start);
        this.endTimeValue = dayjs(this.end);
        this.showTime = !this.showTime;
      },
      clickRange: function clickRange(value) {
        if (Array.isArray(value)) {
          var _value = _slicedToArray(value, 2),
              start = _value[0],
              end = _value[1];

          this.start = dayjs(start).toDate();
          this.end = dayjs(end || start).toDate();
          this.monthDate = dayjs(start).toDate();
        } else {
          this.start = dayjs(value).toDate();
          this.end = dayjs(value).toDate();
          this.monthDate = dayjs(value).toDate();
        }

        this.clickedApply();
      },
      clear: function clear() {
        var triggerChange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        this.close();

        if (!this.disabled) {
          var selectedDates = [];
          this.selectedDates = selectedDates;
          this.formattedValue = "";
          this.start = new Date();
          this.end = new Date();
          this.submitInput(selectedDates, triggerChange);
        }
      },
      submitInput: function submitInput(selectedDates) {
        var triggerChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var multiSeparator = this.multiSeparator;
        var mode = this.range ? "range" : this.mode;

        switch (mode) {
          case "date":
          case "month":
          case "year":
            emitEvent(this, "input", selectedDates.join(multiSeparator));

            if (triggerChange) {
              emitEvent(this, "change", selectedDates.join(multiSeparator));
            }

            break;

          case "range":
            emitEvent(this, "input", selectedDates);

            if (triggerChange) {
              emitEvent(this, "change", selectedDates);
            }

            break;
        }
      },
      parseDate: function parseDate() {
        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        if (value instanceof Date) {
          return new Date(value);
        }

        if (format) {
          var oDate = dayjs(value, format);

          if (oDate.isValid()) {
            return new Date(oDate.toDate());
          }

          return false;
        }

        var d2 = dayjs(value);

        if (d2.isValid()) {
          return new Date(d2.toDate());
        }

        return false;
      },
      isEnabled: function isEnabled(value) {
        var min = this.min,
            max = this.max,
            disableDate = this.disableDate,
            dateFormat = this.dateFormat;

        if (!disableDate) {
          return true;
        }

        if (typeof disableDate === "function") {
          return !disableDate(value);
        }

        if (Array.isArray(disableDate)) {
          var isIncludes = false;
          var formatedDisabledDate = disableDate.map(function (item) {
            return dayjs(item, dateFormat);
          });
          formatedDisabledDate.forEach(function (item) {
            if (item.isSame(dayjs(value))) {
              isIncludes = true;
            }
          });
          return !isIncludes;
        }

        if (max && min) {
          var compareMin = dayjs(new Date(min)).startOf("day");
          var compareMax = dayjs(new Date(max)).startOf("day");
          return dayjs(value).isBetween(compareMin, compareMax, null, "[]");
        }

        var from = disableDate.from,
            to = disableDate.to;

        if (from && to) {
          var compareMin = dayjs(new Date(from)).startOf("day");
          var compareMax = dayjs(new Date(to)).startOf("day");
          return !dayjs(value).isBetween(compareMin, compareMax, null, "[]");
        }

        return true;
      },
      setDate: function setDate() {
        var inputDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var triggerChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (inputDate !== 0 && !inputDate || inputDate instanceof Array && inputDate.length === 0) {
          return this.clear(triggerChange);
        }

        var selectedDates = this.getDates(inputDate);
        this.selectedDates = selectedDates;

        if (selectedDates.length > 0) {
          var _selectedDates = _slicedToArray(selectedDates, 2),
              start = _selectedDates[0],
              end = _selectedDates[1];

          this.start = start;
          this.end = end || start;
        }
      },
      getDates: function getDates() {
        var _this4 = this;

        var inputDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

        if (inputDate !== 0 && !inputDate || inputDate instanceof Array && inputDate.length === 0) {
          return [];
        }

        var format = this.dateFormat || "";
        var dates = [];

        if (inputDate instanceof Array) {
          dates = inputDate.map(function (d) {
            var d1 = _this4.parseDate(d, format);

            return d1;
          });
        } else if (inputDate instanceof Date || typeof inputDate === "number") {
          dates = [this.parseDate(inputDate, format)];
        } else if (typeof inputDate === "string") {
          var mode = this.range ? "range" : this.mode;

          switch (mode) {
            case "date":
            case "month":
            case "year":
              dates = [this.parseDate(inputDate, format)];
              break;

            case "range":
              dates = inputDate.split(this.global.rangeSeparator || "-").map(function (d) {
                var d1 = _this4.parseDate(d, format);

                return d1;
              });
              break;
          }
        }

        var selectedDates = dates.filter(function (d) {
          var isEnable = d instanceof Date && _this4.isEnabled(d);

          return isEnable;
        });
        selectedDates.sort(function (a, b) {
          return a.getTime() - b.getTime();
        });
        return selectedDates;
      },
      formatDate: function formatDate(date) {
        var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        var dateFormat = format || this.dateFormat || this.global.format;
        var arrTime = ["H", "h", "m", "s"];
        var hasTime = arrTime.some(function (f) {
          return String(dateFormat).includes(f);
        });

        if (this.enableTimePicker && !hasTime) {
          dateFormat = [dateFormat, "HH:mm:ss"].join(" ");
        }

        var d1 = new Date(date);
        return dayjs(d1).format(dateFormat);
      },
      getPlaceholderText: function getPlaceholderText() {
        var _this$global, _this$global$placehol;

        var placeholder = this.placeholder,
            mode = this.mode;
        var placeholderStr = placeholder || ((_this$global = this.global) === null || _this$global === void 0 ? void 0 : (_this$global$placehol = _this$global.placeholder) === null || _this$global$placehol === void 0 ? void 0 : _this$global$placehol[mode]);

        if (placeholder && Array.isArray(placeholder)) {
          placeholderStr = placeholder.join(this.global.rangeSeparator);
        }

        return placeholderStr;
      },
      handleTInputFocus: function handleTInputFocus() {
        var _this5 = this;

        vue.nextTick(function () {
          _this5.$refs["native"].blur();
        });
      }
    },
    render: function render() {
      var _this6 = this;

      var popupProps = this.popupProps,
          disabled = this.disabled,
          clearable = this.clearable,
          allowInput = this.allowInput,
          size = this.size,
          inputProps = this.inputProps,
          enableTimePicker = this.enableTimePicker,
          mode = this.mode,
          range = this.range,
          presets = this.presets,
          firstDayOfWeek = this.firstDayOfWeek;
      var start = this.start,
          end = this.end,
          showTime = this.showTime,
          startTimeValue = this.startTimeValue,
          global = this.global,
          isOpen = this.isOpen,
          endTimeValue = this.endTimeValue;
      var panelProps = {
        value: range ? [start, end] : start,
        mode: mode,
        firstDayOfWeek: firstDayOfWeek === void 0 ? 1 : firstDayOfWeek,
        disableDate: function disableDate(d) {
          return !_this6.isEnabled(d);
        },
        onChange: this.dateClick,
        global: this.global
      };

      var onPick = function onPick(date, context) {
        emitEvent(_this6, "pick", date, context);
      };

      var panelComponent = range ? vue.createVNode(vue.resolveComponent("t-date-range"), _objectSpread$19(_objectSpread$19({}, panelProps), {}, {
        onPick: onPick
      }), null) : vue.createVNode(vue.resolveComponent("t-date"), panelProps, null);

      var popupContent = function popupContent() {
        return vue.createVNode("div", {
          "ref": "dropdownPopup",
          "class": _this6.pickerStyles
        }, [enableTimePicker && showTime && vue.createVNode("div", null, [vue.createVNode(PickerPanel, {
          "ref": "timePickerPanel",
          "format": extractTimeFormat(_this6.dateFormat) || "HH:mm:ss",
          "cols": [EPickerCols.hour, EPickerCols.minute, EPickerCols.second],
          "steps": [1, 1, 1],
          "value": !range ? [startTimeValue] : [startTimeValue, endTimeValue],
          "onTimePick": _this6.handleTimePick,
          "isShowPanel": showTime,
          "isFooterDisplay": false
        }, null)]), !showTime && panelComponent, (!!presets || enableTimePicker) && vue.createVNode("div", {
          "class": "".concat(_this6.classPrefix, "-date-picker__footer")
        }, [vue.createVNode(TCalendarPresets, {
          "presets": presets,
          "global": global,
          "onClick": range ? _this6.clickRange : _this6.dateClick
        }, null), enableTimePicker && vue.createVNode("div", {
          "class": "".concat(_this6.COMPONENT_NAME, "--apply")
        }, [enableTimePicker && vue.createVNode(Button, {
          "theme": "primary",
          "variant": "text",
          "onClick": _this6.toggleTime
        }, {
          "default": function _default() {
            return [showTime ? global.selectDate : global.selectTime];
          }
        }), vue.createVNode(Button, {
          "theme": "primary",
          "onClick": function onClick() {
            return _this6.clickedApply();
          }
        }, {
          "default": function _default() {
            return [global.confirm];
          }
        })])])]);
      };

      var inputClassNames = ["".concat(this.classPrefix, "-form-controls"), _defineProperty$3({}, this.STATUS.active, this.isOpen)];
      var prefixIcon = renderTNodeJSX(this, "prefixIcon");
      var suffixIconSlot = renderTNodeJSX(this, "suffixIcon");

      var suffixIcon = function suffixIcon() {
        if (suffixIconSlot) {
          return suffixIconSlot;
        }

        if (enableTimePicker) {
          return vue.createVNode(time, null, null);
        }

        return vue.createVNode(calendar, null, null);
      };

      return vue.createVNode("div", {
        "class": this.classes
      }, [vue.createVNode(vue.resolveComponent("t-popup"), {
        "ref": "popup",
        "class": "".concat(this.COMPONENT_NAME, "__popup-reference"),
        "trigger": "click",
        "placement": "bottom-left",
        "disabled": disabled,
        "showArrow": false,
        "visible": isOpen,
        "popupProps": popupProps,
        "overlayClassName": this.COMPONENT_NAME,
        "content": popupContent,
        "expandAnimation": true,
        "onVisibleChange": function onVisibleChange(visible, context) {
          if (context.trigger === "document") {
            _this6.toggle();
          }
        }
      }, {
        "default": function _default() {
          return [vue.createVNode("div", {
            "class": inputClassNames,
            "onClick": _this6.toggle
          }, [vue.createVNode(vue.resolveComponent("t-input"), {
            "ref": "native",
            "modelValue": _this6.formattedValue,
            "onUpdate:modelValue": function onUpdateModelValue($event) {
              return _this6.formattedValue = $event;
            },
            "disabled": disabled,
            "clearable": clearable,
            "placeholder": _this6.getPlaceholderText(),
            "allowInput": allowInput ? 1 : 0,
            "size": size,
            "inputProps": inputProps,
            "onClear": function onClear(context) {
              context.e.stopPropagation();

              _this6.clear(true);
            },
            "focus": _this6.onNativeFocus,
            "input": _this6.onNativeInput,
            "click": _this6.onClick,
            "suffixIcon": suffixIcon,
            "prefixIcon": prefixIcon,
            "onFocus": _this6.handleTInputFocus
          }, null)])];
        }
      })]);
    }
  });

  var DatePicker = withInstall(mapProps([{
    name: "value",
    event: "change",
    alias: ["modelValue"]
  }])(_DatePicker));

  var baseGetTag$1 = _baseGetTag,
      isObjectLike$1 = isObjectLike_1;
  /** `Object#toString` result references. */

  var boolTag = '[object Boolean]';
  /**
   * Checks if `value` is classified as a boolean primitive or object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
   * @example
   *
   * _.isBoolean(false);
   * // => true
   *
   * _.isBoolean(null);
   * // => false
   */

  function isBoolean(value) {
    return value === true || value === false || isObjectLike$1(value) && baseGetTag$1(value) == boolTag;
  }

  var isBoolean_1 = isBoolean;

  var props$v = {
    colon: Boolean,
    data: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    errorMessage: {
      type: Object
    },
    formControlledComponents: {
      type: Array
    },
    labelAlign: {
      type: String,
      "default": "right",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right", "top"].includes(val);
      }
    },
    labelWidth: {
      type: [String, Number],
      "default": "100px"
    },
    layout: {
      type: String,
      "default": "vertical",
      validator: function validator(val) {
        if (!val) return true;
        return ["vertical", "inline"].includes(val);
      }
    },
    preventSubmitDefault: {
      type: Boolean,
      "default": true
    },
    requiredMark: {
      type: Boolean,
      "default": void 0
    },
    resetType: {
      type: String,
      "default": "empty",
      validator: function validator(val) {
        if (!val) return true;
        return ["empty", "initial"].includes(val);
      }
    },
    rules: {
      type: Object
    },
    scrollToFirstError: {
      type: String,
      "default": "",
      validator: function validator(val) {
        if (!val) return true;
        return ["smooth", "auto", ""].includes(val);
      }
    },
    showErrorMessage: {
      type: Boolean,
      "default": true
    },
    statusIcon: {
      type: [Boolean, Function],
      "default": void 0
    },
    submitWithWarningMessage: Boolean,
    onReset: Function,
    onSubmit: Function,
    onValidate: Function
  };

  function ownKeys$19(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$18(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$19(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$19(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Form = vue.defineComponent({
    name: "TForm",
    props: _objectSpread$18({}, props$v),
    setup: function setup(props2, _ref) {
      var expose = _ref.expose;
      var renderContent = useTNodeJSX();

      var _toRefs = vue.toRefs(props2),
          disabled = _toRefs.disabled;

      vue.provide("formDisabled", {
        disabled: disabled
      });
      var formRef = vue.ref(null);
      var children = vue.ref([]);

      var _toRefs2 = vue.toRefs(props2),
          showErrorMessage = _toRefs2.showErrorMessage,
          labelWidth = _toRefs2.labelWidth,
          labelAlign = _toRefs2.labelAlign,
          data = _toRefs2.data,
          colon = _toRefs2.colon,
          requiredMark = _toRefs2.requiredMark,
          rules = _toRefs2.rules,
          errorMessage = _toRefs2.errorMessage,
          resetType = _toRefs2.resetType;

      vue.provide(FormInjectionKey, vue.reactive({
        showErrorMessage: showErrorMessage,
        labelWidth: labelWidth,
        labelAlign: labelAlign,
        data: data,
        colon: colon,
        requiredMark: requiredMark,
        rules: rules,
        errorMessage: errorMessage,
        resetType: resetType,
        children: children,
        renderContent: renderContent
      }));
      var COMPONENT_NAME = usePrefixClass("form");
      var CLASS_NAMES = useCLASSNAMES$1();
      var formClass = vue.computed(function () {
        return [CLASS_NAMES.value.form, _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "-inline"), props2.layout === "inline")];
      });
      var FORM_ITEM_CLASS_PREFIX = usePrefixClass("form-item__");

      var getFirstError = function getFirstError(result) {
        if (isBoolean_1(result)) return "";

        var _Object$keys = Object.keys(result),
            _Object$keys2 = _slicedToArray(_Object$keys, 1),
            firstKey = _Object$keys2[0];

        if (props2.scrollToFirstError) {
          scrollTo(".".concat(FORM_ITEM_CLASS_PREFIX.value + firstKey));
        }

        var resArr = result[firstKey];
        if (!isArray_1(resArr)) return "";
        return resArr.filter(function (item) {
          return !item.result;
        })[0].message;
      };

      var scrollTo = function scrollTo(selector) {
        var _formRef$value;

        var dom = (_formRef$value = formRef.value) === null || _formRef$value === void 0 ? void 0 : _formRef$value.querySelector(selector);
        var behavior = props2.scrollToFirstError;

        if (behavior) {
          dom && dom.scrollIntoView({
            behavior: behavior
          });
        }
      };

      var needValidate = function needValidate(name, fields) {
        if (!fields || !Array.isArray(fields)) return true;
        return fields.indexOf(name) !== -1;
      };

      var validate = /*#__PURE__*/function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(param) {
          var _props2$onValidate;

          var _ref4, fields, _ref4$trigger, trigger, list, arr, r, result;

          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _ref4 = param || {}, fields = _ref4.fields, _ref4$trigger = _ref4.trigger, trigger = _ref4$trigger === void 0 ? "all" : _ref4$trigger;
                  list = children.value.filter(function (child) {
                    return isFunction_1(child.validate) && needValidate(child.name, fields);
                  }).map(function (child) {
                    return child.validate(trigger);
                  });
                  _context.next = 4;
                  return Promise.all(list);

                case 4:
                  arr = _context.sent;
                  r = arr.reduce(function (r2, err) {
                    return Object.assign(r2 || {}, err);
                  }, {});
                  Object.keys(r).forEach(function (key) {
                    if (r[key] === true) {
                      delete r[key];
                    }
                  });
                  result = isEmpty_1(r) ? true : r;
                  (_props2$onValidate = props2.onValidate) === null || _props2$onValidate === void 0 ? void 0 : _props2$onValidate.call(props2, {
                    validateResult: result,
                    firstError: getFirstError(result)
                  });
                  return _context.abrupt("return", result);

                case 10:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function validate(_x) {
          return _ref3.apply(this, arguments);
        };
      }();

      var submit = function submit(e) {
        if (props2.preventSubmitDefault && e) {
          e === null || e === void 0 ? void 0 : e.preventDefault();
          e === null || e === void 0 ? void 0 : e.stopPropagation();
        }

        validate().then(function (r) {
          var _props2$onSubmit;

          (_props2$onSubmit = props2.onSubmit) === null || _props2$onSubmit === void 0 ? void 0 : _props2$onSubmit.call(props2, {
            validateResult: r,
            firstError: getFirstError(r),
            e: e
          });
        });
      };

      var reset = function reset(e) {
        var _props2$onReset;

        if (props2.preventSubmitDefault) {
          e === null || e === void 0 ? void 0 : e.preventDefault();
          e === null || e === void 0 ? void 0 : e.stopPropagation();
        }

        children.value.filter(function (child) {
          return isFunction_1(child.resetField);
        }).forEach(function (child) {
          return child.resetField();
        });
        (_props2$onReset = props2.onReset) === null || _props2$onReset === void 0 ? void 0 : _props2$onReset.call(props2, {
          e: e
        });
      };

      var clearValidate = function clearValidate(fields) {
        children.value.forEach(function (child) {
          if (isFunction_1(child.resetHandler) && needValidate(child.name, fields)) {
            child.resetHandler();
          }
        });
      };

      var setValidateMessage = function setValidateMessage(validateMessage) {
        var keys = Object.keys(validateMessage);
        if (!keys.length) return;
        var list = children.value.filter(function (child) {
          return isFunction_1(child.setValidateMessage) && keys.includes(child.name);
        }).map(function (child) {
          return child.setValidateMessage(validateMessage[child.name]);
        });
        Promise.all(list);
      };

      expose({
        validate: validate,
        submit: submit,
        reset: reset,
        clearValidate: clearValidate,
        setValidateMessage: setValidateMessage
      });
      return function () {
        return vue.createVNode("form", {
          "ref": formRef,
          "class": formClass.value,
          "onSubmit": function onSubmit(e) {
            return submit(e);
          },
          "onReset": function onReset(e) {
            return reset(e);
          }
        }, [renderContent("default")]);
      };
    }
  });

  /**
   * Checks if `value` is `null` or `undefined`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
   * @example
   *
   * _.isNil(null);
   * // => true
   *
   * _.isNil(void 0);
   * // => true
   *
   * _.isNil(NaN);
   * // => false
   */

  function isNil(value) {
    return value == null;
  }

  var isNil_1 = isNil;

  var copyObject$1 = _copyObject,
      createAssigner = _createAssigner,
      keysIn = keysIn_1;
  /**
   * This method is like `_.assignIn` except that it accepts `customizer`
   * which is invoked to produce the assigned values. If `customizer` returns
   * `undefined`, assignment is handled by the method instead. The `customizer`
   * is invoked with five arguments: (objValue, srcValue, key, object, source).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @alias extendWith
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} sources The source objects.
   * @param {Function} [customizer] The function to customize assigned values.
   * @returns {Object} Returns `object`.
   * @see _.assignWith
   * @example
   *
   * function customizer(objValue, srcValue) {
   *   return _.isUndefined(objValue) ? srcValue : objValue;
   * }
   *
   * var defaults = _.partialRight(_.assignInWith, customizer);
   *
   * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
   * // => { 'a': 1, 'b': 2 }
   */

  var assignInWith$1 = createAssigner(function (object, source, srcIndex, customizer) {
    copyObject$1(source, keysIn(source), object, customizer);
  });
  var assignInWith_1 = assignInWith$1;

  var baseGetTag = _baseGetTag,
      isObjectLike = isObjectLike_1,
      isPlainObject$1 = isPlainObject_1;
  /** `Object#toString` result references. */

  var domExcTag = '[object DOMException]',
      errorTag = '[object Error]';
  /**
   * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
   * `SyntaxError`, `TypeError`, or `URIError` object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
   * @example
   *
   * _.isError(new Error);
   * // => true
   *
   * _.isError(Error);
   * // => false
   */

  function isError$2(value) {
    if (!isObjectLike(value)) {
      return false;
    }

    var tag = baseGetTag(value);
    return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject$1(value);
  }

  var isError_1 = isError$2;

  var apply = _apply,
      baseRest$1 = _baseRest,
      isError$1 = isError_1;
  /**
   * Attempts to invoke `func`, returning either the result or the caught error
   * object. Any additional arguments are provided to `func` when it's invoked.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Util
   * @param {Function} func The function to attempt.
   * @param {...*} [args] The arguments to invoke `func` with.
   * @returns {*} Returns the `func` result or error object.
   * @example
   *
   * // Avoid throwing errors for invalid selectors.
   * var elements = _.attempt(function(selector) {
   *   return document.querySelectorAll(selector);
   * }, '>_>');
   *
   * if (_.isError(elements)) {
   *   elements = [];
   * }
   */

  var attempt$1 = baseRest$1(function (func, args) {
    try {
      return apply(func, undefined, args);
    } catch (e) {
      return isError$1(e) ? e : new Error(e);
    }
  });
  var attempt_1 = attempt$1;

  var arrayMap$1 = _arrayMap;
  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */

  function baseValues$1(object, props) {
    return arrayMap$1(props, function (key) {
      return object[key];
    });
  }

  var _baseValues = baseValues$1;

  var eq = eq_1;
  /** Used for built-in method references. */

  var objectProto$1 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
  /**
   * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
   * of source objects to the destination object for all destination properties
   * that resolve to `undefined`.
   *
   * @private
   * @param {*} objValue The destination value.
   * @param {*} srcValue The source value.
   * @param {string} key The key of the property to assign.
   * @param {Object} object The parent object of `objValue`.
   * @returns {*} Returns the value to assign.
   */

  function customDefaultsAssignIn$1(objValue, srcValue, key, object) {
    if (objValue === undefined || eq(objValue, objectProto$1[key]) && !hasOwnProperty$1.call(object, key)) {
      return srcValue;
    }

    return objValue;
  }

  var _customDefaultsAssignIn = customDefaultsAssignIn$1;

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    "\u2028": 'u2028',
    "\u2029": 'u2029'
  };
  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */

  function escapeStringChar$1(chr) {
    return '\\' + stringEscapes[chr];
  }

  var _escapeStringChar = escapeStringChar$1;

  /** Used to match template delimiters. */
  var reInterpolate$2 = /<%=([\s\S]+?)%>/g;
  var _reInterpolate = reInterpolate$2;

  var basePropertyOf = _basePropertyOf;
  /** Used to map characters to HTML entities. */

  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };
  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */

  var escapeHtmlChar$1 = basePropertyOf(htmlEscapes);
  var _escapeHtmlChar = escapeHtmlChar$1;

  var escapeHtmlChar = _escapeHtmlChar,
      toString$1 = toString_1;
  /** Used to match HTML entities and HTML characters. */

  var reUnescapedHtml = /[&<>"']/g,
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
  /**
   * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
   * corresponding HTML entities.
   *
   * **Note:** No other characters are escaped. To escape additional
   * characters use a third-party library like [_he_](https://mths.be/he).
   *
   * Though the ">" character is escaped for symmetry, characters like
   * ">" and "/" don't need escaping in HTML and have no special meaning
   * unless they're part of a tag or unquoted attribute value. See
   * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
   * (under "semi-related fun fact") for more details.
   *
   * When working with HTML you should always
   * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
   * XSS vectors.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to escape.
   * @returns {string} Returns the escaped string.
   * @example
   *
   * _.escape('fred, barney, & pebbles');
   * // => 'fred, barney, &amp; pebbles'
   */

  function escape$2(string) {
    string = toString$1(string);
    return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
  }

  var _escape = escape$2;

  /** Used to match template delimiters. */
  var reEscape$1 = /<%-([\s\S]+?)%>/g;
  var _reEscape = reEscape$1;

  /** Used to match template delimiters. */
  var reEvaluate$1 = /<%([\s\S]+?)%>/g;
  var _reEvaluate = reEvaluate$1;

  var escape$1 = _escape,
      reEscape = _reEscape,
      reEvaluate = _reEvaluate,
      reInterpolate$1 = _reInterpolate;
  /**
   * By default, the template delimiters used by lodash are like those in
   * embedded Ruby (ERB) as well as ES2015 template strings. Change the
   * following template settings to use alternative delimiters.
   *
   * @static
   * @memberOf _
   * @type {Object}
   */

  var templateSettings$1 = {
    /**
     * Used to detect `data` property values to be HTML-escaped.
     *
     * @memberOf _.templateSettings
     * @type {RegExp}
     */
    'escape': reEscape,

    /**
     * Used to detect code to be evaluated.
     *
     * @memberOf _.templateSettings
     * @type {RegExp}
     */
    'evaluate': reEvaluate,

    /**
     * Used to detect `data` property values to inject.
     *
     * @memberOf _.templateSettings
     * @type {RegExp}
     */
    'interpolate': reInterpolate$1,

    /**
     * Used to reference the data object in the template text.
     *
     * @memberOf _.templateSettings
     * @type {string}
     */
    'variable': '',

    /**
     * Used to import variables into the compiled template.
     *
     * @memberOf _.templateSettings
     * @type {Object}
     */
    'imports': {
      /**
       * A reference to the `lodash` function.
       *
       * @memberOf _.templateSettings.imports
       * @type {Function}
       */
      '_': {
        'escape': escape$1
      }
    }
  };
  var templateSettings_1 = templateSettings$1;

  var assignInWith = assignInWith_1,
      attempt = attempt_1,
      baseValues = _baseValues,
      customDefaultsAssignIn = _customDefaultsAssignIn,
      escapeStringChar = _escapeStringChar,
      isError = isError_1,
      isIterateeCall = _isIterateeCall,
      keys$1 = keys_1,
      reInterpolate = _reInterpolate,
      templateSettings = templateSettings_1,
      toString = toString_1;
  /** Error message constants. */

  var INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';
  /** Used to match empty string literals in compiled template source. */

  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */

  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */

  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
  /** Used to ensure capturing order of template delimiters. */

  var reNoMatch = /($^)/;
  /** Used to match unescaped characters in compiled string literals. */

  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
  /** Used for built-in method references. */

  var objectProto = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty = objectProto.hasOwnProperty;
  /**
   * Creates a compiled template function that can interpolate data properties
   * in "interpolate" delimiters, HTML-escape interpolated data properties in
   * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
   * properties may be accessed as free variables in the template. If a setting
   * object is given, it takes precedence over `_.templateSettings` values.
   *
   * **Note:** In the development build `_.template` utilizes
   * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
   * for easier debugging.
   *
   * For more information on precompiling templates see
   * [lodash's custom builds documentation](https://lodash.com/custom-builds).
   *
   * For more information on Chrome extension sandboxes see
   * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category String
   * @param {string} [string=''] The template string.
   * @param {Object} [options={}] The options object.
   * @param {RegExp} [options.escape=_.templateSettings.escape]
   *  The HTML "escape" delimiter.
   * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
   *  The "evaluate" delimiter.
   * @param {Object} [options.imports=_.templateSettings.imports]
   *  An object to import into the template as free variables.
   * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
   *  The "interpolate" delimiter.
   * @param {string} [options.sourceURL='templateSources[n]']
   *  The sourceURL of the compiled template.
   * @param {string} [options.variable='obj']
   *  The data object variable name.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Function} Returns the compiled template function.
   * @example
   *
   * // Use the "interpolate" delimiter to create a compiled template.
   * var compiled = _.template('hello <%= user %>!');
   * compiled({ 'user': 'fred' });
   * // => 'hello fred!'
   *
   * // Use the HTML "escape" delimiter to escape data property values.
   * var compiled = _.template('<b><%- value %></b>');
   * compiled({ 'value': '<script>' });
   * // => '<b>&lt;script&gt;</b>'
   *
   * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
   * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
   * compiled({ 'users': ['fred', 'barney'] });
   * // => '<li>fred</li><li>barney</li>'
   *
   * // Use the internal `print` function in "evaluate" delimiters.
   * var compiled = _.template('<% print("hello " + user); %>!');
   * compiled({ 'user': 'barney' });
   * // => 'hello barney!'
   *
   * // Use the ES template literal delimiter as an "interpolate" delimiter.
   * // Disable support by replacing the "interpolate" delimiter.
   * var compiled = _.template('hello ${ user }!');
   * compiled({ 'user': 'pebbles' });
   * // => 'hello pebbles!'
   *
   * // Use backslashes to treat delimiters as plain text.
   * var compiled = _.template('<%= "\\<%- value %\\>" %>');
   * compiled({ 'value': 'ignored' });
   * // => '<%- value %>'
   *
   * // Use the `imports` option to import `jQuery` as `jq`.
   * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
   * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
   * compiled({ 'users': ['fred', 'barney'] });
   * // => '<li>fred</li><li>barney</li>'
   *
   * // Use the `sourceURL` option to specify a custom sourceURL for the template.
   * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
   * compiled(data);
   * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
   *
   * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
   * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
   * compiled.source;
   * // => function(data) {
   * //   var __t, __p = '';
   * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
   * //   return __p;
   * // }
   *
   * // Use custom template delimiters.
   * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
   * var compiled = _.template('hello {{ user }}!');
   * compiled({ 'user': 'mustache' });
   * // => 'hello mustache!'
   *
   * // Use the `source` property to inline compiled templates for meaningful
   * // line numbers in error messages and stack traces.
   * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
   *   var JST = {\
   *     "main": ' + _.template(mainText).source + '\
   *   };\
   * ');
   */

  function template(string, options, guard) {
    // Based on John Resig's `tmpl` implementation
    // (http://ejohn.org/blog/javascript-micro-templating/)
    // and Laura Doktorova's doT.js (https://github.com/olado/doT).
    var settings = templateSettings.imports._.templateSettings || templateSettings;

    if (guard && isIterateeCall(string, options, guard)) {
      options = undefined;
    }

    string = toString(string);
    options = assignInWith({}, options, settings, customDefaultsAssignIn);
    var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
        importsKeys = keys$1(imports),
        importsValues = baseValues(imports, importsKeys);
    var isEscaping,
        isEvaluating,
        index = 0,
        interpolate = options.interpolate || reNoMatch,
        source = "__p += '"; // Compile the regexp to match each delimiter.

    var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g'); // Use a sourceURL for easier debugging.
    // The sourceURL gets injected into the source that's eval-ed, so be careful
    // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
    // and escape the comment, thus injecting code that gets evaled.

    var sourceURL = hasOwnProperty.call(options, 'sourceURL') ? '//# sourceURL=' + (options.sourceURL + '').replace(/\s/g, ' ') + '\n' : '';
    string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
      interpolateValue || (interpolateValue = esTemplateValue); // Escape characters that can't be included in string literals.

      source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar); // Replace delimiters with snippets.

      if (escapeValue) {
        isEscaping = true;
        source += "' +\n__e(" + escapeValue + ") +\n'";
      }

      if (evaluateValue) {
        isEvaluating = true;
        source += "';\n" + evaluateValue + ";\n__p += '";
      }

      if (interpolateValue) {
        source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
      }

      index = offset + match.length; // The JS engine embedded in Adobe products needs `match` returned in
      // order to produce the correct `offset` value.

      return match;
    });
    source += "';\n"; // If `variable` is not specified wrap a with-statement around the generated
    // code to add the data object to the top of the scope chain.

    var variable = hasOwnProperty.call(options, 'variable') && options.variable;

    if (!variable) {
      source = 'with (obj) {\n' + source + '\n}\n';
    } // Throw an error if a forbidden character was found in `variable`, to prevent
    // potential command injection attacks.
    else if (reForbiddenIdentifierChars.test(variable)) {
      throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
    } // Cleanup code by stripping empty strings.


    source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;'); // Frame code as the function body.

    source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
    var result = attempt(function () {
      return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
    }); // Provide the compiled function's source by its `toString` method or
    // the `source` property as a convenience for inlining compiled templates.

    result.source = source;

    if (isError(result)) {
      throw result;
    }

    return result;
  }

  var template_1 = template;

  var isDate$1 = {exports: {}};

  var merge = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = merge;

    function merge() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var defaults = arguments.length > 1 ? arguments[1] : undefined;

      for (var key in defaults) {
        if (typeof obj[key] === 'undefined') {
          obj[key] = defaults[key];
        }
      }

      return obj;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(merge, merge.exports);

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isDate;

    var _merge = _interopRequireDefault(merge.exports);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _iterableToArrayLimit(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it;

      if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e2) {
              throw _e2;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = o[Symbol.iterator]();
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e3) {
          didErr = true;
          err = _e3;
        },
        f: function f() {
          try {
            if (!normalCompletion && it["return"] != null) it["return"]();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    var default_date_options = {
      format: 'YYYY/MM/DD',
      delimiters: ['/', '-'],
      strictMode: false
    };

    function isValidFormat(format) {
      return /(^(y{4}|y{2})[.\/-](m{1,2})[.\/-](d{1,2})$)|(^(m{1,2})[.\/-](d{1,2})[.\/-]((y{4}|y{2})$))|(^(d{1,2})[.\/-](m{1,2})[.\/-]((y{4}|y{2})$))/gi.test(format);
    }

    function zip(date, format) {
      var zippedArr = [],
          len = Math.min(date.length, format.length);

      for (var i = 0; i < len; i++) {
        zippedArr.push([date[i], format[i]]);
      }

      return zippedArr;
    }

    function isDate(input, options) {
      if (typeof options === 'string') {
        // Allow backward compatbility for old format isDate(input [, format])
        options = (0, _merge["default"])({
          format: options
        }, default_date_options);
      } else {
        options = (0, _merge["default"])(options, default_date_options);
      }

      if (typeof input === 'string' && isValidFormat(options.format)) {
        var formatDelimiter = options.delimiters.find(function (delimiter) {
          return options.format.indexOf(delimiter) !== -1;
        });
        var dateDelimiter = options.strictMode ? formatDelimiter : options.delimiters.find(function (delimiter) {
          return input.indexOf(delimiter) !== -1;
        });
        var dateAndFormat = zip(input.split(dateDelimiter), options.format.toLowerCase().split(formatDelimiter));
        var dateObj = {};

        var _iterator = _createForOfIteratorHelper(dateAndFormat),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _step$value = _slicedToArray(_step.value, 2),
                dateWord = _step$value[0],
                formatWord = _step$value[1];

            if (dateWord.length !== formatWord.length) {
              return false;
            }

            dateObj[formatWord.charAt(0)] = dateWord;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return new Date("".concat(dateObj.m, "/").concat(dateObj.d, "/").concat(dateObj.y)).getDate() === +dateObj.d;
      }

      if (!options.strictMode) {
        return Object.prototype.toString.call(input) === '[object Date]' && isFinite(input);
      }

      return false;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isDate$1, isDate$1.exports);

  var isDate = /*@__PURE__*/getDefaultExportFromCjs(isDate$1.exports);

  var isEmail$1 = {exports: {}};

  var assertString = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = assertString;

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }

    function assertString(input) {
      var isString = typeof input === 'string' || input instanceof String;

      if (!isString) {
        var invalidType = _typeof(input);

        if (input === null) invalidType = 'null';else if (invalidType === 'object') invalidType = input.constructor.name;
        throw new TypeError("Expected a string but received a ".concat(invalidType));
      }
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(assertString, assertString.exports);

  var isByteLength = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isByteLength;

    var _assertString = _interopRequireDefault(assertString.exports);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }
    /* eslint-disable prefer-rest-params */


    function isByteLength(str, options) {
      (0, _assertString["default"])(str);
      var min;
      var max;

      if (_typeof(options) === 'object') {
        min = options.min || 0;
        max = options.max;
      } else {
        // backwards compatibility: isByteLength(str, min [, max])
        min = arguments[1];
        max = arguments[2];
      }

      var len = encodeURI(str).split(/%..|./).length - 1;
      return len >= min && (typeof max === 'undefined' || len <= max);
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isByteLength, isByteLength.exports);

  var isFQDN = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isFQDN;

    var _assertString = _interopRequireDefault(assertString.exports);

    var _merge = _interopRequireDefault(merge.exports);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    var default_fqdn_options = {
      require_tld: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_numeric_tld: false,
      allow_wildcard: false
    };

    function isFQDN(str, options) {
      (0, _assertString["default"])(str);
      options = (0, _merge["default"])(options, default_fqdn_options);
      /* Remove the optional trailing dot before checking validity */

      if (options.allow_trailing_dot && str[str.length - 1] === '.') {
        str = str.substring(0, str.length - 1);
      }
      /* Remove the optional wildcard before checking validity */


      if (options.allow_wildcard === true && str.indexOf('*.') === 0) {
        str = str.substring(2);
      }

      var parts = str.split('.');
      var tld = parts[parts.length - 1];

      if (options.require_tld) {
        // disallow fqdns without tld
        if (parts.length < 2) {
          return false;
        }

        if (!/^([a-z\u00A1-\u00A8\u00AA-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
          return false;
        } // disallow spaces


        if (/\s/.test(tld)) {
          return false;
        }
      } // reject numeric TLDs


      if (!options.allow_numeric_tld && /^\d+$/.test(tld)) {
        return false;
      }

      return parts.every(function (part) {
        if (part.length > 63) {
          return false;
        }

        if (!/^[a-z_\u00a1-\uffff0-9-]+$/i.test(part)) {
          return false;
        } // disallow full-width chars


        if (/[\uff01-\uff5e]/.test(part)) {
          return false;
        } // disallow parts starting or ending with hyphen


        if (/^-|-$/.test(part)) {
          return false;
        }

        if (!options.allow_underscores && /_/.test(part)) {
          return false;
        }

        return true;
      });
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isFQDN, isFQDN.exports);

  var isIP = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isIP;

    var _assertString = _interopRequireDefault(assertString.exports);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    /**
    11.3.  Examples
    
       The following addresses
    
                 fe80::1234 (on the 1st link of the node)
                 ff02::5678 (on the 5th link of the node)
                 ff08::9abc (on the 10th organization of the node)
    
       would be represented as follows:
    
                 fe80::1234%1
                 ff02::5678%5
                 ff08::9abc%10
    
       (Here we assume a natural translation from a zone index to the
       <zone_id> part, where the Nth zone of any scope is translated into
       "N".)
    
       If we use interface names as <zone_id>, those addresses could also be
       represented as follows:
    
                fe80::1234%ne0
                ff02::5678%pvc1.3
                ff08::9abc%interface10
    
       where the interface "ne0" belongs to the 1st link, "pvc1.3" belongs
       to the 5th link, and "interface10" belongs to the 10th organization.
     * * */


    var IPv4SegmentFormat = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';
    var IPv4AddressFormat = "(".concat(IPv4SegmentFormat, "[.]){3}").concat(IPv4SegmentFormat);
    var IPv4AddressRegExp = new RegExp("^".concat(IPv4AddressFormat, "$"));
    var IPv6SegmentFormat = '(?:[0-9a-fA-F]{1,4})';
    var IPv6AddressRegExp = new RegExp('^(' + "(?:".concat(IPv6SegmentFormat, ":){7}(?:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){6}(?:").concat(IPv4AddressFormat, "|:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){5}(?::").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,2}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){4}(?:(:").concat(IPv6SegmentFormat, "){0,1}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,3}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){3}(?:(:").concat(IPv6SegmentFormat, "){0,2}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,4}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){2}(?:(:").concat(IPv6SegmentFormat, "){0,3}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,5}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){1}(?:(:").concat(IPv6SegmentFormat, "){0,4}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,6}|:)|") + "(?::((?::".concat(IPv6SegmentFormat, "){0,5}:").concat(IPv4AddressFormat, "|(?::").concat(IPv6SegmentFormat, "){1,7}|:))") + ')(%[0-9a-zA-Z-.:]{1,})?$');

    function isIP(str) {
      var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      (0, _assertString["default"])(str);
      version = String(version);

      if (!version) {
        return isIP(str, 4) || isIP(str, 6);
      }

      if (version === '4') {
        if (!IPv4AddressRegExp.test(str)) {
          return false;
        }

        var parts = str.split('.').sort(function (a, b) {
          return a - b;
        });
        return parts[3] <= 255;
      }

      if (version === '6') {
        return !!IPv6AddressRegExp.test(str);
      }

      return false;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isIP, isIP.exports);

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isEmail;

    var _assertString = _interopRequireDefault(assertString.exports);

    var _merge = _interopRequireDefault(merge.exports);

    var _isByteLength = _interopRequireDefault(isByteLength.exports);

    var _isFQDN = _interopRequireDefault(isFQDN.exports);

    var _isIP = _interopRequireDefault(isIP.exports);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    var default_email_options = {
      allow_display_name: false,
      require_display_name: false,
      allow_utf8_local_part: true,
      require_tld: true,
      blacklisted_chars: '',
      ignore_max_length: false,
      host_blacklist: []
    };
    /* eslint-disable max-len */

    /* eslint-disable no-control-regex */

    var splitNameAddress = /^([^\x00-\x1F\x7F-\x9F\cX]+)</i;
    var emailUserPart = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i;
    var gmailUserPart = /^[a-z\d]+$/;
    var quotedEmailUser = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i;
    var emailUserUtf8Part = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i;
    var quotedEmailUserUtf8 = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;
    var defaultMaxEmailLength = 254;
    /* eslint-enable max-len */

    /* eslint-enable no-control-regex */

    /**
     * Validate display name according to the RFC2822: https://tools.ietf.org/html/rfc2822#appendix-A.1.2
     * @param {String} display_name
     */

    function validateDisplayName(display_name) {
      var display_name_without_quotes = display_name.replace(/^"(.+)"$/, '$1'); // display name with only spaces is not valid

      if (!display_name_without_quotes.trim()) {
        return false;
      } // check whether display name contains illegal character


      var contains_illegal = /[\.";<>]/.test(display_name_without_quotes);

      if (contains_illegal) {
        // if contains illegal characters,
        // must to be enclosed in double-quotes, otherwise it's not a valid display name
        if (display_name_without_quotes === display_name) {
          return false;
        } // the quotes in display name must start with character symbol \


        var all_start_with_back_slash = display_name_without_quotes.split('"').length === display_name_without_quotes.split('\\"').length;

        if (!all_start_with_back_slash) {
          return false;
        }
      }

      return true;
    }

    function isEmail(str, options) {
      (0, _assertString["default"])(str);
      options = (0, _merge["default"])(options, default_email_options);

      if (options.require_display_name || options.allow_display_name) {
        var display_email = str.match(splitNameAddress);

        if (display_email) {
          var display_name = display_email[1]; // Remove display name and angle brackets to get email address
          // Can be done in the regex but will introduce a ReDOS (See  #1597 for more info)

          str = str.replace(display_name, '').replace(/(^<|>$)/g, ''); // sometimes need to trim the last space to get the display name
          // because there may be a space between display name and email address
          // eg. myname <address@gmail.com>
          // the display name is `myname` instead of `myname `, so need to trim the last space

          if (display_name.endsWith(' ')) {
            display_name = display_name.substr(0, display_name.length - 1);
          }

          if (!validateDisplayName(display_name)) {
            return false;
          }
        } else if (options.require_display_name) {
          return false;
        }
      }

      if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {
        return false;
      }

      var parts = str.split('@');
      var domain = parts.pop();
      var lower_domain = domain.toLowerCase();

      if (options.host_blacklist.includes(lower_domain)) {
        return false;
      }

      var user = parts.join('@');

      if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {
        /*
          Previously we removed dots for gmail addresses before validating.
          This was removed because it allows `multiple..dots@gmail.com`
          to be reported as valid, but it is not.
          Gmail only normalizes single dots, removing them from here is pointless,
          should be done in normalizeEmail
        */
        user = user.toLowerCase(); // Removing sub-address from username before gmail validation

        var username = user.split('+')[0]; // Dots are not included in gmail length restriction

        if (!(0, _isByteLength["default"])(username.replace(/\./g, ''), {
          min: 6,
          max: 30
        })) {
          return false;
        }

        var _user_parts = username.split('.');

        for (var i = 0; i < _user_parts.length; i++) {
          if (!gmailUserPart.test(_user_parts[i])) {
            return false;
          }
        }
      }

      if (options.ignore_max_length === false && (!(0, _isByteLength["default"])(user, {
        max: 64
      }) || !(0, _isByteLength["default"])(domain, {
        max: 254
      }))) {
        return false;
      }

      if (!(0, _isFQDN["default"])(domain, {
        require_tld: options.require_tld
      })) {
        if (!options.allow_ip_domain) {
          return false;
        }

        if (!(0, _isIP["default"])(domain)) {
          if (!domain.startsWith('[') || !domain.endsWith(']')) {
            return false;
          }

          var noBracketdomain = domain.substr(1, domain.length - 2);

          if (noBracketdomain.length === 0 || !(0, _isIP["default"])(noBracketdomain)) {
            return false;
          }
        }
      }

      if (user[0] === '"') {
        user = user.slice(1, user.length - 1);
        return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);
      }

      var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;
      var user_parts = user.split('.');

      for (var _i = 0; _i < user_parts.length; _i++) {
        if (!pattern.test(user_parts[_i])) {
          return false;
        }
      }

      if (options.blacklisted_chars) {
        if (user.search(new RegExp("[".concat(options.blacklisted_chars, "]+"), 'g')) !== -1) return false;
      }

      return true;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isEmail$1, isEmail$1.exports);

  var isEmail = /*@__PURE__*/getDefaultExportFromCjs(isEmail$1.exports);

  var isURL$1 = {exports: {}};

  (function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isURL;

    var _assertString = _interopRequireDefault(assertString.exports);

    var _isFQDN = _interopRequireDefault(isFQDN.exports);

    var _isIP = _interopRequireDefault(isIP.exports);

    var _merge = _interopRequireDefault(merge.exports);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _iterableToArrayLimit(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    /*
    options for isURL method
    
    require_protocol - if set as true isURL will return false if protocol is not present in the URL
    require_valid_protocol - isURL will check if the URL's protocol is present in the protocols option
    protocols - valid protocols can be modified with this option
    require_host - if set as false isURL will not check if host is present in the URL
    require_port - if set as true isURL will check if port is present in the URL
    allow_protocol_relative_urls - if set as true protocol relative URLs will be allowed
    validate_length - if set as false isURL will skip string length validation (IE maximum is 2083)
    
    */


    var default_url_options = {
      protocols: ['http', 'https', 'ftp'],
      require_tld: true,
      require_protocol: false,
      require_host: true,
      require_port: false,
      require_valid_protocol: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_protocol_relative_urls: false,
      allow_fragments: true,
      allow_query_components: true,
      validate_length: true
    };
    var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;

    function isRegExp(obj) {
      return Object.prototype.toString.call(obj) === '[object RegExp]';
    }

    function checkHost(host, matches) {
      for (var i = 0; i < matches.length; i++) {
        var match = matches[i];

        if (host === match || isRegExp(match) && match.test(host)) {
          return true;
        }
      }

      return false;
    }

    function isURL(url, options) {
      (0, _assertString["default"])(url);

      if (!url || /[\s<>]/.test(url)) {
        return false;
      }

      if (url.indexOf('mailto:') === 0) {
        return false;
      }

      options = (0, _merge["default"])(options, default_url_options);

      if (options.validate_length && url.length >= 2083) {
        return false;
      }

      if (!options.allow_fragments && url.includes('#')) {
        return false;
      }

      if (!options.allow_query_components && (url.includes('?') || url.includes('&'))) {
        return false;
      }

      var protocol, auth, host, hostname, port, port_str, split, ipv6;
      split = url.split('#');
      url = split.shift();
      split = url.split('?');
      url = split.shift();
      split = url.split('://');

      if (split.length > 1) {
        protocol = split.shift().toLowerCase();

        if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
          return false;
        }
      } else if (options.require_protocol) {
        return false;
      } else if (url.substr(0, 2) === '//') {
        if (!options.allow_protocol_relative_urls) {
          return false;
        }

        split[0] = url.substr(2);
      }

      url = split.join('://');

      if (url === '') {
        return false;
      }

      split = url.split('/');
      url = split.shift();

      if (url === '' && !options.require_host) {
        return true;
      }

      split = url.split('@');

      if (split.length > 1) {
        if (options.disallow_auth) {
          return false;
        }

        if (split[0] === '') {
          return false;
        }

        auth = split.shift();

        if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {
          return false;
        }

        var _auth$split = auth.split(':'),
            _auth$split2 = _slicedToArray(_auth$split, 2),
            user = _auth$split2[0],
            password = _auth$split2[1];

        if (user === '' && password === '') {
          return false;
        }
      }

      hostname = split.join('@');
      port_str = null;
      ipv6 = null;
      var ipv6_match = hostname.match(wrapped_ipv6);

      if (ipv6_match) {
        host = '';
        ipv6 = ipv6_match[1];
        port_str = ipv6_match[2] || null;
      } else {
        split = hostname.split(':');
        host = split.shift();

        if (split.length) {
          port_str = split.join(':');
        }
      }

      if (port_str !== null && port_str.length > 0) {
        port = parseInt(port_str, 10);

        if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
          return false;
        }
      } else if (options.require_port) {
        return false;
      }

      if (options.host_whitelist) {
        return checkHost(host, options.host_whitelist);
      }

      if (!(0, _isIP["default"])(host) && !(0, _isFQDN["default"])(host, options) && (!ipv6 || !(0, _isIP["default"])(ipv6, 6))) {
        return false;
      }

      host = host || ipv6;

      if (options.host_blacklist && checkHost(host, options.host_blacklist)) {
        return false;
      }

      return true;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  })(isURL$1, isURL$1.exports);

  var isURL = /*@__PURE__*/getDefaultExportFromCjs(isURL$1.exports);

  function ownKeys$18(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$17(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$18(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$18(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function isValueEmpty(val) {
    var type = Object.prototype.toString.call(val);
    var typeMap = {
      Date: "[object Date]"
    };

    if (type === typeMap.Date) {
      return false;
    }

    return _typeof$2(val) === "object" ? isEmpty_1(val) : ["", void 0, null].includes(val);
  }
  var VALIDATE_MAP = {
    date: isDate,
    url: isURL,
    email: isEmail,
    required: function required(val) {
      return !isValueEmpty(val);
    },
    "boolean": function boolean(val) {
      return typeof val === "boolean";
    },
    max: function max(val, num) {
      return isNumber_1(val) ? val <= num : getCharacterLength(val) <= num;
    },
    min: function min(val, num) {
      return isNumber_1(val) ? val >= num : getCharacterLength(val) >= num;
    },
    len: function len(val, num) {
      return getCharacterLength(val) === num;
    },
    number: function number(val) {
      return isNumber_1(val);
    },
    "enum": function _enum(val, strs) {
      return strs.includes(val);
    },
    idcard: function idcard(val) {
      return /^(\d{18,18}|\d{15,15}|\d{17,17}x)$/i.test(val);
    },
    telnumber: function telnumber(val) {
      return /^1[3-9]\d{9}$/.test(val);
    },
    pattern: function pattern(val, regexp) {
      return regexp.test(val);
    },
    validator: function validator(val, validate2) {
      return validate2(val);
    }
  };
  function validateOneRule(_x, _x2) {
    return _validateOneRule.apply(this, arguments);
  }

  function _validateOneRule() {
    _validateOneRule = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(value, rule) {
      var validateResult, keys, vOptions, vValidateFun, i, key, validateRule;
      return regenerator.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              validateResult = {
                result: true
              };
              keys = Object.keys(rule);
              i = 0;

            case 3:
              if (!(i < keys.length)) {
                _context.next = 15;
                break;
              }

              key = keys[i];

              if (!(!rule.required && isValueEmpty(value) && !rule.validator)) {
                _context.next = 7;
                break;
              }

              return _context.abrupt("return", validateResult);

            case 7:
              validateRule = VALIDATE_MAP[key];

              if (!(validateRule && rule[key])) {
                _context.next = 12;
                break;
              }

              vOptions = rule[key] === true ? void 0 : rule[key];
              vValidateFun = validateRule;
              return _context.abrupt("break", 15);

            case 12:
              i++;
              _context.next = 3;
              break;

            case 15:
              if (!vValidateFun) {
                _context.next = 23;
                break;
              }

              _context.next = 18;
              return vValidateFun(value, vOptions);

            case 18:
              validateResult = _context.sent;

              if (!(typeof validateResult === "boolean")) {
                _context.next = 21;
                break;
              }

              return _context.abrupt("return", _objectSpread$17(_objectSpread$17({}, rule), {}, {
                result: validateResult
              }));

            case 21:
              if (!(_typeof$2(validateResult) === "object")) {
                _context.next = 23;
                break;
              }

              return _context.abrupt("return", validateResult);

            case 23:
              return _context.abrupt("return", validateResult);

            case 24:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _validateOneRule.apply(this, arguments);
  }

  function validate(_x3, _x4) {
    return _validate.apply(this, arguments);
  }

  function _validate() {
    _validate = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(value, rules) {
      var all, r;
      return regenerator.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              all = rules.map(function (rule) {
                return validateOneRule(value, rule);
              });
              _context2.next = 3;
              return Promise.all(all);

            case 3:
              r = _context2.sent;
              return _context2.abrupt("return", r);

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _validate.apply(this, arguments);
  }

  var props$u = {
    "for": {
      type: String,
      "default": ""
    },
    help: {
      type: [String, Function]
    },
    label: {
      type: [String, Function],
      "default": ""
    },
    labelAlign: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right", "top"].includes(val);
      }
    },
    labelWidth: {
      type: [String, Number]
    },
    name: {
      type: String,
      "default": ""
    },
    requiredMark: {
      type: Boolean,
      "default": void 0
    },
    rules: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    showErrorMessage: {
      type: Boolean,
      "default": void 0
    },
    statusIcon: {
      type: [Boolean, Function],
      "default": void 0
    },
    successBorder: Boolean
  };

  function ownKeys$17(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$16(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$17(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$17(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _FormItem = vue.defineComponent({
    name: "TFormItem",
    props: _objectSpread$16({}, props$u),
    setup: function setup(props2) {
      var renderContent = useTNodeJSX();
      var CLASS_NAMES = useCLASSNAMES$1();

      var _useConfig = useConfig("form"),
          global = _useConfig.global;

      var form = vue.inject(FormInjectionKey, void 0);
      var FORM_ITEM_CLASS_PREFIX = usePrefixClass("form-item__");
      var needRequiredMark = vue.computed(function () {
        var requiredMark = props2.requiredMark;
        if (typeof requiredMark === "boolean") return requiredMark;
        var parentRequiredMark = (form === null || form === void 0 ? void 0 : form.requiredMark) === void 0 ? global.value.requiredMark : form === null || form === void 0 ? void 0 : form.requiredMark;
        var isRequired = innerRules.value.filter(function (rule) {
          return rule.required;
        }).length > 0;
        return Boolean(parentRequiredMark && isRequired);
      });
      var hasColon = vue.computed(function () {
        return !!(form !== null && form !== void 0 && form.colon && renderContent("label"));
      });
      var FROM_LABEL = usePrefixClass("form__label");
      var labelAlign = vue.computed(function () {
        return isNil_1(props2.labelAlign) ? form === null || form === void 0 ? void 0 : form.labelAlign : props2.labelAlign;
      });
      var labelWidth = vue.computed(function () {
        return isNil_1(props2.labelWidth) ? form === null || form === void 0 ? void 0 : form.labelWidth : props2.labelWidth;
      });
      var labelClasses = vue.computed(function () {
        var _ref;

        return [CLASS_NAMES.value.label, (_ref = {}, _defineProperty$3(_ref, "".concat(FROM_LABEL.value, "--required"), needRequiredMark.value), _defineProperty$3(_ref, "".concat(FROM_LABEL.value, "--colon"), hasColon.value), _defineProperty$3(_ref, "".concat(FROM_LABEL.value, "--top"), labelAlign.value === "top" || !labelWidth.value), _defineProperty$3(_ref, "".concat(FROM_LABEL.value, "--left"), labelAlign.value === "left" && labelWidth.value), _defineProperty$3(_ref, "".concat(FROM_LABEL.value, "--right"), labelAlign.value === "right" && labelWidth.value), _ref)];
      });

      var renderLabel = function renderLabel() {
        if (Number(labelWidth.value) === 0) return;
        var labelStyle = {};

        if (labelWidth.value && labelAlign.value !== "top") {
          if (typeof labelWidth.value === "number") {
            labelStyle = {
              width: "".concat(labelWidth.value, "px")
            };
          } else {
            labelStyle = {
              width: labelWidth.value
            };
          }
        }

        return vue.createVNode("div", {
          "class": labelClasses.value,
          "style": labelStyle
        }, [vue.createVNode("label", {
          "for": props2["for"]
        }, [renderContent("label")])]);
      };

      var getDefaultIcon = function getDefaultIcon() {
        var resultIcon = function resultIcon(Icon) {
          return vue.createVNode("span", {
            "class": CLASS_NAMES.value.status
          }, [vue.createVNode(Icon, null, null)]);
        };

        var list = errorList.value;

        if (verifyStatus.value === "success"
        /* SUCCESS */
        ) {
          return resultIcon(checkCircleFilled);
        }

        if (list !== null && list !== void 0 && list[0]) {
          var type = list[0].type || "error";
          var icon = {
            error: closeCircleFilled,
            warning: errorCircleFilled
          }[type] || checkCircleFilled;
          return resultIcon(icon);
        }

        return null;
      };

      var renderSuffixIcon = function renderSuffixIcon() {
        var statusIcon = props2.statusIcon;
        if (statusIcon === false) return;
        var resultIcon = renderContent("statusIcon", {
          defaultNode: getDefaultIcon()
        });
        if (resultIcon) return vue.createVNode("span", {
          "className": CLASS_NAMES.value.status
        }, [resultIcon]);
        if (resultIcon === false) return;
        resultIcon = form === null || form === void 0 ? void 0 : form.renderContent("statusIcon", {
          defaultNode: getDefaultIcon()
        });
        if (resultIcon) return resultIcon;
      };

      var errorClasses = vue.computed(function () {
        if (!showErrorMessage.value) return "";

        if (verifyStatus.value === "success"
        /* SUCCESS */
        ) {
          return props2.successBorder ? [CLASS_NAMES.value.success, CLASS_NAMES.value.successBorder].join(" ") : CLASS_NAMES.value.success;
        }

        if (!errorList.value.length) return;
        var type = errorList.value[0].type || "error";
        return type === "error" ? CLASS_NAMES.value.error : CLASS_NAMES.value.warning;
      });
      var contentClasses = vue.computed(function () {
        return [CLASS_NAMES.value.controls, errorClasses.value];
      });
      var contentStyle = vue.computed(function () {
        var contentStyle2 = {};

        if (labelWidth.value && labelAlign.value !== "top") {
          if (typeof labelWidth.value === "number") {
            contentStyle2 = {
              marginLeft: "".concat(labelWidth.value, "px")
            };
          } else {
            contentStyle2 = {
              marginLeft: labelWidth.value
            };
          }
        }

        return contentStyle2;
      });
      var errorList = vue.ref([]);
      var successList = vue.ref([]);
      var verifyStatus = vue.ref("not"
      /* TO_BE_VALIDATED */
      );
      var resetValidating = vue.ref(false);
      var needResetField = vue.ref(false);

      var resetHandler = function resetHandler() {
        needResetField.value = false;
        errorList.value = [];
        successList.value = [];
        verifyStatus.value = "not"
        /* TO_BE_VALIDATED */
        ;
      };

      var getEmptyValue = function getEmptyValue() {
        var type = Object.prototype.toString.call(get_1(form === null || form === void 0 ? void 0 : form.data, props2.name));
        var emptyValue;

        if (type === "[object String]") {
          emptyValue = "";
        }

        if (type === "[object Array]") {
          emptyValue = [];
        }

        if (type === "[object Object]") {
          emptyValue = {};
        }

        return emptyValue;
      };

      var resetField = /*#__PURE__*/function () {
        var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(resetType) {
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (props2.name) {
                    _context.next = 2;
                    break;
                  }

                  return _context.abrupt("return");

                case 2:
                  if (resetType !== void 0) {
                    resetType === "empty" && set_1(form === null || form === void 0 ? void 0 : form.data, props2.name, getEmptyValue());
                    resetType === "initial" && set_1(form === null || form === void 0 ? void 0 : form.data, props2.name, initialValue.value);
                  } else {
                    (form === null || form === void 0 ? void 0 : form.resetType) === "empty" && set_1(form === null || form === void 0 ? void 0 : form.data, props2.name, getEmptyValue());
                    (form === null || form === void 0 ? void 0 : form.resetType) === "initial" && set_1(form === null || form === void 0 ? void 0 : form.data, props2.name, initialValue.value);
                  }

                  _context.next = 5;
                  return vue.nextTick();

                case 5:
                  if (resetValidating.value) {
                    needResetField.value = true;
                  } else {
                    resetHandler();
                  }

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function resetField(_x) {
          return _ref2.apply(this, arguments);
        };
      }();

      var errorMessages = vue.computed(function () {
        var _form$errorMessage;

        return (_form$errorMessage = form === null || form === void 0 ? void 0 : form.errorMessage) !== null && _form$errorMessage !== void 0 ? _form$errorMessage : global.value.errorMessage;
      });
      var innerRules = vue.computed(function () {
        var _props2$rules;

        if ((_props2$rules = props2.rules) !== null && _props2$rules !== void 0 && _props2$rules.length) return props2.rules;
        if (!props2.name) return [];
        var index = props2.name.lastIndexOf(".") || -1;
        var pRuleName = props2.name.slice(index + 1);
        return get_1(form === null || form === void 0 ? void 0 : form.rules, props2.name) || get_1(form === null || form === void 0 ? void 0 : form.rules, pRuleName) || [];
      });

      function validateHandler(_x2) {
        return _validateHandler.apply(this, arguments);
      }

      function _validateHandler() {
        _validateHandler = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4(trigger) {
          var rules, res;
          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  resetValidating.value = true;
                  rules = trigger === "all" ? innerRules.value : innerRules.value.filter(function (item) {
                    return (item.trigger || "change") === trigger;
                  });

                  if (rules !== null && rules !== void 0 && rules.length) {
                    _context4.next = 5;
                    break;
                  }

                  resetValidating.value = false;
                  return _context4.abrupt("return");

                case 5:
                  _context4.next = 7;
                  return validate(value.value, rules);

                case 7:
                  res = _context4.sent;
                  errorList.value = res.filter(function (item) {
                    return item.result !== true;
                  }).map(function (item) {
                    Object.keys(item).forEach(function (key) {
                      if (!item.message && errorMessages.value[key]) {
                        var compiled = template_1(errorMessages.value[key]);
                        item.message = compiled({
                          name: props2.label,
                          validate: item[key]
                        });
                      }
                    });
                    return item;
                  });
                  successList.value = res.filter(function (item) {
                    return item.result === true && item.message && item.type === "success";
                  });

                  if (rules.length) {
                    verifyStatus.value = errorList.value.length ? "fail"
                    /* FAIL */
                    : "success"
                    /* SUCCESS */
                    ;
                  } else {
                    verifyStatus.value = "not"
                    /* TO_BE_VALIDATED */
                    ;
                  }

                  if (needResetField.value) {
                    resetHandler();
                  }

                  resetValidating.value = false;
                  return _context4.abrupt("return", _defineProperty$3({}, props2.name, errorList.value.length === 0 ? true : res));

                case 14:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        }));
        return _validateHandler.apply(this, arguments);
      }

      var setValidateMessage = function setValidateMessage(validateMessage) {
        if (!validateMessage && !Array.isArray(validateMessage)) return;

        if (validateMessage.length === 0) {
          errorList.value = [];
          verifyStatus.value = "success"
          /* SUCCESS */
          ;
        }

        errorList.value = validateMessage.map(function (item) {
          return _objectSpread$16(_objectSpread$16({}, item), {}, {
            result: false
          });
        });
        verifyStatus.value = "fail"
        /* FAIL */
        ;
      };

      var value = vue.computed(function () {
        return (form === null || form === void 0 ? void 0 : form.data) && get_1(form === null || form === void 0 ? void 0 : form.data, props2.name);
      });
      var initialValue = vue.ref(void 0);

      var _toRefs = vue.toRefs(props2),
          name = _toRefs.name;

      var context = vue.reactive({
        name: name,
        resetHandler: resetHandler,
        resetField: resetField,
        validate: validateHandler,
        setValidateMessage: setValidateMessage
      });
      vue.onMounted(function () {
        initialValue.value = cloneDeep_1(value.value);
        form === null || form === void 0 ? void 0 : form.children.push(context);
      });
      vue.onBeforeUnmount(function () {
        if (form) form.children = form === null || form === void 0 ? void 0 : form.children.filter(function (ctx) {
          return ctx !== context;
        });
      });
      vue.watch(value, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return validateHandler("change");

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      })), {
        deep: true
      });
      var showErrorMessage = vue.computed(function () {
        if (typeof props2.showErrorMessage === "boolean") return props2.showErrorMessage;
        return form === null || form === void 0 ? void 0 : form.showErrorMessage;
      });
      var classes = vue.computed(function () {
        var _ref4;

        return [CLASS_NAMES.value.formItem, FORM_ITEM_CLASS_PREFIX.value + props2.name, (_ref4 = {}, _defineProperty$3(_ref4, CLASS_NAMES.value.formItemWithHelp, helpNode.value), _defineProperty$3(_ref4, CLASS_NAMES.value.formItemWithExtra, extraNode.value), _ref4)];
      });
      var helpNode = vue.computed(function () {
        if (props2.help) {
          return vue.createVNode("div", {
            "class": CLASS_NAMES.value.help
          }, [props2.help]);
        }

        return null;
      });
      var extraNode = vue.computed(function () {
        var _list$;

        var getExtraNode = function getExtraNode(content) {
          return vue.createVNode("div", {
            "class": CLASS_NAMES.value.extra
          }, [content]);
        };

        var list = errorList.value;

        if (showErrorMessage.value && list !== null && list !== void 0 && (_list$ = list[0]) !== null && _list$ !== void 0 && _list$.message) {
          return getExtraNode(list[0].message);
        }

        if (successList.value.length) {
          return getExtraNode(successList.value[0].message);
        }

        return null;
      });

      var handleBlur = /*#__PURE__*/function () {
        var _ref5 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return validateHandler("blur");

                case 2:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }));

        return function handleBlur() {
          return _ref5.apply(this, arguments);
        };
      }();

      vue.provide(FormItemInjectionKey, {
        handleBlur: handleBlur
      });
      return function () {
        return vue.createVNode("div", {
          "class": classes.value
        }, [renderLabel(), vue.createVNode("div", {
          "class": contentClasses.value,
          "style": contentStyle.value
        }, [vue.createVNode("div", {
          "class": CLASS_NAMES.value.controlsContent
        }, [renderContent("default"), renderSuffixIcon()]), [helpNode.value, extraNode.value]])]);
      };
    }
  });

  var Form = withInstall(_Form);
  var FormItem = withInstall(_FormItem);

  var props$t = {
    allowUncheck: Boolean,
    checked: {
      type: Boolean,
      "default": void 0
    },
    modelValue: {
      type: Boolean,
      "default": void 0
    },
    defaultChecked: Boolean,
    "default": {
      type: [String, Function]
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    label: {
      type: [String, Function]
    },
    name: {
      type: String,
      "default": ""
    },
    value: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    onChange: Function,
    onClick: Function
  };

  var RadioGroupInjectionKey = Symbol("RadioGroupProvide");
  var RadioButtonInjectionKey = Symbol("RadioButtonProvide");

  function ownKeys$16(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$15(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$16(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$16(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function getValidAttrs$1(obj) {
    var newObj = {};
    Object.keys(obj).forEach(function (key) {
      if (typeof obj[key] !== "undefined") {
        newObj[key] = obj[key];
      }
    });
    return newObj;
  }

  var _Radio = vue.defineComponent({
    name: "TRadio",
    inheritAttrs: false,
    props: _objectSpread$15({}, props$t),
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs;

      var _toRefs = vue.toRefs(props2),
          checked = _toRefs.checked,
          modelValue = _toRefs.modelValue;

      var _useVModel = useVModel(checked, modelValue, props2.defaultChecked, props2.onChange, "checked"),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          innerChecked = _useVModel2[0],
          setInnerChecked = _useVModel2[1];

      var radioChecked = vue.computed(function () {
        return radioGroup ? props2.value === radioGroup.value : innerChecked.value;
      });
      var radioGroup = vue.inject(RadioGroupInjectionKey, void 0);

      var handleChange = function handleChange(e) {
        if (radioGroup !== null && radioGroup !== void 0 && radioGroup.setValue) {
          radioGroup.setValue(props2.value, {
            e: e
          });
        } else {
          var checked2 = e.target.checked;
          setInnerChecked(checked2, {
            e: e
          });
        }
      };

      var handleClick = function handleClick(e) {
        var _props2$onClick;

        (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 ? void 0 : _props2$onClick.call(props2, {
          e: e
        });
        if (!radioChecked.value || !props2.allowUncheck) return;

        if (radioGroup) {
          radioGroup.setValue(void 0, {
            e: e
          });
        } else {
          setInnerChecked(false, {
            e: e
          });
        }
      };

      var inputEvents = vue.computed(function () {
        return getValidAttrs$1({
          focus: attrs.onFocus,
          blur: attrs.onBlur,
          keydown: attrs.onKeydown,
          keyup: attrs.onKeyup,
          keypresss: attrs.onKeypresss
        });
      });
      var wrapperAttrs = vue.computed(function () {
        var events = [].concat(_toConsumableArray(Object.keys(inputEvents.value)), ["input", "change"]).map(function (str) {
          return "on".concat(str[0].toUpperCase()).concat(str.slice(1));
        });
        return omit$1(attrs, events);
      });
      var groupDisabled = vue.computed(function () {
        return radioGroup === null || radioGroup === void 0 ? void 0 : radioGroup.disabled;
      });
      var disabled = useFormDisabled(groupDisabled);
      var inputProps = vue.computed(function () {
        return {
          name: radioGroup ? radioGroup.name : props2.name,
          checked: radioChecked.value,
          disabled: disabled.value,
          value: props2.value
        };
      });

      var _useCommonClassName = useCommonClassName$2(),
          STATUS = _useCommonClassName.STATUS;

      var radioButton = vue.inject(RadioButtonInjectionKey, void 0);
      var radioBtnName = usePrefixClass("radio-button");
      var COMPONENT_NAME = usePrefixClass("radio");
      var prefixCls = vue.computed(function () {
        return radioButton ? radioBtnName.value : COMPONENT_NAME.value;
      });
      var inputClass = vue.computed(function () {
        var _ref2;

        return ["".concat(prefixCls.value), (_ref2 = {}, _defineProperty$3(_ref2, STATUS.value.checked, inputProps.value.checked), _defineProperty$3(_ref2, STATUS.value.disabled, inputProps.value.disabled), _ref2)];
      });
      var renderContent = useContent();
      return function () {
        return vue.createVNode("label", vue.mergeProps({
          "class": inputClass.value
        }, wrapperAttrs.value), [vue.createVNode("input", vue.mergeProps({
          "type": "radio",
          "class": "".concat(prefixCls.value, "__former")
        }, inputEvents.value, inputProps.value, {
          "onChange": handleChange,
          "onClick": handleClick
        }), null), vue.createVNode("span", {
          "class": "".concat(prefixCls.value, "__input")
        }, null), vue.createVNode("span", {
          "class": "".concat(prefixCls.value, "__label")
        }, [renderContent("default", "label")])]);
      };
    }
  });

  var props$s = {
    disabled: {
      type: Boolean,
      "default": void 0
    },
    name: {
      type: String,
      "default": ""
    },
    options: {
      type: Array
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    value: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    modelValue: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    variant: {
      type: String,
      "default": "outline",
      validator: function validator(val) {
        return ["outline", "primary-filled", "default-filled"].includes(val);
      }
    },
    onChange: Function
  };

  function ownKeys$15(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$14(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$15(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$15(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Group = vue.defineComponent({
    name: "TRadioGroup",
    props: _objectSpread$14({}, props$s),
    setup: function setup(props2) {
      var _toRefs = vue.toRefs(props2),
          value = _toRefs.value,
          modelValue = _toRefs.modelValue;

      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          innerValue = _useVModel2[0],
          setInnerValue = _useVModel2[1];

      var radioGroupRef = vue.ref();
      var radioBtnName = usePrefixClass("radio-button");

      var _useCommonClassName = useCommonClassName$2(),
          STATUS = _useCommonClassName.STATUS,
          SIZE = _useCommonClassName.SIZE;

      var checkedClassName = vue.computed(function () {
        return ".".concat(radioBtnName.value, ".").concat(STATUS.value.checked);
      });
      var barStyle = vue.ref({
        width: "0px",
        left: "0px"
      });

      var calcDefaultBarStyle = function calcDefaultBarStyle() {
        var div = document.createElement("div");
        div.setAttribute("style", "position: absolute; visibility: hidden;");
        div.appendChild(radioGroupRef.value.cloneNode(true));
        document.body.appendChild(div);
        var defaultCheckedRadio = div.querySelector(checkedClassName.value);
        var offsetWidth = defaultCheckedRadio.offsetWidth,
            offsetLeft = defaultCheckedRadio.offsetLeft;
        barStyle.value = {
          width: "".concat(offsetWidth, "px"),
          left: "".concat(offsetLeft, "px")
        };
        document.body.removeChild(div);
      };

      var calcBarStyle = function calcBarStyle() {
        if (props2.variant === "outline") return;
        var checkedRadio = radioGroupRef.value.querySelector(checkedClassName.value);
        if (!checkedRadio) return;
        var offsetWidth = checkedRadio.offsetWidth,
            offsetLeft = checkedRadio.offsetLeft;

        if (!offsetWidth) {
          calcDefaultBarStyle();
        } else {
          barStyle.value = {
            width: "".concat(offsetWidth, "px"),
            left: "".concat(offsetLeft, "px")
          };
        }
      };

      vue.watch(innerValue, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return vue.nextTick();

              case 2:
                calcBarStyle();

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      })));
      vue.onMounted(function () {
        calcBarStyle();
      });

      var _toRefs2 = vue.toRefs(props2),
          name = _toRefs2.name,
          disabled = _toRefs2.disabled;

      vue.provide(RadioGroupInjectionKey, vue.reactive({
        name: name,
        disabled: disabled,
        value: innerValue,
        setValue: setInnerValue
      }));
      var radioGroupName = usePrefixClass("radio-group");
      var renderSlot = useTNodeDefault();

      var renderBlock = function renderBlock() {
        if (props2.variant.includes("filled") && innerValue.value) return vue.createVNode("div", {
          "style": barStyle.value,
          "class": "".concat(radioGroupName.value, "__bg-block")
        }, null);
      };

      var renderOptions = function renderOptions() {
        var _props2$options;

        return (_props2$options = props2.options) === null || _props2$options === void 0 ? void 0 : _props2$options.map(function (option) {
          var opt = option;

          if (isNumber_1(option) || isString_1(option)) {
            opt = {
              value: option,
              label: option.toString()
            };
          }

          return vue.createVNode(_Radio, {
            "key": "radio-group-options-".concat(opt.value, "-").concat(Math.random()),
            "name": props2.name,
            "checked": innerValue.value === opt.value,
            "disabled": "disabled" in opt ? opt.disabled : props2.disabled,
            "value": opt.value
          }, {
            "default": function _default() {
              return [typeof opt.label === "function" ? opt.label(vue.h) : opt.label];
            }
          });
        });
      };

      var groupClass = vue.computed(function () {
        var _ref2;

        return ["".concat(radioGroupName.value), SIZE.value[props2.size], (_ref2 = {}, _defineProperty$3(_ref2, "".concat(radioGroupName.value, "__outline"), props2.variant === "outline"), _defineProperty$3(_ref2, "".concat(radioGroupName.value, "--filled"), props2.variant.includes("filled")), _defineProperty$3(_ref2, "".concat(radioGroupName.value, "--primary-filled"), props2.variant === "primary-filled"), _ref2)];
      });
      return function () {
        return vue.createVNode("div", {
          "ref": radioGroupRef,
          "class": groupClass.value
        }, [renderSlot("default") || renderOptions(), renderBlock()]);
      };
    }
  });

  function ownKeys$14(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$13(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$14(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$14(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot$h(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var _RadioButton = vue.defineComponent({
    name: "TRadioButton",
    inheritAttrs: false,
    props: _objectSpread$13({}, props$t),
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs;
      vue.provide(RadioButtonInjectionKey, vue.reactive({}));
      var radioProps = vue.computed(function () {
        var res = _objectSpread$13(_objectSpread$13({}, props2), omit$1(attrs, Object.keys(attrs).filter(function (key) {
          return key.startsWith("on");
        })));

        return res;
      });
      var renderContent = useTNodeDefault();
      return function () {
        var _slot;

        return vue.createVNode(_Radio, radioProps.value, _isSlot$h(_slot = renderContent("default")) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        });
      };
    }
  });

  var Radio = withInstall(_Radio);
  var RadioGroup = withInstall(_Group);
  var RadioButton = withInstall(_RadioButton);

  var props$r = {
    disabled: Boolean,
    inputNumberProps: {
      type: [Boolean, Object],
      "default": false
    },
    label: {
      type: [String, Boolean, Function],
      "default": false
    },
    layout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        return ["vertical", "horizontal"].includes(val);
      }
    },
    marks: {
      type: [Object, Array]
    },
    max: {
      type: Number,
      "default": 100
    },
    min: {
      type: Number,
      "default": 0
    },
    range: Boolean,
    step: {
      type: Number,
      "default": 1
    },
    modelValue: {
      type: [Number, Array],
      "default": void 0
    },
    tooltipProps: {
      type: Object
    },
    value: {
      type: [Number, Array],
      "default": void 0
    },
    defaultValue: {
      type: [Number, Array]
    },
    onChange: Function
  };

  var TSliderMark = vue.defineComponent({
    name: "TSliderMark",
    props: {
      mark: {
        type: [Object, Array, String, Number]
      },
      point: {
        type: Number
      },
      onClickMarkPoint: {
        type: Function,
        "default": function _default() {}
      }
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("slider__mark");

      var changeValue = function changeValue(e) {
        var _props$onClickMarkPoi;

        e.stopPropagation();
        props === null || props === void 0 ? void 0 : (_props$onClickMarkPoi = props.onClickMarkPoint) === null || _props$onClickMarkPoi === void 0 ? void 0 : _props$onClickMarkPoi.call(props, props.point);
      };

      return function () {
        return vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-text"),
          "onClick": changeValue
        }, [props.mark]);
      };
    }
  });

  function ownKeys$13(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$12(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$13(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$13(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var initialProps = {
    visible: false,
    trigger: "hover",
    showArrow: true,
    overlayStyle: void 0,
    overlayClassName: void 0,
    attach: "body",
    theme: "default"
  };
  var useSliderTooltip = function useSliderTooltip(tooltipProps, vertical) {
    var tooltipRef = vue.ref();
    var showTooltip = vue.ref(!tooltipProps === false);
    var normalizeProps = vue.ref(_objectSpread$12({}, initialProps));

    var toggleTooltip = function toggleTooltip(toState) {
      normalizeProps.value.visible = toState;
    };

    var validProps = vue.computed(function () {
      var placement = vertical ? "right" : "top";

      if (tooltipProps instanceof Object) {
        if (!(tooltipProps !== null && tooltipProps !== void 0 && tooltipProps.placement)) {
          normalizeProps.value.placement = placement;
        }

        return _objectSpread$12(_objectSpread$12({}, normalizeProps.value), tooltipProps);
      }

      return _objectSpread$12(_objectSpread$12({}, normalizeProps.value), {}, {
        placement: placement
      });
    });
    return {
      tooltipRef: tooltipRef,
      tooltipProps: validProps,
      toggleTooltip: toggleTooltip,
      showTooltip: showTooltip
    };
  };

  var sliderPropsInjectKey = Symbol("sliderProps");

  var _SliderButton = vue.defineComponent({
    name: "TSliderButton",
    components: {
      TTooltip: Tooltip
    },
    props: {
      value: {
        type: [Number],
        "default": 0
      },
      vertical: {
        type: Boolean,
        "default": false
      },
      tooltipProps: {
        type: [Boolean, Object],
        "default": true
      }
    },
    emits: ["input"],
    setup: function setup(props, ctx) {
      var COMPONENT_NAME = usePrefixClass("slider__button");

      var _useSliderTooltip = useSliderTooltip(props.tooltipProps, props.vertical),
          tooltipRef = _useSliderTooltip.tooltipRef,
          tooltipProps = _useSliderTooltip.tooltipProps,
          toggleTooltip = _useSliderTooltip.toggleTooltip,
          showTooltip = _useSliderTooltip.showTooltip;

      var parentProps = vue.inject(sliderPropsInjectKey);
      var buttonRef = vue.ref();
      var slideButtonProps = vue.reactive({
        dragging: false,
        isClick: false,
        startX: 0,
        startY: 0,
        startPos: 0,
        newPos: null
      });
      var rangeDiff = vue.computed(function () {
        return Number(parentProps.max) - Number(parentProps.min);
      });
      var currentPos = vue.computed(function () {
        return "".concat((props.value - parentProps.min) / rangeDiff.value * 100, "%");
      });
      var step = vue.computed(function () {
        return parentProps.step;
      });
      var wrapperStyle = vue.computed(function () {
        return props.vertical ? {
          bottom: currentPos.value
        } : {
          left: currentPos.value
        };
      });
      vue.watchEffect(function () {
        parentProps.toggleDragging(slideButtonProps.dragging);
      });

      var setPosition = function setPosition(pos) {
        var newPos = pos;

        if (newPos === null || Number.isNaN(newPos)) {
          return;
        }

        if (newPos > 100) {
          newPos = 100;
        } else if (newPos < 0) {
          newPos = 0;
        }

        var perStepLen = 100 * step.value / rangeDiff.value;
        var steps = Math.round(newPos / perStepLen);
        var value = steps * perStepLen * rangeDiff.value * 0.01;
        value += parentProps.min;
        value = Number(parseFloat("".concat(value)).toFixed(parentProps.precision));
        ctx.emit("input", value);
        vue.nextTick(function () {
          var _tooltipRef$value$upd, _tooltipRef$value;

          tooltipRef.value && ((_tooltipRef$value$upd = (_tooltipRef$value = tooltipRef.value).updatePopper) === null || _tooltipRef$value$upd === void 0 ? void 0 : _tooltipRef$value$upd.call(_tooltipRef$value));
        });
      };

      var handleMouseEnter = function handleMouseEnter() {
        buttonRef.value.focus();
        toggleTooltip(true);
      };

      var handleMouseLeave = function handleMouseLeave() {
        if (!slideButtonProps.dragging) {
          toggleTooltip(false);
        }
      };

      var onDragStart = function onDragStart(event) {
        slideButtonProps.dragging = true;
        slideButtonProps.isClick = true;
        var type = event.type;
        var clientY = event.clientY,
            clientX = event.clientX;

        if (type === "touchstart") {
          var touch = event.touches;
          var _ref = [touch[0].clientY, touch[0].clientX];
          clientY = _ref[0];
          clientX = _ref[1];
        }

        if (props.vertical) {
          slideButtonProps.startY = clientY;
        } else {
          slideButtonProps.startX = clientX;
        }

        slideButtonProps.startPos = parseFloat(currentPos.value);
        slideButtonProps.newPos = slideButtonProps.startPos;
      };

      var onDragging = function onDragging(e) {
        var event = e;

        if (!slideButtonProps.dragging) {
          return;
        }

        slideButtonProps.isClick = false;

        if (parentProps !== null && parentProps !== void 0 && parentProps.resetSize && typeof (parentProps === null || parentProps === void 0 ? void 0 : parentProps.resetSize) === "function") {
          parentProps.resetSize();
        }

        var diff = 0;
        var parentSliderSize = parentProps.sliderSize;

        if (props.vertical) {
          diff = slideButtonProps.startY - event.clientY;
        } else {
          diff = event.clientX - slideButtonProps.startX;
        }

        diff = diff / parentSliderSize * 100;
        slideButtonProps.newPos = slideButtonProps.startPos + diff;
        setPosition(slideButtonProps.newPos);
      };

      var onDragEnd = function onDragEnd() {
        if (slideButtonProps.dragging) {
          setTimeout(function () {
            slideButtonProps.dragging = false;
            toggleTooltip(false);

            if (!slideButtonProps.isClick) {
              setPosition(slideButtonProps.newPos);
            }
          }, 0);
          window.removeEventListener("mousemove", onDragging);
          window.removeEventListener("touchmove", onDragging);
          window.removeEventListener("mouseup", onDragEnd);
          window.removeEventListener("touchend", onDragEnd);
          window.removeEventListener("contextmenu", onDragEnd);
        }
      };

      function onButtonDown(event) {
        if (parentProps.disabled) {
          return;
        }

        event.preventDefault();
        onDragStart(event);
        window.addEventListener("mousemove", onDragging);
        window.addEventListener("mouseup", onDragEnd);
        window.addEventListener("touchmove", onDragging);
        window.addEventListener("touchend", onDragEnd);
        window.addEventListener("contextmenu", onDragEnd);
      }

      var onKeyDown = function onKeyDown(state) {
        if (parentProps.disabled) {
          return;
        }

        var stepLength = step.value / rangeDiff.value * 100;

        if (state === "sub") {
          stepLength = -stepLength;
        }

        slideButtonProps.newPos = parseFloat(currentPos.value) + stepLength;
        setPosition(slideButtonProps.newPos);
      };

      var onNativeKeyDown = function onNativeKeyDown(e) {
        var code = e.code;
        e.preventDefault();

        if (code === "ArrowDown" || code === "ArrowLeft") {
          onKeyDown("sub");
        }

        if (code === "ArrowUp" || code === "ArrowRight") {
          onKeyDown("add");
        }
      };

      ctx.expose({
        setPosition: setPosition
      });
      return function () {
        return vue.createVNode("div", {
          "ref": buttonRef,
          "class": "".concat(COMPONENT_NAME.value, "-wrapper"),
          "style": wrapperStyle.value,
          "tabindex": "0",
          "show-tooltip": showTooltip.value,
          "disabled": parentProps.disabled,
          "onmouseenter": handleMouseEnter,
          "onmouseleave": handleMouseLeave,
          "onmousedown": onButtonDown,
          "onTouchstart": onButtonDown,
          "onfocus": handleMouseEnter,
          "onblur": handleMouseLeave,
          "onKeydown": onNativeKeyDown
        }, [vue.createVNode(vue.resolveComponent("t-tooltip"), vue.mergeProps({
          "ref": tooltipRef,
          "disabled": !showTooltip.value,
          "content": String(props.value)
        }, tooltipProps.value), {
          "default": function _default() {
            return [vue.createVNode("div", {
              "class": [COMPONENT_NAME.value, _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--dragging"), slideButtonProps.dragging)]
            }, null)];
          }
        })]);
      };
    }
  });

  var getStopStyle = function getStopStyle(position, isVertical) {
    return isVertical ? {
      top: "calc(".concat(100 - position, "% - 1px)")
    } : {
      left: "".concat(position, "%")
    };
  };
  var formatSlderValue = function formatSlderValue(val, type) {
    if (type === "first") {
      if (val instanceof Array) {
        return val[0];
      }

      return val;
    }

    if (val instanceof Array) {
      return val[1];
    }

    return 0;
  };

  var useSliderMark = function useSliderMark(config) {
    var name = config.value.prefixName;
    var markList = vue.computed(function () {
      var markProps = config.value;

      if (!markProps.marks) {
        return [];
      }

      var legalMarks = [];

      if (Array.isArray(markProps.marks)) {
        var marksList = cloneDeep_1(markProps.marks).sort(function (a, b) {
          return a - b;
        });
        var maxLimit = Math.max.apply(Math, _toConsumableArray(marksList).concat([markProps.max]));
        var minLimit = Math.min.apply(Math, _toConsumableArray(marksList).concat([markProps.min]));

        if (minLimit < markProps.min) {
          log.errorOnce("TSlider", "marks min value should >= props min");
        }

        if (maxLimit > markProps.max) {
          log.errorOnce("TSlider", "marks max value should <= props max");
        }

        marksList.forEach(function (item) {
          legalMarks.push({
            point: item,
            position: (item - minLimit) / (maxLimit - minLimit) * 100,
            mark: item
          });
        });
      } else {
        Object.keys(markProps.marks).map(parseFloat).sort(function (a, b) {
          return a - b;
        }).filter(function (point) {
          return point <= markProps.max && point >= markProps.min;
        }).forEach(function (point) {
          var item = {
            point: point,
            position: (point - markProps.min) * 100 / (markProps.max - markProps.min),
            mark: markProps.marks[point]
          };
          legalMarks.push(item);
        });
      }

      return legalMarks;
    });

    var renderMask = function renderMask(onChangeFn) {
      if (markList.value.length) {
        return vue.createVNode("div", null, [vue.createVNode("div", null, [markList.value.map(function (item, index) {
          return vue.createVNode("div", {
            "class": "".concat(name, "__stop ").concat(name, "__mark-stop"),
            "style": getStopStyle(item.position, config.value.vertical),
            "key": index
          }, null);
        })]), vue.createVNode("div", {
          "class": "".concat(name, "__mark")
        }, [markList.value.map(function (item, key) {
          return vue.createVNode(vue.resolveComponent("t-slider-mark"), {
            "mark": item.mark,
            "point": item.point,
            "key": key,
            "style": getStopStyle(item.position, config.value.vertical),
            "onClickMarkPoint": onChangeFn
          }, null);
        })])]);
      }
    };

    return renderMask;
  };

  var useSliderInput = function useSliderInput(config) {
    var name = config.value.prefixName;
    var sliderInputState = vue.computed(function () {
      var initialState = {
        inputDecimalPlaces: 0,
        inputFormat: null,
        inputPlaceholder: "",
        inputTheme: "column"
      };
      var inputProps = config.value;

      if (typeof inputProps.inputNumberProps !== "boolean") {
        var inputNumbeConfig = inputProps.inputNumberProps;
        var inputDecimalPlaces = inputNumbeConfig.decimalPlaces;
        var inputFormat = inputNumbeConfig.format;
        var inputPlaceholder = inputNumbeConfig.placeholder;
        var inputTheme = inputNumbeConfig.theme;

        if (typeof inputDecimalPlaces === "number" && !Number.isNaN(inputDecimalPlaces)) {
          initialState.inputDecimalPlaces = inputDecimalPlaces;
        }

        if (inputPlaceholder) {
          initialState.inputPlaceholder = inputPlaceholder;
        }

        if (typeof inputFormat === "function") {
          initialState.inputFormat = inputFormat;
        }

        if (["column", "row", "normal"].includes(inputTheme)) {
          initialState.inputTheme = inputTheme;
        }
      }

      return initialState;
    });
    var sliderNumberClass = vue.computed(function () {
      return ["".concat(name, "__input"), {
        "is-vertical": config.value.vertical
      }];
    });

    var renderInputNumber = function renderInputNumber(val, changeFn) {
      return vue.createVNode(InputNumber, {
        "class": sliderNumberClass.value,
        "value": val,
        "step": config.value.step,
        "onChange": changeFn,
        "disabled": config.value.disabled,
        "min": config.value.min,
        "max": config.value.max,
        "decimalPlaces": sliderInputState.value.inputDecimalPlaces,
        "format": sliderInputState.value.inputFormat,
        "placeholder": sliderInputState.value.inputPlaceholder,
        "theme": sliderInputState.value.inputTheme
      }, null);
    };

    return renderInputNumber;
  };

  function ownKeys$12(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$11(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$12(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$12(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Slider = vue.defineComponent({
    name: "TSlider",
    components: {
      TSliderMark: TSliderMark,
      TInputNumber: InputNumber,
      TSliderButton: _SliderButton
    },
    model: {
      prop: "value",
      event: "change"
    },
    props: _objectSpread$11({}, props$r),
    setup: function setup(props2, ctx) {
      var disabled = useFormDisabled();
      var COMPONENT_NAME = usePrefixClass("slider");

      var _useCommonClassName = useCommonClassName$2(),
          STATUS = _useCommonClassName.STATUS;

      var _toRefs = vue.toRefs(props2),
          value = _toRefs.value,
          modelValue = _toRefs.modelValue;

      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          sliderValue = _useVModel2[0],
          setSliderValue = _useVModel2[1];

      var sliderContainerRef = vue.ref();
      var sliderRef = vue.ref();
      var firstButtonRef = vue.ref();
      var secondButtonRef = vue.ref();
      var sliderState = vue.reactive({
        prevValue: 0,
        showSteps: false
      });
      var firstValue = vue.ref(formatSlderValue(sliderValue.value, "first"));
      var secondValue = vue.ref(formatSlderValue(sliderValue.value, "second"));
      var dragging = vue.ref(false);
      var sliderSize = vue.ref(1);
      var vertical = vue.computed(function () {
        return props2.layout === "vertical";
      });
      var containerClass = vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__container"), {
          "is-vertical": vertical.value
        }];
      });
      var sliderClass = vue.computed(function () {
        var _ref;

        return ["".concat(COMPONENT_NAME.value), (_ref = {
          "is-vertical": vertical.value
        }, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--with-input"), props2.inputNumberProps), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--vertical"), vertical.value), _defineProperty$3(_ref, STATUS.value.disabled, disabled.value), _ref)];
      });
      var sliderRailClass = vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__rail"), {
          "show-input": props2.inputNumberProps,
          disabled: disabled.value
        }];
      });
      var runwayStyle = vue.computed(function () {
        return vertical.value ? {
          height: "100%"
        } : {};
      });
      var barStyle = vue.computed(function () {
        var barStart = props2.range ? "".concat(100 * (minValue.value - props2.min) / rangeDiff.value, "%") : "0%";
        var cuttentDiff = props2.range ? maxValue.value - minValue.value : firstValue.value - props2.min;
        var barSize = "".concat(100 * cuttentDiff / rangeDiff.value, "%");
        return vertical.value ? {
          height: barSize,
          bottom: barStart
        } : {
          width: barSize,
          left: barStart
        };
      });
      var rangeDiff = vue.computed(function () {
        return props2.max - props2.min;
      });
      var minValue = vue.computed(function () {
        return Math.min(firstValue.value, secondValue.value);
      });
      var maxValue = vue.computed(function () {
        return Math.max(firstValue.value, secondValue.value);
      });
      var steps = vue.computed(function () {
        if (!sliderState.showSteps || props2.min > props2.max) return [];

        if (props2.step === 0) {
          console.warn("[Element Warn][Slider]step should not be 0.");
          return [];
        }

        var stepCount = rangeDiff.value / props2.step;
        var stepWidth = 100 * props2.step / rangeDiff.value;
        var result = [];

        for (var i = 1; i < stepCount; i++) {
          result.push(i * stepWidth);
        }

        if (props2.range) {
          return result.filter(function (step2) {
            return step2 < 100 * (minValue.value - props2.min) / rangeDiff.value || props2.step > 100 * (maxValue.value - props2.min) / rangeDiff.value;
          });
        }

        return result.filter(function (step2) {
          return step2 > 100 * (firstValue.value - props2.min) / rangeDiff.value;
        });
      });
      var precision = vue.computed(function () {
        var precisions = [props2.min, props2.max, props2.step].map(function (item) {
          var decimalArr = "".concat(item).split(".");
          return decimalArr[1] ? decimalArr[1].length : 0;
        });
        return Math.max.apply(null, precisions);
      });

      var setValues = function setValues(value2) {
        var _ref2 = [props2.min, props2.max],
            min2 = _ref2[0],
            max2 = _ref2[1];

        if (min2 > max2) {
          console.warn("[Slider] max should be greater than min.");
          return;
        }

        if (props2.range && Array.isArray(value2)) {
          var _ref3 = [Math.min.apply(Math, _toConsumableArray(value2)), Math.max.apply(Math, _toConsumableArray(value2))],
              maxLimit = _ref3[0],
              minLimit = _ref3[1];

          if (maxLimit > max2) {
            maxLimit = firstValue.value;
          }

          if (maxLimit < min2) {
            maxLimit = min2;
          }

          if (minLimit < min2) {
            minLimit = secondValue.value;
          }

          if (minLimit > max2) {
            minLimit = max2;
          }

          var _ref4 = [maxLimit, minLimit];
          firstValue.value = _ref4[0];
          secondValue.value = _ref4[1];
          return [maxLimit, minLimit];
        }

        var preValue = value2;

        if (preValue < min2) {
          preValue = min2;
        }

        if (preValue > max2) {
          preValue = max2;
        }

        return preValue;
      };

      var emitChange = function emitChange(value2) {
        var changeValue2 = value2;

        if (changeValue2 === void 0) {
          if (props2.range) {
            changeValue2 = [firstValue.value, secondValue.value];
          } else {
            changeValue2 = sliderState.prevValue;
          }
        }

        var fixValue = setValues(changeValue2);
        setSliderValue(fixValue);
      };

      var resetSize = function resetSize() {
        if (sliderRef.value) {
          sliderSize.value = sliderRef.value["client".concat(vertical.value ? "Height" : "Width")];
        }
      };

      var init = function init() {
        var valuetext;

        if (props2.range) {
          if (Array.isArray(sliderValue.value)) {
            firstValue.value = Math.max(props2.min || 0, sliderValue.value[0]);
            secondValue.value = Math.min(props2.max || 100, sliderValue.value[1]);
          } else {
            firstValue.value = props2.min || 0;
            secondValue.value = props2.max || 100;
          }

          sliderState.prevValue = [firstValue.value, secondValue.value];
          valuetext = "".concat(firstValue.value, "-").concat(secondValue.value);
        } else {
          if (typeof sliderValue.value !== "number") {
            firstValue.value = props2.min;
          } else {
            firstValue.value = Math.min(props2.max, Math.max(props2.min, sliderValue.value));
          }

          sliderState.prevValue = firstValue.value;
          valuetext = String(firstValue.value);
        }

        if (sliderContainerRef.value) {
          sliderContainerRef.value.setAttribute("aria-valuetext", valuetext);
        }

        resetSize();
        window.addEventListener("resize", resetSize);
      };

      var setPosition = function setPosition(percent) {
        var targetValue = percent * rangeDiff.value / 100;
        targetValue = props2.min + targetValue;

        if (!props2.range && firstButtonRef.value) {
          firstButtonRef.value.setPosition(percent);
          return;
        }

        var button;

        if (Math.abs(minValue.value - targetValue) < Math.abs(maxValue.value - targetValue)) {
          button = firstValue.value < secondValue.value ? "button1" : "button2";
        } else {
          button = firstValue.value > secondValue.value ? "button1" : "button2";
        }

        if (button === "button1" && firstButtonRef.value) {
          firstButtonRef.value.setPosition(percent);
        }

        if (button === "button2" && secondButtonRef.value) {
          secondButtonRef.value.setPosition(percent);
        }
      };

      var onSliderClick = function onSliderClick(event) {
        if (disabled.value || dragging.value) {
          return;
        }

        if (!sliderRef.value) return;
        resetSize();
        var value2 = 0;

        if (vertical.value) {
          var sliderOffsetBottom = sliderRef.value.getBoundingClientRect().bottom;
          value2 = (sliderOffsetBottom - event.clientY) / sliderSize.value * 100;
          setPosition(value2);
        } else {
          var sliderOffsetLeft = sliderRef.value.getBoundingClientRect().left;
          value2 = (event.clientX - sliderOffsetLeft) / sliderSize.value * 100;
          setPosition(value2);
        }
      };

      var changeValue = function changeValue(point) {
        if (disabled.value || dragging.value) {
          return;
        }

        resetSize();
        var value2 = Number(point / rangeDiff.value * 100);
        setPosition(value2);
        emitChange(point);
      };

      vue.watch(function () {
        return sliderValue.value;
      }, function (newVal) {
        if (dragging.value === true) return;

        if (Array.isArray(newVal) && props2.range) {
          var _newVal = _slicedToArray(newVal, 2);

          firstValue.value = _newVal[0];
          secondValue.value = _newVal[1];
        } else {
          firstValue.value = newVal;
        }
      });
      vue.watch([firstValue, secondValue, dragging], function (newStates, prevStates) {
        if (newStates[0] !== prevStates[0]) {
          if (props2.range) {
            emitChange([minValue.value, maxValue.value]);
          } else {
            emitChange(firstValue.value);
          }
        }

        if (newStates[1] !== prevStates[1]) {
          if (props2.range) {
            emitChange([minValue.value, maxValue.value]);
          }
        }

        if (newStates[2] !== prevStates[2] && newStates[2] === false) {
          init();
        }
      });
      vue.onMounted(function () {
        init();
      });
      vue.onBeforeUnmount(function () {
        window.removeEventListener("resize", resetSize);
      });
      var markConfig = vue.computed(function () {
        return {
          max: props2.max,
          min: props2.min,
          marks: props2.marks,
          vertical: vertical.value,
          prefixName: COMPONENT_NAME.value
        };
      });
      var renderMask = useSliderMark(markConfig);
      var inputConfig = vue.computed(function () {
        return {
          max: props2.max,
          min: props2.min,
          inputNumberProps: props2.inputNumberProps,
          step: props2.step,
          prefixName: COMPONENT_NAME.value,
          vertical: vertical.value,
          disabled: disabled.value
        };
      });
      var renderInputNumber = useSliderInput(inputConfig);

      var renderInputButton = function renderInputButton() {
        var firstInputVal = props2.range ? firstValue.value : sliderState.prevValue;

        var firstInputOnChange = function firstInputOnChange(v) {
          firstValue.value = v;
          props2.range ? firstValue.value = v : sliderState.prevValue = v;
        };

        var secondInputVal = secondValue.value;

        var secondInputOnChange = function secondInputOnChange(v) {
          secondValue.value = v;
        };

        return vue.createVNode("div", {
          "class": ["".concat(COMPONENT_NAME.value, "__input-container"), {
            "is-vertical": vertical.value
          }]
        }, [renderInputNumber(firstInputVal, firstInputOnChange), props2.range && vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__center-line")
        }, null), props2.range && renderInputNumber(secondInputVal, secondInputOnChange)]);
      };

      var toggleDragging = function toggleDragging(toState) {
        dragging.value = toState;
      };

      var _toRefs2 = vue.toRefs(props2),
          min = _toRefs2.min,
          max = _toRefs2.max,
          step = _toRefs2.step;

      vue.provide(sliderPropsInjectKey, vue.reactive({
        min: min,
        max: max,
        step: step,
        dragging: dragging,
        toggleDragging: toggleDragging,
        precision: precision,
        disabled: disabled,
        resetSize: resetSize,
        sliderSize: sliderSize
      }));
      return function () {
        return vue.createVNode("div", {
          "class": containerClass.value,
          "ref": sliderContainerRef
        }, [vue.createVNode("div", {
          "class": sliderClass.value,
          "role": "slider",
          "aria-valuemin": props2.min,
          "aria-valuemax": props2.max,
          "aria-orientation": props2.layout,
          "aria-disabled": disabled.value,
          "tooltip-props": props2.tooltipProps
        }, [vue.createVNode("div", {
          "class": sliderRailClass.value,
          "style": runwayStyle.value,
          "onClick": onSliderClick,
          "ref": sliderRef
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__track"),
          "style": barStyle.value
        }, null), vue.createVNode(vue.resolveComponent("t-slider-button"), {
          "vertical": vertical.value,
          "value": firstValue.value,
          "ref": firstButtonRef,
          "disabled": disabled.value,
          "tooltip-props": props2.tooltipProps,
          "onInput": function onInput(v) {
            firstValue.value = v;
          }
        }, null), props2.range && vue.createVNode(vue.resolveComponent("t-slider-button"), {
          "vertical": vertical.value,
          "value": secondValue.value,
          "ref": secondButtonRef,
          "disabled": disabled.value,
          "tooltip-props": props2.tooltipProps,
          "onInput": function onInput(v) {
            secondValue.value = v;
          }
        }, null), sliderState.showSteps && vue.createVNode("div", null, [steps.value.map(function (item, key) {
          return vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "__stop"),
            "key": key,
            "style": getStopStyle(item, vertical.value)
          }, null);
        })]), renderMask(changeValue)])]), props2.inputNumberProps && renderInputButton()]);
      };
    }
  });

  var Slider = withInstall(_Slider);
  var SliderButton = withInstall(_SliderButton);

  var props$q = {
    customValue: {
      type: Array
    },
    disabled: Boolean,
    label: {
      type: [Array, Function],
      "default": function _default() {
        return [];
      }
    },
    loading: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    modelValue: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    value: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number, Boolean],
      "default": false
    },
    onChange: Function
  };

  function ownKeys$11(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$10(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$11(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$11(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Switch = vue.defineComponent({
    name: "TSwitch",
    props: _objectSpread$10({}, props$q),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var disabled = useFormDisabled();
      var COMPONENT_NAME = usePrefixClass("switch");

      var _useCommonClassName = useCommonClassName$2(),
          STATUS = _useCommonClassName.STATUS,
          SIZE = _useCommonClassName.SIZE;

      var _toRefs = vue.toRefs(props2),
          value = _toRefs.value,
          modelValue = _toRefs.modelValue;

      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          innerValue = _useVModel2[0],
          setSwitchVal = _useVModel2[1];

      var activeValue = vue.computed(function () {
        if (props2.customValue && props2.customValue.length > 0) {
          return props2.customValue[0];
        }

        return true;
      });
      var inactiveValue = vue.computed(function () {
        if (props2.customValue && props2.customValue.length > 1) {
          return props2.customValue[1];
        }

        return false;
      });

      function handleToggle() {
        var checked = innerValue.value === activeValue.value ? inactiveValue.value : activeValue.value;
        setSwitchVal(checked);
      }

      function toggle() {
        if (disabled.value || props2.loading) {
          return;
        }

        handleToggle();
      }

      var classes = vue.computed(function () {
        var _ref2;

        return ["".concat(COMPONENT_NAME.value), SIZE.value[props2.size], (_ref2 = {}, _defineProperty$3(_ref2, STATUS.value.disabled, disabled.value), _defineProperty$3(_ref2, STATUS.value.loading, props2.loading), _defineProperty$3(_ref2, STATUS.value.checked, innerValue.value === activeValue.value || props2.modelValue === activeValue.value), _ref2)];
      });
      var nodeClasses = vue.computed(function () {
        var _ref3;

        return ["".concat(COMPONENT_NAME.value, "__handle"), (_ref3 = {}, _defineProperty$3(_ref3, STATUS.value.disabled, disabled.value), _defineProperty$3(_ref3, STATUS.value.loading, props2.loading), _ref3)];
      });
      var contentClasses = vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__content"), SIZE.value[props2.size], _defineProperty$3({}, STATUS.value.disabled, disabled.value)];
      });
      vue.watch(innerValue, function (val) {
        if (props2.customValue && props2.customValue.length && !props2.customValue.includes(val)) {
          throw new Error("value is not in ".concat(JSON.stringify(props2.customValue)));
        }
      }, {
        immediate: true
      });
      var content = vue.computed(function () {
        if (typeof props2.label === "function") {
          return props2.label(vue.h, {
            value: innerValue.value
          });
        }

        if (typeof props2.label === "string") {
          return props2.label;
        }

        if (Array.isArray(props2.label)) {
          var label = innerValue.value === activeValue.value ? props2.label[0] : props2.label[1];
          if (!label) return;

          if (typeof label === "string") {
            return label;
          }

          if (typeof label === "function") {
            return label(vue.h);
          }
        }

        if (slots.label) {
          return slots.label({
            value: innerValue.value
          });
        }

        return null;
      });
      return function () {
        var switchContent;
        var loadingContent;

        if (props2.loading) {
          loadingContent = vue.createVNode(Loading, {
            "size": "small"
          }, null);
        } else if (content.value) {
          switchContent = content.value;
        }

        return vue.createVNode("div", {
          "class": classes.value,
          "disabled": disabled.value,
          "onClick": toggle
        }, [vue.createVNode("span", {
          "class": nodeClasses.value
        }, [loadingContent]), vue.createVNode("div", {
          "class": contentClasses.value
        }, [switchContent])]);
      };
    }
  });

  var Switch = withInstall(_Switch);

  var props$p = {
    autofocus: Boolean,
    autosize: {
      type: [Boolean, Object],
      "default": false
    },
    disabled: Boolean,
    maxcharacter: {
      type: Number
    },
    maxlength: {
      type: Number
    },
    name: {
      type: String,
      "default": ""
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    readonly: Boolean,
    status: {
      type: String,
      validator: function validator(val) {
        return ["success", "warning", "error"].includes(val);
      }
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: [String, Number]
    },
    modelValue: {
      type: [String, Number]
    },
    defaultValue: {
      type: [String, Number]
    },
    onBlur: Function,
    onChange: Function,
    onFocus: Function,
    onKeydown: Function,
    onKeypress: Function,
    onKeyup: Function
  };

  var hiddenTextarea;
  var HIDDEN_TEXTAREA_STYLE = "\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n";
  var SIZING_PROPS = ["letter-spacing", "line-height", "padding-top", "padding-bottom", "font-family", "font-weight", "font-size", "font-variant", "text-rendering", "text-transform", "width", "text-indent", "padding-left", "padding-right", "border-width", "box-sizing"];

  function calculateNodeStyling(targetElement) {
    var style = window.getComputedStyle(targetElement);
    var boxSizing = style.getPropertyValue("box-sizing") || style.getPropertyValue("-moz-box-sizing") || style.getPropertyValue("-webkit-box-sizing");
    var paddingSize = parseFloat(style.getPropertyValue("padding-bottom")) + parseFloat(style.getPropertyValue("padding-top"));
    var borderSize = parseFloat(style.getPropertyValue("border-bottom-width")) + parseFloat(style.getPropertyValue("border-top-width"));
    var sizingStyle = SIZING_PROPS.map(function (name) {
      return "".concat(name, ":").concat(style.getPropertyValue(name));
    }).join(";");
    return {
      sizingStyle: sizingStyle,
      paddingSize: paddingSize,
      borderSize: borderSize,
      boxSizing: boxSizing
    };
  }

  function calcTextareaHeight(targetElement) {
    var minRows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var maxRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    if (!hiddenTextarea) {
      hiddenTextarea = document.createElement("textarea");
      document.body.appendChild(hiddenTextarea);
    }

    var _calculateNodeStyling = calculateNodeStyling(targetElement),
        paddingSize = _calculateNodeStyling.paddingSize,
        borderSize = _calculateNodeStyling.borderSize,
        boxSizing = _calculateNodeStyling.boxSizing,
        sizingStyle = _calculateNodeStyling.sizingStyle;

    hiddenTextarea.setAttribute("style", "".concat(sizingStyle, ";").concat(HIDDEN_TEXTAREA_STYLE));
    hiddenTextarea.value = targetElement.value || targetElement.placeholder || "";
    var height = hiddenTextarea.scrollHeight;
    var result = {};

    if (boxSizing === "border-box") {
      height += borderSize;
    } else if (boxSizing === "content-box") {
      height -= paddingSize;
    }

    hiddenTextarea.value = "";
    var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;

    if (minRows !== null) {
      var minHeight = singleRowHeight * minRows;

      if (boxSizing === "border-box") {
        minHeight = minHeight + paddingSize + borderSize;
      }

      height = Math.max(minHeight, height);
      result.minHeight = "".concat(minHeight, "px");
    }

    if (maxRows !== null) {
      var maxHeight = singleRowHeight * maxRows;

      if (boxSizing === "border-box") {
        maxHeight = maxHeight + paddingSize + borderSize;
      }

      height = Math.min(maxHeight, height);
    }

    result.height = "".concat(height, "px");
    hiddenTextarea.parentNode && hiddenTextarea.parentNode.removeChild(hiddenTextarea);
    hiddenTextarea = null;
    return result;
  }

  function ownKeys$10(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$$(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$10(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$10(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function getValidAttrs(obj) {
    var newObj = {};
    Object.keys(obj).forEach(function (key) {
      if (typeof obj[key] !== "undefined") {
        newObj[key] = obj[key];
      }
    });
    return newObj;
  }

  var _Textarea = vue.defineComponent({
    name: "TTextarea",
    props: _objectSpread$$({}, props$p),
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs;
      var prefix = usePrefixClass();
      var name = usePrefixClass("textarea");
      var TEXTAREA_TIPS_CLASS = vue.computed(function () {
        return "".concat(name.value, "__tips");
      });
      var TEXTAREA_LIMIT = vue.computed(function () {
        return "".concat(name.value, "__limit");
      });

      var _toRefs = vue.toRefs(props2),
          value = _toRefs.value,
          modelValue = _toRefs.modelValue;

      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          innerValue = _useVModel2[0],
          setInnerValue = _useVModel2[1];

      var disabled = useFormDisabled();
      var textareaStyle = vue.ref({});
      var refTextareaElem = vue.ref();
      var focused = vue.ref(false);

      var adjustTextareaHeight = function adjustTextareaHeight() {
        if (props2.autosize === true) {
          vue.nextTick(function () {
            textareaStyle.value = calcTextareaHeight(refTextareaElem.value);
          });
        } else if (_typeof$2(props2.autosize) === "object") {
          var _props2$autosize = props2.autosize,
              minRows = _props2$autosize.minRows,
              maxRows = _props2$autosize.maxRows;
          textareaStyle.value = calcTextareaHeight(refTextareaElem.value, minRows, maxRows);
        } else if (attrs.rows) {
          textareaStyle.value = {
            height: "auto",
            minHeight: "auto"
          };
        }
      };

      var setInputValue = function setInputValue() {
        var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var textareaElem = refTextareaElem.value;
        var sV = String(v);

        if (!textareaElem) {
          return;
        }

        if (textareaElem.value !== sV) {
          textareaElem.value = sV;
          innerValue.value = sV;
        }
      };

      var inputValueChangeHandle = function inputValueChangeHandle(e) {
        var target = e.target;
        var val = target.value;

        if (props2.maxcharacter && props2.maxcharacter >= 0) {
          var stringInfo = getCharacterLength(val, props2.maxcharacter);
          val = _typeof$2(stringInfo) === "object" && stringInfo.characters;
        }

        setInnerValue(val, {
          e: e
        });
        vue.nextTick(function () {
          return setInputValue(val);
        });
        adjustTextareaHeight();
      };

      var handleInput = function handleInput(e) {
        if (e.isComposing || e.inputType === "insertCompositionText") return;
        inputValueChangeHandle(e);
      };

      var onCompositionend = function onCompositionend(e) {
        inputValueChangeHandle(e);
      };

      var eventDeal = function eventDeal(name2, e) {
        var _props2$_name;

        if (disabled.value) return;

        var _name = "on".concat(name2[0].toUpperCase()).concat(name2.slice(1));

        (_props2$_name = props2[_name]) === null || _props2$_name === void 0 ? void 0 : _props2$_name.call(props2, innerValue.value, {
          e: e
        });
      };

      var emitKeyDown = function emitKeyDown(e) {
        eventDeal("keydown", e);
      };

      var emitKeyUp = function emitKeyUp(e) {
        eventDeal("keyup", e);
      };

      var emitKeypress = function emitKeypress(e) {
        eventDeal("keypress", e);
      };

      var emitFocus = function emitFocus(e) {
        var _props2$onFocus;

        if (disabled.value) return;
        focused.value = true;
        (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 ? void 0 : _props2$onFocus.call(props2, innerValue.value, {
          e: e
        });
      };

      var formItem = vue.inject(FormItemInjectionKey, void 0);

      var emitBlur = function emitBlur(e) {
        var _props2$onBlur;

        focused.value = false;
        (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 ? void 0 : _props2$onBlur.call(props2, innerValue.value, {
          e: e
        });
        formItem === null || formItem === void 0 ? void 0 : formItem.handleBlur();
      };

      var textareaClasses = vue.computed(function () {
        var _ref2;

        return [name.value, (_ref2 = {}, _defineProperty$3(_ref2, "".concat(prefix.value, "-is-disabled"), disabled.value), _defineProperty$3(_ref2, "".concat(prefix.value, "-is-readonly"), props2.readonly), _ref2)];
      });
      var inputAttrs = vue.computed(function () {
        return getValidAttrs({
          autofocus: props2.autofocus,
          disabled: disabled.value,
          readonly: props2.readonly,
          placeholder: props2.placeholder,
          maxlength: props2.maxlength || void 0,
          name: props2.name || void 0
        });
      });
      var characterNumber = vue.computed(function () {
        var characterInfo = getCharacterLength(String(innerValue.value || ""));

        if (_typeof$2(characterInfo) === "object") {
          return characterInfo.length;
        }

        return characterInfo;
      });
      vue.watch(function () {
        return innerValue.value;
      }, function () {
        return adjustTextareaHeight();
      });
      vue.watch(refTextareaElem, function (el) {
        if (!el) return;
        adjustTextareaHeight();
      });
      vue.watch(function () {
        return props2.autofocus;
      }, function (val) {
        if (val) {
          refTextareaElem.value.focus();
        }
      });
      vue.onMounted(function () {
        adjustTextareaHeight();
      });
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        var _String;

        var inputEvents = getValidAttrs({
          onFocus: emitFocus,
          onBlur: emitBlur,
          onKeydown: emitKeyDown,
          onKeyup: emitKeyUp,
          onKeypress: emitKeypress
        });

        var _useCommonClassName = useCommonClassName$2(),
            STATUS = _useCommonClassName.STATUS;

        var classes = vue.computed(function () {
          var _ref3;

          return ["".concat(name.value, "__inner"), (_ref3 = {}, _defineProperty$3(_ref3, "".concat(prefix.value, "-is-").concat(props2.status), props2.status), _defineProperty$3(_ref3, STATUS.value.disabled, disabled.value), _defineProperty$3(_ref3, STATUS.value.focused, focused.value), _defineProperty$3(_ref3, "".concat(prefix.value, "-resize-none"), props2.maxlength), _ref3), "narrow-scrollbar"];
        });
        var tips = renderTNodeJSX("tips");
        return vue.createVNode("div", {
          "class": textareaClasses.value
        }, [vue.createVNode("textarea", vue.mergeProps({
          "onInput": handleInput,
          "onCompositionend": onCompositionend,
          "ref": refTextareaElem,
          "value": innerValue.value,
          "style": textareaStyle.value,
          "class": classes.value
        }, inputEvents, inputAttrs.value), null), props2.maxcharacter && vue.createVNode("span", {
          "class": TEXTAREA_LIMIT.value
        }, ["".concat(characterNumber.value, "/").concat(props2.maxcharacter)]), !props2.maxcharacter && props2.maxlength ? vue.createVNode("span", {
          "class": TEXTAREA_LIMIT.value
        }, ["".concat(innerValue.value ? (_String = String(innerValue.value)) === null || _String === void 0 ? void 0 : _String.length : 0, "/").concat(props2.maxlength)]) : null, tips && vue.createVNode("div", {
          "class": "".concat(TEXTAREA_TIPS_CLASS.value, " ").concat(name.value, "__tips--").concat(props2.status || "normal")
        }, [tips])]);
      };
    }
  });

  var Textarea = withInstall(_Textarea);

  function ownKeys$$(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$_(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$$(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$$(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TRANSFER_NAME = "TTransfer";

  function getTransferListOption(prop) {
    if (Array.isArray(prop)) {
      return {
        source: prop[0],
        target: prop[1]
      };
    }

    return {
      source: prop,
      target: prop
    };
  }

  function getDataValues(data, filterValues) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref$isTreeMode = _ref.isTreeMode,
        isTreeMode = _ref$isTreeMode === void 0 ? false : _ref$isTreeMode,
        _ref$include = _ref.include,
        include = _ref$include === void 0 ? true : _ref$include;

    if (isTreeMode) {
      var result = [];

      if (data) {
        for (var i = 0; i < data.length; i++) {
          var item = data[i];
          var isInclude = filterValues.includes(item.value);

          if (!include && isInclude) {
            continue;
          }

          if (item.children && item.children.length > 0) {
            var childResult = getDataValues(item.children, filterValues, {
              isTreeMode: isTreeMode,
              include: include
            });
            result = result.concat(childResult);
          } else if (include && isInclude || !include && !isInclude) {
            result.push(item.value);
          }
        }
      }

      return result;
    }

    return data.filter(function (item) {
      var isInclude = filterValues.includes(item.value);
      return (include && isInclude || !include && !isInclude) && !item.disabled;
    }).map(function (item) {
      return item.value;
    });
  }

  function getTransferData(data, keys) {
    var isTreeMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var list = data.map(function (transferDataItem, index) {
      var _transferDataItem$dis;

      var labelKey = (keys === null || keys === void 0 ? void 0 : keys.label) || "label";
      var valueKey = (keys === null || keys === void 0 ? void 0 : keys.value) || "value";

      if (transferDataItem[labelKey] === void 0) {
        throw new Error("".concat(labelKey, " is not in DataOption ").concat(JSON.stringify(transferDataItem)));
      }

      if (transferDataItem[valueKey] === void 0) {
        throw new Error("".concat(valueKey, " is not in DataOption ").concat(JSON.stringify(transferDataItem)));
      }

      var result = {
        label: transferDataItem[labelKey],
        value: transferDataItem[valueKey],
        key: "key__value_".concat(transferDataItem[valueKey], "_index_").concat(index),
        disabled: (_transferDataItem$dis = transferDataItem.disabled) !== null && _transferDataItem$dis !== void 0 ? _transferDataItem$dis : false,
        data: transferDataItem
      };

      if (isTreeMode && transferDataItem.children) {
        result.children = getTransferData(transferDataItem.children, keys, true);
      }

      return result;
    });
    return list;
  }

  function isAllNodeValid(data, filterValues, needMatch) {
    if (filterValues.includes(data.value)) {
      return needMatch;
    }

    return false;
  }

  function isTreeNodeValid(data, filterValues, needMatch) {
    if (!data) return !needMatch;

    if (filterValues.includes(data.value)) {
      return needMatch;
    }

    if (data.children) {
      return data.children.some(function (item) {
        return isTreeNodeValid(item, filterValues, needMatch);
      });
    }

    return !needMatch;
  }

  function cloneTreeWithFilter(sourceTree, targetTree, filterValues, needMatch) {
    sourceTree.forEach(function (item) {
      var newNode;

      if (isAllNodeValid(item, filterValues, needMatch)) {
        newNode = cloneDeep_1(item);
        targetTree.push(newNode);
      } else if (isTreeNodeValid(item, filterValues, needMatch)) {
        newNode = _objectSpread$_({}, item);
        delete newNode.children;
        targetTree.push(newNode);

        if (item.children) {
          newNode.children = [];
          cloneTreeWithFilter(item.children, newNode.children, filterValues, needMatch);

          if (newNode.children.length === 0) {
            delete newNode.children;
          }
        }
      }
    });
  }

  function filterTransferData(data, filterValues) {
    var needMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var isTreeMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    if (!isTreeMode) {
      if (needMatch) {
        return filterValues.map(function (value) {
          return data.find(function (item) {
            return item.value === value;
          });
        });
      }

      return data.filter(function (item) {
        var isMatch = filterValues.includes(item.value);
        return !isMatch;
      });
    }

    var result = [];
    cloneTreeWithFilter(data, result, filterValues, needMatch);
    return result;
  }

  function getLefCount(nodes) {
    var total = 0;
    nodes.forEach(function (child) {
      if (child.children && child.children.length > 0) {
        total += getLefCount(child.children);
      } else {
        total += 1;
      }
    });
    return total;
  }

  var Search = vue.defineComponent({
    name: "TTransferSearch",
    props: {
      value: {
        type: String,
        "default": ""
      },
      search: {
        type: [Boolean, Object],
        "default": false
      },
      placeholder: {
        type: String,
        "default": ""
      },
      onChange: Function
    },
    setup: function setup(props) {
      var classPrefix = usePrefixClass();

      var handleChange = function handleChange(value, changeCtx) {
        var _props$onChange;

        (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, {
          value: value,
          e: changeCtx.e
        });
      };

      var inputProps = _typeof$2(props.search) === "object" ? props.search : {
        clearable: true
      };
      return function () {
        return vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-transfer__search-wrapper")
        }, [vue.createVNode(Input, vue.mergeProps(inputProps, {
          "defaultValue": props.value,
          "onChange": handleChange,
          "placeholder": props.placeholder
        }), {
          "default": function _default() {
            return [vue.createVNode(search, {
              "slot": "suffix-icon"
            }, null)];
          }
        })]);
      };
    }
  });

  function ownKeys$_(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$Z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$_(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$_(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot$g(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var props$o = {
    checkboxProps: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    dataSource: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    listType: {
      type: String,
      "default": "target"
    },
    title: {
      type: [String, Function]
    },
    checkedValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    disabled: {
      type: Boolean,
      "default": false
    },
    search: {
      type: [Boolean, Object],
      "default": false
    },
    transferItem: Function,
    empty: {
      type: [Function, String]
    },
    pagination: [Boolean, Object],
    footer: [Function, String],
    checkAll: Boolean,
    isTreeMode: {
      type: Boolean,
      "default": false
    },
    onCheckedChange: Function
  };
  var TransferList = vue.defineComponent({
    name: "TTransferList",
    props: _objectSpread$Z({}, props$o),
    setup: function setup(props2) {
      var classPrefix = usePrefixClass();

      var _useConfig = useConfig("transfer"),
          t = _useConfig.t,
          global = _useConfig.global;

      var filterValue = vue.ref("");
      var defaultCurrent = vue.ref(1);
      var defaultPageSize = vue.ref(0);
      var currentPage = vue.computed(function () {
        var pagination = props2.pagination;
        return (pagination === null || pagination === void 0 ? void 0 : pagination.current) || defaultCurrent.value || (pagination === null || pagination === void 0 ? void 0 : pagination.defaultCurrent);
      });
      var pageSize = vue.computed(function () {
        var pagination = props2.pagination;
        return (pagination === null || pagination === void 0 ? void 0 : pagination.pageSize) || defaultPageSize.value || (pagination === null || pagination === void 0 ? void 0 : pagination.defaultPageSize);
      });
      var filteredData = vue.computed(function () {
        return props2.dataSource.filter(function (item) {
          var label = item && item.label.toString();
          return label.toLowerCase().indexOf(filterValue.value.toLowerCase()) > -1;
        });
      });
      var pageTotal = vue.computed(function () {
        return filteredData.value && filteredData.value.length || 0;
      });
      var curPageData = vue.computed(function () {
        var pageData = filteredData.value;
        if (!props2.pagination) return pageData;
        if (pageSize.value === 0) return pageData;
        var startIndex = (currentPage.value - 1) * pageSize.value;
        var endIndex = currentPage.value * pageSize.value;
        pageData = pageData.slice(startIndex, endIndex);
        return pageData;
      });
      var paginationProps = vue.computed(function () {
        var defaultPaginationProps = {
          size: "small",
          theme: "simple",
          totalContent: false,
          pageSizeOptions: []
        };
        return _typeof$2(props2.pagination) === "object" ? _objectSpread$Z(_objectSpread$Z(_objectSpread$Z({}, defaultPaginationProps), props2.pagination), {}, {
          current: currentPage.value,
          total: pageTotal.value,
          pageSize: pageSize.value
        }) : {};
      });
      var isAllChecked = vue.computed(function () {
        var allValue = getDataValues(props2.dataSource, [], {
          isTreeMode: props2.isTreeMode,
          include: false
        });
        return props2.checkedValue.length > 0 && (props2.isTreeMode ? allValue.every(function (item) {
          return props2.checkedValue.includes(item);
        }) : props2.dataSource.every(function (item) {
          return item.disabled || props2.checkedValue.includes(item.value);
        }));
      });
      var indeterminate = vue.computed(function () {
        return !isAllChecked.value && props2.checkedValue.length > 0;
      });
      var totalCount = vue.computed(function () {
        return getLefCount(props2.dataSource);
      });
      vue.watch(totalCount, function (val) {
        if (val <= (currentPage.value - 1) * pageSize.value) {
          var lastPage = Math.ceil(val / pageSize.value);
          defaultCurrent.value = lastPage;
        }
      });

      var handlePaginationChange = function handlePaginationChange(pageInfo) {
        var _props2$onPageChange;

        (_props2$onPageChange = props2.onPageChange) === null || _props2$onPageChange === void 0 ? void 0 : _props2$onPageChange.call(props2, pageInfo);
        defaultCurrent.value = pageInfo.current;
        defaultPageSize.value = pageInfo.pageSize;
      };

      var handleCheckedChange = function handleCheckedChange(val) {
        var _props2$onCheckedChan;

        (_props2$onCheckedChan = props2.onCheckedChange) === null || _props2$onCheckedChan === void 0 ? void 0 : _props2$onCheckedChan.call(props2, val);
      };

      var handleCheckedAllChange = function handleCheckedAllChange(checked) {
        if (checked) {
          var allValue = getDataValues(props2.dataSource, [], {
            isTreeMode: props2.isTreeMode,
            include: false
          });
          handleCheckedChange(allValue);
        } else {
          handleCheckedChange([]);
        }
      };

      var scroll = function scroll(e) {
        var _props2$onScroll;

        (_props2$onScroll = props2.onScroll) === null || _props2$onScroll === void 0 ? void 0 : _props2$onScroll.call(props2, e);
      };

      var handleSearch = function handleSearch(e) {
        var _props2$onSearch;

        var event = {
          query: e.value,
          type: props2.listType,
          e: e.e,
          trigger: e.trigger
        };
        filterValue.value = e.value;
        (_props2$onSearch = props2.onSearch) === null || _props2$onSearch === void 0 ? void 0 : _props2$onSearch.call(props2, event);
      };

      var renderTNodeJSX = useTNodeDefault();

      var renderTitle = function renderTitle() {
        var defaultNode = props2.title && typeof props2.title === "string" ? vue.createVNode("template", null, [props2.title]) : null;
        var titleNode = renderTNodeJSX("title", {
          defaultNode: defaultNode,
          params: {
            type: props2.listType
          }
        });
        return vue.createVNode("span", null, [titleNode]);
      };

      var renderContent = function renderContent() {
        var _slot2;

        var defaultNode = vue.createVNode(CheckboxGroup, {
          "value": props2.checkedValue,
          "onChange": handleCheckedChange
        }, _isSlot$g(_slot2 = curPageData.value.map(function (item, index) {
          var _slot;

          return vue.createVNode(Checkbox, vue.mergeProps({
            "disabled": props2.disabled || item.disabled,
            "value": item.value,
            "needRipple": true,
            "class": ["".concat(classPrefix.value, "-transfer__list-item"), props2.checkedValue.includes(item.value) ? "".concat(classPrefix.value, "-is-checked") : ""],
            "key": item.key
          }, {
            props: props2.checkboxProps
          }), _isSlot$g(_slot = renderTNodeJSX("transferItem", {
            defaultNode: vue.createVNode("span", null, [item.label]),
            params: {
              data: item.data,
              index: index,
              type: props2.listType
            }
          })) ? _slot : {
            "default": function _default() {
              return [_slot];
            }
          });
        })) ? _slot2 : {
          "default": function _default() {
            return [_slot2];
          }
        });

        return vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-transfer__list-content narrow-scrollbar"),
          "onScroll": scroll
        }, [renderTNodeJSX("tree", {
          defaultNode: defaultNode,
          params: {
            data: curPageData.value,
            value: props2.checkedValue,
            onChange: handleCheckedChange
          }
        })]);
      };

      var renderEmpty = function renderEmpty() {
        var empty = props2.empty || t(global.value.empty);
        var defaultNode = typeof empty === "string" ? vue.createVNode("span", null, [empty]) : null;
        return vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-transfer__empty")
        }, [renderTNodeJSX("empty", {
          defaultNode: defaultNode,
          params: {
            type: props2.listType
          }
        })]);
      };

      var renderFooter = function renderFooter() {
        var defaultNode = typeof props2.footer === "string" ? vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-transfer__footer")
        }, [props2.footer]) : null;
        return renderTNodeJSX("footer", {
          defaultNode: defaultNode,
          params: {
            type: props2.listType
          }
        });
      };

      return function () {
        return vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-transfer__list ").concat(classPrefix.value, "-transfer__list-").concat(props2.listType)
        }, [vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-transfer__list-header")
        }, [vue.createVNode("div", null, [props2.checkAll && vue.createVNode(Checkbox, {
          "disabled": props2.disabled || !props2.dataSource.length,
          "checked": isAllChecked.value,
          "indeterminate": indeterminate.value,
          "onChange": handleCheckedAllChange
        }, null), vue.createVNode("span", null, [t(global.value.title, {
          checked: props2.checkedValue.length,
          total: totalCount.value
        })])]), renderTitle()]), vue.createVNode("div", {
          "class": ["".concat(classPrefix.value, "-transfer__list-body"), props2.search ? "".concat(classPrefix.value, "-transfer__list--with-search") : ""]
        }, [props2.search && vue.createVNode(Search, {
          "searchValue": filterValue.value,
          "placeholder": t(global.value.placeholder),
          "onChange": handleSearch,
          "disabled": props2.disabled,
          "search": props2.search
        }, null), curPageData.value.length > 0 ? renderContent() : renderEmpty()]), props2.pagination && pageSize.value > 0 && pageTotal.value > 0 && vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-transfer__list-pagination")
        }, [vue.createVNode(Pagination, vue.mergeProps(paginationProps.value, {
          "onChange": handlePaginationChange
        }), null)]), renderFooter()]);
      };
    }
  });

  var props$n = {
    checkboxProps: {
      type: Object
    },
    checked: {
      type: Array,
      "default": void 0
    },
    defaultChecked: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    data: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    direction: {
      type: String,
      "default": "both",
      validator: function validator(val) {
        return ["left", "right", "both"].includes(val);
      }
    },
    disabled: {
      type: [Boolean, Array],
      "default": false
    },
    empty: {
      type: [String, Array, Function],
      "default": ""
    },
    footer: {
      type: [Array, Function]
    },
    keys: {
      type: Object
    },
    operation: {
      type: [Array, Function]
    },
    pagination: {
      type: [Object, Array]
    },
    search: {
      type: [Boolean, Object, Array],
      "default": false
    },
    showCheckAll: {
      type: [Boolean, Array],
      "default": true
    },
    targetSort: {
      type: String,
      "default": "original",
      validator: function validator(val) {
        return ["original", "push", "unshift"].includes(val);
      }
    },
    title: {
      type: [Array, Function],
      "default": function _default() {
        return [];
      }
    },
    transferItem: {
      type: Function
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    onChange: Function,
    onCheckedChange: Function,
    onPageChange: Function,
    onScroll: Function,
    onSearch: Function
  };

  function _isSlot$f(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var TransferOperations = vue.defineComponent({
    name: "TTransferOperations",
    props: {
      leftDisabled: {
        type: Boolean,
        required: true
      },
      rightDisabled: {
        type: Boolean,
        required: true
      },
      operation: props$n.operation
    },
    emits: ["moveToRight", "moveToLeft"],
    setup: function setup(props2, _ref) {
      var slots = _ref.slots,
          emit = _ref.emit;
      var classPrefix = usePrefixClass();

      var moveToRight = function moveToRight() {
        emit("moveToRight");
      };

      var moveToLeft = function moveToLeft() {
        emit("moveToLeft");
      };

      var getIconRight = function getIconRight() {
        return vue.createVNode(chevronRight, null, null);
      };

      var getIconLeft = function getIconLeft() {
        return vue.createVNode(chevronLeft, null, null);
      };

      var getIcon = function getIcon(direction) {
        if (typeof props2.operation === "function") {
          return null;
        }

        if (direction === "right" && props2.operation && typeof props2.operation[0] === "function") {
          return null;
        }

        if (direction === "left" && props2.operation && typeof props2.operation[1] === "function") {
          return null;
        }

        if (slots.operation) {
          return null;
        }

        return direction === "left" ? getIconLeft : getIconRight;
      };

      var renderButton = function renderButton(h2, direction) {
        if (typeof slots.operation === "function") {
          return slots.operation({
            direction: direction
          });
        }

        if (typeof props2.operation === "function") {
          var renderContent2 = props2.operation;
          return renderContent2(h2, {
            direction: direction
          });
        }

        var renderContent;

        if (Array.isArray(props2.operation)) {
          var _props2$operation = _slicedToArray(props2.operation, 2),
              left = _props2$operation[0],
              right = _props2$operation[1];

          renderContent = direction === "right" ? right : left;
        } else {
          renderContent = "";
        }

        return renderContent;
      };

      return function () {
        var _slot, _slot2;

        return vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-transfer__operations")
        }, [vue.createVNode(Button, {
          "variant": props2.rightDisabled ? "outline" : "base",
          "key": props2.rightDisabled ? "right-outline" : "right-base",
          "disabled": props2.rightDisabled,
          "onClick": moveToRight,
          "icon": getIcon("right")
        }, _isSlot$f(_slot = renderButton(vue.h, "right")) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        }), vue.createVNode(Button, {
          "variant": props2.leftDisabled ? "outline" : "base",
          "key": props2.rightDisabled ? "left-outline" : "left-base",
          "disabled": props2.leftDisabled,
          "onClick": moveToLeft,
          "icon": getIcon("left")
        }, _isSlot$f(_slot2 = renderButton(vue.h, "left")) ? _slot2 : {
          "default": function _default() {
            return [_slot2];
          }
        })]);
      };
    }
  });

  function ownKeys$Z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$Y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Z(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot$e(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var SOURCE = "source";
  var TARGET = "target";
  var _Transfer = vue.defineComponent({
    name: TRANSFER_NAME,
    props: _objectSpread$Y({}, props$n),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var disabled = useFormDisabled();
      var classPrefix = usePrefixClass();

      var _toRefs = vue.toRefs(props2),
          value = _toRefs.value,
          modelValue = _toRefs.modelValue,
          checked = _toRefs.checked;

      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          innerValue = _useVModel2[0],
          setInnerValue = _useVModel2[1];

      var _useDefaultValue = useDefaultValue(checked, props2.defaultChecked, props2.onCheckedChange, "checked"),
          _useDefaultValue2 = _slicedToArray(_useDefaultValue, 1),
          innerChecked = _useDefaultValue2[0];

      var valueList = vue.computed(function () {
        return innerValue.value;
      });
      var isTreeMode = vue.computed(function () {
        var treeSlot = slots.tree;
        return typeof treeSlot === "function";
      });
      var leftButtonDisabled = vue.computed(function () {
        return props2.direction === "right";
      });
      var rightButtonDisabled = vue.computed(function () {
        return props2.direction === "left";
      });
      var transferData = vue.computed(function () {
        return getTransferData(props2.data, props2.keys, isTreeMode.value);
      });
      var sourceList = vue.computed(function () {
        return filterTransferData(transferData.value, valueList.value, false, isTreeMode.value);
      });
      var targetList = vue.computed(function () {
        return filterTransferData(transferData.value, valueList.value, true, isTreeMode.value);
      });
      var checkedValue = vue.computed(function () {
        var _ref2;

        return _ref2 = {}, _defineProperty$3(_ref2, SOURCE, getDataValues(sourceList.value, innerChecked.value, {
          isTreeMode: isTreeMode.value
        })), _defineProperty$3(_ref2, TARGET, getDataValues(targetList.value, innerChecked.value, {
          isTreeMode: isTreeMode.value
        })), _ref2;
      });
      var hasFooter = vue.computed(function () {
        return !!slots.footer || !!props2.footer;
      });
      var showPagination = vue.computed(function () {
        return !!props2.pagination && !slots.content;
      });
      var showSearch = vue.computed(function () {
        return !!props2.search;
      });
      var footerOption = vue.computed(function () {
        var footer = props2.footer || "";
        return getTransferListOption(footer);
      });
      var emptyOption = vue.computed(function () {
        return getTransferListOption(props2.empty);
      });
      var searchOption = vue.computed(function () {
        return getTransferListOption(props2.search);
      });
      var checkAllOption = vue.computed(function () {
        return getTransferListOption(props2.showCheckAll);
      });
      var disabledOption = vue.computed(function () {
        return getTransferListOption(disabled.value);
      });
      var titleOption = vue.computed(function () {
        return getTransferListOption(props2.title);
      });
      var paginationOption = vue.computed(function () {
        return getTransferListOption(props2.pagination);
      });

      var handleCheckedChange = function handleCheckedChange(val, listType) {
        var _props2$onCheckedChan;

        var sourceChecked = listType === SOURCE ? val : checkedValue.value[SOURCE];
        var targetChecked = listType === TARGET ? val : checkedValue.value[TARGET];
        var checked2 = [].concat(_toConsumableArray(sourceChecked), _toConsumableArray(targetChecked));
        var event = {
          checked: checked2,
          sourceChecked: sourceChecked,
          targetChecked: targetChecked,
          type: listType
        };
        innerChecked.value = checked2;
        (_props2$onCheckedChan = props2.onCheckedChange) === null || _props2$onCheckedChan === void 0 ? void 0 : _props2$onCheckedChan.call(props2, event);
      };

      var transferTo = function transferTo(toDirection) {
        var oldTargetValue = JSON.parse(JSON.stringify(valueList.value));
        var newTargetValue;
        var selfCheckedValue = toDirection === TARGET ? checkedValue.value[SOURCE] : checkedValue.value[TARGET];

        if (toDirection === SOURCE) {
          newTargetValue = oldTargetValue.filter(function (v) {
            return !selfCheckedValue.includes(v);
          });
        } else if (props2.targetSort === "original") {
          newTargetValue = getDataValues(transferData.value, oldTargetValue.concat(selfCheckedValue), {
            isTreeMode: isTreeMode.value
          });
        } else if (props2.targetSort === "unshift") {
          newTargetValue = selfCheckedValue.concat(oldTargetValue);
        } else {
          newTargetValue = oldTargetValue.concat(selfCheckedValue);
        }

        handleCheckedChange([], toDirection === SOURCE ? TARGET : SOURCE);
        var params = {
          type: toDirection,
          movedValue: selfCheckedValue
        };
        setInnerValue(newTargetValue, params);
      };

      var transferToRight = function transferToRight() {
        transferTo(TARGET);
      };

      var transferToLeft = function transferToLeft() {
        transferTo(SOURCE);
      };

      var handleScroll = function handleScroll(e, listType) {
        var _props2$onScroll;

        var target = e.target;
        var bottomDistance = target.scrollHeight - target.scrollTop - target.clientHeight;
        var event = {
          e: e,
          bottomDistance: bottomDistance,
          type: listType
        };
        (_props2$onScroll = props2.onScroll) === null || _props2$onScroll === void 0 ? void 0 : _props2$onScroll.call(props2, event);
      };

      var handleSearch = function handleSearch(e) {
        var _props2$onSearch;

        (_props2$onSearch = props2.onSearch) === null || _props2$onSearch === void 0 ? void 0 : _props2$onSearch.call(props2, e);
      };

      var handlePageChange = function handlePageChange(pageInfo, listType) {
        var _props2$onPageChange;

        (_props2$onPageChange = props2.onPageChange) === null || _props2$onPageChange === void 0 ? void 0 : _props2$onPageChange.call(props2, pageInfo, {
          type: listType
        });
      };

      var renderTransferList = function renderTransferList(listType) {
        var scopedSlots = pick_1(slots, ["title", "empty", "footer", "operation", "transferItem", "default", "tree"]);
        return vue.createVNode(TransferList, {
          "checkboxProps": props2.checkboxProps,
          "transferItem": props2.transferItem,
          "list-type": listType,
          "title": titleOption.value[listType],
          "data-source": listType === SOURCE ? sourceList.value : targetList.value,
          "checked-value": checkedValue.value[listType],
          "disabled": disabledOption.value[listType],
          "search": searchOption.value[listType],
          "pagination": paginationOption.value[listType],
          "check-all": checkAllOption.value[listType],
          "footer": footerOption.value[listType],
          "empty": emptyOption.value[listType],
          "onCheckedChange": function onCheckedChange($event) {
            return handleCheckedChange($event, listType);
          },
          "onScroll": function onScroll($event) {
            return handleScroll($event, listType);
          },
          "onSearch": handleSearch,
          "onPageChange": function onPageChange($event) {
            return handlePageChange($event, listType);
          },
          "isTreeMode": isTreeMode.value
        }, _isSlot$e(scopedSlots) ? scopedSlots : {
          "default": function _default() {
            return [scopedSlots];
          }
        });
      };

      return function () {
        return vue.createVNode("div", {
          "class": ["".concat(classPrefix.value, "-transfer"), showSearch.value ? "".concat(classPrefix.value, "-transfer__search") : "", hasFooter.value ? "".concat(classPrefix.value, "-transfer__footer") : "", showPagination.value ? "".concat(classPrefix.value, "-transfer__pagination") : "", isTreeMode.value ? "".concat(classPrefix.value, "-transfer--with-tree") : ""]
        }, [renderTransferList(SOURCE), vue.createVNode(TransferOperations, {
          "leftDisabled": disabledOption.value[TARGET] || leftButtonDisabled.value || checkedValue.value[TARGET].length === 0,
          "rightDisabled": disabledOption.value[SOURCE] || rightButtonDisabled.value || checkedValue.value[SOURCE].length === 0,
          "operation": props2.operation,
          "onMoveToRight": transferToRight,
          "onMoveToLeft": transferToLeft
        }, {
          operation: slots.operation
        }), renderTransferList(TARGET)]);
      };
    }
  });

  var Transfer = withInstall(_Transfer);

  var InputItems = vue.defineComponent({
    name: "TTimePickerInputItems",
    props: {
      format: {
        type: String,
        "default": ""
      },
      dayjs: {
        type: [Object, Array, void 0],
        "default": void 0
      },
      placeholder: {
        type: String,
        "default": ""
      },
      allowInput: {
        type: Boolean
      },
      isRangePicker: {
        type: Boolean,
        "default": false
      },
      disabled: {
        type: Boolean
      }
    },
    emits: ["change", "blurDefault", "focusDefault", "toggleMeridiem"],
    setup: function setup() {
      var COMPONENT_NAME = usePrefixClass("time-picker");

      var _useConfig = useConfig("timePicker"),
          global = _useConfig.global;

      return {
        global: global,
        COMPONENT_NAME: COMPONENT_NAME
      };
    },
    computed: {
      displayTimeList: function displayTimeList() {
        return this.isRangePicker ? this.dayjs : [this.dayjs];
      }
    },
    methods: {
      onInput: function onInput(e, type, index) {
        if (!this.allowInput) return;
        var target = e.target,
            data = e.data;
        var value = target.value;
        var format = this.$props.format;
        var curDayJs = this.displayTimeList[index];
        var number = Number(value);

        if (curDayJs[type] === "00" && number === 0 || value === "") {
          emitEvent(this, "change", {
            value: EMPTY_VALUE,
            type: type,
            index: index
          });
        } else if ("".concat(number).length > 2) {
          number = Number(data);
        }

        var emitChange = true;

        if (!isNaN(number)) {
          switch (type) {
            case "hour":
              if (number > (/[h]{1}/.test(format) ? 12 : 24) || number < 0) {
                emitChange = false;
              }

              break;

            case "minute":
              if (number > 59 || number < 0) {
                emitChange = false;
              }

              break;

            case "second":
              if (number > 59 || number < 0) {
                emitChange = false;
              }

              break;
          }

          if (emitChange) {
            emitEvent(this, "change", {
              value: number,
              type: type,
              index: index
            });
          }
        }

        if (curDayJs[type] !== void 0) this.setInputValue(curDayJs[type], target);
      },
      onBlur: function onBlur(e, trigger, index, input) {
        this.allowInput && emitEvent(this, "blurDefault", e, trigger, index, input);
      },
      onFocus: function onFocus(e, trigger, index, input) {
        this.allowInput && emitEvent(this, "focusDefault", e, trigger, index, input);
      },
      onKeydown: function onKeydown(e, type, index) {
        if (!this.allowInput) return;
        var which = e.which;
        var format = this.$props.format;
        var curDayJs = this.displayTimeList[index];

        if ([KeyboardDirection.up, KeyboardDirection.down].includes(which)) {
          if (type === "meridiem") return;
          var current = curDayJs[type] ? Number(curDayJs[type]) : 0;
          var operate = which === KeyboardDirection.up ? -1 : 1;
          var result = current + operate;

          if (type === "hour") {
            if (result > (/[h]{1}/.test(format) ? 11 : 23)) {
              result = 0;
            } else if (result < 0) {
              result = /[h]{1}/.test(format) ? 11 : 23;
            }
          } else if (result > 59) {
            result = 1;
          } else if (result < 0) {
            result = 59;
          }

          emitEvent(this, "change", {
            value: result,
            type: type,
            index: index
          });
        } else if ([KeyboardDirection.left, KeyboardDirection.right].includes(which)) {
          var target = e.target;
          var parentNode = target.parentNode;
          var focus = which === KeyboardDirection.left ? parentNode.previousSibling : parentNode.nextSibling;

          if (focus) {
            var input = focus.querySelector("input");
            if (!input.focus) return;
            input.focus();
          }
        }
      },
      onToggleMeridiem: function onToggleMeridiem(index) {
        emitEvent(this, "toggleMeridiem", index);
      },
      setInputValue: function setInputValue(v, input) {
        var sV = String(v);

        if (!input) {
          return;
        }

        if (input.value !== sV) {
          Object.assign(input, {
            value: sV
          });
        }
      },
      switchRenderComponent: function switchRenderComponent() {
        var _this = this;

        var _this$$props = this.$props,
            format = _this$$props.format,
            placeholder = _this$$props.placeholder,
            allowInput = _this$$props.allowInput,
            disabled = _this$$props.disabled;

        function isEmptyDayjs(val) {
          return val === void 0 || val.hour === void 0 && val.minute === void 0 && val.second === void 0;
        }

        var isEmptyVal = this.displayTimeList.every(function (date) {
          return isEmptyDayjs(date);
        });

        if (isEmptyVal) {
          return vue.createVNode("span", {
            "class": "".concat(this.COMPONENT_NAME, "__input-placeholder")
          }, [placeholder]);
        }

        var itemClasses = disabled ? ["".concat(this.COMPONENT_NAME, "__input-item"), "".concat(this.COMPONENT_NAME, "__input-item-disabled")] : ["".concat(this.COMPONENT_NAME, "__input-item")];
        var inputClass = "".concat(this.COMPONENT_NAME, "__input-item-input");
        var render = [];
        this.displayTimeList.forEach(function (inputTime, index) {
          if (index > 0) render.push("-");
          var hour = inputTime.hour,
              minute = inputTime.minute,
              second = inputTime.second;
          render.push(vue.createVNode("span", {
            "class": itemClasses
          }, [vue.createVNode("input", {
            "class": inputClass,
            "value": hour,
            "disabled": !allowInput,
            "onKeydown": function onKeydown(e) {
              return _this.onKeydown(e, "hour", index);
            },
            "onInput": function onInput(e) {
              return _this.onInput(e, "hour", index);
            },
            "onBlur": function onBlur(e) {
              return _this.onBlur(e, "hour", index, Number(hour));
            },
            "onFocus": function onFocus(e) {
              return _this.onFocus(e, "hour", index, Number(hour));
            }
          }, null)]));

          if (/[hH]{1,2}:m{1,2}/.test(format)) {
            render.push(vue.createVNode("span", {
              "class": itemClasses
            }, [":", vue.createVNode("input", {
              "class": inputClass,
              "value": minute,
              "disabled": !allowInput,
              "onKeydown": function onKeydown(e) {
                return _this.onKeydown(e, "minute", index);
              },
              "onInput": function onInput(e) {
                return _this.onInput(e, "minute", index);
              },
              "onBlur": function onBlur(e) {
                return _this.onBlur(e, "minute", index, Number(minute));
              },
              "onFocus": function onFocus(e) {
                return _this.onFocus(e, "minute", index, Number(minute));
              }
            }, null)]));

            if (/[hH]{1,2}:m{1,2}:s{1,2}/.test(format)) {
              render.push(vue.createVNode("span", {
                "class": itemClasses
              }, [":", vue.createVNode("input", {
                "class": inputClass,
                "value": second,
                "disabled": !allowInput,
                "onKeydown": function onKeydown(e) {
                  return _this.onKeydown(e, "second", index);
                },
                "onInput": function onInput(e) {
                  return _this.onInput(e, "second", index);
                },
                "onBlur": function onBlur(e) {
                  return _this.onBlur(e, "second", index, Number(second));
                },
                "onFocus": function onFocus(e) {
                  return _this.onFocus(e, "second", index, Number(second));
                }
              }, null)]));
            }
          }

          if (/[h]{1}/.test(format) && (format.includes("A") || format.includes("a"))) {
            var localeMeridiemList = [_this.global.anteMeridiem, _this.global.postMeridiem];
            var text = localeMeridiemList[MERIDIEM_LIST.indexOf(inputTime.meridiem.toUpperCase())];
            render[amFormat.test(format) ? "unshift" : "push"](vue.createVNode("span", {
              "class": itemClasses,
              "onClick": function onClick() {
                return allowInput && _this.onToggleMeridiem(index);
              }
            }, [vue.createVNode("input", {
              "readonly": true,
              "class": [inputClass, "".concat(inputClass, "-meridiem")],
              "value": text,
              "onKeydown": function onKeydown(e) {
                return _this.onKeydown(e, "meridiem", index);
              },
              "disabled": !allowInput
            }, null)]));
          }
        });
        return render;
      }
    },
    render: function render() {
      var classes = ["".concat(this.COMPONENT_NAME, "__input")];
      return vue.createVNode("div", {
        "class": classes
      }, [this.switchRenderComponent()]);
    }
  });

  function ownKeys$Y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$X(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Y(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  dayjs.extend(customParseFormat);
  var _TimePicker = vue.defineComponent({
    name: "TTimePicker",
    components: {
      PickerPanel: PickerPanel,
      TimeIcon: time,
      TPopup: Popup,
      TInput: Input,
      InputItems: InputItems
    },
    props: _objectSpread$X({}, props$w),
    emits: ["change", "input", "close", "open", "focus", "blur"],
    setup: function setup() {
      var disabled = useFormDisabled();
      var COMPONENT_NAME = usePrefixClass("time-picker");

      var _useCommonClassName = useCommonClassName$2(),
          SIZE = _useCommonClassName.SIZE,
          STATUS = _useCommonClassName.STATUS;

      var _useConfig = useConfig("timePicker"),
          global = _useConfig.global;

      return {
        global: global,
        SIZE: SIZE,
        STATUS: STATUS,
        COMPONENT_NAME: COMPONENT_NAME,
        disabled: disabled
      };
    },
    data: function data() {
      var _this$$props = this.$props,
          defaultValue = _this$$props.defaultValue,
          value = _this$$props.value;
      var time = value || defaultValue;
      return {
        els: [],
        focus: false,
        isShowPanel: false,
        time: time ? dayjs(time, this.format) : void 0,
        inputTime: time ? this.setInputValue(dayjs(time, this.format)) : void 0,
        needClear: false
      };
    },
    computed: {
      panelValue: function panelValue() {
        var time = this.$data.time;

        if (time) {
          return [dayjs(time, this.format)];
        }

        if (this.steps.filter(function (step) {
          return step !== 1;
        }).length < 1) {
          return [dayjs()];
        }

        return [dayjs().hour(0).minute(0).second(0)];
      },
      textClassName: function textClassName() {
        var _this$inputTime, _this$inputTime2, _this$inputTime3;

        var isDefault = !!((_this$inputTime = this.inputTime) !== null && _this$inputTime !== void 0 && _this$inputTime.hour) && !!((_this$inputTime2 = this.inputTime) !== null && _this$inputTime2 !== void 0 && _this$inputTime2.minute) && !!((_this$inputTime3 = this.inputTime) !== null && _this$inputTime3 !== void 0 && _this$inputTime3.second);
        return isDefault ? "" : "".concat(this.COMPONENT_NAME, "__group-text");
      }
    },
    watch: {
      value: {
        handler: function handler() {
          this.time = this.value ? dayjs(this.value, this.format) : void 0;
          this.inputTime = this.value ? this.setInputValue(dayjs(this.value, this.format)) : void 0;
        }
      }
    },
    methods: {
      inputChange: function inputChange(event) {
        var type = event.type,
            value = event.value;
        var time = this.$data.time;
        var newTime = time;

        if (value === EMPTY_VALUE) {
          this.inputTime[type] = void 0;
          newTime[type](0);
          return;
        }

        if (!newTime) {
          newTime = dayjs();
          newTime.hour(0);
          newTime.minute(0);
          newTime.second(0);
        }

        newTime = newTime.set(type, value);
        this.time = dayjs(newTime);
        this.inputTime = this.setInputValue(this.time);
        emitEvent(this, "input", {
          input: value,
          value: this.time.format(this.format),
          e: event
        });
        var panelRef = this.$refs.panel;
        panelRef.panelColUpdate();
      },
      onBlurDefault: function onBlurDefault(e, trigger, index, input) {
        emitEvent(this, "blur", {
          trigger: trigger,
          input: input,
          value: this.time.format(this.format),
          e: e
        });
      },
      onFocusDefault: function onFocusDefault(e, trigger, index, input) {
        emitEvent(this, "focus", {
          trigger: trigger,
          input: input,
          value: this.time.format(this.format),
          e: e
        });
      },
      panelVisibleChange: function panelVisibleChange(val, context) {
        if (context.trigger) {
          var isClickDoc = context.trigger === "document";
          this.isShowPanel = !isClickDoc;
          emitEvent(this, isClickDoc ? "close" : "open", context);
        } else {
          this.isShowPanel = val;
          emitEvent(this, val ? "open" : "close", context);
        }
      },
      toggleInputMeridiem: function toggleInputMeridiem() {
        var time = this.$data.time;
        var current = time.format("A");
        var currentHour = time.hour() + (current === AM ? 12 : -12);
        this.inputChange({
          type: "hour",
          value: currentHour
        });
      },
      pickTime: function pickTime(col, change, index, value) {
        var time = this.time,
            format = this.format;
        var setTime = time;

        if (EPickerCols.hour === col) {
          setTime = value.set(col, value.hour() >= 12 && (amFormat.test(format) || pmFormat.test(format)) ? Number(change) + 12 : change);
        } else if ([EPickerCols.minute, EPickerCols.second].includes(col)) {
          setTime = value.set(col, change);
        } else {
          var currentHour = value.hour();

          if (change === this.global.anteMeridiem && currentHour > 12) {
            currentHour -= 12;
          } else if (change === this.global.postMeridiem && currentHour < 12) {
            currentHour += 12;
          }

          setTime = value.hour(currentHour);
        }

        this.time = setTime;
        this.inputTime = this.setInputValue(setTime);
        var formatValue = dayjs(setTime).format(this.format);
        emitEvent(this, "change", formatValue);
      },
      makeSure: function makeSure(e) {
        this.panelVisibleChange(false, {
          e: e
        });
        this.output();
      },
      nowAction: function nowAction() {
        var currentTime = dayjs();

        if (isFunction_1(this.disableTime) && this.disableTime(currentTime.get("hour"), currentTime.get("minute"), currentTime.get("second"))) {
          return;
        }

        this.time = currentTime;
        this.inputTime = this.setInputValue(this.time);
        emitEvent(this, "change", currentTime.format(this.format));
      },
      output: function output() {
        if (this.needClear) {
          this.inputTime = this.setInputValue(void 0);
          this.needClear = false;
        } else {
          var _this$time;

          this.time = (_this$time = this.time) !== null && _this$time !== void 0 ? _this$time : dayjs();
          this.inputTime = this.setInputValue(this.time);
        }
      },
      setInputValue: function setInputValue(val) {
        var ans = {
          hour: void 0,
          minute: void 0,
          second: void 0,
          meridiem: AM
        };
        if (!val) return ans;
        return this.dayjs2InputTime(val);
      },
      dayjs2InputTime: function dayjs2InputTime(val) {
        var format = this.$props.format;

        if (!val) {
          return {
            hour: void 0,
            minute: void 0,
            second: void 0,
            meridiem: AM
          };
        }

        var hour = val.hour();
        var minute = val.minute();
        var second = val.second();

        if (/[h]{1}/.test(format)) {
          hour %= 12;
        }

        if (/[h|H]{2}/.test(format)) {
          hour = hour < 10 ? "0".concat(hour) : hour;
        }

        if (/[m|M]{2}/.test(format)) {
          minute = minute < 10 ? "0".concat(minute) : minute;
        }

        if (/[s|S]{2}/.test(format)) {
          second = second < 10 ? "0".concat(second) : second;
        }

        return {
          hour: hour,
          minute: minute,
          second: second,
          meridiem: val.format("a")
        };
      },
      clear: function clear(context) {
        var e = context.e;
        this.time = void 0;
        this.needClear = true;
        this.inputTime = this.setInputValue(void 0);
        emitEvent(this, "change", void 0);
        e.stopPropagation();
      },
      handleTInputFocus: function handleTInputFocus() {
        var _this = this;

        vue.nextTick(function () {
          _this.$refs.tInput.blur();
        });
      },
      renderInput: function renderInput() {
        var _this2 = this;

        var classes = ["".concat(this.COMPONENT_NAME, "__group"), _defineProperty$3({}, this.STATUS.focused, this.isShowPanel)];
        var slots = {
          "suffix-icon": function suffixIcon() {
            return vue.createVNode(vue.resolveComponent("time-icon"), null, null);
          }
        };
        return vue.createVNode("div", {
          "class": classes,
          "onClick": function onClick() {
            return _this2.isShowPanel = true;
          }
        }, [vue.createVNode(vue.resolveComponent("t-input"), {
          "disabled": this.disabled,
          "size": this.size,
          "onClear": this.clear,
          "clearable": this.clearable,
          "placeholder": " ",
          "value": this.time ? " " : void 0,
          "ref": "tInput",
          "onFocus": this.handleTInputFocus
        }, slots), vue.createVNode(vue.resolveComponent("input-items"), {
          "size": this.size,
          "dayjs": this.inputTime,
          "disabled": this.disabled,
          "format": this.format,
          "steps": this.steps,
          "allowInput": this.allowInput,
          "placeholder": this.placeholder || this.global.placeholder,
          "onToggleMeridiem": function onToggleMeridiem() {
            return _this2.toggleInputMeridiem();
          },
          "onBlurDefault": this.onBlurDefault,
          "onFocusDefault": this.onFocusDefault,
          "onChange": function onChange(e) {
            return _this2.inputChange(e);
          }
        }, null)]);
      }
    },
    render: function render() {
      var _this3 = this;

      var size = this.size,
          className = this.$attrs.className,
          disabled = this.disabled;
      var classes = [this.COMPONENT_NAME, this.SIZE[size] || "", className];
      var slots = {
        content: function content() {
          return vue.createVNode(vue.resolveComponent("picker-panel"), {
            "ref": "panel",
            "format": _this3.format,
            "value": _this3.panelValue,
            "disabled": _this3.disabled,
            "isShowPanel": _this3.isShowPanel,
            "onTimePick": _this3.pickTime,
            "onSure": _this3.makeSure,
            "onNowAction": _this3.nowAction,
            "steps": _this3.steps,
            "hideDisabledTime": _this3.hideDisabledTime,
            "disableTime": _this3.disableTime,
            "isFocus": _this3.focus
          }, null);
        }
      };
      return vue.createVNode(vue.resolveComponent("t-popup"), {
        "ref": "popup",
        "placement": "bottom-left",
        "class": classes,
        "trigger": "click",
        "disabled": disabled,
        "visible": this.isShowPanel,
        "overlayClassName": "".concat(this.COMPONENT_NAME, "__panel-container"),
        "onVisibleChange": this.panelVisibleChange,
        "expandAnimation": true
      }, _objectSpread$X({
        "default": function _default() {
          return [_this3.renderInput()];
        }
      }, slots));
    }
  });

  var props$m = {
    allowInput: Boolean,
    clearable: Boolean,
    disabled: {
      type: [Boolean, Array],
      "default": false
    },
    disableTime: {
      type: Function
    },
    format: {
      type: String,
      "default": "HH:mm:ss"
    },
    hideDisabledTime: {
      type: Boolean,
      "default": true
    },
    placeholder: {
      type: [String, Array]
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    steps: {
      type: Array,
      "default": function _default() {
        return [1, 1, 1];
      }
    },
    value: {
      type: Array
    },
    modelValue: {
      type: Array
    },
    defaultValue: {
      type: Array
    },
    onBlur: Function,
    onChange: Function,
    onFocus: Function,
    onInput: Function
  };

  function ownKeys$X(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$W(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$X(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$X(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  dayjs.extend(customParseFormat);
  var _TimeRangePicker = vue.defineComponent({
    name: "TTimeRangePicker",
    components: {
      PickerPanel: PickerPanel,
      TimeIcon: time,
      InputItems: InputItems,
      TPopup: Popup,
      TInput: Input
    },
    props: _objectSpread$W({}, props$m),
    emits: ["input", "click", "blur", "focus", "change", "close", "open"],
    setup: function setup() {
      var COMPONENT_NAME = usePrefixClass("time-picker");

      var _useCommonClassName = useCommonClassName$2(),
          SIZE = _useCommonClassName.SIZE,
          STATUS = _useCommonClassName.STATUS;

      var _useConfig = useConfig("timePicker"),
          global = _useConfig.global;

      return {
        global: global,
        STATUS: STATUS,
        SIZE: SIZE,
        COMPONENT_NAME: COMPONENT_NAME
      };
    },
    data: function data() {
      return {
        els: [],
        focus: false,
        isShowPanel: false,
        time: TIME_PICKER_EMPTY,
        inputTime: TIME_PICKER_EMPTY
      };
    },
    computed: {
      panelValue: function panelValue() {
        var time = this.time || TIME_PICKER_EMPTY;
        return time.map(function (val) {
          return val ? dayjs(val) : dayjs();
        });
      },
      textClassName: function textClassName() {
        var isDefault = this.inputTime.some(function (item) {
          return !!item.hour && !!item.minute && !!item.second;
        });
        return isDefault ? "" : "".concat(this.COMPONENT_NAME, "__group-text");
      }
    },
    watch: {
      value: {
        handler: function handler(val, oldVal) {
          if (JSON.stringify(val) === JSON.stringify(oldVal)) return;
          var values = Array.isArray(this.value) ? this.value : [];
          var format = this.format;

          function getVal(value) {
            return value ? dayjs(value, format) : void 0;
          }

          var dayjsList = [getVal(values[0]), getVal(values[1])];
          this.time = dayjsList;
          this.updateInputTime();
        },
        immediate: true
      }
    },
    methods: {
      inputChange: function inputChange(event) {
        var type = event.type,
            value = event.value,
            index = event.index;
        var newTime = this.time[index];

        if (value === EMPTY_VALUE) {
          this.inputTime[index][type] = void 0;
          newTime[type](0);
          return;
        }

        if (!newTime) {
          newTime = dayjs();
          newTime.hour(0);
          newTime.minute(0);
          newTime.second(0);
        }

        newTime = newTime.set(type, value);
        this.time[index] = dayjs(newTime);
        this.updateInputTime();
        emitEvent(this, "input", {
          input: value,
          value: this.time[index].format(this.format),
          e: event
        });
        var panelRef = this.$refs.panel;
        panelRef.panelColUpdate();
      },
      getFormatValues: function getFormatValues() {
        var _this = this;

        var values = [];
        this.time.forEach(function (time) {
          if (time) {
            values.push(time.format(_this.format));
          }
        });
        return values;
      },
      onBlurDefault: function onBlurDefault(e) {
        var value = this.getFormatValues();
        emitEvent(this, "blur", {
          value: value,
          e: e
        });
      },
      onFocusDefault: function onFocusDefault(e) {
        var value = this.getFormatValues();
        emitEvent(this, "focus", {
          value: value,
          e: e
        });
      },
      panelVisibleChange: function panelVisibleChange(val, context) {
        if (context.trigger) {
          var isClickDoc = context.trigger === "document";
          this.isShowPanel = !isClickDoc;
          emitEvent(this, isClickDoc ? "close" : "open", context);
        } else {
          this.isShowPanel = val;
          emitEvent(this, val ? "open" : "close", context);
        }
      },
      toggleInputMeridiem: function toggleInputMeridiem(index) {
        var curTime = this.time[index];
        var current = curTime.format("a");
        var currentHour = curTime.hour() + (current === AM ? 12 : -12);
        this.inputChange({
          type: "hour",
          value: currentHour,
          index: index
        });
      },
      pickTime: function pickTime(col, change, index, value) {
        var time = this.time,
            format = this.format;
        var panelRef = this.$refs.panel;
        var shouldUpdatePanel = false;
        var setTime = time[index];

        if (EPickerCols.hour === col) {
          setTime = value.set(col, value.hour() >= 12 && (amFormat.test(format) || pmFormat.test(format)) ? Number(change) + 12 : change);
        } else if ([EPickerCols.minute, EPickerCols.second].includes(col)) {
          setTime = value.set(col, change);
        } else {
          var currentHour = value.hour();

          if (change === this.global.anteMeridiem) {
            currentHour -= 12;
          } else if (change === this.global.postMeridiem) {
            currentHour += 12;
          }

          setTime = value.hour(currentHour);
        }

        this.time[index] = setTime;

        if (index === 0 && !this.time[1]) {
          this.time[1] = setTime;
          shouldUpdatePanel = true;
        } else if (index === 1 && !this.time[0]) {
          this.time[0] = dayjs().hour(0).minute(0).second(0);
          shouldUpdatePanel = true;
        }

        this.updateInputTime();
        shouldUpdatePanel && panelRef.panelColUpdate();
      },
      makeSure: function makeSure(e) {
        this.panelVisibleChange(false, {
          e: e
        });
      },
      updateInputTime: function updateInputTime() {
        var format = this.$props.format;
        var disPlayValues = [];
        (this.time || []).forEach(function (time) {
          if (!time) {
            disPlayValues.push({
              hour: void 0,
              minute: void 0,
              second: void 0,
              meridiem: AM
            });
          } else {
            var hour = time.hour();
            var minute = time.minute();
            var second = time.second();

            if (/[h]{1}/.test(format)) {
              hour %= 12;
            }

            if (/[h|H]{2}/.test(format)) {
              hour = hour < 10 ? "0".concat(hour) : hour;
            }

            if (/[m|M]{2}/.test(format)) {
              minute = minute < 10 ? "0".concat(minute) : minute;
            }

            if (/[s|S]{2}/.test(format)) {
              second = second < 10 ? "0".concat(second) : second;
            }

            disPlayValues.push({
              hour: hour,
              minute: minute,
              second: second,
              meridiem: time.format("a")
            });
          }
        });
        this.inputTime = disPlayValues;
        this.triggerUpdateValue();
      },
      clear: function clear(context) {
        var e = context.e;
        this.time = TIME_PICKER_EMPTY;
        this.updateInputTime();
        e.stopPropagation();
      },
      triggerUpdateValue: function triggerUpdateValue() {
        var _this2 = this;

        var values = [];
        this.time.forEach(function (time) {
          if (time) {
            values.push(time.format(_this2.format));
          }
        });
        emitEvent(this, "change", values);
        isFunction_1(this.onChange) && this.onChange(values);
      },
      handleTInputFocus: function handleTInputFocus() {
        var _this3 = this;

        vue.nextTick(function () {
          _this3.$refs.tInput.blur();
        });
      },
      renderInput: function renderInput() {
        var _this4 = this;

        var classes = ["".concat(this.COMPONENT_NAME, "__group"), _defineProperty$3({}, this.STATUS.focused, this.isShowPanel)];
        return vue.createVNode("div", {
          "class": classes,
          "onClick": function onClick() {
            return _this4.isShowPanel = true;
          }
        }, [vue.createVNode(vue.resolveComponent("t-input"), {
          "disabled": this.disabled,
          "size": this.size,
          "onClear": this.clear,
          "clearable": this.clearable,
          "placeholder": " ",
          "value": !isEqual_1(this.time, TIME_PICKER_EMPTY) ? " " : void 0,
          "ref": "tInput",
          "onFocus": this.handleTInputFocus
        }, {
          "suffix-icon": function suffixIcon() {
            return vue.createVNode(vue.resolveComponent("time-icon"), null, null);
          }
        }), vue.createVNode(vue.resolveComponent("input-items"), {
          "size": this.size,
          "dayjs": this.inputTime,
          "disabled": this.disabled,
          "format": this.format,
          "allowInput": this.allowInput,
          "placeholder": this.placeholder || this.global.placeholder,
          "isRangePicker": true,
          "onToggleMeridiem": function onToggleMeridiem(index) {
            return _this4.toggleInputMeridiem(index);
          },
          "onBlurDefault": this.onBlurDefault,
          "onFocusDefault": this.onFocusDefault,
          "onChange": function onChange(e) {
            return _this4.inputChange(e);
          },
          "steps": this.steps
        }, null)]);
      }
    },
    render: function render() {
      var _this5 = this;

      var _this$$props = this.$props,
          size = _this$$props.size,
          disabled = _this$$props.disabled;
      var classes = [this.COMPONENT_NAME, this.SIZE[size]];
      var slots = {
        content: function content() {
          return vue.createVNode(vue.resolveComponent("picker-panel"), {
            "ref": "panel",
            "format": _this5.format,
            "value": _this5.panelValue,
            "disabled": _this5.disabled,
            "isShowPanel": _this5.isShowPanel,
            "onTimePick": _this5.pickTime,
            "onSure": _this5.makeSure,
            "steps": _this5.steps,
            "hideDisabledTime": _this5.hideDisabledTime,
            "disableTime": _this5.disableTime,
            "isFocus": _this5.focus
          }, null);
        }
      };
      return vue.createVNode(vue.resolveComponent("t-popup"), {
        "ref": "popup",
        "class": classes,
        "placement": "bottom-left",
        "trigger": "click",
        "disabled": disabled,
        "visible": this.isShowPanel,
        "overlayClassName": "".concat(this.COMPONENT_NAME, "__panel-container"),
        "onVisibleChange": this.panelVisibleChange,
        "expandAnimation": true
      }, _objectSpread$W({
        "default": function _default() {
          return [_this5.renderInput()];
        }
      }, slots));
    }
  });

  var TimePicker = withInstall(mapProps([{
    name: "value",
    event: "change",
    alias: ["modelValue"]
  }])(_TimePicker));
  var TimeRangePicker = withInstall(mapProps([{
    name: "value",
    event: "change",
    alias: ["modelValue"]
  }])(_TimeRangePicker));

  var props$l = {
    activable: Boolean,
    actived: {
      type: Array,
      "default": void 0
    },
    defaultActived: {
      type: Array
    },
    activeMultiple: Boolean,
    allowFoldNodeOnFilter: Boolean,
    checkable: Boolean,
    checkProps: {
      type: Object
    },
    checkStrictly: Boolean,
    data: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    disableCheck: {
      type: [Boolean, Function],
      "default": false
    },
    disabled: Boolean,
    empty: {
      type: [String, Function],
      "default": ""
    },
    expandAll: Boolean,
    expanded: {
      type: Array,
      "default": void 0
    },
    defaultExpanded: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    expandLevel: {
      type: Number,
      "default": 0
    },
    expandMutex: Boolean,
    expandOnClickNode: Boolean,
    expandParent: Boolean,
    filter: {
      type: Function
    },
    hover: Boolean,
    icon: {
      type: [Boolean, Function],
      "default": true
    },
    keys: {
      type: Object
    },
    label: {
      type: [String, Boolean, Function],
      "default": true
    },
    lazy: {
      type: Boolean,
      "default": true
    },
    line: {
      type: [Boolean, Function],
      "default": false
    },
    load: {
      type: Function
    },
    operations: {
      type: Function
    },
    transition: {
      type: Boolean,
      "default": true
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    valueMode: {
      type: String,
      "default": "onlyLeaf",
      validator: function validator(val) {
        if (!val) return true;
        return ["onlyLeaf", "parentFirst", "all"].includes(val);
      }
    },
    onActive: Function,
    onChange: Function,
    onClick: Function,
    onExpand: Function,
    onLoad: Function
  };

  var useCLASSNAMES = function useCLASSNAMES() {
    var classPrefix = usePrefixClass();
    return vue.computed(function () {
      var tree = "".concat(classPrefix.value, "-tree");
      return {
        icon: "".concat(classPrefix.value, "-icon"),
        folderIcon: "".concat(classPrefix.value, "-folder-icon"),
        actived: "".concat(classPrefix.value, "-is-active"),
        disabled: "".concat(classPrefix.value, "-is-disabled"),
        treeIconRight: "".concat(classPrefix.value, "-icon-arrow-right"),
        treeIconDown: "".concat(classPrefix.value, "-icon-arrow-down"),
        treeNodeToggle: "".concat(classPrefix.value, "-tree-toggle"),
        tree: tree,
        treeTransition: "".concat(tree, "--transition"),
        treeBlockNode: "".concat(tree, "--block-node"),
        treeEmpty: "".concat(tree, "__empty"),
        treeList: "".concat(tree, "__list"),
        treeNode: "".concat(tree, "__item"),
        treeNodeOpen: "".concat(tree, "__item--open"),
        treeHoverAble: "".concat(tree, "--hoverable"),
        treeCheckable: "".concat(tree, "--checkable"),
        treeLabel: "".concat(tree, "__label"),
        treeLabelStrictly: "".concat(tree, "__label--strictly"),
        treeIcon: "".concat(tree, "__icon"),
        treeIconDefault: "".concat(tree, "__icon--default"),
        treeSpace: "".concat(tree, "__space"),
        treeOperations: "".concat(tree, "__operations"),
        treeNodeVisible: "".concat(tree, "__item--visible"),
        treeNodeHidden: "".concat(tree, "__item--hidden"),
        treeNodeEnter: "".concat(tree, "__item--enter-active"),
        treeNodeLeave: "".concat(tree, "__item--leave-active"),
        line: "".concat(tree, "__line"),
        lineIsLeaf: "".concat(tree, "__line--leaf"),
        lineIsFirst: "".concat(tree, "__line--first")
      };
    });
  };

  function ownKeys$W(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$V(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$W(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$W(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function getParentsToRoot(element, root) {
    var list = [];
    var el = element;

    while (el && el.parentNode) {
      list.push(el);

      if (el === root) {
        break;
      }

      el = el.parentNode;
    }

    return list;
  }
  function getParentMarks(name, element, root) {
    var list = getParentsToRoot(element, root);
    return list.map(function (el) {
      var mark = {
        name: name,
        value: el.getAttribute(name) || "",
        el: el
      };
      return mark;
    }).filter(function (mark) {
      return mark.value;
    });
  }
  function getMark(name, element, root) {
    var list = getParentMarks(name, element, root);
    var info = list.pop() || null;
    return info;
  }
  function getTNode(prop) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var tnode = null;
    var item = null;

    var conf = _objectSpread$V({}, options);

    if (typeof prop === "function") {
      var _conf$node;

      item = prop(vue.h, (_conf$node = conf.node) === null || _conf$node === void 0 ? void 0 : _conf$node.getModel());
    } else if (typeof prop === "string") {
      item = prop;
    }

    if (typeof item === "string") {
      tnode = item;
    } else if (item) {
      tnode = item;
    }

    return tnode;
  }
  function isTreeNodeValue(item) {
    return typeof item === "string" || typeof item === "number";
  }
  function getNode(store, item) {
    var node = null;
    var val = null;

    if (typeof item === "string" || typeof item === "number") {
      val = item;
    } else if (item && isTreeNodeValue(item.value)) {
      val = item.value;
    }

    node = store.getNode(val);
    return node;
  }
  var getStoreConfig = function getStoreConfig(props) {
    var storeProps = pick_1(props, ["keys", "expandAll", "expandLevel", "expandMutex", "expandParent", "activable", "activeMultiple", "disabled", "checkable", "checkStrictly", "load", "lazy", "valueMode", "filter"]);
    return storeProps;
  };

  function ownKeys$V(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$U(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$V(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$V(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot$d(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var TreeItem = vue.defineComponent({
    name: "TTreeNode",
    props: {
      node: {
        type: Object
      },
      onClick: Function,
      onChange: Function
    },
    setup: function setup(props) {
      var treeScope = vue.inject(injectKey);
      var label = vue.ref();
      useRipple(label);
      var CLASS_NAMES = useCLASSNAMES();

      var _useConfig = useConfig("tree"),
          global = _useConfig.global;

      var handleClick = function handleClick(evt) {
        var _props$onClick;

        var node = props.node;
        var state = {
          mouseEvent: evt,
          event: evt,
          node: node,
          path: node.getPath()
        };
        (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, state);
      };

      var handleChange = function handleChange() {
        var _props$onChange;

        var node = props.node;
        var event = new Event("change");
        var state = {
          event: event,
          node: node
        };
        (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, state);
      };

      var itemStyles = vue.computed(function () {
        var level = props.node.level;
        var styles = "--level: ".concat(level, ";");
        return styles;
      });
      var itemClassList = vue.computed(function () {
        var _list$push;

        var node = props.node;
        var list = [];
        list.push(CLASS_NAMES.value.treeNode);
        list.push((_list$push = {}, _defineProperty$3(_list$push, CLASS_NAMES.value.treeNodeOpen, node.expanded), _defineProperty$3(_list$push, CLASS_NAMES.value.actived, node.isActivable() ? node.actived : false), _defineProperty$3(_list$push, CLASS_NAMES.value.disabled, node.isDisabled()), _list$push));
        return list;
      });

      var renderLine = function renderLine() {
        var node = props.node;
        var _treeScope$value = treeScope.value,
            line = _treeScope$value.line,
            scopedSlots = _treeScope$value.scopedSlots;
        var iconVisible = !!treeScope.value.icon;
        var lineNode = null;

        if (line === true) {
          if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.line) {
            lineNode = scopedSlots.line({
              node: node === null || node === void 0 ? void 0 : node.getModel()
            });
          } else if (node.parent && node.tree) {
            var vmIsLeaf = node.vmIsLeaf,
                vmIsFirst = node.vmIsFirst,
                level = node.level;
            var lineClasses = [];
            lineClasses.push(CLASS_NAMES.value.line);

            if (vmIsLeaf || !iconVisible) {
              lineClasses.push(CLASS_NAMES.value.lineIsLeaf);
            }

            if (vmIsFirst && iconVisible) {
              lineClasses.push(CLASS_NAMES.value.lineIsFirst);
            }

            var shadowStyles = [];
            var parents = node.getParents();
            parents.pop();
            parents.forEach(function (pNode, index) {
              if (!pNode.vmIsLast) {
                shadowStyles.push("calc(-".concat(index + 1, " * var(--space)) 0 var(--color)"));
              }
            });
            var styles = {
              "--level": level,
              "box-shadow": shadowStyles.join(",")
            };
            lineNode = vue.createVNode("span", {
              "class": lineClasses,
              "style": styles
            }, null);
          }
        } else {
          lineNode = getTNode(line, {
            node: node
          });
        }

        return lineNode;
      };

      var renderIcon = function renderIcon() {
        var getFolderIcon = function getFolderIcon() {
          if (isFunction_1(global.value.folderIcon)) {
            return global.value.folderIcon(vue.h);
          }

          return vue.createVNode(caretRightSmall, null, null);
        };

        var node = props.node;
        var _treeScope$value2 = treeScope.value,
            icon = _treeScope$value2.icon,
            scopedSlots = _treeScope$value2.scopedSlots;
        var isDefaultIcon = false;
        var iconNode = null;

        if (icon === true) {
          if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.icon) {
            iconNode = scopedSlots.icon({
              node: node === null || node === void 0 ? void 0 : node.getModel()
            });
          } else if (!node.vmIsLeaf) {
            isDefaultIcon = true;
            iconNode = getFolderIcon();

            if (node.loading && node.expanded) {
              iconNode = vue.createVNode(Loading, null, null);
            }
          } else {
            iconNode = "";
          }
        } else {
          iconNode = getTNode(icon, {
            node: node
          });
        }

        iconNode = vue.createVNode("span", {
          "class": [CLASS_NAMES.value.treeIcon, CLASS_NAMES.value.folderIcon, isDefaultIcon ? CLASS_NAMES.value.treeIconDefault : ""],
          "trigger": "expand",
          "ignore": "active"
        }, [iconNode]);
        return iconNode;
      };

      var renderLabel = function renderLabel() {
        var node = props.node;
        var _treeScope$value3 = treeScope.value,
            label2 = _treeScope$value3.label,
            scopedSlots = _treeScope$value3.scopedSlots,
            disableCheck = _treeScope$value3.disableCheck;
        var checkProps = treeScope.value.checkProps || {};
        var labelNode = null;

        if (label2 === true) {
          if (scopedSlots.label) {
            labelNode = scopedSlots.label({
              node: node.getModel()
            });
          } else {
            labelNode = node.label || "";
          }
        } else {
          labelNode = getTNode(label2, {
            node: node
          });
        }

        var labelClasses = [CLASS_NAMES.value.treeLabel, CLASS_NAMES.value.treeLabelStrictly, _defineProperty$3({}, CLASS_NAMES.value.actived, node.isActivable() ? node.actived : false)];

        if (node.vmCheckable) {
          var checkboxDisabled = false;

          if (typeof disableCheck === "function") {
            checkboxDisabled = disableCheck(node);
          } else {
            checkboxDisabled = !!disableCheck;
          }

          if (node.isDisabled()) {
            checkboxDisabled = true;
          }

          var itemCheckProps = _objectSpread$U(_objectSpread$U({}, checkProps), {}, {
            disabled: checkboxDisabled
          });

          var _labelNode = function () {
            return labelNode;
          }();

          labelNode = vue.createVNode(Checkbox, vue.mergeProps({
            "class": labelClasses,
            "checked": node.checked,
            "indeterminate": node.indeterminate,
            "disabled": node.isDisabled(),
            "name": node.value,
            "onChange": function onChange() {
              return handleChange();
            },
            "ignore": "expand,active",
            "needRipple": true
          }, itemCheckProps), _isSlot$d(labelNode) ? labelNode : {
            "default": function _default() {
              return [_labelNode];
            }
          });
        } else {
          var inner = vue.createVNode("span", {
            "style": "position: relative"
          }, [labelNode]);

          labelNode = node.isActivable() ? vue.createVNode("span", {
            "key": "1",
            "ref": "label",
            "class": labelClasses
          }, [inner]) : vue.createVNode("span", {
            "key": "2",
            "class": labelClasses
          }, [inner]);
        }

        return labelNode;
      };

      var renderOperations = function renderOperations() {
        var node = props.node;
        var _treeScope$value4 = treeScope.value,
            operations = _treeScope$value4.operations,
            scopedSlots = _treeScope$value4.scopedSlots;
        var opNode = null;

        if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.operations) {
          opNode = scopedSlots.operations({
            node: node === null || node === void 0 ? void 0 : node.getModel()
          });
        } else {
          opNode = getTNode(operations, {
            node: node
          });
        }

        if (opNode) {

          opNode = vue.createVNode("span", {
            "class": CLASS_NAMES.value.treeOperations,
            "ignore": "active,expand"
          }, [opNode]);
        }

        return opNode;
      };

      return function () {
        var node = props.node;
        return vue.createVNode("div", {
          "class": itemClassList.value,
          "data-value": node.value,
          "data-level": node.level,
          "style": itemStyles.value,
          "onClick": function onClick(evt) {
            return handleClick(evt);
          }
        }, [renderLine(), renderIcon(), renderLabel(), renderOperations()]);
      };
    }
  });

  function ownKeys$U(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$T(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$U(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$U(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useTree(props, statusContext) {
    var treeStore = vue.ref();
    var cacheMap = /* @__PURE__ */new Map();
    var treeNodeViews = vue.ref([]);

    var _toRefs = vue.toRefs(props),
        expanded = _toRefs.expanded,
        actived = _toRefs.actived,
        value = _toRefs.value,
        modelValue = _toRefs.modelValue;

    var _useVModel = useVModel(value, modelValue, props.defaultValue, props.onChange),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerChecked = _useVModel2[0],
        setInnerChecked = _useVModel2[1];

    var _useDefaultValue = useDefaultValue(actived, props.defaultActived, props.onActive, "actived"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        innerActived = _useDefaultValue2[0],
        setInnerActived = _useDefaultValue2[1];

    var _useDefaultValue3 = useDefaultValue(expanded, props.defaultExpanded, props.onExpand, "expanded"),
        _useDefaultValue4 = _slicedToArray(_useDefaultValue3, 2),
        innerExpanded = _useDefaultValue4[0],
        setInnerExpanded = _useDefaultValue4[1];

    var handleLoad = function handleLoad(info) {
      var _props$onLoad;

      var node = info.node;
      var ctx = {
        node: node.getModel()
      };

      if (innerChecked.value && innerChecked.value.length > 0) {
        treeStore.value.replaceChecked(innerChecked.value);
      }

      if (innerExpanded.value && innerExpanded.value.length > 0) {
        treeStore.value.replaceExpanded(innerExpanded.value);
      }

      if (innerActived.value && innerActived.value.length > 0) {
        treeStore.value.replaceActived(innerActived.value);
      }

      (_props$onLoad = props.onLoad) === null || _props$onLoad === void 0 ? void 0 : _props$onLoad.call(props, ctx);
    };

    var handleClick = function handleClick(state) {
      var _props$onClick;

      var expandOnClickNode = props.expandOnClickNode;
      var mouseEvent = state.mouseEvent,
          event = state.event,
          node = state.node;

      if (!node || props.disabled || node.disabled) {
        return;
      }

      var shouldExpand = expandOnClickNode;
      var shouldActive = true;
      ["trigger", "ignore"].forEach(function (markName) {
        var mark = getMark(markName, event.target, event.currentTarget);
        var markValue = (mark === null || mark === void 0 ? void 0 : mark.value) || "";

        if (markValue.indexOf("expand") >= 0) {
          if (markName === "trigger") {
            shouldExpand = true;
          } else if (markName === "ignore") {
            shouldExpand = false;
          }
        }

        if (markValue.indexOf("active") >= 0) {
          if (markName === "ignore") {
            shouldActive = false;
          }
        }
      });
      var ctx = {
        node: node.getModel(),
        e: mouseEvent
      };

      if (shouldExpand) {
        var tnode = getNode(treeStore.value, node);
        var expanded2 = node.setExpanded(!tnode.isExpanded());
        setInnerExpanded(expanded2, ctx);
      }

      if (shouldActive) {
        var _tnode = getNode(treeStore.value, node);

        var actived2 = node.setActived(!_tnode.isActived());
        setInnerActived(actived2, ctx);
      }

      (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, ctx);
    };

    var handleChange = function handleChange(state) {
      var disabled = props.disabled;
      var node = state.node,
          mouseEvent = state.mouseEvent;

      if (!node || disabled || node.disabled) {
        return;
      }

      var tnode = getNode(treeStore.value, node);
      var checked = node.setChecked(!tnode.isChecked());
      setInnerChecked(checked, {
        node: node.getModel(),
        e: mouseEvent
      });
    };

    var renderTreeNodeViews = function renderTreeNodeViews() {
      var nodes = treeStore.value.getNodes();
      treeNodeViews.value = nodes.filter(function (node) {
        return node.visible;
      }).map(function (node) {
        var nodeView = cacheMap.get(node.value);

        if (!nodeView) {
          nodeView = vue.createVNode(TreeItem, {
            "key": node.value,
            "node": node,
            "onChange": handleChange,
            "onClick": handleClick
          }, null);
          cacheMap.set(node.value, nodeView);
        }

        return nodeView;
      });
      vue.nextTick(function () {
        cacheMap.forEach(function (view, value2) {
          if (!treeStore.value.getNode(value2)) {
            cacheMap["delete"](value2);
          }
        });
      });
    };

    var updateExpanded = function updateExpanded() {
      var expandParent = props.expandParent;

      if (Array.isArray(innerExpanded.value)) {
        var expandedMap = /* @__PURE__ */new Map();
        innerExpanded.value.forEach(function (val) {
          expandedMap.set(val, true);

          if (expandParent) {
            var node = treeStore.value.getNode(val);
            node.getParents().forEach(function (tn) {
              expandedMap.set(tn.value, true);
            });
          }
        });
        var expandedArr = Array.from(expandedMap.keys());
        treeStore.value.setExpanded(expandedArr);
      }
    };

    var init = function init() {
      var options = props.data;
      var store = new TreeStore(_objectSpread$T(_objectSpread$T({}, getStoreConfig(props)), {}, {
        onLoad: function onLoad(info) {
          handleLoad(info);
        },
        onUpdate: function onUpdate() {
          renderTreeNodeViews();
        }
      }));
      treeStore.value = store;

      if (!Array.isArray(options)) {
        options = [];
      }

      store.append(options);
      store.refreshNodes();

      if (Array.isArray(innerChecked.value)) {
        store.setChecked(innerChecked.value);
      }

      updateExpanded();

      if (Array.isArray(innerActived.value)) {
        store.setActived(innerActived.value);
      }

      renderTreeNodeViews();
    };

    vue.watch(function () {
      return props.data;
    }, function (list) {
      cacheMap.clear();
      treeStore.value.reload(list);
      if (!list.length) return;

      if (Array.isArray(innerChecked.value)) {
        treeStore.value.setChecked(innerChecked.value);
      }

      updateExpanded();

      if (Array.isArray(innerActived.value)) {
        treeStore.value.setActived(innerActived.value);
      }

      treeStore.value.refreshState();
    });
    vue.watch(function () {
      return getStoreConfig(props);
    }, function () {
      if (!treeStore.value) return;
      treeStore.value.setConfig(getStoreConfig(props));
    });
    vue.watch(innerChecked, function (nVal) {
      treeStore.value.replaceChecked(nVal);
    });
    vue.watch(innerExpanded, function (nVal) {
      treeStore.value.replaceExpanded(nVal);
    });
    vue.watch(innerActived, function (nVal) {
      treeStore.value.replaceActived(nVal);
    });
    init();
    return {
      treeStore: treeStore,
      treeNodeViews: treeNodeViews
    };
  }

  function useExposeFunc(treeStore, expose) {
    var setItem = function setItem(value, options) {
      var node = treeStore.value.getNode(value);
      var spec = options;
      var keys = Object.keys(spec);

      if (node && spec) {
        ["expanded", "actived", "checked"].forEach(function (name) {
          if (keys.includes(name)) ;
        });
        node.set(spec);
      }
    };

    var getItem = function getItem(value) {
      var node = treeStore.value.getNode(value);
      return node === null || node === void 0 ? void 0 : node.getModel();
    };

    var getItems = function getItems(value) {
      var nodes = treeStore.value.getNodes(value);
      return nodes.map(function (node) {
        return node.getModel();
      });
    };

    var appendTo = function appendTo(para, item) {
      var list = [];

      if (Array.isArray(item)) {
        list = item;
      } else {
        list = [item];
      }

      list.forEach(function (item2) {
        var val = (item2 === null || item2 === void 0 ? void 0 : item2.value) || "";
        var node = getNode(treeStore.value, val);

        if (node) {
          treeStore.value.appendNodes(para, node);
        } else {
          treeStore.value.appendNodes(para, item2);
        }
      });
    };

    var insertBefore = function insertBefore(value, item) {
      var val = (item === null || item === void 0 ? void 0 : item.value) || "";
      var node = getNode(treeStore.value, val);

      if (node) {
        treeStore.value.insertBefore(value, node);
      } else {
        treeStore.value.insertBefore(value, item);
      }
    };

    var insertAfter = function insertAfter(value, item) {
      var val = (item === null || item === void 0 ? void 0 : item.value) || "";
      var node = getNode(treeStore.value, val);

      if (node) {
        treeStore.value.insertAfter(value, node);
      } else {
        treeStore.value.insertAfter(value, item);
      }
    };

    var remove = function remove(value) {
      return treeStore.value.remove(value);
    };

    var getIndex = function getIndex(value) {
      return treeStore.value.getNodeIndex(value);
    };

    var getParent = function getParent(value) {
      var node = treeStore.value.getParent(value);
      return node === null || node === void 0 ? void 0 : node.getModel();
    };

    var getParents = function getParents(value) {
      var nodes = treeStore.value.getParents(value);
      return nodes.map(function (node) {
        return node.getModel();
      });
    };

    var getPath = function getPath(value) {
      var node = treeStore.value.getNode(value);
      var pathNodes = [];

      if (node) {
        pathNodes = node.getPath().map(function (node2) {
          return node2.getModel();
        });
      }

      return pathNodes;
    };

    expose({
      setItem: setItem,
      getItem: getItem,
      getItems: getItems,
      appendTo: appendTo,
      insertBefore: insertBefore,
      insertAfter: insertAfter,
      remove: remove,
      getIndex: getIndex,
      getParent: getParent,
      getParents: getParents,
      getPath: getPath
    });
  }

  var injectKey = Symbol("treeProvider");
  var _TdTree = vue.defineComponent({
    name: "TTree",
    props: props$l,
    setup: function setup(props2, _ref) {
      var expose = _ref.expose,
          slots = _ref.slots;

      var _useConfig = useConfig("tree"),
          global = _useConfig.global,
          t = _useConfig.t;

      var CLASS_NAMES = useCLASSNAMES();
      var renderTNodeJSX = useTNodeDefault();
      var statusContext = vue.computed(function () {
        var checkProps = props2.checkProps,
            empty = props2.empty,
            icon = props2.icon,
            label = props2.label,
            line = props2.line,
            disableCheck = props2.disableCheck,
            operations = props2.operations;
        return {
          checkProps: checkProps,
          empty: empty,
          icon: icon,
          label: label,
          line: line,
          disableCheck: disableCheck,
          operations: operations,
          scopedSlots: slots
        };
      });
      vue.provide(injectKey, statusContext);

      var _useTree = useTree(props2),
          treeStore = _useTree.treeStore,
          treeNodeViews = _useTree.treeNodeViews;

      useExposeFunc(treeStore, expose);
      var classList = vue.computed(function () {
        var _ref2;

        return [CLASS_NAMES.value.tree, (_ref2 = {}, _defineProperty$3(_ref2, CLASS_NAMES.value.disabled, props2.disabled), _defineProperty$3(_ref2, CLASS_NAMES.value.treeHoverAble, props2.hover), _defineProperty$3(_ref2, CLASS_NAMES.value.treeCheckable, props2.checkable), _defineProperty$3(_ref2, CLASS_NAMES.value.treeTransition, props2.transition), _defineProperty$3(_ref2, CLASS_NAMES.value.treeBlockNode, props2.expandOnClickNode), _ref2)];
      });
      return function () {
        return vue.createVNode("div", {
          "class": classList.value
        }, [treeNodeViews.value.length === 0 ? vue.createVNode("div", {
          "class": CLASS_NAMES.value.treeEmpty
        }, [renderTNodeJSX("empty", {
          defaultNode: t(global.value.empty)
        })]) : vue.createVNode(vue.TransitionGroup, {
          "name": CLASS_NAMES.value.treeNodeToggle,
          "tag": "div",
          "enter-active-class": CLASS_NAMES.value.treeNodeEnter,
          "leave-active-class": CLASS_NAMES.value.treeNodeLeave
        }, {
          "default": function _default() {
            return [treeNodeViews.value];
          }
        })]);
      };
    }
  });

  var Tree = withInstall(_TdTree);

  var props$k = {
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    data: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    disabled: Boolean,
    empty: {
      type: [String, Function],
      "default": ""
    },
    filter: {
      type: Function
    },
    filterable: Boolean,
    loading: Boolean,
    loadingText: {
      type: [String, Function],
      "default": ""
    },
    max: {
      type: Number,
      "default": 0
    },
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    multiple: Boolean,
    placeholder: {
      type: String,
      "default": ""
    },
    popupProps: {
      type: Object
    },
    prefixIcon: {
      type: Function
    },
    showCheckAlll: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    treeProps: {
      type: Object
    },
    value: {
      type: [String, Number, Object, Array]
    },
    modelValue: {
      type: [String, Number, Object, Array]
    },
    defaultValue: {
      type: [String, Number, Object, Array]
    },
    valueDisplay: {
      type: Function
    },
    valueType: {
      type: String,
      "default": "value",
      validator: function validator(val) {
        return ["value", "object"].includes(val);
      }
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onFocus: Function,
    onRemove: Function,
    onSearch: Function
  };

  function ownKeys$T(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$S(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$T(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$T(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _TreeSelect = vue.defineComponent({
    name: "TTreeSelect",
    props: props$k,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var renderTNodeJSX = useTNodeJSX();
      var classPrefix = usePrefixClass();

      var _useConfig = useConfig("treeSelect"),
          global = _useConfig.global;

      var treeRef = vue.ref(null);
      var selectInputRef = vue.ref(null);
      var formDisabled = useFormDisabled();
      var visible = vue.ref(false);
      var isHover = vue.ref(false);
      var defaultProps = vue.reactive({
        trigger: "click",
        placement: "bottom-left",
        overlayClassName: "",
        overlayStyle: function overlayStyle(trigger) {
          return {
            width: "".concat(trigger.offsetWidth, "px")
          };
        }
      });
      var filterByText = vue.ref(null);
      var actived = vue.ref([]);
      var expanded = vue.ref([]);
      var nodeInfo = vue.ref(null);
      var treeKey = vue.ref(0);

      var _toRefs = vue.toRefs(props2),
          value = _toRefs.value,
          modelValue = _toRefs.modelValue;

      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          treeSelectValue = _useVModel2[0],
          setTreeSelectValue = _useVModel2[1];

      vue.watch(function () {
        return treeSelectValue.value;
      }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return changeNodeInfo();

              case 2:
                if (!props2.multiple) {
                  actived.value = nodeInfo.value ? [nodeInfo.value.value] : [];
                }

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      })));
      vue.watch(function () {
        return props2.data;
      }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return changeNodeInfo();

              case 2:
                treeRerender();

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      })));
      var tDisabled = vue.computed(function () {
        return formDisabled.value || props2.disabled;
      });
      var inputPlaceholder = vue.computed(function () {
        return props2.placeholder || global.value.placeholder;
      });
      var popupClass = vue.computed(function () {
        return "".concat(popupObject.value.overlayClassName, " ").concat(classPrefix.value, "-select__dropdown-inner ").concat(classPrefix.value, "-select__dropdown narrow-scrollbar");
      });
      var isObjectValue = vue.computed(function () {
        return props2.valueType === "object";
      });
      var checked = vue.computed(function () {
        if (props2.multiple) {
          if (isObjectValue.value) {
            return isArray_1(treeSelectValue.value) ? treeSelectValue.value.map(function (item) {
              return item.value;
            }) : [];
          }

          return isArray_1(treeSelectValue.value) ? treeSelectValue.value.map(function (item) {
            return item;
          }) : [];
        }

        return [];
      });
      var showLoading = vue.computed(function () {
        return props2.loading && !tDisabled.value;
      });
      var showFilter = vue.computed(function () {
        return props2.filterable || isFunction_1(props2.filter);
      });
      var showTree = vue.computed(function () {
        return !props2.loading;
      });
      var popupObject = vue.computed(function () {
        return props2.popupProps ? _objectSpread$S(_objectSpread$S({}, defaultProps), props2.popupProps) : defaultProps;
      });
      var selectedMultiple = vue.computed(function () {
        if (props2.multiple && isArray_1(treeSelectValue.value) && !isEmpty_1(treeSelectValue.value)) {
          return treeSelectValue.value;
        }

        return [];
      });
      var multiLimitDisabled = vue.computed(function () {
        return props2.multiple && !!props2.max && isArray_1(treeSelectValue.value) && props2.max <= treeSelectValue.value.length;
      });
      var loadingTextSlot = vue.computed(function () {
        var useLocale = !props2.loadingText && !slots.loadingText;
        return useLocale ? vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-select__empty")
        }, [global.value.loadingText]) : renderTNodeJSX("loadingText");
      });
      var emptySlot = vue.computed(function () {
        var useLocale = !props2.empty && !slots.empty;
        return useLocale ? vue.createVNode("div", {
          "class": "".concat(classPrefix.value, "-select__empty")
        }, [global.value.empty]) : renderTNodeJSX("empty");
      });
      var prefixIconSlot = vue.computed(function () {
        return renderTNodeJSX("prefixIcon");
      });
      var collapsedItemsSlots = vue.computed(function () {
        if (!props2.multiple) {
          return null;
        }

        var notUseLocale = props2.collapsedItems || slots.collapsedItems || props2.minCollapsedNum <= 0 || selectedMultiple.value.length <= props2.minCollapsedNum;
        return notUseLocale ? renderTNodeJSX("collapsedItems", {
          params: {
            count: selectedMultiple.value.length - props2.minCollapsedNum,
            value: selectedMultiple.value,
            collapsedSelectedItems: selectedMultiple.value.slice(props2.minCollapsedNum)
          }
        }) : null;
      });
      var valueDisplaySlot = vue.computed(function () {
        var notUseLocale = props2.valueDisplay || slots.valueDisplay;
        var notUseSingleLocale = !props2.multiple && treeSelectValue.value !== "" && notUseLocale;
        var notUseMultipleLocale = props2.multiple && !isEmpty_1(treeSelectValue.value) && notUseLocale;

        if (notUseSingleLocale) {
          var _ref4;

          return renderTNodeJSX("valueDisplay", {
            params: {
              value: nodeInfo.value || (_ref4 = {}, _defineProperty$3(_ref4, realLabel.value, ""), _defineProperty$3(_ref4, realValue.value, void 0), _ref4)
            }
          });
        }

        if (notUseMultipleLocale) {
          return renderTNodeJSX("valueDisplay", {
            params: {
              value: nodeInfo.value,
              onClose: function onClose(value2, context) {
                tagChange(value2, context);
              }
            }
          });
        }

        return null;
      });
      var realLabel = vue.computed(function () {
        if (!isEmpty_1(props2.treeProps) && !isEmpty_1(props2.treeProps.keys)) {
          return props2.treeProps.keys.label || "label";
        }

        return "label";
      });
      var realValue = vue.computed(function () {
        if (!isEmpty_1(props2.treeProps) && !isEmpty_1(props2.treeProps.keys)) {
          return props2.treeProps.keys.value || "value";
        }

        return "value";
      });
      vue.onMounted( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
        return regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(!treeSelectValue.value && props2.defaultValue)) {
                  _context3.next = 3;
                  break;
                }

                _context3.next = 3;
                return change(props2.defaultValue, null);

              case 3:
                if (isObjectValue.value) {
                  actived.value = isArray_1(treeSelectValue.value) ? treeSelectValue.value.map(function (item) {
                    return item.value;
                  }) : [treeSelectValue.value.value];
                } else {
                  actived.value = isArray_1(treeSelectValue.value) ? treeSelectValue.value : [treeSelectValue.value];
                }

                changeNodeInfo();

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      })));

      var popupVisibleChange = function popupVisibleChange(state) {
        visible.value = state;
      };

      var change = function change(valueParam, node) {
        var _props2$onChange;

        setTreeSelectValue(valueParam, {
          node: node
        });
        changeNodeInfo();
        (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 ? void 0 : _props2$onChange.call(props2, valueParam, {
          node: node
        });
      };

      var clear = function clear(content) {
        var _props2$onClear;

        var defaultValue = props2.multiple ? [] : "";
        actived.value = [];
        change(defaultValue, null);
        (_props2$onClear = props2.onClear) === null || _props2$onClear === void 0 ? void 0 : _props2$onClear.call(props2, {
          e: content.e
        });
      };

      var focus = function focus(value2, context) {
        var _props2$onFocus;

        (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 ? void 0 : _props2$onFocus.call(props2, {
          value: value2,
          e: context.e
        });
      };

      var blur = function blur(value2, context) {
        var _props2$onBlur;

        (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 ? void 0 : _props2$onBlur.call(props2, {
          value: value2,
          e: context.e
        });
      };

      var remove = function remove(options) {
        var _props2$onRemove;

        (_props2$onRemove = props2.onRemove) === null || _props2$onRemove === void 0 ? void 0 : _props2$onRemove.call(props2, options);
      };

      var search = function search(filterWordsParam) {
        var _props2$onSearch;

        (_props2$onSearch = props2.onSearch) === null || _props2$onSearch === void 0 ? void 0 : _props2$onSearch.call(props2, filterWordsParam);
      };

      var treeNodeChange = function treeNodeChange(valueParam, context) {
        var current = valueParam;

        if (isObjectValue.value) {
          current = valueParam.map(function (nodeValue) {
            return getTreeNode(props2.data, nodeValue);
          });
        }

        change(current, context.node);
      };

      var treeNodeActive = function treeNodeActive(valueParam, context) {
        visible.value = false;

        if (props2.multiple) {
          return;
        }

        if (treeSelectValue.value === context.node.data[realValue.value]) {
          return;
        }

        var current = valueParam;

        if (isObjectValue.value) {
          var nodeValue = isEmpty_1(valueParam) ? "" : valueParam[0];
          current = getTreeNode(props2.data, nodeValue);
        } else {
          current = isEmpty_1(valueParam) ? "" : valueParam[0];
        }

        change(current, context.node);
        actived.value = valueParam;
      };

      var treeNodeExpand = function treeNodeExpand(valueParam) {
        expanded.value = valueParam;
      };

      var inputChange = function inputChange(value2) {
        if (!value2) {
          filterByText.value = null;
          return null;
        }

        filterByText.value = function (node) {
          if (isFunction_1(props2.filter)) {
            var filter = props2.filter(String(value2), node);

            if (isBoolean_1(filter)) {
              return filter;
            }
          }

          return node.data[realLabel.value].indexOf(value2) >= 0;
        };

        search(String(value2));
      };

      var tagChange = function tagChange(value2, context) {
        var trigger = context.trigger,
            index = context.index;

        if (["tag-remove", "backspace"].includes(trigger)) {
          isArray_1(treeSelectValue.value) && treeSelectValue.value.splice(index, 1);
        }

        remove({
          value: value2,
          data: null,
          e: context && context.e
        });
        change(treeSelectValue.value, null);
      };

      var changeNodeInfo = /*#__PURE__*/function () {
        var _ref6 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4() {
          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return treeSelectValue.value;

                case 2:
                  if (!props2.multiple) {
                    if (treeSelectValue.value || treeSelectValue.value === 0) {
                      nodeInfo.value = getSingleNodeInfo();
                    } else {
                      nodeInfo.value = "";
                    }
                  } else if (props2.multiple) {
                    if (isArray_1(treeSelectValue.value)) {
                      nodeInfo.value = getMultipleNodeInfo();
                    } else {
                      nodeInfo.value = [];
                    }
                  } else {
                    nodeInfo.value = null;
                  }

                case 3:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        }));

        return function changeNodeInfo() {
          return _ref6.apply(this, arguments);
        };
      }();

      var getSingleNodeInfo = function getSingleNodeInfo() {
        var _props2$treeProps;

        var nodeValue = isObjectValue.value ? treeSelectValue.value.value : treeSelectValue.value;

        if (treeRef.value && (_props2$treeProps = props2.treeProps) !== null && _props2$treeProps !== void 0 && _props2$treeProps.load) {
          if (!isEmpty_1(props2.data)) {
            var node2 = treeRef.value.getItem(nodeValue);
            if (!node2) return;
            return {
              label: node2.data[realLabel.value],
              value: node2.data[realValue.value]
            };
          }

          return {
            label: nodeValue,
            value: nodeValue
          };
        }

        var node = getTreeNode(props2.data, nodeValue);

        if (!node) {
          return {
            label: nodeValue,
            value: nodeValue
          };
        }

        return node;
      };

      var getMultipleNodeInfo = function getMultipleNodeInfo() {
        return treeSelectValue.value.map(function (value2) {
          var _props2$treeProps2;

          var nodeValue = isObjectValue.value ? value2.value : value2;

          if (treeRef.value && (_props2$treeProps2 = props2.treeProps) !== null && _props2$treeProps2 !== void 0 && _props2$treeProps2.load) {
            if (!isEmpty_1(props2.data)) {
              var node2 = treeRef.value.getItem(nodeValue);
              if (!node2) return;
              return {
                label: node2.data[realLabel.value],
                value: node2.data[realValue.value]
              };
            }

            return {
              label: nodeValue,
              value: nodeValue
            };
          }

          var node = getTreeNode(props2.data, nodeValue);

          if (!node) {
            return {
              label: nodeValue,
              value: nodeValue
            };
          }

          return node;
        });
      };

      var getTreeNode = function getTreeNode(data, targetValue) {
        for (var i = 0, len = data.length; i < len; i++) {
          var _data$i;

          if (data[i][realValue.value] === targetValue) {
            return {
              label: data[i][realLabel.value],
              value: data[i][realValue.value]
            };
          }

          if ((_data$i = data[i]) !== null && _data$i !== void 0 && _data$i.children) {
            var _data$i2;

            var result = getTreeNode((_data$i2 = data[i]) === null || _data$i2 === void 0 ? void 0 : _data$i2.children, targetValue);

            if (!isNil_1(result)) {
              return result;
            }
          }
        }

        return null;
      };

      var treeRerender = function treeRerender() {
        treeKey.value += 1;
      };

      var treeSlots = {
        empty: function empty() {
          return vue.createVNode("span", null, [emptySlot.value]);
        }
      };

      var treeItem = function treeItem() {
        return vue.withDirectives(vue.createVNode(Tree, vue.mergeProps({
          "ref": treeRef,
          "key": treeKey.value,
          "value": _toConsumableArray(checked.value),
          "hover": true,
          "data": props2.data,
          "activable": !props2.multiple,
          "checkable": props2.multiple,
          "disabled": tDisabled.value || multiLimitDisabled.value,
          "empty": props2.empty,
          "size": props2.size,
          "filter": filterByText.value,
          "icon": !filterByText.value,
          "actived": actived.value,
          "expanded": expanded.value,
          "activeMultiple": props2.multiple,
          "onChange": treeNodeChange,
          "onActive": treeNodeActive,
          "onExpand": treeNodeExpand,
          "expandOnClickNode": true
        }, props2.treeProps), treeSlots), [[vue.vShow, showTree.value]]);
      };

      var SelectInputSlots = {
        panel: function panel() {
          return vue.createVNode("div", null, [vue.withDirectives(vue.createVNode("p", {
            "class": "".concat(classPrefix.value, "-select-loading-tips ").concat(classPrefix.value, "-select__right-icon-polyfill")
          }, [loadingTextSlot.value]), [[vue.vShow, showLoading.value]]), treeItem()]);
        },
        suffixIcon: function suffixIcon() {
          var _ref7;

          return vue.createVNode(FakeArrow, {
            "isActive": visible.value,
            "disabled": props2.disabled,
            "overlayClassName": (_ref7 = {}, _defineProperty$3(_ref7, "".concat(classPrefix.value, "-fake-arrow--highlight"), visible.value), _defineProperty$3(_ref7, "".concat(classPrefix.value, "-fake-arrow--disable"), props2.disabled), _ref7)
          }, null);
        }
      };

      if (prefixIconSlot.value) {
        SelectInputSlots.prefixIcon = function () {
          return vue.createVNode(vue.Fragment, null, [prefixIconSlot.value]);
        };
      }

      if (collapsedItemsSlots.value) {
        SelectInputSlots.collapsedItems = function () {
          return vue.createVNode(vue.Fragment, null, [collapsedItemsSlots.value]);
        };
      }

      if (valueDisplaySlot.value) {
        SelectInputSlots.valueDisplay = function () {
          return vue.createVNode(vue.Fragment, null, [valueDisplaySlot.value]);
        };
      }

      var popupProps = {
        placement: popupObject.value.placement,
        trigger: popupObject.value.trigger,
        overlayStyle: popupObject.value.overlayStyle,
        overlayClassName: popupClass.value,
        expandAnimation: true
      };
      var inputProps = {
        size: props2.size
      };
      var tagInputProps = {
        inputProps: {
          size: props2.size,
          onClear: clear
        }
      };
      var tagProps = {
        size: props2.size,
        closable: true,
        maxWidth: 300
      };
      return function () {
        return vue.createVNode(SelectInput, {
          "class": "".concat(classPrefix.value, "-tree-select"),
          "ref": selectInputRef,
          "value": nodeInfo.value,
          "multiple": props2.multiple,
          "loading": props2.loading,
          "disabled": tDisabled.value,
          "clearable": props2.clearable,
          "placeholder": inputPlaceholder.value,
          "allowInput": showFilter.value,
          "popupVisible": visible.value,
          "minCollapsedNum": props2.minCollapsedNum,
          "tagProps": tagProps,
          "popupProps": popupProps,
          "inputProps": inputProps,
          "tagInputProps": tagInputProps,
          "onClear": clear,
          "onBlur": blur,
          "onFocus": focus,
          "onInputChange": inputChange,
          "onTagChange": tagChange,
          "onPopupVisibleChange": popupVisibleChange,
          "onMouseenter": function onMouseenter() {
            return isHover.value = true;
          },
          "onMouseleave": function onMouseleave() {
            return isHover.value = false;
          }
        }, SelectInputSlots);
      };
    }
  });

  var TreeSelect = withInstall(_TreeSelect);

  var props$j = {
    closeBtn: {
      type: [String, Boolean, Function],
      "default": true
    },
    colorModes: {
      type: Array,
      "default": ["monochrome", "linear-gradient"]
    },
    disabled: Boolean,
    enableAlpha: Boolean,
    format: {
      type: String,
      "default": "RGB",
      validator: function validator(val) {
        if (!val) return true;
        return ["RGB", "RGBA", "HSL", "HSLA", "HSB", "HSV", "HSVA", "HEX", "CMYK", "CSS"].includes(val);
      }
    },
    inputProps: {
      type: Object
    },
    multiple: Boolean,
    popupProps: {
      type: Object
    },
    recentColors: {
      type: Array,
      "default": void 0
    },
    defaultRecentColors: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    selectInputProps: {
      type: Object
    },
    swatchColors: {
      type: Array
    },
    value: {
      type: String,
      "default": void 0
    },
    modelValue: {
      type: String,
      "default": void 0
    },
    defaultValue: {
      type: String,
      "default": ""
    },
    onChange: Function,
    onPaletteBarChange: Function,
    onRecentColorsChange: Function
  };

  var TD_COLOR_USED_COLORS_MAX_SIZE = 100;
  var COLOR_MODES = {
    monochrome: "\u5355\u8272",
    "linear-gradient": "\u6E10\u53D8"
  };
  var DEFAULT_COLOR = "#001F97";
  var DEFAULT_LINEAR_GRADIENT = "linear-gradient(90deg, rgba(241,29,0,1) 0%, rgba(73,106,220,1) 100%);";
  var DEFAULT_SYSTEM_SWATCH_COLORS = ["#ECF2FE", "#D4E3FC", "#BBD3FB", "#96BBF8", "#699EF5", "#4787F0", "#266FE8", "#0052D9", "#0034B5", "#001F97", "#FDECEE", "#F9D7D9", "#F8B9BE", "#F78D94", "#F36D78", "#E34D59", "#C9353F", "#B11F26", "#951114", "#680506", "#FEF3E6", "#F9E0C7", "#F7C797", "#F2995F", "#ED7B2F", "#D35A21", "#BA431B", "#9E3610", "#842B0B", "#5A1907", "#E8F8F2", "#BCEBDC", "#85DBBE", "#48C79C", "#00A870", "#078D5C", "#067945", "#056334", "#044F2A", "#033017"];
  var SATURATION_PANEL_DEFAULT_WIDTH = 248;
  var SATURATION_PANEL_DEFAULT_HEIGHT = 140;
  var SLIDER_DEFAULT_WIDTH = 248;
  var GRADIENT_SLIDER_DEFAULT_WIDTH = 190;

  var FORMATS = ["HEX", "RGB", "HSL", "HSV", "CMYK", "CSS"];

  var BASE_COMPONENT_NAME = "color-picker";
  var useBaseClassName = function useBaseClassName(className) {
    var baseClassName = usePrefixClass(BASE_COMPONENT_NAME);
    return vue.computed(function () {
      return className ? "".concat(baseClassName.value, "-").concat(className) : baseClassName.value;
    });
  };

  function ownKeys$S(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$R(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$S(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$S(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot$c(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var PanelHeader = vue.defineComponent({
    name: "PanelHeader",
    components: {
      CloseIcon: close,
      TRadioGroup: RadioGroup,
      TRadioButton: RadioButton
    },
    props: _objectSpread$R(_objectSpread$R({}, props$j), {}, {
      mode: {
        type: String,
        "default": "color"
      },
      togglePopup: {
        type: Function
      },
      onModeChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    }),
    setup: function setup(props2) {
      var baseClassName = useBaseClassName();
      var modeValue = vue.ref(props2.mode);

      var handleClosePopup = function handleClosePopup() {
        var _props2$togglePopup;

        (_props2$togglePopup = props2.togglePopup) === null || _props2$togglePopup === void 0 ? void 0 : _props2$togglePopup.call(props2, false);
      };

      var handleModeChange = function handleModeChange(v) {
        return props2.onModeChange(v);
      };

      vue.watch(function () {
        return props2.mode;
      }, function (v) {
        return modeValue.value = v;
      });
      return {
        baseClassName: baseClassName,
        modeValue: modeValue,
        handleModeChange: handleModeChange,
        handleClosePopup: handleClosePopup
      };
    },
    render: function render() {
      var _slot;

      var _this$colorModes,
          _this = this;

      var baseClassName = this.baseClassName;
      return vue.createVNode("div", {
        "className": "".concat(baseClassName, "__head")
      }, [vue.createVNode("div", {
        "className": "".concat(baseClassName, "__mode")
      }, [((_this$colorModes = this.colorModes) === null || _this$colorModes === void 0 ? void 0 : _this$colorModes.length) === 1 ? COLOR_MODES[this.colorModes[0]] : vue.createVNode(vue.resolveComponent("t-radio-group"), {
        "variant": "default-filled",
        "size": "small",
        "modelValue": _this.modeValue,
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return _this.modeValue = $event;
        },
        "onChange": this.handleModeChange
      }, _isSlot$c(_slot = Object.keys(COLOR_MODES).map(function (key) {
        return vue.createVNode(vue.resolveComponent("t-radio-button"), {
          "key": key,
          "value": key
        }, {
          "default": function _default() {
            return [COLOR_MODES[key]];
          }
        });
      })) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      })]), this.closeBtn ? vue.createVNode("span", {
        "role": "button",
        "class": ["".concat(baseClassName, "__icon"), "".concat(baseClassName, "__close")],
        "onClick": this.handleClosePopup
      }, [vue.createVNode(vue.resolveComponent("close-icon"), null, null)]) : null]);
    }
  });

  var rgb2cmyk = function rgb2cmyk(red, green, blue) {
    var computedC = 0;
    var computedM = 0;
    var computedY = 0;
    var computedK = 0;
    var r = parseInt("".concat(red).replace(/\s/g, ""), 10);
    var g = parseInt("".concat(green).replace(/\s/g, ""), 10);
    var b = parseInt("".concat(blue).replace(/\s/g, ""), 10);

    if (r === 0 && g === 0 && b === 0) {
      computedK = 1;
      return [0, 0, 0, 1];
    }

    computedC = 1 - r / 255;
    computedM = 1 - g / 255;
    computedY = 1 - b / 255;
    var minCMY = Math.min(computedC, Math.min(computedM, computedY));
    computedC = (computedC - minCMY) / (1 - minCMY);
    computedM = (computedM - minCMY) / (1 - minCMY);
    computedY = (computedY - minCMY) / (1 - minCMY);
    computedK = minCMY;
    return [computedC, computedM, computedY, computedK];
  };
  var cmyk2rgb = function cmyk2rgb(cyan, magenta, yellow, black) {
    var c = cyan / 100;
    var m = magenta / 100;
    var y = yellow / 100;
    var k = black / 100;
    c = c * (1 - k) + k;
    m = m * (1 - k) + k;
    y = y * (1 - k) + k;
    var r = 1 - c;
    var g = 1 - m;
    var b = 1 - y;
    r = Math.round(255 * r);
    g = Math.round(255 * g);
    b = Math.round(255 * b);
    return {
      r: r,
      g: g,
      b: b
    };
  };
  var REG_CMYK_STRING = /cmyk\((\d+%?),(\d+%?),(\d+%?),(\d+%?)\)/;

  var toNumber = function toNumber(str) {
    return Math.max(0, Math.min(255, parseInt(str, 10)));
  };

  var cmykInputToColor = function cmykInputToColor(input) {
    if (/cmyk/i.test(input)) {
      var str = input.replace(/\s/g, "");
      var match = str.match(REG_CMYK_STRING);
      var c = toNumber(match[1]);
      var m = toNumber(match[2]);
      var y = toNumber(match[3]);
      var k = toNumber(match[4]);

      var _cmyk2rgb = cmyk2rgb(c, m, y, k),
          r = _cmyk2rgb.r,
          g = _cmyk2rgb.g,
          b = _cmyk2rgb.b;

      return "rgb(".concat(r, ", ").concat(g, ", ").concat(b, ")");
    }

    return input;
  };

  var tinycolor = {exports: {}};

  (function (module) {
    // TinyColor v1.4.2
    // https://github.com/bgrins/TinyColor
    // Brian Grinstead, MIT License
    (function (Math) {
      var trimLeft = /^\s+/,
          trimRight = /\s+$/,
          tinyCounter = 0,
          mathRound = Math.round,
          mathMin = Math.min,
          mathMax = Math.max,
          mathRandom = Math.random;

      function tinycolor(color, opts) {
        color = color ? color : '';
        opts = opts || {}; // If input is already a tinycolor, return itself

        if (color instanceof tinycolor) {
          return color;
        } // If we are called as a function, call using new instead


        if (!(this instanceof tinycolor)) {
          return new tinycolor(color, opts);
        }

        var rgb = inputToRGB(color);
        this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;
        this._gradientType = opts.gradientType; // Don't let the range of [0,255] come back in [0,1].
        // Potentially lose a little bit of precision here, but will fix issues where
        // .5 gets interpreted as half of the total, instead of half of 1
        // If it was supposed to be 128, this was already taken care of by `inputToRgb`

        if (this._r < 1) {
          this._r = mathRound(this._r);
        }

        if (this._g < 1) {
          this._g = mathRound(this._g);
        }

        if (this._b < 1) {
          this._b = mathRound(this._b);
        }

        this._ok = rgb.ok;
        this._tc_id = tinyCounter++;
      }

      tinycolor.prototype = {
        isDark: function isDark() {
          return this.getBrightness() < 128;
        },
        isLight: function isLight() {
          return !this.isDark();
        },
        isValid: function isValid() {
          return this._ok;
        },
        getOriginalInput: function getOriginalInput() {
          return this._originalInput;
        },
        getFormat: function getFormat() {
          return this._format;
        },
        getAlpha: function getAlpha() {
          return this._a;
        },
        getBrightness: function getBrightness() {
          //http://www.w3.org/TR/AERT#color-contrast
          var rgb = this.toRgb();
          return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
        },
        getLuminance: function getLuminance() {
          //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
          var rgb = this.toRgb();
          var RsRGB, GsRGB, BsRGB, R, G, B;
          RsRGB = rgb.r / 255;
          GsRGB = rgb.g / 255;
          BsRGB = rgb.b / 255;

          if (RsRGB <= 0.03928) {
            R = RsRGB / 12.92;
          } else {
            R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
          }

          if (GsRGB <= 0.03928) {
            G = GsRGB / 12.92;
          } else {
            G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
          }

          if (BsRGB <= 0.03928) {
            B = BsRGB / 12.92;
          } else {
            B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
          }

          return 0.2126 * R + 0.7152 * G + 0.0722 * B;
        },
        setAlpha: function setAlpha(value) {
          this._a = boundAlpha(value);
          this._roundA = mathRound(100 * this._a) / 100;
          return this;
        },
        toHsv: function toHsv() {
          var hsv = rgbToHsv(this._r, this._g, this._b);
          return {
            h: hsv.h * 360,
            s: hsv.s,
            v: hsv.v,
            a: this._a
          };
        },
        toHsvString: function toHsvString() {
          var hsv = rgbToHsv(this._r, this._g, this._b);
          var h = mathRound(hsv.h * 360),
              s = mathRound(hsv.s * 100),
              v = mathRound(hsv.v * 100);
          return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
        },
        toHsl: function toHsl() {
          var hsl = rgbToHsl(this._r, this._g, this._b);
          return {
            h: hsl.h * 360,
            s: hsl.s,
            l: hsl.l,
            a: this._a
          };
        },
        toHslString: function toHslString() {
          var hsl = rgbToHsl(this._r, this._g, this._b);
          var h = mathRound(hsl.h * 360),
              s = mathRound(hsl.s * 100),
              l = mathRound(hsl.l * 100);
          return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
        },
        toHex: function toHex(allow3Char) {
          return rgbToHex(this._r, this._g, this._b, allow3Char);
        },
        toHexString: function toHexString(allow3Char) {
          return '#' + this.toHex(allow3Char);
        },
        toHex8: function toHex8(allow4Char) {
          return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
        },
        toHex8String: function toHex8String(allow4Char) {
          return '#' + this.toHex8(allow4Char);
        },
        toRgb: function toRgb() {
          return {
            r: mathRound(this._r),
            g: mathRound(this._g),
            b: mathRound(this._b),
            a: this._a
          };
        },
        toRgbString: function toRgbString() {
          return this._a == 1 ? "rgb(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" : "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
        },
        toPercentageRgb: function toPercentageRgb() {
          return {
            r: mathRound(bound01(this._r, 255) * 100) + "%",
            g: mathRound(bound01(this._g, 255) * 100) + "%",
            b: mathRound(bound01(this._b, 255) * 100) + "%",
            a: this._a
          };
        },
        toPercentageRgbString: function toPercentageRgbString() {
          return this._a == 1 ? "rgb(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" : "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
        },
        toName: function toName() {
          if (this._a === 0) {
            return "transparent";
          }

          if (this._a < 1) {
            return false;
          }

          return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
        },
        toFilter: function toFilter(secondColor) {
          var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
          var secondHex8String = hex8String;
          var gradientType = this._gradientType ? "GradientType = 1, " : "";

          if (secondColor) {
            var s = tinycolor(secondColor);
            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
          }

          return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
        },
        toString: function toString(format) {
          var formatSet = !!format;
          format = format || this._format;
          var formattedString = false;
          var hasAlpha = this._a < 1 && this._a >= 0;
          var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");

          if (needsAlphaFormat) {
            // Special case for "transparent", all other non-alpha formats
            // will return rgba when there is transparency.
            if (format === "name" && this._a === 0) {
              return this.toName();
            }

            return this.toRgbString();
          }

          if (format === "rgb") {
            formattedString = this.toRgbString();
          }

          if (format === "prgb") {
            formattedString = this.toPercentageRgbString();
          }

          if (format === "hex" || format === "hex6") {
            formattedString = this.toHexString();
          }

          if (format === "hex3") {
            formattedString = this.toHexString(true);
          }

          if (format === "hex4") {
            formattedString = this.toHex8String(true);
          }

          if (format === "hex8") {
            formattedString = this.toHex8String();
          }

          if (format === "name") {
            formattedString = this.toName();
          }

          if (format === "hsl") {
            formattedString = this.toHslString();
          }

          if (format === "hsv") {
            formattedString = this.toHsvString();
          }

          return formattedString || this.toHexString();
        },
        clone: function clone() {
          return tinycolor(this.toString());
        },
        _applyModification: function _applyModification(fn, args) {
          var color = fn.apply(null, [this].concat([].slice.call(args)));
          this._r = color._r;
          this._g = color._g;
          this._b = color._b;
          this.setAlpha(color._a);
          return this;
        },
        lighten: function lighten() {
          return this._applyModification(_lighten, arguments);
        },
        brighten: function brighten() {
          return this._applyModification(_brighten, arguments);
        },
        darken: function darken() {
          return this._applyModification(_darken, arguments);
        },
        desaturate: function desaturate() {
          return this._applyModification(_desaturate, arguments);
        },
        saturate: function saturate() {
          return this._applyModification(_saturate, arguments);
        },
        greyscale: function greyscale() {
          return this._applyModification(_greyscale, arguments);
        },
        spin: function spin() {
          return this._applyModification(_spin, arguments);
        },
        _applyCombination: function _applyCombination(fn, args) {
          return fn.apply(null, [this].concat([].slice.call(args)));
        },
        analogous: function analogous() {
          return this._applyCombination(_analogous, arguments);
        },
        complement: function complement() {
          return this._applyCombination(_complement, arguments);
        },
        monochromatic: function monochromatic() {
          return this._applyCombination(_monochromatic, arguments);
        },
        splitcomplement: function splitcomplement() {
          return this._applyCombination(_splitcomplement, arguments);
        },
        triad: function triad() {
          return this._applyCombination(_triad, arguments);
        },
        tetrad: function tetrad() {
          return this._applyCombination(_tetrad, arguments);
        }
      }; // If input is an object, force 1 into "1.0" to handle ratios properly
      // String input requires "1.0" as input, so 1 will be treated as 1

      tinycolor.fromRatio = function (color, opts) {
        if (_typeof$2(color) == "object") {
          var newColor = {};

          for (var i in color) {
            if (color.hasOwnProperty(i)) {
              if (i === "a") {
                newColor[i] = color[i];
              } else {
                newColor[i] = convertToPercentage(color[i]);
              }
            }
          }

          color = newColor;
        }

        return tinycolor(color, opts);
      }; // Given a string or object, convert that input to RGB
      // Possible string inputs:
      //
      //     "red"
      //     "#f00" or "f00"
      //     "#ff0000" or "ff0000"
      //     "#ff000000" or "ff000000"
      //     "rgb 255 0 0" or "rgb (255, 0, 0)"
      //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
      //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
      //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
      //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
      //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
      //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
      //


      function inputToRGB(color) {
        var rgb = {
          r: 0,
          g: 0,
          b: 0
        };
        var a = 1;
        var s = null;
        var v = null;
        var l = null;
        var ok = false;
        var format = false;

        if (typeof color == "string") {
          color = stringInputToObject(color);
        }

        if (_typeof$2(color) == "object") {
          if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
            rgb = rgbToRgb(color.r, color.g, color.b);
            ok = true;
            format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
          } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
            s = convertToPercentage(color.s);
            v = convertToPercentage(color.v);
            rgb = hsvToRgb(color.h, s, v);
            ok = true;
            format = "hsv";
          } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
            s = convertToPercentage(color.s);
            l = convertToPercentage(color.l);
            rgb = hslToRgb(color.h, s, l);
            ok = true;
            format = "hsl";
          }

          if (color.hasOwnProperty("a")) {
            a = color.a;
          }
        }

        a = boundAlpha(a);
        return {
          ok: ok,
          format: color.format || format,
          r: mathMin(255, mathMax(rgb.r, 0)),
          g: mathMin(255, mathMax(rgb.g, 0)),
          b: mathMin(255, mathMax(rgb.b, 0)),
          a: a
        };
      } // Conversion Functions
      // --------------------
      // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
      // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>
      // `rgbToRgb`
      // Handle bounds / percentage checking to conform to CSS color spec
      // <http://www.w3.org/TR/css3-color/>
      // *Assumes:* r, g, b in [0, 255] or [0, 1]
      // *Returns:* { r, g, b } in [0, 255]


      function rgbToRgb(r, g, b) {
        return {
          r: bound01(r, 255) * 255,
          g: bound01(g, 255) * 255,
          b: bound01(b, 255) * 255
        };
      } // `rgbToHsl`
      // Converts an RGB color value to HSL.
      // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
      // *Returns:* { h, s, l } in [0,1]


      function rgbToHsl(r, g, b) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b = bound01(b, 255);
        var max = mathMax(r, g, b),
            min = mathMin(r, g, b);
        var h,
            s,
            l = (max + min) / 2;

        if (max == min) {
          h = s = 0; // achromatic
        } else {
          var d = max - min;
          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);

          switch (max) {
            case r:
              h = (g - b) / d + (g < b ? 6 : 0);
              break;

            case g:
              h = (b - r) / d + 2;
              break;

            case b:
              h = (r - g) / d + 4;
              break;
          }

          h /= 6;
        }

        return {
          h: h,
          s: s,
          l: l
        };
      } // `hslToRgb`
      // Converts an HSL color value to RGB.
      // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
      // *Returns:* { r, g, b } in the set [0, 255]


      function hslToRgb(h, s, l) {
        var r, g, b;
        h = bound01(h, 360);
        s = bound01(s, 100);
        l = bound01(l, 100);

        function hue2rgb(p, q, t) {
          if (t < 0) t += 1;
          if (t > 1) t -= 1;
          if (t < 1 / 6) return p + (q - p) * 6 * t;
          if (t < 1 / 2) return q;
          if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
          return p;
        }

        if (s === 0) {
          r = g = b = l; // achromatic
        } else {
          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var p = 2 * l - q;
          r = hue2rgb(p, q, h + 1 / 3);
          g = hue2rgb(p, q, h);
          b = hue2rgb(p, q, h - 1 / 3);
        }

        return {
          r: r * 255,
          g: g * 255,
          b: b * 255
        };
      } // `rgbToHsv`
      // Converts an RGB color value to HSV
      // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
      // *Returns:* { h, s, v } in [0,1]


      function rgbToHsv(r, g, b) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b = bound01(b, 255);
        var max = mathMax(r, g, b),
            min = mathMin(r, g, b);
        var h,
            s,
            v = max;
        var d = max - min;
        s = max === 0 ? 0 : d / max;

        if (max == min) {
          h = 0; // achromatic
        } else {
          switch (max) {
            case r:
              h = (g - b) / d + (g < b ? 6 : 0);
              break;

            case g:
              h = (b - r) / d + 2;
              break;

            case b:
              h = (r - g) / d + 4;
              break;
          }

          h /= 6;
        }

        return {
          h: h,
          s: s,
          v: v
        };
      } // `hsvToRgb`
      // Converts an HSV color value to RGB.
      // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
      // *Returns:* { r, g, b } in the set [0, 255]


      function hsvToRgb(h, s, v) {
        h = bound01(h, 360) * 6;
        s = bound01(s, 100);
        v = bound01(v, 100);
        var i = Math.floor(h),
            f = h - i,
            p = v * (1 - s),
            q = v * (1 - f * s),
            t = v * (1 - (1 - f) * s),
            mod = i % 6,
            r = [v, q, p, p, t, v][mod],
            g = [t, v, v, q, p, p][mod],
            b = [p, p, t, v, v, q][mod];
        return {
          r: r * 255,
          g: g * 255,
          b: b * 255
        };
      } // `rgbToHex`
      // Converts an RGB color to hex
      // Assumes r, g, and b are contained in the set [0, 255]
      // Returns a 3 or 6 character hex


      function rgbToHex(r, g, b, allow3Char) {
        var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))]; // Return a 3 character hex if possible

        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
        }

        return hex.join("");
      } // `rgbaToHex`
      // Converts an RGBA color plus alpha transparency to hex
      // Assumes r, g, b are contained in the set [0, 255] and
      // a in [0, 1]. Returns a 4 or 8 character rgba hex


      function rgbaToHex(r, g, b, a, allow4Char) {
        var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16)), pad2(convertDecimalToHex(a))]; // Return a 4 character hex if possible

        if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
        }

        return hex.join("");
      } // `rgbaToArgbHex`
      // Converts an RGBA color to an ARGB Hex8 string
      // Rarely used, but required for "toFilter()"


      function rgbaToArgbHex(r, g, b, a) {
        var hex = [pad2(convertDecimalToHex(a)), pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];
        return hex.join("");
      } // `equals`
      // Can be called with any tinycolor input


      tinycolor.equals = function (color1, color2) {
        if (!color1 || !color2) {
          return false;
        }

        return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
      };

      tinycolor.random = function () {
        return tinycolor.fromRatio({
          r: mathRandom(),
          g: mathRandom(),
          b: mathRandom()
        });
      }; // Modification Functions
      // ----------------------
      // Thanks to less.js for some of the basics here
      // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>


      function _desaturate(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.s -= amount / 100;
        hsl.s = clamp01(hsl.s);
        return tinycolor(hsl);
      }

      function _saturate(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.s += amount / 100;
        hsl.s = clamp01(hsl.s);
        return tinycolor(hsl);
      }

      function _greyscale(color) {
        return tinycolor(color).desaturate(100);
      }

      function _lighten(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.l += amount / 100;
        hsl.l = clamp01(hsl.l);
        return tinycolor(hsl);
      }

      function _brighten(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var rgb = tinycolor(color).toRgb();
        rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));
        rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));
        rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));
        return tinycolor(rgb);
      }

      function _darken(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.l -= amount / 100;
        hsl.l = clamp01(hsl.l);
        return tinycolor(hsl);
      } // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
      // Values outside of this range will be wrapped into this range.


      function _spin(color, amount) {
        var hsl = tinycolor(color).toHsl();
        var hue = (hsl.h + amount) % 360;
        hsl.h = hue < 0 ? 360 + hue : hue;
        return tinycolor(hsl);
      } // Combination Functions
      // ---------------------
      // Thanks to jQuery xColor for some of the ideas behind these
      // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>


      function _complement(color) {
        var hsl = tinycolor(color).toHsl();
        hsl.h = (hsl.h + 180) % 360;
        return tinycolor(hsl);
      }

      function _triad(color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [tinycolor(color), tinycolor({
          h: (h + 120) % 360,
          s: hsl.s,
          l: hsl.l
        }), tinycolor({
          h: (h + 240) % 360,
          s: hsl.s,
          l: hsl.l
        })];
      }

      function _tetrad(color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [tinycolor(color), tinycolor({
          h: (h + 90) % 360,
          s: hsl.s,
          l: hsl.l
        }), tinycolor({
          h: (h + 180) % 360,
          s: hsl.s,
          l: hsl.l
        }), tinycolor({
          h: (h + 270) % 360,
          s: hsl.s,
          l: hsl.l
        })];
      }

      function _splitcomplement(color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [tinycolor(color), tinycolor({
          h: (h + 72) % 360,
          s: hsl.s,
          l: hsl.l
        }), tinycolor({
          h: (h + 216) % 360,
          s: hsl.s,
          l: hsl.l
        })];
      }

      function _analogous(color, results, slices) {
        results = results || 6;
        slices = slices || 30;
        var hsl = tinycolor(color).toHsl();
        var part = 360 / slices;
        var ret = [tinycolor(color)];

        for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {
          hsl.h = (hsl.h + part) % 360;
          ret.push(tinycolor(hsl));
        }

        return ret;
      }

      function _monochromatic(color, results) {
        results = results || 6;
        var hsv = tinycolor(color).toHsv();
        var h = hsv.h,
            s = hsv.s,
            v = hsv.v;
        var ret = [];
        var modification = 1 / results;

        while (results--) {
          ret.push(tinycolor({
            h: h,
            s: s,
            v: v
          }));
          v = (v + modification) % 1;
        }

        return ret;
      } // Utility Functions
      // ---------------------


      tinycolor.mix = function (color1, color2, amount) {
        amount = amount === 0 ? 0 : amount || 50;
        var rgb1 = tinycolor(color1).toRgb();
        var rgb2 = tinycolor(color2).toRgb();
        var p = amount / 100;
        var rgba = {
          r: (rgb2.r - rgb1.r) * p + rgb1.r,
          g: (rgb2.g - rgb1.g) * p + rgb1.g,
          b: (rgb2.b - rgb1.b) * p + rgb1.b,
          a: (rgb2.a - rgb1.a) * p + rgb1.a
        };
        return tinycolor(rgba);
      }; // Readability Functions
      // ---------------------
      // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)
      // `contrast`
      // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)


      tinycolor.readability = function (color1, color2) {
        var c1 = tinycolor(color1);
        var c2 = tinycolor(color2);
        return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
      }; // `isReadable`
      // Ensure that foreground and background color combinations meet WCAG2 guidelines.
      // The third argument is an optional Object.
      //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
      //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
      // If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.
      // *Example*
      //    tinycolor.isReadable("#000", "#111") => false
      //    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false


      tinycolor.isReadable = function (color1, color2, wcag2) {
        var readability = tinycolor.readability(color1, color2);
        var wcag2Parms, out;
        out = false;
        wcag2Parms = validateWCAG2Parms(wcag2);

        switch (wcag2Parms.level + wcag2Parms.size) {
          case "AAsmall":
          case "AAAlarge":
            out = readability >= 4.5;
            break;

          case "AAlarge":
            out = readability >= 3;
            break;

          case "AAAsmall":
            out = readability >= 7;
            break;
        }

        return out;
      }; // `mostReadable`
      // Given a base color and a list of possible foreground or background
      // colors for that base, returns the most readable color.
      // Optionally returns Black or White if the most readable color is unreadable.
      // *Example*
      //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
      //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
      //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
      //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"


      tinycolor.mostReadable = function (baseColor, colorList, args) {
        var bestColor = null;
        var bestScore = 0;
        var readability;
        var includeFallbackColors, level, size;
        args = args || {};
        includeFallbackColors = args.includeFallbackColors;
        level = args.level;
        size = args.size;

        for (var i = 0; i < colorList.length; i++) {
          readability = tinycolor.readability(baseColor, colorList[i]);

          if (readability > bestScore) {
            bestScore = readability;
            bestColor = tinycolor(colorList[i]);
          }
        }

        if (tinycolor.isReadable(baseColor, bestColor, {
          "level": level,
          "size": size
        }) || !includeFallbackColors) {
          return bestColor;
        } else {
          args.includeFallbackColors = false;
          return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
        }
      }; // Big List of Colors
      // ------------------
      // <http://www.w3.org/TR/css3-color/#svg-color>


      var names = tinycolor.names = {
        aliceblue: "f0f8ff",
        antiquewhite: "faebd7",
        aqua: "0ff",
        aquamarine: "7fffd4",
        azure: "f0ffff",
        beige: "f5f5dc",
        bisque: "ffe4c4",
        black: "000",
        blanchedalmond: "ffebcd",
        blue: "00f",
        blueviolet: "8a2be2",
        brown: "a52a2a",
        burlywood: "deb887",
        burntsienna: "ea7e5d",
        cadetblue: "5f9ea0",
        chartreuse: "7fff00",
        chocolate: "d2691e",
        coral: "ff7f50",
        cornflowerblue: "6495ed",
        cornsilk: "fff8dc",
        crimson: "dc143c",
        cyan: "0ff",
        darkblue: "00008b",
        darkcyan: "008b8b",
        darkgoldenrod: "b8860b",
        darkgray: "a9a9a9",
        darkgreen: "006400",
        darkgrey: "a9a9a9",
        darkkhaki: "bdb76b",
        darkmagenta: "8b008b",
        darkolivegreen: "556b2f",
        darkorange: "ff8c00",
        darkorchid: "9932cc",
        darkred: "8b0000",
        darksalmon: "e9967a",
        darkseagreen: "8fbc8f",
        darkslateblue: "483d8b",
        darkslategray: "2f4f4f",
        darkslategrey: "2f4f4f",
        darkturquoise: "00ced1",
        darkviolet: "9400d3",
        deeppink: "ff1493",
        deepskyblue: "00bfff",
        dimgray: "696969",
        dimgrey: "696969",
        dodgerblue: "1e90ff",
        firebrick: "b22222",
        floralwhite: "fffaf0",
        forestgreen: "228b22",
        fuchsia: "f0f",
        gainsboro: "dcdcdc",
        ghostwhite: "f8f8ff",
        gold: "ffd700",
        goldenrod: "daa520",
        gray: "808080",
        green: "008000",
        greenyellow: "adff2f",
        grey: "808080",
        honeydew: "f0fff0",
        hotpink: "ff69b4",
        indianred: "cd5c5c",
        indigo: "4b0082",
        ivory: "fffff0",
        khaki: "f0e68c",
        lavender: "e6e6fa",
        lavenderblush: "fff0f5",
        lawngreen: "7cfc00",
        lemonchiffon: "fffacd",
        lightblue: "add8e6",
        lightcoral: "f08080",
        lightcyan: "e0ffff",
        lightgoldenrodyellow: "fafad2",
        lightgray: "d3d3d3",
        lightgreen: "90ee90",
        lightgrey: "d3d3d3",
        lightpink: "ffb6c1",
        lightsalmon: "ffa07a",
        lightseagreen: "20b2aa",
        lightskyblue: "87cefa",
        lightslategray: "789",
        lightslategrey: "789",
        lightsteelblue: "b0c4de",
        lightyellow: "ffffe0",
        lime: "0f0",
        limegreen: "32cd32",
        linen: "faf0e6",
        magenta: "f0f",
        maroon: "800000",
        mediumaquamarine: "66cdaa",
        mediumblue: "0000cd",
        mediumorchid: "ba55d3",
        mediumpurple: "9370db",
        mediumseagreen: "3cb371",
        mediumslateblue: "7b68ee",
        mediumspringgreen: "00fa9a",
        mediumturquoise: "48d1cc",
        mediumvioletred: "c71585",
        midnightblue: "191970",
        mintcream: "f5fffa",
        mistyrose: "ffe4e1",
        moccasin: "ffe4b5",
        navajowhite: "ffdead",
        navy: "000080",
        oldlace: "fdf5e6",
        olive: "808000",
        olivedrab: "6b8e23",
        orange: "ffa500",
        orangered: "ff4500",
        orchid: "da70d6",
        palegoldenrod: "eee8aa",
        palegreen: "98fb98",
        paleturquoise: "afeeee",
        palevioletred: "db7093",
        papayawhip: "ffefd5",
        peachpuff: "ffdab9",
        peru: "cd853f",
        pink: "ffc0cb",
        plum: "dda0dd",
        powderblue: "b0e0e6",
        purple: "800080",
        rebeccapurple: "663399",
        red: "f00",
        rosybrown: "bc8f8f",
        royalblue: "4169e1",
        saddlebrown: "8b4513",
        salmon: "fa8072",
        sandybrown: "f4a460",
        seagreen: "2e8b57",
        seashell: "fff5ee",
        sienna: "a0522d",
        silver: "c0c0c0",
        skyblue: "87ceeb",
        slateblue: "6a5acd",
        slategray: "708090",
        slategrey: "708090",
        snow: "fffafa",
        springgreen: "00ff7f",
        steelblue: "4682b4",
        tan: "d2b48c",
        teal: "008080",
        thistle: "d8bfd8",
        tomato: "ff6347",
        turquoise: "40e0d0",
        violet: "ee82ee",
        wheat: "f5deb3",
        white: "fff",
        whitesmoke: "f5f5f5",
        yellow: "ff0",
        yellowgreen: "9acd32"
      }; // Make it easy to access colors via `hexNames[hex]`

      var hexNames = tinycolor.hexNames = flip(names); // Utilities
      // ---------
      // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`

      function flip(o) {
        var flipped = {};

        for (var i in o) {
          if (o.hasOwnProperty(i)) {
            flipped[o[i]] = i;
          }
        }

        return flipped;
      } // Return a valid alpha value [0,1] with all invalid values being set to 1


      function boundAlpha(a) {
        a = parseFloat(a);

        if (isNaN(a) || a < 0 || a > 1) {
          a = 1;
        }

        return a;
      } // Take input from [0, n] and return it as [0, 1]


      function bound01(n, max) {
        if (isOnePointZero(n)) {
          n = "100%";
        }

        var processPercent = isPercentage(n);
        n = mathMin(max, mathMax(0, parseFloat(n))); // Automatically convert percentage into number

        if (processPercent) {
          n = parseInt(n * max, 10) / 100;
        } // Handle floating point rounding errors


        if (Math.abs(n - max) < 0.000001) {
          return 1;
        } // Convert into [0, 1] range if it isn't already


        return n % max / parseFloat(max);
      } // Force a number between 0 and 1


      function clamp01(val) {
        return mathMin(1, mathMax(0, val));
      } // Parse a base-16 hex value into a base-10 integer


      function parseIntFromHex(val) {
        return parseInt(val, 16);
      } // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
      // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>


      function isOnePointZero(n) {
        return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
      } // Check to see if string passed in is a percentage


      function isPercentage(n) {
        return typeof n === "string" && n.indexOf('%') != -1;
      } // Force a hex value to have 2 characters


      function pad2(c) {
        return c.length == 1 ? '0' + c : '' + c;
      } // Replace a decimal with it's percentage value


      function convertToPercentage(n) {
        if (n <= 1) {
          n = n * 100 + "%";
        }

        return n;
      } // Converts a decimal to a hex value


      function convertDecimalToHex(d) {
        return Math.round(parseFloat(d) * 255).toString(16);
      } // Converts a hex value to a decimal


      function convertHexToDecimal(h) {
        return parseIntFromHex(h) / 255;
      }

      var matchers = function () {
        // <http://www.w3.org/TR/css3-values/#integers>
        var CSS_INTEGER = "[-\\+]?\\d+%?"; // <http://www.w3.org/TR/css3-values/#number-value>

        var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?"; // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.

        var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")"; // Actual matching.
        // Parentheses and commas are optional, but not required.
        // Whitespace can take the place of commas or opening paren

        var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
        var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
        return {
          CSS_UNIT: new RegExp(CSS_UNIT),
          rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
          rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
          hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
          hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
          hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
          hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
          hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
          hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
        };
      }(); // `isValidCSSUnit`
      // Take in a single string / number and check to see if it looks like a CSS unit
      // (see `matchers` above for definition).


      function isValidCSSUnit(color) {
        return !!matchers.CSS_UNIT.exec(color);
      } // `stringInputToObject`
      // Permissive string parsing.  Take in a number of formats, and output an object
      // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`


      function stringInputToObject(color) {
        color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();
        var named = false;

        if (names[color]) {
          color = names[color];
          named = true;
        } else if (color == 'transparent') {
          return {
            r: 0,
            g: 0,
            b: 0,
            a: 0,
            format: "name"
          };
        } // Try to match string input using regular expressions.
        // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
        // Just return an object and let the conversion functions handle that.
        // This way the result will be the same whether the tinycolor is initialized with string or object.


        var match;

        if (match = matchers.rgb.exec(color)) {
          return {
            r: match[1],
            g: match[2],
            b: match[3]
          };
        }

        if (match = matchers.rgba.exec(color)) {
          return {
            r: match[1],
            g: match[2],
            b: match[3],
            a: match[4]
          };
        }

        if (match = matchers.hsl.exec(color)) {
          return {
            h: match[1],
            s: match[2],
            l: match[3]
          };
        }

        if (match = matchers.hsla.exec(color)) {
          return {
            h: match[1],
            s: match[2],
            l: match[3],
            a: match[4]
          };
        }

        if (match = matchers.hsv.exec(color)) {
          return {
            h: match[1],
            s: match[2],
            v: match[3]
          };
        }

        if (match = matchers.hsva.exec(color)) {
          return {
            h: match[1],
            s: match[2],
            v: match[3],
            a: match[4]
          };
        }

        if (match = matchers.hex8.exec(color)) {
          return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            a: convertHexToDecimal(match[4]),
            format: named ? "name" : "hex8"
          };
        }

        if (match = matchers.hex6.exec(color)) {
          return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            format: named ? "name" : "hex"
          };
        }

        if (match = matchers.hex4.exec(color)) {
          return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            a: convertHexToDecimal(match[4] + '' + match[4]),
            format: named ? "name" : "hex8"
          };
        }

        if (match = matchers.hex3.exec(color)) {
          return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            format: named ? "name" : "hex"
          };
        }

        return false;
      }

      function validateWCAG2Parms(parms) {
        // return valid WCAG2 parms for isReadable.
        // If input parms are invalid, return {"level":"AA", "size":"small"}
        var level, size;
        parms = parms || {
          "level": "AA",
          "size": "small"
        };
        level = (parms.level || "AA").toUpperCase();
        size = (parms.size || "small").toLowerCase();

        if (level !== "AA" && level !== "AAA") {
          level = "AA";
        }

        if (size !== "small" && size !== "large") {
          size = "small";
        }

        return {
          "level": level,
          "size": size
        };
      } // Node: Export function


      if (module.exports) {
        module.exports = tinycolor;
      } // AMD/requirejs: Define the module
      else {
        window.tinycolor = tinycolor;
      }
    })(Math);
  })(tinycolor);

  var tinyColor = tinycolor.exports;

  var combineRegExp = function combineRegExp(regexpList, flags) {
    var source = "";

    for (var i = 0; i < regexpList.length; i++) {
      if (typeof regexpList[i] === "string") {
        source += regexpList[i];
      } else {
        source += regexpList[i].source;
      }
    }

    return new RegExp(source, flags);
  };

  var generateRegExp = function generateRegExp() {
    var searchFlags = "gi";
    var rAngle = /(?:[+-]?\d*\.?\d+)(?:deg|grad|rad|turn)/;
    var rSideCornerCapture = /to\s+((?:(?:left|right|top|bottom)(?:\s+(?:top|bottom|left|right))?))/;
    var rComma = /\s*,\s*/;
    var rColorHex = /#(?:[a-f0-9]{6}|[a-f0-9]{3})/;
    var rDigits3 = /\(\s*(?:\d{1,3}\s*,\s*){2}\d{1,3}\s*\)/;
    var rDigits4 = /\(\s*(?:\d{1,3}\s*,\s*){2}\d{1,3}\s*,\s*\d*\.?\d+\)/;
    var rValue = /(?:[+-]?\d*\.?\d+)(?:%|[a-z]+)?/;
    var rKeyword = /[_a-z-][_a-z0-9-]*/;
    var rColor = combineRegExp(["(?:", rColorHex, "|", "(?:rgb|hsl)", rDigits3, "|", "(?:rgba|hsla)", rDigits4, "|", rKeyword, ")"], "");
    var rColorStop = combineRegExp([rColor, "(?:\\s+", rValue, "(?:\\s+", rValue, ")?)?"], "");
    var rColorStopList = combineRegExp(["(?:", rColorStop, rComma, ")*", rColorStop], "");
    var rLineCapture = combineRegExp(["(?:(", rAngle, ")|", rSideCornerCapture, ")"], "");
    var rGradientSearch = combineRegExp(["(?:(", rLineCapture, ")", rComma, ")?(", rColorStopList, ")"], searchFlags);
    var rColorStopSearch = combineRegExp(["\\s*(", rColor, ")", "(?:\\s+", "(", rValue, "))?", "(?:", rComma, "\\s*)?"], searchFlags);
    return {
      gradientSearch: rGradientSearch,
      colorStopSearch: rColorStopSearch
    };
  };

  var parseGradient = function parseGradient(regExpLib, input) {
    var result;
    var matchColorStop;
    var stopResult;
    regExpLib.gradientSearch.lastIndex = 0;
    var matchGradient = regExpLib.gradientSearch.exec(input);

    if (matchGradient !== null) {
      result = {
        original: matchGradient[0],
        colorStopList: []
      };

      if (matchGradient[1]) {
        result.line = matchGradient[1];
      }

      if (matchGradient[2]) {
        result.angle = matchGradient[2];
      }

      if (matchGradient[3]) {
        result.sideCorner = matchGradient[3];
      }

      regExpLib.colorStopSearch.lastIndex = 0;
      matchColorStop = regExpLib.colorStopSearch.exec(matchGradient[4]);

      while (matchColorStop !== null) {
        stopResult = {
          color: matchColorStop[1]
        };

        if (matchColorStop[2]) {
          stopResult.position = matchColorStop[2];
        }

        result.colorStopList.push(stopResult);
        matchColorStop = regExpLib.colorStopSearch.exec(matchGradient[4]);
      }
    }

    return result;
  };

  var REGEXP_LIB = generateRegExp();
  var REG_GRADIENT = /.*gradient\s*\(((?:\([^)]*\)|[^)(]*)*)\)/gim;
  var isGradientColor = function isGradientColor(input) {
    REG_GRADIENT.lastIndex = 0;
    return REG_GRADIENT.exec(input);
  };
  var sideCornerDegreeMap = {
    top: 0,
    right: 90,
    bottom: 180,
    left: 270,
    "top left": 225,
    "left top": 225,
    "top right": 135,
    "right top": 135,
    "bottom left": 315,
    "left bottom": 315,
    "bottom right": 45,
    "right bottom": 45
  };
  var parseGradientString = function parseGradientString(input) {
    var match = isGradientColor(input);

    if (!match) {
      return false;
    }

    var gradientColors = {
      points: [],
      degree: 0
    };
    var result = parseGradient(REGEXP_LIB, match[1]);

    if (result.original.trim() !== match[1].trim()) {
      return false;
    }

    var points = result.colorStopList.map(function (_ref) {
      var color = _ref.color,
          position = _ref.position;
      var point = /* @__PURE__ */Object.create(null);
      point.color = tinyColor(color).toRgbString();
      point.left = parseFloat(position);
      return point;
    });
    gradientColors.points = points;
    var degree = parseInt(result.angle, 10);

    if (Number.isNaN(degree)) {
      degree = sideCornerDegreeMap[result.sideCorner] || 90;
    }

    gradientColors.degree = degree;
    return gradientColors;
  };

  function ownKeys$R(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$Q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$R(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$R(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var mathRound = Math.round;

  var hsv2rgba = function hsv2rgba(states) {
    return tinyColor(states).toRgb();
  };

  var hsv2hsva = function hsv2hsva(states) {
    return tinyColor(states).toHsv();
  };

  var hsv2hsla = function hsv2hsla(states) {
    return tinyColor(states).toHsl();
  };

  var gradientColors2string = function gradientColors2string(object) {
    var points = object.points,
        degree = object.degree;
    var colorsStop = points.sort(function (pA, pB) {
      return pA.left - pB.left;
    }).map(function (p) {
      return "".concat(p.color, " ").concat(Math.round(p.left * 100) / 100, "%");
    });
    return "linear-gradient(".concat(degree, "deg,").concat(colorsStop.join(","), ")");
  };
  var genId = function genId() {
    return (1 + Math.random() * 4294967295).toString(16);
  };
  var genGradientPoint = function genGradientPoint(left, color) {
    return {
      id: genId(),
      left: left,
      color: color
    };
  };
  var Color = /*#__PURE__*/function () {
    function Color(input) {
      _classCallCheck(this, Color);

      _defineProperty$3(this, "states", {
        s: 100,
        v: 100,
        h: 100,
        a: 1
      });

      _defineProperty$3(this, "originColor", void 0);

      _defineProperty$3(this, "isGradient", void 0);

      _defineProperty$3(this, "gradientStates", {
        colors: [],
        degree: 0,
        selectedId: null,
        css: ""
      });

      this.update(input);
    }

    _createClass(Color, [{
      key: "update",
      value: function update(input) {
        if (input === this.originColor) {
          return;
        }

        this.originColor = input;
        this.isGradient = false;
        var gradientColors = parseGradientString(input);
        var colorInput = input;

        if (gradientColors) {
          var _points$, _this$gradientSelecte;

          this.isGradient = true;
          var object = gradientColors;
          var points = object.points.map(function (c) {
            return genGradientPoint(c.left, c.color);
          });
          this.gradientStates = {
            colors: points,
            degree: object.degree,
            selectedId: ((_points$ = points[0]) === null || _points$ === void 0 ? void 0 : _points$.id) || null
          };
          this.gradientStates.css = this.linearGradient;
          colorInput = (_this$gradientSelecte = this.gradientSelectedPoint) === null || _this$gradientSelecte === void 0 ? void 0 : _this$gradientSelecte.color;
        }

        this.updateStates(colorInput);
      }
    }, {
      key: "saturation",
      get: function get() {
        return this.states.s;
      },
      set: function set(value) {
        this.states.s = Math.max(0, Math.min(100, value));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "value",
      get: function get() {
        return this.states.v;
      },
      set: function set(value) {
        this.states.v = Math.max(0, Math.min(100, value));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "hue",
      get: function get() {
        return this.states.h;
      },
      set: function set(value) {
        this.states.h = Math.max(0, Math.min(360, value));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "alpha",
      get: function get() {
        return this.states.a;
      },
      set: function set(value) {
        this.states.a = Math.max(0, Math.min(1, Math.round(value * 100) / 100));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "rgb",
      get: function get() {
        var _hsv2rgba = hsv2rgba(this.states),
            r = _hsv2rgba.r,
            g = _hsv2rgba.g,
            b = _hsv2rgba.b;

        return "rgb(".concat(mathRound(r), ", ").concat(mathRound(g), ", ").concat(mathRound(b), ")");
      }
    }, {
      key: "rgba",
      get: function get() {
        var _hsv2rgba2 = hsv2rgba(this.states),
            r = _hsv2rgba2.r,
            g = _hsv2rgba2.g,
            b = _hsv2rgba2.b,
            a = _hsv2rgba2.a;

        return "rgba(".concat(mathRound(r), ", ").concat(mathRound(g), ", ").concat(mathRound(b), ", ").concat(a, ")");
      }
    }, {
      key: "hsv",
      get: function get() {
        var _this$getHsva = this.getHsva(),
            h = _this$getHsva.h,
            s = _this$getHsva.s,
            v = _this$getHsva.v;

        return "hsv(".concat(h, ", ").concat(s, "%, ").concat(v, "%)");
      }
    }, {
      key: "hsva",
      get: function get() {
        var _this$getHsva2 = this.getHsva(),
            h = _this$getHsva2.h,
            s = _this$getHsva2.s,
            v = _this$getHsva2.v,
            a = _this$getHsva2.a;

        return "hsva(".concat(h, ", ").concat(s, "%, ").concat(v, "%, ").concat(a, ")");
      }
    }, {
      key: "hsl",
      get: function get() {
        var _this$getHsla = this.getHsla(),
            h = _this$getHsla.h,
            s = _this$getHsla.s,
            l = _this$getHsla.l;

        return "hsl(".concat(h, ", ").concat(s, "%, ").concat(l, "%)");
      }
    }, {
      key: "hsla",
      get: function get() {
        var _this$getHsla2 = this.getHsla(),
            h = _this$getHsla2.h,
            s = _this$getHsla2.s,
            l = _this$getHsla2.l,
            a = _this$getHsla2.a;

        return "hsla(".concat(h, ", ").concat(s, "%, ").concat(l, "%, ").concat(a, ")");
      }
    }, {
      key: "hex",
      get: function get() {
        return tinyColor(this.states).toHexString();
      }
    }, {
      key: "hex8",
      get: function get() {
        return tinyColor(this.states).toHex8String();
      }
    }, {
      key: "cmyk",
      get: function get() {
        var _this$getCmyk = this.getCmyk(),
            c = _this$getCmyk.c,
            m = _this$getCmyk.m,
            y = _this$getCmyk.y,
            k = _this$getCmyk.k;

        return "cmyk(".concat(c, ", ").concat(m, ", ").concat(y, ", ").concat(k, ")");
      }
    }, {
      key: "css",
      get: function get() {
        if (this.isGradient) {
          return this.linearGradient;
        }

        return this.rgba;
      }
    }, {
      key: "linearGradient",
      get: function get() {
        var gradientColors = this.gradientColors,
            gradientDegree = this.gradientDegree;
        return gradientColors2string({
          points: gradientColors,
          degree: gradientDegree
        });
      }
    }, {
      key: "gradientColors",
      get: function get() {
        return this.gradientStates.colors;
      },
      set: function set(colors) {
        this.gradientStates.colors = colors;
        this.gradientStates.css = this.linearGradient;
      }
    }, {
      key: "gradientSelectedId",
      get: function get() {
        return this.gradientStates.selectedId;
      },
      set: function set(id) {
        var _this$gradientSelecte2;

        if (id === this.gradientSelectedId) {
          return;
        }

        this.gradientStates.selectedId = id;
        this.updateStates((_this$gradientSelecte2 = this.gradientSelectedPoint) === null || _this$gradientSelecte2 === void 0 ? void 0 : _this$gradientSelecte2.color);
      }
    }, {
      key: "gradientDegree",
      get: function get() {
        return this.gradientStates.degree;
      },
      set: function set(degree) {
        this.gradientStates.degree = Math.max(0, Math.min(360, degree));
        this.gradientStates.css = this.linearGradient;
      }
    }, {
      key: "gradientSelectedPoint",
      get: function get() {
        var gradientColors = this.gradientColors,
            gradientSelectedId = this.gradientSelectedId;
        return gradientColors.find(function (color) {
          return color.id === gradientSelectedId;
        });
      }
    }, {
      key: "getFormatsColorMap",
      value: function getFormatsColorMap() {
        return {
          HEX: this.hex,
          CMYK: this.cmyk,
          RGB: this.rgb,
          RGBA: this.rgba,
          HSL: this.hsl,
          HSLA: this.hsla,
          HSV: this.hsv,
          HSVA: this.hsva,
          CSS: this.css
        };
      }
    }, {
      key: "updateCurrentGradientColor",
      value: function updateCurrentGradientColor() {
        var isGradient = this.isGradient,
            gradientColors = this.gradientColors,
            gradientSelectedId = this.gradientSelectedId;
        var length = gradientColors.length;
        var current = this.gradientSelectedPoint;

        if (!isGradient || length === 0 || !current) {
          return false;
        }

        var index = gradientColors.findIndex(function (color) {
          return color.id === gradientSelectedId;
        });

        var newColor = _objectSpread$Q(_objectSpread$Q({}, current), {}, {
          color: this.rgba
        });

        gradientColors.splice(index, 1, newColor);
        this.gradientColors = gradientColors;
        return this;
      }
    }, {
      key: "updateStates",
      value: function updateStates(input) {
        var color = tinyColor(cmykInputToColor(input));
        var hsva = color.toHsv();
        this.states = hsva;
      }
    }, {
      key: "getRgba",
      value: function getRgba() {
        var _hsv2rgba3 = hsv2rgba(this.states),
            r = _hsv2rgba3.r,
            g = _hsv2rgba3.g,
            b = _hsv2rgba3.b,
            a = _hsv2rgba3.a;

        return {
          r: mathRound(r),
          g: mathRound(g),
          b: mathRound(b),
          a: a
        };
      }
    }, {
      key: "getCmyk",
      value: function getCmyk() {
        var _this$getRgba = this.getRgba(),
            r = _this$getRgba.r,
            g = _this$getRgba.g,
            b = _this$getRgba.b;

        var _rgb2cmyk = rgb2cmyk(r, g, b),
            _rgb2cmyk2 = _slicedToArray(_rgb2cmyk, 4),
            c = _rgb2cmyk2[0],
            m = _rgb2cmyk2[1],
            y = _rgb2cmyk2[2],
            k = _rgb2cmyk2[3];

        return {
          c: mathRound(c * 100),
          m: mathRound(m * 100),
          y: mathRound(y * 100),
          k: mathRound(k * 100)
        };
      }
    }, {
      key: "getHsva",
      value: function getHsva() {
        var _hsv2hsva = hsv2hsva(this.states),
            h = _hsv2hsva.h,
            s = _hsv2hsva.s,
            v = _hsv2hsva.v,
            a = _hsv2hsva.a;

        h = mathRound(h);
        s = mathRound(s * 100);
        v = mathRound(v * 100);
        a *= 1;
        return {
          h: h,
          s: s,
          v: v,
          a: a
        };
      }
    }, {
      key: "getHsla",
      value: function getHsla() {
        var _hsv2hsla = hsv2hsla(this.states),
            h = _hsv2hsla.h,
            s = _hsv2hsla.s,
            l = _hsv2hsla.l,
            a = _hsv2hsla.a;

        h = mathRound(h);
        s = mathRound(s * 100);
        l = mathRound(l * 100);
        a *= 1;
        return {
          h: h,
          s: s,
          l: l,
          a: a
        };
      }
    }, {
      key: "equals",
      value: function equals(color) {
        return tinyColor.equals(this.rgba, color);
      }
    }], [{
      key: "isValid",
      value: function isValid(color) {
        if (parseGradientString(color)) {
          return true;
        }

        return tinyColor(color).isValid();
      }
    }, {
      key: "hsva2color",
      value: function hsva2color(h, s, v, a) {
        return tinyColor({
          h: h,
          s: s,
          v: v,
          a: a
        }).toHsvString();
      }
    }, {
      key: "hsla2color",
      value: function hsla2color(h, s, l, a) {
        return tinyColor({
          h: h,
          s: s,
          l: l,
          a: a
        }).toHslString();
      }
    }, {
      key: "rgba2color",
      value: function rgba2color(r, g, b, a) {
        return tinyColor({
          r: r,
          g: g,
          b: b,
          a: a
        }).toHsvString();
      }
    }, {
      key: "hex2color",
      value: function hex2color(hex, a) {
        var color = tinyColor(hex);
        color.setAlpha(a);
        return color.toHexString();
      }
    }, {
      key: "object2color",
      value: function object2color(object, format) {
        if (format === "CMYK") {
          var c = object.c,
              m = object.m,
              y = object.y,
              k = object.k;
          return "cmyk(".concat(c, ", ").concat(m, ", ").concat(y, ", ").concat(k, ")");
        }

        var color = tinyColor(object, {
          format: format
        });
        return color.toRgbString();
      }
    }]);

    return Color;
  }();

  _defineProperty$3(Color, "isGradientColor", function (input) {
    return !!isGradientColor(input);
  });

  _defineProperty$3(Color, "compare", function (color1, color2) {
    var isGradientColor1 = Color.isGradientColor(color1);
    var isGradientColor2 = Color.isGradientColor(color2);

    if (isGradientColor1 && isGradientColor2) {
      var gradientColor1 = gradientColors2string(parseGradientString(color1));
      var gradientColor2 = gradientColors2string(parseGradientString(color2));
      return gradientColor1 === gradientColor2;
    }

    if (!isGradientColor1 && !isGradientColor2) {
      return tinyColor.equals(color1, color2);
    }

    return false;
  });

  var COLOR_OBJECT_OUTPUT_KEYS = ["alpha", "css", "hex", "hex8", "hsl", "hsla", "hsv", "hsva", "rgb", "rgba", "saturation", "value", "isGradient"];
  var getColorObject = function getColorObject(color) {
    if (!color) {
      return null;
    }

    var colorObject = /* @__PURE__ */Object.create(null);
    COLOR_OBJECT_OUTPUT_KEYS.forEach(function (key) {
      return colorObject[key] = color[key];
    });

    if (color.isGradient) {
      colorObject.linearGradient = color.linearGradient;
    }

    return colorObject;
  };

  function ownKeys$Q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$P(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Q(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }

  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }

  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }

  var defaultsOptions = {
    start: function start(coordinate, event) {},
    drag: function drag(coordinate, event) {},
    end: function end(coordinate, event) {}
  };

  var _dragStart = /*#__PURE__*/new WeakSet();

  var _drag = /*#__PURE__*/new WeakSet();

  var _dragEnd = /*#__PURE__*/new WeakSet();

  var _getCoordinate = /*#__PURE__*/new WeakSet();

  var Draggable = /*#__PURE__*/function () {
    function Draggable(el, options) {
      _classCallCheck(this, Draggable);

      _classPrivateMethodInitSpec(this, _getCoordinate);

      _classPrivateMethodInitSpec(this, _dragEnd);

      _classPrivateMethodInitSpec(this, _drag);

      _classPrivateMethodInitSpec(this, _dragStart);

      _defineProperty$3(this, "dragging", false);

      _defineProperty$3(this, "$el", void 0);

      _defineProperty$3(this, "props", void 0);

      _defineProperty$3(this, "handles", void 0);

      this.$el = el;
      this.props = _objectSpread$P(_objectSpread$P({}, defaultsOptions), options);
      this.handles = {
        start: _classPrivateMethodGet(this, _dragStart, _dragStart2).bind(this),
        drag: _classPrivateMethodGet(this, _drag, _drag2).bind(this),
        end: _classPrivateMethodGet(this, _dragEnd, _dragEnd2).bind(this)
      };
      this.$el.addEventListener("mousedown", this.handles.start, false);
    }

    _createClass(Draggable, [{
      key: "destroy",
      value: function destroy() {
        this.$el.removeEventListener("mousedown", this.handles.start, false);
        window.removeEventListener("mousemove", this.handles.drag, false);
        window.removeEventListener("mouseup", this.handles.end, false);
        window.removeEventListener("contextmenu", this.handles.end, false);
      }
    }]);

    return Draggable;
  }();

  function _dragStart2(event) {
    if (this.dragging) {
      return;
    }

    window.addEventListener("mousemove", this.handles.drag, false);
    window.addEventListener("mouseup", this.handles.end, false);
    window.addEventListener("contextmenu", this.handles.end, false);
    this.dragging = true;
    this.props.start(_classPrivateMethodGet(this, _getCoordinate, _getCoordinate2).call(this, event), event);
  }

  function _drag2(event) {
    if (!this.dragging) {
      return;
    }

    this.props.drag(_classPrivateMethodGet(this, _getCoordinate, _getCoordinate2).call(this, event), event);
  }

  function _dragEnd2(event) {
    var _this = this;

    setTimeout(function () {
      _this.dragging = false;

      _this.props.end(_classPrivateMethodGet(_this, _getCoordinate, _getCoordinate2).call(_this, event), event);
    }, 0);
    window.removeEventListener("mousemove", this.handles.drag, false);
    window.removeEventListener("mouseup", this.handles.end, false);
    window.removeEventListener("contextmenu", this.handles.end, false);
  }

  function _getCoordinate2(event) {
    var rect = this.$el.getBoundingClientRect();
    var mouseEvent = event;
    var left = mouseEvent.clientX - rect.left;
    var top = mouseEvent.clientY - rect.top;
    return {
      y: Math.min(Math.max(0, top), rect.height),
      x: Math.min(Math.max(0, left), rect.width)
    };
  }

  var baseProps = {
    disabled: Boolean,
    color: {
      type: Object
    },
    onChange: {
      type: Function,
      "default": function _default() {
        return function () {};
      }
    }
  };

  function ownKeys$P(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$O(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$P(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$P(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var DELETE_KEYS = ["delete", "backspace"];
  var LinearGradient = vue.defineComponent({
    name: "LinearGradient",
    components: {
      TInputNumber: InputNumber
    },
    inheritAttrs: false,
    props: _objectSpread$O({}, baseProps),
    setup: function setup(props) {
      var baseClassName = useBaseClassName();

      var _useCommonClassName = useCommonClassName$2(),
          STATUS = _useCommonClassName.STATUS;

      var statusClassNames = STATUS.value;
      var refSlider = vue.ref(null);
      var sliderRect = vue.reactive({
        left: 0,
        width: GRADIENT_SLIDER_DEFAULT_WIDTH
      });
      var isDragging = vue.ref(false);
      var isMoved = vue.ref(false);
      var degree = vue.ref(props.color.gradientDegree);
      var selectedId = vue.ref(props.color.gradientSelectedId);
      var colors = vue.ref(cloneDeep_1(props.color.gradientColors));
      vue.watch(function () {
        return props.color.gradientDegree;
      }, function (value) {
        return degree.value = value;
      });
      vue.watch(function () {
        return props.color.gradientSelectedId;
      }, function (value) {
        return selectedId.value = value;
      });
      vue.watch(function () {
        return props.color.gradientColors;
      }, function (value) {
        colors.value = cloneDeep_1(value);
      }, {
        deep: true
      });

      var handleChange = function handleChange(key, payload, addUsedColor) {
        if (props.disabled) {
          return;
        }

        props.onChange({
          key: key,
          payload: payload,
          addUsedColor: addUsedColor
        });
      };

      var handleDegreeChange = function handleDegreeChange(value) {
        if (props.disabled || value === props.color.gradientDegree) {
          return;
        }

        degree.value = value;
        handleChange("degree", value, true);
      };

      var handleSelectedIdChange = function handleSelectedIdChange(value) {
        if (props.disabled) {
          return;
        }

        selectedId.value = value;
        handleChange("selectedId", value);
      };

      var handleColorsChange = function handleColorsChange(value, isEnded) {
        if (props.disabled) {
          return;
        }

        colors.value = value;
        handleChange("colors", value, isEnded);
      };

      var updateActiveThumbLeft = function updateActiveThumbLeft(left) {
        var index = colors.value.findIndex(function (c) {
          return c.id === selectedId.value;
        });

        if (index === -1) {
          return;
        }

        var point = colors.value[index];
        left = Math.max(0, Math.min(sliderRect.width, left));
        var percentLeft = left / sliderRect.width * 100;
        colors.value.splice(index, 1, {
          color: point.color,
          left: percentLeft,
          id: point.id
        });
        handleColorsChange(colors.value);
      };

      var handleStart = function handleStart(id, e) {
        var rect = refSlider.value.getBoundingClientRect();
        sliderRect.left = rect.left;
        sliderRect.width = rect.width || GRADIENT_SLIDER_DEFAULT_WIDTH;

        if (isDragging.value || props.disabled) {
          return;
        }

        isMoved.value = false;
        isDragging.value = true;
        e.preventDefault();
        e.stopPropagation();
        handleSelectedIdChange(id);
        refSlider.value.focus();
        window.addEventListener("mousemove", handleMove, false);
        window.addEventListener("mouseup", handleEnd, false);
        window.addEventListener("contextmenu", handleEnd, false);
      };

      var handleMove = function handleMove(e) {
        if (!isDragging.value || props.disabled) {
          return;
        }

        var left = e.clientX - sliderRect.left;
        isMoved.value = true;
        updateActiveThumbLeft(left);
      };

      var handleEnd = function handleEnd() {
        if (!isDragging.value) {
          return;
        }

        setTimeout(function () {
          isDragging.value = false;
        }, 0);

        if (isMoved.value) {
          handleColorsChange(colors.value, true);
          isMoved.value = false;
        }

        window.removeEventListener("mousemove", handleMove, false);
        window.removeEventListener("mouseup", handleEnd, false);
        window.removeEventListener("contextmenu", handleEnd, false);
      };

      var handleKeyup = function handleKeyup(e) {
        if (props.disabled) {
          return;
        }

        var points = colors.value;
        var pos = points.findIndex(function (c) {
          return c.id === selectedId.value;
        });
        var length = points.length;

        if (DELETE_KEYS.includes(e.key.toLocaleLowerCase()) && length > 2 && pos >= 0 && pos <= length - 1) {
          points.splice(pos, 1);

          if (!points[pos]) {
            pos = points[pos + 1] ? pos + 1 : points[pos - 1] ? pos - 1 : 0;
          }

          var current = points[pos];
          handleColorsChange(points, true);
          handleSelectedIdChange(current === null || current === void 0 ? void 0 : current.id);
        }
      };

      var handleThumbBarClick = function handleThumbBarClick(e) {
        if (props.disabled) {
          return;
        }

        var left = e.clientX - sliderRect.left;
        left = Math.max(0, Math.min(sliderRect.width, left));
        var percentLeft = left / sliderRect.width * 100;
        var newPoint = genGradientPoint(percentLeft, props.color.rgba);
        colors.value.push(newPoint);
        handleColorsChange(colors.value, true);
        handleSelectedIdChange(newPoint.id);
      };

      vue.onMounted(function () {
        var rect = refSlider.value.getBoundingClientRect();
        sliderRect.left = rect.left;
        sliderRect.width = rect.width || GRADIENT_SLIDER_DEFAULT_WIDTH;
      });
      vue.onBeforeUnmount(function () {
        window.removeEventListener("mousemove", handleMove, false);
        window.removeEventListener("mouseup", handleEnd, false);
        window.removeEventListener("contextmenu", handleEnd, false);
      });
      return {
        baseClassName: baseClassName,
        statusClassNames: statusClassNames,
        refSlider: refSlider,
        degree: degree,
        selectedId: selectedId,
        colors: colors,
        handleDegreeChange: handleDegreeChange,
        handleStart: handleStart,
        handleMove: handleMove,
        handleEnd: handleEnd,
        handleKeyup: handleKeyup,
        handleThumbBarClick: handleThumbBarClick
      };
    },
    render: function render() {
      var _this = this;

      var _this$color = this.color,
          linearGradient = _this$color.linearGradient,
          gradientColors = _this$color.gradientColors;
      var colors = this.colors,
          selectedId = this.selectedId,
          degree = this.degree,
          disabled = this.disabled,
          baseClassName = this.baseClassName,
          statusClassNames = this.statusClassNames;
      var thumbBackground = gradientColors2string({
        points: gradientColors,
        degree: 90
      });
      return vue.createVNode("div", {
        "class": "".concat(baseClassName, "__gradient")
      }, [vue.createVNode("div", {
        "class": "".concat(baseClassName, "__gradient-slider")
      }, [vue.createVNode("div", {
        "class": ["".concat(baseClassName, "__slider"), "".concat(baseClassName, "--bg-alpha")],
        "onKeyup": this.handleKeyup,
        "tabindex": 0,
        "ref": "refSlider"
      }, [vue.createVNode("ul", {
        "class": "gradient-thumbs",
        "onClick": this.handleThumbBarClick,
        "style": {
          background: thumbBackground
        }
      }, [colors.map(function (t) {
        var left = "".concat(Math.round(t.left * 100) / 100, "%");
        return vue.createVNode("li", {
          "class": ["".concat(baseClassName, "__thumb"), "gradient-thumbs__item", selectedId === t.id ? statusClassNames.active : ""],
          "key": t.id,
          "title": "".concat(t.color, " ").concat(left),
          "style": {
            color: t.color,
            left: left
          },
          "onClick": function onClick(e) {
            return e.stopPropagation();
          },
          "onMousedown": function onMousedown(e) {
            return _this.handleStart(t.id, e);
          }
        }, [vue.createVNode("span", {
          "class": ["gradient-thumbs__item-inner", "".concat(baseClassName, "--bg-alpha")]
        }, null)]);
      })])])]), vue.createVNode("div", {
        "class": "".concat(baseClassName, "__gradient-degree"),
        "title": "".concat(degree, "deg")
      }, [vue.createVNode(vue.resolveComponent("t-input-number"), {
        "theme": "normal",
        "min": 0,
        "max": 360,
        "step": 1,
        "format": function format(value) {
          return "".concat(value, "\xB0");
        },
        "modelValue": _this.degree,
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return _this.degree = $event;
        },
        "onBlur": this.handleDegreeChange,
        "onEnter": this.handleDegreeChange,
        "disabled": disabled
      }, null)]), vue.createVNode("div", {
        "class": ["".concat(baseClassName, "__gradient-preview"), "".concat(baseClassName, "--bg-alpha")]
      }, [vue.createVNode("span", {
        "class": "preview-inner",
        "style": {
          background: linearGradient
        }
      }, null)])]);
    }
  });

  function ownKeys$O(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$N(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$O(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$O(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var SaturationPanel = vue.defineComponent({
    name: "SaturationPanel",
    components: {
      TSelect: Select,
      TOption: Option
    },
    props: _objectSpread$N({}, baseProps),
    setup: function setup(props) {
      var baseClassName = useBaseClassName();
      var refPanel = vue.ref(null);
      var refThumb = vue.ref(null);
      var dragInstance = vue.ref(null);
      var panelRect = vue.reactive({
        width: SATURATION_PANEL_DEFAULT_WIDTH,
        height: SATURATION_PANEL_DEFAULT_HEIGHT
      });
      var styles = vue.computed(function () {
        var _props$color = props.color,
            saturation = _props$color.saturation,
            value = _props$color.value;
        var width = panelRect.width,
            height = panelRect.height;
        var top = Math.round((1 - value) * height);
        var left = Math.round(saturation * width);
        return {
          color: props.color.rgb,
          left: "".concat(left, "px"),
          top: "".concat(top, "px")
        };
      });

      var getSaturationAndValueByCoordinate = function getSaturationAndValueByCoordinate(coordinate) {
        var width = panelRect.width,
            height = panelRect.height;
        var x = coordinate.x,
            y = coordinate.y;
        var saturation = Math.round(x / width * 100);
        var value = Math.round((1 - y / height) * 100);
        return {
          saturation: saturation,
          value: value
        };
      };

      var handleDrag = function handleDrag(coordinate, isEnded) {
        if (props.disabled) {
          return;
        }

        var _getSaturationAndValu = getSaturationAndValueByCoordinate(coordinate),
            saturation = _getSaturationAndValu.saturation,
            value = _getSaturationAndValu.value;

        props.onChange({
          saturation: saturation / 100,
          value: value / 100,
          addUsedColor: isEnded
        });
      };

      var handleDragEnd = function handleDragEnd(coordinate) {
        if (props.disabled) {
          return;
        }

        vue.nextTick(function () {
          handleDrag(coordinate, true);
        });
      };

      var panelBackground = vue.computed(function () {
        return "hsl(".concat(props.color.hue, ", 100%, 50%)");
      });
      vue.onMounted(function () {
        panelRect.width = refPanel.value.offsetWidth || SATURATION_PANEL_DEFAULT_WIDTH;
        panelRect.height = refPanel.value.offsetHeight || SATURATION_PANEL_DEFAULT_HEIGHT;
        dragInstance.value = new Draggable(refPanel.value, {
          start: function start() {
            panelRect.width = refPanel.value.offsetWidth;
            panelRect.height = refPanel.value.offsetHeight;
          },
          drag: function drag(coordinate) {
            handleDrag(coordinate);
          },
          end: handleDragEnd
        });
      });
      vue.onBeforeUnmount(function () {
        dragInstance.value.destroy();
      });
      return {
        baseClassName: baseClassName,
        refThumb: refThumb,
        refPanel: refPanel,
        styles: styles,
        panelBackground: panelBackground
      };
    },
    render: function render() {
      var baseClassName = this.baseClassName,
          styles = this.styles,
          panelBackground = this.panelBackground;
      return vue.createVNode("div", {
        "class": ["".concat(baseClassName, "__saturation")],
        "ref": "refPanel",
        "style": {
          background: panelBackground
        }
      }, [vue.createVNode("span", {
        "class": ["".concat(baseClassName, "__thumb")],
        "role": "slider",
        "tabindex": 0,
        "ref": "refThumb",
        "style": styles
      }, null)]);
    }
  });

  function ownKeys$N(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$M(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$N(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$N(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var ColorSlider = vue.defineComponent({
    name: "ColorSlider",
    components: {
      TSelect: Select,
      TOption: Option
    },
    props: _objectSpread$M(_objectSpread$M({}, baseProps), {}, {
      className: {
        type: String,
        "default": ""
      },
      value: {
        type: Number,
        "default": 0
      },
      maxValue: {
        type: Number,
        "default": 360
      },
      railStyle: {
        type: Object
      }
    }),
    setup: function setup(props) {
      var baseClassName = useBaseClassName();
      var refPanel = vue.ref(null);
      var refThumb = vue.ref(null);
      var dragInstance = vue.ref(null);
      var panelRect = vue.reactive({
        width: SLIDER_DEFAULT_WIDTH
      });
      var styles = vue.computed(function () {
        var width = panelRect.width;

        if (!width) {
          return;
        }

        var left = Math.round(props.value / props.maxValue * width);
        return {
          left: "".concat(left, "px"),
          color: props.color.rgb
        };
      });

      var handleDrag = function handleDrag(coordinate, isEnded) {
        if (props.disabled) {
          return;
        }

        var width = panelRect.width;
        var x = coordinate.x;
        var value = Math.round(x / width * props.maxValue * 100) / 100;
        props.onChange(value, isEnded);
      };

      var handleDragEnd = function handleDragEnd(coordinate) {
        if (props.disabled) {
          return;
        }

        handleDrag(coordinate, true);
      };

      vue.onMounted(function () {
        panelRect.width = refPanel.value.offsetWidth || SLIDER_DEFAULT_WIDTH;
        dragInstance.value = new Draggable(refPanel.value, {
          start: function start() {
            panelRect.width = refPanel.value.offsetWidth;
          },
          drag: function drag(coordinate) {
            handleDrag(coordinate);
          },
          end: handleDragEnd
        });
      });
      vue.onBeforeUnmount(function () {
        dragInstance.value.destroy();
      });
      return {
        baseClassName: baseClassName,
        refThumb: refThumb,
        refPanel: refPanel,
        styles: styles
      };
    },
    render: function render() {
      var baseClassName = this.baseClassName,
          className = this.className,
          railStyle = this.railStyle,
          styles = this.styles;
      return vue.createVNode("div", {
        "class": ["".concat(baseClassName, "__slider"), className],
        "ref": "refPanel"
      }, [vue.createVNode("div", {
        "class": "".concat(baseClassName, "__rail"),
        "style": railStyle
      }, null), vue.createVNode("span", {
        "class": ["".concat(baseClassName, "__thumb")],
        "role": "slider",
        "tabindex": 0,
        "ref": "refThumb",
        "style": styles
      }, null)]);
    }
  });

  function ownKeys$M(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$L(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$M(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$M(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var HueSlider = vue.defineComponent({
    name: "HueSlider",
    components: {
      ColorSlider: ColorSlider
    },
    inheritAttrs: false,
    props: _objectSpread$L({}, baseProps),
    setup: function setup() {
      var baseClassName = useBaseClassName();
      return {
        baseClassName: baseClassName
      };
    },
    render: function render() {
      return vue.createVNode(vue.resolveComponent("color-slider"), {
        "className": "".concat(this.baseClassName, "__hue"),
        "color": this.color,
        "value": this.color.hue,
        "onChange": this.onChange,
        "disabled": this.disabled
      }, null);
    }
  });

  var AlphaSlider = vue.defineComponent({
    name: "AlphaSlider",
    components: {
      ColorSlider: ColorSlider
    },
    inheritAttrs: false,
    props: {
      color: {
        type: Object
      },
      disabled: {
        type: Boolean,
        "default": false
      },
      onChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    },
    setup: function setup(props) {
      var baseClassName = useBaseClassName();

      var handleChange = function handleChange(v, isDragEnd) {
        props.onChange(v / 100, isDragEnd);
      };

      var railStyle = vue.computed(function () {
        return {
          background: "linear-gradient(to right, rgba(0, 0, 0, 0), ".concat(props.color.rgb, ")")
        };
      });
      return {
        baseClassName: baseClassName,
        railStyle: railStyle,
        handleChange: handleChange
      };
    },
    render: function render() {
      var baseClassName = this.baseClassName;
      return vue.createVNode(vue.resolveComponent("color-slider"), {
        "class": ["".concat(baseClassName, "__alpha"), "".concat(baseClassName, "--bg-alpha")],
        "color": this.color,
        "value": this.color.alpha * 100,
        "onChange": this.handleChange,
        "rail-style": this.railStyle,
        "max-value": 100,
        "disabled": this.disabled
      }, null);
    }
  });

  var createCompounder = _createCompounder;
  /**
   * Converts `string`, as space separated words, to upper case.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the upper cased string.
   * @example
   *
   * _.upperCase('--foo-bar');
   * // => 'FOO BAR'
   *
   * _.upperCase('fooBar');
   * // => 'FOO BAR'
   *
   * _.upperCase('__foo_bar__');
   * // => 'FOO BAR'
   */

  var upperCase = createCompounder(function (result, word, index) {
    return result + (index ? ' ' : '') + word.toUpperCase();
  });
  var upperCase_1 = upperCase;

  var debounce = debounce_1,
      isObject$1 = isObject_1;
  /** Error message constants. */

  var FUNC_ERROR_TEXT = 'Expected a function';
  /**
   * Creates a throttled function that only invokes `func` at most once per
   * every `wait` milliseconds. The throttled function comes with a `cancel`
   * method to cancel delayed `func` invocations and a `flush` method to
   * immediately invoke them. Provide `options` to indicate whether `func`
   * should be invoked on the leading and/or trailing edge of the `wait`
   * timeout. The `func` is invoked with the last arguments provided to the
   * throttled function. Subsequent calls to the throttled function return the
   * result of the last `func` invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the throttled function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.throttle` and `_.debounce`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to throttle.
   * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=true]
   *  Specify invoking on the leading edge of the timeout.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new throttled function.
   * @example
   *
   * // Avoid excessively updating the position while scrolling.
   * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
   *
   * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
   * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
   * jQuery(element).on('click', throttled);
   *
   * // Cancel the trailing throttled invocation.
   * jQuery(window).on('popstate', throttled.cancel);
   */

  function throttle$1(func, wait, options) {
    var leading = true,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }

    if (isObject$1(options)) {
      leading = 'leading' in options ? !!options.leading : leading;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }

    return debounce(func, wait, {
      'leading': leading,
      'maxWait': wait,
      'trailing': trailing
    });
  }

  var throttle_1 = throttle$1;

  var FORMAT_INPUT_CONFIG = {
    RGB: [{
      key: "r",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "g",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "b",
      min: 0,
      max: 255,
      type: "inputNumber"
    }],
    HSV: [{
      key: "h",
      min: 0,
      max: 360,
      type: "inputNumber"
    }, {
      key: "s",
      min: 0,
      max: 100,
      type: "inputNumber"
    }, {
      key: "v",
      min: 0,
      max: 100,
      type: "inputNumber"
    }],
    HSL: [{
      key: "h",
      min: 0,
      max: 360,
      type: "inputNumber"
    }, {
      key: "s",
      min: 0,
      max: 100,
      type: "inputNumber"
    }, {
      key: "l",
      min: 0,
      max: 100,
      type: "inputNumber"
    }],
    CMYK: [{
      key: "c",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "m",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "y",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "k",
      min: 0,
      max: 255,
      type: "inputNumber"
    }],
    CSS: [{
      key: "css",
      type: "input",
      flex: 3
    }],
    HEX: [{
      key: "hex",
      type: "input",
      flex: 3
    }]
  };

  function ownKeys$L(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$K(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$L(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$L(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var FormatInputs = vue.defineComponent({
    name: "FormatInputs",
    components: {
      TSelect: Select,
      TOption: Option,
      TInput: Input,
      TInputNumber: InputNumber
    },
    inheritAttrs: false,
    props: _objectSpread$K(_objectSpread$K({}, props$j), {}, {
      color: {
        type: Object
      },
      onInputChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    }),
    setup: function setup(props2) {
      var inputConfigs = vue.computed(function () {
        var configs = _toConsumableArray(FORMAT_INPUT_CONFIG[props2.format]);

        if (props2.enableAlpha) {
          configs.push({
            type: "inputNumber",
            key: "a",
            min: 0,
            max: 100,
            format: function format(value) {
              return "".concat(value, "%");
            },
            flex: 1.15
          });
        }

        return configs;
      });
      var modelValue = vue.reactive({});
      var lastModelValue = vue.reactive({});

      var getFormatColorMap = function getFormatColorMap(type) {
        var color = props2.color;

        if (type === "encode") {
          return {
            HSV: color.getHsva(),
            HSL: color.getHsla(),
            RGB: color.getRgba(),
            CMYK: color.getCmyk(),
            CSS: {
              css: color.css
            },
            HEX: {
              hex: color.hex
            }
          };
        }

        return {
          HSV: Color.object2color(modelValue, "HSV"),
          HSL: Color.object2color(modelValue, "HSL"),
          RGB: Color.object2color(modelValue, "RGB"),
          CMYK: Color.object2color(modelValue, "CMYK"),
          CSS: modelValue.css,
          HEX: modelValue.hex
        };
      };

      var updateModelValue = function updateModelValue() {
        var format = props2.format,
            color = props2.color;
        var values = getFormatColorMap("encode")[format];
        values.a = Math.round(color.alpha * 100);
        Object.keys(values).forEach(function (key) {
          modelValue[key] = values[key];
          lastModelValue[key] = values[key];
        });
      };

      updateModelValue();
      var throttleUpdate = throttle_1(updateModelValue, 100);
      vue.watch(function () {
        var _props2$color = props2.color,
            saturation = _props2$color.saturation,
            hue = _props2$color.hue,
            value = _props2$color.value,
            alpha = _props2$color.alpha;
        return [saturation, hue, value, alpha, props2.format];
      }, throttleUpdate);

      var handleChange = function handleChange(key, v) {
        if (v === lastModelValue[key]) {
          return;
        }

        var value = getFormatColorMap("decode")[props2.format];
        props2.onInputChange(value, modelValue.a / 100, key, v);
      };

      return {
        modelValue: modelValue,
        inputConfigs: inputConfigs,
        handleChange: handleChange
      };
    },
    render: function render() {
      var _this = this;

      var inputProps = _objectSpread$K({}, this.inputProps || {});

      return vue.createVNode("div", {
        "class": "input-group"
      }, [this.inputConfigs.map(function (config) {
        return vue.createVNode("div", {
          "class": "input-group__item",
          "key": config.key,
          "style": {
            flex: config.flex || 1
          }
        }, [config.type === "input" ? vue.createVNode(vue.resolveComponent("t-input"), vue.mergeProps(inputProps, {
          "align": "center",
          "disabled": _this.disabled,
          "modelValue": _this.modelValue[config.key],
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return _this.modelValue[config.key] = $event;
          },
          "maxlength": _this.format === "HEX" ? 9 : void 0,
          "title": _this.modelValue[config.key],
          "onBlur": function onBlur(v) {
            return _this.handleChange(config.key, v);
          },
          "onEnter": function onEnter(v) {
            return _this.handleChange(config.key, v);
          }
        }), null) : vue.createVNode(vue.resolveComponent("t-input-number"), vue.mergeProps(inputProps, {
          "align": "center",
          "disabled": _this.disabled,
          "modelValue": _this.modelValue[config.key],
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return _this.modelValue[config.key] = $event;
          },
          "title": _this.modelValue[config.key],
          "min": config.min,
          "max": config.max,
          "step": 1,
          "format": config.format,
          "theme": "normal",
          "onBlur": function onBlur(v) {
            return _this.handleChange(config.key, v);
          },
          "onEnter": function onEnter(v) {
            return _this.handleChange(config.key, v);
          }
        }), null)]);
      })]);
    }
  });

  function ownKeys$K(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$J(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$K(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$K(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot$b(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var FormatPanel = vue.defineComponent({
    name: "FormatPanel",
    components: {
      TSelect: Select,
      TInput: Input,
      TOption: Option,
      FormatInputs: FormatInputs
    },
    inheritAttrs: false,
    props: _objectSpread$J(_objectSpread$J({}, props$j), {}, {
      color: {
        type: Object
      },
      onModeChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      },
      onInputChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    }),
    setup: function setup(props2) {
      var baseClassName = useBaseClassName();
      var formatModel = vue.ref(props2.format);
      vue.watch(function () {
        return [props2.format];
      }, function () {
        return formatModel.value = props2.format;
      });

      var handleModeChange = function handleModeChange(v) {
        formatModel.value = v;
        props2.onModeChange(v);
      };

      return {
        formatModel: formatModel,
        baseClassName: baseClassName,
        handleModeChange: handleModeChange
      };
    },
    render: function render() {
      var _this = this;

      var _slot;

      var formats = _toConsumableArray(FORMATS);

      var baseClassName = this.baseClassName,
          handleModeChange = this.handleModeChange;

      var newProps = _objectSpread$J(_objectSpread$J({}, this.$props), {}, {
        format: this.formatModel
      });

      var selectInputProps = _objectSpread$J({}, this.selectInputProps || {});

      return vue.createVNode("div", {
        "className": "".concat(baseClassName, "__format")
      }, [vue.createVNode("div", {
        "className": "".concat(baseClassName, "__format--item")
      }, [vue.createVNode(vue.resolveComponent("t-select"), vue.mergeProps(selectInputProps, {
        "popupProps": {
          overlayClassName: "".concat(baseClassName, "__select-options")
        },
        "modelValue": _this.formatModel,
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return _this.formatModel = $event;
        },
        "onChange": handleModeChange
      }), _isSlot$b(_slot = formats.map(function (item) {
        return vue.createVNode(vue.resolveComponent("t-option"), {
          "key": item,
          "value": item,
          "label": upperCase_1(item),
          "style": {
            fontSize: "12px"
          }
        }, null);
      })) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      })]), vue.createVNode("div", {
        "className": "".concat(baseClassName, "__format--item")
      }, [vue.createVNode(vue.resolveComponent("format-inputs"), newProps, null)])]);
    }
  });

  function ownKeys$J(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$I(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$J(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$J(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var SwatchesPanel = vue.defineComponent({
    name: "SwatchesPanel",
    components: {
      TSelect: Select,
      TOption: Option,
      TButton: Button
    },
    props: _objectSpread$I(_objectSpread$I({}, baseProps), {}, {
      colors: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      title: {
        type: String,
        "default": "\u7CFB\u7EDF\u8272\u5F69"
      },
      editable: {
        type: Boolean,
        "default": false
      },
      onSetColor: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      },
      handleAddColor: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    }),
    setup: function setup(props) {
      var baseClassName = useBaseClassName();

      var _useCommonClassName = useCommonClassName$2(),
          STATUS = _useCommonClassName.STATUS;

      var statusClassNames = STATUS.value;
      var visiblePopConfirm = vue.ref(false);

      var setVisiblePopConfirm = function setVisiblePopConfirm(visible) {
        visiblePopConfirm.value = visible;
      };

      var handleClick = function handleClick(color) {
        return props.onSetColor(color);
      };

      var isEqualCurrentColor = function isEqualCurrentColor(color) {
        return Color.compare(color, props.color.css);
      };

      var selectedColorIndex = vue.computed(function () {
        return props.colors.findIndex(function (color) {
          return isEqualCurrentColor(color);
        });
      });

      var handleRemoveColor = function handleRemoveColor() {
        var colors = _toConsumableArray(props.colors);

        var selectedIndex = selectedColorIndex.value;

        if (selectedIndex > -1) {
          colors.splice(selectedIndex, 1);
        } else {
          colors.length = 0;
        }

        props.onChange(colors);
        setVisiblePopConfirm(false);
      };

      return {
        baseClassName: baseClassName,
        statusClassNames: statusClassNames,
        selectedColorIndex: selectedColorIndex,
        visiblePopConfirm: visiblePopConfirm,
        setVisiblePopConfirm: setVisiblePopConfirm,
        handleClick: handleClick,
        isEqualCurrentColor: isEqualCurrentColor,
        handleRemoveColor: handleRemoveColor
      };
    },
    render: function render() {
      var _this = this;

      var baseClassName = this.baseClassName,
          statusClassNames = this.statusClassNames,
          title = this.title,
          editable = this.editable;
      var swatchesClass = "".concat(baseClassName, "__swatches");

      var renderActions = function renderActions() {
        if (!editable) {
          return null;
        }

        return vue.createVNode("div", {
          "class": "".concat(swatchesClass, "--actions")
        }, [vue.createVNode("span", {
          "role": "button",
          "class": "".concat(baseClassName, "__icon"),
          "onClick": function onClick() {
            return _this.handleAddColor();
          }
        }, [vue.createVNode(add, null, null)]), _this.colors.length > 0 ? vue.createVNode("span", {
          "role": "button",
          "class": "".concat(baseClassName, "__icon"),
          "onClick": function onClick() {
            return _this.handleRemoveColor();
          }
        }, [vue.createVNode(_delete, null, null)]) : null]);
      };

      return vue.createVNode("div", {
        "class": swatchesClass
      }, [vue.createVNode("h3", {
        "class": "".concat(swatchesClass, "--title")
      }, [vue.createVNode("span", null, [title]), renderActions()]), vue.createVNode("ul", {
        "class": ["".concat(swatchesClass, "--items"), "narrow-scrollbar"]
      }, [this.colors.map(function (color) {
        return vue.createVNode("li", {
          "class": ["".concat(swatchesClass, "--item"), _this.isEqualCurrentColor(color) && editable ? statusClassNames.active : ""],
          "title": color,
          "key": color,
          "onClick": function onClick() {
            if (_this.disabled) {
              return;
            }

            _this.handleClick(color);
          }
        }, [vue.createVNode("div", {
          "class": ["".concat(swatchesClass, "--color"), "".concat(baseClassName, "--bg-alpha")]
        }, [vue.createVNode("span", {
          "class": "".concat(swatchesClass, "--inner"),
          "style": {
            background: color
          }
        }, null)])]);
      })])]);
    }
  });

  function ownKeys$I(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$H(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$I(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$I(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var ColorPanel = vue.defineComponent({
    name: "ColorPanel",
    components: {
      PanelHeader: PanelHeader,
      LinearGradient: LinearGradient,
      SaturationPanel: SaturationPanel,
      HueSlider: HueSlider,
      AlphaSlider: AlphaSlider,
      FormatPanel: FormatPanel,
      SwatchesPanel: SwatchesPanel
    },
    props: _objectSpread$H(_objectSpread$H({}, props$j), {}, {
      togglePopup: {
        type: Function
      }
    }),
    setup: function setup(props2) {
      var baseClassName = useBaseClassName();

      var _useCommonClassName = useCommonClassName$2(),
          STATUS = _useCommonClassName.STATUS;

      var _useConfig = useConfig("colorPicker"),
          t = _useConfig.t,
          global = _useConfig.global;

      var statusClassNames = STATUS.value;

      var _toRefs = vue.toRefs(props2),
          inputValue = _toRefs.value,
          modelValue = _toRefs.modelValue,
          recentColors = _toRefs.recentColors;

      var _useVModel = useVModel(inputValue, modelValue, props2.defaultValue, props2.onChange),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          innerValue = _useVModel2[0],
          setInnerValue = _useVModel2[1];

      var color = vue.ref(new Color(innerValue.value || DEFAULT_COLOR));

      var updateColor = function updateColor() {
        return color.value.update(innerValue.value || DEFAULT_COLOR);
      };

      var mode = vue.ref(color.value.isGradient ? "linear-gradient" : "monochrome");
      var formatModel = vue.ref(color.value.isGradient ? "CSS" : "RGB");

      var _useDefaultValue = useDefaultValue(recentColors, props2.defaultRecentColors, props2.onRecentColorsChange, "recentColors"),
          _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
          recentlyUsedColors = _useDefaultValue2[0],
          setRecentlyUsedColors = _useDefaultValue2[1];

      if (props2.colorModes.length === 1) {
        var m = props2.colorModes[0];
        mode.value = m;
      }

      var formatValue = function formatValue() {
        if (mode.value === "linear-gradient") {
          return color.value.linearGradient;
        }

        return color.value.getFormatsColorMap()[props2.format] || color.value.css;
      };

      var addRecentlyUsedColor = function addRecentlyUsedColor() {
        if (recentlyUsedColors.value === null || recentlyUsedColors.value === false) {
          return;
        }

        var colors = recentlyUsedColors.value || [];
        var currentColor = color.value.isGradient ? color.value.linearGradient : color.value.rgba;
        var index = colors.indexOf(currentColor);

        if (index > -1) {
          colors.splice(index, 1);
        }

        colors.unshift(currentColor);

        if (colors.length > TD_COLOR_USED_COLORS_MAX_SIZE) {
          colors.length = TD_COLOR_USED_COLORS_MAX_SIZE;
        }

        handleRecentlyUsedColorsChange(colors);
      };

      var handleRecentlyUsedColorsChange = function handleRecentlyUsedColorsChange(colors) {
        recentlyUsedColors.value = colors;
        setRecentlyUsedColors(colors);
      };

      var emitColorChange = function emitColorChange(trigger) {
        setInnerValue(formatValue(), {
          color: getColorObject(color.value),
          trigger: trigger || "palette-saturation-brightness"
        });
      };

      vue.watch(function () {
        return [props2.defaultValue, props2.enableAlpha];
      }, updateColor);
      vue.watch(function () {
        return innerValue.value;
      }, function (newColor) {
        if (newColor !== formatValue()) {
          updateColor();
          mode.value = color.value.isGradient ? "linear-gradient" : "monochrome";
        }
      });

      var handleModeChange = function handleModeChange(value) {
        mode.value = value;

        if (value === "linear-gradient") {
          color.value.update(color.value.gradientColors.length > 0 ? color.value.linearGradient : DEFAULT_LINEAR_GRADIENT);
          return;
        }

        color.value.update(color.value.rgba);
      };

      var handleFormatModeChange = function handleFormatModeChange(format) {
        return formatModel.value = format;
      };

      var handleSatAndValueChange = function handleSatAndValueChange(_ref) {
        var saturation = _ref.saturation,
            value = _ref.value;
        var _color$value = color.value,
            sat = _color$value.saturation,
            val = _color$value.value;
        var changeTrigger = "palette-saturation-brightness";

        if (value !== val && saturation !== sat) {
          color.value.saturation = saturation;
          color.value.value = value;
          changeTrigger = "palette-saturation-brightness";
        } else if (saturation !== sat) {
          color.value.saturation = saturation;
          changeTrigger = "palette-saturation";
        } else if (value !== val) {
          color.value.value = value;
          changeTrigger = "palette-brightness";
        } else {
          return;
        }

        emitColorChange(changeTrigger);
      };

      var handleHueChange = function handleHueChange(hue) {
        var _props2$onPaletteBarC;

        color.value.hue = hue;
        emitColorChange("palette-hue-bar");
        (_props2$onPaletteBarC = props2.onPaletteBarChange) === null || _props2$onPaletteBarC === void 0 ? void 0 : _props2$onPaletteBarC.call(props2, {
          color: getColorObject(color.value)
        });
      };

      var handleAlphaChange = function handleAlphaChange(alpha) {
        color.value.alpha = alpha;
        emitColorChange("palette-alpha-bar");
      };

      var handleInputChange = function handleInputChange(input, alpha) {
        color.value.update(input);
        color.value.alpha = alpha;
        emitColorChange("input");
      };

      var handleGradientChange = function handleGradientChange(_ref2) {
        var key = _ref2.key,
            payload = _ref2.payload;
        var trigger = "palette-saturation-brightness";

        switch (key) {
          case "degree":
            color.value.gradientDegree = payload;
            trigger = "input";
            break;

          case "selectedId":
            color.value.gradientSelectedId = payload;
            break;

          case "colors":
            color.value.gradientColors = payload;
            break;
        }

        emitColorChange(trigger);
      };

      var handleSetColor = function handleSetColor(type, value) {
        var isGradientValue = Color.isGradientColor(value);

        if (isGradientValue) {
          if (props2.colorModes.includes("linear-gradient")) {
            mode.value = "linear-gradient";
            color.value.update(value);
            color.value.updateCurrentGradientColor();
          } else {
            console.warn("\u8BE5\u6A21\u5F0F\u4E0D\u652F\u6301\u6E10\u53D8\u8272");
          }
        } else if (mode.value === "linear-gradient") {
          color.value.updateStates(value);
          color.value.updateCurrentGradientColor();
        } else {
          color.value.update(value);
        }

        emitColorChange();
      };

      return {
        baseClassName: baseClassName,
        statusClassNames: statusClassNames,
        t: t,
        global: global,
        color: color,
        mode: mode,
        formatModel: formatModel,
        recentlyUsedColors: recentlyUsedColors,
        addRecentlyUsedColor: addRecentlyUsedColor,
        handleModeChange: handleModeChange,
        handleSatAndValueChange: handleSatAndValueChange,
        handleHueChange: handleHueChange,
        handleAlphaChange: handleAlphaChange,
        handleGradientChange: handleGradientChange,
        handleSetColor: handleSetColor,
        handleFormatModeChange: handleFormatModeChange,
        handleInputChange: handleInputChange,
        handleRecentlyUsedColorsChange: handleRecentlyUsedColorsChange
      };
    },
    render: function render() {
      var _systemColors,
          _this = this;

      var baseClassName = this.baseClassName,
          statusClassNames = this.statusClassNames,
          t = this.t,
          global = this.global,
          recentColors = this.recentColors;
          this.recentlyUsedColors;
          var swatchColors = this.swatchColors;
      var baseProps = {
        color: this.color,
        disabled: this.disabled
      };
      var showUsedColors = recentColors !== null && recentColors !== false;
      var systemColors = swatchColors;

      if (systemColors === void 0) {
        systemColors = _toConsumableArray(DEFAULT_SYSTEM_SWATCH_COLORS);
      }

      var showSystemColors = ((_systemColors = systemColors) === null || _systemColors === void 0 ? void 0 : _systemColors.length) > 0;

      var renderSwatches = function renderSwatches() {
        if (!showSystemColors && !showUsedColors) {
          return null;
        }

        return vue.createVNode(vue.Fragment, null, [vue.createVNode("div", {
          "class": "".concat(baseClassName, "__swatches-wrap")
        }, [showUsedColors ? vue.createVNode(vue.resolveComponent("swatches-panel"), vue.mergeProps(baseProps, {
          "title": t(global.recentColorTitle),
          "editable": true,
          "colors": _this.recentlyUsedColors,
          "handleAddColor": _this.addRecentlyUsedColor,
          "onSetColor": function onSetColor(color) {
            return _this.handleSetColor("used", color);
          },
          "onChange": _this.handleRecentlyUsedColorsChange
        }), null) : null, showSystemColors ? vue.createVNode(vue.resolveComponent("swatches-panel"), vue.mergeProps(baseProps, {
          "title": t(global.swatchColorTitle),
          "colors": systemColors,
          "onSetColor": function onSetColor(color) {
            return _this.handleSetColor("system", color);
          }
        }), null) : null])]);
      };

      return vue.createVNode("div", {
        "class": ["".concat(baseClassName, "__panel"), this.disabled ? statusClassNames.disabled : false],
        "onClick": function onClick(e) {
          return e.stopPropagation();
        }
      }, [vue.createVNode(vue.resolveComponent("panel-header"), vue.mergeProps(this.$props, {
        "mode": this.mode,
        "onModeChange": this.handleModeChange
      }), null), vue.createVNode("div", {
        "class": ["".concat(baseClassName, "__body")]
      }, [this.mode === "linear-gradient" ? vue.createVNode(vue.resolveComponent("linear-gradient"), vue.mergeProps(baseProps, {
        "onChange": this.handleGradientChange
      }), null) : null, vue.createVNode(vue.resolveComponent("saturation-panel"), vue.mergeProps(baseProps, {
        "onChange": this.handleSatAndValueChange
      }), null), vue.createVNode(vue.resolveComponent("hue-slider"), vue.mergeProps(baseProps, {
        "onChange": this.handleHueChange
      }), null), this.enableAlpha ? vue.createVNode(vue.resolveComponent("alpha-slider"), vue.mergeProps(baseProps, {
        "onChange": this.handleAlphaChange
      }), null) : null, vue.createVNode(vue.resolveComponent("format-panel"), vue.mergeProps(this.$props, {
        "color": this.color,
        "format": this.formatModel,
        "onModeChange": this.handleFormatModeChange,
        "onInputChange": this.handleInputChange
      }), null), renderSwatches()])]);
    }
  });

  function ownKeys$H(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$G(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$H(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$H(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _ColorPickerPanel = vue.defineComponent({
    name: "TColorPickerPanel",
    props: _objectSpread$G({}, props$j),
    setup: function setup(props2, _ref) {
      var attrs = _ref.attrs;
      var prefix = usePrefixClass();
      return function () {
        return vue.createVNode(ColorPanel, vue.mergeProps(_objectSpread$G(_objectSpread$G({}, props2), attrs), {
          "popupProps": null,
          "close-btn": false,
          "class": "".concat(prefix.value, "-is-inline")
        }), null);
      };
    }
  });

  var DefaultTrigger = vue.defineComponent({
    name: "DefaultTrigger",
    components: {
      TInput: Input,
      TInputNumber: InputNumber
    },
    inheritAttrs: false,
    props: {
      color: {
        type: String,
        "default": ""
      },
      disabled: {
        type: Boolean,
        "default": false
      },
      inputProps: {
        type: Object,
        "default": function _default() {
          return {
            autoWidth: true
          };
        }
      },
      onTriggerChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    },
    setup: function setup(props) {
      var baseClassName = useBaseClassName();
      var value = vue.ref(props.color);
      vue.watch(function () {
        return [props.color];
      }, function () {
        return value.value = props.color;
      });

      var handleChange = function handleChange(input) {
        if (input === props.color) {
          return;
        }

        if (!Color.isValid(input)) {
          value.value = props.color;
        } else {
          value.value = input;
        }

        props.onTriggerChange(value.value);
      };

      return {
        baseClassName: baseClassName,
        value: value,
        handleChange: handleChange
      };
    },
    render: function render() {
      var _this = this;

      var baseClassName = this.baseClassName;
      var inputSlots = {
        label: function label() {
          return vue.createVNode("div", {
            "class": ["".concat(baseClassName, "__trigger--default__color"), "".concat(baseClassName, "--bg-alpha")]
          }, [vue.createVNode("span", {
            "class": ["color-inner"],
            "style": {
              background: _this.value
            }
          }, null)]);
        }
      };
      return vue.createVNode("div", {
        "class": "".concat(baseClassName, "__trigger--default")
      }, [vue.createVNode(vue.resolveComponent("t-input"), vue.mergeProps(this.inputProps, {
        "modelValue": _this.value,
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return _this.value = $event;
        },
        "disabled": this.disabled,
        "onBlur": this.handleChange
      }), inputSlots)]);
    }
  });

  function ownKeys$G(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$F(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$G(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$G(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _ColorPicker = vue.defineComponent({
    name: "TColorPicker",
    props: _objectSpread$F({}, props$j),
    setup: function setup(props2) {
      var baseClassName = useBaseClassName();
      var visible = vue.ref(false);

      var setVisible = function setVisible(value) {
        return visible.value = value;
      };

      var _toRefs = vue.toRefs(props2),
          inputValue = _toRefs.value,
          modelValue = _toRefs.modelValue;

      var _useVModel = useVModel(inputValue, modelValue, props2.defaultValue, props2.onChange),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          innerValue = _useVModel2[0],
          setInnerValue = _useVModel2[1];

      var refTrigger = vue.ref();

      var renderPopupContent = function renderPopupContent() {
        if (props2.disabled) {
          return null;
        }

        var newProps = _objectSpread$F({}, props2);

        delete newProps.onChange;
        return vue.createVNode(ColorPanel, vue.mergeProps(newProps, {
          "disabled": props2.disabled,
          "value": innerValue.value,
          "togglePopup": setVisible,
          "onChange": function onChange(value, context) {
            return setInnerValue(value, context);
          }
        }), null);
      };

      return {
        baseClassName: baseClassName,
        innerValue: innerValue,
        visible: visible,
        refTrigger: refTrigger,
        renderPopupContent: renderPopupContent,
        setVisible: setVisible,
        setInnerValue: setInnerValue
      };
    },
    render: function render() {
      var _this = this;

      var popupProps = this.popupProps,
          disabled = this.disabled,
          baseClassName = this.baseClassName;

      var popProps = _objectSpread$F(_objectSpread$F({
        placement: "bottom-left"
      }, popupProps || {}), {}, {
        trigger: "click",
        attach: "body",
        overlayClassName: [baseClassName],
        visible: this.visible,
        overlayStyle: {
          padding: 0
        },
        onVisibleChange: function onVisibleChange(visible, context) {
          if (context.trigger === "document") {
            _this.setVisible(false);
          }
        }
      });

      return vue.createVNode(Popup, vue.mergeProps(popProps, {
        "content": this.renderPopupContent
      }), {
        "default": function _default() {
          return [vue.createVNode("div", {
            "className": "".concat(baseClassName, "__trigger"),
            "onClick": function onClick() {
              return _this.setVisible(!_this.visible);
            },
            "ref": "refTrigger"
          }, [renderTNodeJSXDefault(_this, "default", vue.createVNode(DefaultTrigger, {
            "color": _this.innerValue,
            "disabled": disabled,
            "input-props": _this.inputProps,
            "onTriggerChange": _this.setInnerValue
          }, null))])];
        }
      });
    }
  });

  var ColorPickerPanel = withInstall(_ColorPickerPanel);
  var ColorPicker = withInstall(_ColorPicker);

  var props$i = {
    alt: {
      type: String,
      "default": ""
    },
    hideOnLoadFailed: Boolean,
    icon: {
      type: Function
    },
    image: {
      type: String,
      "default": ""
    },
    shape: {
      type: String,
      "default": "circle",
      validator: function validator(val) {
        return ["circle", "round"].includes(val);
      }
    },
    size: {
      type: String,
      "default": ""
    },
    onError: Function
  };

  function ownKeys$F(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$E(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$F(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$F(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Avatar = vue.defineComponent({
    name: "TAvatar",
    props: props$i,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("avatar");
      var renderContent = useContent();
      var renderTNodeJSX = useTNodeJSX();

      var _useCommonClassName = useCommonClassName$2(),
          SIZE = _useCommonClassName.SIZE;

      var avatarGroup = vue.inject("avatarGroup", void 0);
      var avatar = vue.ref(null);
      var avatarChild = vue.ref(null);
      var isImgExist = vue.ref(true);
      var gap = vue.ref(4);
      var sizeValue = vue.ref("");
      var scale = vue.ref("");
      var isCustomSize = vue.computed(function () {
        return sizeValue.value && !SIZE.value[sizeValue.value];
      });
      var customAvatarSize = vue.computed(function () {
        return isCustomSize.value ? {
          width: sizeValue.value,
          height: sizeValue.value,
          "font-size": "".concat(Number.parseInt(sizeValue.value, 10) / 2, "px")
        } : {};
      });
      var customImageSize = vue.computed(function () {
        return isCustomSize.value ? {
          height: sizeValue.value,
          width: sizeValue.value
        } : {};
      });
      var customCharacterSize = vue.computed(function () {
        return {
          transform: scale.value
        };
      });

      var handleImgLoadError = function handleImgLoadError() {
        var _props2$onError;

        var hideOnLoadFailed = props2.hideOnLoadFailed;
        isImgExist.value = !hideOnLoadFailed;
        (_props2$onError = props2.onError) === null || _props2$onError === void 0 ? void 0 : _props2$onError.call(props2);
      };

      var setScaleParams = function setScaleParams() {
        var $avatar = avatar.value;
        var $avatarChild = avatarChild.value;
        var avatarWidth = $avatar === null || $avatar === void 0 ? void 0 : $avatar.offsetWidth;
        var avatarChildWidth = $avatarChild === null || $avatarChild === void 0 ? void 0 : $avatarChild.offsetWidth;

        if (gap.value * 2 < avatarWidth) {
          scale.value = avatarChildWidth > avatarWidth - gap.value * 2 ? "scale(".concat((avatarWidth - gap.value * 2) / avatarChildWidth, ")") : "scale(1)";
        }
      };

      vue.onMounted(function () {
        sizeValue.value = props2.size || (avatarGroup === null || avatarGroup === void 0 ? void 0 : avatarGroup.size);
        vue.nextTick(function () {
          setScaleParams();
        });
      });
      vue.onUpdated(function () {
        vue.nextTick(function () {
          setScaleParams();
        });
      });
      return function () {
        var _ref;

        var content = renderContent("default", "content");
        var icon = renderTNodeJSX("icon");
        var isIconOnly = icon && !content;
        var shape = props2.shape,
            image = props2.image,
            alt = props2.alt;
        var avatarClass = ["".concat(COMPONENT_NAME.value), SIZE[sizeValue.value], (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--circle"), shape === "circle"), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--round"), shape === "round"), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "__icon"), !!isIconOnly), _ref)];

        content = vue.createVNode("span", {
          "ref": avatarChild,
          "style": _objectSpread$E({}, customCharacterSize.value)
        }, [content]);

        if (icon) {
          content = [icon, !isIconOnly ? content : ""];
        }

        if (image && isImgExist.value) {
          content = vue.createVNode("img", {
            "style": _objectSpread$E({}, customImageSize.value),
            "src": image,
            "alt": alt,
            "onError": handleImgLoadError
          }, null);
        }

        return vue.createVNode("div", {
          "ref": avatar,
          "class": avatarClass,
          "style": _objectSpread$E({}, customAvatarSize.value)
        }, [content]);
      };
    }
  });

  var props$h = {
    cascading: {
      type: String,
      "default": "right-up",
      validator: function validator(val) {
        return ["left-up", "right-up"].includes(val);
      }
    },
    collapseAvatar: {
      type: [String, Function]
    },
    max: {
      type: Number
    },
    placement: {
      type: String,
      validator: function validator(val) {
        return ["left", "top", "bottom", "right"].includes(val);
      }
    },
    popupProps: {
      type: Object
    },
    size: {
      type: String,
      "default": "medium"
    }
  };

  function _isSlot$a(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var _AvatarGroup = vue.defineComponent({
    name: "TAvatarGroup",
    components: {
      Avatar: _Avatar
    },
    props: props$h,
    setup: function setup(props2) {
      vue.provide("avatarGroup", props2);
      var renderContent = useContent();
      var renderTNodeJSX = useTNodeJSX();
      var AVATAR_NAME = usePrefixClass("avatar");
      var COMPONENT_NAME = usePrefixClass("avatar-group");

      var isIcon = function isIcon() {
        var content = renderTNodeJSX("collapseAvatar");
        return content;
      };

      var renderIcon = function renderIcon() {
        return isIcon() && typeof props2.collapseAvatar !== "string" ? props2.collapseAvatar : null;
      };

      var renderEllipsisAvatar = function renderEllipsisAvatar(children) {
        if ((children === null || children === void 0 ? void 0 : children.length) > props2.max) {
          var content = setEllipsisContent(children);
          var outAvatar = children.slice(0, props2.max);
          outAvatar.push(vue.createVNode(_Avatar, {
            "size": props2.size,
            "icon": renderIcon()
          }, _isSlot$a(content) ? content : {
            "default": function _default() {
              return [content];
            }
          }));
          return [outAvatar];
        }

        return [children];
      };

      var setEllipsisContent = function setEllipsisContent(children) {
        var content = "";

        if (props2.collapseAvatar) {
          if (!isIcon()) {
            content = renderContent("collapseAvatar", "content");
          }
        } else {
          content = "+".concat(children.length - props2.max);
        }

        return content;
      };

      return function () {
        var _ref;

        var children = renderTNodeJSX("default");
        var cascading = props2.cascading,
            max = props2.max;
        var groupClass = ["".concat(COMPONENT_NAME.value), (_ref = {}, _defineProperty$3(_ref, "".concat(AVATAR_NAME.value, "--offset-right"), cascading === "right-up"), _defineProperty$3(_ref, "".concat(AVATAR_NAME.value, "--offset-left"), cascading === "left-up"), _ref)];
        var content = [children];

        if (max && max >= 0) {
          content = [renderEllipsisAvatar(children)];
        }

        return vue.createVNode("div", {
          "class": groupClass
        }, [content]);
      };
    }
  });

  var Avatar = withInstall(_Avatar);
  var AvatarGroup = withInstall(_AvatarGroup);

  var props$g = {
    color: {
      type: String,
      "default": ""
    },
    content: {
      type: [String, Function]
    },
    count: {
      type: [String, Number, Function],
      "default": 0
    },
    "default": {
      type: [String, Function]
    },
    dot: Boolean,
    maxCount: {
      type: Number,
      "default": 99
    },
    offset: {
      type: Array
    },
    shape: {
      type: String,
      "default": "circle",
      validator: function validator(val) {
        return ["circle", "round"].includes(val);
      }
    },
    showZero: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium"].includes(val);
      }
    }
  };

  function ownKeys$E(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$D(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$E(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$E(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Badge = vue.defineComponent({
    name: "TBadge",
    props: _objectSpread$D({}, props$g),
    setup: function setup(props2) {
      var renderTNodeJSX = useTNodeJSX();
      var content = vue.computed(function () {
        if (props2.dot) return "";

        if (typeof props2.count === "function") {
          return renderTNodeJSX("count");
        }

        if (Number.isNaN(Number(props2.count))) {
          return props2.count;
        }

        var count = Number(props2.count);
        return count > props2.maxCount ? "".concat(props2.maxCount, "+") : count;
      });

      var renderChildren = function renderChildren() {
        return renderTNodeJSX("default");
      };

      var getOffset = function getOffset() {
        if (!props2.offset) return {};

        var _props2$offset = _slicedToArray(props2.offset, 2),
            xOffset = _props2$offset[0],
            yOffset = _props2$offset[1];

        xOffset = Number.isNaN(Number(xOffset)) ? xOffset : "".concat(xOffset, "px");
        yOffset = Number.isNaN(Number(yOffset)) ? yOffset : "".concat(yOffset, "px");
        return {
          xOffset: xOffset,
          yOffset: yOffset
        };
      };

      var _useConfig = useConfig("classPrefix"),
          classPrefix = _useConfig.classPrefix;

      var name = "".concat(classPrefix.value, "-badge");
      var isHidden = vue.computed(function () {
        return !props2.showZero && (content.value === 0 || content.value === "0");
      });
      var badgeClassNames = vue.computed(function () {
        var _ref;

        return [(_ref = {}, _defineProperty$3(_ref, "".concat(name, "--dot"), !!props2.dot), _defineProperty$3(_ref, "".concat(name, "--circle"), !props2.dot && props2.shape === "circle"), _defineProperty$3(_ref, "".concat(name, "--round"), props2.shape === "round"), _defineProperty$3(_ref, "t-size-s", props2.size === "small"), _ref)];
      });
      var inlineStyle = vue.computed(function () {
        var _getOffset = getOffset(),
            xOffset = _getOffset.xOffset,
            yOffset = _getOffset.yOffset;

        return {
          background: "".concat(props2.color),
          right: xOffset,
          top: yOffset
        };
      });
      return {
        content: content,
        inlineStyle: inlineStyle,
        badgeClassNames: badgeClassNames,
        isHidden: isHidden,
        renderChildren: renderChildren,
        name: name
      };
    },
    render: function render() {
      return vue.createVNode("div", vue.mergeProps({
        "class": this.name
      }, this.$attrs), [this.renderChildren(), this.isHidden ? null : vue.createVNode("sup", {
        "class": this.badgeClassNames,
        "style": this.inlineStyle
      }, [this.content])]);
    }
  });

  var Badge = withInstall(_Badge);

  var props$f = {
    cell: {
      type: [String, Function]
    },
    cellAppend: {
      type: [String, Function]
    },
    controllerConfig: {
      type: [Boolean, Object],
      "default": void 0
    },
    fillWithZero: {
      type: Boolean,
      "default": void 0
    },
    firstDayOfWeek: {
      type: Number,
      validator: function validator(val) {
        if (!val) return true;
        return [1, 2, 3, 4, 5, 6, 7].includes(val);
      }
    },
    format: {
      type: String,
      "default": "YYYY-MM-DD"
    },
    head: {
      type: [String, Function]
    },
    isShowWeekendDefault: {
      type: Boolean,
      "default": true
    },
    mode: {
      type: String,
      "default": "month",
      validator: function validator(val) {
        if (!val) return true;
        return ["month", "year"].includes(val);
      }
    },
    month: {
      type: [String, Number]
    },
    preventCellContextmenu: Boolean,
    range: {
      type: Array
    },
    theme: {
      type: String,
      "default": "full",
      validator: function validator(val) {
        if (!val) return true;
        return ["full", "card"].includes(val);
      }
    },
    value: {
      type: [String, Date]
    },
    week: {
      type: [Array, Function]
    },
    year: {
      type: [String, Number]
    },
    onCellClick: Function,
    onCellDoubleClick: Function,
    onCellRightClick: Function,
    onControllerChange: Function,
    onMonthChange: Function
  };

  var COMPONENT_NAME = "calendar";
  var MIN_YEAR = 1970;
  var FIRST_MONTH_OF_YEAR = 1;
  var LAST_MONTH_OF_YEAR = 12;
  var DEFAULT_YEAR_CELL_NUMINROW = 4;
  var DAY_CN_MAP = {
    1: "\u4E00",
    2: "\u4E8C",
    3: "\u4E09",
    4: "\u56DB",
    5: "\u4E94",
    6: "\u516D",
    7: "\u65E5"
  };

  var getDay = function getDay(dt) {
    var day = dayjs(dt).day();

    if (day === 0) {
      day = 7;
    }

    return day;
  };
  var getDayCn = function getDayCn(num) {
    var re = "";
    var numStr = num.toString();

    if (numStr in DAY_CN_MAP) {
      re = DAY_CN_MAP[numStr];
    }

    return re;
  };
  var getCellColIndex = function getCellColIndex(firstDayOfWeek, dt) {
    var re = 0;
    var day = getDay(dt);

    if (day >= firstDayOfWeek) {
      re = day - firstDayOfWeek;
    } else {
      re = 7 - firstDayOfWeek + day;
    }

    return re;
  };
  var addDate = function addDate(dt, days) {
    var d = new Date(dt);
    d.setDate(d.getDate() + days);
    return d;
  };
  var createYearCellsData = function createYearCellsData(year, curDate, format) {
    var monthsArr = [];
    var isCurYear = curDate.year() === year;

    for (var num = FIRST_MONTH_OF_YEAR; num <= LAST_MONTH_OF_YEAR; num++) {
      var date = new Date(year, num - 1);
      var curDateMon = parseInt(curDate.format("M"), 10);
      var isCurrent = isCurYear && curDateMon === num;
      monthsArr.push({
        mode: "year",
        isCurrent: isCurrent,
        date: date,
        formattedDate: dayjs(date).format(format),
        filterDate: null,
        formattedFilterDate: null,
        isShowWeekend: true
      });
    }

    return monthsArr;
  };
  var createMonthCellsData = function createMonthCellsData(year, month, firstDayOfWeek, curDate, format) {
    var daysArr = [];
    var begin = dayjs("".concat(year, "-").concat(month)).startOf("month").toDate();
    var end = dayjs("".concat(year, "-").concat(month)).endOf("month").toDate();
    var days = end.getDate();
    var beginDateColIndex = getCellColIndex(firstDayOfWeek, begin);
    var arr = [];
    var num = 1;

    var createCellData = function createCellData(belongTo, isCurrent, date, weekOrder) {
      var day = getDay(date);
      return {
        mode: "month",
        belongTo: belongTo,
        isCurrent: isCurrent,
        day: day,
        weekOrder: weekOrder,
        date: date,
        formattedDate: dayjs(date).format(format),
        filterDate: null,
        formattedFilterDate: null,
        isShowWeekend: true
      };
    };

    for (var i = 0; i < beginDateColIndex; i++) {
      var date = addDate(begin, i - beginDateColIndex);
      arr.push(createCellData(-1, false, date, num));

      if (arr.length === 7) {
        daysArr.push(arr);
        arr = [];
        num += 1;
      }
    }

    for (var _i = 0; _i < days; _i++) {
      var _date = addDate(begin, _i);

      arr.push(createCellData(0, curDate.isSame(dayjs(_date)), _date, num));

      if (arr.length === 7) {
        daysArr.push(arr);
        arr = [];
        num += 1;
      }
    }

    if (arr.length) {
      var nextMonthCellNum = 7 - arr.length;

      for (var _i2 = 0; _i2 < nextMonthCellNum; _i2++) {
        var _date2 = addDate(end, _i2 + 1);

        arr.push(createCellData(1, false, _date2, num));
      }

      daysArr.push(arr);
    }

    return daysArr;
  };
  var createDefaultCurDate = function createDefaultCurDate() {
    return dayjs(dayjs().format("YYYY-MM-DD"));
  };

  function useState(props) {
    var _useConfig = useConfig(COMPONENT_NAME),
        global = _useConfig.global;

    var state = vue.reactive({
      realFirstDayOfWeek: 1,
      curDate: null,
      curSelectedYear: null,
      curSelectedMonth: null,
      curSelectedMode: null,
      isShowWeekend: true,
      controlSize: "medium"
    });

    function toToday() {
      var curDate = createDefaultCurDate();
      state.curSelectedYear = curDate.year();
      state.curSelectedMonth = parseInt(curDate.format("M"), 10);
    }

    function setCurSelectedYear(year) {
      var curSelectedYear = year ? parseInt("".concat(year), 10) : createDefaultCurDate().year();

      if (!isNaN(curSelectedYear) && curSelectedYear > 0) {
        state.curSelectedYear = curSelectedYear;
      }
    }

    function setCurSelectedMonth(month) {
      var curSelectedMonth = month ? parseInt("".concat(month), 10) : parseInt(createDefaultCurDate().format("M"), 10);

      if (!isNaN(curSelectedMonth) && curSelectedMonth > 0 && curSelectedMonth <= 12) {
        state.curSelectedMonth = curSelectedMonth;
      }
    }

    function setCurrentDate(value) {
      state.curDate = value ? dayjs(value) : createDefaultCurDate();
    }

    function checkDayVisibled(day) {
      var re = true;

      if (!state.isShowWeekend) {
        re = day !== 6 && day !== 7;
      }

      return re;
    }

    vue.watch(function () {
      return props.firstDayOfWeek;
    }, function () {
      var _ref, _props$firstDayOfWeek;

      state.realFirstDayOfWeek = (_ref = (_props$firstDayOfWeek = props.firstDayOfWeek) !== null && _props$firstDayOfWeek !== void 0 ? _props$firstDayOfWeek : global.value.firstDayOfWeek) !== null && _ref !== void 0 ? _ref : 1;
    }, {
      immediate: true
    });
    vue.watch(function () {
      return props.value;
    }, function (v) {
      setCurrentDate(v);
    }, {
      immediate: true
    });
    vue.watch(function () {
      return props.year;
    }, function (v) {
      setCurSelectedYear(v);
    }, {
      immediate: true
    });
    vue.watch(function () {
      return props.month;
    }, function (v) {
      setCurSelectedMonth(v);
    }, {
      immediate: true
    });
    vue.watch(function () {
      return props.isShowWeekendDefault;
    }, function (v) {
      state.isShowWeekend = v;
    }, {
      immediate: true
    });
    vue.watch(function () {
      return props.mode;
    }, function (v) {
      state.curSelectedMode = v;
    }, {
      immediate: true
    });
    return {
      state: state,
      toToday: toToday,
      checkDayVisibled: checkDayVisibled
    };
  }

  function useCalendarClass(props, state) {
    var prefixClass = usePrefixClass(COMPONENT_NAME);
    var body = vue.computed(function () {
      return ["".concat(prefixClass.value), "".concat(prefixClass.value, "--").concat(props.theme)];
    });
    var panel = vue.computed(function () {
      return ["".concat(prefixClass.value, "__panel"), "".concat(prefixClass.value, "__panel--").concat(state.curSelectedMode)];
    });
    var control = vue.computed(function () {
      return ["".concat(prefixClass.value, "__control")];
    });
    var title = vue.computed(function () {
      return ["".concat(prefixClass.value, "__title")];
    });
    var controlSection = vue.computed(function () {
      return ["".concat(prefixClass.value, "__control-section")];
    });
    var controlSectionCell = vue.computed(function () {
      return ["".concat(prefixClass.value, "__control-section-cell")];
    });
    var controlTag = vue.computed(function () {
      return ["".concat(prefixClass.value, "__control-tag")];
    });
    var table = vue.computed(function () {
      return ["".concat(prefixClass.value, "__table")];
    });
    var tableHead = vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-head")];
    });
    var tableHeadRow = vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-head-row")];
    });
    var tableHeadCell = vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-head-cell")];
    });
    var tableBody = vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-body")];
    });
    var tableBodyRow = vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-body-row")];
    });
    return {
      body: body,
      panel: panel,
      control: control,
      title: title,
      controlSection: controlSection,
      controlSectionCell: controlSectionCell,
      controlTag: controlTag,
      table: table,
      tableHead: tableHead,
      tableHeadRow: tableHeadRow,
      tableHeadCell: tableHeadCell,
      tableBody: tableBody,
      tableBodyRow: tableBodyRow
    };
  }
  function useCalendarCellClass() {
    var prefixClass = usePrefixClass(COMPONENT_NAME);
    var tableBodyCell = vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-body-cell")];
    });
    var tableBodyCell4Now = vue.computed(function () {
      return "".concat(prefixClass.value, "__table-body-cell--now");
    });
    var tableBodyCellDisplay = vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-body-cell-display")];
    });
    var tableBodyCellCsontent = vue.computed(function () {
      return ["".concat(prefixClass.value, "__table-body-cell-content")];
    });
    return {
      tableBodyCell: tableBodyCell,
      tableBodyCell4Now: tableBodyCell4Now,
      tableBodyCellDisplay: tableBodyCellDisplay,
      tableBodyCellCsontent: tableBodyCellCsontent
    };
  }

  function ownKeys$D(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$C(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$D(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$D(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var getDefaultControllerConfigData = function getDefaultControllerConfigData() {
    var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    return {
      visible: visible,
      disabled: false,
      mode: {
        visible: true,
        radioGroupProps: {}
      },
      year: {
        visible: true,
        selectProps: {}
      },
      month: {
        visible: true,
        selectProps: {}
      },
      weekend: {
        visible: true,
        showWeekendButtonProps: {},
        hideWeekendButtonProps: {}
      },
      current: {
        visible: true,
        currentDayButtonProps: {},
        currentMonthButtonProps: {}
      }
    };
  };

  function userController(props, state) {
    var _useConfig = useConfig(COMPONENT_NAME),
        global = _useConfig.global;

    var options = vue.computed(function () {
      var dayJsFilterDate = dayjs("".concat(state.curSelectedYear, "-").concat(state.curSelectedMonth));
      var re = {
        isShowWeekend: state.isShowWeekend,
        filterDate: dayJsFilterDate.toDate(),
        formattedFilterDate: dayJsFilterDate.format(props.format),
        mode: state.curSelectedMode
      };
      return re;
    });
    var configData = vue.computed(function () {
      var _ref, _props$controllerConf;

      var controllerConfig = (_ref = (_props$controllerConf = props.controllerConfig) !== null && _props$controllerConf !== void 0 ? _props$controllerConf : global.value.controllerConfig) !== null && _ref !== void 0 ? _ref : true;

      if (typeof controllerConfig === "boolean") {
        return getDefaultControllerConfigData(controllerConfig);
      }

      return _objectSpread$C(_objectSpread$C({}, getDefaultControllerConfigData()), controllerConfig);
    });
    var visible = vue.computed(function () {
      return !!configData.value && configData.value.visible;
    });

    function checkControllerVisible(name) {
      var re = true;
      var conf = configData.value;

      if (!conf || !conf.visible || conf[name] === false || conf[name] && !conf[name].visible) {
        re = false;
      }

      return re;
    }

    function checkControllerDisabled(name, propsName) {
      var re = false;
      var conf = configData.value;

      if (conf && (conf.disabled || conf[name] && conf[name][propsName] && conf[name][propsName].disabled)) {
        re = true;
      }

      return re;
    }

    function emitControllerChange() {
      vue.nextTick(function () {
        typeof props.onControllerChange === "function" && props.onControllerChange(_objectSpread$C({}, options.value));
      });
    }

    return {
      options: options,
      configData: configData,
      visible: visible,
      checkControllerVisible: checkControllerVisible,
      checkControllerDisabled: checkControllerDisabled,
      emitControllerChange: emitControllerChange
    };
  }

  function useColHeaders(props, state) {
    var _useConfig = useConfig(COMPONENT_NAME),
        t = _useConfig.t,
        global = _useConfig.global;

    var weekDipalyText = vue.computed(function () {
      return props.week || t(global.value.week).split(",");
    });

    function getWeekDisplay(weekNum) {
      var weekText = weekDipalyText.value;
      return _typeof$2(weekText) === "object" && weekText[weekNum - 1] ? weekText[weekNum - 1] : getDayCn(weekNum);
    }

    var cellColHeaders = vue.computed(function () {
      var re = [];
      var min = 1;
      var max = 7;

      for (var i = state.realFirstDayOfWeek; i <= max; i++) {
        re.push({
          num: i,
          display: getWeekDisplay(i)
        });
      }

      if (state.realFirstDayOfWeek > min) {
        for (var _i = min; _i < state.realFirstDayOfWeek; _i++) {
          re.push({
            num: _i,
            display: getWeekDisplay(_i)
          });
        }
      }

      return re;
    });
    return {
      cellColHeaders: cellColHeaders
    };
  }

  function ownKeys$C(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$B(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$C(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$C(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var clickTypeEmitEventMap = {
    click: "click",
    dblclick: "dblclick",
    contextmenu: "rightclick"
  };
  var CalendarCellItem = vue.defineComponent({
    name: "TCalendarCell",
    inheritAttrs: false,
    props: {
      item: {
        type: Object,
        "default": function _default() {
          return null;
        }
      },
      fillWithZero: {
        type: Boolean,
        "default": void 0
      },
      theme: {
        type: String,
        "default": function _default() {
          return null;
        }
      },
      t: Function,
      global: Object,
      cell: [String, Function]
    },
    emits: _toConsumableArray(Object.values(clickTypeEmitEventMap)),
    setup: function setup(props, _ref) {
      var emit = _ref.emit;
      var renderContent = useContent();
      var cls = useCalendarCellClass();

      var _useCommonClassName = useCommonClassName$2(),
          STATUS = _useCommonClassName.STATUS;

      var valueDisplay = vue.computed(function () {
        if (props.item.mode === "month") {
          var _ref2, _props$fillWithZero;

          var dateNum = props.item.date.getDate();
          var fillZero = dateNum < 10 && ((_ref2 = (_props$fillWithZero = props.fillWithZero) !== null && _props$fillWithZero !== void 0 ? _props$fillWithZero : props.global.fillWithZero) !== null && _ref2 !== void 0 ? _ref2 : true);
          return fillZero ? "0".concat(dateNum) : dateNum;
        }

        var map = props.t(props.global.cellMonth).split(",");
        return map[props.item.date.getMonth().toString()];
      });
      var allowSlot = vue.computed(function () {
        return props.theme === "full";
      });
      var disabled = vue.computed(function () {
        return props.item.mode === "month" && props.item.belongTo !== 0;
      });
      var cellCls = vue.computed(function () {
        var _ref3;

        var _props$item = props.item,
            mode = _props$item.mode,
            date = _props$item.date,
            formattedDate = _props$item.formattedDate,
            isCurrent = _props$item.isCurrent;
        var isNow = mode === "year" ? new Date().getMonth() === date.getMonth() : formattedDate === dayjs().format("YYYY-MM-DD");
        return [cls.tableBodyCell.value, (_ref3 = {}, _defineProperty$3(_ref3, STATUS.value.disabled, disabled.value), _defineProperty$3(_ref3, STATUS.value.checked, isCurrent), _defineProperty$3(_ref3, cls.tableBodyCell4Now.value, isNow), _ref3)];
      });

      var clickCell = function clickCell(e) {
        if (disabled.value) return;
        var emitName = clickTypeEmitEventMap[e.type];
        emit(emitName, e);
      };

      var renderDefaultNode = function renderDefaultNode() {
        return vue.createVNode(vue.Fragment, null, [vue.createVNode("div", {
          "class": cls.tableBodyCellDisplay.value
        }, [valueDisplay.value]), vue.createVNode("div", {
          "class": cls.tableBodyCellCsontent.value
        }, [allowSlot.value && renderContent("cellAppend", void 0, {
          params: _objectSpread$B({}, props.item)
        })])]);
      };

      return function () {
        return props.item && vue.createVNode("td", {
          "class": cellCls.value,
          "onClick": clickCell,
          "ondblclick": clickCell,
          "oncontextmenu": clickCell
        }, [typeof props.cell === "function" ? props.cell(_objectSpread$B({}, props.item)) : renderContent("cell", void 0, {
          defaultNode: renderDefaultNode(),
          params: _objectSpread$B({}, props.item)
        })]);
      };
    }
  });

  function ownKeys$B(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$A(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$B(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$B(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot$9(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var _Calendar = vue.defineComponent({
    name: "TCalendar",
    props: _objectSpread$A({}, props$f),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var renderContent = useContent();

      var _useConfig = useConfig(COMPONENT_NAME),
          t = _useConfig.t,
          global = _useConfig.global;

      var _useState = useState(props2),
          state = _useState.state,
          toToday = _useState.toToday,
          checkDayVisibled = _useState.checkDayVisibled;

      var cls = useCalendarClass(props2, state);

      var _useColHeaders = useColHeaders(props2, state),
          cellColHeaders = _useColHeaders.cellColHeaders;

      var controller = userController(props2, state);
      var rangeFromTo = vue.computed(function () {
        if (!props2.range || props2.range.length < 2) {
          return null;
        }

        var _props2$range = _slicedToArray(props2.range, 2),
            v1 = _props2$range[0],
            v2 = _props2$range[1];

        if (dayjs(v1).isBefore(dayjs(v2))) {
          return {
            from: v1,
            to: v2
          };
        }

        return {
          from: v2,
          to: v1
        };
      });

      function checkMonthAndYearSelecterDisabled(year, month) {
        var disabled = false;

        if (rangeFromTo.value && rangeFromTo.value.from && rangeFromTo.value.to) {
          var beginYear = dayjs(rangeFromTo.value.from).year();
          var endYear = dayjs(rangeFromTo.value.to).year();

          if (year === beginYear) {
            var beginMon = parseInt(dayjs(rangeFromTo.value.from).format("M"), 10);
            disabled = month < beginMon;
          } else if (year === endYear) {
            var endMon = parseInt(dayjs(rangeFromTo.value.to).format("M"), 10);
            disabled = month > endMon;
          }
        }

        return disabled;
      }

      vue.watch(function () {
        return {
          year: "".concat(state.curSelectedYear),
          month: "".concat(state.curSelectedMonth)
        };
      }, function (v) {
        typeof props2.onMonthChange === "function" && props2.onMonthChange(_objectSpread$A({}, v));
        controller.emitControllerChange();
      });
      var dateSelect = {
        yearSelectOptionList: vue.computed(function () {
          var re = [];
          var begin = state.curSelectedYear - 10;
          var end = state.curSelectedYear + 10;

          if (rangeFromTo.value && rangeFromTo.value.from && rangeFromTo.value.to) {
            begin = dayjs(rangeFromTo.value.from).year();
            end = dayjs(rangeFromTo.value.to).year();
          }

          if (begin < MIN_YEAR) {
            begin = MIN_YEAR;
          }

          if (end < MIN_YEAR) {
            end = MIN_YEAR;
          }

          for (var i = begin; i <= end; i++) {
            var disabled = checkMonthAndYearSelecterDisabled(i, state.curSelectedMonth);
            re.push({
              value: i,
              label: t(global.value.yearSelection, {
                year: i
              }),
              disabled: disabled
            });
          }

          return re;
        }),
        isYearSelectVisible: vue.computed(function () {
          return controller.checkControllerVisible("year");
        }),
        isYearSelectDisabled: vue.computed(function () {
          return controller.checkControllerDisabled("year", "selectProps");
        }),
        monthSelectOptionList: vue.computed(function () {
          var re = [];

          for (var i = FIRST_MONTH_OF_YEAR; i <= LAST_MONTH_OF_YEAR; i++) {
            var disabled = checkMonthAndYearSelecterDisabled(state.curSelectedYear, i);
            re.push({
              value: i,
              label: t(global.value.monthSelection, {
                month: i
              }),
              disabled: disabled
            });
          }

          return re;
        }),
        isMonthSelectVisible: vue.computed(function () {
          return state.curSelectedMode === "month" && controller.checkControllerVisible("month");
        }),
        isMonthSelectDisabled: vue.computed(function () {
          return controller.checkControllerDisabled("month", "selectProps");
        })
      };
      var modeSelect = {
        optionList: vue.computed(function () {
          return [{
            value: "month",
            label: t(global.value.monthRadio)
          }, {
            value: "year",
            label: t(global.value.yearRadio)
          }];
        }),
        isVisible: vue.computed(function () {
          return controller.checkControllerVisible("mode");
        }),
        isDisabled: vue.computed(function () {
          return controller.checkControllerDisabled("mode", "radioGroupProps");
        })
      };
      var weekendBtn = {
        text: vue.computed(function () {
          return state.isShowWeekend ? t(global.value.hideWeekend) : t(global.value.showWeekend);
        }),
        vBind: vue.computed(function () {
          var c = controller.configData.value.weekend;
          return state.isShowWeekend ? c.hideWeekendButtonProps : c.showWeekendButtonProps;
        }),
        isVisible: vue.computed(function () {
          return props2.theme === "full" && controller.checkControllerVisible("current") && controller.checkControllerVisible("weekend");
        }),
        isDisabled: vue.computed(function () {
          var p = state.isShowWeekend ? "hideWeekendButtonProps" : "showWeekendButtonProps";
          return controller.checkControllerDisabled("weekend", p);
        })
      };
      var currentBtn = {
        text: vue.computed(function () {
          return state.curSelectedMode === "month" ? t(global.value.today) : t(global.value.thisMonth);
        }),
        vBind: vue.computed(function () {
          var c = controller.configData.value.current;
          return state.curSelectedMode === "month" ? c.currentDayButtonProps : c.currentMonthButtonProps;
        }),
        isVisible: vue.computed(function () {
          return props2.theme === "full" && controller.checkControllerVisible("current");
        }),
        isDisabled: vue.computed(function () {
          var p = state.curSelectedMode === "month" ? "currentDayButtonProps" : "currentMonthButtonProps";
          return controller.checkControllerDisabled("current", p);
        })
      };

      var renderControl = function renderControl() {
        var _slot, _slot2, _slot3;

        return vue.createVNode("div", {
          "class": cls.control.value
        }, [vue.createVNode("div", {
          "class": cls.title.value
        }, [renderContent("head", void 0, {
          params: _objectSpread$A({}, controller.options.value)
        })]), vue.createVNode("div", {
          "class": cls.controlSection.value
        }, [dateSelect.isYearSelectVisible.value && vue.createVNode("div", {
          "class": cls.controlSectionCell.value
        }, [vue.createVNode(Select, vue.mergeProps({
          "modelValue": state.curSelectedYear,
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return state.curSelectedYear = $event;
          },
          "size": state.controlSize
        }, controller.configData.value.year.selectProps, {
          "disabled": dateSelect.isYearSelectDisabled.value
        }), _isSlot$9(_slot = dateSelect.yearSelectOptionList.value.map(function (item) {
          return vue.createVNode(Option, {
            "key": item.value,
            "value": item.value,
            "label": item.label,
            "disabled": item.disabled
          }, {
            "default": function _default() {
              return [item.label];
            }
          });
        })) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        })]), dateSelect.isMonthSelectVisible.value && vue.createVNode("div", {
          "class": cls.controlSectionCell.value
        }, [vue.createVNode(Select, vue.mergeProps({
          "modelValue": state.curSelectedMonth,
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return state.curSelectedMonth = $event;
          },
          "size": state.controlSize
        }, controller.configData.value.month.selectProps, {
          "disabled": dateSelect.isMonthSelectDisabled.value
        }), _isSlot$9(_slot2 = dateSelect.monthSelectOptionList.value.map(function (item) {
          return vue.createVNode(Option, {
            "key": item.value,
            "value": item.value,
            "label": item.label,
            "disabled": item.disabled
          }, {
            "default": function _default() {
              return [item.label];
            }
          });
        })) ? _slot2 : {
          "default": function _default() {
            return [_slot2];
          }
        })]), modeSelect.isVisible.value && vue.createVNode("div", {
          "class": cls.controlSectionCell.value,
          "style": "height: auto"
        }, [vue.createVNode(RadioGroup, vue.mergeProps({
          "modelValue": state.curSelectedMode,
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return state.curSelectedMode = $event;
          },
          "variant": "default-filled",
          "size": state.controlSize
        }, controller.configData.value.mode.radioGroupProps, {
          "disabled": modeSelect.isDisabled.value,
          "onChange": controller.emitControllerChange
        }), _isSlot$9(_slot3 = modeSelect.optionList.value.map(function (item) {
          return vue.createVNode(RadioButton, {
            "key": item.value,
            "value": item.value
          }, {
            "default": function _default() {
              return [item.label];
            }
          });
        })) ? _slot3 : {
          "default": function _default() {
            return [_slot3];
          }
        })]), weekendBtn.isVisible.value && vue.createVNode("div", {
          "class": cls.controlSectionCell.value
        }, [vue.createVNode(CheckTag, vue.mergeProps({
          "class": cls.controlTag.value,
          "theme": state.isShowWeekend ? "default" : "primary",
          "size": state.controlSize
        }, weekendBtn.vBind.value, {
          "disabled": weekendBtn.isDisabled.value,
          "onClick": function onClick() {
            state.isShowWeekend = !state.isShowWeekend;
            controller.emitControllerChange();
          }
        }), {
          "default": function _default() {
            return [weekendBtn.text.value];
          }
        })]), currentBtn.isVisible.value && vue.createVNode("div", {
          "class": cls.controlSectionCell.value
        }, [vue.createVNode(Button, vue.mergeProps({
          "size": state.controlSize
        }, currentBtn.vBind.value, {
          "disabled": currentBtn.isDisabled.value,
          "onClick": function onClick() {
            toToday();
          }
        }), {
          "default": function _default() {
            return [currentBtn.text.value];
          }
        })])])]);
      };

      var cellClickEmit = function cellClickEmit(eventPropsName, e, cellData) {
        if (typeof props2[eventPropsName] === "function") {
          var options = {
            cell: _objectSpread$A(_objectSpread$A({}, cellData), controller.options.value),
            e: e
          };
          props2[eventPropsName](options);
        }
      };

      var clickCell = function clickCell(e, cellData) {
        state.curDate = dayjs(cellData.date);
        cellClickEmit("onCellClick", e, cellData);
      };

      var doubleClickCell = function doubleClickCell(e, cellData) {
        cellClickEmit("onCellDoubleClick", e, cellData);
      };

      var rightClickCell = function rightClickCell(e, cellData) {
        if (props2.preventCellContextmenu) {
          e.preventDefault();
        }

        cellClickEmit("onCellRightClick", e, cellData);
      };

      var monthCellsData = vue.computed(function () {
        var daysArr = createMonthCellsData(state.curSelectedYear, state.curSelectedMonth, state.realFirstDayOfWeek, state.curDate, props2.format);
        return daysArr;
      });

      var renderMonthBody = function renderMonthBody() {
        return vue.createVNode("table", {
          "class": cls.table.value
        }, [vue.createVNode("thead", {
          "class": cls.tableHead.value
        }, [vue.createVNode("tr", {
          "class": cls.tableHeadRow.value
        }, [cellColHeaders.value.map(function (item, index) {
          return checkDayVisibled(item.num) && vue.createVNode("th", {
            "class": cls.tableHeadCell.value
          }, [Array.isArray(props2.week) ? props2.week[index] : renderContent("week", void 0, {
            defaultNode: vue.createVNode("span", null, [item.display]),
            params: {
              day: item.num
            }
          })]);
        })])]), vue.createVNode("tbody", {
          "class": cls.tableBody.value
        }, [monthCellsData.value.map(function (week, weekIndex) {
          return vue.createVNode("tr", {
            "class": cls.tableBodyRow.value
          }, [week.map(function (item, itemIndex) {
            return (state.isShowWeekend || item.day < 6) && vue.createVNode(CalendarCellItem, {
              "key": "d-".concat(weekIndex, "-").concat(itemIndex),
              "item": item,
              "theme": props2.theme,
              "t": t,
              "global": global.value,
              "cell": props2.cell,
              "fillWithZero": props2.fillWithZero,
              "onClick": function onClick(e) {
                return clickCell(e, item);
              },
              "onDblclick": function onDblclick(e) {
                return doubleClickCell(e, item);
              },
              "onRightclick": function onRightclick(e) {
                return rightClickCell(e, item);
              }
            }, _objectSpread$A({}, slots));
          })]);
        })])]);
      };

      var yearCellsData = vue.computed(function () {
        var re = [];
        var monthsArr = createYearCellsData(state.curSelectedYear, state.curDate, props2.format);
        var rowCount = Math.ceil(monthsArr.length / DEFAULT_YEAR_CELL_NUMINROW);
        var index = 0;

        for (var i = 1; i <= rowCount; i++) {
          var row = [];

          for (var j = 1; j <= DEFAULT_YEAR_CELL_NUMINROW; j++) {
            row.push(monthsArr[index]);
            index += 1;
          }

          re.push(row);
        }

        return re;
      });

      var renderYearBody = function renderYearBody() {
        return vue.createVNode("table", {
          "class": cls.table.value
        }, [vue.createVNode("tbody", {
          "class": cls.tableBody.value
        }, [yearCellsData.value.map(function (cell, cellIndex) {
          return vue.createVNode("tr", {
            "class": cls.tableBodyRow.value
          }, [cell.map(function (item, itemIndex) {
            return vue.createVNode(CalendarCellItem, {
              "key": "m-".concat(cellIndex, "-").concat(itemIndex),
              "item": item,
              "theme": props2.theme,
              "t": t,
              "global": global.value,
              "cell": props2.cell,
              "fillWithZero": props2.fillWithZero,
              "onClick": function onClick(e) {
                return clickCell(e, item);
              },
              "onDblclick": function onDblclick(e) {
                return doubleClickCell(e, item);
              },
              "onRightclick": function onRightclick(e) {
                return rightClickCell(e, item);
              }
            }, _objectSpread$A({}, slots));
          })]);
        })])]);
      };

      return function () {
        return vue.createVNode("div", {
          "class": cls.body.value
        }, [controller.visible.value && renderControl(), vue.createVNode("div", {
          "class": cls.panel.value
        }, [state.curSelectedMode === "month" ? renderMonthBody() : renderYearBody()])]);
      };
    }
  });

  var Calendar = withInstall(_Calendar);

  var props$e = {
    actions: {
      type: [String, Function]
    },
    avatar: {
      type: [String, Function]
    },
    bordered: {
      type: Boolean,
      "default": true
    },
    content: {
      type: [String, Function]
    },
    cover: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    description: {
      type: [String, Function]
    },
    footer: {
      type: [String, Function]
    },
    header: {
      type: [String, Function]
    },
    headerBordered: Boolean,
    hoverShadow: Boolean,
    loading: {
      type: [Boolean, Function],
      "default": false
    },
    shadow: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["medium", "small"].includes(val);
      }
    },
    status: {
      type: String,
      "default": ""
    },
    subtitle: {
      type: [String, Function]
    },
    theme: {
      type: String,
      "default": "normal",
      validator: function validator(val) {
        if (!val) return true;
        return ["normal", "poster1", "poster2"].includes(val);
      }
    },
    title: {
      type: [String, Function]
    }
  };

  var _Card = vue.defineComponent({
    name: "TCard",
    props: props$e,
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var renderTNodeJSX = useTNodeJSX();
      var COMPONENT_NAME = usePrefixClass("card");

      var _useCommonClassName = useCommonClassName$2(),
          SIZE = _useCommonClassName.SIZE;

      var baseCls = vue.computed(function () {
        var defaultClass = [COMPONENT_NAME.value];
        if (props2.size === "small") defaultClass.push("".concat(SIZE.value[props2.size]));
        if (props2.bordered) defaultClass.push("".concat(COMPONENT_NAME.value, "--bordered"));
        if (props2.shadow) defaultClass.push("".concat(COMPONENT_NAME.value, "--shadow"));
        if (props2.hoverShadow) defaultClass.push("".concat(COMPONENT_NAME.value, "--shadow-hover"));
        return defaultClass;
      });
      var headerCls = vue.computed(function () {
        var defaultClass = ["".concat(COMPONENT_NAME.value, "__header")];
        return props2.headerBordered ? defaultClass.concat("".concat(COMPONENT_NAME.value, "__title--bordered")) : ["".concat(COMPONENT_NAME.value, "__header")];
      });
      var headerWrapperCls = usePrefixClass("card__header-wrapper");
      var headerAvatarCls = usePrefixClass("card__avatar");
      var headerTitleCls = usePrefixClass("card__title");
      var headerSubTitleCls = usePrefixClass("card__subtitle");
      var headerDescriptionCls = usePrefixClass("card__description");
      var actionsCls = usePrefixClass("card__actions");
      var bodyCls = usePrefixClass("card__body");
      var coverCls = usePrefixClass("card__cover");
      var footerCls = usePrefixClass("card__footer");
      var footerWrapperCls = usePrefixClass("card__footer-wrapper");
      var isPoster2 = vue.computed(function () {
        return props2.theme === "poster2";
      });
      var showTitle = vue.computed(function () {
        return props2.title || slots.title;
      });
      var showHeader = vue.computed(function () {
        return props2.header || slots.header;
      });
      var showSubtitle = vue.computed(function () {
        return props2.subtitle || slots.subtitle;
      });
      var showAvatar = vue.computed(function () {
        return props2.avatar || slots.avatar;
      });
      var showDescription = vue.computed(function () {
        return props2.description || slots.description;
      });
      var showStatus = vue.computed(function () {
        return props2.status || slots.status;
      });
      var showActions = vue.computed(function () {
        return props2.actions || slots.actions;
      });
      var showFooter = vue.computed(function () {
        return props2.footer || slots.footer;
      });
      var showCover = vue.computed(function () {
        return props2.cover || slots.cover;
      });
      var showLoading = vue.computed(function () {
        return props2.loading || slots.loading;
      });
      var showContent = vue.computed(function () {
        return props2.content || slots.content || props2["default"] || slots["default"];
      });
      var isHeaderRender = vue.computed(function () {
        return showHeader.value || showTitle.value || showSubtitle.value || showDescription.value || showAvatar.value || showStatus.value && isPoster2.value || showActions.value && !isPoster2.value;
      });
      var isFooterRender = vue.computed(function () {
        return showFooter.value || showActions.value && isPoster2.value;
      });

      if (showLoading.value) {
        return renderTNodeJSX("loading") || vue.createVNode(Loading, null, {
          "default": function _default() {
            return [vue.createVNode("div", {
              "class": baseCls.value
            }, null)];
          }
        });
      }

      var renderHeader = function renderHeader() {
        if (showHeader.value) return vue.createVNode("div", {
          "class": headerCls.value
        }, [renderTNodeJSX("header")]);
        return vue.createVNode("div", {
          "class": headerCls.value
        }, [vue.createVNode("div", {
          "class": headerWrapperCls.value
        }, [showAvatar.value && vue.createVNode("div", {
          "class": headerAvatarCls.value
        }, [renderTNodeJSX("avatar")]), vue.createVNode("div", null, [showTitle.value && vue.createVNode("span", {
          "class": headerTitleCls.value
        }, [renderTNodeJSX("title")]), showSubtitle.value && vue.createVNode("span", {
          "class": headerSubTitleCls.value
        }, [renderTNodeJSX("subtitle")]), showDescription.value && vue.createVNode("p", {
          "class": headerDescriptionCls.value
        }, [renderTNodeJSX("description")])])]), showActions.value && !isPoster2.value && vue.createVNode("div", {
          "class": actionsCls.value
        }, [renderTNodeJSX("actions")]), showStatus.value && vue.createVNode("div", {
          "class": actionsCls.value
        }, [renderTNodeJSX("status")])]);
      };

      var renderCover = function renderCover() {
        var textCover = typeof props2.cover === "string";
        return vue.createVNode("div", {
          "class": coverCls.value
        }, [textCover ? vue.createVNode("img", {
          "src": props2.cover
        }, null) : renderTNodeJSX("cover")]);
      };

      return function () {
        return vue.createVNode("div", {
          "class": baseCls.value
        }, [isHeaderRender.value ? renderHeader() : null, showCover.value ? renderCover() : null, showContent.value && vue.createVNode("div", {
          "class": bodyCls.value
        }, [renderTNodeJSX("default") || renderTNodeJSX("content")]), isFooterRender.value && vue.createVNode("div", {
          "class": footerCls.value
        }, [vue.createVNode("div", {
          "class": footerWrapperCls.value
        }, [renderTNodeJSX("footer")]), showActions.value && isPoster2.value && vue.createVNode("div", {
          "class": actionsCls.value
        }, [renderTNodeJSX("actions")])])]);
      };
    }
  });

  var Card = withInstall(_Card);

  var props$d = {
    actions: {
      type: Array
    },
    author: {
      type: [String, Function]
    },
    avatar: {
      type: [String, Object, Function]
    },
    content: {
      type: [String, Function]
    },
    datetime: {
      type: [String, Function]
    },
    quote: {
      type: [String, Function]
    },
    reply: {
      type: [String, Function]
    }
  };

  var _Comment = vue.defineComponent({
    name: "TComment",
    props: props$d,
    setup: function setup() {
      var COMPONENT_NAME = usePrefixClass("comment");
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        var reply = renderTNodeJSX("reply");
        var author = renderTNodeJSX("author");
        var datetime = renderTNodeJSX("datetime");
        var quote = renderTNodeJSX("quote");
        var actions = renderTNodeJSX("actions");
        var content = renderTNodeJSX("content");
        var avatar = renderTNodeJSX("avatar");
        var showAuthorDatetime = vue.computed(function () {
          return author || datetime;
        });
        var replyDom = reply ? vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__reply")
        }, [reply]) : null;
        var quoteDom = quote ? vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__quote")
        }, [quote]) : null;
        var avatarDom = avatar ? vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__avatar")
        }, [typeof avatar === "string" ? vue.createVNode("img", {
          "src": avatar,
          "alt": "",
          "class": "".concat(COMPONENT_NAME.value, "__avatar-image")
        }, null) : avatar]) : null;

        var authorDatetimeDom = showAuthorDatetime.value && vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__author")
        }, [author && vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__name")
        }, [author]), datetime && vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__time")
        }, [datetime])]);

        var renderActions = function renderActions() {
          if (!actions || !actions.length) return null;
          return vue.createVNode("ul", {
            "class": "".concat(COMPONENT_NAME.value, "__actions")
          }, [(Array.isArray(actions) ? actions : [actions]).map(function (action, index) {
            return vue.createVNode("li", {
              "key": "action-".concat(index)
            }, [action]);
          })]);
        };

        var contentDom = vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__content")
        }, [authorDatetimeDom, vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__detail")
        }, [content]), quoteDom, renderActions()]);

        return vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__inner")
        }, [avatarDom, contentDom]), replyDom]);
      };
    }
  });

  var Comment$1 = withInstall(_Comment);

  var props$c = {
    asyncLoading: {
      type: [String, Function]
    },
    footer: {
      type: [String, Function]
    },
    header: {
      type: [String, Function]
    },
    layout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        return ["horizontal", "vertical"].includes(val);
      }
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    split: Boolean,
    stripe: Boolean,
    onLoadMore: Function,
    onScroll: Function
  };

  var LOAD_MORE = "load-more";
  var LOADING = "loading";

  function ownKeys$A(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$A(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$A(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _List = vue.defineComponent({
    name: "TList",
    props: _objectSpread$z({}, props$c),
    setup: function setup(props2) {
      var _useConfig = useConfig("list"),
          global = _useConfig.global;

      var COMPONENT_NAME = usePrefixClass("list");

      var _useCommonClassName = useCommonClassName$2(),
          SIZE = _useCommonClassName.SIZE;

      var renderTNodeJSX = useTNodeJSX();
      var listClass = vue.computed(function () {
        var _ref;

        return ["".concat(COMPONENT_NAME.value), SIZE.value[props2.size], (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--split"), props2.split), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--stripe"), props2.stripe), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--vertical-action"), props2.layout === "vertical"), _ref)];
      });

      var renderContent = function renderContent() {
        var propsHeaderContent = renderTNodeJSX("header");
        var propsFooterContent = renderTNodeJSX("footer");
        return [propsHeaderContent && vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__header")
        }, [propsHeaderContent]), vue.createVNode("ul", {
          "class": "".concat(COMPONENT_NAME.value, "__inner")
        }, [renderTNodeJSX("default")]), propsFooterContent && vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__footer")
        }, [propsFooterContent])];
      };

      var handleScroll = function handleScroll(e) {
        var _props2$onScroll;

        var listElement = e.target;
        var scrollTop = listElement.scrollTop,
            scrollHeight = listElement.scrollHeight,
            clientHeight = listElement.clientHeight;
        (_props2$onScroll = props2.onScroll) === null || _props2$onScroll === void 0 ? void 0 : _props2$onScroll.call(props2, {
          e: e,
          scrollTop: scrollTop,
          scrollBottom: scrollHeight - clientHeight - scrollTop
        });
      };

      var loadingClass = vue.computed(function () {
        return typeof props2.asyncLoading === "string" && ["loading", "load-more"].includes(props2.asyncLoading) ? "".concat(COMPONENT_NAME.value, "__load ").concat(COMPONENT_NAME.value, "__load--").concat(props2.asyncLoading) : "".concat(COMPONENT_NAME.value, "__load");
      });

      var renderLoading = function renderLoading() {
        if (props2.asyncLoading && typeof props2.asyncLoading === "string") {
          if (props2.asyncLoading === LOADING) {
            return vue.createVNode("div", null, [vue.createVNode(Loading, null, null), vue.createVNode("span", null, [global.value.loadingText])]);
          }

          if (props2.asyncLoading === LOAD_MORE) {
            return vue.createVNode("span", null, [global.value.loadingMoreText]);
          }
        }

        return renderTNodeJSX("asyncLoading");
      };

      var handleLoadMore = function handleLoadMore(e) {
        var _props2$onLoadMore;

        if (typeof props2.asyncLoading === "string" && props2.asyncLoading !== LOAD_MORE) return;
        (_props2$onLoadMore = props2.onLoadMore) === null || _props2$onLoadMore === void 0 ? void 0 : _props2$onLoadMore.call(props2, {
          e: e
        });
      };

      return {
        COMPONENT_NAME: COMPONENT_NAME,
        listClass: listClass,
        loadingClass: loadingClass,
        renderLoading: renderLoading,
        renderContent: renderContent,
        handleScroll: handleScroll,
        handleLoadMore: handleLoadMore
      };
    },
    render: function render() {
      var listContent = this.renderContent();
      listContent = [listContent, vue.createVNode("div", {
        "class": this.loadingClass,
        "onClick": this.handleLoadMore
      }, [this.renderLoading()])];
      return vue.createVNode("div", {
        "class": this.listClass,
        "onScroll": this.handleScroll
      }, [listContent]);
    }
  });

  var _ListItem = vue.defineComponent({
    name: "TListItem",
    props: props$c,
    setup: function setup() {
      var COMPONENT_NAME = usePrefixClass("list-item");
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        var propsContent = renderTNodeJSX("content");
        var propsDefaultContent = renderTNodeJSX("default");
        var propsActionContent = renderTNodeJSX("action");
        return vue.createVNode("li", {
          "class": COMPONENT_NAME.value
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-main")
        }, [propsDefaultContent || propsContent, propsActionContent && vue.createVNode("li", {
          "class": "".concat(COMPONENT_NAME.value, "__action")
        }, [propsActionContent])])]);
      };
    }
  });

  var props$b = {
    avatar: {
      type: [String, Function]
    },
    description: {
      type: [String, Function]
    },
    image: {
      type: [String, Function]
    },
    title: {
      type: [String, Function]
    }
  };

  var _ListItemMeta = vue.defineComponent({
    name: "TListItemMeta",
    props: props$b,
    setup: function setup(props2, ctx) {
      var COMPONENT_NAME = usePrefixClass("list-item__meta");
      var renderContent = useContent();
      var renderTNodeJSX = useTNodeJSX();

      var renderAvatar = function renderAvatar() {
        if (props2.avatar || ctx.slots.avatar) {
          console.warn("`avatar` is going to be deprecated, please use `image` instead");
        }

        var thumbnail = renderContent("avatar", "image");
        if (!thumbnail) return;

        if (typeof thumbnail === "string") {
          return vue.createVNode("div", {
            "class": "".concat(COMPONENT_NAME.value, "-avatar")
          }, [vue.createVNode("img", {
            "src": thumbnail
          }, null)]);
        }

        return vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-avatar")
        }, [thumbnail]);
      };

      return function () {
        var propsTitleContent = renderTNodeJSX("title");
        var propsDescriptionContent = renderTNodeJSX("description");
        var listItemMetaContent = [renderAvatar(), vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "-content")
        }, [propsTitleContent && vue.createVNode("h3", {
          "class": "".concat(COMPONENT_NAME.value, "-title")
        }, [propsTitleContent]), propsDescriptionContent && vue.createVNode("p", {
          "class": "".concat(COMPONENT_NAME.value, "-description")
        }, [propsDescriptionContent])])];
        return vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [listItemMetaContent]);
      };
    }
  });

  var List = withInstall(_List);
  var ListItem = withInstall(_ListItem);
  var ListItemMeta = withInstall(_ListItemMeta);

  var PRO_THEME = {
    LINE: "line",
    PLUMP: "plump",
    CIRCLE: "circle"
  };
  var CIRCLE_SIZE = {
    SMALL: "small",
    MEDIUM: "medium",
    LARGE: "large"
  };
  var CIRCLE_SIZE_PX = {
    SMALL: 72,
    MEDIUM: 112,
    LARGE: 160
  };
  var CIRCLE_FONT_SIZE_RATIO = {
    SMALL: 14 / CIRCLE_SIZE_PX.SMALL,
    MEDIUM: 20 / CIRCLE_SIZE_PX.MEDIUM,
    LARGE: 36 / CIRCLE_SIZE_PX.LARGE
  };
  var STATUS_ICON = ["success", "error", "warning"];

  var props$a = {
    color: {
      type: [String, Object, Array],
      "default": ""
    },
    label: {
      type: [String, Boolean, Function],
      "default": true
    },
    percentage: {
      type: Number,
      "default": 0
    },
    size: {
      type: [String, Number],
      "default": "medium"
    },
    status: {
      type: String,
      validator: function validator(val) {
        return ["success", "error", "warning", "active"].includes(val);
      }
    },
    strokeWidth: {
      type: [String, Number]
    },
    theme: {
      type: String,
      "default": "line",
      validator: function validator(val) {
        return ["line", "plump", "circle"].includes(val);
      }
    },
    trackColor: {
      type: String,
      "default": ""
    }
  };

  var _Progress = vue.defineComponent({
    name: "TProgress",
    props: props$a,
    setup: function setup(props2) {
      var renderTNodeJSX = useTNodeJSX();
      var COMPONENT_NAME = usePrefixClass("progress");
      var statusStyle = vue.computed(function () {
        if (props2.percentage >= 100) {
          return "success";
        }

        return props2.status || "default";
      });
      var trackBgStyle = vue.computed(function () {
        var style = {};

        if (props2.strokeWidth) {
          var height = typeof props2.strokeWidth === "string" ? props2.strokeWidth : "".concat(props2.strokeWidth, "px");
          style.height = height;
          style.borderRadius = height;
        }

        if (props2.trackColor) {
          style.backgroundColor = props2.trackColor;
        }

        return style;
      });
      var barStyle = vue.computed(function () {
        return {
          width: "".concat(props2.percentage, "%"),
          background: props2.color && getBackgroundColor(props2.color)
        };
      });
      var circlePathStyle = vue.computed(function () {
        var strokeColor = _typeof$2(props2.color) === "object" ? "" : props2.color;
        return {
          stroke: strokeColor
        };
      });
      var diameter = vue.computed(function () {
        var diameter2 = CIRCLE_SIZE_PX.MEDIUM;

        if (!props2.size) {
          return diameter2;
        }

        var SMALL = CIRCLE_SIZE.SMALL,
            LARGE = CIRCLE_SIZE.LARGE,
            MEDIUM = CIRCLE_SIZE.MEDIUM;

        switch (props2.size) {
          case SMALL:
            diameter2 = CIRCLE_SIZE_PX.SMALL;
            break;

          case MEDIUM:
            diameter2 = CIRCLE_SIZE_PX.MEDIUM;
            break;

          case LARGE:
            diameter2 = CIRCLE_SIZE_PX.LARGE;
            break;

          default:
            diameter2 = Number(props2.size);
            break;
        }

        return diameter2;
      });
      var rPoints = vue.computed(function () {
        return diameter.value / 2;
      });
      var radius = vue.computed(function () {
        return rPoints.value - circleStrokeWidth.value / 2;
      });
      var circleStyle = vue.computed(function () {
        if (props2.theme !== PRO_THEME.CIRCLE) {
          return {};
        }

        var fontSize = diameter.value * CIRCLE_FONT_SIZE_RATIO.MEDIUM;

        if (diameter.value <= CIRCLE_SIZE_PX.SMALL) {
          fontSize = diameter.value * CIRCLE_FONT_SIZE_RATIO.SMALL;
        } else if (diameter.value >= CIRCLE_SIZE_PX.LARGE) {
          fontSize = diameter.value * CIRCLE_FONT_SIZE_RATIO.LARGE;
        }

        return {
          width: "".concat(diameter.value, "px"),
          height: "".concat(diameter.value, "px"),
          fontSize: "".concat(fontSize, "px")
        };
      });
      var circleStrokeWidth = vue.computed(function () {
        var defaultWidth = props2.size === CIRCLE_SIZE.SMALL ? 4 : 6;
        return props2.strokeWidth ? Number(props2.strokeWidth) : defaultWidth;
      });
      var strokeDashArr = vue.computed(function () {
        var radius2 = (diameter.value - circleStrokeWidth.value) / 2;
        var perimeter = Math.PI * 2 * radius2;
        var percent = props2.percentage / 100;
        return "".concat(perimeter * percent, "  ").concat(perimeter * (1 - percent));
      });

      var getIconMap = function getIconMap() {
        var CIRCLE_ICONS = {
          success: check,
          warning: error,
          error: close
        };
        var NORMAL_ICONS = {
          success: checkCircleFilled,
          warning: errorCircleFilled,
          error: closeCircleFilled
        };
        return props2.theme === PRO_THEME.CIRCLE ? CIRCLE_ICONS : NORMAL_ICONS;
      };

      var getLabelContent = function getLabelContent() {
        var labelContent = "".concat(props2.percentage, "%");
        var status = props2.status || "";

        if (STATUS_ICON.includes(status) && props2.theme !== PRO_THEME.PLUMP) {
          var components = getIconMap();
          var component = components[status];

          if (component) {
            labelContent = vue.createVNode(component, {
              "class": ["".concat(COMPONENT_NAME.value, "__icon")]
            }, null);
          }
        }

        return labelContent;
      };

      return function () {
        var labelContent = vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__info")
        }, [renderTNodeJSX("label", getLabelContent())]);

        var PLUMP_SEPARATE = 10;
        var separateClasses = props2.percentage > PLUMP_SEPARATE ? "".concat(COMPONENT_NAME.value, "--over-ten") : "".concat(COMPONENT_NAME.value, "--under-ten");
        return vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [props2.theme === PRO_THEME.LINE && vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "--thin ").concat(COMPONENT_NAME.value, "--status--").concat(statusStyle.value)
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__bar"),
          "style": trackBgStyle.value
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__inner"),
          "style": barStyle.value
        }, null)]), labelContent]), props2.theme === PRO_THEME.PLUMP && vue.createVNode("div", {
          "class": ["".concat(COMPONENT_NAME.value, "__bar ").concat(COMPONENT_NAME.value, "--plump ").concat(separateClasses), _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--status--").concat(statusStyle.value), statusStyle.value)],
          "style": trackBgStyle.value
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__inner"),
          "style": barStyle.value
        }, [props2.percentage > PLUMP_SEPARATE && labelContent]), props2.percentage <= PLUMP_SEPARATE && labelContent]), props2.theme === PRO_THEME.CIRCLE && vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "--circle ").concat(COMPONENT_NAME.value, "--status--").concat(statusStyle.value),
          "style": circleStyle.value
        }, [labelContent, vue.createVNode("svg", {
          "width": diameter.value,
          "height": diameter.value,
          "viewBox": "0 0 ".concat(diameter.value, " ").concat(diameter.value)
        }, [vue.createVNode("circle", {
          "cx": rPoints.value,
          "cy": rPoints.value,
          "r": radius.value,
          "stroke-width": circleStrokeWidth.value,
          "stroke": props2.trackColor,
          "fill": "none",
          "class": ["".concat(COMPONENT_NAME.value, "__circle-outer")]
        }, null), props2.percentage > 0 && vue.createVNode("circle", {
          "cx": rPoints.value,
          "cy": rPoints.value,
          "r": radius.value,
          "stroke-width": circleStrokeWidth.value,
          "fill": "none",
          "stroke-linecap": "round",
          "class": ["".concat(COMPONENT_NAME.value, "__circle-inner")],
          "transform": "matrix(0,-1,1,0,0,".concat(diameter.value, ")"),
          "stroke-dasharray": strokeDashArr.value,
          "style": circlePathStyle.value
        }, null)])])]);
      };
    }
  });

  var Progress = withInstall(_Progress);

  var props$9 = {
    animation: {
      type: String,
      validator: function validator(val) {
        return ["gradient", "flashed"].includes(val);
      }
    },
    loading: {
      type: Boolean,
      "default": true
    },
    rowCol: {
      type: Array
    },
    theme: {
      type: String,
      validator: function validator(val) {
        return ["text", "avatar", "paragraph", "avatar-text", "tab", "article"].includes(val);
      }
    }
  };

  function ownKeys$z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$z(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var ThemeMap = {
    text: [1],
    avatar: [{
      type: "circle",
      size: "56px"
    }],
    paragraph: [1, 1, {
      width: "70%"
    }],
    "avatar-text": [[{
      type: "circle"
    }, {
      type: "text",
      height: "32px"
    }]],
    tab: [{
      height: "30px"
    }, {
      height: "200px"
    }],
    article: [{
      type: "rect",
      height: "30px",
      width: "100%"
    }, {
      type: "rect",
      height: "200px",
      width: "100%"
    }, [{
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }], [{
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }], [{
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }], [{
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }]]
  };

  var getColItemStyle = function getColItemStyle(obj) {
    var styleName = ["width", "height", "marginRight", "marginLeft", "margin", "size", "background", "backgroundColor"];
    var style = /* @__PURE__ */Object.create(null);
    styleName.forEach(function (name) {
      if (name in obj) {
        var px = isNumber_1(obj[name]) ? "".concat(obj[name], "px") : obj[name];

        if (name === "size") {
          var _ref = [px, px];
          style.width = _ref[0];
          style.height = _ref[1];
        } else {
          style[name] = px;
        }
      }
    });
    return style;
  };

  var _Skeleton = vue.defineComponent({
    name: "TSkeleton",
    props: _objectSpread$y({}, props$9),
    setup: function setup(props2, _ref2) {
      var slots = _ref2.slots;
      var COMPONENT_NAME = usePrefixClass("skeleton");
      var renderContent = useContent();

      var getColItemClass = function getColItemClass(obj) {
        return ["".concat(COMPONENT_NAME.value, "__col"), "".concat(COMPONENT_NAME.value, "--type-").concat(obj.type || "text"), _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--animation-").concat(props2.animation), props2.animation)];
      };

      var renderCols = function renderCols(_cols) {
        var cols = [];

        if (Array.isArray(_cols)) {
          cols = _cols;
        } else if (isNumber_1(_cols)) {
          cols = new Array(_cols).fill({
            type: "text"
          });
        } else {
          cols = [_cols];
        }

        return cols.map(function (obj) {
          return vue.createVNode("div", {
            "class": getColItemClass(obj),
            "style": getColItemStyle(obj)
          }, [isFunction_1(obj.content) ? obj.content(vue.h) : obj.content]);
        });
      };

      var renderRowCol = function renderRowCol(_rowCol) {
        var rowCol = _rowCol || props2.rowCol;

        var getBlockClass = function getBlockClass() {
          return ["".concat(COMPONENT_NAME.value, "__row")];
        };

        return rowCol.map(function (item) {
          return vue.createVNode("div", {
            "class": getBlockClass()
          }, [renderCols(item)]);
        });
      };

      return function () {
        var content = renderContent("default", "content");

        if (slots["default"] && !props2.loading) {
          return vue.createVNode("div", null, [content]);
        }

        if (!props2.loading) {
          return;
        }

        var children = [];

        if (props2.theme) {
          children.push(renderRowCol(ThemeMap[props2.theme]));
        }

        if (props2.rowCol) {
          children.push(renderRowCol(props2.rowCol));
        }

        if (!props2.theme && !props2.rowCol) {
          children.push(renderRowCol([1, 1, 1, {
            width: "70%"
          }]));
        }

        return vue.createVNode("div", {
          "class": COMPONENT_NAME.value
        }, [children]);
      };
    }
  });

  var Skeleton = withInstall(_Skeleton);

  var props$8 = {
    animation: {
      type: String,
      "default": "slide",
      validator: function validator(val) {
        if (!val) return true;
        return ["slide", "fade"].includes(val);
      }
    },
    autoplay: {
      type: Boolean,
      "default": true
    },
    current: {
      type: Number,
      "default": 0
    },
    defaultCurrent: {
      type: Number,
      "default": 0
    },
    direction: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        if (!val) return true;
        return ["horizontal", "vertical"].includes(val);
      }
    },
    duration: {
      type: Number,
      "default": 300
    },
    height: {
      type: Number
    },
    interval: {
      type: Number,
      "default": 5e3
    },
    loop: {
      type: Boolean,
      "default": true
    },
    navigation: {
      type: [Object, Function]
    },
    stopOnHover: {
      type: Boolean,
      "default": true
    },
    theme: {
      type: String,
      "default": "light",
      validator: function validator(val) {
        if (!val) return true;
        return ["light", "dark"].includes(val);
      }
    },
    trigger: {
      type: String,
      "default": "hover",
      validator: function validator(val) {
        if (!val) return true;
        return ["hover", "click"].includes(val);
      }
    },
    type: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "card"].includes(val);
      }
    },
    onChange: Function
  };

  function ownKeys$y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$x(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$y(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var swiperItemProps = {
    index: {
      type: Number
    },
    currentIndex: {
      type: Number
    },
    isSwitching: {
      type: Boolean,
      "default": false
    },
    getWrapAttribute: {
      type: Function
    },
    swiperItemLength: {
      type: Number,
      "default": 0
    }
  };
  var CARD_SCALE = 210 / 332;
  var itemWidth = 0.415;
  var _SwiperItem = vue.defineComponent({
    name: "TSwiperItem",
    props: _objectSpread$x(_objectSpread$x({}, props$8), swiperItemProps),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var prefix = usePrefixClass();
      var active = vue.computed(function () {
        return props2.index === props2.currentIndex;
      });
      var disposeIndex = vue.computed(function () {
        if (props2.type !== "card") return 0;

        if (props2.currentIndex === 0 && props2.index === props2.swiperItemLength - 1) {
          return -1;
        }

        if (props2.currentIndex === props2.swiperItemLength - 1 && props2.index === 0) {
          return props2.swiperItemLength;
        }

        if (props2.index < props2.currentIndex - 1 && props2.currentIndex - props2.index >= props2.swiperItemLength / 2) {
          return props2.swiperItemLength + 1;
        }

        if (props2.index > props2.currentIndex + 1 && props2.index - props2.currentIndex >= props2.swiperItemLength / 2) {
          return -2;
        }

        return props2.index;
      });
      var translateX = vue.computed(function () {
        if (props2.type !== "card") return 0;
        var wrapWidth = props2.getWrapAttribute("offsetWidth") || 0;
        var translateIndex = !active.value && props2.swiperItemLength > 2 ? disposeIndex.value : props2.index;
        var inStage = Math.abs(translateIndex - props2.currentIndex) <= 1;

        if (inStage) {
          return wrapWidth * ((translateIndex - props2.currentIndex) * (1 - itemWidth * CARD_SCALE) - itemWidth + 1) / 2;
        }

        if (translateIndex < props2.currentIndex) {
          return -itemWidth * (1 + CARD_SCALE) * wrapWidth / 2;
        }

        return (2 + itemWidth * (CARD_SCALE - 1)) * wrapWidth / 2;
      });
      var zIndex = vue.computed(function () {
        if (props2.type !== "card") return 0;
        var translateIndex = !active.value && props2.swiperItemLength > 2 ? disposeIndex.value : props2.index;
        var isActivity = translateIndex === props2.currentIndex;
        var inStage = Math.round(Math.abs(translateIndex - props2.currentIndex)) <= 1;

        if (isActivity) {
          return 2;
        }

        if (inStage) {
          return 1;
        }

        return 0;
      });
      var itemStyle = vue.computed(function () {
        if (props2.animation === "fade") {
          return {
            opacity: active.value ? 1 : 0,
            transition: props2.isSwitching ? "opacity ".concat(props2.duration / 1e3, "s") : ""
          };
        }

        if (props2.type === "card") {
          var translateIndex = !active.value && props2.swiperItemLength > 2 ? disposeIndex.value : props2.index;
          var isActivity = translateIndex === props2.currentIndex;
          return {
            transform: "translateX(".concat(translateX.value, "px) scale(").concat(isActivity ? 1 : CARD_SCALE, ")"),
            transition: "transform ".concat(props2.duration / 1e3, "s ease"),
            zIndex: zIndex.value
          };
        }

        return {};
      });
      return function () {
        var _ref2, _slots$default;

        return vue.createVNode("div", {
          "class": ["".concat(prefix.value, "-swiper__container__item"), (_ref2 = {}, _defineProperty$3(_ref2, "".concat(prefix.value, "-swiper__card"), props2.type === "card"), _defineProperty$3(_ref2, "".concat(prefix.value, "-is-active"), props2.type === "card" && active.value), _defineProperty$3(_ref2, "".concat(prefix.value, "-swiper__fade"), props2.animation === "fade"), _ref2)],
          "style": itemStyle.value
        }, [((_slots$default = slots["default"]) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots, {})) || []]);
      };
    }
  });

  function ownKeys$x(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$w(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$x(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$x(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot$8(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var defaultNavigation = {
    placement: "inside",
    showSlideBtn: "always",
    size: "medium",
    type: "bars"
  };
  var _Swiper = vue.defineComponent({
    name: "TSwiper",
    props: _objectSpread$w({}, props$8),
    setup: function setup(props2) {
      var prefix = usePrefixClass();
      var swiperTimer = 0;
      var swiperSwitchingTimer = 0;
      var isBeginToEnd = false;
      var isEndToBegin = false;
      var currentIndex = vue.ref(props2.current || props2.defaultCurrent);
      var isHovering = vue.ref(false);
      var isSwitching = vue.ref(false);
      var showArrow = vue.ref(false);
      var swiperWrap = vue.ref();
      var getChildComponentByName = useChildComponentSlots();
      var swiperItemLength = vue.ref(0);
      var navigationConfig = vue.computed(function () {
        return _objectSpread$w(_objectSpread$w({}, defaultNavigation), vue.isVNode(props2.navigation) ? {} : props2.navigation);
      });
      var isEnd = vue.computed(function () {
        if (props2.type === "card") {
          return !props2.loop && currentIndex.value + 1 >= swiperItemLength.value;
        }

        return !props2.loop && currentIndex.value + 2 >= swiperItemLength.value;
      });
      var propsToUpdateSetTimer = vue.computed(function () {
        return [props2.autoplay, currentIndex.value, props2.duration, props2.interval];
      });
      var swiperWrapClass = vue.computed(function () {
        var _ref;

        return _ref = {}, _defineProperty$3(_ref, "".concat(prefix.value, "-swiper__wrap"), true), _defineProperty$3(_ref, "".concat(prefix.value, "-swiper--inside"), navigationConfig.value.placement === "inside"), _defineProperty$3(_ref, "".concat(prefix.value, "-swiper--outside"), navigationConfig.value.placement === "outside"), _defineProperty$3(_ref, "".concat(prefix.value, "-swiper--vertical"), props2.direction === "vertical"), _defineProperty$3(_ref, "".concat(prefix.value, "-swiper--large"), navigationConfig.value.size === "large"), _defineProperty$3(_ref, "".concat(prefix.value, "-swiper--small"), navigationConfig.value.size === "small"), _ref;
      });
      var containerStyle = vue.computed(function () {
        var offsetHeight = props2.height ? "".concat(props2.height, "px") : "".concat(getWrapAttribute("offsetHeight"), "px");

        if (props2.type === "card" || props2.animation === "fade") {
          return {
            height: offsetHeight
          };
        }

        if (props2.animation === "slide") {
          var style = {
            transition: isSwitching.value ? "transform ".concat(props2.duration / 1e3, "s ease") : ""
          };
          var active = currentIndex.value;

          if (swiperItemLength.value > 1) {
            active += 1;

            if (isBeginToEnd || isEndToBegin) {
              style.transition = "";
            }
          }

          if (props2.direction === "vertical") {
            style.height = offsetHeight;
            style.transform = "translate3d(0, -".concat(active * 100, "%, 0px)");
          } else {
            style.transform = "translate3d(-".concat(active * 100, "%, 0px, 0px)");
          }

          ["msTransform", "WebkitTransform"].forEach(function (key) {
            style[key] = style.transform;
          });
          return style;
        }

        return {};
      });

      var swiperItems = function swiperItems() {
        var swiperItemList = getChildComponentByName("TSwiperItem");
        swiperItemLength.value = swiperItemList.length;
        var items = swiperItemList.map(function (swiperItem, index) {
          var _slot;

          var p = _objectSpread$w(_objectSpread$w({}, props2), swiperItem.props);

          return vue.createVNode(_SwiperItem, vue.mergeProps({
            "index": index,
            "currentIndex": currentIndex.value,
            "isSwitching": isSwitching.value,
            "getWrapAttribute": getWrapAttribute,
            "swiperItemLength": swiperItemLength.value
          }, p), _isSlot$8(_slot = swiperItem.children["default"]()) ? _slot : {
            "default": function _default() {
              return [_slot];
            }
          });
        });

        if (props2.animation === "slide" && items.length > 1) {
          var first = vue.cloneVNode(items[0]);
          var last = vue.cloneVNode(items[items.length - 1]);
          items.unshift(last);
          items.push(first);
        }

        return items;
      };

      var swiperTo = function swiperTo(index, context) {
        var _props2$onChange;

        var targetIndex = index % swiperItemLength.value;
        (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 ? void 0 : _props2$onChange.call(props2, targetIndex, context);
        isSwitching.value = true;

        if (props2.animation === "slide" && swiperItemLength.value > 1) {
          targetIndex = index;
          isBeginToEnd = false;
          isEndToBegin = false;

          if (index >= swiperItemLength.value) {
            clearTimer();
            setTimeout(function () {
              isEndToBegin = true;
              currentIndex.value = 0;
            }, props2.duration);
          }

          if (currentIndex.value === 0) {
            if (swiperItemLength.value > 2 && index !== 1 || swiperItemLength.value === 2 && index === 0) {
              targetIndex = -1;
              clearTimer();
              setTimeout(function () {
                isBeginToEnd = true;
                currentIndex.value = swiperItemLength.value - 1;
              }, props2.duration);
            }
          }
        }

        currentIndex.value = targetIndex;
      };

      var clearTimer = function clearTimer() {
        if (swiperTimer) {
          clearTimeout(swiperTimer);
          swiperTimer = 0;
        }
      };

      var setTimer = function setTimer() {
        if (props2.autoplay && props2.interval > 0) {
          clearTimer();
          swiperTimer = setTimeout(function () {
            swiperTo(currentIndex.value + 1, {
              source: "autoplay"
            });
          }, currentIndex.value === 0 ? props2.interval - (props2.duration + 50) : props2.interval);
        }
      };

      var onMouseEnter = function onMouseEnter() {
        isHovering.value = true;

        if (props2.stopOnHover) {
          clearTimer();
        }

        if (navigationConfig.value.showSlideBtn === "hover") {
          showArrow.value = true;
        }
      };

      var onMouseLeave = function onMouseLeave() {
        isHovering.value = false;

        if (!isEnd.value) {
          setTimer();
        }

        if (navigationConfig.value.showSlideBtn === "hover") {
          showArrow.value = false;
        }
      };

      var onMouseEnterNavigationItem = function onMouseEnterNavigationItem(i) {
        swiperTo(i, {
          source: "hover"
        });
      };

      var onClickNavigationItem = function onClickNavigationItem(i) {
        swiperTo(i, {
          source: "click"
        });
      };

      var goNext = function goNext(context) {
        if (isSwitching.value) return;

        if (props2.type === "card") {
          return swiperTo(currentIndex.value + 1 >= swiperItemLength.value ? 0 : currentIndex.value + 1, context);
        }

        return swiperTo(currentIndex.value + 1, context);
      };

      var goPrevious = function goPrevious(context) {
        if (isSwitching.value) return;

        if (currentIndex.value - 1 < 0) {
          if (props2.animation === "slide" && swiperItemLength.value === 2) {
            return swiperTo(0, context);
          }

          return swiperTo(swiperItemLength.value - 1, context);
        }

        return swiperTo(currentIndex.value - 1, context);
      };

      var getWrapAttribute = function getWrapAttribute(attr) {
        var _swiperWrap$value, _swiperWrap$value$par;

        return (_swiperWrap$value = swiperWrap.value) === null || _swiperWrap$value === void 0 ? void 0 : (_swiperWrap$value$par = _swiperWrap$value.parentNode) === null || _swiperWrap$value$par === void 0 ? void 0 : _swiperWrap$value$par[attr];
      };

      var renderPagination = function renderPagination() {
        var fractionIndex = currentIndex.value + 1 > swiperItemLength.value ? 1 : currentIndex.value + 1;
        return vue.createVNode("div", {
          "class": "".concat(prefix.value, "-swiper__arrow")
        }, [vue.createVNode("div", {
          "class": "".concat(prefix.value, "-swiper__arrow-left"),
          "onClick": function onClick() {
            return goPrevious({
              source: "click"
            });
          }
        }, [vue.createVNode(chevronLeft, null, null)]), vue.createVNode("div", {
          "class": "".concat(prefix.value, "-swiper__navigation-text-fraction")
        }, [fractionIndex, "/", swiperItemLength.value]), vue.createVNode("div", {
          "class": "".concat(prefix.value, "-swiper__arrow-right"),
          "onClick": function onClick() {
            return goNext({
              source: "click"
            });
          }
        }, [vue.createVNode(chevronRight, null, null)])]);
      };

      var renderArrow = function renderArrow() {
        if (!showArrow.value) return null;
        return vue.createVNode("div", {
          "class": ["".concat(prefix.value, "-swiper__arrow"), "".concat(prefix.value, "-swiper__arrow--default")]
        }, [vue.createVNode("div", {
          "class": "".concat(prefix.value, "-swiper__arrow-left"),
          "onClick": function onClick() {
            return goPrevious({
              source: "click"
            });
          }
        }, [vue.createVNode(chevronLeft, null, null)]), vue.createVNode("div", {
          "class": "".concat(prefix.value, "-swiper__arrow-right"),
          "onClick": function onClick() {
            return goNext({
              source: "click"
            });
          }
        }, [vue.createVNode(chevronRight, null, null)])]);
      };

      var renderNavigation = function renderNavigation() {
        if (vue.isVNode(props2.navigation)) return props2.navigation;

        if (navigationConfig.value.type === "fraction") {
          return vue.createVNode("div", {
            "class": ["".concat(prefix.value, "-swiper__navigation"), "".concat(prefix.value, "-swiper__navigation--fraction")]
          }, [renderPagination()]);
        }

        var swiperItemList = getChildComponentByName("TSwiperItem");
        return vue.createVNode("ul", {
          "class": ["".concat(prefix.value, "-swiper__navigation"), _defineProperty$3({}, "".concat(prefix.value, "-swiper__navigation-bars"), navigationConfig.value.type === "bars")]
        }, [swiperItemList.map(function (_, i) {
          return vue.createVNode("li", {
            "key": i,
            "class": ["".concat(prefix.value, "-swiper__navigation-item"), _defineProperty$3({}, "".concat(prefix.value, "-is-active"), i === currentIndex.value)],
            "onMouseenter": function onMouseenter() {
              return onMouseEnterNavigationItem(i);
            },
            "onClick": function onClick() {
              return onClickNavigationItem(i);
            }
          }, [vue.createVNode("span", null, null)]);
        })]);
      };

      var renderSwiperItems = function renderSwiperItems() {
        return swiperItems();
      };

      vue.watch(function () {
        return propsToUpdateSetTimer.value;
      }, function () {
        setTimer();
      });
      vue.watch(function () {
        return isSwitching.value;
      }, function () {
        if (isSwitching.value) {
          if (swiperSwitchingTimer) clearTimeout(swiperSwitchingTimer);
          swiperSwitchingTimer = setTimeout(function () {
            isSwitching.value = false;
            swiperSwitchingTimer = 0;

            if (isEnd.value) {
              clearTimer();
            }
          }, props2.duration + 50);
        }
      });
      vue.watch(function () {
        return props2.current;
      }, function () {
        swiperTo(props2.current, {
          source: "autoplay"
        });
      });
      vue.onMounted(function () {
        setTimer();
        showArrow.value = navigationConfig.value.showSlideBtn === "always";
      });
      return function () {
        var _ref4;

        return vue.createVNode("div", {
          "class": ["".concat(prefix.value, "-swiper")],
          "onMouseenter": onMouseEnter,
          "onMouseLeave": onMouseLeave,
          "ref": swiperWrap
        }, [vue.createVNode("div", {
          "class": swiperWrapClass.value
        }, [vue.createVNode("div", {
          "class": ["".concat(prefix.value, "-swiper__content"), (_ref4 = {}, _defineProperty$3(_ref4, "".concat(prefix.value, "-swiper-fade"), props2.animation === "fade"), _defineProperty$3(_ref4, "".concat(prefix.value, "-swiper-card"), props2.type === "card"), _ref4)]
        }, [vue.createVNode("div", {
          "class": "".concat(prefix.value, "-swiper__container"),
          "style": containerStyle.value
        }, [renderSwiperItems()])]), renderNavigation(), renderArrow()])]);
      };
    }
  });

  var Swiper = withInstall(_Swiper);
  var SwiperItem = withInstall(_SwiperItem);

  var baseTableProps = {
    allowResizeColumnWidth: Boolean,
    bordered: Boolean,
    bottomContent: {
      type: [String, Function]
    },
    columns: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    data: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    disableDataPage: Boolean,
    empty: {
      type: [String, Function],
      "default": ""
    },
    firstFullRow: {
      type: [String, Function]
    },
    fixedRows: {
      type: Array
    },
    footData: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    footerAffixedBottom: Boolean,
    footerAffixProps: {
      type: Object
    },
    headerAffixedTop: Boolean,
    headerAffixProps: {
      type: Object
    },
    height: {
      type: [String, Number]
    },
    hover: Boolean,
    lastFullRow: {
      type: [String, Function]
    },
    loading: {
      type: [Boolean, Function],
      "default": void 0
    },
    loadingProps: {
      type: Object
    },
    maxHeight: {
      type: [String, Number]
    },
    pagination: {
      type: Object
    },
    rowAttributes: {
      type: [Object, Array, Function]
    },
    rowClassName: {
      type: [String, Object, Array, Function]
    },
    rowKey: {
      type: String,
      "default": "id",
      required: true
    },
    rowspanAndColspan: {
      type: Function
    },
    scroll: {
      type: Object
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    stripe: Boolean,
    tableContentWidth: {
      type: String,
      "default": ""
    },
    tableLayout: {
      type: String,
      "default": "fixed",
      validator: function validator(val) {
        if (!val) return true;
        return ["auto", "fixed"].includes(val);
      }
    },
    topContent: {
      type: [String, Function]
    },
    verticalAlign: {
      type: String,
      "default": "middle",
      validator: function validator(val) {
        if (!val) return true;
        return ["top", "middle", "bottom"].includes(val);
      }
    },
    onCellClick: Function,
    onPageChange: Function,
    onRowClick: Function,
    onRowDblclick: Function,
    onRowMousedown: Function,
    onRowMouseenter: Function,
    onRowMouseleave: Function,
    onRowMouseover: Function,
    onRowMouseup: Function,
    onScroll: Function,
    onScrollX: Function,
    onScrollY: Function
  };

  function getNodeDepth(columns, depthMap) {
    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    var maxDepth = depth;

    for (var i = 0, len = columns.length; i < len; i++) {
      var _col$children;

      var col = columns[i];
      depthMap.set(col, depth);

      if (col !== null && col !== void 0 && (_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
        var deep = getNodeDepth(col.children, depthMap, depth + 1);

        if (deep > maxDepth) {
          maxDepth = deep;
        }
      }
    }

    return maxDepth;
  }
  function getChildrenNodeWidth(node) {
    var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var countNew = count;
    var childrenList = (node === null || node === void 0 ? void 0 : node.children) || [];

    for (var i = 0, len = childrenList.length; i < len; i++) {
      var item = childrenList[i];

      if (item.children) {
        countNew = getChildrenNodeWidth(item, countNew);
      } else {
        countNew += 1;
      }
    }

    return countNew;
  }
  function getThRowspanAndColspan(columns) {
    var depthMap = /* @__PURE__ */new Map();
    var columnsDepth = getNodeDepth(columns, depthMap);
    var rowspanAndColspanMap = /* @__PURE__ */new Map();

    var loop = function loop(nodes, leafColumns2) {
      for (var i = 0, len = nodes.length; i < len; i++) {
        var _col$children2;

        var col = nodes[i];
        var rowspan = col.children ? 1 : columnsDepth - depthMap.get(col) + 1;
        var colspan = col.children ? getChildrenNodeWidth(col) : 1;
        var span = {};
        rowspan > 1 && (span.rowspan = rowspan);
        colspan > 1 && (span.colspan = colspan);
        rowspanAndColspanMap.set(col, span);

        if (col !== null && col !== void 0 && (_col$children2 = col.children) !== null && _col$children2 !== void 0 && _col$children2.length) {
          loop(col.children, leafColumns2);
        } else {
          leafColumns2.push(col);
        }
      }
    };

    var leafColumns = [];
    loop(columns, leafColumns);
    return {
      rowspanAndColspanMap: rowspanAndColspanMap,
      leafColumns: leafColumns
    };
  }
  function getThList(columns) {
    var loop = function loop(nodes, thRows) {
      var _children;

      var thRowData = [];
      var children = [];

      for (var i = 0, len = nodes.length; i < len; i++) {
        var _node$children;

        var node = nodes[i];
        var thList = [node];
        thRowData = thRowData.concat(thList);

        if (node !== null && node !== void 0 && (_node$children = node.children) !== null && _node$children !== void 0 && _node$children.length) {
          children = children.concat(node.children);
        }
      }

      if ((_children = children) !== null && _children !== void 0 && _children.length) {
        loop(children, thRows);
      }

      thRows.push(thRowData);
      return thRowData;
    };

    var list = [];
    loop(columns, list);
    list = list.reverse();
    return list;
  }

  function useClassName() {
    var classPrefix = usePrefixClass();
    var classNames = {
      classPrefix: classPrefix,
      tableBaseClass: {
        table: "".concat(classPrefix.value, "-table"),
        body: "".concat(classPrefix.value, "-table__body"),
        overflowVisible: "".concat(classPrefix.value, "-table--overflow-visible"),
        content: "".concat(classPrefix.value, "-table__content"),
        topContent: "".concat(classPrefix.value, "-table__top-content"),
        bottomContent: "".concat(classPrefix.value, "-table__bottom-content"),
        tdLastRow: "".concat(classPrefix.value, "-table__td-last-row"),
        tdFirstCol: "".concat(classPrefix.value, "-table__td-first-col"),
        thCellInner: "".concat(classPrefix.value, "-table__th-cell-inner"),
        cellEditable: "".concat(classPrefix.value, "-table__cell--editable"),
        cellEditWrap: "".concat(classPrefix.value, "-table__cell-wrap"),
        bordered: "".concat(classPrefix.value, "-table--bordered"),
        striped: "".concat(classPrefix.value, "-table--striped"),
        hover: "".concat(classPrefix.value, "-table--hoverable"),
        loading: "".concat(classPrefix.value, "-table--loading"),
        rowspanAndColspan: "".concat(classPrefix.value, "-table--rowspan-colspan"),
        empty: "".concat(classPrefix.value, "-table__empty"),
        emptyRow: "".concat(classPrefix.value, "-table__empty-row"),
        headerFixed: "".concat(classPrefix.value, "-table--header-fixed"),
        columnFixed: "".concat(classPrefix.value, "-table--column-fixed"),
        widthOverflow: "".concat(classPrefix.value, "-table--width-overflow"),
        multipleHeader: "".concat(classPrefix.value, "-table--multiple-header"),
        affixedHeader: "".concat(classPrefix.value, "-table--affixed-header"),
        affixedHeaderElm: "".concat(classPrefix.value, "-table__affixed-header-elm"),
        scrollbarDivider: "".concat(classPrefix.value, "-table__scroll-bar-divider"),
        fullHeight: "".concat(classPrefix.value, "-table--full-height")
      },
      tdAlignClasses: {
        left: "".concat(classPrefix.value, "-align-left"),
        right: "".concat(classPrefix.value, "-align-right"),
        center: "".concat(classPrefix.value, "-align-center")
      },
      tableHeaderClasses: {
        header: "".concat(classPrefix.value, "-table__header"),
        thBordered: "".concat(classPrefix.value, "-table__header-th--bordered"),
        fixed: "".concat(classPrefix.value, "-table__header--fixed"),
        multipleHeader: "".concat(classPrefix.value, "-table__header--multiple")
      },
      tableFooterClasses: {
        footer: "".concat(classPrefix.value, "-table__footer"),
        fixed: "".concat(classPrefix.value, "-table__footer--fixed")
      },
      tableAlignClasses: {
        top: "".concat(classPrefix.value, "-vertical-align-top"),
        middle: "".concat(classPrefix.value, "-vertical-align-middle"),
        bottom: "".concat(classPrefix.value, "-vertical-align-bottom")
      },
      tableRowFixedClasses: {
        top: "".concat(classPrefix.value, "-table__row--fixed-top"),
        bottom: "".concat(classPrefix.value, "-table__row--fixed-bottom"),
        firstBottom: "".concat(classPrefix.value, "-table__row--fixed-bottom-first"),
        withoutBorderBottom: "".concat(classPrefix.value, "-table__row--without-border-bottom")
      },
      tableColFixedClasses: {
        left: "".concat(classPrefix.value, "-table__cell--fixed-left"),
        right: "".concat(classPrefix.value, "-table__cell--fixed-right"),
        lastLeft: "".concat(classPrefix.value, "-table__cell--fixed-left-last"),
        firstRight: "".concat(classPrefix.value, "-table__cell--fixed-right-first"),
        leftShadow: "".concat(classPrefix.value, "-table__content--scrollable-to-left"),
        rightShadow: "".concat(classPrefix.value, "-table__content--scrollable-to-right")
      },
      tableLayoutClasses: {
        auto: "".concat(classPrefix.value, "-table--layout-auto"),
        fixed: "".concat(classPrefix.value, "-table--layout-fixed")
      },
      tdEllipsisClass: "".concat(classPrefix.value, "-table-td--ellipsis"),
      tableFullRowClasses: {
        base: "".concat(classPrefix.value, "-table__row--full"),
        innerFullRow: "".concat(classPrefix.value, "-table__row-full-inner"),
        innerFullElement: "".concat(classPrefix.value, "-table__row-full-element"),
        firstFullRow: "".concat(classPrefix.value, "-table__first-full-row"),
        lastFullRow: "".concat(classPrefix.value, "-table__last-full-row")
      },
      tableExpandClasses: {
        iconBox: "".concat(classPrefix.value, "-table__expand-box"),
        iconCell: "".concat(classPrefix.value, "-table__expandable-icon-cell"),
        row: "".concat(classPrefix.value, "-table__expanded-row"),
        rowInner: "".concat(classPrefix.value, "-table__expanded-row-inner"),
        expanded: "".concat(classPrefix.value, "-table__row--expanded"),
        collapsed: "".concat(classPrefix.value, "-table__row--collapsed")
      },
      tableSortClasses: {
        sortable: "".concat(classPrefix.value, "-table__cell--sortable"),
        title: "".concat(classPrefix.value, "-table__cell--title"),
        trigger: "".concat(classPrefix.value, "-table__cell--sort-trigger"),
        doubleIcon: "".concat(classPrefix.value, "-table__double-icons"),
        sortIcon: "".concat(classPrefix.value, "-table__sort-icon"),
        iconDirection: {
          asc: "".concat(classPrefix.value, "-table-sort-asc"),
          desc: "".concat(classPrefix.value, "-table-sort-desc")
        },
        iconActive: "".concat(classPrefix.value, "-table__sort-icon--active"),
        iconDefault: "".concat(classPrefix.value, "-icon-sort--default")
      },
      tableSelectedClasses: {
        selected: "".concat(classPrefix.value, "-table__row--selected"),
        disabled: "".concat(classPrefix.value, "-table__row--disabled")
      },
      tableFilterClasses: {
        filterable: "".concat(classPrefix.value, "-table__cell--filterable"),
        popup: "".concat(classPrefix.value, "-table__filter-pop"),
        icon: "".concat(classPrefix.value, "-table__filter-icon"),
        popupContent: "".concat(classPrefix.value, "-table__filter-pop-content"),
        result: "".concat(classPrefix.value, "-table__filter-result"),
        inner: "".concat(classPrefix.value, "-table__row-filter-inner"),
        bottomButtons: "".concat(classPrefix.value, "-table__filter--bottom-buttons"),
        contentInner: "".concat(classPrefix.value, "-table__filter-pop-content-inner"),
        iconWrap: "".concat(classPrefix.value, "-table__filter-icon-wrap")
      },
      asyncLoadingClass: "".concat(classPrefix.value, "-table__async-loading"),
      isFocusClass: "".concat(classPrefix.value, "-is-focus"),
      isLoadingClass: "".concat(classPrefix.value, "-is-loading"),
      isLoadMoreClass: "".concat(classPrefix.value, "-is-load-more"),
      tableTreeClasses: {
        col: "".concat(classPrefix.value, "-table__tree-col"),
        inlineCol: "".concat(classPrefix.value, "-table__tree-col--inline"),
        icon: "".concat(classPrefix.value, "-table__tree-op-icon")
      },
      tableDraggableClasses: {
        rowDraggable: "".concat(classPrefix.value, "-table--row-draggable"),
        rowHandlerDraggable: "".concat(classPrefix.value, "-table--row-handler-draggable"),
        colDraggable: "".concat(classPrefix.value, "-table--col-draggable"),
        handle: "".concat(classPrefix.value, "-table__handle-draggable"),
        ghost: "".concat(classPrefix.value, "-table__ele--draggable-ghost"),
        chosen: "".concat(classPrefix.value, "-table__ele--draggable-chosen"),
        dragging: "".concat(classPrefix.value, "-table__ele--draggable-dragging")
      },
      virtualScrollClasses: {
        cursor: "".concat(classPrefix.value, "-table__virtual-scroll-cursor"),
        header: "".concat(classPrefix.value, "-table__virtual-scroll-header")
      },
      positiveRotate90: "".concat(classPrefix.value, "-positive-rotate-90"),
      negativeRotate180: "".concat(classPrefix.value, "-negative-rotate-180")
    };
    return classNames;
  }

  function ownKeys$w(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$v(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$w(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$w(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot$7(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var TEllipsis = vue.defineComponent({
    name: "TEllipsis",
    props: {
      content: {
        type: [String, Function]
      },
      "default": {
        type: [String, Function]
      },
      popupContent: {
        type: [String, Number, Function]
      },
      placement: String,
      attach: Function,
      popupProps: Object,
      zIndex: Number
    },
    setup: function setup() {
      var _useConfig = useConfig(),
          classPrefix = _useConfig.classPrefix;

      var root = vue.ref();
      var isOverflow = vue.ref(false);
      var ellipsisClasses = vue.computed(function () {
        return ["".concat(classPrefix.value, "-table__ellipsis"), "".concat(classPrefix.value, "-text-ellipsis")];
      });

      var onTriggerMouseenter = function onTriggerMouseenter() {
        if (!root.value) return;
        isOverflow.value = isNodeOverflow(root.value);
      };

      var onTriggerMouseleave = function onTriggerMouseleave() {
        isOverflow.value = isNodeOverflow(root.value);
      };

      var onMouseAround = debounce_1(function (e) {
        e.type === "mouseleave" ? onTriggerMouseleave() : onTriggerMouseenter();
      }, 80);
      return {
        root: root,
        isOverflow: isOverflow,
        ellipsisClasses: ellipsisClasses,
        onMouseAround: onMouseAround
      };
    },
    render: function render() {
      var cellNode = renderContent(this, "default", "content");

      var ellipsisContent = vue.createVNode("div", {
        "ref": "root",
        "class": this.ellipsisClasses,
        "onMouseenter": this.onMouseAround,
        "onMouseleave": this.onMouseAround
      }, [cellNode]);

      var content = null;

      if (this.isOverflow) {
        var rProps = _objectSpread$v({
          content: this.popupContent || function () {
            return cellNode;
          },
          destroyOnClose: true,
          zIndex: this.zIndex,
          attach: this.attach,
          placement: this.placement
        }, this.popupProps);

        content = vue.createVNode(Popup, rProps, _isSlot$7(ellipsisContent) ? ellipsisContent : {
          "default": function _default() {
            return [ellipsisContent];
          }
        });
      } else {
        content = ellipsisContent;
      }

      return content;
    }
  });

  function ownKeys$v(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$u(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$v(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$v(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot$6(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  function renderTitle(slots, col, index) {
    var params = {
      col: col,
      colIndex: index
    };

    if (isFunction_1(col.title)) {
      return col.title(vue.h, params);
    }

    if (isString_1(col.title) && slots[col.title]) {
      return slots[col.title](params);
    }

    if (isFunction_1(col.render)) {
      return col.render(vue.h, _objectSpread$u(_objectSpread$u({}, params), {}, {
        type: "title",
        row: {},
        rowIndex: -1
      })) || col.title;
    }

    return col.title;
  }
  function useTableHeader(props) {
    var _useClassName = useClassName(),
        tableSortClasses = _useClassName.tableSortClasses,
        tableFilterClasses = _useClassName.tableFilterClasses;

    var spansAndLeafNodes = vue.computed(function () {
      return getThRowspanAndColspan(props.columns);
    });
    var thList = vue.computed(function () {
      return getThList(props.columns);
    });
    var isMultipleHeader = vue.computed(function () {
      return thList.value.length > 1;
    });

    var renderTitleWidthIcon = function renderTitleWidthIcon(_ref, col, colIndex, ellipsisTitle, attach) {
      var _classes;

      var _ref2 = _slicedToArray(_ref, 3),
          title = _ref2[0],
          sortIcon = _ref2[1],
          filterIcon = _ref2[2];

      var classes = (_classes = {}, _defineProperty$3(_classes, tableSortClasses.sortable, sortIcon), _defineProperty$3(_classes, tableFilterClasses.filterable, filterIcon), _classes);
      var content = isFunction_1(ellipsisTitle) ? ellipsisTitle(vue.h, {
        col: col,
        colIndex: colIndex
      }) : void 0;
      return vue.createVNode("div", {
        "class": classes
      }, [vue.createVNode("div", {
        "class": tableSortClasses.title
      }, [col.ellipsis && ellipsisTitle !== false && ellipsisTitle !== null ? vue.createVNode(TEllipsis, {
        "placement": "bottom-right",
        "attach": attach ? function () {
          return attach;
        } : void 0,
        "popupContent": content && function () {
          return content;
        },
        "popupProps": _typeof$2(ellipsisTitle) === "object" ? ellipsisTitle : void 0
      }, _isSlot$6(title) ? title : {
        "default": function _default() {
          return [title];
        }
      }) : vue.createVNode("div", null, [title]), Boolean(sortIcon || filterIcon) && vue.createVNode("div", {
        "class": tableFilterClasses.iconWrap
      }, [sortIcon, filterIcon])])]);
    };

    return {
      thList: thList,
      isMultipleHeader: isMultipleHeader,
      spansAndLeafNodes: spansAndLeafNodes,
      renderTitleWidthIcon: renderTitleWidthIcon
    };
  }

  function getScrollbarWidth() {
    var defaultScrollbarWidth = 6;
    if (!navigator) return defaultScrollbarWidth;
    if (/(Chrome|Safari)/i.test(navigator.userAgent)) return defaultScrollbarWidth;
    var scrollDiv = document.createElement("div");
    scrollDiv.style.cssText = "width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;";
    document.body.appendChild(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    return scrollbarWidth;
  }

  function ownKeys$u(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$t(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$u(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$u(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function getColumnFixedStyles(col, index, rowAndColFixedPosition, tableColFixedClasses) {
    var _thClasses;

    var fixedPos = rowAndColFixedPosition === null || rowAndColFixedPosition === void 0 ? void 0 : rowAndColFixedPosition.get(col.colKey || index);
    if (!fixedPos) return {};
    var thClasses = (_thClasses = {}, _defineProperty$3(_thClasses, tableColFixedClasses.left, col.fixed === "left"), _defineProperty$3(_thClasses, tableColFixedClasses.right, col.fixed === "right"), _defineProperty$3(_thClasses, tableColFixedClasses.lastLeft, col.fixed === "left" && fixedPos.lastLeftFixedCol), _defineProperty$3(_thClasses, tableColFixedClasses.firstRight, col.fixed === "right" && fixedPos.firstRightFixedCol), _thClasses);
    var thStyles = {
      left: col.fixed === "left" ? "".concat(fixedPos.left, "px") : void 0,
      right: col.fixed === "right" ? "".concat(fixedPos.right, "px") : void 0
    };
    return {
      style: thStyles,
      classes: thClasses
    };
  }
  function getRowFixedStyles(rowId, rowIndex, rowLength, fixedRows, rowAndColFixedPosition, tableRowFixedClasses) {
    var _rowClasses;

    if (!fixedRows || !fixedRows.length) return {
      style: void 0,
      classes: void 0
    };
    var fixedTop = rowIndex < fixedRows[0];
    var fixedBottom = rowIndex > rowLength - 1 - fixedRows[1];
    var firstFixedBottomRow = rowLength - fixedRows[1];
    var fixedPos = (rowAndColFixedPosition === null || rowAndColFixedPosition === void 0 ? void 0 : rowAndColFixedPosition.get(rowId)) || {};
    var rowClasses = (_rowClasses = {}, _defineProperty$3(_rowClasses, tableRowFixedClasses.top, fixedTop), _defineProperty$3(_rowClasses, tableRowFixedClasses.bottom, fixedBottom), _defineProperty$3(_rowClasses, tableRowFixedClasses.firstBottom, rowIndex === firstFixedBottomRow), _defineProperty$3(_rowClasses, tableRowFixedClasses.withoutBorderBottom, rowIndex === firstFixedBottomRow - 1), _rowClasses);
    var rowStyles = {
      top: fixedTop ? "".concat(fixedPos.top, "px") : void 0,
      bottom: fixedBottom ? "".concat(fixedPos.bottom, "px") : void 0
    };
    return {
      style: rowStyles,
      classes: rowClasses
    };
  }
  function useFixed(props, context) {
    var _toRefs = vue.toRefs(props),
        data = _toRefs.data,
        columns = _toRefs.columns,
        tableLayout = _toRefs.tableLayout,
        tableContentWidth = _toRefs.tableContentWidth,
        fixedRows = _toRefs.fixedRows,
        firstFullRow = _toRefs.firstFullRow,
        lastFullRow = _toRefs.lastFullRow,
        maxHeight = _toRefs.maxHeight,
        headerAffixedTop = _toRefs.headerAffixedTop,
        bordered = _toRefs.bordered;

    var tableContentRef = vue.ref();
    var isFixedHeader = vue.ref(false);
    var isWidthOverflow = vue.ref(false);
    var affixHeaderRef = vue.ref();
    var showAffixHeader = vue.ref(true);
    var scrollbarWidth = vue.ref(6);
    var rowAndColFixedPosition = vue.ref( /* @__PURE__ */new Map());
    var showColumnShadow = vue.reactive({
      left: false,
      right: false
    });
    var virtualScrollHeaderPos = vue.ref({
      left: 0,
      top: 0
    });
    var tableWidth = vue.ref(0);
    var thWidthList = vue.ref({});
    var isFixedColumn = vue.ref(false);
    var isFixedRightColumn = vue.ref(false);
    var displayNoneElementRefresh = vue.inject(TDisplayNoneElementRefresh, vue.ref(0));
    var notNeedThWidthList = vue.computed(function () {
      var _props$scroll;

      return !(props.headerAffixedTop || ((_props$scroll = props.scroll) === null || _props$scroll === void 0 ? void 0 : _props$scroll.type) === "virtual");
    });

    function getColumnMap(columns2) {
      var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /* @__PURE__ */new Map();
      var levelNodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var level = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var parent = arguments.length > 4 ? arguments[4] : undefined;

      for (var i = 0, len = columns2.length; i < len; i++) {
        var _col$children;

        var col = columns2[i];

        if (["left", "right"].includes(col.fixed)) {
          isFixedColumn.value = true;
        }

        if (col.fixed === "right") {
          isFixedRightColumn.value = true;
        }

        var key = col.colKey || i;
        var columnInfo = {
          col: col,
          parent: parent,
          index: i
        };
        map.set(key, columnInfo);

        if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
          getColumnMap(col.children, map, levelNodes, level + 1, columnInfo);
        }

        if (levelNodes[level]) {
          levelNodes[level].push(columnInfo);
        } else {
          levelNodes[level] = [columnInfo];
        }
      }

      return {
        newColumnsMap: map,
        levelNodes: levelNodes
      };
    }

    var setFixedLeftPos = function setFixedLeftPos(columns2, initialColumnMap) {
      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      for (var i = 0, len = columns2.length; i < len; i++) {
        var _col$children2;

        var col = columns2[i];
        if (col.fixed === "right") return;
        var colInfo = initialColumnMap.get(col.colKey || i);
        var lastColIndex = i - 1;

        while (lastColIndex >= 0 && columns2[lastColIndex].fixed !== "left") {
          lastColIndex -= 1;
        }

        var lastCol = columns2[lastColIndex];
        var defaultWidth = i === 0 ? (parent === null || parent === void 0 ? void 0 : parent.left) || 0 : 0;
        var lastColInfo = initialColumnMap.get((lastCol === null || lastCol === void 0 ? void 0 : lastCol.colKey) || i - 1);
        colInfo.left = ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.left) || defaultWidth) + ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.width) || 0);

        if ((_col$children2 = col.children) !== null && _col$children2 !== void 0 && _col$children2.length) {
          setFixedLeftPos(col.children, initialColumnMap, colInfo);
        }
      }
    };

    var setFixedRightPos = function setFixedRightPos(columns2, initialColumnMap) {
      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      for (var i = columns2.length - 1; i >= 0; i--) {
        var _col$children3;

        var col = columns2[i];
        if (col.fixed === "left") return;
        var colInfo = initialColumnMap.get(col.colKey || i);
        var lastColIndex = i + 1;

        while (lastColIndex < columns2.length && columns2[lastColIndex].fixed !== "right") {
          lastColIndex += 1;
        }

        var lastCol = columns2[lastColIndex];
        var defaultWidth = i === columns2.length - 1 ? (parent === null || parent === void 0 ? void 0 : parent.right) || 0 : 0;
        var lastColInfo = initialColumnMap.get((lastCol === null || lastCol === void 0 ? void 0 : lastCol.colKey) || i + 1);
        colInfo.right = ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.right) || defaultWidth) + ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.width) || 0);

        if ((_col$children3 = col.children) !== null && _col$children3 !== void 0 && _col$children3.length) {
          setFixedRightPos(col.children, initialColumnMap, colInfo);
        }
      }
    };

    var setFixedColPosition = function setFixedColPosition(trList, initialColumnMap) {
      if (!trList) return;

      for (var i = 0, len = trList.length; i < len; i++) {
        var thList = trList[i].children;

        for (var j = 0, thLen = thList.length; j < thLen; j++) {
          var _obj$col;

          var th = thList[j];
          var colKey = th.dataset.colkey;

          if (!colKey) {
            log.warn("TDesign Table", "".concat(th.innerText, " missing colKey. colKey is required for fixed column feature."));
          }

          var obj = initialColumnMap.get(colKey || j);

          if (obj !== null && obj !== void 0 && (_obj$col = obj.col) !== null && _obj$col !== void 0 && _obj$col.fixed) {
            initialColumnMap.set(colKey, _objectSpread$t(_objectSpread$t({}, obj), {}, {
              width: th.getBoundingClientRect().width
            }));
          }
        }
      }

      setFixedLeftPos(columns.value, initialColumnMap);
      setFixedRightPos(columns.value, initialColumnMap);
    };

    var setFixedRowPosition = function setFixedRowPosition(trList, initialColumnMap, thead, tfoot) {
      var _ref = fixedRows.value || [],
          _ref2 = _slicedToArray(_ref, 2),
          fixedTopRows = _ref2[0],
          fixedBottomRows = _ref2[1];

      var data2 = props.data,
          _props$rowKey = props.rowKey,
          rowKey = _props$rowKey === void 0 ? "id" : _props$rowKey;

      for (var i = 0; i < fixedTopRows; i++) {
        var tr = trList[i];
        var rowId = get_1(data2[i], rowKey);
        var thisRowInfo = initialColumnMap.get(rowId) || {};
        var lastRowId = get_1(data2[i - 1], rowKey);
        var lastRowInfo = initialColumnMap.get(lastRowId) || {};
        var defaultBottom = 0;

        if (i === 0) {
          defaultBottom = (thead === null || thead === void 0 ? void 0 : thead.getBoundingClientRect().height) || 0;
        }

        thisRowInfo.top = (lastRowInfo.top || defaultBottom) + (lastRowInfo.height || 0);
        initialColumnMap.set(rowId, _objectSpread$t(_objectSpread$t({}, thisRowInfo), {}, {
          height: tr.getBoundingClientRect().height
        }));
      }

      for (var _i = data2.length - 1; _i >= data2.length - fixedBottomRows; _i--) {
        var _tr = trList[_i];

        var _rowId = get_1(data2[_i], rowKey);

        var _thisRowInfo = initialColumnMap.get(_rowId) || {};

        var _lastRowId = get_1(data2[_i + 1], rowKey);

        var _lastRowInfo = initialColumnMap.get(_lastRowId) || {};

        var _defaultBottom = 0;

        if (_i === data2.length - 1) {
          _defaultBottom = (tfoot === null || tfoot === void 0 ? void 0 : tfoot.getBoundingClientRect().height) || 0;
        }

        _thisRowInfo.bottom = (_lastRowInfo.bottom || _defaultBottom) + (_lastRowInfo.height || 0);
        initialColumnMap.set(_rowId, _objectSpread$t(_objectSpread$t({}, _thisRowInfo), {}, {
          height: _tr.getBoundingClientRect().height
        }));
      }
    };

    var updateRowAndColFixedPosition = function updateRowAndColFixedPosition(tableContentElm, initialColumnMap) {
      rowAndColFixedPosition.value.clear();
      var thead = tableContentElm === null || tableContentElm === void 0 ? void 0 : tableContentElm.querySelector("thead");
      thead && setFixedColPosition(thead.children, initialColumnMap);
      var tbody = tableContentElm === null || tableContentElm === void 0 ? void 0 : tableContentElm.querySelector("tbody");
      var tfoot = tableContentElm === null || tableContentElm === void 0 ? void 0 : tableContentElm.querySelector("tfoot");
      tbody && setFixedRowPosition(tbody.children, initialColumnMap, thead, tfoot);
      rowAndColFixedPosition.value = initialColumnMap;
    };

    var updateColumnFixedShadow = function updateColumnFixedShadow(target) {
      if (!isFixedColumn.value) return;
      if (!target) return;
      var isShowRight = target.clientWidth + target.scrollLeft < target.scrollWidth;
      showColumnShadow.left = target.scrollLeft > 0;
      showColumnShadow.right = isShowRight;
    };

    var lastScrollLeft = -1;

    var updateHeaderScroll = function updateHeaderScroll(target) {
      if (!target) {
        lastScrollLeft = -1;
      }

      var newTarget = target || tableContentRef.value;
      if (notNeedThWidthList.value || !newTarget) return;
      var left = newTarget.scrollLeft;
      if (lastScrollLeft === left) return;

      if (affixHeaderRef.value) {
        var left2 = newTarget.scrollLeft;
        lastScrollLeft = left2;
        affixHeaderRef.value.scrollLeft = left2;
      }
    };

    var onTableContentScroll = function onTableContentScroll(e) {
      var _props$onScrollX, _props$onScrollY, _props$onScroll;

      var target = e.target || e.srcElement;
      updateColumnFixedShadow(target);
      updateHeaderScroll(target);
      (_props$onScrollX = props.onScrollX) === null || _props$onScrollX === void 0 ? void 0 : _props$onScrollX.call(props, {
        e: e
      });
      (_props$onScrollY = props.onScrollY) === null || _props$onScrollY === void 0 ? void 0 : _props$onScrollY.call(props, {
        e: e
      });
      (_props$onScroll = props.onScroll) === null || _props$onScroll === void 0 ? void 0 : _props$onScroll.call(props, {
        e: e
      });
    };

    var setIsLastOrFirstFixedCol = function setIsLastOrFirstFixedCol(levelNodes) {
      for (var t = 0; t < levelNodes.length; t++) {
        var nodes = levelNodes[t];

        for (var i = 0, len = nodes.length; i < len; i++) {
          var colMapInfo = nodes[i];
          var nextColMapInfo = nodes[i + 1];
          var parent = colMapInfo.parent;
          var isParentLastLeftFixedCol = !parent || (parent === null || parent === void 0 ? void 0 : parent.lastLeftFixedCol);

          if (isParentLastLeftFixedCol && colMapInfo.col.fixed === "left" && (nextColMapInfo === null || nextColMapInfo === void 0 ? void 0 : nextColMapInfo.col.fixed) !== "left") {
            colMapInfo.lastLeftFixedCol = true;
          }

          var lastColMapInfo = nodes[i - 1];
          var isParentFirstRightFixedCol = !parent || (parent === null || parent === void 0 ? void 0 : parent.firstRightFixedCol);

          if (isParentFirstRightFixedCol && colMapInfo.col.fixed === "right" && (lastColMapInfo === null || lastColMapInfo === void 0 ? void 0 : lastColMapInfo.col.fixed) !== "right") {
            colMapInfo.firstRightFixedCol = true;
          }
        }
      }
    };

    var updateFixedStatus = function updateFixedStatus() {
      var _getColumnMap = getColumnMap(columns.value),
          newColumnsMap = _getColumnMap.newColumnsMap,
          levelNodes = _getColumnMap.levelNodes;

      setIsLastOrFirstFixedCol(levelNodes);
      var timer = setTimeout(function () {
        var _fixedRows$value;

        if (isFixedColumn.value || (_fixedRows$value = fixedRows.value) !== null && _fixedRows$value !== void 0 && _fixedRows$value.length) {
          updateRowAndColFixedPosition(tableContentRef.value, newColumnsMap);
        }

        clearTimeout(timer);
      }, 0);
      return function () {
        clearTimeout(timer);
      };
    };

    var updateFixedHeader = function updateFixedHeader() {
      var timer = setTimeout(function () {
        if (!tableContentRef.value) return;
        isFixedHeader.value = tableContentRef.value.scrollHeight > tableContentRef.value.clientHeight;
        isWidthOverflow.value = tableContentRef.value.scrollWidth > tableContentRef.value.clientWidth;
        var pos = tableContentRef.value.getBoundingClientRect();
        virtualScrollHeaderPos.value = {
          top: pos.top,
          left: pos.left
        };
        clearTimeout(timer);
      }, 0);
    };

    var updateFixedColumnHandler = function updateFixedColumnHandler() {
      var timer = setTimeout(function () {
        if (isFixedColumn.value) {
          updateColumnFixedShadow(tableContentRef.value);
        }

        clearTimeout(timer);
      }, 0);
    };

    var updateTableWidth = function updateTableWidth() {
      var _tableContentRef$valu;

      if (isServer$1) return;
      var rect = (_tableContentRef$valu = tableContentRef.value) === null || _tableContentRef$valu === void 0 ? void 0 : _tableContentRef$valu.getBoundingClientRect();
      if (!rect) return;
      var reduceWidth = isFixedHeader.value ? scrollbarWidth.value : 0;
      var fixedBordered = isFixedRightColumn.value ? 1 : 2;
      tableWidth.value = rect.width - reduceWidth - (props.bordered ? fixedBordered : 0);
    };

    var updateThWidthList = function updateThWidthList(trList) {
      var widthMap = {};

      for (var i = 0, len = trList.length; i < len; i++) {
        var thList = trList[i].children;

        for (var j = 0, thLen = thList.length; j < thLen; j++) {
          var th = thList[j];
          var colKey = th.dataset.colkey;
          widthMap[colKey] = th.getBoundingClientRect().width;
        }
      }

      thWidthList.value = widthMap;

      if (affixHeaderRef.value) {
        var left = tableContentRef.value.scrollLeft;
        lastScrollLeft = left;
        affixHeaderRef.value.scrollLeft = left;
      }
    };

    var updateThWidthListHandler = function updateThWidthListHandler() {
      if (isServer$1) return;
      if (notNeedThWidthList.value) return;
      var timer = setTimeout(function () {
        var _tableContentRef$valu2;

        updateTableWidth();
        var thead = (_tableContentRef$valu2 = tableContentRef.value) === null || _tableContentRef$valu2 === void 0 ? void 0 : _tableContentRef$valu2.querySelector("thead");
        if (!thead) return;
        updateThWidthList(thead.children);
        clearTimeout(timer);
      }, 0);
    };

    var onDocumentScroll = function onDocumentScroll() {
      var _affixHeaderRef$value;

      var pos = tableContentRef.value.getBoundingClientRect();
      var r = ((_affixHeaderRef$value = affixHeaderRef.value) === null || _affixHeaderRef$value === void 0 ? void 0 : _affixHeaderRef$value.offsetHeight) - pos.top < pos.height;
      showAffixHeader.value = r;
    };

    vue.watch([data, columns, bordered, tableLayout, tableContentWidth, isFixedHeader, isWidthOverflow, isFixedColumn, fixedRows, firstFullRow, lastFullRow], updateFixedStatus, {
      immediate: true
    });
    vue.watch([isFixedColumn, columns], updateFixedColumnHandler, {
      immediate: true
    });
    vue.watch([maxHeight, data, columns, bordered], updateFixedHeader, {
      immediate: true
    });
    vue.watch([data, columns, bordered, tableLayout, fixedRows, isFixedHeader, headerAffixedTop, tableContentWidth], updateThWidthListHandler, {
      immediate: true
    });
    vue.watch([headerAffixedTop], function () {
      if (headerAffixedTop) {
        on$1(document, "scroll", onDocumentScroll);
      } else {
        off$1(document, "scroll", onDocumentScroll);
      }
    });

    var refreshTable = function refreshTable() {
      if (isServer$1) return;
      updateTableWidth();
      updateFixedHeader();

      if (!notNeedThWidthList.value) {
        updateThWidthListHandler();
      }

      if (isFixedColumn.value || isFixedHeader.value) {
        updateFixedStatus();
        updateFixedColumnHandler();
      }
    };

    var onResize = refreshTable;
    vue.watch([displayNoneElementRefresh], function () {
      if (!displayNoneElementRefresh) return;
      requestAnimationFrame ? requestAnimationFrame(refreshTable) : refreshTable();
    });
    vue.onMounted(function () {
      var scrollWidth = getScrollbarWidth();
      scrollbarWidth.value = scrollWidth;
      var timer = setTimeout(function () {
        updateTableWidth();
        clearTimeout(timer);
      });

      if (isFixedColumn.value || isFixedHeader.value || !notNeedThWidthList.value) {
        on$1(window, "resize", onResize);
      }
    });
    vue.onUnmounted(function () {
      if (isFixedColumn.value || isFixedHeader.value || !notNeedThWidthList.value) {
        off$1(window, "resize", onResize);
      }

      if (props.headerAffixedTop) {
        off$1(document, "scroll", onDocumentScroll);
      }
    });
    return {
      tableWidth: tableWidth,
      thWidthList: thWidthList,
      isFixedHeader: isFixedHeader,
      isWidthOverflow: isWidthOverflow,
      tableContentRef: tableContentRef,
      showAffixHeader: showAffixHeader,
      isFixedColumn: isFixedColumn,
      showColumnShadow: showColumnShadow,
      rowAndColFixedPosition: rowAndColFixedPosition,
      virtualScrollHeaderPos: virtualScrollHeaderPos,
      affixHeaderRef: affixHeaderRef,
      scrollbarWidth: scrollbarWidth,
      refreshTable: refreshTable,
      updateThWidthListHandler: updateThWidthListHandler,
      updateHeaderScroll: updateHeaderScroll,
      onTableContentScroll: onTableContentScroll
    };
  }

  function ownKeys$t(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$s(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$t(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$t(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function usePagination(props) {
    var _toRefs = vue.toRefs(props),
        pagination = _toRefs.pagination,
        data = _toRefs.data,
        disableDataPage = _toRefs.disableDataPage;

    var _useConfig = useConfig(),
        classPrefix = _useConfig.classPrefix;

    var dataSource = vue.ref([]);
    var isPaginateData = vue.ref(false);

    var updateDataSourceAndPaginate = function updateDataSourceAndPaginate() {
      var current = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var pageSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
      var data2 = props.data;
      var t = Boolean(!disableDataPage.value && data2.length > pageSize);
      isPaginateData.value = t;

      if (t) {
        var start = (current - 1) * pageSize;
        var end = current * pageSize;
        dataSource.value = data2.slice(start, end);
      } else {
        dataSource.value = data2;
      }
    };

    vue.watch(function () {
      var _pagination$value, _pagination$value2;

      return [(_pagination$value = pagination.value) === null || _pagination$value === void 0 ? void 0 : _pagination$value.current, (_pagination$value2 = pagination.value) === null || _pagination$value2 === void 0 ? void 0 : _pagination$value2.pageSize, data.value.length, disableDataPage];
    }, function () {
      if (!pagination.value || !pagination.value.current) return;
      updateDataSourceAndPaginate(pagination.value.current, pagination.value.pageSize);
    }, {
      immediate: true
    });
    vue.watch([data], function () {
      if (!pagination.value || !pagination.value.defaultCurrent) return;
      updateDataSourceAndPaginate(pagination.value.defaultCurrent, pagination.value.defaultPageSize);
    }, {
      immediate: true
    });

    var renderPagination = function renderPagination() {
      if (!props.pagination) return null;

      var paginationProps = _objectSpread$s({}, props.pagination);

      delete paginationProps.onChange;
      return vue.createVNode("div", {
        "class": "".concat(classPrefix.value, "-table__pagination")
      }, [vue.createVNode(Pagination, vue.mergeProps(paginationProps, {
        "onChange": function onChange(pageInfo) {
          var _props$pagination, _props$pagination$onC, _props$onPageChange;

          (_props$pagination = props.pagination) === null || _props$pagination === void 0 ? void 0 : (_props$pagination$onC = _props$pagination.onChange) === null || _props$pagination$onC === void 0 ? void 0 : _props$pagination$onC.call(_props$pagination, pageInfo);
          (_props$onPageChange = props.onPageChange) === null || _props$onPageChange === void 0 ? void 0 : _props$onPageChange.call(props, pageInfo, dataSource.value);

          if (pagination && !pagination.value.current && pagination.value.defaultCurrent) {
            updateDataSourceAndPaginate(pageInfo.current, pageInfo.pageSize);
          }
        }
      }), null)]);
    };

    return {
      isPaginateData: isPaginateData,
      dataSource: dataSource,
      renderPagination: renderPagination
    };
  }

  function formatRowAttributes(attributes, params) {
    if (!attributes) return void 0;
    var attrList = attributes instanceof Array ? attributes : [attributes];
    var result = {};

    for (var i = 0; i < attrList.length; i++) {
      var attrItem = attrList[i];
      if (!attrItem) continue;
      var attrProperty = isFunction_1(attrItem) ? attrItem(params) : attrItem;
      result = attrProperty instanceof Array ? formatRowAttributes(attrProperty, params) : Object.assign(result, attrProperty);
    }

    return result;
  }
  function formatRowClassNames(rowClassNames, params, rowKey) {
    var rowClassList = rowClassNames instanceof Array ? rowClassNames : [rowClassNames];
    var row = params.row,
        rowIndex = params.rowIndex;
    var customClasses = [];

    for (var i = 0, len = rowClassList.length; i < len; i++) {
      var rName = rowClassList[i];
      var tClass = isFunction_1(rName) ? rName(params) : rName;

      if (isObject_1(tClass) && !(tClass instanceof Array)) {
        tClass[rowIndex] && (tClass = tClass[rowIndex]);
        var rowId = get_1(row, rowKey || "id");
        tClass[rowId] && (tClass = tClass[rowId]);
      } else if (tClass instanceof Array) {
        tClass = formatRowClassNames(tClass, params, rowKey);
      }

      customClasses = customClasses.concat(tClass);
    }

    return customClasses;
  }
  function filterDataByIds() {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var ids = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var byId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "id";
    return data.filter(function () {
      var d = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return ids.includes(d[byId]);
    });
  }
  function isRowSelectedDisabled(selectColumn, row, rowIndex) {
    var disabled = isFunction_1(selectColumn.disabled) ? selectColumn.disabled({
      row: row,
      rowIndex: rowIndex
    }) : selectColumn.disabled;

    if (selectColumn.checkProps) {
      if (isFunction_1(selectColumn.checkProps)) {
        disabled = disabled || selectColumn.checkProps({
          row: row,
          rowIndex: rowIndex
        }).disabled;
      } else if (selectColumn.checkProps === "object") {
        disabled = disabled || selectColumn.checkProps.disabled;
      }
    }

    return !!disabled;
  }
  function getCurrentRowByKey(columns, key) {
    if (!columns || !key) return;
    var col = columns === null || columns === void 0 ? void 0 : columns.find(function (t) {
      return t.colKey === key;
    });
    if (col) return col;

    for (var i = 0, len = columns.length; i < len; i++) {
      var _columns$i, _columns$i$children;

      if ((_columns$i = columns[i]) !== null && _columns$i !== void 0 && (_columns$i$children = _columns$i.children) !== null && _columns$i$children !== void 0 && _columns$i$children.length) {
        var _columns$i2;

        return getCurrentRowByKey((_columns$i2 = columns[i]) === null || _columns$i2 === void 0 ? void 0 : _columns$i2.children, key);
      }
    }
  }

  function observe(element, root, callback, marginBottom) {
    if (!window || !window.IntersectionObserver) {
      callback();
      return null;
    }

    var io = null;

    try {
      io = new window.IntersectionObserver(function (entries) {
        var entry = entries[0];

        if (entry.isIntersecting) {
          callback();
          io.unobserve(element);
        }
      }, {
        rootMargin: "0px 0px ".concat(marginBottom, "px 0px"),
        root: root
      });
      io.observe(element);
    } catch (e) {
      console.error(e);
      callback();
    }

    return io;
  }

  function useLazyLoad(containerRef, childRef, params) {
    var tRowHeight = vue.computed(function () {
      return Math.max(params.rowHeight || 48, 48);
    });
    var isInit = vue.ref(params.rowIndex === 0);
    var hasLazyLoadHolder = vue.computed(function () {
      return (params === null || params === void 0 ? void 0 : params.type) === "lazy" && !isInit.value;
    });

    var requestAnimationFrame = !isServer$1 && window.requestAnimationFrame || function (cb) {
      return setTimeout(cb, 16.6);
    };

    var init = function init() {
      if (!isInit.value) {
        requestAnimationFrame(function () {
          isInit.value = true;
        });
      }
    };

    vue.onMounted(function () {
      if ((params === null || params === void 0 ? void 0 : params.type) !== "lazy") return;
      vue.nextTick(function () {
        var bufferSize = Math.max(10, params.bufferSize || 10);
        var height = tRowHeight.value * bufferSize;
        observe(childRef.value, containerRef.value, init, height);
      });
    });
    return {
      hasLazyLoadHolder: hasLazyLoadHolder,
      tRowHeight: tRowHeight
    };
  }

  function ownKeys$s(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$r(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$s(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$s(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot$5(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var TABLE_PROPS = ["rowKey", "rowClassName", "columns", "fixedRows", "footData", "rowAttributes", "rowspanAndColspan", "scroll", "onCellClick", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup"];
  var ROW_LISTENERS = ["click", "dblclick", "mouseover", "mousedown", "mouseenter", "mouseleave", "mouseup"];
  function renderCell(params, slots) {
    var col = params.col,
        row = params.row;

    if (isFunction_1(col.cell)) {
      return col.cell(vue.h, params);
    }

    if (slots[col.colKey]) {
      return slots[col.colKey](params);
    }

    if (isString_1(col.cell) && slots[col.cell]) {
      return slots[col.cell](params);
    }

    if (isFunction_1(col.render)) {
      return col.render(vue.h, _objectSpread$r(_objectSpread$r({}, params), {}, {
        type: "cell"
      }));
    }

    return get_1(row, col.colKey);
  }
  var TrElement = vue.defineComponent({
    name: "TR",
    props: _objectSpread$r(_objectSpread$r({
      row: Object,
      rowIndex: Number,
      dataLength: Number,
      rowAndColFixedPosition: Map,
      skipSpansMap: Map,
      onTrRowspanOrColspan: Function
    }, pick_1(baseTableProps, TABLE_PROPS)), {}, {
      scrollType: String,
      rowHeight: Number,
      trs: Map,
      bufferSize: Number,
      isVirtual: Boolean,
      tableElm: {},
      tableContentElm: {}
    }),
    emits: ["row-mounted"],
    setup: function setup(props, context) {
      var _toRefs = vue.toRefs(props),
          tableContentElm = _toRefs.tableContentElm;

      var trRef = vue.ref(null);

      var _useClassName = useClassName(),
          tdEllipsisClass = _useClassName.tdEllipsisClass,
          tableBaseClass = _useClassName.tableBaseClass,
          tableColFixedClasses = _useClassName.tableColFixedClasses,
          tableRowFixedClasses = _useClassName.tableRowFixedClasses,
          tdAlignClasses = _useClassName.tdAlignClasses,
          tableDraggableClasses = _useClassName.tableDraggableClasses;

      var trStyles = vue.computed(function () {
        return getRowFixedStyles(get_1(props.row, props.rowKey || "id"), props.rowIndex, props.dataLength, props.fixedRows, props.rowAndColFixedPosition, tableRowFixedClasses);
      });
      var trAttributes = vue.computed(function () {
        return formatRowAttributes(props.rowAttributes, {
          row: props.row,
          rowIndex: props.rowIndex,
          type: "body"
        }) || {};
      });
      var classes = vue.computed(function () {
        var _trStyles$value;

        var customClasses = formatRowClassNames(props.rowClassName, {
          row: props.row,
          rowIndex: props.rowIndex,
          type: "body"
        }, props.rowKey || "id");
        return [(_trStyles$value = trStyles.value) === null || _trStyles$value === void 0 ? void 0 : _trStyles$value.classes, customClasses].filter(function (v) {
          return v;
        });
      });

      var _useLazyLoad = useLazyLoad(tableContentElm, trRef, vue.reactive(_objectSpread$r(_objectSpread$r({}, props.scroll), {}, {
        rowIndex: props.rowIndex
      }))),
          hasLazyLoadHolder = _useLazyLoad.hasLazyLoadHolder,
          tRowHeight = _useLazyLoad.tRowHeight;

      var getTrListeners = function getTrListeners(row, rowIndex) {
        var trListeners = {};
        ROW_LISTENERS.forEach(function (eventName) {
          trListeners["on".concat(upperFirst_1(eventName))] = function (e) {
            var _props$;

            var p = {
              e: e,
              row: row,
              index: rowIndex
            };
            (_props$ = props["onRow".concat(upperFirst_1(eventName))]) === null || _props$ === void 0 ? void 0 : _props$.call(props, p);
          };
        });
        return trListeners;
      };

      vue.onMounted(function () {
        var scrollType = props.scrollType,
            isVirtual = props.isVirtual,
            rowData = props.row,
            trs = props.trs;

        if (scrollType === "virtual") {
          if (isVirtual) {
            var $index = rowData.$index;
            trs.set($index, trRef.value);
            context.emit("row-mounted");
          }
        }
      });
      vue.onBeforeUnmount(function () {
        if (props.isVirtual) {
          var trs = props.trs,
              row = props.row;
          var $index = row.$index;
          trs["delete"]($index);
        }
      });
      return {
        trRef: trRef,
        tableColFixedClasses: tableColFixedClasses,
        tSlots: context.slots,
        tdEllipsisClass: tdEllipsisClass,
        tableBaseClass: tableBaseClass,
        tdAlignClasses: tdAlignClasses,
        tableDraggableClasses: tableDraggableClasses,
        trStyles: trStyles,
        classes: classes,
        trAttributes: trAttributes,
        tRowHeight: tRowHeight,
        hasLazyLoadHolder: hasLazyLoadHolder,
        getTrListeners: getTrListeners
      };
    },
    methods: {
      renderEllipsisCell: function renderEllipsisCell(cellParams, params) {
        var cellNode = params.cellNode;
        var col = cellParams.col,
            colIndex = cellParams.colIndex;
        var placement = colIndex < 2 ? "top-left" : "top-right";
        var content = isFunction_1(col.ellipsis) ? col.ellipsis(vue.h, cellParams) : void 0;
        var tableElement = this.tableElm;
        return vue.createVNode(TEllipsis, {
          "placement": placement,
          "attach": tableElement ? function () {
            return tableElement;
          } : void 0,
          "popupContent": content && function () {
            return content;
          },
          "popupProps": _typeof$2(col.ellipsis) === "object" ? col.ellipsis : void 0
        }, _isSlot$5(cellNode) ? cellNode : {
          "default": function _default() {
            return [cellNode];
          }
        });
      },
      renderTd: function renderTd(params, extra) {
        var _ref,
            _this = this;

        var col = params.col,
            colIndex = params.colIndex,
            rowIndex = params.rowIndex;
        var cellSpans = extra.cellSpans,
            dataLength = extra.dataLength,
            rowAndColFixedPosition = extra.rowAndColFixedPosition;
        var cellNode = renderCell(params, this.tSlots);
        var tdStyles = getColumnFixedStyles(col, colIndex, rowAndColFixedPosition, this.tableColFixedClasses);
        var customClasses = isFunction_1(col.className) ? col.className(_objectSpread$r(_objectSpread$r({}, params), {}, {
          type: "td"
        })) : col.className;
        var classes = [tdStyles.classes, customClasses, (_ref = {}, _defineProperty$3(_ref, this.tdEllipsisClass, col.ellipsis), _defineProperty$3(_ref, this.tableBaseClass.tdLastRow, rowIndex + cellSpans.rowspan === dataLength), _defineProperty$3(_ref, this.tableBaseClass.tdFirstCol, colIndex === 0 && this.rowspanAndColspan), _defineProperty$3(_ref, this.tdAlignClasses[col.align], col.align && col.align !== "left"), _defineProperty$3(_ref, this.tableDraggableClasses.handle, col.colKey === "drag"), _ref)];

        var onClick = function onClick(e) {
          var _this$onCellClick;

          var p = _objectSpread$r(_objectSpread$r({}, params), {}, {
            e: e
          });

          (_this$onCellClick = _this.onCellClick) === null || _this$onCellClick === void 0 ? void 0 : _this$onCellClick.call(_this, p);
        };

        var attrs = _objectSpread$r(_objectSpread$r({}, col.attrs), cellSpans);

        return vue.createVNode("td", vue.mergeProps({
          "key": "".concat(col.colKey, "_").concat(colIndex),
          "class": classes,
          "style": tdStyles.style
        }, attrs, {
          "onClick": onClick
        }), [col.ellipsis ? this.renderEllipsisCell(params, {
          cellNode: cellNode
        }) : cellNode]);
      }
    },
    render: function render() {
      var _this$columns,
          _this2 = this,
          _this$trStyles;

      var row = this.row,
          rowIndex = this.rowIndex,
          dataLength = this.dataLength,
          rowAndColFixedPosition = this.rowAndColFixedPosition;
      var columVNodeList = (_this$columns = this.columns) === null || _this$columns === void 0 ? void 0 : _this$columns.map(function (col, colIndex) {
        var _this2$skipSpansMap;

        var cellSpans = {};
        var params = {
          row: row,
          col: col,
          rowIndex: rowIndex,
          colIndex: colIndex
        };

        if (isFunction_1(_this2.rowspanAndColspan)) {
          var _this2$onTrRowspanOrC;

          var o = _this2.rowspanAndColspan(params);

          (o === null || o === void 0 ? void 0 : o.rowspan) > 1 && (cellSpans.rowspan = o.rowspan);
          (o === null || o === void 0 ? void 0 : o.colspan) > 1 && (cellSpans.colspan = o.colspan);
          (_this2$onTrRowspanOrC = _this2.onTrRowspanOrColspan) === null || _this2$onTrRowspanOrC === void 0 ? void 0 : _this2$onTrRowspanOrC.call(_this2, params, cellSpans);
        }

        var skipped = (_this2$skipSpansMap = _this2.skipSpansMap) === null || _this2$skipSpansMap === void 0 ? void 0 : _this2$skipSpansMap.get([rowIndex, colIndex].join());
        if (skipped) return null;
        return _this2.renderTd(params, {
          dataLength: dataLength,
          rowAndColFixedPosition: rowAndColFixedPosition,
          columnLength: _this2.columns.length,
          cellSpans: cellSpans
        });
      });
      return vue.createVNode("tr", vue.mergeProps({
        "ref": "trRef"
      }, this.trAttributes, {
        "style": (_this$trStyles = this.trStyles) === null || _this$trStyles === void 0 ? void 0 : _this$trStyles.style,
        "class": this.classes
      }, this.getTrListeners(row, rowIndex)), [this.hasLazyLoadHolder ? [vue.createVNode("td", {
        "style": {
          height: "".concat(this.tRowHeight, "px"),
          border: "none"
        }
      }, null)] : columVNodeList]);
    }
  });

  function ownKeys$r(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$r(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$r(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var extendTableProps = ["rowKey", "rowClassName", "rowAttributes", "loading", "empty", "fixedRows", "firstFullRow", "lastFullRow", "rowspanAndColspan", "scroll", "onCellClick", "onPageChange", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup", "onScroll", "onScrollX", "onScrollY"];
  var TBody = vue.defineComponent({
    name: "TBody",
    props: _objectSpread$q({
      data: Array,
      columns: Array,
      rowAndColFixedPosition: Map,
      showColumnShadow: Object,
      tableElm: {},
      tableWidth: Number,
      isWidthOverflow: Boolean,
      translateY: Number,
      scrollType: String,
      isVirtual: Boolean,
      rowHeight: Number,
      trs: Map,
      bufferSize: Number,
      tableContentElm: {},
      handleRowMounted: Function,
      renderExpandedRow: Function,
      firstFullRow: [String, Function],
      lastFullRow: [String, Function]
    }, pick_1(baseTableProps, extendTableProps)),
    setup: function setup(props, _ref) {
      _ref.emit;
      var renderTNode = useTNodeJSX();

      var _useConfig = useConfig("table"),
          t = _useConfig.t,
          global = _useConfig.global;

      var _useClassName = useClassName(),
          tableFullRowClasses = _useClassName.tableFullRowClasses,
          tableBaseClass = _useClassName.tableBaseClass;

      var tbodyClasses = vue.computed(function () {
        return [tableBaseClass.body];
      });
      return {
        t: t,
        global: global,
        renderTNode: renderTNode,
        tableFullRowClasses: tableFullRowClasses,
        tbodyClasses: tbodyClasses,
        tableBaseClass: tableBaseClass
      };
    },
    render: function render() {
      var _this = this,
          _this$data,
          _this$data2;

      var renderEmpty = function renderEmpty(columns) {
        return vue.createVNode("tr", {
          "class": [_this.tableBaseClass.emptyRow, _defineProperty$3({}, _this.tableFullRowClasses.base, _this.isWidthOverflow)]
        }, [vue.createVNode("td", {
          "colspan": columns.length
        }, [vue.createVNode("div", {
          "class": [_this.tableBaseClass.empty, _defineProperty$3({}, _this.tableFullRowClasses.innerFullRow, _this.isWidthOverflow)],
          "style": _this.isWidthOverflow ? {
            width: "".concat(_this.tableWidth, "px")
          } : {}
        }, [_this.renderTNode("empty") || _this.t(_this.global.empty)])])]);
      };

      var getFullRow = function getFullRow(columnLength2, type) {
        var tType = camelCase_1(type);

        var fullRowNode = _this.renderTNode(tType);

        if (["", null, void 0, false].includes(fullRowNode)) return null;

        var isFixedToLeft = _this.isWidthOverflow && _this.columns.find(function (col) {
          return col.fixed === "left";
        });

        var classes = [_this.tableFullRowClasses.base, _this.tableFullRowClasses[tType]];
        return vue.createVNode("tr", {
          "class": classes,
          "key": "key-full-row-".concat(type)
        }, [vue.createVNode("td", {
          "colspan": columnLength2
        }, [vue.createVNode("div", {
          "class": _defineProperty$3({}, _this.tableFullRowClasses.innerFullRow, isFixedToLeft),
          "style": isFixedToLeft ? {
            width: "".concat(_this.tableWidth, "px")
          } : {}
        }, [vue.createVNode("div", {
          "class": _this.tableFullRowClasses.innerFullElement
        }, [fullRowNode])])])]);
      };

      var skipSpansMap = /* @__PURE__ */new Map();

      var onTrRowspanOrColspan = function onTrRowspanOrColspan(params, cellSpans) {
        var rowIndex = params.rowIndex,
            colIndex = params.colIndex;
        if (!cellSpans.rowspan && !cellSpans.colspan) return;
        var maxRowIndex = rowIndex + (cellSpans.rowspan || 1);
        var maxColIndex = colIndex + (cellSpans.colspan || 1);

        for (var i = rowIndex; i < maxRowIndex; i++) {
          for (var j = colIndex; j < maxColIndex; j++) {
            if (i !== rowIndex || j !== colIndex) {
              skipSpansMap.set([i, j].join(), true);
            }
          }
        }
      };

      var columnLength = this.columns.length;
      var dataLength = this.data.length;
      var trNodeList = [];
      skipSpansMap = /* @__PURE__ */new Map();
      var properties = ["rowAndColFixedPosition", "scroll", "tableElm", "tableContentElm", "trs", "bufferSize", "isVirtual", "rowHeight", "scrollType"];
      (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.forEach(function (row, rowIndex) {
        var trProps = _objectSpread$q(_objectSpread$q(_objectSpread$q({}, pick_1(_this.$props, TABLE_PROPS)), {}, {
          rowKey: _this.rowKey || "id",
          row: row,
          columns: _this.columns,
          rowIndex: rowIndex,
          dataLength: dataLength,
          skipSpansMap: skipSpansMap
        }, pick_1(_this.$props, properties)), {}, {
          onTrRowspanOrColspan: onTrRowspanOrColspan
        });

        if (_this.onCellClick) {
          trProps.onCellClick = _this.onCellClick;
        }

        var trNode = vue.createVNode(TrElement, vue.mergeProps({
          "key": "".concat(get_1(row, _this.rowKey || "id"), "__").concat(rowIndex)
        }, trProps, {
          "onRowMounted": _this.handleRowMounted
        }), _this.$slots);

        trNodeList.push(trNode);

        if (_this.renderExpandedRow) {
          var p = {
            row: row,
            index: rowIndex,
            columns: _this.columns,
            tableWidth: _this.tableWidth,
            isWidthOverflow: _this.isWidthOverflow
          };

          var expandedContent = _this.renderExpandedRow(p);

          expandedContent && trNodeList.push(expandedContent);
        }
      });
      var list = [getFullRow(columnLength, "first-full-row")].concat(trNodeList, [getFullRow(columnLength, "last-full-row")]);
      var isEmpty = !((_this$data2 = this.data) !== null && _this$data2 !== void 0 && _this$data2.length) && !this.loading;
      var translate = "translate(0, ".concat(this.translateY, "px)");
      var posStyle = {
        transform: translate,
        "-ms-transform": translate,
        "-moz-transform": translate,
        "-webkit-transform": translate
      };
      return vue.createVNode("tbody", {
        "class": this.tbodyClasses,
        "style": this.isVirtual && _objectSpread$q({}, posStyle)
      }, [isEmpty ? renderEmpty(this.columns) : list]);
    }
  });

  function formatCSSUnit(unit) {
    if (!unit) return unit;
    return isNaN(Number(unit)) ? unit : "".concat(unit, "px");
  }
  function useStyle(props) {
    var _toRefs = vue.toRefs(props),
        size = _toRefs.size,
        bordered = _toRefs.bordered,
        stripe = _toRefs.stripe,
        hover = _toRefs.hover,
        verticalAlign = _toRefs.verticalAlign,
        height = _toRefs.height,
        maxHeight = _toRefs.maxHeight,
        tableContentWidth = _toRefs.tableContentWidth;

    var _useClassName = useClassName(),
        tableBaseClass = _useClassName.tableBaseClass,
        tableAlignClasses = _useClassName.tableAlignClasses;

    var _useCommonClassName = useCommonClassName(),
        sizeClassNames = _useCommonClassName.sizeClassNames;

    var tableClasses = vue.computed(function () {
      var _ref;

      return [tableBaseClass.table, (_ref = {}, _defineProperty$3(_ref, sizeClassNames[size.value], size.value !== "medium"), _defineProperty$3(_ref, tableBaseClass.bordered, bordered.value), _defineProperty$3(_ref, tableBaseClass.striped, stripe.value), _defineProperty$3(_ref, tableBaseClass.hover, hover.value), _defineProperty$3(_ref, tableBaseClass.loading, props.loading), _defineProperty$3(_ref, tableBaseClass.affixedHeader, props.headerAffixedTop), _defineProperty$3(_ref, tableBaseClass.rowspanAndColspan, props.rowspanAndColspan), _defineProperty$3(_ref, tableAlignClasses[verticalAlign.value], verticalAlign.value !== "middle"), _ref)];
    });
    var tableContentStyles = vue.computed(function () {
      return {
        height: formatCSSUnit(height.value),
        maxHeight: formatCSSUnit(maxHeight.value)
      };
    });
    var tableElementStyles = vue.computed(function () {
      return {
        width: formatCSSUnit(tableContentWidth.value)
      };
    });
    return {
      tableClasses: tableClasses,
      tableElementStyles: tableElementStyles,
      tableContentStyles: tableContentStyles
    };
  }

  function ownKeys$q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$p(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$q(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot$4(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var THead = vue.defineComponent({
    name: "THead",
    props: {
      isFixedHeader: Boolean,
      rowAndColFixedPosition: Map,
      thWidthList: Object,
      bordered: Boolean,
      isMultipleHeader: Boolean,
      spansAndLeafNodes: Object,
      thList: Array
    },
    setup: function setup(props, _ref) {
      var slots = _ref.slots;
      var theadRef = vue.ref();
      var classnames = useClassName();
      var tableHeaderClasses = classnames.tableHeaderClasses,
          tableBaseClass = classnames.tableBaseClass;

      var _useConfig = useConfig(),
          classPrefix = _useConfig.classPrefix;

      var theadClasses = vue.computed(function () {
        var _ref2;

        return [tableHeaderClasses.header, (_ref2 = {}, _defineProperty$3(_ref2, tableHeaderClasses.fixed, props.isFixedHeader), _defineProperty$3(_ref2, tableBaseClass.bordered, props.bordered && props.isMultipleHeader), _defineProperty$3(_ref2, tableHeaderClasses.multipleHeader, props.isMultipleHeader), _ref2)];
      });
      return _objectSpread$p(_objectSpread$p({}, classnames), {}, {
        theadClasses: theadClasses,
        classPrefix: classPrefix,
        theadRef: theadRef,
        slots: slots
      });
    },
    render: function render() {
      var _this = this;

      var renderThNodeList = function renderThNodeList(rowAndColFixedPosition, thWidthList) {
        var thBorderMap = /* @__PURE__ */new Map();
        var thRowspanAndColspan = _this.spansAndLeafNodes.rowspanAndColspanMap;
        return _this.thList.map(function (row, rowIndex) {
          var thRow = row.map(function (col, index) {
            var _ref3, _col$children;

            var rowspanAndColspan = thRowspanAndColspan.get(col);

            if (index === 0 && rowspanAndColspan.rowspan > 1) {
              for (var j = rowIndex + 1; j < rowIndex + rowspanAndColspan.rowspan; j++) {
                thBorderMap.set(_this.thList[j][0], true);
              }
            }

            var thStyles = getColumnFixedStyles(col, index, rowAndColFixedPosition, _this.tableColFixedClasses);
            var colParams = {
              col: col,
              colIndex: index,
              row: {},
              rowIndex: -1
            };
            var customClasses = isFunction_1(col.className) ? col.className(_objectSpread$p(_objectSpread$p({}, colParams), {}, {
              type: "th"
            })) : col.className;
            var thClasses = [thStyles.classes, customClasses, (_ref3 = {}, _defineProperty$3(_ref3, _this.tableHeaderClasses.thBordered, thBorderMap.get(col)), _defineProperty$3(_ref3, "".concat(_this.classPrefix, "-table__th-").concat(col.colKey), col.colKey), _defineProperty$3(_ref3, _this.tdAlignClasses[col.align], col.align && col.align !== "left"), _ref3)];
            var withoutChildren = !((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length);
            var width = withoutChildren && thWidthList !== null && thWidthList !== void 0 && thWidthList[col.colKey] ? "".concat(thWidthList === null || thWidthList === void 0 ? void 0 : thWidthList[col.colKey], "px") : void 0;

            var styles = _objectSpread$p(_objectSpread$p({}, thStyles.style || {}), {}, {
              width: width
            });

            var innerTh = renderTitle(_this.slots, col, index);
            var content = isFunction_1(col.ellipsisTitle) ? col.ellipsisTitle(vue.h, {
              col: col,
              colIndex: index
            }) : void 0;
            return vue.createVNode("th", vue.mergeProps({
              "key": col.colKey,
              "data-colkey": col.colKey,
              "class": thClasses,
              "style": styles
            }, rowspanAndColspan), [vue.createVNode("div", {
              "class": _this.tableBaseClass.thCellInner
            }, [col.ellipsis && col.ellipsisTitle !== false && col.ellipsisTitle !== null ? vue.createVNode(TEllipsis, {
              "placement": "bottom",
              "attach": _this.theadRef ? function () {
                return _this.theadRef;
              } : void 0,
              "popupContent": content && function () {
                return content;
              },
              "popupProps": _typeof$2(col.ellipsisTitle) === "object" ? col.ellipsisTitle : void 0
            }, _isSlot$4(innerTh) ? innerTh : {
              "default": function _default() {
                return [innerTh];
              }
            }) : innerTh])]);
          });
          return vue.createVNode("tr", {
            "key": rowIndex
          }, [thRow]);
        });
      };

      return vue.createVNode("thead", {
        "ref": "theadRef",
        "class": this.theadClasses
      }, [renderThNodeList(this.rowAndColFixedPosition, this.thWidthList)]);
    }
  });

  function ownKeys$p(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$o(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$p(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$p(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TFoot = vue.defineComponent({
    name: "TFoot",
    props: {
      rowKey: String,
      isFixedHeader: Boolean,
      rowAndColFixedPosition: Map,
      footData: Array,
      columns: Array,
      rowAttributes: [Array, Object, Function],
      rowClassName: [Array, String, Object, Function]
    },
    setup: function setup(props, context) {
      var classnames = useClassName();

      var renderTFootCell = function renderTFootCell(p) {
        var col = p.col,
            row = p.row;

        if (isFunction_1(col.foot)) {
          return col.foot(vue.h, p);
        }

        if (isString_1(col.foot) && context.slots[col.foot]) {
          return context.slots[col.foot](p) || col.foot;
        }

        return col.foot || get_1(row, col.colKey);
      };

      return _objectSpread$o(_objectSpread$o({}, classnames), {}, {
        renderTFootCell: renderTFootCell
      });
    },
    render: function render() {
      var _this = this;

      if (!this.footData || !this.footData.length || !this.columns) return null;
      var theadClasses = [this.tableFooterClasses.footer, _defineProperty$3({}, this.tableFooterClasses.fixed, this.isFixedHeader)];
      return vue.createVNode("tfoot", {
        "ref": "tfooterRef",
        "class": theadClasses
      }, [this.footData.map(function (row, rowIndex) {
        var trAttributes = formatRowAttributes(_this.rowAttributes, {
          row: row,
          rowIndex: rowIndex,
          type: "foot"
        });
        var customClasses = formatRowClassNames(_this.rowClassName, {
          row: row,
          rowIndex: rowIndex,
          type: "foot"
        }, _this.rowKey || "id");
        return vue.createVNode("tr", vue.mergeProps({
          "key": rowIndex
        }, trAttributes, {
          "class": customClasses
        }), [_this.columns.map(function (col, colIndex) {
          var tdStyles = getColumnFixedStyles(col, colIndex, _this.rowAndColFixedPosition, _this.tableColFixedClasses);
          return vue.createVNode("td", {
            "key": col.colKey,
            "class": tdStyles.classes,
            "style": tdStyles.style
          }, [_this.renderTFootCell({
            row: row,
            rowIndex: rowIndex,
            col: col,
            colIndex: colIndex
          })]);
        })]);
      })]);
    }
  });

  function ownKeys$o(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$n(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$o(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$o(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot$3(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }
  var _BaseTable = vue.defineComponent({
    name: "TBaseTable",
    props: _objectSpread$n(_objectSpread$n({}, baseTableProps), {}, {
      renderExpandedRow: Function
    }),
    setup: function setup(props2, context) {
      var _props2$scroll2;

      var renderTNode = useTNodeJSX();
      var tableRef = vue.ref();
      var tableElmRef = vue.ref();

      var _useClassName = useClassName(),
          virtualScrollClasses = _useClassName.virtualScrollClasses,
          tableLayoutClasses = _useClassName.tableLayoutClasses,
          tableBaseClass = _useClassName.tableBaseClass,
          tableColFixedClasses = _useClassName.tableColFixedClasses;

      var _useCommonClassName = useCommonClassName(),
          statusClassNames = _useCommonClassName.statusClassNames;

      var _useStyle = useStyle(props2),
          tableClasses = _useStyle.tableClasses,
          tableContentStyles = _useStyle.tableContentStyles,
          tableElementStyles = _useStyle.tableElementStyles;

      var _useConfig = useConfig("table"),
          global = _useConfig.global;

      var _useFixed = useFixed(props2),
          affixHeaderRef = _useFixed.affixHeaderRef,
          scrollbarWidth = _useFixed.scrollbarWidth,
          virtualScrollHeaderPos = _useFixed.virtualScrollHeaderPos,
          tableWidth = _useFixed.tableWidth,
          tableContentRef = _useFixed.tableContentRef,
          isFixedHeader = _useFixed.isFixedHeader,
          isWidthOverflow = _useFixed.isWidthOverflow,
          isFixedColumn = _useFixed.isFixedColumn,
          thWidthList = _useFixed.thWidthList,
          showColumnShadow = _useFixed.showColumnShadow,
          showAffixHeader = _useFixed.showAffixHeader,
          rowAndColFixedPosition = _useFixed.rowAndColFixedPosition,
          refreshTable = _useFixed.refreshTable,
          onTableContentScroll = _useFixed.onTableContentScroll,
          updateHeaderScroll = _useFixed.updateHeaderScroll;

      var _useTableHeader = useTableHeader(props2),
          isMultipleHeader = _useTableHeader.isMultipleHeader,
          spansAndLeafNodes = _useTableHeader.spansAndLeafNodes,
          thList = _useTableHeader.thList;

      var _usePagination = usePagination(props2),
          dataSource = _usePagination.dataSource,
          isPaginateData = _usePagination.isPaginateData,
          renderPagination = _usePagination.renderPagination;

      var dynamicBaseTableClasses = vue.computed(function () {
        var _ref;

        return [tableClasses.value, (_ref = {}, _defineProperty$3(_ref, tableBaseClass.headerFixed, isFixedHeader.value), _defineProperty$3(_ref, tableBaseClass.columnFixed, isFixedColumn.value), _defineProperty$3(_ref, tableBaseClass.widthOverflow, isWidthOverflow.value), _defineProperty$3(_ref, tableBaseClass.multipleHeader, isMultipleHeader.value), _defineProperty$3(_ref, tableColFixedClasses.leftShadow, showColumnShadow.left), _defineProperty$3(_ref, tableColFixedClasses.rightShadow, showColumnShadow.right), _ref)];
      });
      var tableElmClasses = vue.computed(function () {
        return [[tableLayoutClasses[props2.tableLayout]], _defineProperty$3({}, tableBaseClass.fullHeight, props2.height)];
      });
      var isVirtual = vue.computed(function () {
        var _props2$data, _props2$scroll;

        return type === "virtual" && ((_props2$data = props2.data) === null || _props2$data === void 0 ? void 0 : _props2$data.length) > (((_props2$scroll = props2.scroll) === null || _props2$scroll === void 0 ? void 0 : _props2$scroll.threshold) || 100);
      });
      var showRightDivider = vue.computed(function () {
        return props2.bordered && isFixedHeader.value && (isMultipleHeader.value && isWidthOverflow.value || !isMultipleHeader.value);
      });

      var onFixedChange = function onFixedChange() {
        vue.nextTick(function () {
          updateHeaderScroll();
        });
      };

      var _ref3 = props2.scroll || {},
          type = _ref3.type,
          rowHeight = _ref3.rowHeight,
          _ref3$bufferSize = _ref3.bufferSize,
          bufferSize = _ref3$bufferSize === void 0 ? 20 : _ref3$bufferSize,
          _ref3$isFixedRowHeigh = _ref3.isFixedRowHeight,
          isFixedRowHeight = _ref3$isFixedRowHeigh === void 0 ? false : _ref3$isFixedRowHeigh;

      var _toRefs = vue.toRefs(props2),
          data = _toRefs.data;

      var _ref4 = type === "virtual" ? useVirtualScroll({
        container: tableContentRef,
        data: data,
        fixedHeight: isFixedRowHeight,
        lineHeight: rowHeight,
        bufferSize: bufferSize,
        threshold: (_props2$scroll2 = props2.scroll) === null || _props2$scroll2 === void 0 ? void 0 : _props2$scroll2.threshold
      }) : {},
          _ref4$trs = _ref4.trs,
          trs = _ref4$trs === void 0 ? null : _ref4$trs,
          _ref4$scrollHeight = _ref4.scrollHeight,
          scrollHeight = _ref4$scrollHeight === void 0 ? null : _ref4$scrollHeight,
          _ref4$visibleData = _ref4.visibleData,
          visibleData = _ref4$visibleData === void 0 ? null : _ref4$visibleData,
          _ref4$translateY = _ref4.translateY,
          translateY = _ref4$translateY === void 0 ? null : _ref4$translateY,
          _ref4$handleScroll = _ref4.handleScroll,
          handleVirtualScroll = _ref4$handleScroll === void 0 ? null : _ref4$handleScroll,
          _ref4$handleRowMounte = _ref4.handleRowMounted,
          handleRowMounted = _ref4$handleRowMounte === void 0 ? null : _ref4$handleRowMounte;

      vue.provide("tableContentRef", tableContentRef);
      vue.provide("rowHeightRef", vue.ref(rowHeight));
      var lastScrollY = -1;
      var onInnerScroll = type === "virtual" ? function (e) {
        onTableContentScroll(e);
        var target = e.target || e.srcElement;
        var top = target.scrollTop;

        if (Math.abs(lastScrollY - top) > 5) {
          handleVirtualScroll();
          lastScrollY = top;
        } else {
          lastScrollY = -1;
        }
      } : onTableContentScroll;
      return {
        thList: thList,
        isVirtual: isVirtual,
        global: global,
        virtualScrollHeaderPos: virtualScrollHeaderPos,
        tableWidth: tableWidth,
        tableRef: tableRef,
        tableElmRef: tableElmRef,
        tableBaseClass: tableBaseClass,
        spansAndLeafNodes: spansAndLeafNodes,
        dynamicBaseTableClasses: dynamicBaseTableClasses,
        tableContentStyles: tableContentStyles,
        tableElementStyles: tableElementStyles,
        virtualScrollClasses: virtualScrollClasses,
        tableLayoutClasses: tableLayoutClasses,
        tableElmClasses: tableElmClasses,
        tableContentRef: tableContentRef,
        isFixedHeader: isFixedHeader,
        isWidthOverflow: isWidthOverflow,
        isFixedColumn: isFixedColumn,
        rowAndColFixedPosition: rowAndColFixedPosition,
        showColumnShadow: showColumnShadow,
        thWidthList: thWidthList,
        isPaginateData: isPaginateData,
        dataSource: dataSource,
        scrollType: type,
        rowHeight: rowHeight,
        trs: trs,
        bufferSize: bufferSize,
        scrollHeight: scrollHeight,
        visibleData: visibleData,
        translateY: translateY,
        affixHeaderRef: affixHeaderRef,
        showAffixHeader: showAffixHeader,
        statusClassNames: statusClassNames,
        scrollbarWidth: scrollbarWidth,
        isMultipleHeader: isMultipleHeader,
        showRightDivider: showRightDivider,
        refreshTable: refreshTable,
        onTableContentScroll: onTableContentScroll,
        renderPagination: renderPagination,
        renderTNode: renderTNode,
        handleRowMounted: handleRowMounted,
        onFixedChange: onFixedChange,
        updateHeaderScroll: updateHeaderScroll,
        onInnerScroll: onInnerScroll
      };
    },
    render: function render() {
      var _this$spansAndLeafNod,
          _this$spansAndLeafNod2,
          _this = this,
          _this$tableContentRef;

      var rowAndColFixedPosition = this.rowAndColFixedPosition;
      var data = this.isPaginateData ? this.dataSource : this.data;
      var defaultColWidth = this.tableLayout === "fixed" && this.isWidthOverflow ? "100px" : void 0;

      var affixedHeader = Boolean((this.headerAffixedTop || this.isVirtual) && this.tableWidth) && vue.createVNode("div", {
        "ref": "affixHeaderRef",
        "style": {
          width: "".concat(this.tableWidth, "px"),
          opacity: Number(this.showAffixHeader)
        },
        "class": _defineProperty$3({}, this.tableBaseClass.affixedHeaderElm, this.headerAffixedTop || this.isVirtual)
      }, [vue.createVNode("table", {
        "class": this.tableElmClasses,
        "style": _objectSpread$n(_objectSpread$n({}, this.tableElementStyles), {}, {
          width: "".concat(this.tableWidth, "px")
        })
      }, [vue.createVNode("colgroup", null, [(((_this$spansAndLeafNod = this.spansAndLeafNodes) === null || _this$spansAndLeafNod === void 0 ? void 0 : _this$spansAndLeafNod.leafColumns) || this.columns).map(function (col) {
        return vue.createVNode("col", {
          "key": col.colKey,
          "style": {
            width: formatCSSUnit(col.width) || defaultColWidth
          }
        }, null);
      })]), vue.createVNode(THead, {
        "isFixedHeader": this.isFixedHeader,
        "rowAndColFixedPosition": this.rowAndColFixedPosition,
        "isMultipleHeader": this.isMultipleHeader,
        "bordered": this.bordered,
        "spansAndLeafNodes": this.spansAndLeafNodes,
        "thList": this.thList,
        "thWidthList": this.thWidthList
      }, this.$slots)])]);

      var translate = "translate(0, ".concat(this.scrollHeight, "px)");
      var virtualStyle = {
        transform: translate,
        "-ms-transform": translate,
        "-moz-transform": translate,
        "-webkit-transform": translate
      };

      var tableBodyProps = _objectSpread$n({
        rowAndColFixedPosition: rowAndColFixedPosition,
        showColumnShadow: this.showColumnShadow,
        data: this.isVirtual ? this.visibleData : data,
        columns: this.spansAndLeafNodes.leafColumns,
        tableElm: this.tableRef,
        tableWidth: this.tableWidth,
        isWidthOverflow: this.isWidthOverflow,
        isVirtual: this.isVirtual,
        translateY: this.translateY,
        scrollType: this.scrollType,
        rowHeight: this.rowHeight,
        trs: this.trs,
        bufferSize: this.bufferSize,
        scroll: this.scroll,
        tableContentElm: this.tableContentRef,
        handleRowMounted: this.handleRowMounted,
        renderExpandedRow: this.renderExpandedRow
      }, pick_1(this.$props, extendTableProps));

      var tableContent = vue.createVNode("div", {
        "ref": "tableContentRef",
        "class": this.tableBaseClass.content,
        "style": this.tableContentStyles,
        "onScroll": this.onInnerScroll
      }, [this.isVirtual && vue.createVNode("div", {
        "class": this.virtualScrollClasses.cursor,
        "style": virtualStyle
      }, null), vue.createVNode("table", {
        "ref": "tableElmRef",
        "class": this.tableElmClasses,
        "style": this.tableElementStyles
      }, [vue.createVNode("colgroup", null, [(((_this$spansAndLeafNod2 = this.spansAndLeafNodes) === null || _this$spansAndLeafNod2 === void 0 ? void 0 : _this$spansAndLeafNod2.leafColumns) || this.columns).map(function (col) {
        return vue.createVNode("col", {
          "key": col.colKey,
          "style": {
            width: formatCSSUnit(col.width) || defaultColWidth
          }
        }, null);
      })]), vue.createVNode(THead, {
        "isFixedHeader": this.isFixedHeader,
        "rowAndColFixedPosition": this.rowAndColFixedPosition,
        "isMultipleHeader": this.isMultipleHeader,
        "bordered": this.bordered,
        "spansAndLeafNodes": this.spansAndLeafNodes,
        "thList": this.thList
      }, this.$slots), vue.createVNode(TBody, tableBodyProps, this.$slots), vue.createVNode(TFoot, {
        "rowKey": this.rowKey,
        "isFixedHeader": this.isFixedHeader,
        "rowAndColFixedPosition": rowAndColFixedPosition,
        "footData": this.footData,
        "columns": this.columns,
        "rowAttributes": this.rowAttributes,
        "rowClassName": this.rowClassName
      }, this.$slots)])]);

      var customLoadingText = this.renderTNode("loading");

      var loadingContent = this.loading !== void 0 && vue.createVNode(Loading, vue.mergeProps({
        "loading": !!this.loading,
        "text": customLoadingText ? function () {
          return customLoadingText;
        } : void 0,
        "attach": this.tableRef ? function () {
          return _this.tableRef;
        } : void 0,
        "showOverlay": true
      }, this.loadingProps), null);

      var topContent = this.renderTNode("topContent");
      var bottomContent = this.renderTNode("bottomContent");
      return vue.createVNode("div", {
        "ref": "tableRef",
        "class": this.dynamicBaseTableClasses,
        "style": "position: relative"
      }, [!!topContent && vue.createVNode("div", {
        "class": this.tableBaseClass.topContent
      }, [topContent]), !!(this.isVirtual || this.headerAffixedTop) && (this.headerAffixedTop ? vue.createVNode(Affix, vue.mergeProps({
        "offsetTop": 0
      }, this.headerAffixProps, {
        "onFixedChange": this.onFixedChange
      }), _isSlot$3(affixedHeader) ? affixedHeader : {
        "default": function _default() {
          return [affixedHeader];
        }
      }) : this.isFixedHeader && affixedHeader), tableContent, loadingContent, this.showRightDivider && vue.createVNode("div", {
        "class": this.tableBaseClass.scrollbarDivider,
        "style": {
          right: "".concat(this.scrollbarWidth, "px"),
          height: "".concat((_this$tableContentRef = this.tableContentRef) === null || _this$tableContentRef === void 0 ? void 0 : _this$tableContentRef.offsetHeight, "px")
        }
      }, null), !!bottomContent && vue.createVNode("div", {
        "class": this.tableBaseClass.bottomContent
      }, [bottomContent]), this.renderPagination()]);
    }
  });

  /**
   * Gets the last element of `array`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the last element of `array`.
   * @example
   *
   * _.last([1, 2, 3]);
   * // => 3
   */

  function last$1(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : undefined;
  }

  var last_1 = last$1;

  var baseGet$1 = _baseGet,
      baseSlice = _baseSlice;
  /**
   * Gets the parent value at `path` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} path The path to get the parent value of.
   * @returns {*} Returns the parent value.
   */

  function parent$1(object, path) {
    return path.length < 2 ? object : baseGet$1(object, baseSlice(path, 0, -1));
  }

  var _parent = parent$1;

  var castPath$1 = _castPath,
      last = last_1,
      parent = _parent,
      toKey$2 = _toKey;
  /**
   * The base implementation of `_.unset`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The property path to unset.
   * @returns {boolean} Returns `true` if the property is deleted, else `false`.
   */

  function baseUnset$1(object, path) {
    path = castPath$1(path, object);
    object = parent(object, path);
    return object == null || delete object[toKey$2(last(path))];
  }

  var _baseUnset = baseUnset$1;

  var isPlainObject = isPlainObject_1;
  /**
   * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
   * objects.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {string} key The key of the property to inspect.
   * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
   */

  function customOmitClone$1(value) {
    return isPlainObject(value) ? undefined : value;
  }

  var _customOmitClone = customOmitClone$1;

  var arrayMap = _arrayMap,
      baseClone = _baseClone,
      baseUnset = _baseUnset,
      castPath = _castPath,
      copyObject = _copyObject,
      customOmitClone = _customOmitClone,
      flatRest = _flatRest,
      getAllKeysIn = _getAllKeysIn;
  /** Used to compose bitmasks for cloning. */

  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;
  /**
   * The opposite of `_.pick`; this method creates an object composed of the
   * own and inherited enumerable property paths of `object` that are not omitted.
   *
   * **Note:** This method is considerably slower than `_.pick`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to omit.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.omit(object, ['a', 'c']);
   * // => { 'b': '2' }
   */

  var omit = flatRest(function (object, paths) {
    var result = {};

    if (object == null) {
      return result;
    }

    var isDeep = false;
    paths = arrayMap(paths, function (path) {
      path = castPath(path, object);
      isDeep || (isDeep = path.length > 1);
      return path;
    });
    copyObject(object, getAllKeysIn(object), result);

    if (isDeep) {
      result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
    }

    var length = paths.length;

    while (length--) {
      baseUnset(result, paths[length]);
    }

    return result;
  });
  var omit_1 = omit;

  var primaryTableProps = {
    asyncLoading: {
      type: [String, Function]
    },
    columnController: {
      type: Object
    },
    columnControllerVisible: {
      type: Boolean,
      "default": void 0
    },
    defaultColumnControllerVisible: {
      type: Boolean,
      "default": void 0
    },
    columns: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    displayColumns: {
      type: Array,
      "default": void 0
    },
    defaultDisplayColumns: {
      type: Array
    },
    dragSort: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["row", "row-handler", "col", "drag-col"].includes(val);
      }
    },
    dragSortOptions: {
      type: Object
    },
    expandedRow: {
      type: [String, Function]
    },
    expandedRowKeys: {
      type: Array,
      "default": void 0
    },
    defaultExpandedRowKeys: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    expandIcon: {
      type: [Boolean, Function],
      "default": true
    },
    expandOnRowClick: Boolean,
    filterIcon: {
      type: Function
    },
    filterRow: {
      type: [String, Function]
    },
    filterValue: {
      type: Object,
      "default": void 0
    },
    defaultFilterValue: {
      type: Object
    },
    hideSortTips: Boolean,
    multipleSort: Boolean,
    selectedRowKeys: {
      type: Array,
      "default": void 0
    },
    defaultSelectedRowKeys: {
      type: Array
    },
    sort: {
      type: [Object, Array],
      "default": void 0
    },
    defaultSort: {
      type: [Object, Array]
    },
    sortIcon: {
      type: Function
    },
    sortOnRowDraggable: Boolean,
    onAsyncLoadingClick: Function,
    onCellClick: Function,
    onChange: Function,
    onColumnChange: Function,
    onColumnControllerVisibleChange: Function,
    onDataChange: Function,
    onDisplayColumnsChange: Function,
    onDragSort: Function,
    onExpandChange: Function,
    onFilterChange: Function,
    onSelectChange: Function,
    onSortChange: Function
  };

  var props$7 = {
    attach: {
      type: [String, Function],
      "default": ""
    },
    body: {
      type: [String, Function],
      "default": ""
    },
    cancelBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    closeBtn: {
      type: [String, Boolean, Function],
      "default": true
    },
    closeOnEscKeydown: {
      type: Boolean,
      "default": true
    },
    closeOnOverlayClick: {
      type: Boolean,
      "default": true
    },
    confirmBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    "default": {
      type: [String, Function]
    },
    destroyOnClose: Boolean,
    draggable: Boolean,
    footer: {
      type: [Boolean, Function],
      "default": true
    },
    header: {
      type: [String, Boolean, Function],
      "default": true
    },
    mode: {
      type: String,
      "default": "modal",
      validator: function validator(val) {
        if (!val) return true;
        return ["modal", "modeless", "normal"].includes(val);
      }
    },
    placement: {
      type: String,
      "default": "top",
      validator: function validator(val) {
        if (!val) return true;
        return ["top", "center"].includes(val);
      }
    },
    preventScrollThrough: {
      type: Boolean,
      "default": true
    },
    showInAttachedElement: Boolean,
    showOverlay: {
      type: Boolean,
      "default": true
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "info", "warning", "danger", "success"].includes(val);
      }
    },
    top: {
      type: [String, Number]
    },
    visible: Boolean,
    defaultVisible: Boolean,
    width: {
      type: [String, Number]
    },
    zIndex: {
      type: Number
    },
    onCancel: Function,
    onClose: Function,
    onCloseBtnClick: Function,
    onClosed: Function,
    onConfirm: Function,
    onEscKeydown: Function,
    onOpened: Function,
    onOverlayClick: Function
  };

  function ownKeys$n(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$m(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$n(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$n(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useAction(action) {
    var instance = vue.getCurrentInstance();
    var renderTNodeJSX = useTNodeJSX();

    var getDefaultConfirmBtnProps = function getDefaultConfirmBtnProps(options) {
      var globalConfirm = options.globalConfirm,
          theme = options.theme,
          globalConfirmBtnTheme = options.globalConfirmBtnTheme;
      var defaultTheme = (globalConfirmBtnTheme === null || globalConfirmBtnTheme === void 0 ? void 0 : globalConfirmBtnTheme[theme]) || "primary";
      var props = {
        theme: defaultTheme,
        size: options.size,
        onClick: function onClick(e) {
          action.confirmBtnAction(e);
        }
      };

      if (isString_1(globalConfirm)) {
        props.content = globalConfirm;
      } else if (isObject_1(globalConfirm)) {
        props = _objectSpread$m(_objectSpread$m({}, props), globalConfirm);
      }

      return props;
    };

    var getDefaultCancelBtnProps = function getDefaultCancelBtnProps(options) {
      var globalCancel = options.globalCancel;
      var props = {
        theme: "default",
        size: options.size,
        onClick: function onClick(e) {
          action.cancelBtnAction(e);
        }
      };

      if (isString_1(globalCancel)) {
        props.content = globalCancel;
      } else if (isObject_1(globalCancel)) {
        props = _objectSpread$m(_objectSpread$m({}, props), globalCancel);
      }

      return props;
    };

    var getButtonByProps = function getButtonByProps(button, defaultButton, className) {
      var newOptions = defaultButton;

      if (isString_1(button)) {
        newOptions.content = button;
      } else if (isObject_1(button)) {
        newOptions = _objectSpread$m(_objectSpread$m({}, newOptions), button);
      }

      return vue.createVNode(Button, vue.mergeProps({
        "class": className
      }, newOptions), null);
    };

    var getConfirmBtn = function getConfirmBtn(options) {
      var confirmBtn = options.confirmBtn,
          className = options.className;
      if (confirmBtn === null) return null;

      if (confirmBtn && instance.slots.confirmBtn) {
        console.warn("Both $props.confirmBtn and $scopedSlots.confirmBtn exist, $props.confirmBtn is preferred.");
      }

      var defaultButtonProps = getDefaultConfirmBtnProps(options);

      if (!confirmBtn && !instance.slots.confirmBtn) {
        return vue.createVNode(Button, vue.mergeProps({
          "class": className
        }, defaultButtonProps), null);
      }

      if (confirmBtn && ["string", "object"].includes(_typeof$2(confirmBtn))) {
        return getButtonByProps(confirmBtn, defaultButtonProps, className);
      }

      return renderTNodeJSX("confirmBtn");
    };

    var getCancelBtn = function getCancelBtn(options) {
      var cancelBtn = options.cancelBtn,
          className = options.className;
      if (cancelBtn === null) return null;

      if (cancelBtn && instance.slots.cancelBtn) {
        console.warn("Both $props.cancelBtn and $scopedSlots.cancelBtn exist, $props.cancelBtn is preferred.");
      }

      var defaultButtonProps = getDefaultCancelBtnProps(options);

      if (!cancelBtn && !instance.slots.cancelBtn) {
        return vue.createVNode(Button, vue.mergeProps({
          "class": className
        }, defaultButtonProps), null);
      }

      if (cancelBtn && ["string", "object"].includes(_typeof$2(cancelBtn))) {
        return getButtonByProps(cancelBtn, defaultButtonProps);
      }

      return renderTNodeJSX("cancelBtn");
    };

    return {
      getConfirmBtn: getConfirmBtn,
      getCancelBtn: getCancelBtn
    };
  }

  function ownKeys$m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$l(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$m(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function GetCSSValue(v) {
    return Number.isNaN(Number(v)) ? v : "".concat(Number(v), "px");
  }

  var mousePosition;

  var getClickPosition = function getClickPosition(e) {
    mousePosition = {
      x: e.clientX,
      y: e.clientY
    };
    setTimeout(function () {
      mousePosition = null;
    }, 100);
  };

  if (typeof window !== "undefined" && window.document && window.document.documentElement) {
    document.documentElement.addEventListener("click", getClickPosition, true);
  }

  function InitDragEvent(dragBox) {
    var target = dragBox;
    target.addEventListener("mousedown", function (targetEvent) {
      var disX = targetEvent.clientX - target.offsetLeft;
      var disY = targetEvent.clientY - target.offsetTop;

      function mouseMoverHandler(documentEvent) {
        var left = documentEvent.clientX - disX;
        var top = documentEvent.clientY - disY;
        target.style.left = "".concat(left, "px");
        target.style.top = "".concat(top, "px");
      }

      function mouseUpHandler() {
        document.removeEventListener("mousemove", mouseMoverHandler);
        document.removeEventListener("mouseup", mouseUpHandler);
      }

      document.addEventListener("mousemove", mouseMoverHandler);
      document.addEventListener("mouseup", mouseUpHandler);
      document.addEventListener("dragend", mouseUpHandler);
    });
  }

  var _Dialog = vue.defineComponent({
    name: "TDialog",
    components: {
      CloseIcon: close,
      InfoCircleFilledIcon: infoCircleFilled,
      CheckCircleFilledIcon: checkCircleFilled,
      ErrorCircleFilledIcon: errorCircleFilled,
      TButton: Button,
      Transition: vue.Transition
    },
    directives: {
      TransferDom: TransferDom,
      draggable: function draggable(el, binding) {
        if (el && binding && binding.value) {
          InitDragEvent(el);
        }
      }
    },
    props: props$7,
    emits: ["update:visible"],
    setup: function setup(props2, context) {
      var _this = this;

      var COMPONENT_NAME = usePrefixClass("dialog");
      var LOCK_CLASS = usePrefixClass("dialog--lock");
      var classPrefix = usePrefixClass();
      var renderContent = useContent();
      var renderTNodeJSX = useTNodeJSX();
      var dialogEle = vue.ref(null);

      var _useConfig = useConfig("dialog"),
          global = _useConfig.global;

      var confirmBtnAction = function confirmBtnAction(e) {
        var _props2$onConfirm;

        (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 ? void 0 : _props2$onConfirm.call(props2, {
          e: e
        });
      };

      var cancelBtnAction = function cancelBtnAction(e) {
        var _props2$onCancel;

        (_props2$onCancel = props2.onCancel) === null || _props2$onCancel === void 0 ? void 0 : _props2$onCancel.call(props2, {
          e: e
        });
        emitCloseEvent({
          trigger: "cancel",
          e: e
        });
      };

      var _useAction = useAction({
        confirmBtnAction: confirmBtnAction,
        cancelBtnAction: cancelBtnAction
      }),
          getConfirmBtn = _useAction.getConfirmBtn,
          getCancelBtn = _useAction.getCancelBtn;

      useDestroyOnClose();
      var scrollWidth = vue.ref(0);
      var isModal = vue.computed(function () {
        return props2.mode === "modal";
      });
      var isModeless = vue.computed(function () {
        return props2.mode === "modeless";
      });
      var maskClass = vue.computed(function () {
        return ["".concat(COMPONENT_NAME.value, "__mask"), !props2.showOverlay && "".concat(classPrefix.value, "-is-hidden")];
      });
      var dialogClass = vue.computed(function () {
        var dialogClass2 = ["".concat(COMPONENT_NAME.value), "".concat(COMPONENT_NAME.value, "--default"), "".concat(COMPONENT_NAME.value, "--").concat(props2.placement), "".concat(COMPONENT_NAME.value, "__modal-").concat(props2.theme)];

        if (["modeless", "modal"].includes(props2.mode)) {
          dialogClass2.push("".concat(COMPONENT_NAME.value, "--fixed"));

          if (isModal.value && props2.showInAttachedElement) {
            dialogClass2.push("".concat(COMPONENT_NAME.value, "--absolute"));
          }
        }

        return dialogClass2;
      });
      var dialogStyle = vue.computed(function () {
        var top = props2.top,
            placement = props2.placement;
        var topStyle = {};

        if (top) {
          var topValue = GetCSSValue(top);
          topStyle = {
            top: topValue,
            transform: "translate(-50%, 0)",
            maxHeight: "calc(100% - ".concat(topValue, ")")
          };
        } else if (placement === "top") {
          topStyle = {
            maxHeight: "calc(100% - 20%)"
          };
        }

        return _objectSpread$l({
          width: GetCSSValue(props2.width)
        }, topStyle);
      });
      vue.watch(function () {
        return props2.visible;
      }, function (value) {
        if (value) {
          if (isModal.value && !props2.showInAttachedElement) {
            if (scrollWidth.value > 0) {
              var bodyCssText = "position: relative;width: calc(100% - ".concat(scrollWidth.value, "px);");
              document.body.style.cssText = bodyCssText;
            }

            !isModeless.value && addClass(document.body, LOCK_CLASS.value);
            vue.nextTick(function () {
              if (mousePosition && dialogEle.value) {
                dialogEle.value.style.transformOrigin = "".concat(mousePosition.x - dialogEle.value.offsetLeft, "px ").concat(mousePosition.y - dialogEle.value.offsetTop, "px");
              }
            });
          }
        } else {
          document.body.style.cssText = "";
          removeClass(document.body, LOCK_CLASS.value);
        }

        addKeyboardEvent(value);
      });

      var addKeyboardEvent = function addKeyboardEvent(status) {
        if (status) {
          document.addEventListener("keydown", keyboardEvent);
        } else {
          document.removeEventListener("keydown", keyboardEvent);
        }
      };

      var keyboardEvent = function keyboardEvent(e) {
        if (e.code === "Escape") {
          var _props2$onEscKeydown;

          (_props2$onEscKeydown = props2.onEscKeydown) === null || _props2$onEscKeydown === void 0 ? void 0 : _props2$onEscKeydown.call(props2, {
            e: e
          });

          if (props2.closeOnEscKeydown) {
            emitCloseEvent({
              trigger: "esc",
              e: e
            });
          }
        }
      };

      var overlayAction = function overlayAction(e) {
        var _props2$onOverlayClic;

        (_props2$onOverlayClic = props2.onOverlayClick) === null || _props2$onOverlayClic === void 0 ? void 0 : _props2$onOverlayClic.call(props2, {
          e: e
        });

        if (props2.closeOnOverlayClick) {
          emitCloseEvent({
            trigger: "overlay",
            e: e
          });
        }
      };

      var closeBtnAction = function closeBtnAction(e) {
        var _props2$onCloseBtnCli;

        (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 ? void 0 : _props2$onCloseBtnCli.call(props2, {
          e: e
        });
        emitCloseEvent({
          trigger: "close-btn",
          e: e
        });
      };

      var afterEnter = function afterEnter() {
        var _props2$onOpened;

        (_props2$onOpened = props2.onOpened) === null || _props2$onOpened === void 0 ? void 0 : _props2$onOpened.call(props2);
      };

      var afterLeave = function afterLeave() {
        var _props2$onClosed;

        (_props2$onClosed = props2.onClosed) === null || _props2$onClosed === void 0 ? void 0 : _props2$onClosed.call(props2);
      };

      var emitCloseEvent = function emitCloseEvent(ctx) {
        var _props2$onClose;

        (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 ? void 0 : _props2$onClose.call(props2, ctx);
        context.emit("update:visible", false);
      };

      var hasEventOn = function hasEventOn(name) {
        var _this$_events;

        var eventFuncs = (_this$_events = _this["_events"]) === null || _this$_events === void 0 ? void 0 : _this$_events[name];
        return !!(eventFuncs !== null && eventFuncs !== void 0 && eventFuncs.length);
      };

      var getIcon = function getIcon() {
        var icon = {
          info: vue.createVNode(infoCircleFilled, {
            "class": "t-is-info"
          }, null),
          warning: vue.createVNode(errorCircleFilled, {
            "class": "t-is-warning"
          }, null),
          danger: vue.createVNode(errorCircleFilled, {
            "class": "t-is-error"
          }, null),
          success: vue.createVNode(checkCircleFilled, {
            "class": "t-is-success"
          }, null)
        };
        return icon[props2.theme];
      };

      var renderDialog = function renderDialog() {
        var defaultHeader = vue.createVNode("h5", {
          "class": "title"
        }, null);

        var defaultCloseBtn = vue.createVNode(close, null, null);

        var body = renderContent("default", "body");

        var defaultFooter = vue.createVNode("div", null, [getCancelBtn({
          cancelBtn: props2.cancelBtn,
          globalCancel: global.value.cancel,
          className: "".concat(COMPONENT_NAME.value, "__cancel")
        }), getConfirmBtn({
          theme: props2.theme,
          confirmBtn: props2.confirmBtn,
          globalConfirm: global.value.confirm,
          globalConfirmBtnTheme: global.value.confirmBtnTheme,
          className: "".concat(COMPONENT_NAME.value, "__confirm")
        })]);

        var bodyClassName = props2.theme === "default" ? "".concat(COMPONENT_NAME.value, "__body") : "".concat(COMPONENT_NAME.value, "__body__icon");
        return vue.withDirectives(vue.createVNode("div", {
          "key": "dialog",
          "class": dialogClass.value,
          "style": dialogStyle.value,
          "ref": "dialogEle"
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__header")
        }, [getIcon(), renderTNodeJSX("header", defaultHeader)]), props2.closeBtn ? vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__close"),
          "onClick": closeBtnAction
        }, [renderTNodeJSX("closeBtn", defaultCloseBtn)]) : null, vue.createVNode("div", {
          "class": bodyClassName
        }, [body]), vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__footer")
        }, [renderTNodeJSX("footer", defaultFooter)])]), [[vue.resolveDirective("draggable"), isModeless.value && props2.draggable]]);
      };

      vue.onMounted(function () {
        scrollWidth.value = window.innerWidth - document.body.offsetWidth;
      });
      vue.onBeforeUnmount(function () {
        addKeyboardEvent(false);
      });
      return {
        COMPONENT_NAME: COMPONENT_NAME,
        scrollWidth: scrollWidth,
        isModal: isModal,
        isModeless: isModeless,
        maskClass: maskClass,
        dialogClass: dialogClass,
        dialogStyle: dialogStyle,
        dialogEle: dialogEle,
        afterEnter: afterEnter,
        afterLeave: afterLeave,
        hasEventOn: hasEventOn,
        renderDialog: renderDialog,
        overlayAction: overlayAction
      };
    },
    render: function render() {
      var _this2 = this;

      var COMPONENT_NAME = this.COMPONENT_NAME;

      var maskView = this.isModal && vue.createVNode("div", {
        "key": "mask",
        "class": this.maskClass,
        "onClick": this.overlayAction
      }, null);

      var dialogView = this.renderDialog();
      var view = [maskView, dialogView];
      var ctxStyle = {
        zIndex: this.zIndex
      };
      var ctxClass = ["".concat(COMPONENT_NAME, "__ctx"), _defineProperty$3({
        "t-dialog__ctx--fixed": this.mode === "modal"
      }, "".concat(COMPONENT_NAME, "__ctx--absolute"), this.isModal && this.showInAttachedElement)];
      return vue.createVNode(vue.resolveComponent("transition"), {
        "duration": 300,
        "name": "".concat(COMPONENT_NAME, "-zoom__vue"),
        "onAfterEnter": this.afterEnter,
        "onAfterLeave": this.afterLeave
      }, {
        "default": function _default() {
          return [(!_this2.destroyOnClose || _this2.visible) && vue.withDirectives(vue.createVNode("div", {
            "class": ctxClass,
            "style": ctxStyle
          }, [view]), [[vue.vShow, _this2.visible], [vue.resolveDirective("transfer-dom"), _this2.attach]])];
        }
      });
    }
  });

  function ownKeys$l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$k(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$l(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var createDialog = function createDialog(props) {
    var options = _objectSpread$k({}, props);

    var wrapper = document.createElement("div");
    var visible = vue.ref(false);
    var className = options.className;
    var component = vue.defineComponent({
      setup: function setup() {
        var dialogOptions = vue.ref(options);
        vue.onMounted(function () {
          visible.value = true;
          document.activeElement.blur();
        });
        return {
          dialogOptions: dialogOptions
        };
      },
      render: function render() {
        var onClose = options.onClose || function () {
          visible.value = false;
        };

        delete options.className;
        return vue.h(_Dialog, _objectSpread$k({
          onClose: onClose,
          visible: visible.value
        }, this.dialogOptions));
      }
    });
    var dialog = vue.createApp(component).mount(wrapper);

    if (className) {
      className.split(" ").forEach(function (name) {
        dialog.$el.classList.add(name.trim());
      });
    }

    if (options.style) {
      dialog.$el.style.cssText += options.style;
    }

    var container = getAttach(options.attach);

    if (container) {
      container.appendChild(wrapper);
    } else {
      console.error("attach is not exist");
    }

    var dialogNode = {
      show: function show() {
        visible.value = true;
      },
      hide: function hide() {
        visible.value = false;
      },
      update: function update(options2) {
        Object.assign(dialog, {
          dialogOptions: options2
        });
      },
      destroy: function destroy() {
        visible.value = false;
      }
    };
    return dialogNode;
  };

  var confirm = function confirm(props) {
    return createDialog(props);
  };

  var alert = function alert(props) {
    var options = _objectSpread$k({}, props);

    options.cancelBtn = null;
    return createDialog(options);
  };

  var extraApi$1 = {
    confirm: confirm,
    alert: alert
  };
  var DialogPlugin = createDialog;

  DialogPlugin.install = function (app) {
    app.config.globalProperties.$dialog = createDialog;
    Object.keys(extraApi$1).forEach(function (funcName) {
      app.config.globalProperties.$dialog[funcName] = extraApi$1[funcName];
    });
  };

  Object.keys(extraApi$1).forEach(function (funcName) {
    DialogPlugin[funcName] = extraApi$1[funcName];
  });

  function ownKeys$k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$j(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$k(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function getColumnKeys(columns) {
    var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /* @__PURE__ */new Set();

    for (var i = 0, len = columns.length; i < len; i++) {
      var _col$children;

      var col = columns[i];
      col.colKey && keys.add(col.colKey);

      if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
        getColumnKeys(col.children, keys);
      }
    }

    return keys;
  }
  function useColumnController(props, context) {
    var _useConfig = useConfig("table"),
        classPrefix = _useConfig.classPrefix,
        global = _useConfig.global;

    var _toRefs = vue.toRefs(props),
        columns = _toRefs.columns,
        columnController = _toRefs.columnController,
        displayColumns = _toRefs.displayColumns,
        columnControllerVisible = _toRefs.columnControllerVisible;

    var dialogInstance = vue.ref(null);
    var enabledColKeys = vue.computed(function () {
      var _columnController$val;

      var arr = (((_columnController$val = columnController.value) === null || _columnController$val === void 0 ? void 0 : _columnController$val.fields) || _toConsumableArray(getColumnKeys(columns.value))).filter(function (v) {
        return v;
      });

      return new Set(arr);
    });

    var keys = _toConsumableArray(getColumnKeys(columns.value));

    var _useDefaultValue = useDefaultValue(displayColumns, props.defaultDisplayColumns || keys, props.onDisplayColumnsChange, "displayColumns"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        tDisplayColumns = _useDefaultValue2[0],
        setTDisplayColumns = _useDefaultValue2[1];

    var columnCheckboxKeys = vue.ref(displayColumns.value || props.defaultDisplayColumns || keys);
    var checkboxOptions = vue.computed(function () {
      return getCheckboxOptions(columns.value);
    });
    var intersectionChecked = vue.computed(function () {
      return intersection_1(columnCheckboxKeys.value, _toConsumableArray(enabledColKeys.value));
    });
    vue.watch([displayColumns], function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
          val = _ref2[0];

      columnCheckboxKeys.value = val || props.defaultDisplayColumns || keys;
    });

    function getCheckboxOptions(columns2) {
      var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      var _loop = function _loop(i, len) {
        var _item$children;

        var item = columns2[i];

        if (item.colKey) {
          arr.push({
            label: function label() {
              return renderTitle(context.slots, item, i);
            },
            value: item.colKey,
            disabled: !enabledColKeys.value.has(item.colKey)
          });
        }

        if ((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
          getCheckboxOptions(item.children, arr);
        }
      };

      for (var i = 0, len = columns2.length; i < len; i++) {
        _loop(i);
      }

      return arr;
    }

    var handleCheckChange = function handleCheckChange(val, ctx) {
      var _props$onColumnChange;

      columnCheckboxKeys.value = val;
      var params = {
        columns: val,
        type: ctx.type,
        currentColumn: getCurrentRowByKey(columns.value, String(ctx.current)),
        e: ctx.e
      };
      (_props$onColumnChange = props.onColumnChange) === null || _props$onColumnChange === void 0 ? void 0 : _props$onColumnChange.call(props, params);
    };

    var handleClickAllShowColumns = function handleClickAllShowColumns(checked, ctx) {
      if (checked) {
        var _columns$value, _props$onColumnChange2;

        var newData = ((_columns$value = columns.value) === null || _columns$value === void 0 ? void 0 : _columns$value.map(function (t) {
          return t.colKey;
        })) || [];
        columnCheckboxKeys.value = newData;
        (_props$onColumnChange2 = props.onColumnChange) === null || _props$onColumnChange2 === void 0 ? void 0 : _props$onColumnChange2.call(props, {
          type: "check",
          columns: newData,
          e: ctx.e
        });
      } else {
        var _props$onColumnChange3;

        var disabledColKeys = checkboxOptions.value.filter(function (t) {
          return t.disabled;
        }).map(function (t) {
          return t.value;
        });
        columnCheckboxKeys.value = disabledColKeys;
        (_props$onColumnChange3 = props.onColumnChange) === null || _props$onColumnChange3 === void 0 ? void 0 : _props$onColumnChange3.call(props, {
          type: "uncheck",
          columns: disabledColKeys,
          e: ctx.e
        });
      }
    };

    var handleToggleColumnController = function handleToggleColumnController() {
      var _columnController$val4;

      dialogInstance.value = DialogPlugin.confirm(_objectSpread$j({
        header: global.value.columnConfigTitleText,
        body: function body() {
          var _columnController$val2, _columnController$val3;

          var widthMode = ((_columnController$val2 = columnController.value) === null || _columnController$val2 === void 0 ? void 0 : _columnController$val2.displayType) === "fixed-width" ? "fixed" : "auto";
          var checkedLength = intersectionChecked.value.length;
          var isCheckedAll = checkedLength === enabledColKeys.value.size;
          var isIndeterminate = checkedLength > 0 && checkedLength < enabledColKeys.value.size;

          var defaultNode = vue.createVNode("div", {
            "class": ["".concat(classPrefix.value, "-table__column-controller"), "".concat(classPrefix.value, "-table__column-controller--").concat(widthMode)]
          }, [vue.createVNode("div", {
            "class": "".concat(classPrefix.value, "-table__column-controller-body")
          }, [vue.createVNode("p", {
            "class": "".concat(classPrefix.value, "-table__column-controller-desc")
          }, [global.value.columnConfigDescriptionText]), vue.createVNode("div", {
            "class": "".concat(classPrefix.value, "-table__column-controller-block")
          }, [vue.createVNode(Checkbox, {
            "indeterminate": isIndeterminate,
            "checked": isCheckedAll,
            "onChange": handleClickAllShowColumns
          }, {
            "default": function _default() {
              return [global.value.selectAllText];
            }
          })]), vue.createVNode("div", {
            "class": "".concat(classPrefix.value, "-table__column-controller-block")
          }, [vue.createVNode(CheckboxGroup, vue.mergeProps({
            "options": checkboxOptions.value
          }, ((_columnController$val3 = columnController.value) === null || _columnController$val3 === void 0 ? void 0 : _columnController$val3.checkboxProps) || {}, {
            "value": columnCheckboxKeys.value,
            "onChange": handleCheckChange
          }), null)])])]);

          return defaultNode;
        },
        confirmBtn: global.value.confirmText,
        cancelBtn: global.value.cancelText,
        width: 612,
        onConfirm: function onConfirm() {
          setTDisplayColumns(_toConsumableArray(columnCheckboxKeys.value));

          if (columnControllerVisible.value === void 0) {
            dialogInstance.value.hide();
          } else {
            var _props$onColumnContro;

            (_props$onColumnContro = props.onColumnControllerVisibleChange) === null || _props$onColumnContro === void 0 ? void 0 : _props$onColumnContro.call(props, false, {
              trigger: "cancel"
            });
            context.emit("update:columnControllerVisible", false);
          }
        },
        onClose: function onClose() {
          if (columnControllerVisible.value === void 0) {
            dialogInstance.value.hide();
          } else {
            var _props$onColumnContro2;

            (_props$onColumnContro2 = props.onColumnControllerVisibleChange) === null || _props$onColumnContro2 === void 0 ? void 0 : _props$onColumnContro2.call(props, false, {
              trigger: "confirm"
            });
            context.emit("update:columnControllerVisible", false);
          }
        }
      }, ((_columnController$val4 = columnController.value) === null || _columnController$val4 === void 0 ? void 0 : _columnController$val4.dialogProps) || {}));
    };

    vue.watch([columnControllerVisible], function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 1),
          visible = _ref4[0];

      if (visible === void 0) return;

      if (dialogInstance.value) {
        visible ? dialogInstance.value.show() : dialogInstance.value.hide();
      } else {
        visible && handleToggleColumnController();
      }
    }, {
      immediate: true
    });

    var renderColumnController = function renderColumnController() {
      var _props$columnControll;

      var isColumnController = !!(columnController.value && Object.keys(columnController.value).length);
      var placement = isColumnController ? columnController.value.placement || "top-right" : "";
      if (isColumnController && columnController.value.hideTriggerButton) return null;
      var classes = ["".concat(classPrefix.value, "-table__column-controller-trigger"), _defineProperty$3({}, "".concat(classPrefix.value, "-align-").concat(placement), !!placement)];
      return vue.createVNode("div", {
        "class": classes
      }, [vue.createVNode(Button, vue.mergeProps({
        "theme": "default",
        "variant": "outline",
        "onClick": handleToggleColumnController,
        "content": global.value.columnConfigButtonText
      }, (_props$columnControll = props.columnController) === null || _props$columnControll === void 0 ? void 0 : _props$columnControll.buttonProps), {
        icon: function icon() {
          return vue.createVNode(setting, null, null);
        }
      })]);
    };

    return {
      tDisplayColumns: tDisplayColumns,
      columnCheckboxKeys: columnCheckboxKeys,
      checkboxOptions: checkboxOptions,
      renderColumnController: renderColumnController
    };
  }

  function useRowExpand(props, context) {
    var _toRefs = vue.toRefs(props),
        expandedRowKeys = _toRefs.expandedRowKeys;

    var renderTNode = useTNodeJSX();

    var _useConfig = useConfig("table"),
        t = _useConfig.t,
        global = _useConfig.global;

    var _useClassName = useClassName(),
        tableExpandClasses = _useClassName.tableExpandClasses,
        positiveRotate90 = _useClassName.positiveRotate90,
        tableFullRowClasses = _useClassName.tableFullRowClasses;

    var _useDefaultValue = useDefaultValue(expandedRowKeys, props.defaultExpandedRowKeys, props.onExpandChange, "expandedRowKeys"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        tExpandedRowKeys = _useDefaultValue2[0],
        setTExpandedRowKeys = _useDefaultValue2[1];

    var showExpandedRow = vue.computed(function () {
      return Boolean(props.expandedRow || context.slots.expandedRow || context.slots["expanded-row"]);
    });
    var showExpandIconColumn = vue.computed(function () {
      return props.expandIcon !== false && showExpandedRow.value;
    });
    var isFirstColumnFixed = vue.computed(function () {
      var _props$columns, _props$columns$;

      return ((_props$columns = props.columns) === null || _props$columns === void 0 ? void 0 : (_props$columns$ = _props$columns[0]) === null || _props$columns$ === void 0 ? void 0 : _props$columns$.fixed) === "left";
    });

    var onToggleExpand = function onToggleExpand(e, row) {
      props.expandOnRowClick && e.stopPropagation();
      var currentId = get_1(row, props.rowKey || "id");
      var index = tExpandedRowKeys.value.indexOf(currentId);

      var newKeys = _toConsumableArray(tExpandedRowKeys.value);

      index !== -1 ? newKeys.splice(index, 1) : newKeys.push(currentId);
      setTExpandedRowKeys(newKeys, {
        expandedRowData: props.data.filter(function (t2) {
          return newKeys.includes(get_1(t2, props.rowKey || "id"));
        })
      });
    };

    var renderExpandIcon = function renderExpandIcon(_, p) {
      var row = p.row,
          rowIndex = p.rowIndex;
      var currentId = get_1(row, props.rowKey || "id");
      var expanded = tExpandedRowKeys.value.includes(currentId);
      var icon = renderTNode("expandIcon", {
        defaultNode: t(global.value.expandIcon) || vue.createVNode(chevronRightCircle, null, null),
        params: {
          row: row,
          index: rowIndex
        }
      });
      if (!icon) return null;
      var classes = [tableExpandClasses.iconBox, tableExpandClasses[expanded ? "expanded" : "collapsed"], _defineProperty$3({}, positiveRotate90, expanded)];
      return vue.createVNode("span", {
        "class": classes,
        "onClick": function onClick(e) {
          return onToggleExpand(e, row);
        }
      }, [icon]);
    };

    var getExpandColumn = function getExpandColumn() {
      var expandCol = {
        colKey: "__EXPAND_ROW_ICON_COLUMN__",
        width: 64,
        className: tableExpandClasses.iconCell,
        fixed: isFirstColumnFixed.value ? "left" : void 0,
        cell: renderExpandIcon
      };
      return expandCol;
    };

    var renderExpandedRow = function renderExpandedRow(p) {
      var rowId = get_1(p.row, props.rowKey || "id");
      if (!tExpandedRowKeys.value.includes(rowId)) return null;
      var isFixedLeft = p.isWidthOverflow && props.columns.find(function (item) {
        return item.fixed === "left";
      });
      return vue.createVNode("tr", {
        "key": "expand_".concat(rowId),
        "class": [tableExpandClasses.row, _defineProperty$3({}, tableFullRowClasses.base, isFixedLeft)]
      }, [vue.createVNode("td", {
        "colspan": p.columns.length
      }, [vue.createVNode("div", {
        "class": [tableExpandClasses.rowInner, _defineProperty$3({}, tableFullRowClasses.innerFullRow, isFixedLeft)],
        "style": isFixedLeft ? {
          width: "".concat(p.tableWidth, "px")
        } : {}
      }, [vue.createVNode("div", {
        "class": tableFullRowClasses.innerFullElement
      }, [renderTNode("expandedRow", {
        params: p
      })])])])]);
    };

    var onInnerExpandRowClick = function onInnerExpandRowClick(p) {
      onToggleExpand(p.e, p.row);
    };

    return {
      showExpandedRow: showExpandedRow,
      showExpandIconColumn: showExpandIconColumn,
      getExpandColumn: getExpandColumn,
      renderExpandedRow: renderExpandedRow,
      onInnerExpandRowClick: onInnerExpandRowClick
    };
  }

  function ownKeys$j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$i(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$j(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useRowSelect(props) {
    var _toRefs = vue.toRefs(props),
        selectedRowKeys = _toRefs.selectedRowKeys,
        columns = _toRefs.columns,
        data = _toRefs.data,
        rowKey = _toRefs.rowKey;

    var _useClassName = useClassName(),
        tableSelectedClasses = _useClassName.tableSelectedClasses;

    var selectedRowClassNames = vue.ref();

    var _useDefaultValue = useDefaultValue(selectedRowKeys, props.defaultSelectedRowKeys || [], props.onSelectChange, "selectedRowKeys"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        tSelectedRowKeys = _useDefaultValue2[0],
        setTSelectedRowKeys = _useDefaultValue2[1];

    var selectColumn = vue.computed(function () {
      return props.columns.find(function (_ref) {
        var type = _ref.type;
        return ["multiple", "single"].includes(type);
      });
    });
    var canSelectedRows = vue.computed(function () {
      return props.data.filter(function (row, rowIndex) {
        return !isDisabled(row, rowIndex);
      });
    });
    var intersectionKeys = vue.computed(function () {
      return intersection_1(tSelectedRowKeys.value, canSelectedRows.value.map(function (t) {
        return get_1(t, props.rowKey || "id");
      }));
    });
    vue.watch([data, columns, tSelectedRowKeys, selectColumn, rowKey], function () {
      var _selectColumn$value;

      var disabledRowFunc = function disabledRowFunc(p) {
        return selectColumn.value.disabled(p) ? tableSelectedClasses.disabled : "";
      };

      var disabledRowClass = (_selectColumn$value = selectColumn.value) !== null && _selectColumn$value !== void 0 && _selectColumn$value.disabled ? disabledRowFunc : void 0;
      var selected = new Set(tSelectedRowKeys.value);

      var selectedRowClassFunc = function selectedRowClassFunc(_ref2) {
        var row = _ref2.row;
        var rowId = get_1(row, props.rowKey || "id");
        return selected.has(rowId) ? tableSelectedClasses.selected : "";
      };

      var selectedRowClass = selected.size ? selectedRowClassFunc : void 0;
      selectedRowClassNames.value = [disabledRowClass, selectedRowClass];
    }, {
      immediate: true
    });

    function isDisabled(row, rowIndex) {
      return isRowSelectedDisabled(selectColumn.value, row, rowIndex);
    }

    function getSelectedHeader() {
      var isIndeterminate = intersectionKeys.value.length > 0 && intersectionKeys.value.length < canSelectedRows.value.length;
      return function () {
        return vue.createVNode(Checkbox, {
          "checked": intersectionKeys.value.length === canSelectedRows.value.length,
          "indeterminate": isIndeterminate,
          "disabled": !canSelectedRows.value.length,
          "onChange": handleSelectAll
        }, null);
      };
    }

    function renderSelectCell(p) {
      var column = p.col,
          _p$row = p.row,
          row = _p$row === void 0 ? {} : _p$row,
          rowIndex = p.rowIndex;
      var checked = tSelectedRowKeys.value.includes(get_1(row, props.rowKey || "id"));
      var disabled = typeof column.disabled === "function" ? column.disabled({
        row: row,
        rowIndex: rowIndex
      }) : column.disabled;
      var checkProps = isFunction_1(column.checkProps) ? column.checkProps({
        row: row,
        rowIndex: rowIndex
      }) : column.checkProps;

      var selectBoxProps = _objectSpread$i(_objectSpread$i({
        checked: checked,
        disabled: disabled
      }, checkProps), {}, {
        onClick: function onClick(e) {
          if (_typeof$2(e) === "object" && "e" in e) {
            var _e$e;

            (_e$e = e.e) === null || _e$e === void 0 ? void 0 : _e$e.stopPropagation();
          } else {
            e === null || e === void 0 ? void 0 : e.stopPropagation();
          }
        },
        onChange: function onChange() {
          return handleSelectChange(row);
        }
      });

      if (column.type === "single") return vue.createVNode(Radio, selectBoxProps, null);
      if (column.type === "multiple") return vue.createVNode(Checkbox, selectBoxProps, null);
      return null;
    }

    function handleSelectChange() {
      var row = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var selectedRowKeys2 = _toConsumableArray(tSelectedRowKeys.value);

      var reRowKey = props.rowKey || "id";
      var id = get_1(row, reRowKey);
      var selectedRowIndex = selectedRowKeys2.indexOf(id);
      var isExisted = selectedRowIndex !== -1;

      if (selectColumn.value.type === "multiple") {
        isExisted ? selectedRowKeys2.splice(selectedRowIndex, 1) : selectedRowKeys2.push(id);
      } else if (selectColumn.value.type === "single") {
        selectedRowKeys2 = !isExisted ? [id] : [];
      } else {
        log.warn("Table", "`column.type` must be one of `multiple` and `single`");
        return;
      }

      setTSelectedRowKeys(selectedRowKeys2, {
        selectedRowData: filterDataByIds(props.data, selectedRowKeys2, reRowKey),
        currentRowKey: id,
        currentRowData: row,
        type: isExisted ? "uncheck" : "check"
      });
    }

    function handleSelectAll(checked) {
      var _selectedRowKeys$valu;

      var reRowKey = props.rowKey || "id";
      var canSelectedRowKeys = canSelectedRows.value.map(function (record) {
        return get_1(record, reRowKey);
      });
      var disabledSelectedRowKeys = ((_selectedRowKeys$valu = selectedRowKeys.value) === null || _selectedRowKeys$valu === void 0 ? void 0 : _selectedRowKeys$valu.filter(function (id) {
        return !canSelectedRowKeys.includes(id);
      })) || [];
      var allIds = checked ? [].concat(_toConsumableArray(disabledSelectedRowKeys), _toConsumableArray(canSelectedRowKeys)) : _toConsumableArray(disabledSelectedRowKeys);
      setTSelectedRowKeys(allIds, {
        selectedRowData: filterDataByIds(props.data, allIds, reRowKey),
        type: checked ? "check" : "uncheck",
        currentRowKey: "CHECK_ALL_BOX"
      });
    }

    function formatToRowSelectColumn(col) {
      var isSelection = ["multiple", "single"].includes(col.type);
      if (!isSelection) return col;
      return _objectSpread$i(_objectSpread$i({}, col), {}, {
        width: col.width || 64,
        cell: function cell(_, p) {
          return renderSelectCell(p);
        },
        title: col.type === "multiple" ? getSelectedHeader() : ""
      });
    }

    return {
      selectedRowClassNames: selectedRowClassNames,
      formatToRowSelectColumn: formatToRowSelectColumn
    };
  }

  function _isSlot$2(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var SorterButton = vue.defineComponent({
    name: "TSorterButton",
    props: {
      sortType: {
        type: String,
        "default": "all"
      },
      sortOrder: {
        type: String,
        "default": function _default() {
          return "";
        }
      },
      sortIcon: Function,
      tooltipProps: Object,
      hideSortTips: Boolean
    },
    emits: ["sort-icon-click"],
    setup: function setup(props, context) {
      var _useClassName = useClassName(),
          tableSortClasses = _useClassName.tableSortClasses,
          negativeRotate180 = _useClassName.negativeRotate180;

      var renderTNode = useTNodeDefault();

      var _useConfig = useConfig("table"),
          t = _useConfig.t,
          global = _useConfig.global;

      var allowSortTypes = vue.computed(function () {
        return props.sortType === "all" ? ["asc", "desc"] : [props.sortType];
      });

      var onSortIconClick = function onSortIconClick(e, direction) {
        context.emit("sort-icon-click", e, {
          descending: direction === "desc"
        });
      };

      return {
        t: t,
        global: global,
        tableSortClasses: tableSortClasses,
        negativeRotate180: negativeRotate180,
        allowSortTypes: allowSortTypes,
        onSortIconClick: onSortIconClick,
        renderTNode: renderTNode
      };
    },
    methods: {
      getSortIcon: function getSortIcon(direction, activeClass) {
        var _this = this;

        var defaultIcon = this.t(this.global.sortIcon) || vue.createVNode(chevronDown, null, null);

        var icon = this.renderTNode("sortIcon", defaultIcon);
        var sortClassName = [activeClass, this.tableSortClasses.sortIcon, this.tableSortClasses.iconDirection[direction], _defineProperty$3({}, this.negativeRotate180, direction === "asc")];
        return vue.createVNode("span", {
          "class": sortClassName,
          "onClick": function onClick(e) {
            return _this.onSortIconClick(e, direction);
          }
        }, [icon]);
      }
    },
    render: function render() {
      var _this2 = this;

      var tableSortClasses = this.tableSortClasses;
      var classes = [tableSortClasses.trigger, _defineProperty$3({}, tableSortClasses.doubleIcon, this.allowSortTypes.length > 1)];
      var tooltips = {
        asc: this.global.sortAscendingOperationText,
        desc: this.global.sortDescendingOperationText
      };
      var sortButton = this.allowSortTypes.map(function (direction) {
        var _slot;

        var _this2$hideSortTips;

        var activeClass = direction === _this2.sortOrder ? tableSortClasses.iconActive : tableSortClasses.iconDefault;
        var cancelTips = _this2.global.sortCancelOperationText;
        var tips = direction === _this2.sortOrder ? cancelTips : tooltips[direction];
        if ((_this2$hideSortTips = _this2.hideSortTips) !== null && _this2$hideSortTips !== void 0 ? _this2$hideSortTips : _this2.global.hideSortTips) return _this2.getSortIcon(direction, activeClass);
        return vue.createVNode(Tooltip, vue.mergeProps({
          "content": tips,
          "placement": "right"
        }, _this2.tooltipProps, {
          "showArrow": false,
          "class": _this2.tableSortClasses.iconDirection[direction]
        }), _isSlot$2(_slot = _this2.getSortIcon(direction, activeClass)) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        });
      });
      return vue.createVNode("div", {
        "class": classes
      }, [sortButton]);
    }
  });

  function ownKeys$i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$h(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$i(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useSorter(props, _ref) {
    _ref.emit;
        var slots = _ref.slots;

    var _toRefs = vue.toRefs(props),
        sort = _toRefs.sort,
        data = _toRefs.data;

    var originalData = vue.ref();

    var _useDefaultValue = useDefaultValue(sort, props.defaultSort, props.onSortChange, "sort"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        tSortInfo = _useDefaultValue2[0],
        setTSortInfo = _useDefaultValue2[1];

    var _useDefaultValue3 = useDefaultValue(data, [], props.onDataChange, "data"),
        _useDefaultValue4 = _slicedToArray(_useDefaultValue3, 2),
        tData = _useDefaultValue4[0],
        setTData = _useDefaultValue4[1];

    var sorterFuncMap = vue.computed(function () {
      return getSorterFuncMap(props.columns);
    });
    var sortArray = vue.computed(function () {
      var sort2 = tSortInfo.value;
      if (!sort2) return [];
      return Array.isArray(sort2) ? sort2 : [sort2];
    });
    var sortMap = vue.computed(function () {
      var sortMap2 = {};
      sortArray.value.forEach(function (info, index) {
        var sortBy = info.sortBy;
        sortMap2[sortBy] = _objectSpread$h({
          index: index
        }, info);
      });
      return sortMap2;
    });

    function getSorterFuncMap(columns) {
      var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      for (var i = 0, len = columns.length; i < len; i++) {
        var _col$children;

        var col = columns[i];

        if (isFunction_1(col.sorter)) {
          map[col.colKey] = col.sorter;
        }

        if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
          getSorterFuncMap(col.children, map);
        }
      }

      return map;
    }

    function handleDataSort(sortInfo) {
      var sort2 = sortInfo;
      if (!Object.keys(sorterFuncMap.value).length) return;

      if (!originalData.value) {
        originalData.value = tData.value;
      }

      var isEmptyArraySort = !sort2 || sort2 instanceof Array && !sort2.length;
      var isEmptyObjectSort = !(sort2 instanceof Array) && !(sort2 !== null && sort2 !== void 0 && sort2.sortBy);

      if (isEmptyArraySort || isEmptyObjectSort) {
        setTData(originalData.value, {
          trigger: "sort"
        });
        return originalData.value;
      }

      var formatedSort = sort2 instanceof Array ? sort2 : [sort2];
      var newData = tData.value.slice().sort(function (a, b) {
        var sortResult = 0;

        for (var i = 0, len = formatedSort.length; i < len; i++) {
          var item = formatedSort[i];
          var sortFunc = sorterFuncMap.value[item.sortBy];

          if (sortResult === 0 && sortFunc) {
            sortResult = item.descending ? sortFunc(b, a) : sortFunc(a, b);
          } else {
            break;
          }
        }

        return sortResult;
      });
      if (JSON.stringify(newData) === JSON.stringify(tData.value)) return;
      setTData(newData, {
        trigger: "sort"
      });
      return newData;
    }

    function handleSortHeaderClick(col, p) {
      var _props$onChange;

      var sortInfo;

      if (props.multipleSort) {
        sortInfo = getMultipleNextSort(col, p);
      } else {
        var sort2 = tSortInfo.value instanceof Array ? tSortInfo.value[0] : tSortInfo.value;
        sortInfo = getSingleNextSort(col, sort2, p);
      }

      var newData = handleDataSort(sortInfo);
      var currentData = newData || tData.value;
      var currentDataSource = currentData;
      setTSortInfo(sortInfo, {
        currentDataSource: currentDataSource,
        col: col
      });
      (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, {
        sorter: sortInfo
      }, {
        currentData: currentData,
        trigger: "sorter"
      });
    }

    function getSortOrder(descending) {
      if (descending === void 0) return;
      return descending ? "desc" : "asc";
    }

    function getSingleNextSort(col, sortInfo, p) {
      if (sortInfo && sortInfo.sortBy === col.colKey && sortInfo.descending === p.descending) {
        return void 0;
      }

      return {
        sortBy: col.colKey,
        descending: p.descending
      };
    }

    function getMultipleNextSort(col, p) {
      var sort2 = tSortInfo.value;
      if (!(sort2 instanceof Array)) return;
      var colKey = col.colKey;

      var result = _toConsumableArray(sort2);

      for (var i = 0, len = sort2.length; i < len; i++) {
        if (sort2[i].sortBy === colKey) {
          var next = getSingleNextSort(col, sort2[i], p);
          next ? result[i] = next : result.splice(i, 1);
          return result;
        }
      }

      result.push({
        sortBy: colKey,
        descending: p.descending
      });
      return result;
    }

    function renderSortIcon(_ref2) {
      var _sortMap$value$col$co;

      var col = _ref2.col;
      if (!col.sorter) return null;
      var sorterButtonsProps = {
        sortType: col.sortType,
        sortOrder: getSortOrder((_sortMap$value$col$co = sortMap.value[col.colKey]) === null || _sortMap$value$col$co === void 0 ? void 0 : _sortMap$value$col$co.descending),
        sortIcon: props.sortIcon,
        hideSortTips: props.hideSortTips
      };
      return vue.createVNode(SorterButton, vue.mergeProps(sorterButtonsProps, {
        "onSortIconClick": function onSortIconClick(_, p) {
          return handleSortHeaderClick(col, p);
        }
      }), {
        sortIcon: slots.sortIcon
      });
    }

    return {
      renderSortIcon: renderSortIcon
    };
  }

  function ownKeys$h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$h(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TableFilterController = vue.defineComponent({
    name: "TableFilterController",
    props: {
      column: Object,
      tFilterValue: Object,
      innerFilterValue: Object,
      tableFilterClasses: Object,
      isFocusClass: String,
      primaryTableElement: {},
      onVisibleChange: Function
    },
    emits: ["inner-filter-change", "reset", "confirm"],
    setup: function setup(props) {
      var triggerElementRef = vue.ref(null);
      var renderTNode = useTNodeDefault();

      var _useConfig = useConfig("table"),
          t = _useConfig.t,
          global = _useConfig.global;

      var filterPopupVisible = vue.ref(false);

      var onFilterPopupVisibleChange = function onFilterPopupVisibleChange(visible) {
        var _props$onVisibleChang;

        filterPopupVisible.value = visible;
        (_props$onVisibleChang = props.onVisibleChange) === null || _props$onVisibleChang === void 0 ? void 0 : _props$onVisibleChang.call(props, visible);
      };

      return {
        t: t,
        global: global,
        filterPopupVisible: filterPopupVisible,
        triggerElementRef: triggerElementRef,
        renderTNode: renderTNode,
        onFilterPopupVisibleChange: onFilterPopupVisibleChange
      };
    },
    render: function render() {
      var _this = this,
          _this$tFilterValue;

      var getFilterContent = function getFilterContent(column2) {
        var _column2$filter, _column2$filter2, _column2$filter3, _column2$filter4, _column2$filter5, _this$innerFilterValu, _column2$filter6, _column2$filter7, _this$innerFilterValu2;

        var types = ["single", "multiple", "input"];

        if (column2.type && !types.includes(column2.filter.type)) {
          console.error("TDesign Table Error: column.filter.type must be the following: ".concat(JSON.stringify(types)));
          return;
        }

        if (column2 !== null && column2 !== void 0 && (_column2$filter = column2.filter) !== null && _column2$filter !== void 0 && _column2$filter.component && typeof (column2 === null || column2 === void 0 ? void 0 : (_column2$filter2 = column2.filter) === null || _column2$filter2 === void 0 ? void 0 : _column2$filter2.component) !== "function") {
          console.error("TDesign Table Error: column.filter.component must be a function");
          return;
        }

        var component = {
          single: RadioGroup,
          multiple: CheckboxGroup,
          input: Input
        }[column2.filter.type];
        if (!component && !(column2 !== null && column2 !== void 0 && (_column2$filter3 = column2.filter) !== null && _column2$filter3 !== void 0 && _column2$filter3.component)) return;

        var filterComponentProps = _objectSpread$g(_objectSpread$g({
          options: ["single", "multiple"].includes(column2.filter.type) ? (_column2$filter4 = column2.filter) === null || _column2$filter4 === void 0 ? void 0 : _column2$filter4.list : void 0
        }, ((_column2$filter5 = column2.filter) === null || _column2$filter5 === void 0 ? void 0 : _column2$filter5.props) || {}), {}, {
          value: (_this$innerFilterValu = _this.innerFilterValue) === null || _this$innerFilterValu === void 0 ? void 0 : _this$innerFilterValu[column2.colKey],
          onChange: function onChange(val) {
            _this.$emit("inner-filter-change", val, column2);
          }
        });

        return vue.createVNode("div", {
          "class": _this.tableFilterClasses.contentInner
        }, [column2 !== null && column2 !== void 0 && (_column2$filter6 = column2.filter) !== null && _column2$filter6 !== void 0 && _column2$filter6.component ? column2 === null || column2 === void 0 ? void 0 : (_column2$filter7 = column2.filter) === null || _column2$filter7 === void 0 ? void 0 : _column2$filter7.component(function (v, b) {
          var tProps = _typeof$2(b) === "object" && "attrs" in b ? b.attrs : {};
          return vue.h(v, {
            props: _objectSpread$g(_objectSpread$g({}, filterComponentProps), tProps)
          });
        }) : vue.createVNode(component, vue.mergeProps({
          "value": (_this$innerFilterValu2 = _this.innerFilterValue) === null || _this$innerFilterValu2 === void 0 ? void 0 : _this$innerFilterValu2[column2.colKey]
        }, filterComponentProps), null)]);
      };

      var getBottomButtons = function getBottomButtons(column2) {
        if (!column2.filter.showConfirmAndReset) return;
        return vue.createVNode("div", {
          "class": _this.tableFilterClasses.bottomButtons
        }, [vue.createVNode(Button, {
          "theme": "default",
          "size": "small",
          "onClick": function onClick() {
            _this.$emit("reset", column2);

            _this.filterPopupVisible = false;
          }
        }, {
          "default": function _default() {
            return [_this.global.resetText];
          }
        }), vue.createVNode(Button, {
          "theme": "primary",
          "size": "small",
          "onClick": function onClick() {
            _this.$emit("confirm", column2);

            _this.filterPopupVisible = false;
          }
        }, {
          "default": function _default() {
            return [_this.global.confirmText];
          }
        })]);
      };

      var column = this.column;
      if (!column.filter || column.filter && !Object.keys(column.filter).length) return null;

      var defaultFilterIcon = this.t(this.global.filterIcon) || vue.createVNode(filter, null, null);

      return vue.createVNode(Popup, {
        "attach": this.primaryTableElement ? function () {
          return _this.primaryTableElement;
        } : void 0,
        "visible": this.filterPopupVisible,
        "destroyOnClose": true,
        "trigger": "click",
        "placement": "bottom-right",
        "showArrow": true,
        "overlayClassName": this.tableFilterClasses.popup,
        "onVisibleChange": function onVisibleChange(val) {
          return _this.onFilterPopupVisibleChange(val);
        },
        "class": [this.tableFilterClasses.icon, _defineProperty$3({}, this.isFocusClass, !isEmpty_1((_this$tFilterValue = this.tFilterValue) === null || _this$tFilterValue === void 0 ? void 0 : _this$tFilterValue[column.colKey]))],
        "content": function content() {
          return vue.createVNode("div", {
            "class": _this.tableFilterClasses.popupContent
          }, [getFilterContent(column), getBottomButtons(column)]);
        }
      }, {
        "default": function _default() {
          return [vue.createVNode("div", {
            "ref": "triggerElementRef"
          }, [_this.renderTNode("filterIcon", defaultFilterIcon)])];
        }
      });
    }
  });

  function ownKeys$g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$f(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$g(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function filterEmptyData(data) {
    var newFilterValue = {};
    Object.keys(data).forEach(function (key) {
      var item = data[key];
      var isArrayTrue = item instanceof Array && item.length;
      var isObject = _typeof$2(item) === "object" && !(item instanceof Array);
      var isObjectTrue = isObject && Object.keys(item).length;

      if (isArrayTrue || isObjectTrue || !["null", "", "undefined"].includes(String(item))) {
        newFilterValue[key] = item;
      }
    });
    return newFilterValue;
  }

  function useFilter(props, context) {
    var primaryTableRef = vue.ref(null);

    var _useConfig = useConfig("table"),
        t = _useConfig.t,
        global = _useConfig.global;

    var renderTNode = useTNodeDefault();

    var _toRefs = vue.toRefs(props),
        filterValue = _toRefs.filterValue;

    var _useClassName = useClassName(),
        tableFilterClasses = _useClassName.tableFilterClasses,
        isFocusClass = _useClassName.isFocusClass;

    var isTableOverflowHidden = vue.ref();

    var _useDefaultValue = useDefaultValue(filterValue, props.defaultFilterValue, props.onFilterChange, "filterValue"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        tFilterValue = _useDefaultValue2[0],
        setTFilterValue = _useDefaultValue2[1];

    var innerFilterValue = vue.ref(tFilterValue.value);
    var hasEmptyCondition = vue.computed(function () {
      var filterEmpty = filterEmptyData(tFilterValue.value || {});
      return !tFilterValue.value || !Object.keys(filterEmpty).length;
    });
    vue.watch([tFilterValue], function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
          val = _ref2[0];

      innerFilterValue.value = val;
    });

    function renderFirstFilterRow() {
      var _props$pagination, _props$data;

      if (hasEmptyCondition.value) return null;

      var defaultNode = vue.createVNode("div", {
        "class": tableFilterClasses.result
      }, [vue.createVNode("span", null, [t(global.value.searchResultText, {
        result: getFilterResultContent(),
        count: ((_props$pagination = props.pagination) === null || _props$pagination === void 0 ? void 0 : _props$pagination.total) || ((_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.length)
      })]), vue.createVNode(Button, {
        "theme": "primary",
        "variant": "text",
        "onClick": onResetAll
      }, {
        "default": function _default() {
          return [global.value.clearFilterResultButtonText];
        }
      })]);

      var filterContent = renderTNode("filterRow");
      if (props.filterRow && !filterContent) return null;
      return vue.createVNode("div", {
        "class": tableFilterClasses.inner
      }, [filterContent || defaultNode]);
    }

    function getFilterResultContent() {
      var arr = [];
      props.columns.filter(function (col) {
        return col.filter;
      }).forEach(function (col) {
        var value = tFilterValue.value[col.colKey];

        if (col.filter.list && !["null", "", "undefined"].includes(String(value))) {
          var formattedValue = value instanceof Array ? value : [value];
          var label = [];
          col.filter.list.forEach(function (option) {
            if (formattedValue.includes(option.value)) {
              label.push(option.label);
            }
          });
          value = label.join();
        }

        if (value) {
          arr.push("".concat(col.title, "\uFF1A").concat(value));
        }
      });
      return arr.join("\uFF1B");
    }

    function onInnerFilterChange(val, column) {
      var filterValue2 = _objectSpread$f(_objectSpread$f({}, innerFilterValue.value), {}, _defineProperty$3({}, column.colKey, val));

      innerFilterValue.value = filterValue2;

      if (!column.filter.showConfirmAndReset) {
        emitFilterChange(filterValue2, column);
      }
    }

    function emitFilterChange(filterValue2, column) {
      var _props$onChange;

      setTFilterValue(filterValue2, {
        col: column
      });
      (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, {
        filter: filterValue2
      }, {
        trigger: "filter"
      });
    }

    function onReset(column) {
      var filterValue2 = _objectSpread$f(_objectSpread$f({}, tFilterValue.value), {}, _defineProperty$3({}, column.colKey, {
        single: "",
        multiple: [],
        input: ""
      }[column.filter.type] || column.filter.resetValue || ""));

      emitFilterChange(filterValue2, column);
    }

    function onResetAll() {
      emitFilterChange({}, void 0);
    }

    function onConfirm(column) {
      emitFilterChange(innerFilterValue.value, column);
    }

    function renderFilterIcon(_ref3) {
      var _primaryTableRef$valu;

      var col = _ref3.col;
      return vue.createVNode(TableFilterController, {
        "column": col,
        "filterIcon": props.filterIcon,
        "tFilterValue": tFilterValue.value,
        "innerFilterValue": innerFilterValue.value,
        "tableFilterClasses": tableFilterClasses,
        "isFocusClass": isFocusClass,
        "onReset": onReset,
        "onConfirm": onConfirm,
        "onInnerFilterChange": onInnerFilterChange,
        "primaryTableElement": (_primaryTableRef$valu = primaryTableRef.value) === null || _primaryTableRef$valu === void 0 ? void 0 : _primaryTableRef$valu.$el,
        "onVisibleChange": onPopupVisibleChange
      }, {
        filterIcon: context.slots.filterIcon
      });
    }

    function setFilterPrimaryTableRef(primaryTableElement) {
      primaryTableRef.value = primaryTableElement;
    }

    function onPopupVisibleChange(visible) {
      if (visible && !isTableOverflowHidden.value) {
        isTableOverflowHidden.value = !visible;
      }
    }

    return {
      hasEmptyCondition: hasEmptyCondition,
      isTableOverflowHidden: isTableOverflowHidden,
      renderFilterIcon: renderFilterIcon,
      renderFirstFilterRow: renderFirstFilterRow,
      setFilterPrimaryTableRef: setFilterPrimaryTableRef
    };
  }

  /**!
   * Sortable 1.15.0
   * @author	RubaXa   <trash@rubaxa.org>
   * @author	owenm    <owen23355@gmail.com>
   * @license MIT
   */
  function ownKeys$f(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);

      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }

      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys$f(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$f(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  var version = "1.15.0";

  function userAgent(pattern) {
    if (typeof window !== 'undefined' && window.navigator) {
      return !! /*@__PURE__*/navigator.userAgent.match(pattern);
    }
  }

  var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
  var Edge = userAgent(/Edge/i);
  var FireFox = userAgent(/firefox/i);
  var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
  var IOS = userAgent(/iP(ad|od|hone)/i);
  var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);
  var captureMode = {
    capture: false,
    passive: false
  };

  function on(el, event, fn) {
    el.addEventListener(event, fn, !IE11OrLess && captureMode);
  }

  function off(el, event, fn) {
    el.removeEventListener(event, fn, !IE11OrLess && captureMode);
  }

  function matches(
  /**HTMLElement*/
  el,
  /**String*/
  selector) {
    if (!selector) return;
    selector[0] === '>' && (selector = selector.substring(1));

    if (el) {
      try {
        if (el.matches) {
          return el.matches(selector);
        } else if (el.msMatchesSelector) {
          return el.msMatchesSelector(selector);
        } else if (el.webkitMatchesSelector) {
          return el.webkitMatchesSelector(selector);
        }
      } catch (_) {
        return false;
      }
    }

    return false;
  }

  function getParentOrHost(el) {
    return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
  }

  function closest(
  /**HTMLElement*/
  el,
  /**String*/
  selector,
  /**HTMLElement*/
  ctx, includeCTX) {
    if (el) {
      ctx = ctx || document;

      do {
        if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
          return el;
        }

        if (el === ctx) break;
        /* jshint boss:true */
      } while (el = getParentOrHost(el));
    }

    return null;
  }

  var R_SPACE = /\s+/g;

  function toggleClass(el, name, state) {
    if (el && name) {
      if (el.classList) {
        el.classList[state ? 'add' : 'remove'](name);
      } else {
        var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
        el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
      }
    }
  }

  function css(el, prop, val) {
    var style = el && el.style;

    if (style) {
      if (val === void 0) {
        if (document.defaultView && document.defaultView.getComputedStyle) {
          val = document.defaultView.getComputedStyle(el, '');
        } else if (el.currentStyle) {
          val = el.currentStyle;
        }

        return prop === void 0 ? val : val[prop];
      } else {
        if (!(prop in style) && prop.indexOf('webkit') === -1) {
          prop = '-webkit-' + prop;
        }

        style[prop] = val + (typeof val === 'string' ? '' : 'px');
      }
    }
  }

  function matrix(el, selfOnly) {
    var appliedTransforms = '';

    if (typeof el === 'string') {
      appliedTransforms = el;
    } else {
      do {
        var transform = css(el, 'transform');

        if (transform && transform !== 'none') {
          appliedTransforms = transform + ' ' + appliedTransforms;
        }
        /* jshint boss:true */

      } while (!selfOnly && (el = el.parentNode));
    }

    var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
    /*jshint -W056 */

    return matrixFn && new matrixFn(appliedTransforms);
  }

  function find(ctx, tagName, iterator) {
    if (ctx) {
      var list = ctx.getElementsByTagName(tagName),
          i = 0,
          n = list.length;

      if (iterator) {
        for (; i < n; i++) {
          iterator(list[i], i);
        }
      }

      return list;
    }

    return [];
  }

  function getWindowScrollingElement() {
    var scrollingElement = document.scrollingElement;

    if (scrollingElement) {
      return scrollingElement;
    } else {
      return document.documentElement;
    }
  }
  /**
   * Returns the "bounding client rect" of given element
   * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted
   * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container
   * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr
   * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone
   * @param  {[HTMLElement]} container              The parent the element will be placed in
   * @return {Object}                               The boundingClientRect of el, with specified adjustments
   */


  function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
    if (!el.getBoundingClientRect && el !== window) return;
    var elRect, top, left, bottom, right, height, width;

    if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {
      elRect = el.getBoundingClientRect();
      top = elRect.top;
      left = elRect.left;
      bottom = elRect.bottom;
      right = elRect.right;
      height = elRect.height;
      width = elRect.width;
    } else {
      top = 0;
      left = 0;
      bottom = window.innerHeight;
      right = window.innerWidth;
      height = window.innerHeight;
      width = window.innerWidth;
    }

    if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
      // Adjust for translate()
      container = container || el.parentNode; // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)
      // Not needed on <= IE11

      if (!IE11OrLess) {
        do {
          if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {
            var containerRect = container.getBoundingClientRect(); // Set relative to edges of padding box of container

            top -= containerRect.top + parseInt(css(container, 'border-top-width'));
            left -= containerRect.left + parseInt(css(container, 'border-left-width'));
            bottom = top + elRect.height;
            right = left + elRect.width;
            break;
          }
          /* jshint boss:true */

        } while (container = container.parentNode);
      }
    }

    if (undoScale && el !== window) {
      // Adjust for scale()
      var elMatrix = matrix(container || el),
          scaleX = elMatrix && elMatrix.a,
          scaleY = elMatrix && elMatrix.d;

      if (elMatrix) {
        top /= scaleY;
        left /= scaleX;
        width /= scaleX;
        height /= scaleY;
        bottom = top + height;
        right = left + width;
      }
    }

    return {
      top: top,
      left: left,
      bottom: bottom,
      right: right,
      width: width,
      height: height
    };
  }
  /**
   * Checks if a side of an element is scrolled past a side of its parents
   * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question
   * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')
   * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')
   * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element
   */


  function isScrolledPast(el, elSide, parentSide) {
    var parent = getParentAutoScrollElement(el, true),
        elSideVal = getRect(el)[elSide];
    /* jshint boss:true */

    while (parent) {
      var parentSideVal = getRect(parent)[parentSide],
          visible = void 0;

      if (parentSide === 'top' || parentSide === 'left') {
        visible = elSideVal >= parentSideVal;
      } else {
        visible = elSideVal <= parentSideVal;
      }

      if (!visible) return parent;
      if (parent === getWindowScrollingElement()) break;
      parent = getParentAutoScrollElement(parent, false);
    }

    return false;
  }
  /**
   * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
   * and non-draggable elements
   * @param  {HTMLElement} el       The parent element
   * @param  {Number} childNum      The index of the child
   * @param  {Object} options       Parent Sortable's options
   * @return {HTMLElement}          The child at index childNum, or null if not found
   */


  function getChild(el, childNum, options, includeDragEl) {
    var currentChild = 0,
        i = 0,
        children = el.children;

    while (i < children.length) {
      if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && (includeDragEl || children[i] !== Sortable.dragged) && closest(children[i], options.draggable, el, false)) {
        if (currentChild === childNum) {
          return children[i];
        }

        currentChild++;
      }

      i++;
    }

    return null;
  }
  /**
   * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)
   * @param  {HTMLElement} el       Parent element
   * @param  {selector} selector    Any other elements that should be ignored
   * @return {HTMLElement}          The last child, ignoring ghostEl
   */


  function lastChild(el, selector) {
    var last = el.lastElementChild;

    while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {
      last = last.previousElementSibling;
    }

    return last || null;
  }
  /**
   * Returns the index of an element within its parent for a selected set of
   * elements
   * @param  {HTMLElement} el
   * @param  {selector} selector
   * @return {number}
   */


  function index(el, selector) {
    var index = 0;

    if (!el || !el.parentNode) {
      return -1;
    }
    /* jshint boss:true */


    while (el = el.previousElementSibling) {
      if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {
        index++;
      }
    }

    return index;
  }
  /**
   * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.
   * The value is returned in real pixels.
   * @param  {HTMLElement} el
   * @return {Array}             Offsets in the format of [left, top]
   */


  function getRelativeScrollOffset(el) {
    var offsetLeft = 0,
        offsetTop = 0,
        winScroller = getWindowScrollingElement();

    if (el) {
      do {
        var elMatrix = matrix(el),
            scaleX = elMatrix.a,
            scaleY = elMatrix.d;
        offsetLeft += el.scrollLeft * scaleX;
        offsetTop += el.scrollTop * scaleY;
      } while (el !== winScroller && (el = el.parentNode));
    }

    return [offsetLeft, offsetTop];
  }
  /**
   * Returns the index of the object within the given array
   * @param  {Array} arr   Array that may or may not hold the object
   * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find
   * @return {Number}      The index of the object in the array, or -1
   */


  function indexOfObject(arr, obj) {
    for (var i in arr) {
      if (!arr.hasOwnProperty(i)) continue;

      for (var key in obj) {
        if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);
      }
    }

    return -1;
  }

  function getParentAutoScrollElement(el, includeSelf) {
    // skip to window
    if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();
    var elem = el;
    var gotSelf = false;

    do {
      // we don't need to get elem css if it isn't even overflowing in the first place (performance)
      if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
        var elemCSS = css(elem);

        if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {
          if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();
          if (gotSelf || includeSelf) return elem;
          gotSelf = true;
        }
      }
      /* jshint boss:true */

    } while (elem = elem.parentNode);

    return getWindowScrollingElement();
  }

  function extend(dst, src) {
    if (dst && src) {
      for (var key in src) {
        if (src.hasOwnProperty(key)) {
          dst[key] = src[key];
        }
      }
    }

    return dst;
  }

  function isRectEqual(rect1, rect2) {
    return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
  }

  var _throttleTimeout;

  function throttle(callback, ms) {
    return function () {
      if (!_throttleTimeout) {
        var args = arguments,
            _this = this;

        if (args.length === 1) {
          callback.call(_this, args[0]);
        } else {
          callback.apply(_this, args);
        }

        _throttleTimeout = setTimeout(function () {
          _throttleTimeout = void 0;
        }, ms);
      }
    };
  }

  function cancelThrottle() {
    clearTimeout(_throttleTimeout);
    _throttleTimeout = void 0;
  }

  function scrollBy(el, x, y) {
    el.scrollLeft += x;
    el.scrollTop += y;
  }

  function clone(el) {
    var Polymer = window.Polymer;
    var $ = window.jQuery || window.Zepto;

    if (Polymer && Polymer.dom) {
      return Polymer.dom(el).cloneNode(true);
    } else if ($) {
      return $(el).clone(true)[0];
    } else {
      return el.cloneNode(true);
    }
  }

  var expando = 'Sortable' + new Date().getTime();

  function AnimationStateManager() {
    var animationStates = [],
        animationCallbackId;
    return {
      captureAnimationState: function captureAnimationState() {
        animationStates = [];
        if (!this.options.animation) return;
        var children = [].slice.call(this.el.children);
        children.forEach(function (child) {
          if (css(child, 'display') === 'none' || child === Sortable.ghost) return;
          animationStates.push({
            target: child,
            rect: getRect(child)
          });

          var fromRect = _objectSpread2({}, animationStates[animationStates.length - 1].rect); // If animating: compensate for current animation


          if (child.thisAnimationDuration) {
            var childMatrix = matrix(child, true);

            if (childMatrix) {
              fromRect.top -= childMatrix.f;
              fromRect.left -= childMatrix.e;
            }
          }

          child.fromRect = fromRect;
        });
      },
      addAnimationState: function addAnimationState(state) {
        animationStates.push(state);
      },
      removeAnimationState: function removeAnimationState(target) {
        animationStates.splice(indexOfObject(animationStates, {
          target: target
        }), 1);
      },
      animateAll: function animateAll(callback) {
        var _this = this;

        if (!this.options.animation) {
          clearTimeout(animationCallbackId);
          if (typeof callback === 'function') callback();
          return;
        }

        var animating = false,
            animationTime = 0;
        animationStates.forEach(function (state) {
          var time = 0,
              target = state.target,
              fromRect = target.fromRect,
              toRect = getRect(target),
              prevFromRect = target.prevFromRect,
              prevToRect = target.prevToRect,
              animatingRect = state.rect,
              targetMatrix = matrix(target, true);

          if (targetMatrix) {
            // Compensate for current animation
            toRect.top -= targetMatrix.f;
            toRect.left -= targetMatrix.e;
          }

          target.toRect = toRect;

          if (target.thisAnimationDuration) {
            // Could also check if animatingRect is between fromRect and toRect
            if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) && // Make sure animatingRect is on line between toRect & fromRect
            (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
              // If returning to same place as started from animation and on same axis
              time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
            }
          } // if fromRect != toRect: animate


          if (!isRectEqual(toRect, fromRect)) {
            target.prevFromRect = fromRect;
            target.prevToRect = toRect;

            if (!time) {
              time = _this.options.animation;
            }

            _this.animate(target, animatingRect, toRect, time);
          }

          if (time) {
            animating = true;
            animationTime = Math.max(animationTime, time);
            clearTimeout(target.animationResetTimer);
            target.animationResetTimer = setTimeout(function () {
              target.animationTime = 0;
              target.prevFromRect = null;
              target.fromRect = null;
              target.prevToRect = null;
              target.thisAnimationDuration = null;
            }, time);
            target.thisAnimationDuration = time;
          }
        });
        clearTimeout(animationCallbackId);

        if (!animating) {
          if (typeof callback === 'function') callback();
        } else {
          animationCallbackId = setTimeout(function () {
            if (typeof callback === 'function') callback();
          }, animationTime);
        }

        animationStates = [];
      },
      animate: function animate(target, currentRect, toRect, duration) {
        if (duration) {
          css(target, 'transition', '');
          css(target, 'transform', '');
          var elMatrix = matrix(this.el),
              scaleX = elMatrix && elMatrix.a,
              scaleY = elMatrix && elMatrix.d,
              translateX = (currentRect.left - toRect.left) / (scaleX || 1),
              translateY = (currentRect.top - toRect.top) / (scaleY || 1);
          target.animatingX = !!translateX;
          target.animatingY = !!translateY;
          css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');
          this.forRepaintDummy = repaint(target); // repaint

          css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));
          css(target, 'transform', 'translate3d(0,0,0)');
          typeof target.animated === 'number' && clearTimeout(target.animated);
          target.animated = setTimeout(function () {
            css(target, 'transition', '');
            css(target, 'transform', '');
            target.animated = false;
            target.animatingX = false;
            target.animatingY = false;
          }, duration);
        }
      }
    };
  }

  function repaint(target) {
    return target.offsetWidth;
  }

  function calculateRealTime(animatingRect, fromRect, toRect, options) {
    return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
  }

  var plugins = [];
  var defaults = {
    initializeByDefault: true
  };
  var PluginManager = {
    mount: function mount(plugin) {
      // Set default static properties
      for (var option in defaults) {
        if (defaults.hasOwnProperty(option) && !(option in plugin)) {
          plugin[option] = defaults[option];
        }
      }

      plugins.forEach(function (p) {
        if (p.pluginName === plugin.pluginName) {
          throw "Sortable: Cannot mount plugin ".concat(plugin.pluginName, " more than once");
        }
      });
      plugins.push(plugin);
    },
    pluginEvent: function pluginEvent(eventName, sortable, evt) {
      var _this = this;

      this.eventCanceled = false;

      evt.cancel = function () {
        _this.eventCanceled = true;
      };

      var eventNameGlobal = eventName + 'Global';
      plugins.forEach(function (plugin) {
        if (!sortable[plugin.pluginName]) return; // Fire global events if it exists in this sortable

        if (sortable[plugin.pluginName][eventNameGlobal]) {
          sortable[plugin.pluginName][eventNameGlobal](_objectSpread2({
            sortable: sortable
          }, evt));
        } // Only fire plugin event if plugin is enabled in this sortable,
        // and plugin has event defined


        if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
          sortable[plugin.pluginName][eventName](_objectSpread2({
            sortable: sortable
          }, evt));
        }
      });
    },
    initializePlugins: function initializePlugins(sortable, el, defaults, options) {
      plugins.forEach(function (plugin) {
        var pluginName = plugin.pluginName;
        if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;
        var initialized = new plugin(sortable, el, sortable.options);
        initialized.sortable = sortable;
        initialized.options = sortable.options;
        sortable[pluginName] = initialized; // Add default options from plugin

        _extends(defaults, initialized.defaults);
      });

      for (var option in sortable.options) {
        if (!sortable.options.hasOwnProperty(option)) continue;
        var modified = this.modifyOption(sortable, option, sortable.options[option]);

        if (typeof modified !== 'undefined') {
          sortable.options[option] = modified;
        }
      }
    },
    getEventProperties: function getEventProperties(name, sortable) {
      var eventProperties = {};
      plugins.forEach(function (plugin) {
        if (typeof plugin.eventProperties !== 'function') return;

        _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));
      });
      return eventProperties;
    },
    modifyOption: function modifyOption(sortable, name, value) {
      var modifiedValue;
      plugins.forEach(function (plugin) {
        // Plugin must exist on the Sortable
        if (!sortable[plugin.pluginName]) return; // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin

        if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {
          modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);
        }
      });
      return modifiedValue;
    }
  };

  function dispatchEvent(_ref) {
    var sortable = _ref.sortable,
        rootEl = _ref.rootEl,
        name = _ref.name,
        targetEl = _ref.targetEl,
        cloneEl = _ref.cloneEl,
        toEl = _ref.toEl,
        fromEl = _ref.fromEl,
        oldIndex = _ref.oldIndex,
        newIndex = _ref.newIndex,
        oldDraggableIndex = _ref.oldDraggableIndex,
        newDraggableIndex = _ref.newDraggableIndex,
        originalEvent = _ref.originalEvent,
        putSortable = _ref.putSortable,
        extraEventProperties = _ref.extraEventProperties;
    sortable = sortable || rootEl && rootEl[expando];
    if (!sortable) return;
    var evt,
        options = sortable.options,
        onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1); // Support for new CustomEvent feature

    if (window.CustomEvent && !IE11OrLess && !Edge) {
      evt = new CustomEvent(name, {
        bubbles: true,
        cancelable: true
      });
    } else {
      evt = document.createEvent('Event');
      evt.initEvent(name, true, true);
    }

    evt.to = toEl || rootEl;
    evt.from = fromEl || rootEl;
    evt.item = targetEl || rootEl;
    evt.clone = cloneEl;
    evt.oldIndex = oldIndex;
    evt.newIndex = newIndex;
    evt.oldDraggableIndex = oldDraggableIndex;
    evt.newDraggableIndex = newDraggableIndex;
    evt.originalEvent = originalEvent;
    evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;

    var allEventProperties = _objectSpread2(_objectSpread2({}, extraEventProperties), PluginManager.getEventProperties(name, sortable));

    for (var option in allEventProperties) {
      evt[option] = allEventProperties[option];
    }

    if (rootEl) {
      rootEl.dispatchEvent(evt);
    }

    if (options[onName]) {
      options[onName].call(sortable, evt);
    }
  }

  var _excluded$1 = ["evt"];

  var pluginEvent = function pluginEvent(eventName, sortable) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        originalEvent = _ref.evt,
        data = _objectWithoutProperties(_ref, _excluded$1);

    PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread2({
      dragEl: dragEl,
      parentEl: parentEl,
      ghostEl: ghostEl,
      rootEl: rootEl,
      nextEl: nextEl,
      lastDownEl: lastDownEl,
      cloneEl: cloneEl,
      cloneHidden: cloneHidden,
      dragStarted: moved,
      putSortable: putSortable,
      activeSortable: Sortable.active,
      originalEvent: originalEvent,
      oldIndex: oldIndex,
      oldDraggableIndex: oldDraggableIndex,
      newIndex: newIndex,
      newDraggableIndex: newDraggableIndex,
      hideGhostForTarget: _hideGhostForTarget,
      unhideGhostForTarget: _unhideGhostForTarget,
      cloneNowHidden: function cloneNowHidden() {
        cloneHidden = true;
      },
      cloneNowShown: function cloneNowShown() {
        cloneHidden = false;
      },
      dispatchSortableEvent: function dispatchSortableEvent(name) {
        _dispatchEvent({
          sortable: sortable,
          name: name,
          originalEvent: originalEvent
        });
      }
    }, data));
  };

  function _dispatchEvent(info) {
    dispatchEvent(_objectSpread2({
      putSortable: putSortable,
      cloneEl: cloneEl,
      targetEl: dragEl,
      rootEl: rootEl,
      oldIndex: oldIndex,
      oldDraggableIndex: oldDraggableIndex,
      newIndex: newIndex,
      newDraggableIndex: newDraggableIndex
    }, info));
  }

  var dragEl,
      parentEl,
      ghostEl,
      rootEl,
      nextEl,
      lastDownEl,
      cloneEl,
      cloneHidden,
      oldIndex,
      newIndex,
      oldDraggableIndex,
      newDraggableIndex,
      activeGroup,
      putSortable,
      awaitingDragStarted = false,
      ignoreNextClick = false,
      sortables = [],
      tapEvt,
      touchEvt,
      lastDx,
      lastDy,
      tapDistanceLeft,
      tapDistanceTop,
      moved,
      lastTarget,
      lastDirection,
      pastFirstInvertThresh = false,
      isCircumstantialInvert = false,
      targetMoveDistance,
      // For positioning ghost absolutely
  ghostRelativeParent,
      ghostRelativeParentInitialScroll = [],
      // (left, top)
  _silent = false,
      savedInputChecked = [];
  /** @const */

  var documentExists = typeof document !== 'undefined',
      PositionGhostAbsolutely = IOS,
      CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',
      // This will not pass for IE9, because IE9 DnD only works on anchors
  supportDraggable = documentExists && !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),
      supportCssPointerEvents = function () {
    if (!documentExists) return; // false when <= IE11

    if (IE11OrLess) {
      return false;
    }

    var el = document.createElement('x');
    el.style.cssText = 'pointer-events:auto';
    return el.style.pointerEvents === 'auto';
  }(),
      _detectDirection = function _detectDirection(el, options) {
    var elCSS = css(el),
        elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),
        child1 = getChild(el, 0, options),
        child2 = getChild(el, 1, options),
        firstChildCSS = child1 && css(child1),
        secondChildCSS = child2 && css(child2),
        firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,
        secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;

    if (elCSS.display === 'flex') {
      return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';
    }

    if (elCSS.display === 'grid') {
      return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';
    }

    if (child1 && firstChildCSS["float"] && firstChildCSS["float"] !== 'none') {
      var touchingSideChild2 = firstChildCSS["float"] === 'left' ? 'left' : 'right';
      return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';
    }

    return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';
  },
      _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {
    var dragElS1Opp = vertical ? dragRect.left : dragRect.top,
        dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,
        dragElOppLength = vertical ? dragRect.width : dragRect.height,
        targetS1Opp = vertical ? targetRect.left : targetRect.top,
        targetS2Opp = vertical ? targetRect.right : targetRect.bottom,
        targetOppLength = vertical ? targetRect.width : targetRect.height;
    return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
  },

  /**
   * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.
   * @param  {Number} x      X position
   * @param  {Number} y      Y position
   * @return {HTMLElement}   Element of the first found nearest Sortable
   */
  _detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {
    var ret;
    sortables.some(function (sortable) {
      var threshold = sortable[expando].options.emptyInsertThreshold;
      if (!threshold || lastChild(sortable)) return;
      var rect = getRect(sortable),
          insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,
          insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;

      if (insideHorizontally && insideVertically) {
        return ret = sortable;
      }
    });
    return ret;
  },
      _prepareGroup = function _prepareGroup(options) {
    function toFn(value, pull) {
      return function (to, from, dragEl, evt) {
        var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;

        if (value == null && (pull || sameGroup)) {
          // Default pull value
          // Default pull and put value if same group
          return true;
        } else if (value == null || value === false) {
          return false;
        } else if (pull && value === 'clone') {
          return value;
        } else if (typeof value === 'function') {
          return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);
        } else {
          var otherGroup = (pull ? to : from).options.group.name;
          return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;
        }
      };
    }

    var group = {};
    var originalGroup = options.group;

    if (!originalGroup || _typeof(originalGroup) != 'object') {
      originalGroup = {
        name: originalGroup
      };
    }

    group.name = originalGroup.name;
    group.checkPull = toFn(originalGroup.pull, true);
    group.checkPut = toFn(originalGroup.put);
    group.revertClone = originalGroup.revertClone;
    options.group = group;
  },
      _hideGhostForTarget = function _hideGhostForTarget() {
    if (!supportCssPointerEvents && ghostEl) {
      css(ghostEl, 'display', 'none');
    }
  },
      _unhideGhostForTarget = function _unhideGhostForTarget() {
    if (!supportCssPointerEvents && ghostEl) {
      css(ghostEl, 'display', '');
    }
  }; // #1184 fix - Prevent click event on fallback if dragged but item not changed position


  if (documentExists && !ChromeForAndroid) {
    document.addEventListener('click', function (evt) {
      if (ignoreNextClick) {
        evt.preventDefault();
        evt.stopPropagation && evt.stopPropagation();
        evt.stopImmediatePropagation && evt.stopImmediatePropagation();
        ignoreNextClick = false;
        return false;
      }
    }, true);
  }

  var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {
    if (dragEl) {
      evt = evt.touches ? evt.touches[0] : evt;

      var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);

      if (nearest) {
        // Create imitation event
        var event = {};

        for (var i in evt) {
          if (evt.hasOwnProperty(i)) {
            event[i] = evt[i];
          }
        }

        event.target = event.rootEl = nearest;
        event.preventDefault = void 0;
        event.stopPropagation = void 0;

        nearest[expando]._onDragOver(event);
      }
    }
  };

  var _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {
    if (dragEl) {
      dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
    }
  };
  /**
   * @class  Sortable
   * @param  {HTMLElement}  el
   * @param  {Object}       [options]
   */


  function Sortable(el, options) {
    if (!(el && el.nodeType && el.nodeType === 1)) {
      throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
    }

    this.el = el; // root element

    this.options = options = _extends({}, options); // Export instance

    el[expando] = this;
    var defaults = {
      group: null,
      sort: true,
      disabled: false,
      store: null,
      handle: null,
      draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',
      swapThreshold: 1,
      // percentage; 0 <= x <= 1
      invertSwap: false,
      // invert always
      invertedSwapThreshold: null,
      // will be set to same as swapThreshold if default
      removeCloneOnHide: true,
      direction: function direction() {
        return _detectDirection(el, this.options);
      },
      ghostClass: 'sortable-ghost',
      chosenClass: 'sortable-chosen',
      dragClass: 'sortable-drag',
      ignore: 'a, img',
      filter: null,
      preventOnFilter: true,
      animation: 0,
      easing: null,
      setData: function setData(dataTransfer, dragEl) {
        dataTransfer.setData('Text', dragEl.textContent);
      },
      dropBubble: false,
      dragoverBubble: false,
      dataIdAttr: 'data-id',
      delay: 0,
      delayOnTouchOnly: false,
      touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
      forceFallback: false,
      fallbackClass: 'sortable-fallback',
      fallbackOnBody: false,
      fallbackTolerance: 0,
      fallbackOffset: {
        x: 0,
        y: 0
      },
      supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window && !Safari,
      emptyInsertThreshold: 5
    };
    PluginManager.initializePlugins(this, el, defaults); // Set default options

    for (var name in defaults) {
      !(name in options) && (options[name] = defaults[name]);
    }

    _prepareGroup(options); // Bind all private methods


    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    } // Setup drag mode


    this.nativeDraggable = options.forceFallback ? false : supportDraggable;

    if (this.nativeDraggable) {
      // Touch start threshold cannot be greater than the native dragstart threshold
      this.options.touchStartThreshold = 1;
    } // Bind events


    if (options.supportPointer) {
      on(el, 'pointerdown', this._onTapStart);
    } else {
      on(el, 'mousedown', this._onTapStart);
      on(el, 'touchstart', this._onTapStart);
    }

    if (this.nativeDraggable) {
      on(el, 'dragover', this);
      on(el, 'dragenter', this);
    }

    sortables.push(this.el); // Restore sorting

    options.store && options.store.get && this.sort(options.store.get(this) || []); // Add animation state manager

    _extends(this, AnimationStateManager());
  }

  Sortable.prototype =
  /** @lends Sortable.prototype */
  {
    constructor: Sortable,
    _isOutsideThisEl: function _isOutsideThisEl(target) {
      if (!this.el.contains(target) && target !== this.el) {
        lastTarget = null;
      }
    },
    _getDirection: function _getDirection(evt, target) {
      return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
    },
    _onTapStart: function _onTapStart(
    /** Event|TouchEvent */
    evt) {
      if (!evt.cancelable) return;

      var _this = this,
          el = this.el,
          options = this.options,
          preventOnFilter = options.preventOnFilter,
          type = evt.type,
          touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === 'touch' && evt,
          target = (touch || evt).target,
          originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,
          filter = options.filter;

      _saveInputCheckedState(el); // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.


      if (dragEl) {
        return;
      }

      if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
        return; // only left button and enabled
      } // cancel dnd if original target is content editable


      if (originalTarget.isContentEditable) {
        return;
      } // Safari ignores further event handling after mousedown


      if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === 'SELECT') {
        return;
      }

      target = closest(target, options.draggable, el, false);

      if (target && target.animated) {
        return;
      }

      if (lastDownEl === target) {
        // Ignoring duplicate `down`
        return;
      } // Get the index of the dragged element within its parent


      oldIndex = index(target);
      oldDraggableIndex = index(target, options.draggable); // Check filter

      if (typeof filter === 'function') {
        if (filter.call(this, evt, target, this)) {
          _dispatchEvent({
            sortable: _this,
            rootEl: originalTarget,
            name: 'filter',
            targetEl: target,
            toEl: el,
            fromEl: el
          });

          pluginEvent('filter', _this, {
            evt: evt
          });
          preventOnFilter && evt.cancelable && evt.preventDefault();
          return; // cancel dnd
        }
      } else if (filter) {
        filter = filter.split(',').some(function (criteria) {
          criteria = closest(originalTarget, criteria.trim(), el, false);

          if (criteria) {
            _dispatchEvent({
              sortable: _this,
              rootEl: criteria,
              name: 'filter',
              targetEl: target,
              fromEl: el,
              toEl: el
            });

            pluginEvent('filter', _this, {
              evt: evt
            });
            return true;
          }
        });

        if (filter) {
          preventOnFilter && evt.cancelable && evt.preventDefault();
          return; // cancel dnd
        }
      }

      if (options.handle && !closest(originalTarget, options.handle, el, false)) {
        return;
      } // Prepare `dragstart`


      this._prepareDragStart(evt, touch, target);
    },
    _prepareDragStart: function _prepareDragStart(
    /** Event */
    evt,
    /** Touch */
    touch,
    /** HTMLElement */
    target) {
      var _this = this,
          el = _this.el,
          options = _this.options,
          ownerDocument = el.ownerDocument,
          dragStartFn;

      if (target && !dragEl && target.parentNode === el) {
        var dragRect = getRect(target);
        rootEl = el;
        dragEl = target;
        parentEl = dragEl.parentNode;
        nextEl = dragEl.nextSibling;
        lastDownEl = target;
        activeGroup = options.group;
        Sortable.dragged = dragEl;
        tapEvt = {
          target: dragEl,
          clientX: (touch || evt).clientX,
          clientY: (touch || evt).clientY
        };
        tapDistanceLeft = tapEvt.clientX - dragRect.left;
        tapDistanceTop = tapEvt.clientY - dragRect.top;
        this._lastX = (touch || evt).clientX;
        this._lastY = (touch || evt).clientY;
        dragEl.style['will-change'] = 'all';

        dragStartFn = function dragStartFn() {
          pluginEvent('delayEnded', _this, {
            evt: evt
          });

          if (Sortable.eventCanceled) {
            _this._onDrop();

            return;
          } // Delayed drag has been triggered
          // we can re-enable the events: touchmove/mousemove


          _this._disableDelayedDragEvents();

          if (!FireFox && _this.nativeDraggable) {
            dragEl.draggable = true;
          } // Bind the events: dragstart/dragend


          _this._triggerDragStart(evt, touch); // Drag start event


          _dispatchEvent({
            sortable: _this,
            name: 'choose',
            originalEvent: evt
          }); // Chosen item


          toggleClass(dragEl, options.chosenClass, true);
        }; // Disable "draggable"


        options.ignore.split(',').forEach(function (criteria) {
          find(dragEl, criteria.trim(), _disableDraggable);
        });
        on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);
        on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);
        on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);
        on(ownerDocument, 'mouseup', _this._onDrop);
        on(ownerDocument, 'touchend', _this._onDrop);
        on(ownerDocument, 'touchcancel', _this._onDrop); // Make dragEl draggable (must be before delay for FireFox)

        if (FireFox && this.nativeDraggable) {
          this.options.touchStartThreshold = 4;
          dragEl.draggable = true;
        }

        pluginEvent('delayStart', this, {
          evt: evt
        }); // Delay is impossible for native DnD in Edge or IE

        if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
          if (Sortable.eventCanceled) {
            this._onDrop();

            return;
          } // If the user moves the pointer or let go the click or touch
          // before the delay has been reached:
          // disable the delayed drag


          on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
          on(ownerDocument, 'touchend', _this._disableDelayedDrag);
          on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
          on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);
          on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);
          options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);
          _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
        } else {
          dragStartFn();
        }
      }
    },
    _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(
    /** TouchEvent|PointerEvent **/
    e) {
      var touch = e.touches ? e.touches[0] : e;

      if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
        this._disableDelayedDrag();
      }
    },
    _disableDelayedDrag: function _disableDelayedDrag() {
      dragEl && _disableDraggable(dragEl);
      clearTimeout(this._dragStartTimer);

      this._disableDelayedDragEvents();
    },
    _disableDelayedDragEvents: function _disableDelayedDragEvents() {
      var ownerDocument = this.el.ownerDocument;
      off(ownerDocument, 'mouseup', this._disableDelayedDrag);
      off(ownerDocument, 'touchend', this._disableDelayedDrag);
      off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
      off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);
      off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);
      off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);
    },
    _triggerDragStart: function _triggerDragStart(
    /** Event */
    evt,
    /** Touch */
    touch) {
      touch = touch || evt.pointerType == 'touch' && evt;

      if (!this.nativeDraggable || touch) {
        if (this.options.supportPointer) {
          on(document, 'pointermove', this._onTouchMove);
        } else if (touch) {
          on(document, 'touchmove', this._onTouchMove);
        } else {
          on(document, 'mousemove', this._onTouchMove);
        }
      } else {
        on(dragEl, 'dragend', this);
        on(rootEl, 'dragstart', this._onDragStart);
      }

      try {
        if (document.selection) {
          // Timeout neccessary for IE9
          _nextTick(function () {
            document.selection.empty();
          });
        } else {
          window.getSelection().removeAllRanges();
        }
      } catch (err) {}
    },
    _dragStarted: function _dragStarted(fallback, evt) {
      awaitingDragStarted = false;

      if (rootEl && dragEl) {
        pluginEvent('dragStarted', this, {
          evt: evt
        });

        if (this.nativeDraggable) {
          on(document, 'dragover', _checkOutsideTargetEl);
        }

        var options = this.options; // Apply effect

        !fallback && toggleClass(dragEl, options.dragClass, false);
        toggleClass(dragEl, options.ghostClass, true);
        Sortable.active = this;
        fallback && this._appendGhost(); // Drag start event

        _dispatchEvent({
          sortable: this,
          name: 'start',
          originalEvent: evt
        });
      } else {
        this._nulling();
      }
    },
    _emulateDragOver: function _emulateDragOver() {
      if (touchEvt) {
        this._lastX = touchEvt.clientX;
        this._lastY = touchEvt.clientY;

        _hideGhostForTarget();

        var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        var parent = target;

        while (target && target.shadowRoot) {
          target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
          if (target === parent) break;
          parent = target;
        }

        dragEl.parentNode[expando]._isOutsideThisEl(target);

        if (parent) {
          do {
            if (parent[expando]) {
              var inserted = void 0;
              inserted = parent[expando]._onDragOver({
                clientX: touchEvt.clientX,
                clientY: touchEvt.clientY,
                target: target,
                rootEl: parent
              });

              if (inserted && !this.options.dragoverBubble) {
                break;
              }
            }

            target = parent; // store last element
          }
          /* jshint boss:true */
          while (parent = parent.parentNode);
        }

        _unhideGhostForTarget();
      }
    },
    _onTouchMove: function _onTouchMove(
    /**TouchEvent*/
    evt) {
      if (tapEvt) {
        var options = this.options,
            fallbackTolerance = options.fallbackTolerance,
            fallbackOffset = options.fallbackOffset,
            touch = evt.touches ? evt.touches[0] : evt,
            ghostMatrix = ghostEl && matrix(ghostEl, true),
            scaleX = ghostEl && ghostMatrix && ghostMatrix.a,
            scaleY = ghostEl && ghostMatrix && ghostMatrix.d,
            relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),
            dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),
            dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1); // only set the status to dragging, when we are actually dragging

        if (!Sortable.active && !awaitingDragStarted) {
          if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
            return;
          }

          this._onDragStart(evt, true);
        }

        if (ghostEl) {
          if (ghostMatrix) {
            ghostMatrix.e += dx - (lastDx || 0);
            ghostMatrix.f += dy - (lastDy || 0);
          } else {
            ghostMatrix = {
              a: 1,
              b: 0,
              c: 0,
              d: 1,
              e: dx,
              f: dy
            };
          }

          var cssMatrix = "matrix(".concat(ghostMatrix.a, ",").concat(ghostMatrix.b, ",").concat(ghostMatrix.c, ",").concat(ghostMatrix.d, ",").concat(ghostMatrix.e, ",").concat(ghostMatrix.f, ")");
          css(ghostEl, 'webkitTransform', cssMatrix);
          css(ghostEl, 'mozTransform', cssMatrix);
          css(ghostEl, 'msTransform', cssMatrix);
          css(ghostEl, 'transform', cssMatrix);
          lastDx = dx;
          lastDy = dy;
          touchEvt = touch;
        }

        evt.cancelable && evt.preventDefault();
      }
    },
    _appendGhost: function _appendGhost() {
      // Bug if using scale(): https://stackoverflow.com/questions/2637058
      // Not being adjusted for
      if (!ghostEl) {
        var container = this.options.fallbackOnBody ? document.body : rootEl,
            rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),
            options = this.options; // Position absolutely

        if (PositionGhostAbsolutely) {
          // Get relatively positioned parent
          ghostRelativeParent = container;

          while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {
            ghostRelativeParent = ghostRelativeParent.parentNode;
          }

          if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
            if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();
            rect.top += ghostRelativeParent.scrollTop;
            rect.left += ghostRelativeParent.scrollLeft;
          } else {
            ghostRelativeParent = getWindowScrollingElement();
          }

          ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
        }

        ghostEl = dragEl.cloneNode(true);
        toggleClass(ghostEl, options.ghostClass, false);
        toggleClass(ghostEl, options.fallbackClass, true);
        toggleClass(ghostEl, options.dragClass, true);
        css(ghostEl, 'transition', '');
        css(ghostEl, 'transform', '');
        css(ghostEl, 'box-sizing', 'border-box');
        css(ghostEl, 'margin', 0);
        css(ghostEl, 'top', rect.top);
        css(ghostEl, 'left', rect.left);
        css(ghostEl, 'width', rect.width);
        css(ghostEl, 'height', rect.height);
        css(ghostEl, 'opacity', '0.8');
        css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');
        css(ghostEl, 'zIndex', '100000');
        css(ghostEl, 'pointerEvents', 'none');
        Sortable.ghost = ghostEl;
        container.appendChild(ghostEl); // Set transform-origin

        css(ghostEl, 'transform-origin', tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + '% ' + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + '%');
      }
    },
    _onDragStart: function _onDragStart(
    /**Event*/
    evt,
    /**boolean*/
    fallback) {
      var _this = this;

      var dataTransfer = evt.dataTransfer;
      var options = _this.options;
      pluginEvent('dragStart', this, {
        evt: evt
      });

      if (Sortable.eventCanceled) {
        this._onDrop();

        return;
      }

      pluginEvent('setupClone', this);

      if (!Sortable.eventCanceled) {
        cloneEl = clone(dragEl);
        cloneEl.removeAttribute("id");
        cloneEl.draggable = false;
        cloneEl.style['will-change'] = '';

        this._hideClone();

        toggleClass(cloneEl, this.options.chosenClass, false);
        Sortable.clone = cloneEl;
      } // #1143: IFrame support workaround


      _this.cloneId = _nextTick(function () {
        pluginEvent('clone', _this);
        if (Sortable.eventCanceled) return;

        if (!_this.options.removeCloneOnHide) {
          rootEl.insertBefore(cloneEl, dragEl);
        }

        _this._hideClone();

        _dispatchEvent({
          sortable: _this,
          name: 'clone'
        });
      });
      !fallback && toggleClass(dragEl, options.dragClass, true); // Set proper drop events

      if (fallback) {
        ignoreNextClick = true;
        _this._loopId = setInterval(_this._emulateDragOver, 50);
      } else {
        // Undo what was set in _prepareDragStart before drag started
        off(document, 'mouseup', _this._onDrop);
        off(document, 'touchend', _this._onDrop);
        off(document, 'touchcancel', _this._onDrop);

        if (dataTransfer) {
          dataTransfer.effectAllowed = 'move';
          options.setData && options.setData.call(_this, dataTransfer, dragEl);
        }

        on(document, 'drop', _this); // #1276 fix:

        css(dragEl, 'transform', 'translateZ(0)');
      }

      awaitingDragStarted = true;
      _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
      on(document, 'selectstart', _this);
      moved = true;

      if (Safari) {
        css(document.body, 'user-select', 'none');
      }
    },
    // Returns true - if no further action is needed (either inserted or another condition)
    _onDragOver: function _onDragOver(
    /**Event*/
    evt) {
      var el = this.el,
          target = evt.target,
          dragRect,
          targetRect,
          revert,
          options = this.options,
          group = options.group,
          activeSortable = Sortable.active,
          isOwner = activeGroup === group,
          canSort = options.sort,
          fromSortable = putSortable || activeSortable,
          vertical,
          _this = this,
          completedFired = false;

      if (_silent) return;

      function dragOverEvent(name, extra) {
        pluginEvent(name, _this, _objectSpread2({
          evt: evt,
          isOwner: isOwner,
          axis: vertical ? 'vertical' : 'horizontal',
          revert: revert,
          dragRect: dragRect,
          targetRect: targetRect,
          canSort: canSort,
          fromSortable: fromSortable,
          target: target,
          completed: completed,
          onMove: function onMove(target, after) {
            return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);
          },
          changed: changed
        }, extra));
      } // Capture animation state


      function capture() {
        dragOverEvent('dragOverAnimationCapture');

        _this.captureAnimationState();

        if (_this !== fromSortable) {
          fromSortable.captureAnimationState();
        }
      } // Return invocation when dragEl is inserted (or completed)


      function completed(insertion) {
        dragOverEvent('dragOverCompleted', {
          insertion: insertion
        });

        if (insertion) {
          // Clones must be hidden before folding animation to capture dragRectAbsolute properly
          if (isOwner) {
            activeSortable._hideClone();
          } else {
            activeSortable._showClone(_this);
          }

          if (_this !== fromSortable) {
            // Set ghost class to new sortable's ghost class
            toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
            toggleClass(dragEl, options.ghostClass, true);
          }

          if (putSortable !== _this && _this !== Sortable.active) {
            putSortable = _this;
          } else if (_this === Sortable.active && putSortable) {
            putSortable = null;
          } // Animation


          if (fromSortable === _this) {
            _this._ignoreWhileAnimating = target;
          }

          _this.animateAll(function () {
            dragOverEvent('dragOverAnimationComplete');
            _this._ignoreWhileAnimating = null;
          });

          if (_this !== fromSortable) {
            fromSortable.animateAll();
            fromSortable._ignoreWhileAnimating = null;
          }
        } // Null lastTarget if it is not inside a previously swapped element


        if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
          lastTarget = null;
        } // no bubbling and not fallback


        if (!options.dragoverBubble && !evt.rootEl && target !== document) {
          dragEl.parentNode[expando]._isOutsideThisEl(evt.target); // Do not detect for empty insert if already inserted


          !insertion && nearestEmptyInsertDetectEvent(evt);
        }

        !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
        return completedFired = true;
      } // Call when dragEl has been inserted


      function changed() {
        newIndex = index(dragEl);
        newDraggableIndex = index(dragEl, options.draggable);

        _dispatchEvent({
          sortable: _this,
          name: 'change',
          toEl: el,
          newIndex: newIndex,
          newDraggableIndex: newDraggableIndex,
          originalEvent: evt
        });
      }

      if (evt.preventDefault !== void 0) {
        evt.cancelable && evt.preventDefault();
      }

      target = closest(target, options.draggable, el, true);
      dragOverEvent('dragOver');
      if (Sortable.eventCanceled) return completedFired;

      if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
        return completed(false);
      }

      ignoreNextClick = false;

      if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = parentEl !== rootEl) // Reverting item into the original list
      : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
        vertical = this._getDirection(evt, target) === 'vertical';
        dragRect = getRect(dragEl);
        dragOverEvent('dragOverValid');
        if (Sortable.eventCanceled) return completedFired;

        if (revert) {
          parentEl = rootEl; // actualization

          capture();

          this._hideClone();

          dragOverEvent('revert');

          if (!Sortable.eventCanceled) {
            if (nextEl) {
              rootEl.insertBefore(dragEl, nextEl);
            } else {
              rootEl.appendChild(dragEl);
            }
          }

          return completed(true);
        }

        var elLastChild = lastChild(el, options.draggable);

        if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
          // Insert to end of list
          // If already at end of list: Do not insert
          if (elLastChild === dragEl) {
            return completed(false);
          } // if there is a last element, it is the target


          if (elLastChild && el === evt.target) {
            target = elLastChild;
          }

          if (target) {
            targetRect = getRect(target);
          }

          if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
            capture();

            if (elLastChild && elLastChild.nextSibling) {
              // the last draggable element is not the last node
              el.insertBefore(dragEl, elLastChild.nextSibling);
            } else {
              el.appendChild(dragEl);
            }

            parentEl = el; // actualization

            changed();
            return completed(true);
          }
        } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {
          // Insert to start of list
          var firstChild = getChild(el, 0, options, true);

          if (firstChild === dragEl) {
            return completed(false);
          }

          target = firstChild;
          targetRect = getRect(target);

          if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {
            capture();
            el.insertBefore(dragEl, firstChild);
            parentEl = el; // actualization

            changed();
            return completed(true);
          }
        } else if (target.parentNode === el) {
          targetRect = getRect(target);
          var direction = 0,
              targetBeforeFirstSwap,
              differentLevel = dragEl.parentNode !== el,
              differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),
              side1 = vertical ? 'top' : 'left',
              scrolledPastTop = isScrolledPast(target, 'top', 'top') || isScrolledPast(dragEl, 'top', 'top'),
              scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;

          if (lastTarget !== target) {
            targetBeforeFirstSwap = targetRect[side1];
            pastFirstInvertThresh = false;
            isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
          }

          direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
          var sibling;

          if (direction !== 0) {
            // Check if target is beside dragEl in respective direction (ignoring hidden elements)
            var dragIndex = index(dragEl);

            do {
              dragIndex -= direction;
              sibling = parentEl.children[dragIndex];
            } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));
          } // If dragEl is already beside target: Do not insert


          if (direction === 0 || sibling === target) {
            return completed(false);
          }

          lastTarget = target;
          lastDirection = direction;
          var nextSibling = target.nextElementSibling,
              after = false;
          after = direction === 1;

          var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);

          if (moveVector !== false) {
            if (moveVector === 1 || moveVector === -1) {
              after = moveVector === 1;
            }

            _silent = true;
            setTimeout(_unsilent, 30);
            capture();

            if (after && !nextSibling) {
              el.appendChild(dragEl);
            } else {
              target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
            } // Undo chrome's scroll adjustment (has no effect on other browsers)


            if (scrolledPastTop) {
              scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
            }

            parentEl = dragEl.parentNode; // actualization
            // must be done before animation

            if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {
              targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
            }

            changed();
            return completed(true);
          }
        }

        if (el.contains(dragEl)) {
          return completed(false);
        }
      }

      return false;
    },
    _ignoreWhileAnimating: null,
    _offMoveEvents: function _offMoveEvents() {
      off(document, 'mousemove', this._onTouchMove);
      off(document, 'touchmove', this._onTouchMove);
      off(document, 'pointermove', this._onTouchMove);
      off(document, 'dragover', nearestEmptyInsertDetectEvent);
      off(document, 'mousemove', nearestEmptyInsertDetectEvent);
      off(document, 'touchmove', nearestEmptyInsertDetectEvent);
    },
    _offUpEvents: function _offUpEvents() {
      var ownerDocument = this.el.ownerDocument;
      off(ownerDocument, 'mouseup', this._onDrop);
      off(ownerDocument, 'touchend', this._onDrop);
      off(ownerDocument, 'pointerup', this._onDrop);
      off(ownerDocument, 'touchcancel', this._onDrop);
      off(document, 'selectstart', this);
    },
    _onDrop: function _onDrop(
    /**Event*/
    evt) {
      var el = this.el,
          options = this.options; // Get the index of the dragged element within its parent

      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);
      pluginEvent('drop', this, {
        evt: evt
      });
      parentEl = dragEl && dragEl.parentNode; // Get again after plugin event

      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);

      if (Sortable.eventCanceled) {
        this._nulling();

        return;
      }

      awaitingDragStarted = false;
      isCircumstantialInvert = false;
      pastFirstInvertThresh = false;
      clearInterval(this._loopId);
      clearTimeout(this._dragStartTimer);

      _cancelNextTick(this.cloneId);

      _cancelNextTick(this._dragStartId); // Unbind events


      if (this.nativeDraggable) {
        off(document, 'drop', this);
        off(el, 'dragstart', this._onDragStart);
      }

      this._offMoveEvents();

      this._offUpEvents();

      if (Safari) {
        css(document.body, 'user-select', '');
      }

      css(dragEl, 'transform', '');

      if (evt) {
        if (moved) {
          evt.cancelable && evt.preventDefault();
          !options.dropBubble && evt.stopPropagation();
        }

        ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);

        if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
          // Remove clone(s)
          cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
        }

        if (dragEl) {
          if (this.nativeDraggable) {
            off(dragEl, 'dragend', this);
          }

          _disableDraggable(dragEl);

          dragEl.style['will-change'] = ''; // Remove classes
          // ghostClass is added in dragStarted

          if (moved && !awaitingDragStarted) {
            toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
          }

          toggleClass(dragEl, this.options.chosenClass, false); // Drag stop event

          _dispatchEvent({
            sortable: this,
            name: 'unchoose',
            toEl: parentEl,
            newIndex: null,
            newDraggableIndex: null,
            originalEvent: evt
          });

          if (rootEl !== parentEl) {
            if (newIndex >= 0) {
              // Add event
              _dispatchEvent({
                rootEl: parentEl,
                name: 'add',
                toEl: parentEl,
                fromEl: rootEl,
                originalEvent: evt
              }); // Remove event


              _dispatchEvent({
                sortable: this,
                name: 'remove',
                toEl: parentEl,
                originalEvent: evt
              }); // drag from one list and drop into another


              _dispatchEvent({
                rootEl: parentEl,
                name: 'sort',
                toEl: parentEl,
                fromEl: rootEl,
                originalEvent: evt
              });

              _dispatchEvent({
                sortable: this,
                name: 'sort',
                toEl: parentEl,
                originalEvent: evt
              });
            }

            putSortable && putSortable.save();
          } else {
            if (newIndex !== oldIndex) {
              if (newIndex >= 0) {
                // drag & drop within the same list
                _dispatchEvent({
                  sortable: this,
                  name: 'update',
                  toEl: parentEl,
                  originalEvent: evt
                });

                _dispatchEvent({
                  sortable: this,
                  name: 'sort',
                  toEl: parentEl,
                  originalEvent: evt
                });
              }
            }
          }

          if (Sortable.active) {
            /* jshint eqnull:true */
            if (newIndex == null || newIndex === -1) {
              newIndex = oldIndex;
              newDraggableIndex = oldDraggableIndex;
            }

            _dispatchEvent({
              sortable: this,
              name: 'end',
              toEl: parentEl,
              originalEvent: evt
            }); // Save sorting


            this.save();
          }
        }
      }

      this._nulling();
    },
    _nulling: function _nulling() {
      pluginEvent('nulling', this);
      rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
      savedInputChecked.forEach(function (el) {
        el.checked = true;
      });
      savedInputChecked.length = lastDx = lastDy = 0;
    },
    handleEvent: function handleEvent(
    /**Event*/
    evt) {
      switch (evt.type) {
        case 'drop':
        case 'dragend':
          this._onDrop(evt);

          break;

        case 'dragenter':
        case 'dragover':
          if (dragEl) {
            this._onDragOver(evt);

            _globalDragOver(evt);
          }

          break;

        case 'selectstart':
          evt.preventDefault();
          break;
      }
    },

    /**
     * Serializes the item into an array of string.
     * @returns {String[]}
     */
    toArray: function toArray() {
      var order = [],
          el,
          children = this.el.children,
          i = 0,
          n = children.length,
          options = this.options;

      for (; i < n; i++) {
        el = children[i];

        if (closest(el, options.draggable, this.el, false)) {
          order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
        }
      }

      return order;
    },

    /**
     * Sorts the elements according to the array.
     * @param  {String[]}  order  order of the items
     */
    sort: function sort(order, useAnimation) {
      var items = {},
          rootEl = this.el;
      this.toArray().forEach(function (id, i) {
        var el = rootEl.children[i];

        if (closest(el, this.options.draggable, rootEl, false)) {
          items[id] = el;
        }
      }, this);
      useAnimation && this.captureAnimationState();
      order.forEach(function (id) {
        if (items[id]) {
          rootEl.removeChild(items[id]);
          rootEl.appendChild(items[id]);
        }
      });
      useAnimation && this.animateAll();
    },

    /**
     * Save the current sorting
     */
    save: function save() {
      var store = this.options.store;
      store && store.set && store.set(this);
    },

    /**
     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
     * @param   {HTMLElement}  el
     * @param   {String}       [selector]  default: `options.draggable`
     * @returns {HTMLElement|null}
     */
    closest: function closest$1(el, selector) {
      return closest(el, selector || this.options.draggable, this.el, false);
    },

    /**
     * Set/get option
     * @param   {string} name
     * @param   {*}      [value]
     * @returns {*}
     */
    option: function option(name, value) {
      var options = this.options;

      if (value === void 0) {
        return options[name];
      } else {
        var modifiedValue = PluginManager.modifyOption(this, name, value);

        if (typeof modifiedValue !== 'undefined') {
          options[name] = modifiedValue;
        } else {
          options[name] = value;
        }

        if (name === 'group') {
          _prepareGroup(options);
        }
      }
    },

    /**
     * Destroy
     */
    destroy: function destroy() {
      pluginEvent('destroy', this);
      var el = this.el;
      el[expando] = null;
      off(el, 'mousedown', this._onTapStart);
      off(el, 'touchstart', this._onTapStart);
      off(el, 'pointerdown', this._onTapStart);

      if (this.nativeDraggable) {
        off(el, 'dragover', this);
        off(el, 'dragenter', this);
      } // Remove draggable attributes


      Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
        el.removeAttribute('draggable');
      });

      this._onDrop();

      this._disableDelayedDragEvents();

      sortables.splice(sortables.indexOf(this.el), 1);
      this.el = el = null;
    },
    _hideClone: function _hideClone() {
      if (!cloneHidden) {
        pluginEvent('hideClone', this);
        if (Sortable.eventCanceled) return;
        css(cloneEl, 'display', 'none');

        if (this.options.removeCloneOnHide && cloneEl.parentNode) {
          cloneEl.parentNode.removeChild(cloneEl);
        }

        cloneHidden = true;
      }
    },
    _showClone: function _showClone(putSortable) {
      if (putSortable.lastPutMode !== 'clone') {
        this._hideClone();

        return;
      }

      if (cloneHidden) {
        pluginEvent('showClone', this);
        if (Sortable.eventCanceled) return; // show clone at dragEl or original position

        if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {
          rootEl.insertBefore(cloneEl, dragEl);
        } else if (nextEl) {
          rootEl.insertBefore(cloneEl, nextEl);
        } else {
          rootEl.appendChild(cloneEl);
        }

        if (this.options.group.revertClone) {
          this.animate(dragEl, cloneEl);
        }

        css(cloneEl, 'display', '');
        cloneHidden = false;
      }
    }
  };

  function _globalDragOver(
  /**Event*/
  evt) {
    if (evt.dataTransfer) {
      evt.dataTransfer.dropEffect = 'move';
    }

    evt.cancelable && evt.preventDefault();
  }

  function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
    var evt,
        sortable = fromEl[expando],
        onMoveFn = sortable.options.onMove,
        retVal; // Support for new CustomEvent feature

    if (window.CustomEvent && !IE11OrLess && !Edge) {
      evt = new CustomEvent('move', {
        bubbles: true,
        cancelable: true
      });
    } else {
      evt = document.createEvent('Event');
      evt.initEvent('move', true, true);
    }

    evt.to = toEl;
    evt.from = fromEl;
    evt.dragged = dragEl;
    evt.draggedRect = dragRect;
    evt.related = targetEl || toEl;
    evt.relatedRect = targetRect || getRect(toEl);
    evt.willInsertAfter = willInsertAfter;
    evt.originalEvent = originalEvent;
    fromEl.dispatchEvent(evt);

    if (onMoveFn) {
      retVal = onMoveFn.call(sortable, evt, originalEvent);
    }

    return retVal;
  }

  function _disableDraggable(el) {
    el.draggable = false;
  }

  function _unsilent() {
    _silent = false;
  }

  function _ghostIsFirst(evt, vertical, sortable) {
    var rect = getRect(getChild(sortable.el, 0, sortable.options, true));
    var spacer = 10;
    return vertical ? evt.clientX < rect.left - spacer || evt.clientY < rect.top && evt.clientX < rect.right : evt.clientY < rect.top - spacer || evt.clientY < rect.bottom && evt.clientX < rect.left;
  }

  function _ghostIsLast(evt, vertical, sortable) {
    var rect = getRect(lastChild(sortable.el, sortable.options.draggable));
    var spacer = 10;
    return vertical ? evt.clientX > rect.right + spacer || evt.clientX <= rect.right && evt.clientY > rect.bottom && evt.clientX >= rect.left : evt.clientX > rect.right && evt.clientY > rect.top || evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer;
  }

  function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
    var mouseOnAxis = vertical ? evt.clientY : evt.clientX,
        targetLength = vertical ? targetRect.height : targetRect.width,
        targetS1 = vertical ? targetRect.top : targetRect.left,
        targetS2 = vertical ? targetRect.bottom : targetRect.right,
        invert = false;

    if (!invertSwap) {
      // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold
      if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
        // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2
        // check if past first invert threshold on side opposite of lastDirection
        if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
          // past first invert threshold, do not restrict inverted threshold to dragEl shadow
          pastFirstInvertThresh = true;
        }

        if (!pastFirstInvertThresh) {
          // dragEl shadow (target move distance shadow)
          if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow
          : mouseOnAxis > targetS2 - targetMoveDistance) {
            return -lastDirection;
          }
        } else {
          invert = true;
        }
      } else {
        // Regular
        if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
          return _getInsertDirection(target);
        }
      }
    }

    invert = invert || invertSwap;

    if (invert) {
      // Invert of regular
      if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
        return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
      }
    }

    return 0;
  }
  /**
   * Gets the direction dragEl must be swapped relative to target in order to make it
   * seem that dragEl has been "inserted" into that element's position
   * @param  {HTMLElement} target       The target whose position dragEl is being inserted at
   * @return {Number}                   Direction dragEl must be swapped
   */


  function _getInsertDirection(target) {
    if (index(dragEl) < index(target)) {
      return 1;
    } else {
      return -1;
    }
  }
  /**
   * Generate id
   * @param   {HTMLElement} el
   * @returns {String}
   * @private
   */


  function _generateId(el) {
    var str = el.tagName + el.className + el.src + el.href + el.textContent,
        i = str.length,
        sum = 0;

    while (i--) {
      sum += str.charCodeAt(i);
    }

    return sum.toString(36);
  }

  function _saveInputCheckedState(root) {
    savedInputChecked.length = 0;
    var inputs = root.getElementsByTagName('input');
    var idx = inputs.length;

    while (idx--) {
      var el = inputs[idx];
      el.checked && savedInputChecked.push(el);
    }
  }

  function _nextTick(fn) {
    return setTimeout(fn, 0);
  }

  function _cancelNextTick(id) {
    return clearTimeout(id);
  } // Fixed #973:


  if (documentExists) {
    on(document, 'touchmove', function (evt) {
      if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
        evt.preventDefault();
      }
    });
  } // Export utils


  Sortable.utils = {
    on: on,
    off: off,
    css: css,
    find: find,
    is: function is(el, selector) {
      return !!closest(el, selector, el, false);
    },
    extend: extend,
    throttle: throttle,
    closest: closest,
    toggleClass: toggleClass,
    clone: clone,
    index: index,
    nextTick: _nextTick,
    cancelNextTick: _cancelNextTick,
    detectDirection: _detectDirection,
    getChild: getChild
  };
  /**
   * Get the Sortable instance of an element
   * @param  {HTMLElement} element The element
   * @return {Sortable|undefined}         The instance of Sortable
   */

  Sortable.get = function (element) {
    return element[expando];
  };
  /**
   * Mount a plugin to Sortable
   * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted
   */


  Sortable.mount = function () {
    for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
      plugins[_key] = arguments[_key];
    }

    if (plugins[0].constructor === Array) plugins = plugins[0];
    plugins.forEach(function (plugin) {
      if (!plugin.prototype || !plugin.prototype.constructor) {
        throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(plugin));
      }

      if (plugin.utils) Sortable.utils = _objectSpread2(_objectSpread2({}, Sortable.utils), plugin.utils);
      PluginManager.mount(plugin);
    });
  };
  /**
   * Create sortable instance
   * @param {HTMLElement}  el
   * @param {Object}      [options]
   */


  Sortable.create = function (el, options) {
    return new Sortable(el, options);
  }; // Export


  Sortable.version = version;
  var autoScrolls = [],
      scrollEl,
      scrollRootEl,
      scrolling = false,
      lastAutoScrollX,
      lastAutoScrollY,
      touchEvt$1,
      pointerElemChangedInterval;

  function AutoScrollPlugin() {
    function AutoScroll() {
      this.defaults = {
        scroll: true,
        forceAutoScrollFallback: false,
        scrollSensitivity: 30,
        scrollSpeed: 10,
        bubbleScroll: true
      }; // Bind all private methods

      for (var fn in this) {
        if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
          this[fn] = this[fn].bind(this);
        }
      }
    }

    AutoScroll.prototype = {
      dragStarted: function dragStarted(_ref) {
        var originalEvent = _ref.originalEvent;

        if (this.sortable.nativeDraggable) {
          on(document, 'dragover', this._handleAutoScroll);
        } else {
          if (this.options.supportPointer) {
            on(document, 'pointermove', this._handleFallbackAutoScroll);
          } else if (originalEvent.touches) {
            on(document, 'touchmove', this._handleFallbackAutoScroll);
          } else {
            on(document, 'mousemove', this._handleFallbackAutoScroll);
          }
        }
      },
      dragOverCompleted: function dragOverCompleted(_ref2) {
        var originalEvent = _ref2.originalEvent; // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)

        if (!this.options.dragOverBubble && !originalEvent.rootEl) {
          this._handleAutoScroll(originalEvent);
        }
      },
      drop: function drop() {
        if (this.sortable.nativeDraggable) {
          off(document, 'dragover', this._handleAutoScroll);
        } else {
          off(document, 'pointermove', this._handleFallbackAutoScroll);
          off(document, 'touchmove', this._handleFallbackAutoScroll);
          off(document, 'mousemove', this._handleFallbackAutoScroll);
        }

        clearPointerElemChangedInterval();
        clearAutoScrolls();
        cancelThrottle();
      },
      nulling: function nulling() {
        touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
        autoScrolls.length = 0;
      },
      _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
        this._handleAutoScroll(evt, true);
      },
      _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
        var _this = this;

        var x = (evt.touches ? evt.touches[0] : evt).clientX,
            y = (evt.touches ? evt.touches[0] : evt).clientY,
            elem = document.elementFromPoint(x, y);
        touchEvt$1 = evt; // IE does not seem to have native autoscroll,
        // Edge's autoscroll seems too conditional,
        // MACOS Safari does not have autoscroll,
        // Firefox and Chrome are good

        if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {
          autoScroll(evt, this.options, elem, fallback); // Listener for pointer element change

          var ogElemScroller = getParentAutoScrollElement(elem, true);

          if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
            pointerElemChangedInterval && clearPointerElemChangedInterval(); // Detect for pointer elem change, emulating native DnD behaviour

            pointerElemChangedInterval = setInterval(function () {
              var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);

              if (newElem !== ogElemScroller) {
                ogElemScroller = newElem;
                clearAutoScrolls();
              }

              autoScroll(evt, _this.options, newElem, fallback);
            }, 10);
            lastAutoScrollX = x;
            lastAutoScrollY = y;
          }
        } else {
          // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll
          if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
            clearAutoScrolls();
            return;
          }

          autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
        }
      }
    };
    return _extends(AutoScroll, {
      pluginName: 'scroll',
      initializeByDefault: true
    });
  }

  function clearAutoScrolls() {
    autoScrolls.forEach(function (autoScroll) {
      clearInterval(autoScroll.pid);
    });
    autoScrolls = [];
  }

  function clearPointerElemChangedInterval() {
    clearInterval(pointerElemChangedInterval);
  }

  var autoScroll = throttle(function (evt, options, rootEl, isFallback) {
    // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
    if (!options.scroll) return;
    var x = (evt.touches ? evt.touches[0] : evt).clientX,
        y = (evt.touches ? evt.touches[0] : evt).clientY,
        sens = options.scrollSensitivity,
        speed = options.scrollSpeed,
        winScroller = getWindowScrollingElement();
    var scrollThisInstance = false,
        scrollCustomFn; // New scroll root, set scrollEl

    if (scrollRootEl !== rootEl) {
      scrollRootEl = rootEl;
      clearAutoScrolls();
      scrollEl = options.scroll;
      scrollCustomFn = options.scrollFn;

      if (scrollEl === true) {
        scrollEl = getParentAutoScrollElement(rootEl, true);
      }
    }

    var layersOut = 0;
    var currentParent = scrollEl;

    do {
      var el = currentParent,
          rect = getRect(el),
          top = rect.top,
          bottom = rect.bottom,
          left = rect.left,
          right = rect.right,
          width = rect.width,
          height = rect.height,
          canScrollX = void 0,
          canScrollY = void 0,
          scrollWidth = el.scrollWidth,
          scrollHeight = el.scrollHeight,
          elCSS = css(el),
          scrollPosX = el.scrollLeft,
          scrollPosY = el.scrollTop;

      if (el === winScroller) {
        canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');
        canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');
      } else {
        canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');
        canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');
      }

      var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);
      var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);

      if (!autoScrolls[layersOut]) {
        for (var i = 0; i <= layersOut; i++) {
          if (!autoScrolls[i]) {
            autoScrolls[i] = {};
          }
        }
      }

      if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
        autoScrolls[layersOut].el = el;
        autoScrolls[layersOut].vx = vx;
        autoScrolls[layersOut].vy = vy;
        clearInterval(autoScrolls[layersOut].pid);

        if (vx != 0 || vy != 0) {
          scrollThisInstance = true;
          /* jshint loopfunc:true */

          autoScrolls[layersOut].pid = setInterval(function () {
            // emulate drag over during autoscroll (fallback), emulating native DnD behaviour
            if (isFallback && this.layer === 0) {
              Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely

            }

            var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
            var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;

            if (typeof scrollCustomFn === 'function') {
              if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {
                return;
              }
            }

            scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
          }.bind({
            layer: layersOut
          }), 24);
        }
      }

      layersOut++;
    } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));

    scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not
  }, 30);

  var drop = function drop(_ref) {
    var originalEvent = _ref.originalEvent,
        putSortable = _ref.putSortable,
        dragEl = _ref.dragEl,
        activeSortable = _ref.activeSortable,
        dispatchSortableEvent = _ref.dispatchSortableEvent,
        hideGhostForTarget = _ref.hideGhostForTarget,
        unhideGhostForTarget = _ref.unhideGhostForTarget;
    if (!originalEvent) return;
    var toSortable = putSortable || activeSortable;
    hideGhostForTarget();
    var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;
    var target = document.elementFromPoint(touch.clientX, touch.clientY);
    unhideGhostForTarget();

    if (toSortable && !toSortable.el.contains(target)) {
      dispatchSortableEvent('spill');
      this.onSpill({
        dragEl: dragEl,
        putSortable: putSortable
      });
    }
  };

  function Revert() {}

  Revert.prototype = {
    startIndex: null,
    dragStart: function dragStart(_ref2) {
      var oldDraggableIndex = _ref2.oldDraggableIndex;
      this.startIndex = oldDraggableIndex;
    },
    onSpill: function onSpill(_ref3) {
      var dragEl = _ref3.dragEl,
          putSortable = _ref3.putSortable;
      this.sortable.captureAnimationState();

      if (putSortable) {
        putSortable.captureAnimationState();
      }

      var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);

      if (nextSibling) {
        this.sortable.el.insertBefore(dragEl, nextSibling);
      } else {
        this.sortable.el.appendChild(dragEl);
      }

      this.sortable.animateAll();

      if (putSortable) {
        putSortable.animateAll();
      }
    },
    drop: drop
  };

  _extends(Revert, {
    pluginName: 'revertOnSpill'
  });

  function Remove() {}

  Remove.prototype = {
    onSpill: function onSpill(_ref4) {
      var dragEl = _ref4.dragEl,
          putSortable = _ref4.putSortable;
      var parentSortable = putSortable || this.sortable;
      parentSortable.captureAnimationState();
      dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);
      parentSortable.animateAll();
    },
    drop: drop
  };

  _extends(Remove, {
    pluginName: 'removeOnSpill'
  });

  Sortable.mount(new AutoScrollPlugin());
  Sortable.mount(Remove, Revert);

  function swapDragArrayElement(data, currentIndex, targetIndex) {
    var newData = _toConsumableArray(data);

    if (targetIndex - currentIndex > 0) {
      newData.splice(targetIndex + 1, 0, newData[currentIndex]);
      newData.splice(currentIndex, 1);
    } else {
      newData.splice(targetIndex, 0, newData[currentIndex]);
      newData.splice(currentIndex + 1, 1);
    }

    return newData;
  }

  function ownKeys$e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$e(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$e(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useDragSort(props) {
    var _toRefs = vue.toRefs(props),
        sortOnRowDraggable = _toRefs.sortOnRowDraggable,
        dragSort = _toRefs.dragSort,
        columns = _toRefs.columns,
        data = _toRefs.data,
        rowKey = _toRefs.rowKey;

    var _useClassName = useClassName(),
        tableDraggableClasses = _useClassName.tableDraggableClasses,
        tableBaseClass = _useClassName.tableBaseClass;

    var primaryTableRef = vue.ref(null);
    var dragCol = vue.computed(function () {
      return columns.value.find(function (item) {
        return item.colKey === "drag";
      });
    });
    var isRowDraggable = vue.computed(function () {
      return sortOnRowDraggable.value || dragSort.value === "row";
    });
    var isRowHandlerDraggable = vue.computed(function () {
      return dragSort.value === "row-handler" && !!dragCol.value;
    });
    var isColDraggable = vue.computed(function () {
      return dragSort.value === "col";
    });
    var lastRowList = vue.ref([]);
    var lastColList = vue.ref([]);

    if (props.sortOnRowDraggable) {
      log.error("Table", "`sortOnRowDraggable` is going to be deprecated, use dragSort='row' instead.");
    }

    vue.watch([data], function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
          data2 = _ref2[0];

      lastRowList.value = (data2 === null || data2 === void 0 ? void 0 : data2.map(function (item) {
        return get_1(item, rowKey.value);
      })) || [];
    }, {
      immediate: true
    });
    vue.watch(columns, function (columns2) {
      lastColList.value = columns2 || [];
    }, {
      immediate: true
    });

    var registerRowDragEvent = function registerRowDragEvent(element) {
      if (!isRowHandlerDraggable.value && !isRowDraggable.value) return;
      var dragContainer = element === null || element === void 0 ? void 0 : element.querySelector("tbody");

      if (!dragContainer) {
        console.error("tbody does not exist.");
        return null;
      }

      var dragInstanceTmp = null;

      var baseOptions = _objectSpread$e(_objectSpread$e({
        animation: 150
      }, props.dragSortOptions), {}, {
        ghostClass: tableDraggableClasses.ghost,
        chosenClass: tableDraggableClasses.chosen,
        dragClass: tableDraggableClasses.dragging,
        onEnd: function onEnd(evt) {
          var _dragInstanceTmp, _props$onDragSort;

          (_dragInstanceTmp = dragInstanceTmp) === null || _dragInstanceTmp === void 0 ? void 0 : _dragInstanceTmp.sort(lastRowList.value);
          var currentIndex = evt.oldIndex,
              targetIndex = evt.newIndex;
          var params = {
            currentIndex: currentIndex,
            current: data.value[currentIndex],
            targetIndex: targetIndex,
            target: data.value[targetIndex],
            currentData: swapDragArrayElement(props.data, currentIndex, targetIndex),
            e: evt,
            sort: "row"
          };
          (_props$onDragSort = props.onDragSort) === null || _props$onDragSort === void 0 ? void 0 : _props$onDragSort.call(props, params);
        }
      });

      if (isRowDraggable.value) {
        dragInstanceTmp = new Sortable(dragContainer, _objectSpread$e({}, baseOptions));
      } else {
        dragInstanceTmp = new Sortable(dragContainer, _objectSpread$e(_objectSpread$e({}, baseOptions), {}, {
          handle: ".".concat(tableDraggableClasses.handle)
        }));
      }

      lastRowList.value = dragInstanceTmp.toArray();
    };

    var registerColDragEvent = function registerColDragEvent(tableElement) {
      var _dragInstanceTmp3;

      if (!isColDraggable.value || !tableElement) return;
      var dragInstanceTmp = null;

      var options = _objectSpread$e(_objectSpread$e({
        animation: 150
      }, props.dragSortOptions), {}, {
        dataIdAttr: "data-colkey",
        direction: "vertical",
        ghostClass: tableDraggableClasses.ghost,
        chosenClass: tableDraggableClasses.chosen,
        dragClass: tableDraggableClasses.dragging,
        handle: ".".concat(tableBaseClass.thCellInner),
        onEnd: function onEnd(evt) {
          var _dragInstanceTmp2, _props$onDragSort2;

          (_dragInstanceTmp2 = dragInstanceTmp) === null || _dragInstanceTmp2 === void 0 ? void 0 : _dragInstanceTmp2.sort(_toConsumableArray(lastColList.value));
          var currentIndex = evt.oldIndex,
              targetIndex = evt.newIndex;
          var params = {
            currentIndex: currentIndex,
            current: columns.value[currentIndex],
            targetIndex: targetIndex,
            target: columns.value[targetIndex],
            currentData: swapDragArrayElement(columns.value, currentIndex, targetIndex),
            e: evt,
            sort: "col"
          };
          (_props$onDragSort2 = props.onDragSort) === null || _props$onDragSort2 === void 0 ? void 0 : _props$onDragSort2.call(props, params);
        }
      });

      var container = tableElement.querySelector("thead > tr");
      dragInstanceTmp = new Sortable(container, options);
      lastColList.value = (_dragInstanceTmp3 = dragInstanceTmp) === null || _dragInstanceTmp3 === void 0 ? void 0 : _dragInstanceTmp3.toArray();
    };

    function setDragSortPrimaryTableRef(primaryTableElement) {
      primaryTableRef.value = primaryTableElement;
    }

    vue.watch([primaryTableRef], function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 1),
          val = _ref4[0];

      (val === null || val === void 0 ? void 0 : val.$el) && registerRowDragEvent(val === null || val === void 0 ? void 0 : val.$el);
      (val === null || val === void 0 ? void 0 : val.$el) && registerColDragEvent(val === null || val === void 0 ? void 0 : val.$el);
    });
    return {
      isRowDraggable: isRowDraggable,
      isRowHandlerDraggable: isRowHandlerDraggable,
      isColDraggable: isColDraggable,
      setDragSortPrimaryTableRef: setDragSortPrimaryTableRef
    };
  }

  function useAsyncLoading(props, context) {
    var renderTNode = useTNodeJSX();

    var _useConfig = useConfig("table"),
        global = _useConfig.global;

    var _useClassName = useClassName(),
        isLoadingClass = _useClassName.isLoadingClass,
        isLoadMoreClass = _useClassName.isLoadMoreClass,
        asyncLoadingClass = _useClassName.asyncLoadingClass;

    var classes = vue.computed(function () {
      var _ref;

      return [asyncLoadingClass, (_ref = {}, _defineProperty$3(_ref, isLoadingClass, props.asyncLoading === "loading"), _defineProperty$3(_ref, isLoadMoreClass, props.asyncLoading === "load-more"), _ref)];
    });

    function onLoadClick() {
      var _props$onAsyncLoading;

      if (typeof props.asyncLoading !== "string") return;
      (_props$onAsyncLoading = props.onAsyncLoadingClick) === null || _props$onAsyncLoading === void 0 ? void 0 : _props$onAsyncLoading.call(props, {
        status: props.asyncLoading
      });
    }

    function renderAsyncLoading() {
      var asyncLoadingNode = renderTNode("asyncLoading");

      if (isString_1(asyncLoadingNode)) {
        var asyncLoading = props.asyncLoading;
        var loadingText = {
          "load-more": global.value.loadingMoreText,
          loading: global.value.loadingText
        }[String(asyncLoading)];
        return vue.createVNode("div", {
          "class": classes.value,
          "onClick": onLoadClick
        }, [vue.createVNode(Loading, {
          "loading": asyncLoading === "loading",
          "text": loadingText
        }, null)]);
      }

      if (![null, false, void 0].includes(asyncLoadingNode)) {
        return vue.createVNode("div", {
          "class": classes.value,
          "onClick": onLoadClick
        }, [asyncLoadingNode]);
      }

      return null;
    }

    return {
      renderAsyncLoading: renderAsyncLoading
    };
  }

  function ownKeys$d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$d(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var EditableCell = vue.defineComponent({
    name: "TableEditableCell",
    props: {
      row: Object,
      rowIndex: Number,
      col: Object,
      colIndex: Number,
      oldCell: [Function, String]
    },
    setup: function setup(props, context) {
      var _toRefs = vue.toRefs(props),
          row = _toRefs.row,
          col = _toRefs.col;

      var _useClassName = useClassName(),
          tableBaseClass = _useClassName.tableBaseClass;

      var tableEditableCellRef = vue.ref(null);
      var isEdit = vue.ref(false);
      var editValue = vue.ref();
      var errorList = vue.ref();
      var currentRow = vue.computed(function () {
        var newRow = _objectSpread$d({}, row.value);

        set_1(newRow, col.value.colKey, editValue.value);
        return newRow;
      });
      var cellNode = vue.computed(function () {
        var node = renderCell({
          row: currentRow.value,
          col: _objectSpread$d(_objectSpread$d({}, col.value), {}, {
            cell: props.oldCell
          }),
          rowIndex: props.rowIndex,
          colIndex: props.colIndex
        }, context.slots);
        return node;
      });
      var componentProps = vue.computed(function () {
        var _edit$abortEditOnEven;

        var edit = col.value.edit;
        if (!edit) return {};

        var editProps = _objectSpread$d({}, edit.props);

        delete editProps.onChange;
        delete editProps.value;
        (_edit$abortEditOnEven = edit.abortEditOnEvent) === null || _edit$abortEditOnEven === void 0 ? void 0 : _edit$abortEditOnEven.forEach(function (item) {
          delete editProps[item];
        });
        return editProps;
      });
      var isAbortEditOnChange = vue.computed(function () {
        var _edit$abortEditOnEven2;

        var edit = col.value.edit;
        if (!edit) return false;
        return Boolean((_edit$abortEditOnEven2 = edit.abortEditOnEvent) === null || _edit$abortEditOnEven2 === void 0 ? void 0 : _edit$abortEditOnEven2.includes("onChange"));
      });

      var validateEdit = function validateEdit() {
        return new Promise(function (resolve) {
          var _col$value$edit, _col$value$edit2;

          if (!((_col$value$edit = col.value.edit) !== null && _col$value$edit !== void 0 && _col$value$edit.rules)) {
            resolve(true);
            return;
          }

          validate(editValue.value, (_col$value$edit2 = col.value.edit) === null || _col$value$edit2 === void 0 ? void 0 : _col$value$edit2.rules).then(function (result) {
            errorList.value = result === null || result === void 0 ? void 0 : result.filter(function (t) {
              return !t.result;
            });

            if (!errorList.value || !errorList.value.length) {
              resolve(true);
            } else {
              resolve(errorList);
            }
          });
        });
      };

      var isSame = function isSame(a, b) {
        if (_typeof$2(a) === "object" && _typeof$2(b) === "object") {
          return JSON.stringify(a) === JSON.stringify(b);
        }

        return a === b;
      };

      var updateAndSaveAbort = function updateAndSaveAbort(outsideAbortEvent) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        validateEdit().then(function (result) {
          if (result !== true) return;

          if (!isSame(editValue.value, get_1(row.value, col.value.colKey))) {
            outsideAbortEvent === null || outsideAbortEvent === void 0 ? void 0 : outsideAbortEvent.apply(void 0, args);
          }

          var timer = setTimeout(function () {
            isEdit.value = false;
            clearTimeout(timer);
          }, 0);
        });
      };

      var listeners = vue.computed(function () {
        var _edit$abortEditOnEven3;

        var edit = col.value.edit;
        if (!isEdit.value) return;
        if (!(edit !== null && edit !== void 0 && (_edit$abortEditOnEven3 = edit.abortEditOnEvent) !== null && _edit$abortEditOnEven3 !== void 0 && _edit$abortEditOnEven3.length)) return {};
        var tListeners = {};
        edit.abortEditOnEvent.forEach(function (itemEvent) {
          if (itemEvent === "onChange") return;
          var outsideAbortEvent = edit.props[itemEvent];

          tListeners[itemEvent] = function () {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }

            updateAndSaveAbort.apply(void 0, [outsideAbortEvent, {
              trigger: itemEvent,
              newRowData: currentRow.value,
              rowIndex: props.rowIndex
            }].concat(args));
          };
        });
        return tListeners;
      });

      var onEditChange = function onEditChange(val) {
        editValue.value = val;

        if (isAbortEditOnChange.value) {
          var _col$value$edit3;

          var outsideAbortEvent = (_col$value$edit3 = col.value.edit) === null || _col$value$edit3 === void 0 ? void 0 : _col$value$edit3.onEdited;

          for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
            args[_key3 - 1] = arguments[_key3];
          }

          updateAndSaveAbort.apply(void 0, [outsideAbortEvent, {
            trigger: "onChange",
            newRowData: currentRow.value,
            rowIndex: props.rowIndex
          }].concat(args));
        }
      };

      var documentClickHandler = function documentClickHandler(e) {
        var _tableEditableCellRef, _e$path, _tableEditableCellRef2;

        if (!col.value.edit || !col.value.edit.component) return;
        if (!isEdit.value || !((_tableEditableCellRef = tableEditableCellRef.value) !== null && _tableEditableCellRef !== void 0 && _tableEditableCellRef.$el)) return;
        if ((_e$path = e.path) !== null && _e$path !== void 0 && _e$path.includes((_tableEditableCellRef2 = tableEditableCellRef.value) === null || _tableEditableCellRef2 === void 0 ? void 0 : _tableEditableCellRef2.$el)) return;
        var outsideAbortEvent = col.value.edit.onEdited;
        updateAndSaveAbort(outsideAbortEvent, {
          trigger: "document",
          newRowData: currentRow.value,
          rowIndex: props.rowIndex
        });
      };

      vue.watch(row, function (row2) {
        var val = get_1(row2, col.value.colKey);

        if (_typeof$2(val) === "object") {
          val = val instanceof Array ? _toConsumableArray(val) : _objectSpread$d({}, val);
        }

        editValue.value = val;
      }, {
        immediate: true
      });
      vue.watch(isEdit, function (isEdit2) {
        if (!col.value.edit || !col.value.edit.component) return;

        if (isEdit2) {
          document.addEventListener("click", documentClickHandler);
        } else {
          document.removeEventListener("click", documentClickHandler);
        }
      });
      return {
        editValue: editValue,
        isEdit: isEdit,
        tableBaseClass: tableBaseClass,
        cellNode: cellNode,
        isAbortEditOnChange: isAbortEditOnChange,
        listeners: listeners,
        componentProps: componentProps,
        tableEditableCellRef: tableEditableCellRef,
        errorList: errorList,
        onEditChange: onEditChange
      };
    },
    render: function render() {
      var _this = this,
          _this$col$edit,
          _this$errorList,
          _this$errorList$,
          _this$errorList2,
          _this$errorList2$;

      if (!this.isEdit) {
        return vue.createVNode("div", {
          "class": this.tableBaseClass.cellEditable,
          "onClick": function onClick(e) {
            _this.isEdit = true;
            e.stopPropagation();
          }
        }, [this.cellNode, vue.createVNode(edit1, {
          "size": "12px"
        }, null)]);
      }

      var component = (_this$col$edit = this.col.edit) === null || _this$col$edit === void 0 ? void 0 : _this$col$edit.component;

      if (!component) {
        log.error("Table", "edit.component is required.");
        return null;
      }

      var errorMessage = (_this$errorList = this.errorList) === null || _this$errorList === void 0 ? void 0 : (_this$errorList$ = _this$errorList[0]) === null || _this$errorList$ === void 0 ? void 0 : _this$errorList$.message;
      return vue.createVNode("div", {
        "class": this.tableBaseClass.cellEditWrap
      }, [vue.createVNode(component, vue.mergeProps({
        "ref": "tableEditableCellRef",
        "status": errorMessage ? ((_this$errorList2 = this.errorList) === null || _this$errorList2 === void 0 ? void 0 : (_this$errorList2$ = _this$errorList2[0]) === null || _this$errorList2$ === void 0 ? void 0 : _this$errorList2$.type) || "error" : void 0,
        "tips": errorMessage
      }, this.componentProps, this.listeners, {
        "value": this.editValue,
        "onChange": this.onEditChange
      }), null)]);
    }
  });

  function ownKeys$c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$c(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var OMIT_PROPS = ["hideSortTips", "dragSort", "defaultExpandedRowKeys", "columnController", "filterRow", "sortOnRowDraggable", "expandOnRowClick", "multipleSort", "expandIcon", "onChange", "onAsyncLoadingClick", "onColumnChange", "onColumnControllerVisibleChange", "onDataChange", "onDisplayColumnsChange", "onDragSort", "onExpandChange", "onFilterChange", "onSelectChange", "onSortChange"];
  var _PrimaryTable = vue.defineComponent({
    name: "TPrimaryTable",
    props: _objectSpread$c(_objectSpread$c({}, baseTableProps), primaryTableProps),
    setup: function setup(props, context) {
      var renderTNode = useTNodeJSX();

      var _toRefs = vue.toRefs(props),
          columns = _toRefs.columns,
          columnController = _toRefs.columnController;

      var primaryTableRef = vue.ref(null);

      var _useClassName = useClassName(),
          tableDraggableClasses = _useClassName.tableDraggableClasses,
          tableBaseClass = _useClassName.tableBaseClass;

      var _useColumnController = useColumnController(props, context),
          tDisplayColumns = _useColumnController.tDisplayColumns,
          renderColumnController = _useColumnController.renderColumnController;

      var _useRowExpand = useRowExpand(props, context),
          showExpandedRow = _useRowExpand.showExpandedRow,
          showExpandIconColumn = _useRowExpand.showExpandIconColumn,
          getExpandColumn = _useRowExpand.getExpandColumn,
          renderExpandedRow = _useRowExpand.renderExpandedRow,
          onInnerExpandRowClick = _useRowExpand.onInnerExpandRowClick;

      var _useSorter = useSorter(props, context),
          renderSortIcon = _useSorter.renderSortIcon;

      var _useRowSelect = useRowSelect(props),
          formatToRowSelectColumn = _useRowSelect.formatToRowSelectColumn,
          selectedRowClassNames = _useRowSelect.selectedRowClassNames;

      var _useFilter = useFilter(props, context),
          hasEmptyCondition = _useFilter.hasEmptyCondition,
          isTableOverflowHidden = _useFilter.isTableOverflowHidden,
          renderFilterIcon = _useFilter.renderFilterIcon,
          renderFirstFilterRow = _useFilter.renderFirstFilterRow,
          setFilterPrimaryTableRef = _useFilter.setFilterPrimaryTableRef;

      var _useDragSort = useDragSort(props),
          isRowHandlerDraggable = _useDragSort.isRowHandlerDraggable,
          isRowDraggable = _useDragSort.isRowDraggable,
          isColDraggable = _useDragSort.isColDraggable,
          setDragSortPrimaryTableRef = _useDragSort.setDragSortPrimaryTableRef;

      var _useTableHeader = useTableHeader(props),
          renderTitleWidthIcon = _useTableHeader.renderTitleWidthIcon;

      var _useAsyncLoading = useAsyncLoading(props),
          renderAsyncLoading = _useAsyncLoading.renderAsyncLoading;

      var primaryTableClasses = vue.computed(function () {
        var _ref;

        return _ref = {}, _defineProperty$3(_ref, tableDraggableClasses.colDraggable, isColDraggable.value), _defineProperty$3(_ref, tableDraggableClasses.rowHandlerDraggable, isRowHandlerDraggable.value), _defineProperty$3(_ref, tableDraggableClasses.rowDraggable, isRowDraggable.value), _defineProperty$3(_ref, tableBaseClass.overflowVisible, isTableOverflowHidden.value === false), _ref;
      });
      var tRowClassNames = vue.computed(function () {
        var tClassNames = [props.rowClassName, selectedRowClassNames.value];
        return tClassNames.filter(function (v) {
          return v;
        });
      });
      var tRowAttributes = vue.computed(function () {
        var tAttributes = [props.rowAttributes];

        if (isRowHandlerDraggable.value || isRowDraggable.value) {
          tAttributes.push(function (_ref2) {
            var row = _ref2.row;
            return {
              "data-id": get_1(row, props.rowKey || "id")
            };
          });
        }

        return tAttributes.filter(function (v) {
          return v;
        });
      });
      vue.onMounted(function () {
        setFilterPrimaryTableRef(primaryTableRef.value);
        setDragSortPrimaryTableRef(primaryTableRef.value);
      });

      var getColumns = function getColumns(columns2) {
        var arr = [];

        var _loop = function _loop(i, len) {
          var _item$children, _tDisplayColumns$valu, _item$edit, _item$children2, _item$children3;

          var item = _objectSpread$c({}, columns2[i]);

          var isDisplayColumn = ((_item$children = item.children) === null || _item$children === void 0 ? void 0 : _item$children.length) || ((_tDisplayColumns$valu = tDisplayColumns.value) === null || _tDisplayColumns$valu === void 0 ? void 0 : _tDisplayColumns$valu.includes(item.colKey));
          if (!isDisplayColumn && props.columnController) return "continue";
          item = formatToRowSelectColumn(item);

          if (item.sorter || item.filter) {
            var titleContent = renderTitle(context.slots, item, i);
            var _item = item,
                ellipsisTitle = _item.ellipsisTitle;

            item.title = function (h2, p) {
              var _primaryTableRef$valu;

              var sortIcon = item.sorter ? renderSortIcon(p) : null;
              var filterIcon = item.filter ? renderFilterIcon(p) : null;
              var attach = (_primaryTableRef$valu = primaryTableRef.value) === null || _primaryTableRef$valu === void 0 ? void 0 : _primaryTableRef$valu.tableContentRef;
              return renderTitleWidthIcon([titleContent, sortIcon, filterIcon], p.col, p.colIndex, ellipsisTitle, attach);
            };

            item.ellipsisTitle = false;
          }

          if ((_item$edit = item.edit) !== null && _item$edit !== void 0 && _item$edit.component) {
            var oldCell = item.cell;

            item.cell = function (h2, p) {
              return vue.createVNode(EditableCell, vue.mergeProps(p, {
                "oldCell": oldCell
              }), context.slots);
            };
          }

          if ((_item$children2 = item.children) !== null && _item$children2 !== void 0 && _item$children2.length) {
            item.children = getColumns(item.children);
          }

          if (!item.children || (_item$children3 = item.children) !== null && _item$children3 !== void 0 && _item$children3.length) {
            arr.push(item);
          }
        };

        for (var i = 0, len = columns2.length; i < len; i++) {
          var _ret = _loop(i);

          if (_ret === "continue") continue;
        }

        return arr;
      };

      var tColumns = vue.computed(function () {
        var cols = getColumns(columns.value);

        if (showExpandIconColumn.value) {
          cols.unshift(getExpandColumn());
        }

        return cols;
      });

      var onInnerPageChange = function onInnerPageChange(pageInfo, newData) {
        var _props$onPageChange, _props$onChange;

        (_props$onPageChange = props.onPageChange) === null || _props$onPageChange === void 0 ? void 0 : _props$onPageChange.call(props, pageInfo, newData);
        var changeParams = [{
          pagination: pageInfo
        }, {
          trigger: "pagination",
          currentData: newData
        }];
        (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call.apply(_props$onChange, [props].concat(changeParams));
      };

      return function () {
        var formatNode = function formatNode(api, renderInnerNode, condition, extra) {
          if (!condition) return props[api];
          var innerNode = renderInnerNode(vue.h);
          var propsNode = renderTNode(api);
          if (innerNode && !propsNode) return function () {
            return innerNode;
          };
          if (propsNode && !innerNode) return function () {
            return propsNode;
          };

          if (innerNode && propsNode) {
            return function () {
              return extra !== null && extra !== void 0 && extra.reverse ? vue.createVNode("div", null, [innerNode, propsNode]) : vue.createVNode("div", null, [propsNode, innerNode]);
            };
          }

          return null;
        };

        var isColumnController = !!(columnController.value && Object.keys(columnController.value).length);
        var placement = isColumnController ? columnController.value.placement || "top-right" : "";
        var isBottomController = isColumnController && (placement === null || placement === void 0 ? void 0 : placement.indexOf("bottom")) !== -1;
        var topContent = formatNode("topContent", renderColumnController, isColumnController && !isBottomController);
        var bottomContent = formatNode("bottomContent", renderColumnController, isBottomController, {
          reverse: true
        });
        var firstFullRow = formatNode("firstFullRow", renderFirstFilterRow, !hasEmptyCondition.value);
        var lastFullRow = formatNode("lastFullRow", renderAsyncLoading, !!props.asyncLoading);

        var baseTableProps2 = _objectSpread$c(_objectSpread$c({}, omit_1(props, OMIT_PROPS)), {}, {
          rowClassName: tRowClassNames.value,
          rowAttributes: tRowAttributes.value,
          columns: tColumns.value,
          topContent: topContent,
          bottomContent: bottomContent,
          firstFullRow: firstFullRow,
          lastFullRow: lastFullRow,
          onPageChange: onInnerPageChange,
          renderExpandedRow: showExpandedRow.value ? renderExpandedRow : void 0
        });

        if (props.expandOnRowClick) {
          baseTableProps2.onRowClick = onInnerExpandRowClick;
        }

        return vue.createVNode(_BaseTable, vue.mergeProps({
          "ref": primaryTableRef
        }, baseTableProps2, {
          "class": primaryTableClasses.value
        }), context.slots);
      };
    }
  });

  var enhancedTableProps = {
    beforeDragSort: {
      type: Function
    },
    tree: {
      type: Object
    },
    treeExpandAndFoldIcon: {
      type: Function
    },
    onAbnormalDragSort: Function,
    onTreeExpandChange: Function
  };

  function ownKeys$b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$b(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL = {
    code: 1001,
    reason: "The same level of rows can not be swapped."
  };

  var TableTreeStore = /*#__PURE__*/function () {
    function TableTreeStore() {
      _classCallCheck(this, TableTreeStore);

      _defineProperty$3(this, "treeDataMap", /* @__PURE__ */new Map());

      _defineProperty$3(this, "expandAllRowIndex", void 0);

      this.treeDataMap = /* @__PURE__ */new Map();
    }

    _createClass(TableTreeStore, [{
      key: "initialTreeStore",
      value: function initialTreeStore(dataSource, columns, keys) {
        var _this$treeDataMap;

        (_this$treeDataMap = this.treeDataMap) === null || _this$treeDataMap === void 0 ? void 0 : _this$treeDataMap.clear();
        this.initialTreeDataMap(this.treeDataMap, dataSource, columns[0], keys);
      }
    }, {
      key: "toggleExpandData",
      value: function toggleExpandData(p, dataSource, keys) {
        if (!p) {
          log.error("EnhancedTable", "the node you want to toggleExpand doest not exist in `data`");
          return dataSource;
        }

        var rowValue = get_1(p.row, keys.rowKey);

        if (rowValue === void 0) {
          log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
          return [];
        }

        var r = this.treeDataMap.get(rowValue);
        r.rowIndex = p.rowIndex;
        r.expanded = !r.expanded;
        this.treeDataMap.set(rowValue, r);
        return this.updateExpandRow(r, dataSource, keys);
      }
    }, {
      key: "updateExpandRow",
      value: function updateExpandRow(changeRow, dataSource, keys) {
        var row = changeRow.row,
            rowIndex = changeRow.rowIndex,
            expanded = changeRow.expanded;
        var treeDataMap = this.treeDataMap;
        var childrenNodes = get_1(row, keys.childrenKey);
        if (!row || !childrenNodes) return;

        if (expanded) {
          updateChildrenRowState(treeDataMap, changeRow, expanded, keys);
          updateRowExpandLength(treeDataMap, row, childrenNodes.length, "expand", keys);
          dataSource.splice.apply(dataSource, [rowIndex + 1, 0].concat(childrenNodes));
        } else {
          updateChildrenRowState(treeDataMap, changeRow, expanded, keys);
          var len = changeRow.expandChildrenLength || childrenNodes.length;
          updateRowExpandLength(treeDataMap, row, -1 * len, "fold", keys);
          dataSource.splice(rowIndex + 1, len);
        }

        updateRowIndex(treeDataMap, dataSource, {
          rowKey: keys.rowKey,
          minRowIndex: rowIndex + 1
        });
        return dataSource;
      }
    }, {
      key: "getData",
      value: function getData(key) {
        return this.treeDataMap.get(key);
      }
    }, {
      key: "updateData",
      value: function updateData(rowValue, newRowData, dataSource, keys) {
        var newRowValue = get_1(newRowData, keys.rowKey);
        var rowState = this.treeDataMap.get(rowValue);

        if (!rowState || rowState.rowIndex === -1) {
          updateRowData(dataSource, rowValue, newRowData, {
            rowKey: keys.rowKey,
            childrenKey: keys.childrenKey
          });
          return;
        }

        var currentRowIndex = rowState.rowIndex;
        rowState.row = newRowData;
        rowState.id = newRowValue;

        if (rowState.parent) {
          var siblings = get_1(rowState.parent.row, keys.childrenKey);
          var index = siblings.findIndex(function (item) {
            return get_1(item, keys.rowKey) === rowValue;
          });
          siblings[index] = newRowData;
        }

        this.treeDataMap.set(newRowValue, rowState);

        if (rowValue !== newRowValue) {
          this.treeDataMap["delete"](rowValue);
        }

        return currentRowIndex;
      }
    }, {
      key: "remove",
      value: function remove(key, dataSource, keys) {
        var r = this.treeDataMap.get(key);

        if (r && r.rowIndex >= 0) {
          var removeNumber = (r.expandChildrenLength || 0) + 1;
          dataSource.splice(r.rowIndex, removeNumber);

          if (r.parent) {
            var siblings = get_1(r.parent.row, keys.childrenKey);
            var index = siblings.findIndex(function (item) {
              return get_1(item, keys.rowKey) === key;
            });
            siblings.splice(index, 1);
            updateRowExpandLength(this.treeDataMap, r.parent.row, -1 * removeNumber, "delete", keys);
          }

          this.treeDataMap["delete"](key);
          updateRowIndex(this.treeDataMap, dataSource, {
            minRowIndex: r.rowIndex,
            rowKey: keys.rowKey,
            type: "remove"
          });
        } else {
          console.warn("TDesign Table Warn: Do not remove this node, which is not appeared.");
        }

        return dataSource;
      }
    }, {
      key: "appendTo",
      value: function appendTo(rowValue, newData, dataSource, keys) {
        var state = this.treeDataMap.get(rowValue);
        if (!this.validateDataExist(state, rowValue)) return dataSource;
        var newRowValue = get_1(newData, keys.rowKey);
        var mapState = this.treeDataMap.get(newRowValue);
        if (!this.validateDataDoubleExist(mapState, newRowValue)) return dataSource;
        var children = get_1(state.row, keys.childrenKey);
        var isShowNewNode = state.expanded || !(children !== null && children !== void 0 && children.length);
        var rowIndex = isShowNewNode ? state.rowIndex + (state.expandChildrenLength || 0) + 1 : -1;
        var newState = {
          id: newRowValue,
          row: newData,
          rowIndex: rowIndex,
          level: state.level + 1,
          expanded: false,
          expandChildrenLength: 0,
          disabled: false,
          path: _toConsumableArray(state.path),
          parent: state
        };
        newState.path = newState.path.concat(newState);

        if (children !== null && children !== void 0 && children.length) {
          state.row[keys.childrenKey].push(newData);
        } else {
          state.row[keys.childrenKey] = [newData];
          state.expanded = true;
        }

        this.treeDataMap.set(newRowValue, newState);

        if (isShowNewNode) {
          dataSource.splice(newState.rowIndex, 0, newData);
          updateRowExpandLength(this.treeDataMap, state.row, 1, "insert", {
            rowKey: keys.rowKey,
            childrenKey: keys.childrenKey
          });
          updateRowIndex(this.treeDataMap, dataSource, {
            minRowIndex: newState.rowIndex,
            rowKey: keys.rowKey,
            type: "add"
          });
        }

        return dataSource;
      }
    }, {
      key: "appendToRoot",
      value: function appendToRoot(newData, dataSource, keys) {
        var rowValue = get_1(newData, keys.rowKey);

        if (!rowValue) {
          log.error("Table", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
          return;
        }

        dataSource.push(newData);
        var state = {
          id: rowValue,
          row: newData,
          rowIndex: dataSource.length - 1,
          level: 0,
          expanded: false,
          expandChildrenLength: 0,
          disabled: false
        };
        state.path = [state];
        this.treeDataMap.set(rowValue, state);
        return dataSource;
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(rowValue, newData, dataSource, keys) {
        return this.insert(rowValue, newData, dataSource, keys, "after");
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(rowValue, newData, dataSource, keys) {
        return this.insert(rowValue, newData, dataSource, keys, "before");
      }
    }, {
      key: "insert",
      value: function insert(rowValue, newData, dataSource, keys, type) {
        var state = this.treeDataMap.get(rowValue);
        if (!this.validateDataExist(state, rowValue)) return dataSource;
        var newRowValue = get_1(newData, keys.rowKey);
        var mapState = this.treeDataMap.get(newRowValue);
        if (!this.validateDataDoubleExist(mapState, newRowValue)) return dataSource;
        var rowIndex = type === "after" ? state.rowIndex + 1 : state.rowIndex;
        var newState = {
          id: newRowValue,
          row: newData,
          rowIndex: rowIndex,
          level: state.level,
          expanded: false,
          expandChildrenLength: 0,
          disabled: false,
          path: state.path.slice(0, -1),
          parent: state.parent
        };
        newState.path = newState.path.concat(newState);
        var dataIndex = type === "after" ? state.rowIndex + (state.expandChildrenLength + 1) : state.rowIndex;
        dataSource.splice(dataIndex, 0, newData);
        var distance = type === "after" ? 1 : 0;

        if (state.parent) {
          var childrenIndex = state.parent.row[keys.childrenKey].findIndex(function (t) {
            return rowValue === get_1(t, keys.rowKey);
          });
          state.parent.row[keys.childrenKey].splice(childrenIndex + distance, 0, newData);
          updateRowExpandLength(this.treeDataMap, state.parent.row, 1, "insert", keys);
        }

        this.treeDataMap.set(newRowValue, newState);
        updateRowIndex(this.treeDataMap, dataSource, {
          rowKey: keys.rowKey,
          minRowIndex: state.rowIndex + 1,
          type: "add"
        });
        return dataSource;
      }
    }, {
      key: "swapData",
      value: function swapData(dataSource, params, keys) {
        var startIndex = params.currentIndex;
        var endIndex = params.targetIndex;
        if (startIndex === endIndex) return {
          dataSource: dataSource,
          result: true
        };
        var startRowValue = get_1(params.current, keys.rowKey);
        var endRowValue = get_1(params.target, keys.rowKey);
        var startState = this.treeDataMap.get(startRowValue);
        var endState = this.treeDataMap.get(endRowValue);

        if (startState.level !== endState.level) {
          return {
            dataSource: dataSource,
            result: false,
            code: TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL.code,
            reason: TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL.reason
          };
        }

        var startLastIndex = startIndex + startState.expandChildrenLength + 1;
        var endLastIndex = endIndex + endState.expandChildrenLength + 1;
        var startRowList = dataSource.slice(startIndex, startLastIndex);
        var endRowList = dataSource.slice(endIndex, endLastIndex);

        if (startIndex > endIndex) {
          var middleRowList = dataSource.slice(endLastIndex, startIndex);
          var allSwapList = startRowList.concat(endRowList, middleRowList);
          dataSource.splice(endIndex, allSwapList.length);
          dataSource.splice.apply(dataSource, [endIndex, 0].concat(_toConsumableArray(allSwapList)));
          updateRowIndex(this.treeDataMap, dataSource, {
            rowKey: keys.rowKey,
            minRowIndex: endIndex,
            maxRowIndex: startLastIndex
          });
        } else {
          var _middleRowList = dataSource.slice(startLastIndex, endIndex);

          var _allSwapList = _middleRowList.concat(endRowList, startRowList);

          dataSource.splice(startIndex, _allSwapList.length);
          dataSource.splice.apply(dataSource, [startIndex, 0].concat(_toConsumableArray(_allSwapList)));
          updateRowIndex(this.treeDataMap, dataSource, {
            rowKey: keys.rowKey,
            minRowIndex: startIndex,
            maxRowIndex: endLastIndex
          });
        }

        if (startState.parent) {
          var children = startState.parent.row[keys.childrenKey];
          var count = 0;

          for (var i = 0, len = children.length; i < len; i++) {
            if (get_1(children[i], keys.rowKey) === startRowValue) {
              children[i] = params.target;
              count += 1;
            }

            if (get_1(children[i], keys.rowKey) === endRowValue) {
              children[i] = params.current;
              count += 1;
            }

            if (count >= 2) break;
          }
        }

        return {
          dataSource: dataSource,
          result: true
        };
      }
    }, {
      key: "expandAll",
      value: function expandAll(dataSource, keys) {
        var _this = this;

        this.expandAllRowIndex = 0;

        var expandLoop = function expandLoop(dataSource2, keys2) {
          var newData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
          var parentExpanded = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
          var parent = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

          for (var i = 0, len = dataSource2.length; i < len; i++) {
            var item = dataSource2[i];
            var rowValue = get_1(item, keys2.rowKey);

            var state = _this.treeDataMap.get(rowValue);

            var children = get_1(item, keys2.childrenKey);
            var originalExpanded = state.expanded;
            state.rowIndex = _this.expandAllRowIndex;
            state.expanded = true;
            state.expandChildrenLength = (children === null || children === void 0 ? void 0 : children.length) || 0;
            _this.expandAllRowIndex += 1;

            if (!parentExpanded) {
              newData.push(item);
            }

            _this.treeDataMap.set(rowValue, state);

            if (children !== null && children !== void 0 && children.length && !originalExpanded) {
              var tmpParent = parent;

              while ((_tmpParent = tmpParent) !== null && _tmpParent !== void 0 && _tmpParent.row) {
                var _tmpParent;

                tmpParent.expandChildrenLength += children.length;

                _this.treeDataMap.set(tmpParent.id, tmpParent);

                tmpParent = tmpParent.parent;
              }

              expandLoop(children, keys2, newData, originalExpanded, state);
            }
          }

          return newData;
        };

        return expandLoop(dataSource, keys);
      }
    }, {
      key: "foldAll",
      value: function foldAll(dataSource, keys) {
        var newData = [];

        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = get_1(item, keys.rowKey);
          var state = this.treeDataMap.get(rowValue);
          state.rowIndex = state.level === 0 ? i : -1;
          state.expanded = false;
          state.expandChildrenLength = 0;

          if (state.level === 0) {
            newData.push(item);
          }

          var children = get_1(item, keys.childrenKey);

          if (children !== null && children !== void 0 && children.length) {
            this.foldAll(children, keys);
          }
        }

        return newData;
      }
    }, {
      key: "getTreeNode",
      value: function getTreeNode(dataSource, keys) {
        var treeData = [];

        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = get_1(item, keys.rowKey);
          var state = this.treeDataMap.get(rowValue);

          if (state.level === 0) {
            treeData.push(item);
          }
        }

        return treeData;
      }
    }, {
      key: "initialTreeDataMap",
      value: function initialTreeDataMap(treeDataMap, dataSource, column, keys) {
        var level = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var parent = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = get_1(item, keys.rowKey);

          if (rowValue === void 0) {
            log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
            return;
          }

          var children = get_1(item, keys.childrenKey);
          var state = {
            id: rowValue,
            row: item,
            rowIndex: level === 0 ? i : -1,
            level: level,
            expanded: false,
            expandChildrenLength: 0,
            disabled: isRowSelectedDisabled(column, item, i),
            parent: parent
          };
          state.path = parent ? parent.path.concat(state) : [state];
          treeDataMap.set(rowValue, state);

          if (children !== null && children !== void 0 && children.length) {
            this.initialTreeDataMap(treeDataMap, children, column, keys, level + 1, state);
          }
        }
      }
    }, {
      key: "updateDisabledState",
      value: function updateDisabledState(dataSource, column, keys) {
        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = get_1(item, keys.rowKey);

          if (rowValue === void 0) {
            log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
            return;
          }

          var state = this.treeDataMap.get(rowValue);
          state.disabled = isRowSelectedDisabled(column, item, i);
          this.treeDataMap.set(rowValue, state);
          var children = get_1(item, keys.childrenKey);

          if (children !== null && children !== void 0 && children.length) {
            this.updateDisabledState(children, column, keys);
          }
        }
      }
    }, {
      key: "validateDataExist",
      value: function validateDataExist(state, rowValue) {
        if (!state) {
          console.warn("TDesign Table Warn: ".concat(rowValue, " does not exist."));
          return false;
        }

        return true;
      }
    }, {
      key: "validateDataDoubleExist",
      value: function validateDataDoubleExist(state, rowValue) {
        if (state) {
          console.warn("TDesign Table Warn: Duplicated Key. ".concat(rowValue, " already exists."));
          return false;
        }

        return true;
      }
    }]);

    return TableTreeStore;
  }();
  function updateRowExpandLength(treeDataMap, row, distance, type, keys) {
    var tmp = row;

    while (tmp) {
      var _state$parent;

      var state = treeDataMap.get(get_1(tmp, keys.rowKey));
      var expandLen = (state.expandChildrenLength || 0) + distance;
      state.expandChildrenLength = Math.max(0, expandLen);
      tmp = state === null || state === void 0 ? void 0 : (_state$parent = state.parent) === null || _state$parent === void 0 ? void 0 : _state$parent.row;
    }

    if (type === "fold") {
      clearRowExpandLength(treeDataMap, row, keys);
    }
  }
  function clearRowExpandLength(treeDataMap, row, keys) {
    var children = get_1(row, keys.childrenKey);

    if (children !== null && children !== void 0 && children.length) {
      children.forEach(function (item) {
        var state = treeDataMap.get(get_1(item, keys.rowKey));
        if (!state) return;
        state.expandChildrenLength = 0;
        clearRowExpandLength(treeDataMap, state.row, keys);
      });
    }
  }
  function updateChildrenRowState(treeDataMap, rowState, expanded, keys) {
    var row = rowState.row,
        rowIndex = rowState.rowIndex;
    var childrenNodes = get_1(row, keys.childrenKey);
    childrenNodes.forEach(function (item, kidRowIndex) {
      var rowValue = get_1(item, keys.rowKey);
      var index = expanded ? rowIndex + 1 + kidRowIndex : -1;
      var curState = treeDataMap.get(rowValue);

      var newState = _objectSpread$b(_objectSpread$b({}, curState), {}, {
        row: item,
        rowIndex: index,
        expanded: false,
        parent: rowState
      });

      treeDataMap.set(rowValue, newState);

      if (!expanded) {
        var children = get_1(item, keys.childrenKey);

        if (children !== null && children !== void 0 && children.length) {
          updateChildrenRowState(treeDataMap, _objectSpread$b(_objectSpread$b({}, newState), {}, {
            rowIndex: -1,
            expanded: false
          }), expanded, keys);
        }
      }
    });
  }
  function updateRowData(data, key, newData, keys) {
    for (var i = 0, len = data.length; i < len; i++) {
      var item = data[i];

      if (get_1(item, keys.rowKey) === key) {
        data[i] = newData;
        return;
      }

      var children = get_1(item, keys.childrenKey) || [];

      if (children !== null && children !== void 0 && children.length) {
        updateRowData(children, key, newData, keys);
      }
    }
  }
  function updateRowIndex(treeDataMap, dataSource, extra) {
    var start = extra.minRowIndex || 0;
    var end = extra.maxRowIndex || dataSource.length;

    for (var rowIndex = start; rowIndex < end; rowIndex++) {
      var item = dataSource[rowIndex];
      var state = treeDataMap.get(get_1(item, extra.rowKey));

      if (!state) {
        log.warn("Table", "tree map went wrong");
      }

      state.rowIndex = rowIndex;
    }
  }

  function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$a(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useTreeData(props, context) {
    var _toRefs = vue.toRefs(props),
        data = _toRefs.data,
        columns = _toRefs.columns;

    var _useConfig = useConfig("table"),
        t = _useConfig.t,
        global = _useConfig.global;

    var store = vue.ref(new TableTreeStore());
    var treeNodeCol = vue.ref();
    var dataSource = vue.ref([]);

    var _useClassName = useClassName(),
        tableTreeClasses = _useClassName.tableTreeClasses;

    var renderTNode = useTNodeDefault();
    var rowDataKeys = vue.computed(function () {
      var _props$tree;

      return {
        rowKey: props.rowKey || "id",
        childrenKey: ((_props$tree = props.tree) === null || _props$tree === void 0 ? void 0 : _props$tree.childrenKey) || "children"
      };
    });
    var checkedColumn = vue.computed(function () {
      return columns.value.find(function (col) {
        return col.colKey === "row-select";
      });
    });
    vue.watch(checkedColumn, function (column) {
      if (!store.value) return;
      store.value.updateDisabledState(dataSource.value, column, rowDataKeys.value);
    });
    var foldIcon = vue.computed(function () {
      var params = {
        type: "fold"
      };

      var defaultFoldIcon = t(global.value.treeExpandAndFoldIcon, vue.h, params) || vue.createVNode(minusRectangle, null, null);

      return renderTNode("treeExpandAndFoldIcon", {
        defaultNode: defaultFoldIcon,
        params: params
      });
    });
    var expandIcon = vue.computed(function () {
      var params = {
        type: "expand"
      };

      var defaultExpandIcon = t(global.value.treeExpandAndFoldIcon, vue.h, params) || vue.createVNode(addRectangle, null, null);

      return renderTNode("treeExpandAndFoldIcon", {
        defaultNode: defaultExpandIcon,
        params: params
      });
    });
    vue.watch([data], function (_ref) {
      var _props$tree2;

      var _ref2 = _slicedToArray(_ref, 1),
          data2 = _ref2[0];

      if (!data2) return;

      if (!props.tree || !Object.keys(props.tree).length) {
        dataSource.value = data2;
        return;
      }

      var newVal = cloneDeep_1(data2);
      store.value.initialTreeStore(newVal, props.columns, rowDataKeys.value);

      if ((_props$tree2 = props.tree) !== null && _props$tree2 !== void 0 && _props$tree2.defaultExpandAll) {
        newVal = store.value.expandAll(newVal, rowDataKeys.value);
      }

      dataSource.value = newVal;
    }, {
      immediate: true
    });
    vue.onUnmounted(function () {
      var _store$value$treeData;

      if (!props.tree || !Object.keys(props.tree).length) return;
      (_store$value$treeData = store.value.treeDataMap) === null || _store$value$treeData === void 0 ? void 0 : _store$value$treeData.clear();
      store.value = null;
    });
    vue.watch([columns], function () {
      treeNodeCol.value = getTreeNodeColumnCol();
    }, {
      immediate: true
    });

    function getTreeNodeStyle(level) {
      var _props$tree3;

      if (level === void 0) return;
      var indent = ((_props$tree3 = props.tree) === null || _props$tree3 === void 0 ? void 0 : _props$tree3.indent) || 24;
      return {
        paddingLeft: "".concat(level * indent || 1, "px")
      };
    }

    function toggleExpandData(p, trigger) {
      var _store$value, _store$value$treeData2, _props$onTreeExpandCh;

      dataSource.value = _toConsumableArray(store.value.toggleExpandData(p, dataSource.value, rowDataKeys.value));
      var rowValue = get_1(p.row, rowDataKeys.value.rowKey);
      var rowState = (_store$value = store.value) === null || _store$value === void 0 ? void 0 : (_store$value$treeData2 = _store$value.treeDataMap) === null || _store$value$treeData2 === void 0 ? void 0 : _store$value$treeData2.get(rowValue);
      (_props$onTreeExpandCh = props.onTreeExpandChange) === null || _props$onTreeExpandCh === void 0 ? void 0 : _props$onTreeExpandCh.call(props, {
        row: p.row,
        rowIndex: p.rowIndex,
        rowState: rowState,
        trigger: trigger
      });
    }

    function getTreeNodeColumnCol() {
      var _props$tree4;

      var columns2 = props.columns;
      var treeNodeColumnIndex = ((_props$tree4 = props.tree) === null || _props$tree4 === void 0 ? void 0 : _props$tree4.treeNodeColumnIndex) || 0;

      while ((_columns2$treeNodeCol = columns2[treeNodeColumnIndex]) !== null && _columns2$treeNodeCol !== void 0 && _columns2$treeNodeCol.type || ((_columns2$treeNodeCol2 = columns2[treeNodeColumnIndex]) === null || _columns2$treeNodeCol2 === void 0 ? void 0 : _columns2$treeNodeCol2.colKey) === "__EXPAND_ROW_ICON_COLUMN__") {
        var _columns2$treeNodeCol, _columns2$treeNodeCol2;

        treeNodeColumnIndex += 1;
      }

      return columns2[treeNodeColumnIndex];
    }

    function formatTreeColumn(col) {
      if (!props.tree || !Object.keys(props.tree).length || col.colKey !== treeNodeCol.value.colKey) return col;

      var newCol = _objectSpread$a({}, treeNodeCol.value);

      newCol.cell = function (h2, p) {
        var cellInfo = renderCell(_objectSpread$a(_objectSpread$a({}, p), {}, {
          col: _objectSpread$a({}, treeNodeCol.value)
        }), context.slots);
        var currentState = store.value.treeDataMap.get(get_1(p.row, rowDataKeys.value.rowKey));
        var colStyle = getTreeNodeStyle(currentState === null || currentState === void 0 ? void 0 : currentState.level);

        var classes = _defineProperty$3({}, tableTreeClasses.inlineCol, !!col.ellipsis);

        var childrenNodes = get_1(p.row, rowDataKeys.value.childrenKey);

        if (childrenNodes && childrenNodes instanceof Array) {
          var _store$value$treeData3;

          var iconNode = (_store$value$treeData3 = store.value.treeDataMap.get(get_1(p.row, rowDataKeys.value.rowKey))) !== null && _store$value$treeData3 !== void 0 && _store$value$treeData3.expanded ? foldIcon.value : expandIcon.value;
          return vue.createVNode("div", {
            "class": [tableTreeClasses.col, classes],
            "style": colStyle
          }, [!!childrenNodes.length && vue.createVNode("span", {
            "class": tableTreeClasses.icon,
            "onClick": function onClick() {
              return toggleExpandData(p, "expand-fold-icon");
            }
          }, [iconNode]), cellInfo]);
        }

        return vue.createVNode("div", {
          "style": colStyle,
          "class": classes
        }, [cellInfo]);
      };

      if (newCol.ellipsis === true) {
        newCol.ellipsis = function (h2, p) {
          return renderCell(_objectSpread$a(_objectSpread$a({}, p), {}, {
            col: _objectSpread$a({}, treeNodeCol.value)
          }), context.slots);
        };
      }

      return newCol;
    }

    function setData(key, newRowData) {
      var rowIndex = store.value.updateData(key, newRowData, dataSource.value, rowDataKeys.value);

      var newData = _toConsumableArray(dataSource.value);

      newData[rowIndex] = newRowData;
      dataSource.value = newData;
    }

    function getData(key) {
      return store.value.getData(key);
    }

    function remove(key) {
      dataSource.value = _toConsumableArray(store.value.remove(key, dataSource.value, rowDataKeys.value));
    }

    function appendTo() {
      var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var newData = arguments.length > 1 ? arguments[1] : undefined;

      if (!key) {
        dataSource.value = store.value.appendToRoot(newData, dataSource.value, rowDataKeys.value);
        return;
      }

      dataSource.value = _toConsumableArray(store.value.appendTo(key, newData, dataSource.value, rowDataKeys.value));
    }

    function insertAfter(rowValue, newData) {
      dataSource.value = _toConsumableArray(store.value.insertAfter(rowValue, newData, dataSource.value, rowDataKeys.value));
    }

    function insertBefore(rowValue, newData) {
      dataSource.value = _toConsumableArray(store.value.insertBefore(rowValue, newData, dataSource.value, rowDataKeys.value));
    }

    function expandAll() {
      dataSource.value = _toConsumableArray(store.value.expandAll(dataSource.value, rowDataKeys.value));
    }

    function foldAll() {
      dataSource.value = _toConsumableArray(store.value.foldAll(dataSource.value, rowDataKeys.value));
    }

    function swapData(params) {
      var r = store.value.swapData(dataSource.value, params, rowDataKeys.value);

      if (r.result) {
        dataSource.value = _toConsumableArray(r.dataSource);
      } else {
        var _props$onAbnormalDrag;

        var params2 = {
          code: r.code,
          reason: r.reason
        };
        (_props$onAbnormalDrag = props.onAbnormalDragSort) === null || _props$onAbnormalDrag === void 0 ? void 0 : _props$onAbnormalDrag.call(props, params2);
      }
    }

    function getTreeNode() {
      return store.value.getTreeNode(dataSource.value, rowDataKeys.value);
    }

    return {
      store: store,
      rowDataKeys: rowDataKeys,
      dataSource: dataSource,
      swapData: swapData,
      setData: setData,
      getData: getData,
      remove: remove,
      appendTo: appendTo,
      insertAfter: insertAfter,
      insertBefore: insertBefore,
      formatTreeColumn: formatTreeColumn,
      toggleExpandData: toggleExpandData,
      expandAll: expandAll,
      foldAll: foldAll,
      getTreeNode: getTreeNode
    };
  }

  function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$9(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var childrenMap = /* @__PURE__ */new Map();
  function getChildrenData(treeDataMap, data, childrenKey, rowKey, r) {
    if (childrenMap.get(data)) return childrenMap.get(data);
    var result = r || {
      allChildren: [],
      allChildrenKeys: []
    };
    var children = get_1(data, childrenKey);
    if (!children || !children.length) return result;
    var selectableChildren = children.filter(function (item) {
      var _treeDataMap$get;

      return !((_treeDataMap$get = treeDataMap.get(get_1(item, rowKey))) !== null && _treeDataMap$get !== void 0 && _treeDataMap$get.disabled);
    });
    result.allChildren = result.allChildren.concat(selectableChildren);
    var childrenKeys = selectableChildren.map(function (item) {
      return get_1(item, rowKey);
    });
    result.allChildrenKeys = result.allChildrenKeys.concat(childrenKeys);

    for (var i = 0, len = children.length; i < len; i++) {
      var tItem = children[i];
      var c = get_1(tItem, childrenKey);

      if (c !== null && c !== void 0 && c.length) {
        var nextLevelData = getChildrenData(treeDataMap, tItem, childrenKey, rowKey, result);
        result.allChildren = result.allChildren.concat(nextLevelData.allChildren);
        result.allChildrenKeys = result.allChildrenKeys.concat(nextLevelData.allChildrenKeys);
      }
    }

    return result;
  }
  function removeChildrenKeys(p, r) {
    var selectedRowKeys = p.selectedRowKeys,
        removeKeys = p.removeKeys;
    var result = r || {
      data: [],
      keys: []
    };

    for (var i = 0, len = selectedRowKeys.length; i < len; i++) {
      var key = selectedRowKeys[i];

      if (!removeKeys.includes(key)) {
        result.keys.push(key);
      }
    }

    return result;
  }
  function getRowDataByKeys(p) {
    var treeDataMap = p.treeDataMap,
        selectedRowKeys = p.selectedRowKeys;
    var result = [];

    for (var i = 0, len = selectedRowKeys.length; i < len; i++) {
      var key = selectedRowKeys[i];
      result.push(treeDataMap.get(key));
    }

    return result;
  }
  function useTreeSelect(props, treeDataMap) {
    var _toRefs = vue.toRefs(props),
        selectedRowKeys = _toRefs.selectedRowKeys;

    var _useDefaultValue = useDefaultValue(selectedRowKeys, props.defaultSelectedRowKeys, props.onSelectChange, "selectedRowKeys"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2);
        _useDefaultValue2[0];
        var setTSelectedRowKeys = _useDefaultValue2[1];

    var rowDataKeys = vue.computed(function () {
      var _props$tree;

      return {
        rowKey: props.rowKey || "id",
        childrenKey: ((_props$tree = props.tree) === null || _props$tree === void 0 ? void 0 : _props$tree.childrenKey) || "children"
      };
    });

    function onInnerSelectChange(rowKeys, extraData) {
      if (extraData.currentRowKey === "CHECK_ALL_BOX") {
        handleSelectAll(extraData);
      } else {
        handleSelect(rowKeys, extraData);
      }
    }

    function handleSelectAll(extraData) {
      var newRowKeys = [];
      var newRowData = [];

      if (extraData.type === "check") {
        var arr = _toConsumableArray(treeDataMap.value.values());

        for (var i = 0, len = arr.length; i < len; i++) {
          var item = arr[i];

          if (!item.disabled) {
            newRowData.push(item.row);
            newRowKeys.push(get_1(item.row, rowDataKeys.value.rowKey));
          }
        }
      }

      var newExtraData = _objectSpread$9(_objectSpread$9({}, extraData), {}, {
        selectedRowData: newRowData || []
      });

      setTSelectedRowKeys(newRowKeys, newExtraData);
    }

    function handleSelect(rowKeys, extraData) {
      var newRowKeys = _toConsumableArray(rowKeys);

      if ((props === null || props === void 0 ? void 0 : props.tree.checkStrictly) === false) {
        if ((extraData === null || extraData === void 0 ? void 0 : extraData.type) === "check") {
          var result = getChildrenData(treeDataMap.value, extraData.currentRowData, rowDataKeys.value.childrenKey, rowDataKeys.value.rowKey);
          var allChildrenKeys = result.allChildrenKeys;
          childrenMap.set(extraData.currentRowData, result);
          newRowKeys = _toConsumableArray(new Set(newRowKeys.concat(allChildrenKeys)));
        } else if ((extraData === null || extraData === void 0 ? void 0 : extraData.type) === "uncheck") {
          var children = getChildrenData(treeDataMap.value, extraData.currentRowData, rowDataKeys.value.childrenKey, rowDataKeys.value.rowKey);

          var _result = removeChildrenKeys({
            selectedRowKeys: rowKeys,
            removeKeys: children.allChildrenKeys
          });

          newRowKeys = _result.keys;
        }
      }

      var newRowData = getRowDataByKeys({
        treeDataMap: treeDataMap.value,
        selectedRowKeys: newRowKeys
      });

      var newExtraData = _objectSpread$9(_objectSpread$9({}, extraData), {}, {
        selectedRowData: newRowData
      });

      setTSelectedRowKeys(newRowKeys, newExtraData);
    }

    return {
      onInnerSelectChange: onInnerSelectChange
    };
  }

  var _excluded = ["store", "dataSource", "formatTreeColumn", "swapData"];

  function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$8(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _EnhancedTable = vue.defineComponent({
    name: "TEnhancedTable",
    props: _objectSpread$8(_objectSpread$8(_objectSpread$8({}, baseTableProps), primaryTableProps), enhancedTableProps),
    setup: function setup(props, context) {
      var _useTreeData = useTreeData(props, context),
          store = _useTreeData.store,
          dataSource = _useTreeData.dataSource,
          formatTreeColumn = _useTreeData.formatTreeColumn,
          swapData = _useTreeData.swapData,
          treeInstanceFunctions = _objectWithoutProperties$1(_useTreeData, _excluded);

      var treeDataMap = vue.ref(store.value.treeDataMap);

      var _useTreeSelect = useTreeSelect(props, treeDataMap),
          onInnerSelectChange = _useTreeSelect.onInnerSelectChange;

      var getColumns = function getColumns(columns) {
        var arr = [];

        for (var i = 0, len = columns.length; i < len; i++) {
          var _item$children, _item$children2;

          var item = _objectSpread$8({}, columns[i]);

          item = formatTreeColumn(item);

          if ((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
            item.children = getColumns(item.children);
          }

          if (!item.children || (_item$children2 = item.children) !== null && _item$children2 !== void 0 && _item$children2.length) {
            arr.push(item);
          }
        }

        return arr;
      };

      var tColumns = vue.computed(function () {
        var isTreeData = !props.tree || !Object.keys(props.tree).length;
        return isTreeData ? props.columns : getColumns(props.columns);
      });

      var onDragSortChange = function onDragSortChange(params) {
        var _props$onDragSort;

        if (props.beforeDragSort && !props.beforeDragSort(params)) return;
        swapData({
          current: params.current,
          target: params.target,
          currentIndex: params.currentIndex,
          targetIndex: params.targetIndex
        });
        (_props$onDragSort = props.onDragSort) === null || _props$onDragSort === void 0 ? void 0 : _props$onDragSort.call(props, params);
      };

      return _objectSpread$8({
        store: store,
        dataSource: dataSource,
        tColumns: tColumns,
        onDragSortChange: onDragSortChange,
        onInnerSelectChange: onInnerSelectChange
      }, treeInstanceFunctions);
    },
    render: function render() {
      var props = _objectSpread$8(_objectSpread$8({}, this.$props), {}, {
        data: this.dataSource,
        columns: this.tColumns,
        disableDataPage: Boolean(this.tree && Object.keys(this.tree).length),
        onSelectChange: this.onInnerSelectChange,
        onDragSort: this.onDragSortChange
      });

      return vue.createVNode(_PrimaryTable, vue.mergeProps(props, this.$attrs), this.$slots);
    }
  });

  var BaseTable = withInstall(_BaseTable);
  var PrimaryTable = withInstall(_PrimaryTable);
  var EnhancedTable = withInstall(_EnhancedTable);
  var table = cloneDeep_1(_PrimaryTable);
  var Table = withInstall(table, "TTable");

  var props$6 = {
    borderless: Boolean,
    defaultExpandAll: Boolean,
    disabled: Boolean,
    expandIcon: {
      type: [Boolean, Function],
      "default": true
    },
    expandIconPlacement: {
      type: String,
      "default": "left",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right"].includes(val);
      }
    },
    expandMutex: Boolean,
    expandOnRowClick: {
      type: Boolean,
      "default": true
    },
    value: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array
    },
    onChange: Function
  };

  var _Collapse = vue.defineComponent({
    name: "TCollapse",
    props: props$6,
    setup: function setup(props2, context) {
      var componentName = usePrefixClass("collapse");
      var borderlessClass = usePrefixClass("-border-less");
      var renderTNodeJSX = useTNodeJSX();

      var _toRefs = vue.toRefs(props2),
          value = _toRefs.value,
          expandMutex = _toRefs.expandMutex,
          borderless = _toRefs.borderless,
          modelValue = _toRefs.modelValue;

      var _useVModel = useVModel(value, modelValue, props2.defaultValue, props2.onChange),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          collapseValue = _useVModel2[0],
          setCollapseValue = _useVModel2[1];

      var updateCollapseValue = function updateCollapseValue(value2) {
        var newValue = [].concat(collapseValue.value || []);
        var index = newValue.indexOf(value2);

        if (index >= 0) {
          newValue.splice(index, 1);
        } else if (expandMutex.value) {
          newValue = [value2];
        } else {
          newValue.push(value2);
        }

        setCollapseValue(newValue);
      };

      var classes = vue.computed(function () {
        return [componentName.value, _defineProperty$3({}, borderlessClass.value, !!borderless.value)];
      });

      var getUniqId = function () {
        var index = 0;
        return function () {
          return index++;
        };
      }();

      vue.provide("collapseValue", collapseValue);
      vue.provide("updateCollapseValue", updateCollapseValue);
      vue.provide("collapseProps", vue.toRefs(props2));
      vue.provide("getUniqId", getUniqId);
      return function () {
        var nodes = renderTNodeJSX("default");
        return vue.createVNode("div", {
          "class": classes.value
        }, [nodes]);
      };
    }
  });

  var props$5 = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    destroyOnCollapse: Boolean,
    disabled: {
      type: Boolean,
      "default": void 0
    },
    expandIcon: {
      type: [Boolean, Function],
      "default": void 0
    },
    header: {
      type: [String, Function]
    },
    headerRightContent: {
      type: [String, Function]
    },
    value: {
      type: [String, Number]
    }
  };

  function useCollapseAnimation() {
    var beforeEnter = function beforeEnter(el) {
      el.dataset.oldPaddingTop = el.style.paddingTop;
      el.dataset.oldPaddingBottom = el.style.paddingBottom;
      el.style.height = "0";
      el.style.paddingTop = "0";
      el.style.paddingBottom = "0";
    };

    var enter = function enter(el) {
      el.dataset.oldOverflow = el.style.overflow;
      el.style.height = "".concat(el.scrollHeight, "px");
      el.style.paddingTop = el.dataset.oldPaddingTop;
      el.style.paddingBottom = el.dataset.oldPaddingBottom;
      el.style.overflow = "hidden";
    };

    var afterEnter = function afterEnter(el) {
      el.style.height = "";
      el.style.overflow = el.dataset.oldOverflow;
    };

    var beforeLeave = function beforeLeave(el) {
      el.dataset.oldPaddingTop = el.style.paddingTop;
      el.dataset.oldPaddingBottom = el.style.paddingBottom;
      el.dataset.oldOverflow = el.style.overflow;
      el.style.height = "".concat(el.scrollHeight, "px");
      el.style.overflow = "hidden";
    };

    var leave = function leave(el) {
      if (el.scrollHeight !== 0) {
        el.style.height = "0";
        el.style.paddingTop = "0";
        el.style.paddingBottom = "0";
      }
    };

    var afterLeave = function afterLeave(el) {
      el.style.height = "";
      el.style.overflow = el.dataset.oldOverflow;
      el.style.paddingTop = el.dataset.oldPaddingTop;
      el.style.paddingBottom = el.dataset.oldPaddingBottom;
    };

    return {
      beforeEnter: beforeEnter,
      enter: enter,
      afterEnter: afterEnter,
      beforeLeave: beforeLeave,
      leave: leave,
      afterLeave: afterLeave
    };
  }

  function _isSlot$1(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var _CollapsePanel = vue.defineComponent({
    name: "TCollapsePanel",
    props: props$5,
    setup: function setup(props2, context) {
      var renderTNodeJSX = useTNodeJSX();
      var componentName = usePrefixClass("collapse-panel");
      var disableClass = usePrefixClass("is-disabled");
      var clickableClass = usePrefixClass("is-clickable");
      var transitionClass = usePrefixClass("slide-down");

      var _toRefs = vue.toRefs(props2),
          value = _toRefs.value,
          disabled = _toRefs.disabled,
          destroyOnCollapse = _toRefs.destroyOnCollapse,
          expandIcon = _toRefs.expandIcon;

      var collapseValue = vue.inject("collapseValue");
      var updateCollapseValue = vue.inject("updateCollapseValue");
      var getUniqId = vue.inject("getUniqId", function () {
        return void 0;
      }, false);

      var _inject = vue.inject("collapseProps"),
          defaultExpandAll = _inject.defaultExpandAll,
          disableAll = _inject.disabled,
          expandIconPlacement = _inject.expandIconPlacement,
          expandOnRowClick = _inject.expandOnRowClick,
          expandIconAll = _inject.expandIcon;

      var innerValue = value.value || getUniqId();
      var showExpandIcon = vue.computed(function () {
        return expandIcon.value === void 0 ? expandIconAll.value : expandIcon.value;
      });

      if (defaultExpandAll.value) {
        updateCollapseValue(innerValue);
      }

      var _useCollapseAnimation = useCollapseAnimation(),
          beforeEnter = _useCollapseAnimation.beforeEnter,
          enter = _useCollapseAnimation.enter,
          afterEnter = _useCollapseAnimation.afterEnter,
          beforeLeave = _useCollapseAnimation.beforeLeave,
          leave = _useCollapseAnimation.leave,
          afterLeave = _useCollapseAnimation.afterLeave;

      var headRef = vue.ref();
      var isDisabled = vue.computed(function () {
        return disabled.value || disableAll.value;
      });
      var isActive = vue.computed(function () {
        return collapseValue.value instanceof Array ? collapseValue.value.includes(innerValue) : collapseValue.value === innerValue;
      });
      var classes = vue.computed(function () {
        return [componentName.value, _defineProperty$3({}, disableClass.value, isDisabled.value)];
      });

      var handleClick = function handleClick(e) {
        var canExpand = expandOnRowClick.value && e.target === headRef.value || e.target.getAttribute("name") === "arrow";

        if (canExpand && !isDisabled.value) {
          updateCollapseValue(innerValue);
        }
      };

      var renderIcon = function renderIcon(direction) {
        return vue.createVNode(FakeArrow, {
          "name": "arrow",
          "isActive": isActive.value,
          "overlayClassName": "".concat(componentName.value, "__icon ").concat(componentName.value, "__icon--").concat(direction)
        }, null);
      };

      var renderBlank = function renderBlank() {
        return vue.createVNode("div", {
          "class": "".concat(componentName.value, "__header--blank")
        }, null);
      };

      var renderHeader = function renderHeader() {
        var cls = ["".concat(componentName.value, "__header"), _defineProperty$3({}, clickableClass.value, expandOnRowClick.value && !isDisabled.value)];
        return vue.createVNode("div", {
          "ref": headRef,
          "class": cls,
          "onClick": handleClick
        }, [showExpandIcon.value && expandIconPlacement.value === "left" ? renderIcon(expandIconPlacement.value) : null, renderTNodeJSX("header"), renderBlank(), renderTNodeJSX("headerRightContent"), showExpandIcon.value && expandIconPlacement.value === "right" ? renderIcon(expandIconPlacement.value) : null]);
      };

      var renderBodyByNormal = function renderBodyByNormal() {
        return vue.withDirectives(vue.createVNode("div", {
          "class": "".concat(componentName.value, "__body")
        }, [vue.createVNode("div", {
          "class": "".concat(componentName.value, "__content")
        }, [renderTNodeJSX("default")])]), [[vue.vShow, isActive.value]]);
      };

      var renderBodyDestroyOnCollapse = function renderBodyDestroyOnCollapse() {
        return isActive.value ? vue.createVNode("div", {
          "class": "".concat(componentName.value, "__body")
        }, [vue.createVNode("div", {
          "class": "".concat(componentName.value, "__content")
        }, [renderTNodeJSX("default")])]) : null;
      };

      var renderBody = function renderBody() {
        return destroyOnCollapse.value ? renderBodyDestroyOnCollapse() : renderBodyByNormal();
      };

      return function () {
        var _slot;

        return vue.createVNode("div", {
          "class": classes.value
        }, [vue.createVNode("div", {
          "class": "".concat(componentName.value, "__wrapper")
        }, [renderHeader(), vue.createVNode(vue.Transition, {
          "name": transitionClass.value,
          "onBeforeEnter": beforeEnter,
          "onEnter": enter,
          "onAfterEnter": afterEnter,
          "onBeforeLeave": beforeLeave,
          "onLeave": leave,
          "onAfterLeave": afterLeave
        }, _isSlot$1(_slot = renderBody()) ? _slot : {
          "default": function _default() {
            return [_slot];
          }
        })])]);
      };
    }
  });

  var Collapse = withInstall(_Collapse);
  var CollapsePanel = withInstall(_CollapsePanel);

  var props$4 = {
    close: {
      type: [String, Boolean, Function],
      "default": false
    },
    "default": {
      type: [String, Function]
    },
    icon: {
      type: Function
    },
    maxLine: {
      type: Number,
      "default": 0
    },
    message: {
      type: [String, Function]
    },
    operation: {
      type: Function
    },
    theme: {
      type: String,
      "default": "info",
      validator: function validator(val) {
        return ["success", "info", "warning", "error"].includes(val);
      }
    },
    title: {
      type: [String, Function]
    },
    onClose: Function,
    onClosed: Function
  };

  var _Alert = vue.defineComponent({
    name: "TAlert",
    props: props$4,
    setup: function setup(props2) {
      var _useConfig = useConfig("alert"),
          global = _useConfig.global,
          classPrefix = _useConfig.classPrefix;

      var COMPONENT_NAME = usePrefixClass("alert");
      var renderTNodeJSX = useTNodeJSX();
      var renderIconTNode = useIcon();
      var ele = vue.ref(null);
      var description = vue.ref(null);
      var descHeight = vue.ref(0);
      var visible = vue.ref(true);
      var collapsed = vue.ref(true);

      var renderIcon = function renderIcon() {
        var Component = {
          info: infoCircleFilled,
          success: checkCircleFilled,
          warning: errorCircleFilled,
          error: errorCircleFilled,
          question: helpCircleFilled
        };
        var iconContent = renderIconTNode("icon", Component);
        return iconContent ? vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__icon")
        }, [iconContent]) : null;
      };

      var renderClose = function renderClose() {
        var close$1 = props2.close;
        var closeContent = null;

        if (close$1 === true || close$1 === "") {
          closeContent = vue.createVNode(close, null, null);
        } else if (typeof close$1 === "string") {
          closeContent = close$1;
        } else {
          closeContent = renderIconTNode("close");
        }

        return closeContent ? vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__close"),
          "onClick": handleClose
        }, [closeContent]) : null;
      };

      var renderTitle = function renderTitle(context) {
        var titleContent = renderTNodeJSX("title");
        return titleContent ? vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__title")
        }, [" ", titleContent]) : null;
      };

      var renderMessage = function renderMessage(context) {
        var operationContent = renderTNodeJSX("operation");
        return vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__message")
        }, [renderDescription(context), operationContent ? vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__operation")
        }, [operationContent]) : null]);
      };

      var renderDescription = function renderDescription(context) {
        var _description$value, _description$value$ch;

        var messageContent;
        messageContent = renderTNodeJSX("default");

        if (!messageContent) {
          messageContent = renderTNodeJSX("message");
        }

        var contentLength = Array.isArray(messageContent) ? messageContent.length : 1;
        var hasCollapse = props2.maxLine > 0 && props2.maxLine < contentLength;
        var height = (_description$value = description.value) === null || _description$value === void 0 ? void 0 : (_description$value$ch = _description$value.children[0]) === null || _description$value$ch === void 0 ? void 0 : _description$value$ch.offsetHeight;

        if (hasCollapse && collapsed.value) {
          messageContent = messageContent.slice(0, props2.maxLine);
          height && (description.value.style.height = "".concat(descHeight.value, "px"));
        } else if (hasCollapse) {
          height && (description.value.style.height = "".concat(height * (contentLength - props2.maxLine) + descHeight.value, "px"));
        }

        return vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__description"),
          "ref": "description"
        }, [hasCollapse ? messageContent.map(function (content) {
          return vue.createVNode("div", null, [content]);
        }) : messageContent, hasCollapse ? vue.createVNode("div", {
          "class": "t-alert__collapse",
          "onClick": function onClick() {
            collapsed.value = !collapsed.value;
          }
        }, [collapsed.value ? global.value.expandText : global.value.collapseText]) : null]);
      };

      var renderContent = function renderContent(context) {
        return vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__content")
        }, [renderTitle(context), renderMessage(context)]);
      };

      var handleClose = function handleClose(e) {
        var _props2$onClose;

        (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 ? void 0 : _props2$onClose.call(props2, {
          e: e
        });
        addClass(ele.value, "".concat(COMPONENT_NAME.value, "--closing"));
      };

      var handleCloseEnd = function handleCloseEnd(e) {
        if (e.propertyName === "opacity") {
          var _props2$onClosed;

          visible.value = false;
          (_props2$onClosed = props2.onClosed) === null || _props2$onClosed === void 0 ? void 0 : _props2$onClosed.call(props2, {
            e: e
          });
        }
      };

      vue.onMounted(function () {
        on$1(ele.value, "transitionend", handleCloseEnd);
        descHeight.value = description.value.offsetHeight;
      });
      vue.onBeforeUnmount(function () {
        off$1(ele.value, "transitionend", handleCloseEnd);
      });
      return {
        COMPONENT_NAME: COMPONENT_NAME,
        classPrefix: classPrefix,
        ele: ele,
        description: description,
        visible: visible,
        collapsed: collapsed,
        renderIcon: renderIcon,
        renderTitle: renderTitle,
        renderMessage: renderMessage,
        renderDescription: renderDescription,
        renderContent: renderContent,
        renderClose: renderClose,
        handleClose: handleClose,
        handleCloseEnd: handleCloseEnd
      };
    },
    render: function render() {
      var theme = this.theme,
          visible = this.visible,
          $attrs = this.$attrs,
          renderIcon = this.renderIcon,
          renderContent = this.renderContent,
          renderClose = this.renderClose,
          classPrefix = this.classPrefix;
      var CLASS = ["".concat(this.COMPONENT_NAME), "".concat(this.COMPONENT_NAME, "--").concat(theme), _defineProperty$3({}, "".concat(classPrefix, "-is-hidden"), !visible)];
      return vue.createVNode("div", vue.mergeProps({
        "class": CLASS
      }, $attrs, {
        "ref": "ele"
      }), [renderIcon(), renderContent(this), renderClose()]);
    }
  });

  var Alert = withInstall(_Alert);

  var Dialog = withInstall(_Dialog);

  var props$3 = {
    attach: {
      type: [String, Function],
      "default": ""
    },
    body: {
      type: [String, Function]
    },
    cancelBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    closeBtn: {
      type: [String, Boolean, Function],
      "default": void 0
    },
    closeOnEscKeydown: {
      type: Boolean,
      "default": true
    },
    closeOnOverlayClick: {
      type: Boolean,
      "default": true
    },
    confirmBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    "default": {
      type: [String, Function]
    },
    destroyOnClose: Boolean,
    footer: {
      type: [Boolean, Function],
      "default": true
    },
    header: {
      type: [String, Boolean, Function],
      "default": void 0
    },
    mode: {
      type: String,
      "default": "overlay",
      validator: function validator(val) {
        return ["overlay", "push"].includes(val);
      }
    },
    placement: {
      type: String,
      "default": "right",
      validator: function validator(val) {
        return ["left", "right", "top", "bottom"].includes(val);
      }
    },
    preventScrollThrough: {
      type: Boolean,
      "default": true
    },
    showInAttachedElement: Boolean,
    showOverlay: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "small"
    },
    sizeDraggable: Boolean,
    visible: Boolean,
    zIndex: {
      type: Number
    },
    onCancel: Function,
    onClose: Function,
    onCloseBtnClick: Function,
    onConfirm: Function,
    onEscKeydown: Function,
    onOverlayClick: Function
  };

  var _Drawer = vue.defineComponent({
    name: "TDrawer",
    directives: {
      TransferDom: TransferDom
    },
    props: props$3,
    emits: ["update:visible"],
    setup: function setup(props2, context) {
      var _useConfig = useConfig("drawer"),
          global = _useConfig.global;

      var renderTNodeJSX = useTNodeJSX();
      var renderContent = useContent();
      var COMPONENT_NAME = usePrefixClass("drawer");
      var LOCK_CLASS = usePrefixClass("drawer--lock");

      var confirmBtnAction = function confirmBtnAction(e) {
        var _props2$onConfirm;

        (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 ? void 0 : _props2$onConfirm.call(props2, {
          e: e
        });
      };

      var cancelBtnAction = function cancelBtnAction(e) {
        var _props2$onCancel;

        (_props2$onCancel = props2.onCancel) === null || _props2$onCancel === void 0 ? void 0 : _props2$onCancel.call(props2, {
          e: e
        });
        closeDrawer({
          trigger: "cancel",
          e: e
        });
      };

      var _useAction = useAction({
        confirmBtnAction: confirmBtnAction,
        cancelBtnAction: cancelBtnAction
      }),
          getConfirmBtn = _useAction.getConfirmBtn,
          getCancelBtn = _useAction.getCancelBtn;

      var drawerEle = vue.ref(null);
      var drawerClasses = vue.computed(function () {
        return ["t-drawer", "t-drawer--".concat(props2.placement), {
          "t-drawer--open": props2.visible,
          "t-drawer--attach": props2.showInAttachedElement,
          "t-drawer--without-mask": !props2.showOverlay
        }];
      });
      var sizeValue = vue.computed(function () {
        var defaultSize = isNaN(Number(props2.size)) ? props2.size : "".concat(props2.size, "px");
        return {
          small: "300px",
          medium: "500px",
          large: "760px"
        }[props2.size] || defaultSize;
      });
      var wrapperStyles = vue.computed(function () {
        return {
          transform: props2.visible ? "translateX(0)" : void 0,
          width: ["left", "right"].includes(props2.placement) ? sizeValue.value : "",
          height: ["top", "bottom"].includes(props2.placement) ? sizeValue.value : ""
        };
      });
      var wrapperClasses = vue.computed(function () {
        return ["t-drawer__content-wrapper", "t-drawer__content-wrapper--".concat(props2.placement)];
      });
      var parentNode = vue.computed(function () {
        return drawerEle.value && drawerEle.value.parentNode;
      });
      var modeAndPlacement = vue.computed(function () {
        return [props2.mode, props2.placement].join();
      });
      var footerStyle = vue.computed(function () {
        return {
          display: "flex",
          justifyContent: props2.placement === "right" ? "flex-start" : "flex-end"
        };
      });

      var handlePushMode = function handlePushMode() {
        if (props2.mode !== "push") return;
        vue.nextTick(function () {
          if (!parentNode.value) return;
          parentNode.value.style.cssText = "transition: margin 300ms cubic-bezier(0.7, 0.3, 0.1, 1) 0s;";
        });
      };

      var updatePushMode = function updatePushMode() {
        if (!parentNode.value) return;
        if (props2.mode !== "push" || !parentNode.value) return;
        var marginStr = {
          left: "margin: 0 0 0 ".concat(sizeValue.value),
          right: "margin: 0 0 0 -".concat(sizeValue.value),
          top: "margin: ".concat(sizeValue.value, " 0 0 0"),
          bottom: "margin: -".concat(sizeValue.value, " 0 0 0")
        }[props2.placement];

        if (props2.visible) {
          parentNode.value.style.cssText += marginStr;
        } else {
          parentNode.value.style.cssText = parentNode.value.style.cssText.replace(/margin:.+;/, "");
        }
      };

      var getDefaultBtn = function getDefaultBtn(btnType, btnApi) {
        var isCancel = btnType === "cancel";
        var clickAction = isCancel ? cancelBtnAction : confirmBtnAction;
        var theme = isCancel ? "default" : "primary";
        var isApiObject = _typeof$2(btnApi) === "object";
        return vue.createVNode(Button, {
          "theme": theme,
          "onClick": clickAction,
          "props": isApiObject ? btnApi : {},
          "class": "".concat(COMPONENT_NAME.value, "-").concat(btnType)
        }, {
          "default": function _default() {
            return [btnApi && _typeof$2(btnApi) === "object" ? btnApi.content : btnApi];
          }
        });
      };

      var isUseDefault = function isUseDefault(btnApi) {
        var baseTypes = ["string", "object"];
        return Boolean(btnApi && baseTypes.includes(_typeof$2(btnApi)));
      };

      var getDefaultFooter = function getDefaultFooter() {
        var confirmBtn = getConfirmBtn({
          confirmBtn: props2.confirmBtn,
          globalConfirm: global.value.confirm,
          className: "".concat(COMPONENT_NAME.value, "__confirm")
        });
        var cancelBtn = getCancelBtn({
          cancelBtn: props2.cancelBtn,
          globalCancel: global.value.cancel,
          className: "".concat(COMPONENT_NAME.value, "__cancel")
        });
        return vue.createVNode("div", {
          "style": footerStyle.value
        }, [props2.placement === "right" ? confirmBtn : null, cancelBtn, props2.placement !== "right" ? confirmBtn : null]);
      };

      vue.watch(modeAndPlacement, function () {
        handlePushMode();
      }, {
        immediate: true
      });
      vue.watch(function () {
        return props2.visible;
      }, function (value) {
        if (isServer$1) return;

        if (value && !props2.showInAttachedElement) {
          props2.preventScrollThrough && addClass(document.body, LOCK_CLASS.value);
        } else {
          props2.preventScrollThrough && removeClass(document.body, LOCK_CLASS.value);
        }
      }, {
        immediate: true
      });

      var handleCloseBtnClick = function handleCloseBtnClick(e) {
        var _props2$onCloseBtnCli;

        (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 ? void 0 : _props2$onCloseBtnCli.call(props2, {
          e: e
        });
        closeDrawer({
          trigger: "close-btn",
          e: e
        });
      };

      var handleWrapperClick = function handleWrapperClick(e) {
        var _props2$onOverlayClic;

        (_props2$onOverlayClic = props2.onOverlayClick) === null || _props2$onOverlayClic === void 0 ? void 0 : _props2$onOverlayClic.call(props2, {
          e: e
        });

        if (props2.closeOnOverlayClick) {
          closeDrawer({
            trigger: "overlay",
            e: e
          });
        }
      };

      var onKeyDown = function onKeyDown(e) {
        if (props2.closeOnEscKeydown && e.key === "Escape") {
          var _props2$onEscKeydown;

          (_props2$onEscKeydown = props2.onEscKeydown) === null || _props2$onEscKeydown === void 0 ? void 0 : _props2$onEscKeydown.call(props2, {
            e: e
          });
          closeDrawer({
            trigger: "esc",
            e: e
          });
        }
      };

      var closeDrawer = function closeDrawer(params) {
        var _props2$onClose;

        (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 ? void 0 : _props2$onClose.call(props2, params);
        context.emit("update:visible", false);
      };

      vue.onUpdated(function () {
        updatePushMode();
      });
      return {
        COMPONENT_NAME: COMPONENT_NAME,
        renderTNodeJSX: renderTNodeJSX,
        renderContent: renderContent,
        drawerEle: drawerEle,
        drawerClasses: drawerClasses,
        wrapperStyles: wrapperStyles,
        modeAndPlacement: modeAndPlacement,
        wrapperClasses: wrapperClasses,
        handlePushMode: handlePushMode,
        updatePushMode: updatePushMode,
        getDefaultBtn: getDefaultBtn,
        isUseDefault: isUseDefault,
        getDefaultFooter: getDefaultFooter,
        handleCloseBtnClick: handleCloseBtnClick,
        handleWrapperClick: handleWrapperClick,
        onKeyDown: onKeyDown,
        confirmBtnAction: confirmBtnAction,
        cancelBtnAction: cancelBtnAction,
        closeDrawer: closeDrawer
      };
    },
    render: function render() {
      var COMPONENT_NAME = this.COMPONENT_NAME,
          renderContent = this.renderContent,
          renderTNodeJSX = this.renderTNodeJSX;
      if (this.destroyOnClose && !this.visible) return;

      var defaultCloseBtn = vue.createVNode(close, {
        "class": "t-submenu-icon"
      }, null);

      var body = renderContent("body", "default");
      var headerContent = renderTNodeJSX("header");
      var defaultFooter = this.getDefaultFooter();
      return vue.withDirectives(vue.createVNode("div", vue.mergeProps({
        "ref": "drawerEle",
        "class": this.drawerClasses,
        "style": {
          zIndex: this.zIndex
        },
        "onKeydown": this.onKeyDown
      }, this.$attrs, {
        "tabindex": 0
      }), [this.showOverlay && vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME, "__mask"),
        "onClick": this.handleWrapperClick
      }, null), vue.createVNode("div", {
        "class": this.wrapperClasses,
        "style": this.wrapperStyles
      }, [headerContent && vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME, "__header")
      }, [headerContent]), this.closeBtn && vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME, "__close-btn"),
        "onClick": this.handleCloseBtnClick
      }, [renderTNodeJSX("closeBtn", defaultCloseBtn)]), vue.createVNode("div", {
        "class": ["".concat(COMPONENT_NAME, "__body"), "narrow-scrollbar"]
      }, [body]), this.footer && vue.createVNode("div", {
        "class": "".concat(COMPONENT_NAME, "__footer")
      }, [renderTNodeJSX("footer", defaultFooter)])])]), [[vue.resolveDirective("transfer-dom"), this.attach]]);
    }
  });

  var Drawer = withInstall(_Drawer);

  var Message = withInstall(_Message);

  var props$2 = {
    closeBtn: {
      type: [String, Boolean, Function],
      "default": void 0
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    duration: {
      type: Number,
      "default": 3e3
    },
    footer: {
      type: [String, Function]
    },
    icon: {
      type: [Boolean, Function],
      "default": true
    },
    theme: {
      type: String,
      "default": "info",
      validator: function validator(val) {
        return ["info", "success", "warning", "error"].includes(val);
      }
    },
    title: {
      type: [String, Function]
    },
    onCloseBtnClick: Function,
    onDurationEnd: Function
  };

  var DEFAULT_Z_INDEX = 6e3;
  var DISTANCE = "16px";
  var PLACEMENT_OFFSET = {
    "top-left": {
      left: DISTANCE,
      top: DISTANCE
    },
    "top-right": {
      right: DISTANCE,
      top: DISTANCE
    },
    "bottom-right": {
      right: DISTANCE,
      bottom: DISTANCE
    },
    "bottom-left": {
      left: DISTANCE,
      bottom: DISTANCE
    }
  };
  var PLACEMENT_LIST = Object.keys(PLACEMENT_OFFSET);

  var ANIMATION_OPTION = {
    duration: 200,
    easing: "linear"
  };

  var fadeIn = function fadeIn(dom, placement) {
    if (!dom) return;
    var offsetHeight = (dom === null || dom === void 0 ? void 0 : dom.offsetHeight) || 0;
    var offsetWidth = (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
    var keyframes = getFadeInKeyframes(placement, offsetWidth, offsetHeight);
    if (!keyframes) return;
    dom.animate && dom.animate(keyframes, ANIMATION_OPTION);
  };

  var fadeOut = function fadeOut(dom, placement, onFinish) {
    if (!dom) return;
    var offsetHeight = (dom === null || dom === void 0 ? void 0 : dom.offsetHeight) || 0;
    var offsetWidth = (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
    var keyframes = getFadeOutKeyframes(placement, offsetWidth, offsetHeight);
    if (!keyframes) return onFinish();
    var animate = dom.animate && dom.animate(keyframes, ANIMATION_OPTION);

    if (animate) {
      animate.onfinish = function () {
        onFinish();
      };
    } else {
      dom.style.display = "none";
      onFinish();
    }
  };

  var getFadeInKeyframes = function getFadeInKeyframes(placement, offsetWidth, offsetHeight) {
    if (!PLACEMENT_LIST.includes(placement)) return null;

    if (placement === "top-right") {
      return [{
        opacity: 0,
        transform: "translateX(".concat(offsetWidth, "px)")
      }, {
        opacity: 1,
        transform: "translateX(0px)"
      }];
    }

    if (placement === "bottom-right") {
      return [{
        opacity: 0,
        transform: "translateX(".concat(offsetWidth, "px)"),
        marginBottom: "-".concat(offsetHeight, "px")
      }, {
        opacity: 1,
        transform: "translateX(0px)"
      }];
    }

    if (placement === "top-left") {
      return [{
        opacity: 0,
        transform: "translateX(-".concat(offsetWidth, "px)")
      }, {
        opacity: 1,
        transform: "translateX(0px)"
      }];
    }

    if (placement === "bottom-left") {
      return [{
        opacity: 0,
        transform: "translateX(-".concat(offsetWidth, "px)"),
        marginBottom: "-".concat(offsetHeight, "px")
      }, {
        opacity: 1,
        transform: "translateX(0px)"
      }];
    }
  };

  var getFadeOutKeyframes = function getFadeOutKeyframes(placement, offsetWidth, offsetHeight) {
    if (!PLACEMENT_LIST.includes(placement)) return null;

    if (placement === "top-right") {
      return [{
        opacity: 1,
        transform: "translateX(0px)"
      }, {
        opacity: 0,
        transform: "translateX(".concat(offsetWidth, "px)"),
        marginBottom: "-".concat(offsetHeight, "px")
      }];
    }

    if (placement === "bottom-right") {
      return [{
        opacity: 1,
        transform: "translateX(0px)"
      }, {
        opacity: 0,
        transform: "translateX(".concat(offsetWidth, "px)")
      }];
    }

    if (placement === "top-left") {
      return [{
        opacity: 1,
        transform: "translateX(0px)"
      }, {
        opacity: 0,
        transform: "translateX(-".concat(offsetWidth, "px)"),
        marginBottom: "-".concat(offsetHeight, "px")
      }];
    }

    if (placement === "bottom-left") {
      return [{
        opacity: 1,
        transform: "translateX(0px)"
      }, {
        opacity: 0,
        transform: "translateX(-".concat(offsetWidth, "px)")
      }];
    }
  };

  function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$7(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Notification = vue.defineComponent({
    name: "TNotification",
    props: _objectSpread$7(_objectSpread$7({}, props$2), {}, {
      placement: String
    }),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots,
          expose = _ref.expose;
      var COMPONENT_NAME = usePrefixClass("notification");

      var _useConfig = useConfig("classPrefix"),
          classPrefix = _useConfig.classPrefix;

      var renderTNode = useTNodeJSX();
      var renderContent = useContent();
      var timer = vue.ref(null);
      var notificationRef = vue.ref(null);

      var close$1 = function close(e) {
        var dom = notificationRef.value;
        fadeOut(dom, props2.placement, function () {
          var _props2$onCloseBtnCli;

          (_props2$onCloseBtnCli = props2.onCloseBtnClick) === null || _props2$onCloseBtnCli === void 0 ? void 0 : _props2$onCloseBtnCli.call(props2, {
            e: e
          });
        });
      };

      var renderIcon = function renderIcon() {
        var iconContent;
        if (props2.icon === false) return null;

        if (isFunction_1(props2.icon)) {
          iconContent = props2.icon(vue.h);
        } else if (slots.icon) {
          iconContent = slots.icon(null);
        } else if (props2.theme) {
          var iconType = props2.theme === "success" ? vue.createVNode(checkCircleFilled, {
            "class": "t-is-".concat(props2.theme)
          }, null) : vue.createVNode(infoCircleFilled, {
            "class": "t-is-".concat(props2.theme)
          }, null);
          iconContent = vue.createVNode("div", {
            "class": "t-notification__icon"
          }, [iconType]);
        }

        return iconContent;
      };

      var renderClose = function renderClose() {
        var defaultClose = vue.createVNode(close, null, null);

        return vue.createVNode("span", {
          "class": "".concat(classPrefix.value, "-message__close"),
          "onClick": close$1
        }, [renderTNode("closeBtn", defaultClose)]);
      };

      var renderMainContent = function renderMainContent() {
        return vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__content")
        }, [renderContent("default", "content")]);
      };

      var clearTimer = function clearTimer() {
        props2.duration && clearTimeout(timer.value);
      };

      var setTimer = function setTimer() {
        if (!props2.duration) {
          return;
        }

        timer.value = Number(setTimeout(function () {
          clearTimer();
          var dom = notificationRef.value;
          fadeOut(dom, props2.placement, function () {
            var _props2$onDurationEnd;

            (_props2$onDurationEnd = props2.onDurationEnd) === null || _props2$onDurationEnd === void 0 ? void 0 : _props2$onDurationEnd.call(props2);
          });
        }, props2.duration));
      };

      vue.onBeforeMount(function () {
        props2.duration && setTimer();
      });
      vue.onMounted(function () {
        var dom = notificationRef.value;
        fadeIn(dom, props2.placement);
      });
      expose({
        close: close$1
      });
      return function () {
        return vue.createVNode("div", {
          "ref": notificationRef,
          "class": "".concat(COMPONENT_NAME.value),
          "onMouseenter": clearTimer,
          "onMouseleave": setTimer
        }, [renderIcon(), vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__main")
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__title__wrap")
        }, [vue.createVNode("span", {
          "class": "".concat(COMPONENT_NAME.value, "__title")
        }, [renderTNode("title")]), renderClose()]), renderMainContent(), renderTNode("footer")])]);
      };
    }
  });

  function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$6(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var NotificationList = vue.defineComponent({
    props: {
      placement: {
        type: String,
        "default": "top-right",
        validator: function validator(v) {
          return ["top-left", "top-right", "bottom-left", "bottom-right"].indexOf(v) > -1;
        }
      }
    },
    setup: function setup(props, _ref) {
      var expose = _ref.expose;
      var COMPONENT_NAME = usePrefixClass("notification-list");
      var placement = props.placement;
      var list = vue.ref([]);
      var notificationList = vue.ref([]);
      var styles = vue.computed(function () {
        return _objectSpread$6({
          zIndex: DEFAULT_Z_INDEX
        }, PLACEMENT_OFFSET[placement]);
      });

      var add = function add(options) {
        list.value.push(options);
        return list.value.length - 1;
      };

      var remove = function remove(index) {
        list.value.splice(index, 1);
      };

      var removeAll = function removeAll() {
        list.value = [];
      };

      var getOffset = function getOffset(val) {
        if (!val) return;
        return isNaN(Number(val)) ? val : "".concat(val, "px");
      };

      var notificationStyles = function notificationStyles(item) {
        var styles2 = {
          marginBottom: DISTANCE
        };

        if (item.offset) {
          styles2.position = "relative";
          styles2.left = getOffset(item.offset[0]);
          styles2.top = getOffset(item.offset[1]);
        }

        if (item.zIndex) styles2["z-index"] = item.zIndex;
        return styles2;
      };

      var getProps = function getProps(index, item) {
        return _objectSpread$6(_objectSpread$6({}, item), {}, {
          onCloseBtnClick: function onCloseBtnClick(e) {
            if (item.onCloseBtnClick) {
              item.onCloseBtnClick(e);
            }

            return remove(index);
          },
          onDurationEnd: function onDurationEnd() {
            if (item.onDurationEnd) {
              item.onDurationEnd();
            }

            return remove(index);
          }
        });
      };

      var addChild = function addChild(el) {
        if (el) {
          notificationList.value.push(el);
        }
      };

      expose({
        add: add,
        remove: remove,
        removeAll: removeAll,
        list: list,
        notificationList: notificationList
      });
      return function () {
        if (!list.value.length) return;
        return vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__show"),
          "style": styles.value
        }, [list.value.map(function (item, index) {
          return vue.createVNode(_Notification, vue.mergeProps({
            "ref": addChild,
            "key": item.id,
            "style": notificationStyles(item)
          }, getProps(index, item)), null);
        })]);
      };
    }
  });

  function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var seed = 0;
  var instanceMap = /* @__PURE__ */new Map();

  var NotificationFunction = function NotificationFunction(options) {
    seed += 1;

    var hackOptions = _objectSpread$5({
      placement: "top-right",
      zIndex: 6e3,
      attach: "body",
      id: seed
    }, options);

    hackOptions.content = options.content ? options.content : "";
    var attachEl = getAttach(hackOptions.attach);

    if (!instanceMap.get(attachEl)) {
      instanceMap.set(attachEl, {});
    }

    var tmpInstance = instanceMap.get(attachEl)[hackOptions.placement];

    if (!tmpInstance) {
      var wrapper = document.createElement("div");
      var instance = vue.createApp(NotificationList, {
        placement: hackOptions.placement
      }).mount(wrapper);
      instance.add(hackOptions);
      instanceMap.get(attachEl)[hackOptions.placement] = instance;
      tmpInstance = instance;
      attachEl.appendChild(instance.$el);
    } else {
      tmpInstance.add(hackOptions);
    }

    return new Promise(function (resolve) {
      var ins = instanceMap.get(attachEl)[hackOptions.placement];
      vue.nextTick(function () {
        var notificationList = ins.notificationList;
        resolve(notificationList[notificationList.length - 1]);
      });
    });
  };

  var showThemeNotification = function showThemeNotification(theme, options) {
    var hackOptions = _objectSpread$5(_objectSpread$5({}, options), {}, {
      theme: theme
    });

    return NotificationFunction(hackOptions);
  };

  var extraApi = {
    info: function info(options) {
      return showThemeNotification("info", options);
    },
    success: function success(options) {
      return showThemeNotification("success", options);
    },
    warning: function warning(options) {
      return showThemeNotification("warning", options);
    },
    error: function error(options) {
      return showThemeNotification("error", options);
    },
    close: function close(promise) {
      promise.then(function (instance) {
        return instance.close();
      });
    },
    closeAll: function closeAll() {
      instanceMap.forEach(function (attach) {
        Object.keys(attach).forEach(function (placement) {
          attach[placement].removeAll();
        });
      });
    }
  };
  var NotificationPlugin = showThemeNotification;

  NotificationPlugin.install = function (app) {
    app.config.globalProperties.$notify = showThemeNotification;
    Object.keys(extraApi).forEach(function (funcName) {
      app.config.globalProperties.$notify[funcName] = extraApi[funcName];
    });
  };

  Object.keys(extraApi).forEach(function (funcName) {
    NotificationPlugin[funcName] = extraApi[funcName];
  });

  var Notification = withInstall(_Notification);

  var props$1 = {
    cancelBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    confirmBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    destroyOnClose: {
      type: Boolean,
      "default": true
    },
    icon: {
      type: Function
    },
    placement: {
      type: String,
      "default": "top",
      validator: function validator(val) {
        if (!val) return true;
        return ["top", "left", "right", "bottom", "top-left", "top-right", "bottom-left", "bottom-right", "left-top", "left-bottom", "right-top", "right-bottom"].includes(val);
      }
    },
    popupProps: {
      type: Object
    },
    showArrow: {
      type: Boolean,
      "default": true
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "warning", "danger"].includes(val);
      }
    },
    triggerElement: {
      type: [String, Function]
    },
    visible: {
      type: Boolean,
      "default": void 0
    },
    modelValue: {
      type: Boolean,
      "default": void 0
    },
    defaultVisible: Boolean,
    onCancel: Function,
    onConfirm: Function,
    onVisibleChange: Function
  };

  function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Popconfirm = vue.defineComponent({
    name: "TPopconfirm",
    props: props$1,
    setup: function setup(props2) {
      var _useConfig = useConfig("popconfirm"),
          global = _useConfig.global;

      var COMPONENT_NAME = usePrefixClass("popconfirm");

      var _toRefs = vue.toRefs(props2),
          visible = _toRefs.visible,
          modelValue = _toRefs.modelValue;

      var _useVModel = useVModel(visible, modelValue, props2.defaultVisible, props2.onVisibleChange, "visible"),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          innerVisible = _useVModel2[0],
          setInnerVisible = _useVModel2[1];

      var confirmBtnAction = function confirmBtnAction(e) {
        var _props2$onConfirm;

        (_props2$onConfirm = props2.onConfirm) === null || _props2$onConfirm === void 0 ? void 0 : _props2$onConfirm.call(props2, {
          e: e
        });
        setInnerVisible(false, {
          e: e
        });
      };

      var cancelBtnAction = function cancelBtnAction(e) {
        var _props2$onCancel;

        (_props2$onCancel = props2.onCancel) === null || _props2$onCancel === void 0 ? void 0 : _props2$onCancel.call(props2, {
          e: e
        });
        setInnerVisible(false, {
          e: e
        });
      };

      var _useAction = useAction({
        confirmBtnAction: confirmBtnAction,
        cancelBtnAction: cancelBtnAction
      }),
          getConfirmBtn = _useAction.getConfirmBtn,
          getCancelBtn = _useAction.getCancelBtn;

      var renderTNodeJSX = useTNodeJSX();
      var innerPopupProps = vue.computed(function () {
        return _objectSpread$4({
          showArrow: props2.showArrow,
          overlayClassName: COMPONENT_NAME.value,
          trigger: "click",
          destroyOnClose: props2.destroyOnClose,
          placement: props2.placement
        }, props2.popupProps);
      });
      var renderTNodeDefault = useTNodeDefault();

      var renderContent = function renderContent() {
        var cancelBtn = getCancelBtn({
          cancelBtn: props2.cancelBtn,
          globalCancel: global.value.cancel,
          className: "".concat(COMPONENT_NAME.value, "__cancel"),
          size: "small"
        });
        var confirmBtn = getConfirmBtn({
          theme: props2.theme,
          confirmBtn: props2.confirmBtn,
          globalConfirm: global.value.confirm,
          globalConfirmBtnTheme: global.value.confirmBtnTheme,
          className: "".concat(COMPONENT_NAME.value, "__confirm"),
          size: "small"
        });

        var renderIcon = function renderIcon() {
          var Icon = {
            "default": infoCircleFilled,
            warning: errorCircleFilled,
            danger: errorCircleFilled
          }[props2.theme];
          var theme = props2.theme || "default";
          return renderTNodeDefault("icon", vue.createVNode(Icon, {
            "class": "".concat(COMPONENT_NAME.value, "__icon--").concat(theme)
          }, null));
        };

        return vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__content")
        }, [vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__body")
        }, [renderIcon(), vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__inner")
        }, [renderTNodeJSX("content")])]), Boolean(cancelBtn || confirmBtn) && vue.createVNode("div", {
          "class": "".concat(COMPONENT_NAME.value, "__buttons")
        }, [cancelBtn, confirmBtn])]);
      };

      var onPopupVisibleChange = function onPopupVisibleChange(val, context) {
        setInnerVisible(val, context);
      };

      var renderTNodeContent = useContent();
      return function () {
        return vue.createVNode(Popup, vue.mergeProps({
          "visible": innerVisible.value
        }, innerPopupProps.value, {
          "onVisibleChange": onPopupVisibleChange
        }), {
          "default": function _default() {
            return [renderTNodeContent("default", "triggerElement")];
          },
          content: renderContent
        });
      };
    }
  });

  var Popconfirm = withInstall(_Popconfirm);

  var props = {
    accept: {
      type: String,
      "default": ""
    },
    action: {
      type: String,
      "default": ""
    },
    autoUpload: {
      type: Boolean,
      "default": true
    },
    beforeUpload: {
      type: Function
    },
    data: {
      type: Object
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    draggable: Boolean,
    fileListDisplay: {
      type: Function
    },
    files: {
      type: Array,
      "default": void 0
    },
    modelValue: {
      type: Array,
      "default": void 0
    },
    defaultFiles: {
      type: Array
    },
    format: {
      type: Function
    },
    formatResponse: {
      type: Function
    },
    headers: {
      type: Object
    },
    isBatchUpload: Boolean,
    max: {
      type: Number,
      "default": 0
    },
    method: {
      type: String,
      "default": "POST",
      validator: function validator(val) {
        if (!val) return true;
        return ["POST", "GET", "PUT", "OPTION"].includes(val);
      }
    },
    multiple: Boolean,
    name: {
      type: String,
      "default": "file"
    },
    placeholder: {
      type: String,
      "default": ""
    },
    requestMethod: {
      type: Function
    },
    showUploadProgress: {
      type: Boolean,
      "default": true
    },
    sizeLimit: {
      type: [Number, Object]
    },
    theme: {
      type: String,
      "default": "file",
      validator: function validator(val) {
        if (!val) return true;
        return ["custom", "file", "file-input", "file-flow", "image", "image-flow"].includes(val);
      }
    },
    tips: {
      type: String,
      "default": ""
    },
    trigger: {
      type: [String, Function]
    },
    uploadAllFilesInOneRequest: Boolean,
    useMockProgress: {
      type: Boolean,
      "default": true
    },
    withCredentials: Boolean,
    onCancelUpload: Function,
    onChange: Function,
    onDragenter: Function,
    onDragleave: Function,
    onFail: Function,
    onPreview: Function,
    onProgress: Function,
    onRemove: Function,
    onSelectChange: Function,
    onSuccess: Function
  };

  function returnFileSize(number) {
    if (number < 1024) {
      return "".concat(number, " Bytes");
    }

    if (number >= 1024 && number < 1048576) {
      return "".concat((number / 1024).toFixed(1), " KB");
    }

    if (number >= 1048576) {
      return "".concat((number / 1048576).toFixed(1), " MB");
    }
  }
  function getCurrentDate() {
    var d = new Date();
    var month = d.getMonth() + 1;
    month = month < 10 ? "0".concat(month) : month;
    return "".concat(d.getFullYear(), "-").concat(month, "-").concat(d.getDate(), " ").concat(d.getHours(), ":").concat(d.getMinutes(), ":").concat(d.getSeconds());
  }
  function abridgeName(inputName) {
    var leftCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
    var rightcount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 7;
    var name = inputName;
    var leftLength = 0;
    var rightLength = 0;

    for (var i = 0; i < name.length; i++) {
      var w = name[i];
      var isCn = escape(w).indexOf("%u") === 0;

      if (i < leftCount * 2 && leftLength < leftCount) {
        isCn ? leftLength += 1 : leftLength += 2;
      } else if (i > i - rightcount && rightLength < rightcount) {
        isCn ? rightLength += 1 : rightLength += 2;
      }
    }

    return name.replace(new RegExp("^(.{".concat(leftLength, "})(.+)(.{").concat(rightLength, "})$")), "$1\u2026$3");
  }
  var SIZE_MAP = {
    B: 1024,
    KB: 1,
    MB: 1048576,
    GB: 1073741824
  };
  function isOverSizeLimit(fileSize, sizeLimit, unit) {
    var units = ["B", "KB", "MB", "GB"];
    var KB_INDEX = 1;
    var index = units.indexOf(unit);

    if (index === -1) {
      console.warn("TDesign Upload Warn: `sizeLimit.unit` can only be one of ".concat(units.join()));
      index = KB_INDEX;
    }

    var num = SIZE_MAP[unit];
    var limit = index < KB_INDEX ? sizeLimit / num : sizeLimit * num;
    return fileSize <= limit;
  }

  function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Dragger = vue.defineComponent({
    name: "TUploadDragger",
    props: {
      file: {
        type: Object,
        "default": function _default() {
          return null;
        }
      },
      loadingFile: {
        type: Object,
        "default": function _default() {
          return null;
        }
      },
      autoUpload: props.autoUpload,
      theme: props.theme,
      onCancel: Function,
      onClick: Function,
      onRemove: Function,
      onUpload: Function,
      onChange: Function,
      onDragleave: Function,
      onDragenter: Function
    },
    setup: function setup(props2) {
      var renderTNodeJSX = useTNodeJSX();
      var target = vue.ref(null);
      var dragActive = vue.ref(false);

      var _useConfig = useConfig("upload"),
          global = _useConfig.global;

      var UPLOAD_NAME = usePrefixClass("upload");

      var _useCommonClassName = useCommonClassName$2(),
          SIZE = _useCommonClassName.SIZE;

      var imageUrl = vue.computed(function () {
        return props2.loadingFile && props2.loadingFile.url || props2.file && props2.file.url;
      });
      var inputName = vue.computed(function () {
        return props2.loadingFile && props2.loadingFile.name || props2.file && props2.file.name || "";
      });
      var classes = vue.computed(function () {
        return ["".concat(UPLOAD_NAME.value, "__dragger"), _defineProperty$3({}, "".concat(UPLOAD_NAME.value, "__dragger-center"), !props2.loadingFile && !props2.file), _defineProperty$3({}, "".concat(UPLOAD_NAME.value, "__dragger-error"), props2.loadingFile && props2.loadingFile.status === "fail")];
      });
      var size = vue.computed(function () {
        return props2.loadingFile && props2.loadingFile.size || props2.file && props2.file.size;
      });
      var showResultOperate = vue.computed(function () {
        var _props2$file, _props2$loadingFile;

        return Boolean(!props2.loadingFile && ((_props2$file = props2.file) === null || _props2$file === void 0 ? void 0 : _props2$file.name)) || ["success", "fail"].includes((_props2$loadingFile = props2.loadingFile) === null || _props2$loadingFile === void 0 ? void 0 : _props2$loadingFile.status);
      });

      var handleDrop = function handleDrop(event) {
        var _props2$onChange, _props2$onDragleave;

        event.preventDefault();
        (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 ? void 0 : _props2$onChange.call(props2, event.dataTransfer.files);
        (_props2$onDragleave = props2.onDragleave) === null || _props2$onDragleave === void 0 ? void 0 : _props2$onDragleave.call(props2, event);
        dragActive.value = false;
      };

      var handleDragenter = function handleDragenter(event) {
        var _props2$onDragenter;

        event.preventDefault();
        target.value = event.target;
        (_props2$onDragenter = props2.onDragenter) === null || _props2$onDragenter === void 0 ? void 0 : _props2$onDragenter.call(props2, event);
        dragActive.value = true;
      };

      var handleDragleave = function handleDragleave(event) {
        var _props2$onDragleave2;

        if (target.value !== event.target) return;
        event.preventDefault();
        (_props2$onDragleave2 = props2.onDragleave) === null || _props2$onDragleave2 === void 0 ? void 0 : _props2$onDragleave2.call(props2, event);
        dragActive.value = false;
      };

      var renderImage = function renderImage() {
        return vue.createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__dragger-img-wrap")
        }, [imageUrl.value && vue.createVNode("img", {
          "src": imageUrl.value
        }, null)]);
      };

      var renderUploading = function renderUploading() {
        if (props2.loadingFile.status === "fail") return vue.createVNode(errorCircleFilled, null, null);

        if (props2.loadingFile.status === "progress") {
          return vue.createVNode("div", {
            "class": "".concat(UPLOAD_NAME.value, "__single-progress")
          }, [vue.createVNode(Loading, null, null), vue.createVNode("span", {
            "class": "".concat(UPLOAD_NAME.value, "__single-percent")
          }, [Math.min(props2.loadingFile.percent, 99), "%"])]);
        }
      };

      var renderProgress = function renderProgress() {
        var _props2$loadingFile2, _props2$loadingFile3;

        return vue.createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__dragger-progress")
        }, [props2.theme === "image" && renderImage(), vue.createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__dragger-progress-info")
        }, [vue.createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__dragger-text")
        }, [vue.createVNode("span", {
          "class": "".concat(UPLOAD_NAME.value, "__single-name")
        }, [abridgeName(inputName.value)]), props2.loadingFile && renderUploading(), !props2.loadingFile && !!props2.file && vue.createVNode(checkCircleFilled, null, null)]), vue.createVNode("small", {
          "class": "".concat(SIZE.value.small)
        }, [global.value.file.fileSizeText, "\uFF1A", returnFileSize(size.value)]), vue.createVNode("small", {
          "class": "".concat(SIZE.value.small)
        }, [global.value.file.fileOperationDateText, "\uFF1A", getCurrentDate()]), vue.createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__dragger-btns")
        }, [["progress", "waiting"].includes((_props2$loadingFile2 = props2.loadingFile) === null || _props2$loadingFile2 === void 0 ? void 0 : _props2$loadingFile2.status) && vue.createVNode(Button, {
          "theme": "primary",
          "variant": "text",
          "class": "".concat(UPLOAD_NAME.value, "__dragger-progress-cancel"),
          "onClick": props2.onCancel
        }, {
          "default": function _default() {
            return [global.value.cancelUploadText];
          }
        }), !props2.autoUpload && ((_props2$loadingFile3 = props2.loadingFile) === null || _props2$loadingFile3 === void 0 ? void 0 : _props2$loadingFile3.status) === "waiting" && vue.createVNode(Button, {
          "variant": "text",
          "theme": "primary",
          "onClick": function onClick(e) {
            return props2.onUpload(_objectSpread$3({}, props2.loadingFile), e);
          }
        }, {
          "default": function _default() {
            return [global.value.triggerUploadText.normal];
          }
        })]), showResultOperate.value && vue.createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__dragger-btns")
        }, [vue.createVNode(Button, {
          "theme": "primary",
          "variant": "text",
          "class": "".concat(UPLOAD_NAME.value, "__dragger-progress-cancel"),
          "onClick": function onClick(e) {
            props2.onRemove(e);
            props2.onClick(e);
          }
        }, {
          "default": function _default() {
            return [global.value.triggerUploadText.reupload];
          }
        }), vue.createVNode(Button, {
          "theme": "danger",
          "variant": "text",
          "onClick": props2.onRemove
        }, {
          "default": function _default() {
            return [global.value.triggerUploadText["delete"]];
          }
        })])])]);
      };

      var renderDefaultDragElement = function renderDefaultDragElement() {
        var unActiveElement = vue.createVNode("div", null, [vue.createVNode("span", {
          "class": "".concat(UPLOAD_NAME.value, "--highlight")
        }, [global.value.triggerUploadText.normal]), vue.createVNode("span", null, ["\xA0\xA0/\xA0\xA0", global.value.dragger.draggingText])]);

        var activeElement = vue.createVNode("div", null, [global.value.dragger.dragDropText]);

        return dragActive.value ? activeElement : unActiveElement;
      };

      return function () {
        var content = null;

        if ((props2.loadingFile || props2.file) && props2.theme !== "custom") {
          content = renderProgress();
        } else {
          content = vue.createVNode("div", {
            "class": "".concat(UPLOAD_NAME.value, "__trigger"),
            "onClick": props2.onClick
          }, [renderTNodeJSX("default") || renderDefaultDragElement()]);
        }

        return vue.createVNode("div", {
          "class": classes.value,
          "onDrop": handleDrop,
          "onDragenter": handleDragenter,
          "onDragleave": handleDragleave,
          "onDragover": function onDragover(event) {
            event.preventDefault();
          }
        }, [content]);
      };
    }
  });

  var ImageCard = vue.defineComponent({
    name: "TImageUpload",
    props: {
      files: props.files,
      loadingFile: {
        type: Object,
        "default": function _default() {
          return null;
        }
      },
      showUploadProgress: props.showUploadProgress,
      placeholder: props.placeholder,
      multiple: props.multiple,
      max: props.max,
      disabled: props.disabled,
      onClick: Function,
      onRemove: Function,
      onImgPreview: Function
    },
    setup: function setup(props2) {
      var disabled = useFormDisabled();

      var _useConfig = useConfig("upload"),
          prefix = _useConfig.classPrefix,
          global = _useConfig.global;

      var UPLOAD_NAME = usePrefixClass("upload");

      var _useCommonClassName = useCommonClassName$2(),
          STATUS = _useCommonClassName.STATUS;

      var showTrigger = vue.computed(function () {
        var multiple = props2.multiple,
            max = props2.max,
            files = props2.files;

        if (multiple) {
          return !max || files && files.length < max;
        }

        return !(files && files[0]);
      });

      var onMaskClick = function onMaskClick(e) {
        !showTrigger.value && props2.onClick(e);
      };

      var renderCardItem = function renderCardItem(file, index) {
        return vue.createVNode("li", {
          "class": "".concat(UPLOAD_NAME.value, "__card-item ").concat(prefix.value, "-is--background")
        }, [vue.createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__card-content ").concat(UPLOAD_NAME.value, "__card-box")
        }, [vue.createVNode("img", {
          "class": "".concat(UPLOAD_NAME.value, "__card-image"),
          "src": file.url
        }, null), vue.createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__card-mask"),
          "onClick": onMaskClick
        }, [vue.createVNode("span", {
          "class": "".concat(UPLOAD_NAME.value, "__card-mask-item")
        }, [vue.createVNode(browse, {
          "onClick": function onClick(_ref) {
            var e = _ref.e;
            e.stopPropagation();
            props2.onImgPreview(e, file);
          }
        }, null)]), !disabled.value && [vue.createVNode("span", {
          "class": "".concat(UPLOAD_NAME.value, "__card-mask-item-divider"),
          "key": "divider"
        }, null), vue.createVNode("span", {
          "class": "".concat(UPLOAD_NAME.value, "__card-mask-item"),
          "key": "delete-icon"
        }, [vue.createVNode(_delete, {
          "onClick": function onClick(_ref2) {
            var e = _ref2.e;
            e.stopPropagation();
            props2.onRemove({
              e: e,
              file: file,
              index: index
            });
          }
        }, null)])]])])]);
      };

      var renderTrigger = function renderTrigger() {
        return vue.createVNode("li", {
          "class": ["".concat(UPLOAD_NAME.value, "__card-item ").concat(prefix.value, "-is--background"), _defineProperty$3({}, STATUS.value.disabled, disabled.value)],
          "onClick": props2.onClick
        }, [props2.showUploadProgress && props2.loadingFile && props2.loadingFile.status === "progress" ? vue.createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__card-container ").concat(UPLOAD_NAME.value, "__card-box")
        }, [vue.createVNode(Loading, null, null), vue.createVNode("p", null, [global.value.progress.uploadingText, " ", Math.min(props2.loadingFile.percent, 99), "%"])]) : vue.createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__card-container ").concat(UPLOAD_NAME.value, "__card-box")
        }, [vue.createVNode(add, null, null), vue.createVNode("p", {
          "class": "".concat(prefix.value, "-size-s")
        }, [props2.placeholder || global.value.triggerUploadText.image])])]);
      };

      return function () {
        return vue.createVNode("ul", {
          "class": "".concat(UPLOAD_NAME.value, "__card")
        }, [props2.files && props2.files.map(function (file, index) {
          return renderCardItem(file, index);
        }), showTrigger.value && renderTrigger()]);
      };
    }
  });

  var FlowList = vue.defineComponent({
    name: "TUploadFlowList",
    props: {
      showUploadProgress: props.showUploadProgress,
      placeholder: props.placeholder,
      autoUpload: props.autoUpload,
      disabled: props.disabled,
      theme: props.theme,
      batchUpload: props.isBatchUpload,
      files: props.files,
      toUploadFiles: Array,
      onRemove: Function,
      onUpload: Function,
      onCancel: Function,
      onChange: Function,
      onDragleave: Function,
      onDragenter: Function,
      onImgPreview: Function
    },
    setup: function setup(props2) {
      var target = vue.ref(null);
      var dragActive = vue.ref(false);
      var renderTNodeJSX = useTNodeJSX();
      var disabled = useFormDisabled();

      var _useConfig = useConfig("upload"),
          prefix = _useConfig.classPrefix,
          global = _useConfig.global;

      var UPLOAD_NAME = usePrefixClass("upload");

      var _useCommonClassName = useCommonClassName$2(),
          SIZE = _useCommonClassName.SIZE;

      var waitingUploadFiles = vue.computed(function () {
        var list = [];
        props2.toUploadFiles.forEach(function (item) {
          var r = props2.files.filter(function (t) {
            return t.name === item.name;
          });

          if (!r.length) {
            list.push(item);
          }
        });
        return list;
      });
      var showInitial = vue.computed(function () {
        var isWaitingEmpty = !waitingUploadFiles.value || !waitingUploadFiles.value.length;
        return (!props2.files || !props2.files.length) && isWaitingEmpty;
      });
      var listFiles = vue.computed(function () {
        if (!props2.files || !props2.files.length) return props2.toUploadFiles;
        return props2.files.concat(waitingUploadFiles.value);
      });
      var failedList = vue.computed(function () {
        return props2.toUploadFiles.filter(function (file) {
          return file.status === "fail";
        });
      });
      var processList = vue.computed(function () {
        return props2.toUploadFiles.filter(function (file) {
          return file.status === "progress";
        });
      });
      var isUploading = vue.computed(function () {
        return !!processList.value.length;
      });
      var allowUpload = vue.computed(function () {
        return Boolean(waitingUploadFiles.value && waitingUploadFiles.value.length) && !isUploading.value;
      });
      var uploadText = vue.computed(function () {
        if (isUploading.value) return "".concat(global.value.progress.uploadingText, "...");
        return failedList.value && failedList.value.length ? global.value.triggerUploadText.reupload : global.value.triggerUploadText.normal;
      });

      var handleDrop = function handleDrop(event) {
        event.preventDefault();
        props2.onChange(event.dataTransfer.files);
        props2.onDragleave(event);
        dragActive.value = false;
      };

      var handleDragenter = function handleDragenter(event) {
        target.value = event.target;
        event.preventDefault();
        props2.onDragenter(event);
        dragActive.value = true;
      };

      var handleDragleave = function handleDragleave(event) {
        if (target.value !== event.target) return;
        event.preventDefault();
        props2.onDragleave(event);
        dragActive.value = false;
      };

      var handleDragover = function handleDragover(event) {
        event.preventDefault();
      };

      var renderDragger = function renderDragger() {
        return vue.createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__flow-empty"),
          "onDrop": handleDrop,
          "onDragenter": handleDragenter,
          "onDragover": handleDragover,
          "onDragleave": handleDragleave
        }, [dragActive.value ? global.value.dragger.dragDropText : global.value.dragger.clickAndDragText]);
      };

      var getStatusMap = function getStatusMap(file) {
        var iconMap = {
          success: vue.createVNode(checkCircleFilled, null, null),
          fail: vue.createVNode(errorCircleFilled, null, null),
          progress: vue.createVNode(Loading, null, null),
          waiting: vue.createVNode(timeFilled, null, null)
        };
        var textMap = {
          success: global.value.progress.successText,
          fail: global.value.progress.failText,
          progress: "".concat(global.value.progress.uploadingText, " ").concat(Math.min(file.percent, 99), "%"),
          waiting: global.value.progress.waitingText
        };
        return {
          iconMap: iconMap,
          textMap: textMap
        };
      };

      var renderStatus = function renderStatus(file) {
        if (!props2.showUploadProgress) return;

        var _getStatusMap = getStatusMap(file),
            iconMap = _getStatusMap.iconMap,
            textMap = _getStatusMap.textMap;

        return vue.createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__flow-status")
        }, [iconMap[file.status], vue.createVNode("span", null, [textMap[file.status]])]);
      };

      var renderNormalActionCol = function renderNormalActionCol(file, index) {
        return vue.createVNode("td", null, [vue.createVNode("span", {
          "class": "".concat(UPLOAD_NAME.value, "__flow-button"),
          "onClick": function onClick(e) {
            return props2.onRemove({
              e: e,
              index: index,
              file: file
            });
          }
        }, [global.value.triggerUploadText["delete"]])]);
      };

      var renderBatchActionCol = function renderBatchActionCol(index) {
        return index === 0 ? vue.createVNode("td", {
          "rowspan": listFiles.value.length,
          "class": "".concat(UPLOAD_NAME.value, "__flow-table__batch-row")
        }, [vue.createVNode("span", {
          "class": "".concat(UPLOAD_NAME.value, "__flow-button"),
          "onClick": function onClick(e) {
            return props2.onRemove({
              e: e,
              index: -1,
              file: null
            });
          }
        }, [global.value.triggerUploadText["delete"]])]) : "";
      };

      var renderFileList = function renderFileList() {
        return props2.theme === "file-flow" && vue.createVNode("table", {
          "class": "".concat(UPLOAD_NAME.value, "__flow-table")
        }, [vue.createVNode("tr", null, [vue.createVNode("th", null, [global.value.file.fileNameText]), vue.createVNode("th", null, [global.value.file.fileSizeText]), vue.createVNode("th", null, [global.value.file.fileStatusText]), vue.createVNode("th", null, [global.value.file.fileOperationText])]), showInitial.value && vue.createVNode("tr", null, [vue.createVNode("td", {
          "colspan": 4
        }, [renderDragger()])]), listFiles.value.map(function (file, index) {
          var showBatchUploadAction = props2.batchUpload && props2.toUploadFiles.length === 0;
          return vue.createVNode("tr", null, [vue.createVNode("td", null, [abridgeName(file.name, 7, 10)]), vue.createVNode("td", null, [returnFileSize(file.size)]), vue.createVNode("td", null, [renderStatus(file)]), showBatchUploadAction ? renderBatchActionCol(index) : renderNormalActionCol(file, index)]);
        })]);
      };

      var renderImgItem = function renderImgItem(file, index) {
        var _getStatusMap2 = getStatusMap(file),
            iconMap = _getStatusMap2.iconMap,
            textMap = _getStatusMap2.textMap;

        return vue.createVNode("li", {
          "class": "".concat(UPLOAD_NAME.value, "__card-item")
        }, [vue.createVNode("div", {
          "class": ["".concat(UPLOAD_NAME.value, "__card-content"), _defineProperty$3({}, "".concat(prefix.value, "-is-bordered"), file.status !== "waiting")]
        }, [["fail", "progress"].includes(file.status) && vue.createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__card-status-wrap")
        }, [iconMap[file.status], vue.createVNode("p", null, [textMap[file.status]])]), (["waiting", "success"].includes(file.status) || !file.status && file.url) && vue.createVNode("img", {
          "class": "".concat(UPLOAD_NAME.value, "__card-image"),
          "src": file.url || "//tdesign.gtimg.com/tdesign-default-img.png"
        }, null), vue.createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__card-mask")
        }, [file.url && vue.createVNode("span", {
          "class": "".concat(UPLOAD_NAME.value, "__card-mask-item")
        }, [vue.createVNode(browse, {
          "onClick": function onClick(_ref2) {
            var e = _ref2.e;
            return props2.onImgPreview(e, file);
          }
        }, null), vue.createVNode("span", {
          "class": "".concat(UPLOAD_NAME.value, "__card-mask-item-divider")
        }, null)]), !disabled.value && vue.createVNode("span", {
          "class": "".concat(UPLOAD_NAME.value, "__card-mask-item"),
          "onClick": function onClick(e) {
            return props2.onRemove({
              e: e,
              index: index,
              file: file
            });
          }
        }, [vue.createVNode(_delete, null, null)])])]), vue.createVNode("p", {
          "class": "".concat(UPLOAD_NAME.value, "__card-name")
        }, [abridgeName(file.name)])]);
      };

      var renderImgList = function renderImgList() {
        return props2.theme === "image-flow" && vue.createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__flow-card-area")
        }, [showInitial.value && renderDragger(), !!listFiles.value.length && vue.createVNode("ul", {
          "class": "".concat(UPLOAD_NAME.value, "__card clearfix")
        }, [listFiles.value.map(function (file, index) {
          return renderImgItem(file, index);
        })])]);
      };

      var renderFooter = function renderFooter() {
        return !props2.autoUpload && vue.createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__flow-bottom")
        }, [vue.createVNode(Button, {
          "theme": "default",
          "onClick": props2.onCancel,
          "disabled": !allowUpload.value
        }, {
          "default": function _default() {
            return [global.value.cancelUploadText];
          }
        }), vue.createVNode(Button, {
          "disabled": !allowUpload.value,
          "theme": "primary",
          "onClick": function onClick(e) {
            return props2.onUpload(waitingUploadFiles.value, e);
          }
        }, {
          "default": function _default() {
            return [uploadText.value];
          }
        })]);
      };

      return function () {
        return vue.createVNode("div", {
          "class": ["".concat(UPLOAD_NAME.value, "__flow"), "".concat(UPLOAD_NAME.value, "__flow-").concat(props2.theme)]
        }, [vue.createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__flow-op")
        }, [renderTNodeJSX("default"), vue.createVNode("small", {
          "class": "".concat(SIZE.value.small, " ").concat(UPLOAD_NAME.value, "__flow-placeholder")
        }, [props2.placeholder])]), renderFileList(), renderImgList(), renderFooter()]);
      };
    }
  });

  var SingleFileProps = {
    file: {
      type: Object,
      "default": function _default() {
        return null;
      }
    },
    loadingFile: {
      type: Object,
      "default": function _default() {
        return null;
      }
    },
    showUploadProgress: props.showUploadProgress,
    theme: props.theme,
    placeholder: props.placeholder,
    onRemove: Function
  };
  var SingleFile = vue.defineComponent({
    name: "TUploadSingleFile",
    props: SingleFileProps,
    setup: function setup(props2) {
      var renderTNodeJSX = useTNodeJSX();

      var _useConfig = useConfig("upload"),
          prefix = _useConfig.classPrefix;

      var UPLOAD_NAME = usePrefixClass("upload");
      var showProgress = vue.computed(function () {
        return !!(props2.loadingFile && props2.loadingFile.status === "progress");
      });
      var inputName = vue.computed(function () {
        var fileName = props2.file && props2.file.name;
        var loadingName = props2.loadingFile && props2.loadingFile.name;
        return showProgress.value ? loadingName : fileName;
      });
      var inputText = vue.computed(function () {
        return inputName.value || props2.placeholder;
      });
      var inputTextClass = vue.computed(function () {
        return ["".concat(prefix.value, "-input__inner"), _defineProperty$3({}, "".concat(UPLOAD_NAME.value, "__placeholder"), !inputName.value)];
      });
      var classes = vue.computed(function () {
        return ["".concat(UPLOAD_NAME.value, "__single"), "".concat(UPLOAD_NAME.value, "__single-").concat(props2.theme)];
      });

      var renderProgress = function renderProgress() {
        if (props2.loadingFile.status === "fail") {
          return vue.createVNode(errorCircleFilled, null, null);
        }

        if (props2.showUploadProgress) {
          return vue.createVNode("div", {
            "class": "".concat(UPLOAD_NAME.value, "__single-progress")
          }, [vue.createVNode(Loading, null, null), vue.createVNode("span", {
            "class": "".concat(UPLOAD_NAME.value, "__single-percent")
          }, [Math.min(props2.loadingFile.percent, 99), "%"])]);
        }
      };

      var renderFilePreviewAsText = function renderFilePreviewAsText() {
        if (!inputName.value || props2.theme !== "file") return;
        return vue.createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__single-display-text ").concat(UPLOAD_NAME.value, "__display-text--margin")
        }, [vue.createVNode("span", {
          "class": "".concat(UPLOAD_NAME.value, "__single-name")
        }, [inputName.value]), showProgress.value ? renderProgress() : vue.createVNode(closeCircleFilled, {
          "class": "".concat(UPLOAD_NAME.value, "__icon-delete"),
          "onClick": function onClick(_ref2) {
            var e = _ref2.e;
            return props2.onRemove(e);
          }
        }, null)]);
      };

      var renderFilePreviewAsInput = function renderFilePreviewAsInput() {
        if (props2.theme !== "file-input") return;

        var renderResult = function renderResult() {
          if (!!props2.loadingFile && props2.loadingFile.status === "fail") {
            return vue.createVNode(errorCircleFilled, null, null);
          }

          if (props2.file && props2.file.name && !props2.loadingFile) {
            return vue.createVNode(checkCircleFilled, null, null);
          }

          return "";
        };

        return vue.createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__single-input-preview ").concat(prefix.value, "-input")
        }, [vue.createVNode("div", {
          "class": inputTextClass.value
        }, [vue.createVNode("span", {
          "class": "".concat(UPLOAD_NAME.value, "__single-input-text")
        }, [abridgeName(inputText.value, 4, 6)]), showProgress.value && renderProgress(), renderResult()])]);
      };

      return function () {
        return vue.createVNode("div", {
          "class": classes.value
        }, [renderFilePreviewAsInput(), renderTNodeJSX("default"), renderFilePreviewAsText()]);
      };
    }
  });

  var Stack = _Stack,
      baseIsEqual$1 = _baseIsEqual;
  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$1 = 1,
      COMPARE_UNORDERED_FLAG$1 = 2;
  /**
   * The base implementation of `_.isMatch` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Object} source The object of property values to match.
   * @param {Array} matchData The property names, values, and compare flags to match.
   * @param {Function} [customizer] The function to customize comparisons.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   */

  function baseIsMatch$1(object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }

    object = Object(object);

    while (index--) {
      var data = matchData[index];

      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }

    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack();

        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }

        if (!(result === undefined ? baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {
          return false;
        }
      }
    }

    return true;
  }

  var _baseIsMatch = baseIsMatch$1;

  var isObject = isObject_1;
  /**
   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` if suitable for strict
   *  equality comparisons, else `false`.
   */

  function isStrictComparable$2(value) {
    return value === value && !isObject(value);
  }

  var _isStrictComparable = isStrictComparable$2;

  var isStrictComparable$1 = _isStrictComparable,
      keys = keys_1;
  /**
   * Gets the property names, values, and compare flags of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the match data of `object`.
   */

  function getMatchData$1(object) {
    var result = keys(object),
        length = result.length;

    while (length--) {
      var key = result[length],
          value = object[key];
      result[length] = [key, value, isStrictComparable$1(value)];
    }

    return result;
  }

  var _getMatchData = getMatchData$1;

  /**
   * A specialized version of `matchesProperty` for source values suitable
   * for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */

  function matchesStrictComparable$2(key, srcValue) {
    return function (object) {
      if (object == null) {
        return false;
      }

      return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
    };
  }

  var _matchesStrictComparable = matchesStrictComparable$2;

  var baseIsMatch = _baseIsMatch,
      getMatchData = _getMatchData,
      matchesStrictComparable$1 = _matchesStrictComparable;
  /**
   * The base implementation of `_.matches` which doesn't clone `source`.
   *
   * @private
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new spec function.
   */

  function baseMatches$1(source) {
    var matchData = getMatchData(source);

    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
    }

    return function (object) {
      return object === source || baseIsMatch(object, source, matchData);
    };
  }

  var _baseMatches = baseMatches$1;

  var baseIsEqual = _baseIsEqual,
      get = get_1,
      hasIn = hasIn_1,
      isKey$1 = _isKey,
      isStrictComparable = _isStrictComparable,
      matchesStrictComparable = _matchesStrictComparable,
      toKey$1 = _toKey;
  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;
  /**
   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
   *
   * @private
   * @param {string} path The path of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */

  function baseMatchesProperty$1(path, srcValue) {
    if (isKey$1(path) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey$1(path), srcValue);
    }

    return function (object) {
      var objValue = get(object, path);
      return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    };
  }

  var _baseMatchesProperty = baseMatchesProperty$1;

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */

  function baseProperty$1(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  var _baseProperty = baseProperty$1;

  var baseGet = _baseGet;
  /**
   * A specialized version of `baseProperty` which supports deep paths.
   *
   * @private
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   */

  function basePropertyDeep$1(path) {
    return function (object) {
      return baseGet(object, path);
    };
  }

  var _basePropertyDeep = basePropertyDeep$1;

  var baseProperty = _baseProperty,
      basePropertyDeep = _basePropertyDeep,
      isKey = _isKey,
      toKey = _toKey;
  /**
   * Creates a function that returns the value at `path` of a given object.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   * @example
   *
   * var objects = [
   *   { 'a': { 'b': 2 } },
   *   { 'a': { 'b': 1 } }
   * ];
   *
   * _.map(objects, _.property('a.b'));
   * // => [2, 1]
   *
   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
   * // => [1, 2]
   */

  function property$1(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
  }

  var property_1 = property$1;

  var baseMatches = _baseMatches,
      baseMatchesProperty = _baseMatchesProperty,
      identity = identity_1,
      isArray = isArray_1,
      property = property_1;
  /**
   * The base implementation of `_.iteratee`.
   *
   * @private
   * @param {*} [value=_.identity] The value to convert to an iteratee.
   * @returns {Function} Returns the iteratee.
   */

  function baseIteratee$1(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == 'function') {
      return value;
    }

    if (value == null) {
      return identity;
    }

    if (_typeof$2(value) == 'object') {
      return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
    }

    return property(value);
  }

  var _baseIteratee = baseIteratee$1;

  var baseFindIndex = _baseFindIndex,
      baseIteratee = _baseIteratee,
      toInteger = toInteger_1;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeMax = Math.max;
  /**
   * This method is like `_.find` except that it returns the index of the first
   * element `predicate` returns truthy for instead of the element itself.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the found element, else `-1`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'active': false },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': true }
   * ];
   *
   * _.findIndex(users, function(o) { return o.user == 'barney'; });
   * // => 0
   *
   * // The `_.matches` iteratee shorthand.
   * _.findIndex(users, { 'user': 'fred', 'active': false });
   * // => 1
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.findIndex(users, ['active', false]);
   * // => 0
   *
   * // The `_.property` iteratee shorthand.
   * _.findIndex(users, 'active');
   * // => 2
   */

  function findIndex(array, predicate, fromIndex) {
    var length = array == null ? 0 : array.length;

    if (!length) {
      return -1;
    }

    var index = fromIndex == null ? 0 : toInteger(fromIndex);

    if (index < 0) {
      index = nativeMax(length + index, 0);
    }

    return baseFindIndex(array, baseIteratee(predicate), index);
  }

  var findIndex_1 = findIndex;

  var baseDifference = _baseDifference,
      baseRest = _baseRest,
      isArrayLikeObject = isArrayLikeObject_1;
  /**
   * Creates an array excluding all given values using
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * **Note:** Unlike `_.pull`, this method returns a new array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {...*} [values] The values to exclude.
   * @returns {Array} Returns the new array of filtered values.
   * @see _.difference, _.xor
   * @example
   *
   * _.without([2, 1, 2, 3], 1, 2);
   * // => [3]
   */

  var without = baseRest(function (array, values) {
    return isArrayLikeObject(array) ? baseDifference(array, values) : [];
  });
  var without_1 = without;

  function xhr(_ref) {
    var _ref$method = _ref.method,
        method = _ref$method === void 0 ? "POST" : _ref$method,
        action = _ref.action,
        _ref$withCredentials = _ref.withCredentials,
        withCredentials = _ref$withCredentials === void 0 ? false : _ref$withCredentials,
        _ref$headers = _ref.headers,
        headers = _ref$headers === void 0 ? {} : _ref$headers,
        _ref$data = _ref.data,
        data = _ref$data === void 0 ? {} : _ref$data,
        file = _ref.file,
        files = _ref.files,
        _ref$name = _ref.name,
        name = _ref$name === void 0 ? "file" : _ref$name,
        onError = _ref.onError,
        onProgress = _ref.onProgress,
        onSuccess = _ref.onSuccess;
    var innerFiles = files || [];
    var xhr2 = new XMLHttpRequest();

    if (withCredentials) {
      xhr2.withCredentials = true;
    }

    var formData = new FormData();
    var sendData = typeof data === "function" ? data(file) : data;
    Object.keys(sendData).forEach(function (key) {
      formData.append(key, data[key]);
    });
    innerFiles.forEach(function (f) {
      formData.append(name, f && f.raw);
    });
    xhr2.open(method, action, true);
    Object.keys(headers).forEach(function (key) {
      xhr2.setRequestHeader(key, headers[key]);
    });

    xhr2.onerror = function (event) {
      return onError({
        event: event,
        file: file,
        files: innerFiles
      });
    };

    if (xhr2.upload) {
      xhr2.upload.onprogress = function (event) {
        var percent = 0;

        if (event.total > 0) {
          percent = Math.round(event.loaded / event.total * 100);
        }

        onProgress({
          event: event,
          percent: percent,
          file: file,
          files: innerFiles
        });
      };
    }

    xhr2.onload = function (event) {
      var response;
      var isFail = xhr2.status < 200 || xhr2.status >= 300;

      if (isFail) {
        return onError({
          event: event,
          file: file,
          files: innerFiles,
          response: response
        });
      }

      var text = xhr2.responseText || xhr2.response;

      try {
        response = JSON.parse(text);
      } catch (e) {
        response = text;
      }

      onSuccess({
        event: event,
        file: file,
        files: innerFiles,
        response: response
      });
    };

    xhr2.send(formData);
    return xhr2;
  }

  function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var useUploadProgress = function useUploadProgress(props, uploadCtx) {
    var handleProgress = function handleProgress(_ref) {
      var _props$onProgress;

      var event = _ref.event,
          file = _ref.file,
          currentFiles = _ref.files,
          percent = _ref.percent,
          _ref$type = _ref.type,
          type = _ref$type === void 0 ? "real" : _ref$type;
      var innerFiles = Array.isArray(currentFiles) ? currentFiles : [file];
      if ((innerFiles === null || innerFiles === void 0 ? void 0 : innerFiles.length) <= 0) return log.error("Uploader", "Progress Error files");
      innerFiles.forEach(function (file2) {
        file2.percent = Math.min(percent, 100);
        uploadCtx.loadingFile = file2;
      });
      var progressCtx = {
        percent: percent,
        e: event,
        file: file,
        type: type,
        currentFiles: innerFiles
      };
      (_props$onProgress = props.onProgress) === null || _props$onProgress === void 0 ? void 0 : _props$onProgress.call(props, progressCtx);
    };

    var onError = function onError(options) {
      var _res, _props$onFail;

      var event = options.event,
          file = options.file,
          files = options.files,
          response = options.response,
          resFormatted = options.resFormatted;
      var innerFiles = Array.isArray(files) ? files : [file];
      innerFiles.forEach(function (file2) {
        file2.status = "fail";
        uploadCtx.loadingFile = file2;
      });
      var res = response;

      if (!resFormatted && typeof props.formatResponse === "function") {
        res = props.formatResponse(response, {
          file: file,
          currentFiles: files
        });
      }

      uploadCtx.errorMsg = (_res = res) === null || _res === void 0 ? void 0 : _res.error;
      var context = {
        e: event,
        file: uploadCtx.uploadInOneRequest ? null : innerFiles[0],
        currentFiles: innerFiles
      };
      (_props$onFail = props.onFail) === null || _props$onFail === void 0 ? void 0 : _props$onFail.call(props, context);
      uploadCtx.loadingFile = null;
    };

    var handleSuccess = function handleSuccess(_ref2) {
      var _res2, _props$onSuccess;

      var event = _ref2.event,
          file = _ref2.file,
          currentFiles = _ref2.files,
          response = _ref2.response;
      var innerFiles = Array.isArray(currentFiles) ? currentFiles : [file];
      if ((innerFiles === null || innerFiles === void 0 ? void 0 : innerFiles.length) <= 0) return log.error("Uploader", "success no files");
      innerFiles.forEach(function (file2) {
        file2.status = "success";
      });
      var res = response;

      if (typeof props.formatResponse === "function") {
        res = props.formatResponse(response, {
          file: uploadCtx.uploadInOneRequest ? null : innerFiles[0],
          currentFiles: innerFiles
        });
      }

      if ((_res2 = res) !== null && _res2 !== void 0 && _res2.error) {
        onError({
          event: event,
          file: uploadCtx.uploadInOneRequest ? null : innerFiles[0],
          files: innerFiles,
          response: res,
          resFormatted: true
        });
        return;
      }

      if (!uploadCtx.uploadInOneRequest) {
        innerFiles[0].url = res.url || innerFiles[0].url;
      }

      uploadCtx.toUploadFiles = without_1.apply(void 0, [uploadCtx.toUploadFiles].concat(_toConsumableArray(innerFiles)));
      var newFiles = innerFiles.map(function (file2) {
        return _objectSpread$2(_objectSpread$2({}, file2), {}, {
          response: res
        });
      });
      var uploadedFiles = props.multiple ? uploadCtx.uploadValue.concat(newFiles) : newFiles;
      var context = {
        e: event,
        response: res,
        trigger: "upload-success"
      };
      uploadCtx.setUploadValue(uploadedFiles, context);
      var sContext = {
        file: uploadCtx.uploadInOneRequest ? null : newFiles[0],
        fileList: uploadedFiles,
        currentFiles: newFiles,
        e: event,
        response: res
      };
      (_props$onSuccess = props.onSuccess) === null || _props$onSuccess === void 0 ? void 0 : _props$onSuccess.call(props, sContext);
      uploadCtx.loadingFile = null;
    };

    var handleMockProgress = function handleMockProgress(files) {
      var timer = setInterval(function () {
        files.forEach(function (file) {
          if (file.status === "success" || file.percent >= 99) {
            clearInterval(timer);
            return;
          }

          file.percent += 1;
        });
        var percent = files[0].percent;
        handleProgress({
          files: files,
          percent: percent,
          type: "mock"
        });
      }, 10);
    };

    return {
      handleProgress: handleProgress,
      handleMockProgress: handleMockProgress,
      handleSuccess: handleSuccess,
      onError: onError
    };
  };
  var useUpload = function useUpload(props, uploadCtx) {
    var xhrReq = vue.ref(null);

    var _useConfig = useConfig("upload"),
        global = _useConfig.global,
        t = _useConfig.t;

    var _useUploadProgress = useUploadProgress(props, uploadCtx),
        handleProgress = _useUploadProgress.handleProgress,
        handleMockProgress = _useUploadProgress.handleMockProgress,
        handleSuccess = _useUploadProgress.handleSuccess,
        onError = _useUploadProgress.onError;

    var handleSizeLimit = function handleSizeLimit(fileSize) {
      var sizeLimit = typeof props.sizeLimit === "number" ? {
        size: props.sizeLimit,
        unit: "KB"
      } : props.sizeLimit;
      var rSize = isOverSizeLimit(fileSize / 1024, sizeLimit.size, sizeLimit.unit);

      if (!rSize) {
        uploadCtx.errorMsg = sizeLimit.message ? t(sizeLimit.message, {
          sizeLimit: sizeLimit.size
        }) : "".concat(t(global.value.sizeLimitMessage, {
          sizeLimit: sizeLimit.size
        }), " ").concat(sizeLimit.unit);
      }

      return rSize;
    };

    var handleBeforeUpload = function handleBeforeUpload(file) {
      if (typeof props.beforeUpload === "function") {
        var r = props.beforeUpload(file);
        if (r instanceof Promise) return r;
        return new Promise(function (resolve) {
          return resolve(r);
        });
      }

      return new Promise(function (resolve) {
        if (props.sizeLimit) {
          resolve(handleSizeLimit(file.size));
        }

        resolve(true);
      });
    };

    var handleRequestMethodResponse = function handleRequestMethodResponse(res) {
      if (!res) {
        log.error("Upload", "`requestMethodResponse` is required.");
        return false;
      }

      if (!res.status) {
        log.error("Upload", "`requestMethodResponse.status` is missing, which value is `success` or `fail`");
        return false;
      }

      if (!["success", "fail"].includes(res.status)) {
        log.error("Upload", "`requestMethodResponse.status` must be `success` or `fail`");
        return false;
      }

      if (res.status === "success" && (!res.response || !res.response.url)) {
        log.warn("Upload", "`requestMethodResponse.response.url` is required, when `status` is `success`");
      }

      return true;
    };

    var handleRequestMethod = function handleRequestMethod(files) {
      if (!isFunction_1(props.requestMethod)) {
        log.warn("Upload", "`requestMethod` must be a function.");
        return;
      }

      var requestMethodParam = uploadCtx.uploadInOneRequest ? files : files[0];
      props.requestMethod(requestMethodParam).then(function (res) {
        if (!handleRequestMethodResponse(res)) return;

        if (res.status === "success") {
          handleSuccess({
            files: files,
            response: res.response
          });
        } else if (res.status === "fail") {
          var r = res.response || {};
          onError({
            event: null,
            file: uploadCtx.uploadInOneRequest ? null : files[0],
            files: files,
            response: _objectSpread$2(_objectSpread$2({}, r), {}, {
              error: res.error
            })
          });
        }
      });
    };

    var upload = /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(currentFiles) {
        var innerFiles, request;
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                innerFiles = Array.isArray(currentFiles) ? currentFiles : [currentFiles];

                if (!(!props.action && !props.requestMethod)) {
                  _context.next = 4;
                  break;
                }

                log.error("Upload", "one of action and requestMethod must be exist.");
                return _context.abrupt("return");

              case 4:
                innerFiles.forEach(function (file) {
                  file.status = "progress";
                  uploadCtx.loadingFile = file;
                });

                if (props.requestMethod) {
                  handleRequestMethod(innerFiles);
                } else {
                  if (props.useMockProgress) {
                    handleMockProgress(innerFiles);
                  }

                  request = xhr;
                  xhrReq.value = request({
                    action: props.action,
                    data: props.data,
                    files: innerFiles,
                    name: props.name,
                    headers: props.headers,
                    withCredentials: props.withCredentials,
                    onError: onError,
                    onProgress: handleProgress,
                    onSuccess: handleSuccess,
                    method: props.method
                  });
                }

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function upload(_x) {
        return _ref3.apply(this, arguments);
      };
    }();

    var uploadFiles = function uploadFiles(files) {
      var _uploadCtx$uploadValu;

      if (uploadCtx.canBatchUpload && ((_uploadCtx$uploadValu = uploadCtx.uploadValue) === null || _uploadCtx$uploadValu === void 0 ? void 0 : _uploadCtx$uploadValu.length) > 0) {
        var context = {
          trigger: "batch-clear"
        };
        uploadCtx.setUploadValue([], context);
      }

      var tmpFiles = _toConsumableArray(files);

      if (props.max) {
        tmpFiles = tmpFiles.slice(0, props.max - uploadCtx.uploadValue.length);

        if (tmpFiles.length !== files.length) {
          console.warn("TDesign Upload Warn: you can only upload ".concat(props.max, " files"));
        }
      }

      tmpFiles.forEach(function (fileRaw) {
        var file = fileRaw;

        if (typeof props.format === "function") {
          file = props.format(fileRaw);
        }

        var uploadFile = _objectSpread$2({
          raw: fileRaw,
          lastModified: fileRaw.lastModified,
          name: fileRaw.name,
          size: fileRaw.size,
          type: fileRaw.type,
          percent: 0,
          status: "waiting"
        }, file);

        var reader = new FileReader();
        reader.readAsDataURL(fileRaw);

        reader.onload = function (event) {
          uploadFile.url = event.target.result;
        };

        handleBeforeUpload(file).then(function (canUpload) {
          if (!canUpload) return;
          var newFiles = uploadCtx.toUploadFiles.concat();
          newFiles.push(uploadFile);
          uploadCtx.toUploadFiles = _toConsumableArray(new Set(newFiles));
          uploadCtx.loadingFile = uploadFile;

          if (props.autoUpload) {
            upload(uploadFile);
          }
        });
      });
    };

    return {
      uploadFiles: uploadFiles,
      upload: upload,
      xhrReq: xhrReq
    };
  };

  function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var useComponentsStatus = function useComponentsStatus(props, uploadCtx) {
    var showUploadList = vue.computed(function () {
      return props.multiple && ["file-flow", "image-flow"].includes(props.theme);
    });
    var showTips = vue.computed(function () {
      if (props.theme === "file") {
        var hasNoFile = (!uploadCtx.uploadValue || !uploadCtx.uploadValue.length) && !uploadCtx.loadingFile;
        return props.tips && hasNoFile;
      }

      return Boolean(props.tips);
    });
    var showErrorMsg = vue.computed(function () {
      return !showUploadList.value && !!uploadCtx.errorMsg;
    });
    var singleDraggable = vue.computed(function () {
      return !props.multiple && props.draggable && ["file", "file-input", "image"].includes(props.theme);
    });
    return {
      showUploadList: showUploadList,
      showTips: showTips,
      showErrorMsg: showErrorMsg,
      singleDraggable: singleDraggable
    };
  };
  var useImgPreview = function useImgPreview(props) {
    var showImageViewUrl = vue.ref("");
    var showImageViewDialog = vue.ref(false);

    var handlePreviewImg = function handlePreviewImg(event, file) {
      var _props$onPreview;

      if (!file || !file.url) return log.error("Uploader", "Preview Error file");
      showImageViewUrl.value = file.url;
      showImageViewDialog.value = true;
      var previewCtx = {
        file: file,
        e: event
      };
      (_props$onPreview = props.onPreview) === null || _props$onPreview === void 0 ? void 0 : _props$onPreview.call(props, previewCtx);
    };

    var cancelPreviewImgDialog = function cancelPreviewImgDialog() {
      showImageViewDialog.value = false;
      var timer = setTimeout(function () {
        showImageViewUrl.value = null;
        clearTimeout(timer);
        timer = null;
      }, 500);
    };

    return {
      showImageViewUrl: showImageViewUrl,
      showImageViewDialog: showImageViewDialog,
      handlePreviewImg: handlePreviewImg,
      cancelPreviewImgDialog: cancelPreviewImgDialog
    };
  };
  var useDragger = function useDragger(props, disabled) {
    var dragActive = vue.ref(false);

    var handleDragenter = function handleDragenter(e) {
      var _props$onDragenter;

      if (disabled.value) return;
      dragActive.value = true;
      (_props$onDragenter = props.onDragenter) === null || _props$onDragenter === void 0 ? void 0 : _props$onDragenter.call(props, {
        e: e
      });
    };

    var handleDragleave = function handleDragleave(e) {
      var _props$onDragleave;

      if (disabled.value) return;
      dragActive.value = false;
      (_props$onDragleave = props.onDragleave) === null || _props$onDragleave === void 0 ? void 0 : _props$onDragleave.call(props, {
        e: e
      });
    };

    return {
      handleDragenter: handleDragenter,
      handleDragleave: handleDragleave,
      dragActive: dragActive
    };
  };
  var useRemove = function useRemove(props, uploadCtx) {
    var handleSingleRemove = function handleSingleRemove(e) {
      var _props$onRemove;

      var changeCtx = {
        trigger: "remove"
      };
      if (uploadCtx.loadingFile) uploadCtx.loadingFile = null;
      uploadCtx.errorMsg = "";
      uploadCtx.setUploadValue([], changeCtx);
      (_props$onRemove = props.onRemove) === null || _props$onRemove === void 0 ? void 0 : _props$onRemove.call(props, {
        e: e
      });
    };

    var handleFileInputRemove = function handleFileInputRemove(e) {
      e === null || e === void 0 ? void 0 : e.stopPropagation();
      handleSingleRemove(e);
    };

    var handleMultipleRemove = function handleMultipleRemove(options) {
      var _props$onRemove2;

      var files = [];

      if (!uploadCtx.canBatchUpload) {
        files = uploadCtx.uploadValue.concat();
        files.splice(options.index, 1);
      } else {
        files = [];
        options.files = uploadCtx.uploadValue.concat();
      }

      var changeCtx = _objectSpread$1({
        trigger: "remove"
      }, options);

      uploadCtx.setUploadValue(files, changeCtx);
      (_props$onRemove2 = props.onRemove) === null || _props$onRemove2 === void 0 ? void 0 : _props$onRemove2.call(props, options);
    };

    var handleListRemove = function handleListRemove(context) {
      var file = context.file;
      var index = findIndex_1(uploadCtx.toUploadFiles, function (o) {
        return o.name === (file === null || file === void 0 ? void 0 : file.name);
      });

      if (index >= 0) {
        uploadCtx.toUploadFiles.splice(index, 1);
      } else {
        var index2 = findIndex_1(uploadCtx.uploadValue, function (o) {
          return o.name === (file === null || file === void 0 ? void 0 : file.name);
        });
        handleMultipleRemove({
          e: context.e,
          index: index2
        });
      }
    };

    return {
      handleFileInputRemove: handleFileInputRemove,
      handleSingleRemove: handleSingleRemove,
      handleMultipleRemove: handleMultipleRemove,
      handleListRemove: handleListRemove
    };
  };
  var useActions = function useActions(props, uploadCtx, disabled) {
    var _useUpload = useUpload(props, uploadCtx),
        uploadFiles = _useUpload.uploadFiles,
        upload = _useUpload.upload,
        xhrReq = _useUpload.xhrReq;

    var inputRef = vue.ref(null);

    var handleChange = function handleChange(event) {
      var files = event.target.files;
      if (disabled.value) return;
      uploadFiles(files);
      inputRef.value.value = "";
    };

    var multipleUpload = function multipleUpload(currentFiles) {
      if (props.uploadAllFilesInOneRequest) {
        upload(currentFiles);
      } else {
        currentFiles.forEach(function (file) {
          upload(file);
        });
      }
    };

    var triggerUpload = function triggerUpload() {
      if (disabled.value) return;
      inputRef.value.click();
    };

    var cancelUpload = function cancelUpload() {
      if (uploadCtx.loadingFile) {
        var _props$onCancelUpload;

        if (!props.requestMethod) {
          xhrReq.value && xhrReq.value.abort();
          uploadCtx.toUploadFiles = [];
        }

        (_props$onCancelUpload = props.onCancelUpload) === null || _props$onCancelUpload === void 0 ? void 0 : _props$onCancelUpload.call(props);
        uploadCtx.loadingFile = null;
      }

      inputRef.value.value = "";
    };

    var handleDragChange = function handleDragChange(files) {
      if (disabled.value) return;
      uploadFiles(files);
    };

    return {
      handleChange: handleChange,
      multipleUpload: multipleUpload,
      triggerUpload: triggerUpload,
      cancelUpload: cancelUpload,
      handleDragChange: handleDragChange,
      upload: upload,
      inputRef: inputRef
    };
  };
  var useBatchUpload = function useBatchUpload(props) {
    var uploadInOneRequest = vue.computed(function () {
      return props.multiple && props.uploadAllFilesInOneRequest;
    });
    var canBatchUpload = vue.computed(function () {
      return uploadInOneRequest.value && props.isBatchUpload;
    });
    return {
      uploadInOneRequest: uploadInOneRequest,
      canBatchUpload: canBatchUpload
    };
  };

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _isSlot(s) {
    return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
  }

  var _Upload = vue.defineComponent({
    name: "TUpload",
    props: props,
    setup: function setup(props2, _ref) {
      var expose = _ref.expose;
      var renderTNodeContent = useContent();

      var _useConfig = useConfig("upload"),
          prefix = _useConfig.classPrefix,
          global = _useConfig.global;

      var UPLOAD_NAME = usePrefixClass("upload");

      var _toRefs = vue.toRefs(props2),
          files = _toRefs.files,
          modelValue = _toRefs.modelValue;

      var _useBatchUpload = useBatchUpload(props2),
          canBatchUpload = _useBatchUpload.canBatchUpload,
          uploadInOneRequest = _useBatchUpload.uploadInOneRequest;

      var _useVModel = useVModel(files, modelValue, props2.defaultFiles || [], props2.onChange, "files"),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          uploadValue = _useVModel2[0],
          setUploadValue = _useVModel2[1];

      var uploadCtx = vue.reactive({
        uploadValue: uploadValue,
        setUploadValue: setUploadValue,
        uploadInOneRequest: uploadInOneRequest,
        canBatchUpload: canBatchUpload,
        loadingFile: null,
        toUploadFiles: [],
        errorMsg: ""
      });
      var disabled = useFormDisabled();

      var _useComponentsStatus = useComponentsStatus(props2, uploadCtx),
          showUploadList = _useComponentsStatus.showUploadList,
          showTips = _useComponentsStatus.showTips,
          showErrorMsg = _useComponentsStatus.showErrorMsg,
          singleDraggable = _useComponentsStatus.singleDraggable;

      var _useImgPreview = useImgPreview(props2),
          showImageViewUrl = _useImgPreview.showImageViewUrl,
          showImageViewDialog = _useImgPreview.showImageViewDialog,
          handlePreviewImg = _useImgPreview.handlePreviewImg,
          cancelPreviewImgDialog = _useImgPreview.cancelPreviewImgDialog;

      var _useDragger = useDragger(props2, disabled),
          handleDragenter = _useDragger.handleDragenter,
          handleDragleave = _useDragger.handleDragleave,
          dragActive = _useDragger.dragActive;

      var _useRemove = useRemove(props2, uploadCtx),
          handleFileInputRemove = _useRemove.handleFileInputRemove,
          handleSingleRemove = _useRemove.handleSingleRemove,
          handleMultipleRemove = _useRemove.handleMultipleRemove,
          handleListRemove = _useRemove.handleListRemove;

      var _useActions = useActions(props2, uploadCtx, disabled),
          handleChange = _useActions.handleChange,
          multipleUpload = _useActions.multipleUpload,
          triggerUpload = _useActions.triggerUpload,
          cancelUpload = _useActions.cancelUpload,
          handleDragChange = _useActions.handleDragChange,
          upload$1 = _useActions.upload,
          inputRef = _useActions.inputRef;

      expose({
        triggerUpload: triggerUpload
      });

      var renderInput = function renderInput() {
        return vue.createVNode("input", {
          "ref": inputRef,
          "type": "file",
          "disabled": disabled.value,
          "onChange": handleChange,
          "multiple": props2.multiple,
          "accept": props2.accept,
          "hidden": true
        }, null);
      };

      var renderSingleDisplay = function renderSingleDisplay(triggerElement) {
        var _uploadValue$value;

        return !props2.draggable && ["file", "file-input"].includes(props2.theme) && vue.createVNode(SingleFile, {
          "file": uploadValue.value && uploadValue.value[0],
          "loadingFile": uploadCtx.loadingFile,
          "theme": props2.theme,
          "onRemove": handleSingleRemove,
          "showUploadProgress": props2.showUploadProgress,
          "placeholder": props2.placeholder
        }, {
          "default": function _default() {
            return [vue.createVNode("div", {
              "class": "".concat(prefix.value, "-upload__trigger"),
              "onclick": triggerUpload
            }, [triggerElement, !!(props2.theme === "file-input" && (_uploadValue$value = uploadValue.value) !== null && _uploadValue$value !== void 0 && _uploadValue$value.length) && vue.createVNode(Button, {
              "theme": "primary",
              "variant": "text",
              "onClick": handleFileInputRemove
            }, {
              "default": function _default() {
                return ["\u5220\u9664"];
              }
            })])];
          }
        });
      };

      var renderDraggerTrigger = function renderDraggerTrigger() {
        var params = {
          dragActive: dragActive.value,
          uploadingFile: props2.multiple ? uploadCtx.toUploadFiles : uploadCtx.loadingFile
        };
        var triggerElement = renderTNodeContent("default", "trigger", {
          params: params
        });

        if (!Array.isArray(triggerElement)) {
          triggerElement = {};
        }

        return vue.createVNode(Dragger, {
          "showUploadProgress": props2.showUploadProgress,
          "loadingFile": uploadCtx.loadingFile,
          "file": uploadValue.value && uploadValue.value[0],
          "theme": props2.theme,
          "autoUpload": props2.autoUpload,
          "onChange": handleDragChange,
          "onDragenter": handleDragenter,
          "onDragleave": handleDragleave,
          "onCancel": cancelUpload,
          "onClick": triggerUpload,
          "onRemove": handleSingleRemove,
          "onUpload": upload$1
        }, _isSlot(triggerElement) ? triggerElement : {
          "default": function _default() {
            return [triggerElement];
          }
        });
      };

      var uploadListTriggerText = vue.computed(function () {
        var _uploadCtx$toUploadFi, _uploadCtx$uploadValu;

        var uploadText = global.value.triggerUploadText.fileInput;

        if (((_uploadCtx$toUploadFi = uploadCtx.toUploadFiles) === null || _uploadCtx$toUploadFi === void 0 ? void 0 : _uploadCtx$toUploadFi.length) > 0 || ((_uploadCtx$uploadValu = uploadCtx.uploadValue) === null || _uploadCtx$uploadValu === void 0 ? void 0 : _uploadCtx$uploadValu.length) > 0) {
          var _uploadCtx$uploadValu2;

          if (props2.theme === "file-input" || ((_uploadCtx$uploadValu2 = uploadCtx.uploadValue) === null || _uploadCtx$uploadValu2 === void 0 ? void 0 : _uploadCtx$uploadValu2.length) > 0 && canBatchUpload.value) {
            uploadText = global.value.triggerUploadText.reupload;
          } else {
            uploadText = global.value.triggerUploadText.continueUpload;
          }
        }

        return uploadText;
      });

      var renderTrigger = function renderTrigger() {
        var getDefaultTrigger = function getDefaultTrigger() {
          if (props2.theme === "file-input" || showUploadList.value) {
            return vue.createVNode(vue.resolveComponent("t-button"), {
              "variant": "outline"
            }, {
              "default": function _default() {
                return [global.value.triggerUploadText.fileInput];
              }
            });
          }

          var iconSlot = {
            icon: function icon() {
              return vue.createVNode(upload, null, null);
            }
          };
          return vue.createVNode(Button, {
            "variant": "outline"
          }, _objectSpread({
            "default": function _default() {
              return [uploadListTriggerText.value];
            }
          }, iconSlot));
        };

        var defaultNode = getDefaultTrigger();
        return renderTNodeContent("default", "trigger", defaultNode);
      };

      var renderCustom = function renderCustom(triggerElement) {
        if (props2.theme !== "custom") return;
        return props2.draggable ? renderDraggerTrigger() : vue.createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value, "__trigger"),
          "onclick": triggerUpload
        }, [triggerElement]);
      };

      var renderImgCard = function renderImgCard() {
        return !props2.draggable && props2.theme === "image" && vue.createVNode(ImageCard, {
          "files": uploadValue.value,
          "loadingFile": uploadCtx.loadingFile,
          "showUploadProgress": props2.showUploadProgress,
          "placeholder": props2.placeholder,
          "multiple": props2.multiple,
          "max": props2.max,
          "disabled": disabled.value,
          "onClick": triggerUpload,
          "onRemove": handleMultipleRemove,
          "onImgPreview": handlePreviewImg
        }, null);
      };

      var renderFlowList = function renderFlowList(triggerElement) {
        return showUploadList.value && vue.createVNode(FlowList, {
          "files": uploadValue.value,
          "placeholder": props2.placeholder,
          "autoUpload": props2.autoUpload,
          "toUploadFiles": uploadCtx.toUploadFiles,
          "theme": props2.theme,
          "batchUpload": uploadCtx.canBatchUpload,
          "showUploadProgress": props2.showUploadProgress,
          "onRemove": handleListRemove,
          "onUpload": multipleUpload,
          "onCancel": cancelUpload,
          "onImgPreview": handlePreviewImg,
          "onChange": handleDragChange,
          "onDragenter": handleDragenter,
          "onDragleave": handleDragleave
        }, {
          "default": function _default() {
            return [vue.createVNode("div", {
              "class": "".concat(UPLOAD_NAME.value, "__trigger"),
              "onclick": triggerUpload
            }, [triggerElement])];
          }
        });
      };

      var renderDialog = function renderDialog() {
        return ["image", "image-flow", "custom"].includes(props2.theme) && vue.createVNode(Dialog, {
          "visible": showImageViewDialog.value,
          "showOverlay": true,
          "width": "auto",
          "top": "10%",
          "class": "".concat(UPLOAD_NAME.value, "__dialog"),
          "footer": false,
          "header": false,
          "onClose": cancelPreviewImgDialog
        }, {
          "default": function _default() {
            return [vue.createVNode("div", {
              "class": "".concat(prefix.value, "__dialog-body-img-box")
            }, [vue.createVNode("img", {
              "src": showImageViewUrl.value,
              "alt": ""
            }, null)])];
          }
        });
      };

      var tipsClasses = vue.computed(function () {
        return ["".concat(UPLOAD_NAME.value, "__tips ").concat(prefix.value, "-size-s")];
      });
      var errorClasses = vue.computed(function () {
        return tipsClasses.value.concat("".concat(UPLOAD_NAME.value, "__tips-error"));
      });
      return function () {
        var triggerElement = renderTrigger();
        return vue.createVNode("div", {
          "class": "".concat(UPLOAD_NAME.value)
        }, [renderInput(), renderCustom(triggerElement), renderSingleDisplay(triggerElement), singleDraggable.value && renderDraggerTrigger(), renderImgCard(), renderFlowList(triggerElement), renderDialog(), !uploadCtx.errorMsg && showTips.value && vue.createVNode("small", {
          "class": tipsClasses.value
        }, [props2.tips]), showErrorMsg.value && vue.createVNode("small", {
          "class": errorClasses.value
        }, [uploadCtx.errorMsg])]);
      };
    }
  });

  var Upload = withInstall(_Upload);

  var _ConfigProvider = vue.defineComponent({
    name: "TConfigProvider",
    props: {
      globalConfig: Object
    },
    setup: function setup(props) {
      vue.provide("globalConfig", vue.computed(function () {
        return props.globalConfig;
      }));
      var renderTNodeJSX = useTNodeJSX();
      return function () {
        var defaultNode = renderTNodeJSX("default");

        if (defaultNode.length === 1) {
          return defaultNode[0];
        }

        return vue.createVNode("div", null, [defaultNode]);
      };
    }
  });

  var ConfigProvider = withInstall(_ConfigProvider);

  var components = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Button: Button,
    Divider: Divider,
    Icon: Icon,
    Row: Row,
    Col: Col,
    Aside: Aside,
    Layout: Layout,
    Header: Header,
    Footer: Footer,
    Content: Content$1,
    Affix: Affix,
    Anchor: Anchor,
    AnchorItem: AnchorItem,
    AnchorTarget: AnchorTarget,
    Breadcrumb: Breadcrumb,
    BreadcrumbItem: BreadcrumbItem,
    Dropdown: Dropdown,
    DropdownItem: DropdownItem,
    DropdownMenu: DropdownMenu,
    Menu: Menu,
    HeadMenu: HeadMenu,
    Submenu: Submenu,
    MenuItem: MenuItem,
    MenuGroup: MenuGroup,
    Pagination: Pagination,
    Steps: Steps,
    StepItem: StepItem,
    Tabs: Tabs,
    TabPanel: TabPanel,
    Cascader: Cascader,
    Checkbox: Checkbox,
    CheckboxGroup: CheckboxGroup,
    DatePicker: DatePicker,
    Form: Form,
    FormItem: FormItem,
    Addon: Addon,
    Input: Input,
    InputGroup: InputGroup,
    InputNumber: InputNumber,
    Radio: Radio,
    RadioGroup: RadioGroup,
    RadioButton: RadioButton,
    Select: Select,
    Option: Option,
    OptionGroup: OptionGroup,
    Slider: Slider,
    SliderButton: SliderButton,
    Switch: Switch,
    TagInput: TagInput,
    SelectInput: SelectInput,
    Textarea: Textarea,
    Transfer: Transfer,
    TimePicker: TimePicker,
    TimeRangePicker: TimeRangePicker,
    TreeSelect: TreeSelect,
    ColorPickerPanel: ColorPickerPanel,
    ColorPicker: ColorPicker,
    Avatar: Avatar,
    AvatarGroup: AvatarGroup,
    Badge: Badge,
    Calendar: Calendar,
    Card: Card,
    Comment: Comment$1,
    List: List,
    ListItem: ListItem,
    ListItemMeta: ListItemMeta,
    Progress: Progress,
    Skeleton: Skeleton,
    Swiper: Swiper,
    SwiperItem: SwiperItem,
    BaseTable: BaseTable,
    PrimaryTable: PrimaryTable,
    EnhancedTable: EnhancedTable,
    Table: Table,
    Tag: Tag,
    CheckTag: CheckTag,
    Tooltip: Tooltip,
    Tree: Tree,
    Collapse: Collapse,
    CollapsePanel: CollapsePanel,
    Alert: Alert,
    DialogPlugin: DialogPlugin,
    Dialog: Dialog,
    Drawer: Drawer,
    LoadingPlugin: LoadingPlugin,
    Loading: Loading,
    MessagePlugin: MessagePlugin,
    Message: Message,
    NotifyPlugin: NotificationPlugin,
    Notification: Notification,
    Popconfirm: Popconfirm,
    Popup: Popup,
    Upload: Upload,
    ConfigProvider: ConfigProvider
  });

  function install(app, config) {
    Object.keys(components).forEach(function (key) {
      /plugin/i.test(key) ? app.use(components[key]) : app.use(components[key], config);
    });
  }
  var tdesign = {
    install: install,
    version: "0.15.4"
  };

  if (typeof console !== "undefined" && console.warn && typeof window !== "undefined") {
    console.warn("You are using a whole package of TDesign!");
  }

  exports.Addon = Addon;
  exports.Affix = Affix;
  exports.Alert = Alert;
  exports.Anchor = Anchor;
  exports.AnchorItem = AnchorItem;
  exports.AnchorTarget = AnchorTarget;
  exports.Aside = Aside;
  exports.Avatar = Avatar;
  exports.AvatarGroup = AvatarGroup;
  exports.Badge = Badge;
  exports.BaseTable = BaseTable;
  exports.Breadcrumb = Breadcrumb;
  exports.BreadcrumbItem = BreadcrumbItem;
  exports.Button = Button;
  exports.Calendar = Calendar;
  exports.Card = Card;
  exports.Cascader = Cascader;
  exports.CheckTag = CheckTag;
  exports.Checkbox = Checkbox;
  exports.CheckboxGroup = CheckboxGroup;
  exports.Col = Col;
  exports.Collapse = Collapse;
  exports.CollapsePanel = CollapsePanel;
  exports.ColorPicker = ColorPicker;
  exports.ColorPickerPanel = ColorPickerPanel;
  exports.Comment = Comment$1;
  exports.ConfigProvider = ConfigProvider;
  exports.Content = Content$1;
  exports.DatePicker = DatePicker;
  exports.Dialog = Dialog;
  exports.DialogPlugin = DialogPlugin;
  exports.Divider = Divider;
  exports.Drawer = Drawer;
  exports.Dropdown = Dropdown;
  exports.DropdownItem = DropdownItem;
  exports.DropdownMenu = DropdownMenu;
  exports.EnhancedTable = EnhancedTable;
  exports.Footer = Footer;
  exports.Form = Form;
  exports.FormItem = FormItem;
  exports.HeadMenu = HeadMenu;
  exports.Header = Header;
  exports.Icon = Icon;
  exports.Input = Input;
  exports.InputGroup = InputGroup;
  exports.InputNumber = InputNumber;
  exports.Layout = Layout;
  exports.List = List;
  exports.ListItem = ListItem;
  exports.ListItemMeta = ListItemMeta;
  exports.Loading = Loading;
  exports.LoadingPlugin = LoadingPlugin;
  exports.Menu = Menu;
  exports.MenuGroup = MenuGroup;
  exports.MenuItem = MenuItem;
  exports.Message = Message;
  exports.MessagePlugin = MessagePlugin;
  exports.Notification = Notification;
  exports.NotifyPlugin = NotificationPlugin;
  exports.Option = Option;
  exports.OptionGroup = OptionGroup;
  exports.Pagination = Pagination;
  exports.Popconfirm = Popconfirm;
  exports.Popup = Popup;
  exports.PrimaryTable = PrimaryTable;
  exports.Progress = Progress;
  exports.Radio = Radio;
  exports.RadioButton = RadioButton;
  exports.RadioGroup = RadioGroup;
  exports.Row = Row;
  exports.Select = Select;
  exports.SelectInput = SelectInput;
  exports.Skeleton = Skeleton;
  exports.Slider = Slider;
  exports.SliderButton = SliderButton;
  exports.StepItem = StepItem;
  exports.Steps = Steps;
  exports.Submenu = Submenu;
  exports.Swiper = Swiper;
  exports.SwiperItem = SwiperItem;
  exports.Switch = Switch;
  exports.TabPanel = TabPanel;
  exports.Table = Table;
  exports.Tabs = Tabs;
  exports.Tag = Tag;
  exports.TagInput = TagInput;
  exports.Textarea = Textarea;
  exports.TimePicker = TimePicker;
  exports.TimeRangePicker = TimeRangePicker;
  exports.Tooltip = Tooltip;
  exports.Transfer = Transfer;
  exports.Tree = Tree;
  exports.TreeSelect = TreeSelect;
  exports.Upload = Upload;
  exports["default"] = tdesign;
  exports.install = install;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=tdesign.js.map
